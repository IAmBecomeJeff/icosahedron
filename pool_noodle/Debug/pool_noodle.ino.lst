
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 6d 49 00 00 25 49 00 00     ... ....mI..%I..
      10:	25 49 00 00 25 49 00 00 25 49 00 00 25 49 00 00     %I..%I..%I..%I..
      20:	25 49 00 00 25 49 00 00 25 49 00 00 6d 49 00 00     %I..%I..%I..mI..
      30:	6d 49 00 00 25 49 00 00 99 5d 00 00 9d 5e 00 00     mI..%I...]...^..
      40:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      50:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      60:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      70:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      80:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      90:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      a0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      b0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      c0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      d0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      e0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
      f0:	6d 49 00 00 a5 60 00 00 6d 49 00 00 d1 61 00 00     mI...`..mI...a..
     100:	6d 49 00 00 fd 62 00 00 6d 49 00 00 6d 49 00 00     mI...b..mI..mI..
     110:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     120:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     130:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     140:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     150:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     160:	6d 49 00 00 b5 4d 00 00 6d 49 00 00 6d 49 00 00     mI...M..mI..mI..
     170:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     180:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     190:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     1a0:	6d 49 00 00 6d 49 00 00 6d 49 00 00 6d 49 00 00     mI..mI..mI..mI..
     1b0:	6d 49 00 00 6d 49 00 00 6d 49 00 00                 mI..mI..mI..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f004 fbd0 	bl	4974 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f004 fc24 	bl	4b20 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f004 fb95 	bl	4a10 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f004 fb86 	bl	4a10 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f006 f8ac 	bl	6464 <__libc_init_array>

	startup_late_hook();
     30c:	f004 fb38 	bl	4980 <startup_late_hook>
	main();
     310:	f005 fdcc 	bl	5eac <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c1c 	.word	0x1fff8c1c
     33c:	0000864c 	.word	0x0000864c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c1c 	.word	0x1fff8c1c
     348:	1fff9a40 	.word	0x1fff9a40
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e290939 	.word	0x5e290939
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c1c 	.word	0x1fff8c1c
     42c:	00000000 	.word	0x00000000
     430:	00008650 	.word	0x00008650

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c20 	.word	0x1fff8c20
     460:	00008650 	.word	0x00008650
     464:	1fff8c1c 	.word	0x1fff8c1c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char) [clone .part.10]>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
     490:	b470      	push	{r4, r5, r6}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     492:	4e15      	ldr	r6, [pc, #84]	; (4e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char) [clone .part.10]+0x58>)
     494:	8833      	ldrh	r3, [r6, #0]
     496:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     49a:	f243 6519 	movw	r5, #13849	; 0x3619
     49e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     4a2:	442b      	add	r3, r5
     4a4:	b29b      	uxth	r3, r3
     4a6:	eb03 2443 	add.w	r4, r3, r3, lsl #9
     4aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     4ae:	442c      	add	r4, r5
     4b0:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4b2:	eb04 2514 	add.w	r5, r4, r4, lsr #8
     4b6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4ba:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
     4bc:	b2ed      	uxtb	r5, r5
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
     4c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4c6:	390a      	subs	r1, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
     4c8:	3a0a      	subs	r2, #10
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4ca:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
     4ce:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
     4d2:	eb02 2525 	add.w	r5, r2, r5, asr #8
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4d6:	eb01 2323 	add.w	r3, r1, r3, asr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4da:	8034      	strh	r4, [r6, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
     4dc:	f880 523d 	strb.w	r5, [r0, #573]	; 0x23d
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
     4e0:	f880 323b 	strb.w	r3, [r0, #571]	; 0x23b
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}
     4e4:	bc70      	pop	{r4, r5, r6}
     4e6:	4770      	bx	lr
     4e8:	1fff872e 	.word	0x1fff872e

000004ec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     4ec:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     4ee:	2101      	movs	r1, #1
     4f0:	4604      	mov	r4, r0
     4f2:	200e      	movs	r0, #14
     4f4:	f004 fa9e 	bl	4a34 <pinMode>
     4f8:	2007      	movs	r0, #7
     4fa:	2101      	movs	r1, #1
     4fc:	f004 fa9a 	bl	4a34 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     500:	69a0      	ldr	r0, [r4, #24]
     502:	b158      	cbz	r0, 51c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     504:	6803      	ldr	r3, [r0, #0]
     506:	4a07      	ldr	r2, [pc, #28]	; (524 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     508:	685b      	ldr	r3, [r3, #4]
     50a:	4293      	cmp	r3, r2
     50c:	d107      	bne.n	51e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     50e:	6842      	ldr	r2, [r0, #4]
     510:	7b01      	ldrb	r1, [r0, #12]
     512:	7813      	ldrb	r3, [r2, #0]
     514:	ea23 0301 	bic.w	r3, r3, r1
     518:	7013      	strb	r3, [r2, #0]
     51a:	bd10      	pop	{r4, pc}
     51c:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     522:	4718      	bx	r3
     524:	00000481 	.word	0x00000481

00000528 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
     52a:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     52c:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     52e:	6805      	ldr	r5, [r0, #0]
     530:	f88d 3004 	strb.w	r3, [sp, #4]
     534:	f88d 3005 	strb.w	r3, [sp, #5]
     538:	f88d 3006 	strb.w	r3, [sp, #6]
     53c:	682e      	ldr	r6, [r5, #0]
     53e:	4a37      	ldr	r2, [pc, #220]	; (61c <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     540:	f88d 3008 	strb.w	r3, [sp, #8]
     544:	4296      	cmp	r6, r2
     546:	f88d 3009 	strb.w	r3, [sp, #9]
     54a:	f88d 300a 	strb.w	r3, [sp, #10]
     54e:	d15f      	bne.n	610 <CLEDController::clearLeds(int)+0xe8>
     550:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     552:	9104      	str	r1, [sp, #16]
     554:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     556:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     558:	a801      	add	r0, sp, #4
     55a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     55c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     560:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     564:	f88d 3020 	strb.w	r3, [sp, #32]
     568:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	d015      	beq.n	598 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     56c:	f88d 301d 	strb.w	r3, [sp, #29]
     570:	f88d 301c 	strb.w	r3, [sp, #28]
     574:	f88d 301b 	strb.w	r3, [sp, #27]
     578:	f88d 301a 	strb.w	r3, [sp, #26]
     57c:	f88d 3019 	strb.w	r3, [sp, #25]
     580:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     584:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     586:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     588:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     58c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     58e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     590:	a903      	add	r1, sp, #12
     592:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     594:	b00b      	add	sp, #44	; 0x2c
     596:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     598:	4a21      	ldr	r2, [pc, #132]	; (620 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     59a:	7813      	ldrb	r3, [r2, #0]
     59c:	3301      	adds	r3, #1
     59e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5a2:	f013 0f01 	tst.w	r3, #1
     5a6:	bf14      	ite	ne
     5a8:	2180      	movne	r1, #128	; 0x80
     5aa:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ac:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5ae:	079a      	lsls	r2, r3, #30
     5b0:	bf44      	itt	mi
     5b2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5b6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5b8:	075b      	lsls	r3, r3, #29
     5ba:	bf48      	it	mi
     5bc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5c0:	3110      	adds	r1, #16
     5c2:	2200      	movs	r2, #0
     5c4:	b2c9      	uxtb	r1, r1
     5c6:	f10d 031b 	add.w	r3, sp, #27
     5ca:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5ce:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5d2:	b1aa      	cbz	r2, 600 <CLEDController::clearLeds(int)+0xd8>
     5d4:	fb9e f2f2 	sdiv	r2, lr, r2
     5d8:	b2d2      	uxtb	r2, r2
     5da:	1c50      	adds	r0, r2, #1
     5dc:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5de:	fb00 1501 	mla	r5, r0, r1, r1
     5e2:	122d      	asrs	r5, r5, #8
     5e4:	7018      	strb	r0, [r3, #0]
     5e6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5e8:	b105      	cbz	r5, 5ec <CLEDController::clearLeds(int)+0xc4>
     5ea:	3e01      	subs	r6, #1
     5ec:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     5f0:	b100      	cbz	r0, 5f4 <CLEDController::clearLeds(int)+0xcc>
     5f2:	701a      	strb	r2, [r3, #0]
     5f4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5f6:	429f      	cmp	r7, r3
     5f8:	d008      	beq.n	60c <CLEDController::clearLeds(int)+0xe4>
     5fa:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5fc:	2a00      	cmp	r2, #0
     5fe:	d1e9      	bne.n	5d4 <CLEDController::clearLeds(int)+0xac>
     600:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     602:	f803 2c03 	strb.w	r2, [r3, #-3]
     606:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     608:	429f      	cmp	r7, r3
     60a:	d1f6      	bne.n	5fa <CLEDController::clearLeds(int)+0xd2>
     60c:	6825      	ldr	r5, [r4, #0]
     60e:	e7b9      	b.n	584 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     610:	460a      	mov	r2, r1
     612:	ab02      	add	r3, sp, #8
     614:	a901      	add	r1, sp, #4
     616:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     618:	b00b      	add	sp, #44	; 0x2c
     61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     61c:	000006e9 	.word	0x000006e9
     620:	1fff8c38 	.word	0x1fff8c38

00000624 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     624:	b5f0      	push	{r4, r5, r6, r7, lr}
     626:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     628:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     62a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     62c:	789b      	ldrb	r3, [r3, #2]
     62e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     630:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     632:	9101      	str	r1, [sp, #4]
     634:	9202      	str	r2, [sp, #8]
     636:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     638:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     63c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     640:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	d017      	beq.n	676 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     646:	2300      	movs	r3, #0
     648:	f88d 3015 	strb.w	r3, [sp, #21]
     64c:	f88d 3014 	strb.w	r3, [sp, #20]
     650:	f88d 3013 	strb.w	r3, [sp, #19]
     654:	f88d 3012 	strb.w	r3, [sp, #18]
     658:	f88d 3011 	strb.w	r3, [sp, #17]
     65c:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     660:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     662:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     664:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     666:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     668:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     66c:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     66e:	a901      	add	r1, sp, #4
     670:	4798      	blx	r3
  }
     672:	b009      	add	sp, #36	; 0x24
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     676:	4a1b      	ldr	r2, [pc, #108]	; (6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     678:	7813      	ldrb	r3, [r2, #0]
     67a:	3301      	adds	r3, #1
     67c:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     680:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     684:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     686:	bf14      	ite	ne
     688:	2280      	movne	r2, #128	; 0x80
     68a:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     68c:	0799      	lsls	r1, r3, #30
     68e:	bf44      	itt	mi
     690:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     694:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     696:	075b      	lsls	r3, r3, #29
     698:	bf48      	it	mi
     69a:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     69e:	3210      	adds	r2, #16
     6a0:	b2d2      	uxtb	r2, r2
     6a2:	f10d 0313 	add.w	r3, sp, #19
     6a6:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6aa:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6ae:	b1ac      	cbz	r4, 6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     6b0:	fb9e f4f4 	sdiv	r4, lr, r4
     6b4:	b2e4      	uxtb	r4, r4
     6b6:	1c61      	adds	r1, r4, #1
     6b8:	b2c9      	uxtb	r1, r1
     6ba:	fb01 2502 	mla	r5, r1, r2, r2
     6be:	122d      	asrs	r5, r5, #8
     6c0:	7019      	strb	r1, [r3, #0]
     6c2:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6c4:	b105      	cbz	r5, 6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     6c6:	3e01      	subs	r6, #1
     6c8:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6cc:	b101      	cbz	r1, 6d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6ce:	701c      	strb	r4, [r3, #0]
     6d0:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6d2:	42bb      	cmp	r3, r7
     6d4:	d0c4      	beq.n	660 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     6d6:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d8:	2c00      	cmp	r4, #0
     6da:	d1e9      	bne.n	6b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     6dc:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6de:	f803 4c03 	strb.w	r4, [r3, #-3]
     6e2:	e7f5      	b.n	6d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6e4:	1fff8c38 	.word	0x1fff8c38

000006e8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ea:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6ec:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6ee:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     6f0:	789b      	ldrb	r3, [r3, #2]
     6f2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6f4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     6f6:	9101      	str	r1, [sp, #4]
     6f8:	9202      	str	r2, [sp, #8]
     6fa:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6fc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     700:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     704:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	d016      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     70a:	2300      	movs	r3, #0
     70c:	f88d 3015 	strb.w	r3, [sp, #21]
     710:	f88d 3014 	strb.w	r3, [sp, #20]
     714:	f88d 3013 	strb.w	r3, [sp, #19]
     718:	f88d 3012 	strb.w	r3, [sp, #18]
     71c:	f88d 3011 	strb.w	r3, [sp, #17]
     720:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     724:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     726:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     728:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     72a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     72e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     730:	a901      	add	r1, sp, #4
     732:	4790      	blx	r2
  }
     734:	b009      	add	sp, #36	; 0x24
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     738:	4a1b      	ldr	r2, [pc, #108]	; (7a8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     73a:	7813      	ldrb	r3, [r2, #0]
     73c:	3301      	adds	r3, #1
     73e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     742:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     746:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     748:	bf14      	ite	ne
     74a:	2280      	movne	r2, #128	; 0x80
     74c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     74e:	0799      	lsls	r1, r3, #30
     750:	bf44      	itt	mi
     752:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     756:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     758:	075b      	lsls	r3, r3, #29
     75a:	bf48      	it	mi
     75c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     760:	3210      	adds	r2, #16
     762:	b2d2      	uxtb	r2, r2
     764:	f10d 0313 	add.w	r3, sp, #19
     768:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     76c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     770:	b1ac      	cbz	r4, 79e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     772:	fb9e f4f4 	sdiv	r4, lr, r4
     776:	b2e4      	uxtb	r4, r4
     778:	1c61      	adds	r1, r4, #1
     77a:	b2c9      	uxtb	r1, r1
     77c:	fb01 2502 	mla	r5, r1, r2, r2
     780:	122d      	asrs	r5, r5, #8
     782:	7019      	strb	r1, [r3, #0]
     784:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     786:	b105      	cbz	r5, 78a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     788:	3e01      	subs	r6, #1
     78a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     78e:	b101      	cbz	r1, 792 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     790:	701c      	strb	r4, [r3, #0]
     792:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     794:	42bb      	cmp	r3, r7
     796:	d0c5      	beq.n	724 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     798:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     79a:	2c00      	cmp	r4, #0
     79c:	d1e9      	bne.n	772 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     79e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7a0:	f803 4c03 	strb.w	r4, [r3, #-3]
     7a4:	e7f5      	b.n	792 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a6:	bf00      	nop
     7a8:	1fff8c38 	.word	0x1fff8c38

000007ac <change_palette(LEDStruct&) [clone .part.9]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	
}

// Change palette
void change_palette(LEDStruct& leds) {
     7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     7b0:	2120      	movs	r1, #32
     7b2:	b08b      	sub	sp, #44	; 0x2c
     7b4:	4604      	mov	r4, r0
     7b6:	483d      	ldr	r0, [pc, #244]	; (8ac <change_palette(LEDStruct&) [clone .part.9]+0x100>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
     7b8:	4d3d      	ldr	r5, [pc, #244]	; (8b0 <change_palette(LEDStruct&) [clone .part.9]+0x104>)
     7ba:	f005 f97b 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7be:	483d      	ldr	r0, [pc, #244]	; (8b4 <change_palette(LEDStruct&) [clone .part.9]+0x108>)
     7c0:	f005 fb7c 	bl	5ebc <Print::println()>
     7c4:	483c      	ldr	r0, [pc, #240]	; (8b8 <change_palette(LEDStruct&) [clone .part.9]+0x10c>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
     7c6:	4a3d      	ldr	r2, [pc, #244]	; (8bc <change_palette(LEDStruct&) [clone .part.9]+0x110>)
     7c8:	8803      	ldrh	r3, [r0, #0]
     7ca:	7811      	ldrb	r1, [r2, #0]
     7cc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     7d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     7d4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     7d8:	3319      	adds	r3, #25
     7da:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     7dc:	eb03 2213 	add.w	r2, r3, r3, lsr #8
     7e0:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
     7e2:	fb12 f201 	smulbb	r2, r2, r1
     7e6:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     7e8:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
     7ea:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
     7ee:	f884 2227 	strb.w	r2, [r4, #551]	; 0x227
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     7f2:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     7f4:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     7f8:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7fa:	3701      	adds	r7, #1
        } while ( u.index != 255);
     7fc:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7fe:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     800:	d1f8      	bne.n	7f4 <change_palette(LEDStruct&) [clone .part.9]+0x48>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     802:	f8d8 3000 	ldr.w	r3, [r8]
     806:	9707      	str	r7, [sp, #28]
     808:	f204 12f7 	addw	r2, r4, #503	; 0x1f7
        CRGB rgbstart( u.r, u.g, u.b);
     80c:	ea4f 6913 	mov.w	r9, r3, lsr #24
     810:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     814:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     818:	f04f 33ff 	mov.w	r3, #4294967295
     81c:	9206      	str	r2, [sp, #24]
     81e:	9305      	str	r3, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     820:	2400      	movs	r4, #0
     822:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     824:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     828:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     82a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     82e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     832:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     836:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     838:	b2f9      	uxtb	r1, r7
     83a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     83e:	9103      	str	r1, [sp, #12]
     840:	b2e9      	uxtb	r1, r5
     842:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     844:	fa5f f18c 	uxtb.w	r1, ip
     848:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     84a:	9907      	ldr	r1, [sp, #28]
     84c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     84e:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     850:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     854:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     858:	d80c      	bhi.n	874 <change_palette(LEDStruct&) [clone .part.9]+0xc8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     85a:	9905      	ldr	r1, [sp, #20]
     85c:	458c      	cmp	ip, r1
     85e:	dc07      	bgt.n	870 <change_palette(LEDStruct&) [clone .part.9]+0xc4>
     860:	290f      	cmp	r1, #15
     862:	d005      	beq.n	870 <change_palette(LEDStruct&) [clone .part.9]+0xc4>
                    istart8 = lastSlotUsed + 1;
     864:	3101      	adds	r1, #1
     866:	b2c9      	uxtb	r1, r1
     868:	428b      	cmp	r3, r1
     86a:	9102      	str	r1, [sp, #8]
     86c:	bf38      	it	cc
     86e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     870:	b259      	sxtb	r1, r3
     872:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     874:	a908      	add	r1, sp, #32
     876:	9100      	str	r1, [sp, #0]
     878:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     87a:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     87e:	f88d a025 	strb.w	sl, [sp, #37]	; 0x25
        b = rhs.b;
     882:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     886:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     88a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     88e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     892:	f003 f969 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     896:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     898:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
        b = rhs.b;
     89c:	f8dd e010 	ldr.w	lr, [sp, #16]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     8a0:	46ca      	mov	sl, r9
     8a2:	d1bf      	bne.n	824 <change_palette(LEDStruct&) [clone .part.9]+0x78>
		leds.target_palette = palettes[leds.palette_index];
	}
}
     8a4:	b00b      	add	sp, #44	; 0x2c
     8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8aa:	bf00      	nop
     8ac:	000074a0 	.word	0x000074a0
     8b0:	00007254 	.word	0x00007254
     8b4:	1fff8738 	.word	0x1fff8738
     8b8:	1fff872e 	.word	0x1fff872e
     8bc:	1fff872d 	.word	0x1fff872d

000008c0 <LEDDebug(LEDStruct&)>:
}



// Debugging function
void LEDDebug(LEDStruct& leds) {
     8c0:	b538      	push	{r3, r4, r5, lr}
     8c2:	2100      	movs	r1, #0
     8c4:	4604      	mov	r4, r0
     8c6:	48bc      	ldr	r0, [pc, #752]	; (bb8 <LEDDebug(LEDStruct&)+0x2f8>)
     8c8:	f005 f8f4 	bl	5ab4 <usb_serial_write>
     8cc:	48bb      	ldr	r0, [pc, #748]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     8ce:	f005 faf5 	bl	5ebc <Print::println()>
     8d2:	2119      	movs	r1, #25
     8d4:	48ba      	ldr	r0, [pc, #744]	; (bc0 <LEDDebug(LEDStruct&)+0x300>)
     8d6:	f005 f8ed 	bl	5ab4 <usb_serial_write>
     8da:	48b8      	ldr	r0, [pc, #736]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     8dc:	f005 faee 	bl	5ebc <Print::println()>
     8e0:	2112      	movs	r1, #18
     8e2:	48b8      	ldr	r0, [pc, #736]	; (bc4 <LEDDebug(LEDStruct&)+0x304>)
     8e4:	f005 f8e6 	bl	5ab4 <usb_serial_write>
	Serial.println("");
	Serial.println("=========================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
     8e8:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
     8ec:	2b00      	cmp	r3, #0
     8ee:	f000 8107 	beq.w	b00 <LEDDebug(LEDStruct&)+0x240>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
     8f2:	2b01      	cmp	r3, #1
     8f4:	f000 81df 	beq.w	cb6 <LEDDebug(LEDStruct&)+0x3f6>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
     8f8:	2b02      	cmp	r3, #2
     8fa:	f000 81e4 	beq.w	cc6 <LEDDebug(LEDStruct&)+0x406>
     8fe:	2112      	movs	r1, #18
     900:	48b1      	ldr	r0, [pc, #708]	; (bc8 <LEDDebug(LEDStruct&)+0x308>)
     902:	f005 f8d7 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     906:	2300      	movs	r3, #0
     908:	220a      	movs	r2, #10
     90a:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
     90e:	48ab      	ldr	r0, [pc, #684]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     910:	f005 fae4 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     914:	48a9      	ldr	r0, [pc, #676]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     916:	f005 fad1 	bl	5ebc <Print::println()>
     91a:	2112      	movs	r1, #18
     91c:	48ab      	ldr	r0, [pc, #684]	; (bcc <LEDDebug(LEDStruct&)+0x30c>)
     91e:	f005 f8c9 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     922:	2300      	movs	r3, #0
     924:	220a      	movs	r2, #10
     926:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
     92a:	48a4      	ldr	r0, [pc, #656]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     92c:	f005 fad6 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     930:	48a2      	ldr	r0, [pc, #648]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     932:	f005 fac3 	bl	5ebc <Print::println()>
     936:	2112      	movs	r1, #18
     938:	48a5      	ldr	r0, [pc, #660]	; (bd0 <LEDDebug(LEDStruct&)+0x310>)
     93a:	f005 f8bb 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     93e:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
     942:	489e      	ldr	r0, [pc, #632]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     944:	f005 fb0a 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     948:	489c      	ldr	r0, [pc, #624]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     94a:	f005 fab7 	bl	5ebc <Print::println()>
     94e:	2112      	movs	r1, #18
     950:	48a0      	ldr	r0, [pc, #640]	; (bd4 <LEDDebug(LEDStruct&)+0x314>)
     952:	f005 f8af 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     956:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
     95a:	4898      	ldr	r0, [pc, #608]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     95c:	f005 fafe 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     960:	4896      	ldr	r0, [pc, #600]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     962:	f005 faab 	bl	5ebc <Print::println()>
     966:	2112      	movs	r1, #18
     968:	489b      	ldr	r0, [pc, #620]	; (bd8 <LEDDebug(LEDStruct&)+0x318>)
     96a:	f005 f8a3 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     96e:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
     972:	4892      	ldr	r0, [pc, #584]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     974:	f005 faf2 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     978:	4890      	ldr	r0, [pc, #576]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     97a:	f005 fa9f 	bl	5ebc <Print::println()>
     97e:	2112      	movs	r1, #18
     980:	4896      	ldr	r0, [pc, #600]	; (bdc <LEDDebug(LEDStruct&)+0x31c>)
     982:	f005 f897 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     986:	2300      	movs	r3, #0
     988:	220a      	movs	r2, #10
     98a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
     98e:	488b      	ldr	r0, [pc, #556]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     990:	f005 faa4 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     994:	4889      	ldr	r0, [pc, #548]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     996:	f005 fa91 	bl	5ebc <Print::println()>
     99a:	2112      	movs	r1, #18
     99c:	4890      	ldr	r0, [pc, #576]	; (be0 <LEDDebug(LEDStruct&)+0x320>)
     99e:	f005 f889 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     9a2:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
     9a6:	4885      	ldr	r0, [pc, #532]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9a8:	f005 fad8 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     9ac:	4883      	ldr	r0, [pc, #524]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9ae:	f005 fa85 	bl	5ebc <Print::println()>
     9b2:	2119      	movs	r1, #25
     9b4:	4882      	ldr	r0, [pc, #520]	; (bc0 <LEDDebug(LEDStruct&)+0x300>)
     9b6:	f005 f87d 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     9ba:	4880      	ldr	r0, [pc, #512]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9bc:	f005 fa7e 	bl	5ebc <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
     9c0:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
     9c4:	2d05      	cmp	r5, #5
     9c6:	f000 812f 	beq.w	c28 <LEDDebug(LEDStruct&)+0x368>
     9ca:	2d08      	cmp	r5, #8
     9cc:	f000 80a0 	beq.w	b10 <LEDDebug(LEDStruct&)+0x250>
     9d0:	b325      	cbz	r5, a1c <LEDDebug(LEDStruct&)+0x15c>
     9d2:	2100      	movs	r1, #0
     9d4:	4878      	ldr	r0, [pc, #480]	; (bb8 <LEDDebug(LEDStruct&)+0x2f8>)
     9d6:	f005 f86d 	bl	5ab4 <usb_serial_write>
     9da:	4878      	ldr	r0, [pc, #480]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9dc:	f005 fa6e 	bl	5ebc <Print::println()>
     9e0:	2115      	movs	r1, #21
     9e2:	4880      	ldr	r0, [pc, #512]	; (be4 <LEDDebug(LEDStruct&)+0x324>)
     9e4:	f005 f866 	bl	5ab4 <usb_serial_write>
     9e8:	4874      	ldr	r0, [pc, #464]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9ea:	f005 fa67 	bl	5ebc <Print::println()>
     9ee:	2100      	movs	r1, #0
     9f0:	4871      	ldr	r0, [pc, #452]	; (bb8 <LEDDebug(LEDStruct&)+0x2f8>)
     9f2:	f005 f85f 	bl	5ab4 <usb_serial_write>
     9f6:	4871      	ldr	r0, [pc, #452]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     9f8:	f005 fa60 	bl	5ebc <Print::println()>
     9fc:	2119      	movs	r1, #25
     9fe:	4870      	ldr	r0, [pc, #448]	; (bc0 <LEDDebug(LEDStruct&)+0x300>)
     a00:	f005 f858 	bl	5ab4 <usb_serial_write>
     a04:	486d      	ldr	r0, [pc, #436]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a06:	f005 fa59 	bl	5ebc <Print::println()>
     a0a:	2100      	movs	r1, #0
     a0c:	486a      	ldr	r0, [pc, #424]	; (bb8 <LEDDebug(LEDStruct&)+0x2f8>)
     a0e:	f005 f851 	bl	5ab4 <usb_serial_write>
     a12:	486a      	ldr	r0, [pc, #424]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
     a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     a18:	f005 ba50 	b.w	5ebc <Print::println()>
     a1c:	2116      	movs	r1, #22
     a1e:	4872      	ldr	r0, [pc, #456]	; (be8 <LEDDebug(LEDStruct&)+0x328>)
     a20:	f005 f848 	bl	5ab4 <usb_serial_write>
     a24:	4865      	ldr	r0, [pc, #404]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a26:	f005 fa49 	bl	5ebc <Print::println()>
     a2a:	210f      	movs	r1, #15
     a2c:	486f      	ldr	r0, [pc, #444]	; (bec <LEDDebug(LEDStruct&)+0x32c>)
     a2e:	f005 f841 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a32:	462b      	mov	r3, r5
     a34:	220a      	movs	r2, #10
     a36:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
     a3a:	4860      	ldr	r0, [pc, #384]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a3c:	f005 fa4e 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     a40:	485e      	ldr	r0, [pc, #376]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a42:	f005 fa3b 	bl	5ebc <Print::println()>
     a46:	210f      	movs	r1, #15
     a48:	4869      	ldr	r0, [pc, #420]	; (bf0 <LEDDebug(LEDStruct&)+0x330>)
     a4a:	f005 f833 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a4e:	462b      	mov	r3, r5
     a50:	220a      	movs	r2, #10
     a52:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
     a56:	4859      	ldr	r0, [pc, #356]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a58:	f005 fa40 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     a5c:	4857      	ldr	r0, [pc, #348]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a5e:	f005 fa2d 	bl	5ebc <Print::println()>
     a62:	210f      	movs	r1, #15
     a64:	4863      	ldr	r0, [pc, #396]	; (bf4 <LEDDebug(LEDStruct&)+0x334>)
     a66:	f005 f825 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a6a:	462b      	mov	r3, r5
     a6c:	220a      	movs	r2, #10
     a6e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
     a72:	4852      	ldr	r0, [pc, #328]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a74:	f005 fa32 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     a78:	4850      	ldr	r0, [pc, #320]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a7a:	f005 fa1f 	bl	5ebc <Print::println()>
     a7e:	210f      	movs	r1, #15
     a80:	485d      	ldr	r0, [pc, #372]	; (bf8 <LEDDebug(LEDStruct&)+0x338>)
     a82:	f005 f817 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a86:	462b      	mov	r3, r5
     a88:	220a      	movs	r2, #10
     a8a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
     a8e:	484b      	ldr	r0, [pc, #300]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a90:	f005 fa24 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     a94:	4849      	ldr	r0, [pc, #292]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     a96:	f005 fa11 	bl	5ebc <Print::println()>
     a9a:	210f      	movs	r1, #15
     a9c:	4857      	ldr	r0, [pc, #348]	; (bfc <LEDDebug(LEDStruct&)+0x33c>)
     a9e:	f005 f809 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     aa2:	462b      	mov	r3, r5
     aa4:	220a      	movs	r2, #10
     aa6:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
     aaa:	4844      	ldr	r0, [pc, #272]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     aac:	f005 fa16 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     ab0:	4842      	ldr	r0, [pc, #264]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     ab2:	f005 fa03 	bl	5ebc <Print::println()>
     ab6:	210f      	movs	r1, #15
     ab8:	4851      	ldr	r0, [pc, #324]	; (c00 <LEDDebug(LEDStruct&)+0x340>)
     aba:	f004 fffb 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     abe:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
     ac2:	483e      	ldr	r0, [pc, #248]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     ac4:	f005 fa4a 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ac8:	483c      	ldr	r0, [pc, #240]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     aca:	f005 f9f7 	bl	5ebc <Print::println()>
     ace:	210f      	movs	r1, #15
     ad0:	484c      	ldr	r0, [pc, #304]	; (c04 <LEDDebug(LEDStruct&)+0x344>)
     ad2:	f004 ffef 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ad6:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
     ada:	4838      	ldr	r0, [pc, #224]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     adc:	f005 fa3e 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ae0:	4836      	ldr	r0, [pc, #216]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     ae2:	f005 f9eb 	bl	5ebc <Print::println()>
     ae6:	210f      	movs	r1, #15
     ae8:	4847      	ldr	r0, [pc, #284]	; (c08 <LEDDebug(LEDStruct&)+0x348>)
     aea:	f004 ffe3 	bl	5ab4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     aee:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
     af2:	4832      	ldr	r0, [pc, #200]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     af4:	f005 fa32 	bl	5f5c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     af8:	4830      	ldr	r0, [pc, #192]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     afa:	f005 f9df 	bl	5ebc <Print::println()>
     afe:	e77d      	b.n	9fc <LEDDebug(LEDStruct&)+0x13c>
     b00:	2107      	movs	r1, #7
     b02:	4842      	ldr	r0, [pc, #264]	; (c0c <LEDDebug(LEDStruct&)+0x34c>)
     b04:	f004 ffd6 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     b08:	482c      	ldr	r0, [pc, #176]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b0a:	f005 f9d7 	bl	5ebc <Print::println()>
     b0e:	e6f6      	b.n	8fe <LEDDebug(LEDStruct&)+0x3e>
     b10:	2109      	movs	r1, #9
     b12:	483f      	ldr	r0, [pc, #252]	; (c10 <LEDDebug(LEDStruct&)+0x350>)
     b14:	f004 ffce 	bl	5ab4 <usb_serial_write>
			Serial.println(leds.rainbow_rot);
			break;

		case FIRE:
			Serial.print("=====FIRE");
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
     b18:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
     b1c:	2b00      	cmp	r3, #0
     b1e:	f040 80c5 	bne.w	cac <LEDDebug(LEDStruct&)+0x3ec>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
     b22:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
     b26:	2b00      	cmp	r3, #0
     b28:	f040 80bb 	bne.w	ca2 <LEDDebug(LEDStruct&)+0x3e2>
     b2c:	2105      	movs	r1, #5
     b2e:	4839      	ldr	r0, [pc, #228]	; (c14 <LEDDebug(LEDStruct&)+0x354>)
     b30:	f004 ffc0 	bl	5ab4 <usb_serial_write>
     b34:	4821      	ldr	r0, [pc, #132]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b36:	f005 f9c1 	bl	5ebc <Print::println()>
     b3a:	210d      	movs	r1, #13
     b3c:	4836      	ldr	r0, [pc, #216]	; (c18 <LEDDebug(LEDStruct&)+0x358>)
     b3e:	f004 ffb9 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b42:	2300      	movs	r3, #0
     b44:	220a      	movs	r2, #10
     b46:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
     b4a:	481c      	ldr	r0, [pc, #112]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b4c:	f005 f9c6 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     b50:	481a      	ldr	r0, [pc, #104]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b52:	f005 f9b3 	bl	5ebc <Print::println()>
     b56:	210d      	movs	r1, #13
     b58:	4830      	ldr	r0, [pc, #192]	; (c1c <LEDDebug(LEDStruct&)+0x35c>)
     b5a:	f004 ffab 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b5e:	2300      	movs	r3, #0
     b60:	220a      	movs	r2, #10
     b62:	f894 123c 	ldrb.w	r1, [r4, #572]	; 0x23c
     b66:	4815      	ldr	r0, [pc, #84]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b68:	f005 f9b8 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     b6c:	4813      	ldr	r0, [pc, #76]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b6e:	f005 f9a5 	bl	5ebc <Print::println()>
			Serial.println("=====");
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
     b72:	f894 52d6 	ldrb.w	r5, [r4, #726]	; 0x2d6
     b76:	2d00      	cmp	r5, #0
     b78:	f47f af2b 	bne.w	9d2 <LEDDebug(LEDStruct&)+0x112>
     b7c:	210d      	movs	r1, #13
     b7e:	4828      	ldr	r0, [pc, #160]	; (c20 <LEDDebug(LEDStruct&)+0x360>)
     b80:	f004 ff98 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b84:	462b      	mov	r3, r5
     b86:	220a      	movs	r2, #10
     b88:	f894 123b 	ldrb.w	r1, [r4, #571]	; 0x23b
     b8c:	480b      	ldr	r0, [pc, #44]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b8e:	f005 f9a5 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     b92:	480a      	ldr	r0, [pc, #40]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     b94:	f005 f992 	bl	5ebc <Print::println()>
     b98:	210d      	movs	r1, #13
     b9a:	4822      	ldr	r0, [pc, #136]	; (c24 <LEDDebug(LEDStruct&)+0x364>)
     b9c:	f004 ff8a 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     ba0:	462b      	mov	r3, r5
     ba2:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
     ba6:	4805      	ldr	r0, [pc, #20]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     ba8:	220a      	movs	r2, #10
     baa:	f005 f997 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     bae:	4803      	ldr	r0, [pc, #12]	; (bbc <LEDDebug(LEDStruct&)+0x2fc>)
     bb0:	f005 f984 	bl	5ebc <Print::println()>
     bb4:	e70d      	b.n	9d2 <LEDDebug(LEDStruct&)+0x112>
     bb6:	bf00      	nop
     bb8:	0000772c 	.word	0x0000772c
     bbc:	1fff8738 	.word	0x1fff8738
     bc0:	000074c4 	.word	0x000074c4
     bc4:	000074e0 	.word	0x000074e0
     bc8:	0000750c 	.word	0x0000750c
     bcc:	00007520 	.word	0x00007520
     bd0:	00007534 	.word	0x00007534
     bd4:	00007548 	.word	0x00007548
     bd8:	0000755c 	.word	0x0000755c
     bdc:	00007570 	.word	0x00007570
     be0:	00007584 	.word	0x00007584
     be4:	000076e0 	.word	0x000076e0
     be8:	00007598 	.word	0x00007598
     bec:	000075b0 	.word	0x000075b0
     bf0:	000075c0 	.word	0x000075c0
     bf4:	000075d0 	.word	0x000075d0
     bf8:	000075e0 	.word	0x000075e0
     bfc:	000075f0 	.word	0x000075f0
     c00:	00007600 	.word	0x00007600
     c04:	00007610 	.word	0x00007610
     c08:	00007620 	.word	0x00007620
     c0c:	000074f4 	.word	0x000074f4
     c10:	00007684 	.word	0x00007684
     c14:	000074d8 	.word	0x000074d8
     c18:	000076a0 	.word	0x000076a0
     c1c:	000076b0 	.word	0x000076b0
     c20:	000076c0 	.word	0x000076c0
     c24:	000076d0 	.word	0x000076d0
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
     c28:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
     c2c:	b38b      	cbz	r3, c92 <LEDDebug(LEDStruct&)+0x3d2>
     c2e:	2119      	movs	r1, #25
     c30:	4829      	ldr	r0, [pc, #164]	; (cd8 <LEDDebug(LEDStruct&)+0x418>)
     c32:	f004 ff3f 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c36:	4829      	ldr	r0, [pc, #164]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c38:	f005 f940 	bl	5ebc <Print::println()>
     c3c:	210b      	movs	r1, #11
     c3e:	4828      	ldr	r0, [pc, #160]	; (ce0 <LEDDebug(LEDStruct&)+0x420>)
     c40:	f004 ff38 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c44:	2300      	movs	r3, #0
     c46:	220a      	movs	r2, #10
     c48:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
     c4c:	4823      	ldr	r0, [pc, #140]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c4e:	f005 f945 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     c52:	4822      	ldr	r0, [pc, #136]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c54:	f005 f932 	bl	5ebc <Print::println()>
     c58:	210b      	movs	r1, #11
     c5a:	4822      	ldr	r0, [pc, #136]	; (ce4 <LEDDebug(LEDStruct&)+0x424>)
     c5c:	f004 ff2a 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c60:	2300      	movs	r3, #0
     c62:	220a      	movs	r2, #10
     c64:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
     c68:	481c      	ldr	r0, [pc, #112]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c6a:	f005 f937 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     c6e:	481b      	ldr	r0, [pc, #108]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c70:	f005 f924 	bl	5ebc <Print::println()>
     c74:	210b      	movs	r1, #11
     c76:	481c      	ldr	r0, [pc, #112]	; (ce8 <LEDDebug(LEDStruct&)+0x428>)
     c78:	f004 ff1c 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     c7c:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
     c80:	4816      	ldr	r0, [pc, #88]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c82:	2300      	movs	r3, #0
     c84:	220a      	movs	r2, #10
     c86:	f005 f929 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     c8a:	4814      	ldr	r0, [pc, #80]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c8c:	f005 f916 	bl	5ebc <Print::println()>
     c90:	e6b4      	b.n	9fc <LEDDebug(LEDStruct&)+0x13c>
     c92:	2113      	movs	r1, #19
     c94:	4815      	ldr	r0, [pc, #84]	; (cec <LEDDebug(LEDStruct&)+0x42c>)
     c96:	f004 ff0d 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     c9a:	4810      	ldr	r0, [pc, #64]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     c9c:	f005 f90e 	bl	5ebc <Print::println()>
     ca0:	e7cc      	b.n	c3c <LEDDebug(LEDStruct&)+0x37c>
     ca2:	2105      	movs	r1, #5
     ca4:	4812      	ldr	r0, [pc, #72]	; (cf0 <LEDDebug(LEDStruct&)+0x430>)
     ca6:	f004 ff05 	bl	5ab4 <usb_serial_write>
     caa:	e73f      	b.n	b2c <LEDDebug(LEDStruct&)+0x26c>
     cac:	2107      	movs	r1, #7
     cae:	4811      	ldr	r0, [pc, #68]	; (cf4 <LEDDebug(LEDStruct&)+0x434>)
     cb0:	f004 ff00 	bl	5ab4 <usb_serial_write>
     cb4:	e735      	b.n	b22 <LEDDebug(LEDStruct&)+0x262>
     cb6:	2104      	movs	r1, #4
     cb8:	480f      	ldr	r0, [pc, #60]	; (cf8 <LEDDebug(LEDStruct&)+0x438>)
     cba:	f004 fefb 	bl	5ab4 <usb_serial_write>
     cbe:	4807      	ldr	r0, [pc, #28]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     cc0:	f005 f8fc 	bl	5ebc <Print::println()>
     cc4:	e61b      	b.n	8fe <LEDDebug(LEDStruct&)+0x3e>
     cc6:	2107      	movs	r1, #7
     cc8:	480c      	ldr	r0, [pc, #48]	; (cfc <LEDDebug(LEDStruct&)+0x43c>)
     cca:	f004 fef3 	bl	5ab4 <usb_serial_write>
     cce:	4803      	ldr	r0, [pc, #12]	; (cdc <LEDDebug(LEDStruct&)+0x41c>)
     cd0:	f005 f8f4 	bl	5ebc <Print::println()>
     cd4:	e613      	b.n	8fe <LEDDebug(LEDStruct&)+0x3e>
     cd6:	bf00      	nop
     cd8:	00007644 	.word	0x00007644
     cdc:	1fff8738 	.word	0x1fff8738
     ce0:	00007660 	.word	0x00007660
     ce4:	0000766c 	.word	0x0000766c
     ce8:	00007678 	.word	0x00007678
     cec:	00007630 	.word	0x00007630
     cf0:	00007698 	.word	0x00007698
     cf4:	00007690 	.word	0x00007690
     cf8:	000074fc 	.word	0x000074fc
     cfc:	00007504 	.word	0x00007504

00000d00 <updatePaletteIndex(LEDStruct&)>:
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     d00:	4b48      	ldr	r3, [pc, #288]	; (e24 <updatePaletteIndex(LEDStruct&)+0x124>)
     d02:	781b      	ldrb	r3, [r3, #0]
     d04:	2b00      	cmp	r3, #0
     d06:	f000 808b 	beq.w	e20 <updatePaletteIndex(LEDStruct&)+0x120>
#define ARRAY_SIZE(A) (sizeof(A) / sizeof((A)[0]))

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     d0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d0e:	b09b      	sub	sp, #108	; 0x6c
     d10:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     d14:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     d16:	2300      	movs	r3, #0
     d18:	4a43      	ldr	r2, [pc, #268]	; (e28 <updatePaletteIndex(LEDStruct&)+0x128>)
     d1a:	9307      	str	r3, [sp, #28]
     d1c:	f8df 910c 	ldr.w	r9, [pc, #268]	; e2c <updatePaletteIndex(LEDStruct&)+0x12c>
     d20:	9009      	str	r0, [sp, #36]	; 0x24
     d22:	f200 2326 	addw	r3, r0, #550	; 0x226
     d26:	9208      	str	r2, [sp, #32]
     d28:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     d2a:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     d2c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     d30:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d32:	3701      	adds	r7, #1
        } while ( u.index != 255);
     d34:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d36:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     d38:	d1f8      	bne.n	d2c <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d3a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d3e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d40:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     d44:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d48:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     d4a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     d4e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     d52:	2400      	movs	r4, #0
     d54:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d56:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d5a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     d5e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d62:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     d66:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     d68:	b2f1      	uxtb	r1, r6
     d6a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     d6e:	9103      	str	r1, [sp, #12]
     d70:	b2e9      	uxtb	r1, r5
     d72:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     d74:	fa5f f18c 	uxtb.w	r1, ip
     d78:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     d7a:	9906      	ldr	r1, [sp, #24]
     d7c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d7e:	aa0d      	add	r2, sp, #52	; 0x34
     d80:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     d82:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d86:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d8a:	d80c      	bhi.n	da6 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     d8c:	9905      	ldr	r1, [sp, #20]
     d8e:	458c      	cmp	ip, r1
     d90:	dc07      	bgt.n	da2 <updatePaletteIndex(LEDStruct&)+0xa2>
     d92:	290f      	cmp	r1, #15
     d94:	d005      	beq.n	da2 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     d96:	3101      	adds	r1, #1
     d98:	b2c9      	uxtb	r1, r1
     d9a:	428b      	cmp	r3, r1
     d9c:	9102      	str	r1, [sp, #8]
     d9e:	bf38      	it	cc
     da0:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     da2:	b259      	sxtb	r1, r3
     da4:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     da6:	a90c      	add	r1, sp, #48	; 0x30
     da8:	9100      	str	r1, [sp, #0]
     daa:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dac:	f88d b034 	strb.w	fp, [sp, #52]	; 0x34
        g = rhs.g;
     db0:	f88d e035 	strb.w	lr, [sp, #53]	; 0x35
        b = rhs.b;
     db4:	f88d 8036 	strb.w	r8, [sp, #54]	; 0x36
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     db8:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
        g = rhs.g;
     dbc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
        b = rhs.b;
     dc0:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
     dc4:	f002 fed0 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     dc8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dca:	46d3      	mov	fp, sl
        g = rhs.g;
     dcc:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     dd0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     dd4:	d1bf      	bne.n	d56 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dd8:	aa0e      	add	r2, sp, #56	; 0x38
     dda:	4293      	cmp	r3, r2
     ddc:	d018      	beq.n	e10 <updatePaletteIndex(LEDStruct&)+0x110>
     dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
     de0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     de2:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     de6:	e001      	b.n	dec <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     de8:	42a3      	cmp	r3, r4
     dea:	d011      	beq.n	e10 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     dec:	f812 1b01 	ldrb.w	r1, [r2], #1
     df0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     df4:	4288      	cmp	r0, r1
     df6:	d0f7      	beq.n	de8 <updatePaletteIndex(LEDStruct&)+0xe8>
     df8:	4b0a      	ldr	r3, [pc, #40]	; (e24 <updatePaletteIndex(LEDStruct&)+0x124>)
     dfa:	9a07      	ldr	r2, [sp, #28]
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	3201      	adds	r2, #1
     e00:	4293      	cmp	r3, r2
     e02:	9207      	str	r2, [sp, #28]
     e04:	dd09      	ble.n	e1a <updatePaletteIndex(LEDStruct&)+0x11a>
     e06:	9b08      	ldr	r3, [sp, #32]
     e08:	f853 9f04 	ldr.w	r9, [r3, #4]!
     e0c:	9308      	str	r3, [sp, #32]
     e0e:	e78c      	b.n	d2a <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
     e12:	f89d 201c 	ldrb.w	r2, [sp, #28]
     e16:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
			break;
		}
	}
}
     e1a:	b01b      	add	sp, #108	; 0x6c
     e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e20:	4770      	bx	lr
     e22:	bf00      	nop
     e24:	1fff872d 	.word	0x1fff872d
     e28:	00007254 	.word	0x00007254
     e2c:	00007450 	.word	0x00007450

00000e30 <initialize()>:

// Initialization function
void initialize() {
     e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     e34:	4cb7      	ldr	r4, [pc, #732]	; (1114 <initialize()+0x2e4>)
		}
	}
}

// Initialization function
void initialize() {
     e36:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     e38:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     e3a:	2196      	movs	r1, #150	; 0x96
     e3c:	4620      	mov	r0, r4
     e3e:	aa09      	add	r2, sp, #36	; 0x24
     e40:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     e44:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     e48:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     e4c:	f002 fe5c 	bl	3b08 <fill_solid(CRGB*, int, CRGB const&)>
     e50:	49b1      	ldr	r1, [pc, #708]	; (1118 <initialize()+0x2e8>)
	curr_leds.array_type		= CURRENT;
     e52:	f884 71c6 	strb.w	r7, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     e56:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     e5a:	4aaf      	ldr	r2, [pc, #700]	; (1118 <initialize()+0x2e8>)
            count++;;
        } while ( u.index != 255);
     e5c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     e5e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     e60:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     e62:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     e64:	d1f7      	bne.n	e56 <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     e66:	6813      	ldr	r3, [r2, #0]
     e68:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     e6a:	ea4f 6813 	mov.w	r8, r3, lsr #24
     e6e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     e72:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     e76:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     e7a:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     e7c:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     e7e:	2400      	movs	r4, #0
     e80:	46c6      	mov	lr, r8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     e82:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     e86:	48a5      	ldr	r0, [pc, #660]	; (111c <initialize()+0x2ec>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e88:	f3c5 2707 	ubfx	r7, r5, #8, #8
     e8c:	f3c5 4607 	ubfx	r6, r5, #16, #8
     e90:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     e92:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     e96:	9104      	str	r1, [sp, #16]
     e98:	b2f1      	uxtb	r1, r6
     e9a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     e9c:	fa5f f18c 	uxtb.w	r1, ip
     ea0:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     ea2:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     ea4:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ea6:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ea8:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     eac:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     eae:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     eb2:	fa5f f885 	uxtb.w	r8, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     eb6:	d80c      	bhi.n	ed2 <initialize()+0xa2>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     eb8:	9906      	ldr	r1, [sp, #24]
     eba:	458c      	cmp	ip, r1
     ebc:	dc07      	bgt.n	ece <initialize()+0x9e>
     ebe:	290f      	cmp	r1, #15
     ec0:	d005      	beq.n	ece <initialize()+0x9e>
                    istart8 = lastSlotUsed + 1;
     ec2:	3101      	adds	r1, #1
     ec4:	b2c9      	uxtb	r1, r1
     ec6:	428b      	cmp	r3, r1
     ec8:	9103      	str	r1, [sp, #12]
     eca:	bf38      	it	cc
     ecc:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ece:	b259      	sxtb	r1, r3
     ed0:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ed2:	a908      	add	r1, sp, #32
     ed4:	9100      	str	r1, [sp, #0]
     ed6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ed8:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     edc:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     ee0:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ee4:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     ee8:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     eec:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     ef0:	f002 fe3a 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ef4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ef6:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     efa:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     efe:	46c6      	mov	lr, r8
     f00:	d1bf      	bne.n	e82 <initialize()+0x52>
     f02:	4987      	ldr	r1, [pc, #540]	; (1120 <initialize()+0x2f0>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     f04:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     f06:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     f0a:	4a85      	ldr	r2, [pc, #532]	; (1120 <initialize()+0x2f0>)
            count++;;
        } while ( u.index != 255);
     f0c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f0e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     f10:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     f12:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     f14:	d1f7      	bne.n	f06 <initialize()+0xd6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f16:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f18:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     f1a:	ea4f 6813 	mov.w	r8, r3, lsr #24
     f1e:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     f22:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f26:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f2a:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     f2c:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     f2e:	2400      	movs	r4, #0
     f30:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     f32:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f36:	4b77      	ldr	r3, [pc, #476]	; (1114 <initialize()+0x2e4>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f38:	f3c5 2707 	ubfx	r7, r5, #8, #8
     f3c:	f3c5 4607 	ubfx	r6, r5, #16, #8
     f40:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     f42:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f46:	9104      	str	r1, [sp, #16]
     f48:	b2f1      	uxtb	r1, r6
     f4a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     f4c:	fa5f f18c 	uxtb.w	r1, ip
     f50:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     f52:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     f54:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f56:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f58:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f5c:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     f60:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     f62:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     f66:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     f6a:	d80c      	bhi.n	f86 <initialize()+0x156>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     f6c:	9906      	ldr	r1, [sp, #24]
     f6e:	458c      	cmp	ip, r1
     f70:	dc07      	bgt.n	f82 <initialize()+0x152>
     f72:	290f      	cmp	r1, #15
     f74:	d005      	beq.n	f82 <initialize()+0x152>
                    istart8 = lastSlotUsed + 1;
     f76:	3101      	adds	r1, #1
     f78:	b2c9      	uxtb	r1, r1
     f7a:	428b      	cmp	r3, r1
     f7c:	9103      	str	r1, [sp, #12]
     f7e:	bf38      	it	cc
     f80:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     f82:	b259      	sxtb	r1, r3
     f84:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     f86:	a908      	add	r1, sp, #32
     f88:	9100      	str	r1, [sp, #0]
     f8a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f8c:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
     f90:	f88d 9025 	strb.w	r9, [sp, #37]	; 0x25
        b = rhs.b;
     f94:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f98:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
     f9c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
     fa0:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
     fa4:	f002 fde0 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     fa8:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     faa:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     fae:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     fb2:	46d6      	mov	lr, sl
     fb4:	d1bd      	bne.n	f32 <initialize()+0x102>
	curr_leds.current_palette	= Colorfull_gp;
	curr_leds.target_palette	= Magenta_Evening_gp;
	updatePaletteIndex(curr_leds);
     fb6:	4857      	ldr	r0, [pc, #348]	; (1114 <initialize()+0x2e4>)
	curr_leds.mode_name			= RAINBOW_MARCH_SPLIT;

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     fb8:	4c5a      	ldr	r4, [pc, #360]	; (1124 <initialize()+0x2f4>)
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= Colorfull_gp;
	curr_leds.target_palette	= Magenta_Evening_gp;
	updatePaletteIndex(curr_leds);
     fba:	f7ff fea1 	bl	d00 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= RAINBOW_MARCH_SPLIT;
     fbe:	4955      	ldr	r1, [pc, #340]	; (1114 <initialize()+0x2e4>)
     fc0:	2306      	movs	r3, #6
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     fc2:	2700      	movs	r7, #0
     fc4:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     fc8:	4620      	mov	r0, r4
     fca:	2196      	movs	r1, #150	; 0x96
     fcc:	aa09      	add	r2, sp, #36	; 0x24
     fce:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     fd2:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     fd6:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     fda:	f002 fd95 	bl	3b08 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     fde:	2301      	movs	r3, #1
     fe0:	4951      	ldr	r1, [pc, #324]	; (1128 <initialize()+0x2f8>)
     fe2:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     fe6:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     fea:	4a4f      	ldr	r2, [pc, #316]	; (1128 <initialize()+0x2f8>)
            count++;;
        } while ( u.index != 255);
     fec:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     fee:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ff0:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ff2:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ff4:	d1f7      	bne.n	fe6 <initialize()+0x1b6>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ff6:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     ff8:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     ffa:	f3c3 4907 	ubfx	r9, r3, #16, #8
     ffe:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1002:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1006:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    100a:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    100c:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    100e:	2400      	movs	r4, #0
    1010:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1012:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1016:	4845      	ldr	r0, [pc, #276]	; (112c <initialize()+0x2fc>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1018:	f3c5 2707 	ubfx	r7, r5, #8, #8
    101c:	f3c5 4607 	ubfx	r6, r5, #16, #8
    1020:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    1022:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1026:	9104      	str	r1, [sp, #16]
    1028:	b2f1      	uxtb	r1, r6
    102a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    102c:	fa5f f18c 	uxtb.w	r1, ip
    1030:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1032:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1034:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1036:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1038:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    103c:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    103e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1042:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1046:	d80c      	bhi.n	1062 <initialize()+0x232>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1048:	9906      	ldr	r1, [sp, #24]
    104a:	458c      	cmp	ip, r1
    104c:	dc07      	bgt.n	105e <initialize()+0x22e>
    104e:	290f      	cmp	r1, #15
    1050:	d005      	beq.n	105e <initialize()+0x22e>
                    istart8 = lastSlotUsed + 1;
    1052:	3101      	adds	r1, #1
    1054:	b2c9      	uxtb	r1, r1
    1056:	428b      	cmp	r3, r1
    1058:	9103      	str	r1, [sp, #12]
    105a:	bf38      	it	cc
    105c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    105e:	b259      	sxtb	r1, r3
    1060:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1062:	a908      	add	r1, sp, #32
    1064:	9100      	str	r1, [sp, #0]
    1066:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1068:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    106c:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    1070:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1074:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    1078:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    107c:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1080:	f002 fd72 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1084:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1086:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    108a:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    108e:	46c8      	mov	r8, r9
    1090:	d1bf      	bne.n	1012 <initialize()+0x1e2>
    1092:	4927      	ldr	r1, [pc, #156]	; (1130 <initialize()+0x300>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1094:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1096:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
    109a:	4a25      	ldr	r2, [pc, #148]	; (1130 <initialize()+0x300>)
            count++;;
        } while ( u.index != 255);
    109c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    109e:	3701      	adds	r7, #1
        } while ( u.index != 255);
    10a0:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    10a2:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    10a4:	d1f7      	bne.n	1096 <initialize()+0x266>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    10a6:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    10a8:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    10aa:	f3c3 4907 	ubfx	r9, r3, #16, #8
    10ae:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    10b2:	ea4f 6813 	mov.w	r8, r3, lsr #24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    10b6:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
    10ba:	4692      	mov	sl, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    10bc:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    10be:	2400      	movs	r4, #0
    10c0:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    10c2:	f85a 5f04 	ldr.w	r5, [sl, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    10c6:	481b      	ldr	r0, [pc, #108]	; (1134 <initialize()+0x304>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    10c8:	f3c5 2707 	ubfx	r7, r5, #8, #8
    10cc:	f3c5 4607 	ubfx	r6, r5, #16, #8
    10d0:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
    10d2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    10d6:	9104      	str	r1, [sp, #16]
    10d8:	b2f1      	uxtb	r1, r6
    10da:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    10dc:	fa5f f18c 	uxtb.w	r1, ip
    10e0:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    10e2:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    10e4:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    10e6:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    10e8:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    10ec:	aa09      	add	r2, sp, #36	; 0x24
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    10ee:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    10f2:	fa5f f985 	uxtb.w	r9, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    10f6:	d81f      	bhi.n	1138 <initialize()+0x308>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    10f8:	9906      	ldr	r1, [sp, #24]
    10fa:	458c      	cmp	ip, r1
    10fc:	dc07      	bgt.n	110e <initialize()+0x2de>
    10fe:	290f      	cmp	r1, #15
    1100:	d005      	beq.n	110e <initialize()+0x2de>
                    istart8 = lastSlotUsed + 1;
    1102:	3101      	adds	r1, #1
    1104:	b2c9      	uxtb	r1, r1
    1106:	428b      	cmp	r3, r1
    1108:	9103      	str	r1, [sp, #12]
    110a:	bf38      	it	cc
    110c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    110e:	b259      	sxtb	r1, r3
    1110:	9106      	str	r1, [sp, #24]
    1112:	e011      	b.n	1138 <initialize()+0x308>
    1114:	1fff9430 	.word	0x1fff9430
    1118:	000080ac 	.word	0x000080ac
    111c:	1fff95f7 	.word	0x1fff95f7
    1120:	00008134 	.word	0x00008134
    1124:	1fff8c64 	.word	0x1fff8c64
    1128:	000078a8 	.word	0x000078a8
    112c:	1fff8e2b 	.word	0x1fff8e2b
    1130:	00007998 	.word	0x00007998
    1134:	1fff8e5b 	.word	0x1fff8e5b
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1138:	a908      	add	r1, sp, #32
    113a:	9100      	str	r1, [sp, #0]
    113c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    113e:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
        g = rhs.g;
    1142:	f88d e025 	strb.w	lr, [sp, #37]	; 0x25
        b = rhs.b;
    1146:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    114a:	f88d 7020 	strb.w	r7, [sp, #32]
        g = rhs.g;
    114e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        b = rhs.b;
    1152:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    1156:	f002 fd07 	bl	3b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    115a:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    115c:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
    1160:	f8dd e014 	ldr.w	lr, [sp, #20]
        b = rhs.b;
    1164:	46c8      	mov	r8, r9
    1166:	d1ac      	bne.n	10c2 <initialize()+0x292>
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	updatePaletteIndex(next_leds);
    1168:	4802      	ldr	r0, [pc, #8]	; (1174 <initialize()+0x344>)
    116a:	f7ff fdc9 	bl	d00 <updatePaletteIndex(LEDStruct&)>
}
    116e:	b00b      	add	sp, #44	; 0x2c
    1170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1174:	1fff8c64 	.word	0x1fff8c64

00001178 <change_pattern()>:



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
    1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    117a:	2120      	movs	r1, #32
    117c:	4829      	ldr	r0, [pc, #164]	; (1224 <change_pattern()+0xac>)
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    117e:	4f2a      	ldr	r7, [pc, #168]	; (1228 <change_pattern()+0xb0>)
	transition_type  = BLENDING;
    1180:	4e2a      	ldr	r6, [pc, #168]	; (122c <change_pattern()+0xb4>)
	transition_speed = random8(3,7);
	transition_ratio = 0;
    1182:	4d2b      	ldr	r5, [pc, #172]	; (1230 <change_pattern()+0xb8>)
    1184:	f004 fc96 	bl	5ab4 <usb_serial_write>
    1188:	482a      	ldr	r0, [pc, #168]	; (1234 <change_pattern()+0xbc>)
    118a:	f004 fe97 	bl	5ebc <Print::println()>
    118e:	482a      	ldr	r0, [pc, #168]	; (1238 <change_pattern()+0xc0>)

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    1190:	4a2a      	ldr	r2, [pc, #168]	; (123c <change_pattern()+0xc4>)
    1192:	8803      	ldrh	r3, [r0, #0]
    1194:	7814      	ldrb	r4, [r2, #0]
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
    1196:	492a      	ldr	r1, [pc, #168]	; (1240 <change_pattern()+0xc8>)
    1198:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    119c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11a0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11a4:	3319      	adds	r3, #25
    11a6:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    11a8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    11ac:	f3c2 1281 	ubfx	r2, r2, #6, #2
    11b0:	3203      	adds	r2, #3
    11b2:	700a      	strb	r2, [r1, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    11b4:	2201      	movs	r2, #1
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    11b6:	4923      	ldr	r1, [pc, #140]	; (1244 <change_pattern()+0xcc>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    11b8:	703a      	strb	r2, [r7, #0]
	transition_type  = BLENDING;
    11ba:	2200      	movs	r2, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    11bc:	8003      	strh	r3, [r0, #0]
    11be:	7032      	strb	r2, [r6, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;
    11c0:	702a      	strb	r2, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    11c2:	f881 222d 	strb.w	r2, [r1, #557]	; 0x22d
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    11c6:	b99c      	cbnz	r4, 11f0 <change_pattern()+0x78>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    11c8:	f891 222a 	ldrb.w	r2, [r1, #554]	; 0x22a
    11cc:	4b1e      	ldr	r3, [pc, #120]	; (1248 <change_pattern()+0xd0>)
    11ce:	3201      	adds	r2, #1
    11d0:	fba3 0302 	umull	r0, r3, r3, r2
    11d4:	089b      	lsrs	r3, r3, #2
    11d6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    11da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    11de:	1ad3      	subs	r3, r2, r3
    11e0:	b2db      	uxtb	r3, r3
	next_leds.mode_name = ModeList[next_leds.mode_number];
    11e2:	4a1a      	ldr	r2, [pc, #104]	; (124c <change_pattern()+0xd4>)
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    11e4:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    11e8:	5cd3      	ldrb	r3, [r2, r3]
    11ea:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
    11ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    11f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    11f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    11fc:	3319      	adds	r3, #25
    11fe:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1200:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1204:	b2d2      	uxtb	r2, r2
    1206:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    120a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    120e:	f3c2 2207 	ubfx	r2, r2, #8, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1212:	8003      	strh	r3, [r0, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    1214:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    1218:	4613      	mov	r3, r2
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
    121a:	4a0c      	ldr	r2, [pc, #48]	; (124c <change_pattern()+0xd4>)
    121c:	5cd3      	ldrb	r3, [r2, r3]
    121e:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
    1222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1224:	000076f8 	.word	0x000076f8
    1228:	1fff8f4c 	.word	0x1fff8f4c
    122c:	1fff8f58 	.word	0x1fff8f58
    1230:	1fff8c5c 	.word	0x1fff8c5c
    1234:	1fff8738 	.word	0x1fff8738
    1238:	1fff872e 	.word	0x1fff872e
    123c:	1fff8f6c 	.word	0x1fff8f6c
    1240:	1fff9424 	.word	0x1fff9424
    1244:	1fff8c64 	.word	0x1fff8c64
    1248:	4ec4ec4f 	.word	0x4ec4ec4f
    124c:	1fff8720 	.word	0x1fff8720

00001250 <blending()>:
}



// Transition functions
void blending() {
    1250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1254:	f8df a29c 	ldr.w	sl, [pc, #668]	; 14f4 <blending()+0x2a4>
    1258:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 14fc <blending()+0x2ac>
    125c:	4c96      	ldr	r4, [pc, #600]	; (14b8 <blending()+0x268>)
    125e:	4f97      	ldr	r7, [pc, #604]	; (14bc <blending()+0x26c>)
    1260:	b085      	sub	sp, #20
    1262:	4655      	mov	r5, sl
    1264:	f50a 78e1 	add.w	r8, sl, #450	; 0x1c2
    1268:	465e      	mov	r6, fp
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    126a:	4632      	mov	r2, r6
    126c:	4629      	mov	r1, r5
    126e:	783b      	ldrb	r3, [r7, #0]
    1270:	f8df 9248 	ldr.w	r9, [pc, #584]	; 14bc <blending()+0x26c>
    1274:	a803      	add	r0, sp, #12
    1276:	3503      	adds	r5, #3
    1278:	f002 fd38 	bl	3cec <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    127c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1280:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1284:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1288:	7021      	strb	r1, [r4, #0]
    128a:	4545      	cmp	r5, r8
        g = rhs.g;
    128c:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    128e:	70a3      	strb	r3, [r4, #2]
    1290:	f106 0603 	add.w	r6, r6, #3
    1294:	f104 0403 	add.w	r4, r4, #3
    1298:	d1e7      	bne.n	126a <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    129a:	4e89      	ldr	r6, [pc, #548]	; (14c0 <blending()+0x270>)
    129c:	6833      	ldr	r3, [r6, #0]
    129e:	07db      	lsls	r3, r3, #31
    12a0:	f140 80eb 	bpl.w	147a <blending()+0x22a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12a4:	4d87      	ldr	r5, [pc, #540]	; (14c4 <blending()+0x274>)
    12a6:	4c88      	ldr	r4, [pc, #544]	; (14c8 <blending()+0x278>)
    12a8:	682b      	ldr	r3, [r5, #0]
    12aa:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    12ac:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    12b0:	9b03      	ldr	r3, [sp, #12]
    12b2:	1a5b      	subs	r3, r3, r1
    12b4:	4293      	cmp	r3, r2
    12b6:	d30c      	bcc.n	12d2 <blending()+0x82>
    12b8:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    12ba:	682a      	ldr	r2, [r5, #0]
    12bc:	9202      	str	r2, [sp, #8]
    12be:	3301      	adds	r3, #1
	return ret;
    12c0:	9a02      	ldr	r2, [sp, #8]
    12c2:	6022      	str	r2, [r4, #0]
    12c4:	b2db      	uxtb	r3, r3
    12c6:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    12c8:	2bff      	cmp	r3, #255	; 0xff
    12ca:	d006      	beq.n	12da <blending()+0x8a>
		in_transition = 0;
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
	}
}
    12cc:	b005      	add	sp, #20
    12ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12d2:	f899 3000 	ldrb.w	r3, [r9]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    12d6:	2bff      	cmp	r3, #255	; 0xff
    12d8:	d1f8      	bne.n	12cc <blending()+0x7c>
		in_transition = 0;
    12da:	497c      	ldr	r1, [pc, #496]	; (14cc <blending()+0x27c>)
    12dc:	4b7c      	ldr	r3, [pc, #496]	; (14d0 <blending()+0x280>)
    12de:	4a7d      	ldr	r2, [pc, #500]	; (14d4 <blending()+0x284>)
    12e0:	2000      	movs	r0, #0
    12e2:	7008      	strb	r0, [r1, #0]
    12e4:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12e8:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    12ec:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    12f0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12f4:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    12f8:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    12fc:	f803 1c01 	strb.w	r1, [r3, #-1]
    1300:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    1302:	429d      	cmp	r5, r3
    1304:	f102 0203 	add.w	r2, r2, #3
    1308:	d1ee      	bne.n	12e8 <blending()+0x98>
    130a:	f89b 21c2 	ldrb.w	r2, [fp, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    130e:	4b72      	ldr	r3, [pc, #456]	; (14d8 <blending()+0x288>)
    1310:	f89b 41c3 	ldrb.w	r4, [fp, #451]	; 0x1c3
    1314:	f89b 01c4 	ldrb.w	r0, [fp, #452]	; 0x1c4
    1318:	f89b 11c5 	ldrb.w	r1, [fp, #453]	; 0x1c5
    131c:	f88a 21c2 	strb.w	r2, [sl, #450]	; 0x1c2
    1320:	4a6e      	ldr	r2, [pc, #440]	; (14dc <blending()+0x28c>)
    1322:	f88a 41c3 	strb.w	r4, [sl, #451]	; 0x1c3
    1326:	f88a 01c4 	strb.w	r0, [sl, #452]	; 0x1c4
    132a:	f103 0430 	add.w	r4, r3, #48	; 0x30
    132e:	f88a 11c5 	strb.w	r1, [sl, #453]	; 0x1c5
    1332:	6819      	ldr	r1, [r3, #0]
    1334:	685d      	ldr	r5, [r3, #4]
    1336:	6898      	ldr	r0, [r3, #8]
    1338:	6011      	str	r1, [r2, #0]
    133a:	68d9      	ldr	r1, [r3, #12]
    133c:	60d1      	str	r1, [r2, #12]
    133e:	3310      	adds	r3, #16
    1340:	42a3      	cmp	r3, r4
    1342:	6055      	str	r5, [r2, #4]
    1344:	6090      	str	r0, [r2, #8]
    1346:	f102 0210 	add.w	r2, r2, #16
    134a:	d1f2      	bne.n	1332 <blending()+0xe2>
    134c:	4b64      	ldr	r3, [pc, #400]	; (14e0 <blending()+0x290>)
    134e:	4a65      	ldr	r2, [pc, #404]	; (14e4 <blending()+0x294>)
    1350:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1354:	6818      	ldr	r0, [r3, #0]
    1356:	685d      	ldr	r5, [r3, #4]
    1358:	689c      	ldr	r4, [r3, #8]
    135a:	6010      	str	r0, [r2, #0]
    135c:	68d8      	ldr	r0, [r3, #12]
    135e:	60d0      	str	r0, [r2, #12]
    1360:	3310      	adds	r3, #16
    1362:	428b      	cmp	r3, r1
    1364:	6055      	str	r5, [r2, #4]
    1366:	6094      	str	r4, [r2, #8]
    1368:	f102 0210 	add.w	r2, r2, #16
    136c:	d1f2      	bne.n	1354 <blending()+0x104>
    136e:	f89b 4227 	ldrb.w	r4, [fp, #551]	; 0x227
    1372:	f89b 0228 	ldrb.w	r0, [fp, #552]	; 0x228
    1376:	f89b 1229 	ldrb.w	r1, [fp, #553]	; 0x229
    137a:	f89b 222a 	ldrb.w	r2, [fp, #554]	; 0x22a
    137e:	f89b 322b 	ldrb.w	r3, [fp, #555]	; 0x22b
    1382:	f89b 522c 	ldrb.w	r5, [fp, #556]	; 0x22c
    1386:	f88a 4227 	strb.w	r4, [sl, #551]	; 0x227
    138a:	f88a 0228 	strb.w	r0, [sl, #552]	; 0x228
    138e:	f89b 422d 	ldrb.w	r4, [fp, #557]	; 0x22d
    1392:	f89b 022e 	ldrb.w	r0, [fp, #558]	; 0x22e
    1396:	f88a 1229 	strb.w	r1, [sl, #553]	; 0x229
    139a:	f88a 222a 	strb.w	r2, [sl, #554]	; 0x22a
    139e:	f89b 122f 	ldrb.w	r1, [fp, #559]	; 0x22f
    13a2:	f89b 2230 	ldrb.w	r2, [fp, #560]	; 0x230
    13a6:	f88a 322b 	strb.w	r3, [sl, #555]	; 0x22b
    13aa:	f88a 522c 	strb.w	r5, [sl, #556]	; 0x22c
    13ae:	f89b 3231 	ldrb.w	r3, [fp, #561]	; 0x231
    13b2:	f89b 5232 	ldrb.w	r5, [fp, #562]	; 0x232
    13b6:	f88a 422d 	strb.w	r4, [sl, #557]	; 0x22d
    13ba:	f88a 022e 	strb.w	r0, [sl, #558]	; 0x22e
    13be:	f89b 4233 	ldrb.w	r4, [fp, #563]	; 0x233
    13c2:	f89b 0234 	ldrb.w	r0, [fp, #564]	; 0x234
    13c6:	f88a 122f 	strb.w	r1, [sl, #559]	; 0x22f
    13ca:	f88a 2230 	strb.w	r2, [sl, #560]	; 0x230
    13ce:	f89b 1235 	ldrb.w	r1, [fp, #565]	; 0x235
    13d2:	f89b 2236 	ldrb.w	r2, [fp, #566]	; 0x236
    13d6:	f88a 3231 	strb.w	r3, [sl, #561]	; 0x231
    13da:	f88a 5232 	strb.w	r5, [sl, #562]	; 0x232
    13de:	f88a 4233 	strb.w	r4, [sl, #563]	; 0x233
    13e2:	f88a 1235 	strb.w	r1, [sl, #565]	; 0x235
    13e6:	f88a 2236 	strb.w	r2, [sl, #566]	; 0x236
    13ea:	4b3f      	ldr	r3, [pc, #252]	; (14e8 <blending()+0x298>)
    13ec:	f88a 0234 	strb.w	r0, [sl, #564]	; 0x234
    13f0:	f89b 0237 	ldrb.w	r0, [fp, #567]	; 0x237
    13f4:	f89b 5238 	ldrb.w	r5, [fp, #568]	; 0x238
    13f8:	f89b 4239 	ldrb.w	r4, [fp, #569]	; 0x239
    13fc:	f89b 123a 	ldrb.w	r1, [fp, #570]	; 0x23a
    1400:	f88a 5238 	strb.w	r5, [sl, #568]	; 0x238
    1404:	f88a 4239 	strb.w	r4, [sl, #569]	; 0x239
    1408:	f89b 523b 	ldrb.w	r5, [fp, #571]	; 0x23b
    140c:	f89b 423c 	ldrb.w	r4, [fp, #572]	; 0x23c
    1410:	f88a 123a 	strb.w	r1, [sl, #570]	; 0x23a
    1414:	4a35      	ldr	r2, [pc, #212]	; (14ec <blending()+0x29c>)
    1416:	f89b 123d 	ldrb.w	r1, [fp, #573]	; 0x23d
    141a:	f88a 0237 	strb.w	r0, [sl, #567]	; 0x237
    141e:	f88a 523b 	strb.w	r5, [sl, #571]	; 0x23b
    1422:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    1426:	f88a 423c 	strb.w	r4, [sl, #572]	; 0x23c
    142a:	f88a 123d 	strb.w	r1, [sl, #573]	; 0x23d
    142e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1432:	f803 1b01 	strb.w	r1, [r3], #1
    1436:	4283      	cmp	r3, r0
    1438:	d1f9      	bne.n	142e <blending()+0x1de>
    143a:	4a2d      	ldr	r2, [pc, #180]	; (14f0 <blending()+0x2a0>)
    143c:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    1440:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1444:	f803 1b01 	strb.w	r1, [r3], #1
    1448:	4283      	cmp	r3, r0
    144a:	492a      	ldr	r1, [pc, #168]	; (14f4 <blending()+0x2a4>)
    144c:	d1f8      	bne.n	1440 <blending()+0x1f0>
    144e:	f89b 32d4 	ldrb.w	r3, [fp, #724]	; 0x2d4
    1452:	f89b 42d5 	ldrb.w	r4, [fp, #725]	; 0x2d5
    1456:	f89b 02d6 	ldrb.w	r0, [fp, #726]	; 0x2d6
    145a:	f89b 22d7 	ldrb.w	r2, [fp, #727]	; 0x2d7
    145e:	f881 32d4 	strb.w	r3, [r1, #724]	; 0x2d4
		curr_leds = next_leds;
		curr_leds.array_type = CURRENT;
    1462:	2300      	movs	r3, #0
    1464:	f881 42d5 	strb.w	r4, [r1, #725]	; 0x2d5
    1468:	f881 02d6 	strb.w	r0, [r1, #726]	; 0x2d6
    146c:	f881 22d7 	strb.w	r2, [r1, #727]	; 0x2d7
    1470:	f881 31c6 	strb.w	r3, [r1, #454]	; 0x1c6
	}
}
    1474:	b005      	add	sp, #20
    1476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    147a:	4630      	mov	r0, r6
    147c:	f003 fa82 	bl	4984 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1480:	4d10      	ldr	r5, [pc, #64]	; (14c4 <blending()+0x274>)
    1482:	b958      	cbnz	r0, 149c <blending()+0x24c>
    1484:	4c10      	ldr	r4, [pc, #64]	; (14c8 <blending()+0x278>)
    1486:	682b      	ldr	r3, [r5, #0]
    1488:	9303      	str	r3, [sp, #12]
    148a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    148e:	9b03      	ldr	r3, [sp, #12]
    1490:	1a5b      	subs	r3, r3, r1
    1492:	4293      	cmp	r3, r2
    1494:	f4bf af10 	bcs.w	12b8 <blending()+0x68>
    1498:	783b      	ldrb	r3, [r7, #0]
    149a:	e715      	b.n	12c8 <blending()+0x78>
    149c:	4b16      	ldr	r3, [pc, #88]	; (14f8 <blending()+0x2a8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    149e:	682a      	ldr	r2, [r5, #0]
    14a0:	781b      	ldrb	r3, [r3, #0]
    14a2:	4c09      	ldr	r4, [pc, #36]	; (14c8 <blending()+0x278>)
    14a4:	9201      	str	r2, [sp, #4]
	return ret;
    14a6:	9a01      	ldr	r2, [sp, #4]
    14a8:	6022      	str	r2, [r4, #0]
    14aa:	009b      	lsls	r3, r3, #2
    14ac:	4630      	mov	r0, r6
    14ae:	6063      	str	r3, [r4, #4]
    14b0:	f003 fa6e 	bl	4990 <__cxa_guard_release>
    14b4:	e7e7      	b.n	1486 <blending()+0x236>
    14b6:	bf00      	nop
    14b8:	1fff8f88 	.word	0x1fff8f88
    14bc:	1fff8c5c 	.word	0x1fff8c5c
    14c0:	1fff8f84 	.word	0x1fff8f84
    14c4:	1fff9780 	.word	0x1fff9780
    14c8:	1fff8f50 	.word	0x1fff8f50
    14cc:	1fff8f4c 	.word	0x1fff8f4c
    14d0:	1fff9433 	.word	0x1fff9433
    14d4:	1fff8c67 	.word	0x1fff8c67
    14d8:	1fff8e2b 	.word	0x1fff8e2b
    14dc:	1fff95f7 	.word	0x1fff95f7
    14e0:	1fff8e5b 	.word	0x1fff8e5b
    14e4:	1fff9627 	.word	0x1fff9627
    14e8:	1fff966e 	.word	0x1fff966e
    14ec:	1fff8ea1 	.word	0x1fff8ea1
    14f0:	1fff8eec 	.word	0x1fff8eec
    14f4:	1fff9430 	.word	0x1fff9430
    14f8:	1fff9424 	.word	0x1fff9424
    14fc:	1fff8c64 	.word	0x1fff8c64

00001500 <juggle(LEDStruct&)>:
	*/
}



void juggle(LEDStruct& leds) {
    1500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1504:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	*/
}



void juggle(LEDStruct& leds) {
    1508:	b091      	sub	sp, #68	; 0x44
    150a:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    150c:	2b00      	cmp	r3, #0
    150e:	f000 80f3 	beq.w	16f8 <juggle(LEDStruct&)+0x1f8>
    1512:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    1516:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    151a:	b113      	cbz	r3, 1522 <juggle(LEDStruct&)+0x22>
    151c:	2300      	movs	r3, #0
    151e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    1522:	2196      	movs	r1, #150	; 0x96
    1524:	4620      	mov	r0, r4
    1526:	f002 fbb1 	bl	3c8c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    152a:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    152e:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1532:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1536:	2900      	cmp	r1, #0
    1538:	f040 8178 	bne.w	182c <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    153c:	2f00      	cmp	r7, #0
    153e:	f000 82ae 	beq.w	1a9e <juggle(LEDStruct&)+0x59e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1542:	2b00      	cmp	r3, #0
    1544:	f000 837e 	beq.w	1c44 <juggle(LEDStruct&)+0x744>
    1548:	48c4      	ldr	r0, [pc, #784]	; (185c <juggle(LEDStruct&)+0x35c>)
    154a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    154e:	f8df 9314 	ldr.w	r9, [pc, #788]	; 1864 <juggle(LEDStruct&)+0x364>
    1552:	f8df 8314 	ldr.w	r8, [pc, #788]	; 1868 <juggle(LEDStruct&)+0x368>
    1556:	9002      	str	r0, [sp, #8]
    1558:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    155c:	460f      	mov	r7, r1
    155e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1562:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1566:	9503      	str	r5, [sp, #12]
    1568:	e05e      	b.n	1628 <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    156a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    156e:	443b      	add	r3, r7
    1570:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1572:	f8d9 1000 	ldr.w	r1, [r9]
    1576:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1578:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    157a:	9904      	ldr	r1, [sp, #16]
    157c:	bf98      	it	ls
    157e:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1580:	f44f 708c 	mov.w	r0, #280	; 0x118
    1584:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1588:	bf98      	it	ls
    158a:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    158c:	fb03 f301 	mul.w	r3, r3, r1
    1590:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1592:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1594:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1598:	d503      	bpl.n	15a2 <juggle(LEDStruct&)+0xa2>
    159a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    159e:	3107      	adds	r1, #7
    15a0:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    15a2:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    15a4:	9d02      	ldr	r5, [sp, #8]
    15a6:	f818 6000 	ldrb.w	r6, [r8, r0]
    15aa:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    15ae:	f3c1 0146 	ubfx	r1, r1, #1, #7
    15b2:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    15b6:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    15b8:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    15ba:	bf48      	it	mi
    15bc:	4249      	negmi	r1, r1
    15be:	b20e      	sxth	r6, r1
    15c0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    15c4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    15c8:	9100      	str	r1, [sp, #0]
    15ca:	4650      	mov	r0, sl
    15cc:	4659      	mov	r1, fp
    15ce:	f002 fbbd 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    15d2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    15d6:	2296      	movs	r2, #150	; 0x96
    15d8:	b29b      	uxth	r3, r3
    15da:	fb02 f303 	mul.w	r3, r2, r3
    15de:	0c1b      	lsrs	r3, r3, #16
    15e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    15e4:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    15e6:	5ce2      	ldrb	r2, [r4, r3]
    15e8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    15ec:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    15f0:	54e2      	strb	r2, [r4, r3]
    15f2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    15f6:	784a      	ldrb	r2, [r1, #1]
    15f8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    15fc:	704a      	strb	r2, [r1, #1]
    15fe:	788b      	ldrb	r3, [r1, #2]
    1600:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1604:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1608:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    160a:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    160e:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1612:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    1616:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1618:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    161a:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    161c:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    161e:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1620:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1624:	f240 830e 	bls.w	1c44 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1628:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    162c:	2900      	cmp	r1, #0
    162e:	d19c      	bne.n	156a <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1630:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1634:	443b      	add	r3, r7
    1636:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1638:	f8d9 1000 	ldr.w	r1, [r9]
    163c:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    163e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1640:	9905      	ldr	r1, [sp, #20]
    1642:	bf98      	it	ls
    1644:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    1646:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    164a:	bf98      	it	ls
    164c:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    164e:	fb00 f101 	mul.w	r1, r0, r1
    1652:	fb03 f301 	mul.w	r3, r3, r1
    1656:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1658:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    165a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    165e:	d503      	bpl.n	1668 <juggle(LEDStruct&)+0x168>
    1660:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1664:	3107      	adds	r1, #7
    1666:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1668:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    166a:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    166c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1670:	f818 6000 	ldrb.w	r6, [r8, r0]
    1674:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1678:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    167c:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    167e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    1680:	bf48      	it	mi
    1682:	4249      	negmi	r1, r1
    1684:	b20e      	sxth	r6, r1
    1686:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    168a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    168e:	9100      	str	r1, [sp, #0]
    1690:	4650      	mov	r0, sl
    1692:	4659      	mov	r1, fp
    1694:	f002 fb5a 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1698:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    169c:	b29b      	uxth	r3, r3
    169e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    16a2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    16a6:	0c1b      	lsrs	r3, r3, #16
    16a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    16ac:	18e1      	adds	r1, r4, r3
    16ae:	5ce2      	ldrb	r2, [r4, r3]
    16b0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    16b4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    16b8:	54e2      	strb	r2, [r4, r3]
    16ba:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    16be:	784a      	ldrb	r2, [r1, #1]
    16c0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    16c4:	704a      	strb	r2, [r1, #1]
    16c6:	788b      	ldrb	r3, [r1, #2]
    16c8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    16cc:	fa83 f352 	uqadd8	r3, r3, r2
    16d0:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    16d2:	708b      	strb	r3, [r1, #2]
    16d4:	4622      	mov	r2, r4
    16d6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16d8:	7819      	ldrb	r1, [r3, #0]
    16da:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    16de:	7859      	ldrb	r1, [r3, #1]
    16e0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    16e4:	7899      	ldrb	r1, [r3, #2]
    16e6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    16ea:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    16ec:	429d      	cmp	r5, r3
    16ee:	f1a2 0203 	sub.w	r2, r2, #3
    16f2:	d1f1      	bne.n	16d8 <juggle(LEDStruct&)+0x1d8>
    16f4:	9503      	str	r5, [sp, #12]
    16f6:	e788      	b.n	160a <juggle(LEDStruct&)+0x10a>
    16f8:	4d59      	ldr	r5, [pc, #356]	; (1860 <juggle(LEDStruct&)+0x360>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    16fa:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    16fe:	882b      	ldrh	r3, [r5, #0]
    1700:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    1704:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    1708:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    170c:	3119      	adds	r1, #25
    170e:	b289      	uxth	r1, r1
    1710:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    1714:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    1718:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    171c:	3019      	adds	r0, #25
    171e:	b280      	uxth	r0, r0
    1720:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    1724:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1728:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    172c:	3319      	adds	r3, #25
    172e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1732:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    1736:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    173a:	3219      	adds	r2, #25
    173c:	b292      	uxth	r2, r2
    173e:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    1742:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    1746:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    174a:	3619      	adds	r6, #25
    174c:	b2b6      	uxth	r6, r6
    174e:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    1752:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1756:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    175a:	3319      	adds	r3, #25
    175c:	b29b      	uxth	r3, r3
    175e:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    1762:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    1766:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    176a:	f10e 0e19 	add.w	lr, lr, #25
    176e:	fa1f fe8e 	uxth.w	lr, lr
    1772:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    1776:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    177a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    177e:	3719      	adds	r7, #25
    1780:	b2bf      	uxth	r7, r7
    1782:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1786:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    178a:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    178e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1792:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1794:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    1798:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    179c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    17a0:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    17a4:	b2f2      	uxtb	r2, r6
    17a6:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    17aa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    17b2:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    17b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17ba:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    17bc:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    17c0:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    17c4:	ea4f 18ec 	mov.w	r8, ip, asr #7
    17c8:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    17cc:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17d0:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    17d4:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    17d8:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    17dc:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    17e0:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    17e4:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    17e8:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    17ec:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    17f0:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    17f4:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    17f8:	b2d2      	uxtb	r2, r2



void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    17fa:	f3c7 13c0 	ubfx	r3, r7, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    17fe:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    1802:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    1806:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    1808:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    180c:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    1810:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    1814:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1818:	802e      	strh	r6, [r5, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    181a:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    181e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    1822:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    1826:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    182a:	e676      	b.n	151a <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    182c:	2f00      	cmp	r7, #0
    182e:	f000 809c 	beq.w	196a <juggle(LEDStruct&)+0x46a>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1832:	2b00      	cmp	r3, #0
    1834:	f000 8206 	beq.w	1c44 <juggle(LEDStruct&)+0x744>
    1838:	4b08      	ldr	r3, [pc, #32]	; (185c <juggle(LEDStruct&)+0x35c>)
    183a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    183e:	f8df 9024 	ldr.w	r9, [pc, #36]	; 1864 <juggle(LEDStruct&)+0x364>
    1842:	f8df 8024 	ldr.w	r8, [pc, #36]	; 1868 <juggle(LEDStruct&)+0x368>
    1846:	9302      	str	r3, [sp, #8]
    1848:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    184c:	2700      	movs	r7, #0
    184e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1852:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1856:	9503      	str	r5, [sp, #12]
    1858:	e06c      	b.n	1934 <juggle(LEDStruct&)+0x434>
    185a:	bf00      	nop
    185c:	00006b6c 	.word	0x00006b6c
    1860:	1fff872e 	.word	0x1fff872e
    1864:	1fff9780 	.word	0x1fff9780
    1868:	000073d8 	.word	0x000073d8
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    186c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    1870:	2b00      	cmp	r3, #0
    1872:	f000 82ba 	beq.w	1dea <juggle(LEDStruct&)+0x8ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1876:	f8d9 3000 	ldr.w	r3, [r9]
    187a:	9308      	str	r3, [sp, #32]
	return ret;
    187c:	9b08      	ldr	r3, [sp, #32]
    187e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1882:	f44f 708c 	mov.w	r0, #280	; 0x118
    1886:	fb00 f303 	mul.w	r3, r0, r3
    188a:	0209      	lsls	r1, r1, #8
    188c:	fb03 f301 	mul.w	r3, r3, r1
    1890:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1894:	f503 4380 	add.w	r3, r3, #16384	; 0x4000

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1898:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    189c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    189e:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    18a0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    18a4:	d503      	bpl.n	18ae <juggle(LEDStruct&)+0x3ae>
    18a6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    18aa:	3107      	adds	r1, #7
    18ac:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    18ae:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    18b0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    18b2:	f3c1 0146 	ubfx	r1, r1, #1, #7
    18b6:	f818 6000 	ldrb.w	r6, [r8, r0]
    18ba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    18be:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    18c2:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    18c4:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    18c6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    18ca:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    18ce:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    18d0:	bf48      	it	mi
    18d2:	4276      	negmi	r6, r6
    18d4:	4659      	mov	r1, fp
    18d6:	4650      	mov	r0, sl
    18d8:	b236      	sxth	r6, r6
    18da:	f002 fa37 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    18de:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    18e2:	2296      	movs	r2, #150	; 0x96
    18e4:	b29b      	uxth	r3, r3
    18e6:	fb02 f303 	mul.w	r3, r2, r3
    18ea:	0c1b      	lsrs	r3, r3, #16
    18ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18f0:	18e1      	adds	r1, r4, r3
    18f2:	5ce2      	ldrb	r2, [r4, r3]
    18f4:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    18f8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    18fc:	54e2      	strb	r2, [r4, r3]
    18fe:	784a      	ldrb	r2, [r1, #1]
    1900:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1904:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1908:	704a      	strb	r2, [r1, #1]
    190a:	788b      	ldrb	r3, [r1, #2]
    190c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1910:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1914:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1916:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    191a:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    191e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    1922:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1924:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1926:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1928:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    192a:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    192c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1930:	f240 8188 	bls.w	1c44 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    1934:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    1938:	2b00      	cmp	r3, #0
    193a:	d197      	bne.n	186c <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    193c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    1940:	2b00      	cmp	r3, #0
    1942:	f000 8189 	beq.w	1c58 <juggle(LEDStruct&)+0x758>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1946:	f8d9 3000 	ldr.w	r3, [r9]
    194a:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    194c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    194e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1952:	f44f 708c 	mov.w	r0, #280	; 0x118
    1956:	fb00 f303 	mul.w	r3, r0, r3
    195a:	0209      	lsls	r1, r1, #8
    195c:	fb03 f301 	mul.w	r3, r3, r1
    1960:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1964:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1968:	e796      	b.n	1898 <juggle(LEDStruct&)+0x398>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    196a:	2b00      	cmp	r3, #0
    196c:	f000 816a 	beq.w	1c44 <juggle(LEDStruct&)+0x744>
    1970:	49b6      	ldr	r1, [pc, #728]	; (1c4c <juggle(LEDStruct&)+0x74c>)
    1972:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1976:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 1c50 <juggle(LEDStruct&)+0x750>
    197a:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 1c54 <juggle(LEDStruct&)+0x754>
    197e:	9102      	str	r1, [sp, #8]
    1980:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    1984:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1988:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    198c:	9503      	str	r5, [sp, #12]
    198e:	e063      	b.n	1a58 <juggle(LEDStruct&)+0x558>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1990:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1994:	2900      	cmp	r1, #0
    1996:	f000 828c 	beq.w	1eb2 <juggle(LEDStruct&)+0x9b2>
    199a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    199e:	443b      	add	r3, r7
    19a0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19a2:	f8d9 1000 	ldr.w	r1, [r9]
    19a6:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    19a8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    19aa:	990c      	ldr	r1, [sp, #48]	; 0x30
    19ac:	bf9c      	itt	ls
    19ae:	021b      	lslls	r3, r3, #8
    19b0:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    19b2:	fb0a f101 	mul.w	r1, sl, r1
    19b6:	fb03 f301 	mul.w	r3, r3, r1
    19ba:	f3c3 430e 	ubfx	r3, r3, #16, #15
    19be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    19c2:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    19c4:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    19c8:	d503      	bpl.n	19d2 <juggle(LEDStruct&)+0x4d2>
    19ca:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    19ce:	3107      	adds	r1, #7
    19d0:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19d2:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    19d4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19d6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    19da:	f818 6000 	ldrb.w	r6, [r8, r0]
    19de:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    19e2:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    19e6:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    19e8:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    19ea:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    19ee:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    19f2:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    19f4:	bf48      	it	mi
    19f6:	4276      	negmi	r6, r6
    19f8:	4659      	mov	r1, fp
    19fa:	a80b      	add	r0, sp, #44	; 0x2c
    19fc:	b236      	sxth	r6, r6
    19fe:	f002 f9a5 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1a02:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1a06:	2296      	movs	r2, #150	; 0x96
    1a08:	b29b      	uxth	r3, r3
    1a0a:	fb02 f303 	mul.w	r3, r2, r3
    1a0e:	0c1b      	lsrs	r3, r3, #16
    1a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a14:	18e1      	adds	r1, r4, r3
    1a16:	5ce2      	ldrb	r2, [r4, r3]
    1a18:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    1a1c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1a20:	54e2      	strb	r2, [r4, r3]
    1a22:	784a      	ldrb	r2, [r1, #1]
    1a24:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    1a28:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1a2c:	704a      	strb	r2, [r1, #1]
    1a2e:	788b      	ldrb	r3, [r1, #2]
    1a30:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    1a34:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1a38:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1a3a:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    1a3e:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1a42:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    1a46:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1a48:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1a4a:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1a4c:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1a4e:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    1a50:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    1a54:	f240 80f6 	bls.w	1c44 <juggle(LEDStruct&)+0x744>
				if (leds.this_dir) {
    1a58:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    1a5c:	2900      	cmp	r1, #0
    1a5e:	d197      	bne.n	1990 <juggle(LEDStruct&)+0x490>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1a60:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1a64:	2900      	cmp	r1, #0
    1a66:	f000 815b 	beq.w	1d20 <juggle(LEDStruct&)+0x820>
    1a6a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1a6e:	443b      	add	r3, r7
    1a70:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a72:	f8d9 1000 	ldr.w	r1, [r9]
    1a76:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1a78:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1a7a:	990e      	ldr	r1, [sp, #56]	; 0x38
    1a7c:	bf9c      	itt	ls
    1a7e:	021b      	lslls	r3, r3, #8
    1a80:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1a82:	fb0a f101 	mul.w	r1, sl, r1
    1a86:	fb03 f301 	mul.w	r3, r3, r1
    1a8a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1a8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1a92:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1a94:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1a96:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1a9a:	d59a      	bpl.n	19d2 <juggle(LEDStruct&)+0x4d2>
    1a9c:	e795      	b.n	19ca <juggle(LEDStruct&)+0x4ca>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    1a9e:	2b00      	cmp	r3, #0
    1aa0:	f000 80d0 	beq.w	1c44 <juggle(LEDStruct&)+0x744>
    1aa4:	4b69      	ldr	r3, [pc, #420]	; (1c4c <juggle(LEDStruct&)+0x74c>)
    1aa6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1aaa:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 1c50 <juggle(LEDStruct&)+0x750>
    1aae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1c54 <juggle(LEDStruct&)+0x754>
    1ab2:	9302      	str	r3, [sp, #8]
    1ab4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    1ab8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    1abc:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    1ac0:	9503      	str	r5, [sp, #12]
    1ac2:	e05a      	b.n	1b7a <juggle(LEDStruct&)+0x67a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac4:	f8d9 3000 	ldr.w	r3, [r9]
    1ac8:	9306      	str	r3, [sp, #24]
	return ret;
    1aca:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1acc:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1ad0:	f44f 708c 	mov.w	r0, #280	; 0x118
    1ad4:	fb00 f303 	mul.w	r3, r0, r3
    1ad8:	0209      	lsls	r1, r1, #8
    1ada:	fb03 f301 	mul.w	r3, r3, r1
    1ade:	0379      	lsls	r1, r7, #13
    1ae0:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    1ae4:	b299      	uxth	r1, r3
    1ae6:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1ae8:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1aec:	d503      	bpl.n	1af6 <juggle(LEDStruct&)+0x5f6>
    1aee:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1af2:	3307      	adds	r3, #7
    1af4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1af6:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1af8:	9d02      	ldr	r5, [sp, #8]
    1afa:	f818 6000 	ldrb.w	r6, [r8, r0]
    1afe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1b02:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1b06:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    1b0a:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1b0c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1b0e:	bf48      	it	mi
    1b10:	425b      	negmi	r3, r3
    1b12:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1b16:	b21e      	sxth	r6, r3
    1b18:	4650      	mov	r0, sl
    1b1a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1b1e:	9100      	str	r1, [sp, #0]
    1b20:	4659      	mov	r1, fp
    1b22:	f002 f913 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1b26:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1b2a:	2296      	movs	r2, #150	; 0x96
    1b2c:	b29b      	uxth	r3, r3
    1b2e:	fb02 f303 	mul.w	r3, r2, r3
    1b32:	0c1b      	lsrs	r3, r3, #16
    1b34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b38:	18e1      	adds	r1, r4, r3
    1b3a:	5ce2      	ldrb	r2, [r4, r3]
    1b3c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1b40:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1b44:	54e2      	strb	r2, [r4, r3]
    1b46:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1b4a:	784a      	ldrb	r2, [r1, #1]
    1b4c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1b50:	704a      	strb	r2, [r1, #1]
    1b52:	788b      	ldrb	r3, [r1, #2]
    1b54:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1b58:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    1b5c:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1b5e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    1b62:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    1b66:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    1b6a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1b6c:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    1b6e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1b70:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    1b72:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    1b74:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    1b78:	d964      	bls.n	1c44 <juggle(LEDStruct&)+0x744>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    1b7a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d1a0      	bne.n	1ac4 <juggle(LEDStruct&)+0x5c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b82:	f8d9 3000 	ldr.w	r3, [r9]
    1b86:	9307      	str	r3, [sp, #28]
	return ret;
    1b88:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1b8a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1b8e:	f44f 708c 	mov.w	r0, #280	; 0x118
    1b92:	0209      	lsls	r1, r1, #8
    1b94:	fb00 f303 	mul.w	r3, r0, r3
    1b98:	fb03 f301 	mul.w	r3, r3, r1
    1b9c:	0379      	lsls	r1, r7, #13
    1b9e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    1ba2:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ba4:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1ba6:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1baa:	d503      	bpl.n	1bb4 <juggle(LEDStruct&)+0x6b4>
    1bac:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    1bb0:	3307      	adds	r3, #7
    1bb2:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bb4:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1bb6:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bb8:	f3c3 0346 	ubfx	r3, r3, #1, #7
    1bbc:	f818 6000 	ldrb.w	r6, [r8, r0]
    1bc0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1bc4:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    1bc8:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1bca:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    1bcc:	bf48      	it	mi
    1bce:	425b      	negmi	r3, r3
    1bd0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1bd4:	b21e      	sxth	r6, r3
    1bd6:	4650      	mov	r0, sl
    1bd8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1bdc:	9100      	str	r1, [sp, #0]
    1bde:	4659      	mov	r1, fp
    1be0:	f002 f8b4 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1be4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1be8:	b29b      	uxth	r3, r3
    1bea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1bee:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1bf2:	0c1b      	lsrs	r3, r3, #16
    1bf4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1bf8:	18e1      	adds	r1, r4, r3
    1bfa:	5ce2      	ldrb	r2, [r4, r3]
    1bfc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1c00:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1c04:	54e2      	strb	r2, [r4, r3]
    1c06:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1c0a:	784a      	ldrb	r2, [r1, #1]
    1c0c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1c10:	704a      	strb	r2, [r1, #1]
    1c12:	788b      	ldrb	r3, [r1, #2]
    1c14:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1c18:	fa83 f352 	uqadd8	r3, r3, r2
    1c1c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1c1e:	708b      	strb	r3, [r1, #2]
    1c20:	4622      	mov	r2, r4
    1c22:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1c24:	7819      	ldrb	r1, [r3, #0]
    1c26:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1c2a:	7859      	ldrb	r1, [r3, #1]
    1c2c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1c30:	7899      	ldrb	r1, [r3, #2]
    1c32:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1c36:	3303      	adds	r3, #3
    1c38:	42ab      	cmp	r3, r5
    1c3a:	f1a2 0203 	sub.w	r2, r2, #3
    1c3e:	d1f1      	bne.n	1c24 <juggle(LEDStruct&)+0x724>
    1c40:	9503      	str	r5, [sp, #12]
    1c42:	e78c      	b.n	1b5e <juggle(LEDStruct&)+0x65e>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    1c44:	b011      	add	sp, #68	; 0x44
    1c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c4a:	bf00      	nop
    1c4c:	00006b6c 	.word	0x00006b6c
    1c50:	1fff9780 	.word	0x1fff9780
    1c54:	000073d8 	.word	0x000073d8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c58:	f8d9 3000 	ldr.w	r3, [r9]
    1c5c:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    1c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1c60:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1c64:	f44f 708c 	mov.w	r0, #280	; 0x118
    1c68:	fb00 f101 	mul.w	r1, r0, r1
    1c6c:	021b      	lsls	r3, r3, #8
    1c6e:	fb03 f301 	mul.w	r3, r3, r1
    1c72:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1c76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1c7a:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    1c7e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c80:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1c82:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1c86:	d503      	bpl.n	1c90 <juggle(LEDStruct&)+0x790>
    1c88:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1c8c:	3107      	adds	r1, #7
    1c8e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1c90:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1c92:	9d02      	ldr	r5, [sp, #8]
    1c94:	f818 6000 	ldrb.w	r6, [r8, r0]
    1c98:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1c9c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1ca0:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1ca4:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1ca6:	b2b6      	uxth	r6, r6
    1ca8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1cac:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1cb0:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    1cb2:	bf48      	it	mi
    1cb4:	4276      	negmi	r6, r6
    1cb6:	4659      	mov	r1, fp
    1cb8:	4650      	mov	r0, sl
    1cba:	b236      	sxth	r6, r6
    1cbc:	f002 f846 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1cc0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1cc4:	b29b      	uxth	r3, r3
    1cc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1cca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1cce:	0c1b      	lsrs	r3, r3, #16
    1cd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1cd4:	18e1      	adds	r1, r4, r3
    1cd6:	5ce2      	ldrb	r2, [r4, r3]
    1cd8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1cdc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1ce0:	54e2      	strb	r2, [r4, r3]
    1ce2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1ce6:	784a      	ldrb	r2, [r1, #1]
    1ce8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1cec:	704a      	strb	r2, [r1, #1]
    1cee:	788b      	ldrb	r3, [r1, #2]
    1cf0:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1cf4:	fa83 f352 	uqadd8	r3, r3, r2
    1cf8:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1cfa:	708b      	strb	r3, [r1, #2]
    1cfc:	4622      	mov	r2, r4
    1cfe:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1d00:	7819      	ldrb	r1, [r3, #0]
    1d02:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1d06:	7859      	ldrb	r1, [r3, #1]
    1d08:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1d0c:	7899      	ldrb	r1, [r3, #2]
    1d0e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1d12:	3303      	adds	r3, #3
    1d14:	42ab      	cmp	r3, r5
    1d16:	f1a2 0203 	sub.w	r2, r2, #3
    1d1a:	d1f1      	bne.n	1d00 <juggle(LEDStruct&)+0x800>
    1d1c:	9503      	str	r5, [sp, #12]
    1d1e:	e5fa      	b.n	1916 <juggle(LEDStruct&)+0x416>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1d20:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1d24:	443b      	add	r3, r7
    1d26:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d28:	f8d9 1000 	ldr.w	r1, [r9]
    1d2c:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1d2e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1d30:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1d32:	bf9c      	itt	ls
    1d34:	021b      	lslls	r3, r3, #8
    1d36:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1d38:	fb0a f101 	mul.w	r1, sl, r1
    1d3c:	fb03 f301 	mul.w	r3, r3, r1
    1d40:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1d44:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    1d48:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d4a:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1d4c:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1d50:	d503      	bpl.n	1d5a <juggle(LEDStruct&)+0x85a>
    1d52:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1d56:	3107      	adds	r1, #7
    1d58:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1d5a:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d5c:	9d02      	ldr	r5, [sp, #8]
    1d5e:	f818 6000 	ldrb.w	r6, [r8, r0]
    1d62:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1d66:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1d6a:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1d6e:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1d70:	b2b6      	uxth	r6, r6
    1d72:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1d76:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1d7a:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    1d7c:	bf48      	it	mi
    1d7e:	4276      	negmi	r6, r6
    1d80:	4659      	mov	r1, fp
    1d82:	a80b      	add	r0, sp, #44	; 0x2c
    1d84:	b236      	sxth	r6, r6
    1d86:	f001 ffe1 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1d8a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1d8e:	b29b      	uxth	r3, r3
    1d90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1d94:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1d98:	0c1b      	lsrs	r3, r3, #16
    1d9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1d9e:	18e1      	adds	r1, r4, r3
    1da0:	5ce2      	ldrb	r2, [r4, r3]
    1da2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    1da6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1daa:	54e2      	strb	r2, [r4, r3]
    1dac:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    1db0:	784a      	ldrb	r2, [r1, #1]
    1db2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1db6:	704a      	strb	r2, [r1, #1]
    1db8:	788b      	ldrb	r3, [r1, #2]
    1dba:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    1dbe:	fa83 f352 	uqadd8	r3, r3, r2
    1dc2:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1dc4:	708b      	strb	r3, [r1, #2]
    1dc6:	4622      	mov	r2, r4
    1dc8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1dca:	7819      	ldrb	r1, [r3, #0]
    1dcc:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1dd0:	7859      	ldrb	r1, [r3, #1]
    1dd2:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1dd6:	7899      	ldrb	r1, [r3, #2]
    1dd8:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1ddc:	3303      	adds	r3, #3
    1dde:	42ab      	cmp	r3, r5
    1de0:	f1a2 0203 	sub.w	r2, r2, #3
    1de4:	d1f1      	bne.n	1dca <juggle(LEDStruct&)+0x8ca>
    1de6:	9503      	str	r5, [sp, #12]
    1de8:	e627      	b.n	1a3a <juggle(LEDStruct&)+0x53a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dea:	f8d9 3000 	ldr.w	r3, [r9]
    1dee:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    1df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192*i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1df2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    1df6:	f44f 708c 	mov.w	r0, #280	; 0x118
    1dfa:	fb00 f303 	mul.w	r3, r0, r3
    1dfe:	0209      	lsls	r1, r1, #8
    1e00:	fb03 f301 	mul.w	r3, r3, r1
    1e04:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1e08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    1e0c:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    1e10:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e12:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1e14:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1e18:	d503      	bpl.n	1e22 <juggle(LEDStruct&)+0x922>
    1e1a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1e1e:	3107      	adds	r1, #7
    1e20:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1e22:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e24:	9d02      	ldr	r5, [sp, #8]
    1e26:	f818 6000 	ldrb.w	r6, [r8, r0]
    1e2a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1e2e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1e32:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1e36:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1e38:	b2b6      	uxth	r6, r6
    1e3a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1e3e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1e42:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    1e44:	bf48      	it	mi
    1e46:	4276      	negmi	r6, r6
    1e48:	4659      	mov	r1, fp
    1e4a:	4650      	mov	r0, sl
    1e4c:	b236      	sxth	r6, r6
    1e4e:	f001 ff7d 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1e52:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1e56:	b29b      	uxth	r3, r3
    1e58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1e5c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1e60:	0c1b      	lsrs	r3, r3, #16
    1e62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1e66:	18e1      	adds	r1, r4, r3
    1e68:	5ce2      	ldrb	r2, [r4, r3]
    1e6a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    1e6e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1e72:	54e2      	strb	r2, [r4, r3]
    1e74:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    1e78:	784a      	ldrb	r2, [r1, #1]
    1e7a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1e7e:	704a      	strb	r2, [r1, #1]
    1e80:	788b      	ldrb	r3, [r1, #2]
    1e82:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    1e86:	fa83 f352 	uqadd8	r3, r3, r2
    1e8a:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1e8c:	708b      	strb	r3, [r1, #2]
    1e8e:	4622      	mov	r2, r4
    1e90:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1e92:	7819      	ldrb	r1, [r3, #0]
    1e94:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1e98:	7859      	ldrb	r1, [r3, #1]
    1e9a:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1e9e:	7899      	ldrb	r1, [r3, #2]
    1ea0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1ea4:	3303      	adds	r3, #3
    1ea6:	429d      	cmp	r5, r3
    1ea8:	f1a2 0203 	sub.w	r2, r2, #3
    1eac:	d1f1      	bne.n	1e92 <juggle(LEDStruct&)+0x992>
    1eae:	9503      	str	r5, [sp, #12]
    1eb0:	e531      	b.n	1916 <juggle(LEDStruct&)+0x416>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    1eb2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1eb6:	443b      	add	r3, r7
    1eb8:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1eba:	f8d9 1000 	ldr.w	r1, [r9]
    1ebe:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    1ec0:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    1ec2:	990d      	ldr	r1, [sp, #52]	; 0x34
    1ec4:	bf9c      	itt	ls
    1ec6:	021b      	lslls	r3, r3, #8
    1ec8:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    1eca:	fb0a f101 	mul.w	r1, sl, r1
    1ece:	fb03 f301 	mul.w	r3, r3, r1
    1ed2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1ed6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    1eda:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    1edc:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    1ee0:	d503      	bpl.n	1eea <juggle(LEDStruct&)+0x9ea>
    1ee2:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    1ee6:	3107      	adds	r1, #7
    1ee8:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    1eea:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1eec:	9d02      	ldr	r5, [sp, #8]
    1eee:	f818 6000 	ldrb.w	r6, [r8, r0]
    1ef2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    1ef6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    1efa:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    1efe:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    1f00:	b2b6      	uxth	r6, r6
    1f02:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    1f06:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    1f0a:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    1f0c:	bf48      	it	mi
    1f0e:	4276      	negmi	r6, r6
    1f10:	4659      	mov	r1, fp
    1f12:	a80b      	add	r0, sp, #44	; 0x2c
    1f14:	b236      	sxth	r6, r6
    1f16:	f001 ff19 	bl	3d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1f1a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    1f1e:	b29b      	uxth	r3, r3
    1f20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f24:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    1f28:	0c1b      	lsrs	r3, r3, #16
    1f2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1f2e:	18e1      	adds	r1, r4, r3
    1f30:	5ce2      	ldrb	r2, [r4, r3]
    1f32:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    1f36:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    1f3a:	54e2      	strb	r2, [r4, r3]
    1f3c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    1f40:	784a      	ldrb	r2, [r1, #1]
    1f42:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    1f46:	704a      	strb	r2, [r1, #1]
    1f48:	788b      	ldrb	r3, [r1, #2]
    1f4a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    1f4e:	fa83 f352 	uqadd8	r3, r3, r2
    1f52:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    1f54:	708b      	strb	r3, [r1, #2]
    1f56:	4622      	mov	r2, r4
    1f58:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f5a:	7819      	ldrb	r1, [r3, #0]
    1f5c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    1f60:	7859      	ldrb	r1, [r3, #1]
    1f62:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    1f66:	7899      	ldrb	r1, [r3, #2]
    1f68:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    1f6c:	3303      	adds	r3, #3
    1f6e:	42ab      	cmp	r3, r5
    1f70:	f1a2 0203 	sub.w	r2, r2, #3
    1f74:	d1f1      	bne.n	1f5a <juggle(LEDStruct&)+0xa5a>
    1f76:	9503      	str	r5, [sp, #12]
    1f78:	e55f      	b.n	1a3a <juggle(LEDStruct&)+0x53a>
    1f7a:	bf00      	nop

00001f7c <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    1f7c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    1f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f84:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    1f86:	2b00      	cmp	r3, #0
    1f88:	d06b      	beq.n	2062 <rainbow_march(LEDStruct&)+0xe6>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1f8a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    1f8e:	bb43      	cbnz	r3, 1fe2 <rainbow_march(LEDStruct&)+0x66>
    1f90:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    1f94:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    1f98:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    1f9a:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1f9e:	b2d2      	uxtb	r2, r2
    1fa0:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    1fa4:	bb4b      	cbnz	r3, 1ffa <rainbow_march(LEDStruct&)+0x7e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    1fa6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    1faa:	2b00      	cmp	r3, #0
    1fac:	d151      	bne.n	2052 <rainbow_march(LEDStruct&)+0xd6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    1fae:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    1fb2:	214b      	movs	r1, #75	; 0x4b
    1fb4:	4620      	mov	r0, r4
    1fb6:	f001 fdb7 	bl	3b28 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    1fba:	4620      	mov	r0, r4
    1fbc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    1fc0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1fc2:	7802      	ldrb	r2, [r0, #0]
    1fc4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    1fc8:	7842      	ldrb	r2, [r0, #1]
    1fca:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    1fce:	7882      	ldrb	r2, [r0, #2]
    1fd0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    1fd4:	3003      	adds	r0, #3
    1fd6:	4288      	cmp	r0, r1
    1fd8:	f1a3 0303 	sub.w	r3, r3, #3
    1fdc:	d1f1      	bne.n	1fc2 <rainbow_march(LEDStruct&)+0x46>
    1fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1fe2:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
    1fe6:	f894 2236 	ldrb.w	r2, [r4, #566]	; 0x236
    1fea:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    1fec:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    1ff0:	b2d2      	uxtb	r2, r2
    1ff2:	f884 2238 	strb.w	r2, [r4, #568]	; 0x238

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d0d5      	beq.n	1fa6 <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    1ffa:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    1ffe:	2125      	movs	r1, #37	; 0x25
    2000:	4620      	mov	r0, r4
    2002:	f001 fd91 	bl	3b28 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2006:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    200a:	4623      	mov	r3, r4
    200c:	4621      	mov	r1, r4
    200e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2010:	7810      	ldrb	r0, [r2, #0]
    2012:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    2016:	7850      	ldrb	r0, [r2, #1]
    2018:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    201c:	7890      	ldrb	r0, [r2, #2]
    201e:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    2022:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    2024:	42aa      	cmp	r2, r5
    2026:	f1a1 0103 	sub.w	r1, r1, #3
    202a:	d1f1      	bne.n	2010 <rainbow_march(LEDStruct&)+0x94>
    202c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2030:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2032:	7802      	ldrb	r2, [r0, #0]
    2034:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2038:	7842      	ldrb	r2, [r0, #1]
    203a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    203e:	7882      	ldrb	r2, [r0, #2]
    2040:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2044:	3003      	adds	r0, #3
    2046:	4288      	cmp	r0, r1
    2048:	f1a3 0303 	sub.w	r3, r3, #3
    204c:	d1f1      	bne.n	2032 <rainbow_march(LEDStruct&)+0xb6>
    204e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2052:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2056:	4620      	mov	r0, r4
    2058:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    205a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    205e:	f001 bd63 	b.w	3b28 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2062:	4927      	ldr	r1, [pc, #156]	; (2100 <rainbow_march(LEDStruct&)+0x184>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2064:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    2068:	880b      	ldrh	r3, [r1, #0]
    206a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    206e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2072:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2076:	3319      	adds	r3, #25
    2078:	b29b      	uxth	r3, r3
    207a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    207e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2082:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2086:	3219      	adds	r2, #25
    2088:	b292      	uxth	r2, r2
    208a:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    208e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2092:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2096:	3519      	adds	r5, #25
    2098:	b2ad      	uxth	r5, r5
    209a:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    209e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    20a2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    20a6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20aa:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    20ae:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    20b0:	b2d2      	uxtb	r2, r2
    20b2:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    20b4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    20b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    20bc:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    20be:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    20c0:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    20c2:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    20c6:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    20c8:	3201      	adds	r2, #1
    20ca:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    20ce:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    20d2:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    20d6:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
    leds.rainbow_rot    = rr;
    20da:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    20de:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    20e0:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    20e2:	f880 71c4 	strb.w	r7, [r0, #452]	; 0x1c4
	leds.this_dir = td;
    20e6:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    20ea:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    20ee:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    20f2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20f6:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    20f8:	f7fe fbe2 	bl	8c0 <LEDDebug(LEDStruct&)>
    20fc:	e745      	b.n	1f8a <rainbow_march(LEDStruct&)+0xe>
    20fe:	bf00      	nop
    2100:	1fff872e 	.word	0x1fff872e

00002104 <fire(LEDStruct&)>:


void fire(LEDStruct& leds) {
    2104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2108:	f890 32d4 	ldrb.w	r3, [r0, #724]	; 0x2d4
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    210c:	b082      	sub	sp, #8
    210e:	4604      	mov	r4, r0
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2110:	2b00      	cmp	r3, #0
    2112:	f000 8262 	beq.w	25da <fire(LEDStruct&)+0x4d6>
    2116:	f890 223c 	ldrb.w	r2, [r0, #572]	; 0x23c
    211a:	f8df e424 	ldr.w	lr, [pc, #1060]	; 2540 <fire(LEDStruct&)+0x43c>
    211e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2122:	0056      	lsls	r6, r2, #1
    2124:	f203 273d 	addw	r7, r3, #573	; 0x23d
    2128:	fb96 f6f3 	sdiv	r6, r6, r3
    212c:	f8be 2000 	ldrh.w	r2, [lr]
    2130:	3602      	adds	r6, #2
    2132:	b2f6      	uxtb	r6, r6
    2134:	4407      	add	r7, r0
    2136:	f200 253d 	addw	r5, r0, #573	; 0x23d
    213a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    213e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2142:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2146:	3219      	adds	r2, #25
    2148:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    214a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    214e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    2152:	b2c9      	uxtb	r1, r1
    2154:	fb11 f106 	smulbb	r1, r1, r6
    2158:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    215c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void fire(LEDStruct& leds) {
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2160:	42af      	cmp	r7, r5
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    2162:	7029      	strb	r1, [r5, #0]

void fire(LEDStruct& leds) {
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    2164:	d1e9      	bne.n	213a <fire(LEDStruct&)+0x36>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    2166:	f894 52d6 	ldrb.w	r5, [r4, #726]	; 0x2d6
    216a:	f8ae 2000 	strh.w	r2, [lr]
    216e:	2d00      	cmp	r5, #0
    2170:	f000 8110 	beq.w	2394 <fire(LEDStruct&)+0x290>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    2174:	1edf      	subs	r7, r3, #3
    2176:	2f01      	cmp	r7, #1
    2178:	f04f 0c01 	mov.w	ip, #1
    217c:	dd1a      	ble.n	21b4 <fire(LEDStruct&)+0xb0>
    217e:	f203 203a 	addw	r0, r3, #570	; 0x23a
    2182:	f503 760f 	add.w	r6, r3, #572	; 0x23c
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    2186:	f8df 93bc 	ldr.w	r9, [pc, #956]	; 2544 <fire(LEDStruct&)+0x440>
    218a:	4420      	add	r0, r4
    218c:	4426      	add	r6, r4
    218e:	f204 283e 	addw	r8, r4, #574	; 0x23e
    2192:	7801      	ldrb	r1, [r0, #0]
    2194:	f810 5d01 	ldrb.w	r5, [r0, #-1]!
    2198:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    219c:	fb89 a501 	smull	sl, r5, r9, r1
    21a0:	eba5 71e1 	sub.w	r1, r5, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    21a4:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    21a6:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    21aa:	d1f2      	bne.n	2192 <fire(LEDStruct&)+0x8e>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    21ac:	f1bc 0f00 	cmp.w	ip, #0
    21b0:	f000 80d9 	beq.w	2366 <fire(LEDStruct&)+0x262>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    21b4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    21b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    21bc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    21c0:	3219      	adds	r2, #25
    21c2:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    21c4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    21c8:	f894 523a 	ldrb.w	r5, [r4, #570]	; 0x23a
    21cc:	f8ae 2000 	strh.w	r2, [lr]
    21d0:	b2c9      	uxtb	r1, r1
    21d2:	428d      	cmp	r5, r1
    21d4:	48da      	ldr	r0, [pc, #872]	; (2540 <fire(LEDStruct&)+0x43c>)
    21d6:	d926      	bls.n	2226 <fire(LEDStruct&)+0x122>
    21d8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    21dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    21e0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    21e4:	3219      	adds	r2, #25
    21e6:	b292      	uxth	r2, r2
    21e8:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    21ec:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    21f0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    21f4:	3519      	adds	r5, #25
    21f6:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    21f8:	eb05 2115 	add.w	r1, r5, r5, lsr #8
    21fc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2200:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2202:	b2d2      	uxtb	r2, r2
    2204:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    2208:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    220c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    2210:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
    2214:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2216:	8005      	strh	r5, [r0, #0]
    2218:	3960      	subs	r1, #96	; 0x60
    221a:	f892 023e 	ldrb.w	r0, [r2, #574]	; 0x23e
    221e:	fa80 f051 	uqadd8	r0, r0, r1
    2222:	f882 023e 	strb.w	r0, [r2, #574]	; 0x23e
	}

	if (!leds.fire_sync) {
    2226:	f1bc 0f00 	cmp.w	ip, #0
    222a:	d114      	bne.n	2256 <fire(LEDStruct&)+0x152>
    222c:	f8be 2000 	ldrh.w	r2, [lr]
		if (random8() < leds.fire_sparking2) {
    2230:	f894 523b 	ldrb.w	r5, [r4, #571]	; 0x23b
    2234:	49c2      	ldr	r1, [pc, #776]	; (2540 <fire(LEDStruct&)+0x43c>)
    2236:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    223a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    223e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2242:	3219      	adds	r2, #25
    2244:	b292      	uxth	r2, r2
    2246:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    224a:	b2c0      	uxtb	r0, r0
    224c:	4285      	cmp	r5, r0
    224e:	f8ae 2000 	strh.w	r2, [lr]
    2252:	f200 80ca 	bhi.w	23ea <fire(LEDStruct&)+0x2e6>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    2256:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    225a:	2a00      	cmp	r2, #0
    225c:	d162      	bne.n	2324 <fire(LEDStruct&)+0x220>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    225e:	2b00      	cmp	r3, #0
    2260:	f000 81b2 	beq.w	25c8 <fire(LEDStruct&)+0x4c4>
    2264:	f204 273d 	addw	r7, r4, #573	; 0x23d
    2268:	4690      	mov	r8, r2
    226a:	46b9      	mov	r9, r7
    226c:	ae01      	add	r6, sp, #4
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
    226e:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    2272:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    2276:	1b5d      	subs	r5, r3, r5
    2278:	3d01      	subs	r5, #1
    227a:	ebc8 0505 	rsb	r5, r8, r5
    227e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2282:	4630      	mov	r0, r6
    2284:	f001 fd40 	bl	3d08 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2288:	f89d 3004 	ldrb.w	r3, [sp, #4]
    228c:	5563      	strb	r3, [r4, r5]
    228e:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2290:	f89d 3006 	ldrb.w	r3, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2294:	f89d 2005 	ldrb.w	r2, [sp, #5]
    2298:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    229a:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    229c:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    22a0:	f108 0801 	add.w	r8, r8, #1
    22a4:	4543      	cmp	r3, r8
    22a6:	dce2      	bgt.n	226e <fire(LEDStruct&)+0x16a>
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    22a8:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    22ac:	b30a      	cbz	r2, 22f2 <fire(LEDStruct&)+0x1ee>
		if (leds.this_dir) {
    22ae:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    22b2:	2a00      	cmp	r2, #0
    22b4:	f040 8148 	bne.w	2548 <fire(LEDStruct&)+0x444>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    22b8:	4690      	mov	r8, r2
    22ba:	2b00      	cmp	r3, #0
    22bc:	f000 8187 	beq.w	25ce <fire(LEDStruct&)+0x4ca>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
    22c0:	eb08 0553 	add.w	r5, r8, r3, lsr #1
    22c4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    22c8:	4630      	mov	r0, r6
    22ca:	f001 fd1d 	bl	3d08 <HeatColor(unsigned char)>
    22ce:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    22d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    22d6:	54e2      	strb	r2, [r4, r3]
    22d8:	4423      	add	r3, r4
        g = rhs.g;
    22da:	f89d 1005 	ldrb.w	r1, [sp, #5]
        b = rhs.b;
    22de:	f89d 2006 	ldrb.w	r2, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    22e2:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    22e4:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    22e6:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    22ea:	f108 0801 	add.w	r8, r8, #1
    22ee:	4543      	cmp	r3, r8
    22f0:	dce6      	bgt.n	22c0 <fire(LEDStruct&)+0x1bc>
    22f2:	f894 22d6 	ldrb.w	r2, [r4, #726]	; 0x2d6
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    22f6:	2a00      	cmp	r2, #0
    22f8:	f000 80a0 	beq.w	243c <fire(LEDStruct&)+0x338>
    22fc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2300:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2302:	781a      	ldrb	r2, [r3, #0]
    2304:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    2308:	785a      	ldrb	r2, [r3, #1]
    230a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    230e:	789a      	ldrb	r2, [r3, #2]
    2310:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    2314:	3303      	adds	r3, #3
    2316:	4299      	cmp	r1, r3
    2318:	f1a4 0403 	sub.w	r4, r4, #3
    231c:	d1f1      	bne.n	2302 <fire(LEDStruct&)+0x1fe>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    231e:	b002      	add	sp, #8
    2320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2324:	2b00      	cmp	r3, #0
    2326:	f000 80dc 	beq.w	24e2 <fire(LEDStruct&)+0x3de>
    232a:	f204 273d 	addw	r7, r4, #573	; 0x23d
    232e:	46b9      	mov	r9, r7
    2330:	4625      	mov	r5, r4
    2332:	f04f 0800 	mov.w	r8, #0
    2336:	ae01      	add	r6, sp, #4
			leds.led_data[j] = HeatColor(leds.heat[j]);
    2338:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    233c:	4630      	mov	r0, r6
    233e:	f001 fce3 	bl	3d08 <HeatColor(unsigned char)>
    2342:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2346:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    234a:	f89d 2005 	ldrb.w	r2, [sp, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    234e:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    2350:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    2352:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    2354:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2358:	f108 0801 	add.w	r8, r8, #1
    235c:	4543      	cmp	r3, r8
    235e:	f105 0503 	add.w	r5, r5, #3
    2362:	dce9      	bgt.n	2338 <fire(LEDStruct&)+0x234>
    2364:	e7a0      	b.n	22a8 <fire(LEDStruct&)+0x1a4>
    2366:	f203 2585 	addw	r5, r3, #645	; 0x285
    236a:	f203 2687 	addw	r6, r3, #647	; 0x287
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    236e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 2544 <fire(LEDStruct&)+0x440>
    2372:	4425      	add	r5, r4
    2374:	4426      	add	r6, r4
    2376:	7829      	ldrb	r1, [r5, #0]
    2378:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
    237c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    2380:	fb88 9001 	smull	r9, r0, r8, r1
    2384:	3f01      	subs	r7, #1
    2386:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    238a:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    238c:	f806 1d01 	strb.w	r1, [r6, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    2390:	d1f1      	bne.n	2376 <fire(LEDStruct&)+0x272>
    2392:	e70f      	b.n	21b4 <fire(LEDStruct&)+0xb0>
    2394:	f894 123d 	ldrb.w	r1, [r4, #573]	; 0x23d
    2398:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    239c:	004f      	lsls	r7, r1, #1
    239e:	fb97 f7f3 	sdiv	r7, r7, r3
    23a2:	3702      	adds	r7, #2
    23a4:	b2ff      	uxtb	r7, r7
    23a6:	f504 7622 	add.w	r6, r4, #648	; 0x288
    23aa:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    23ae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    23b2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    23b6:	3219      	adds	r2, #25
    23b8:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    23ba:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    23be:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    23c2:	b2c9      	uxtb	r1, r1
    23c4:	fb11 f107 	smulbb	r1, r1, r7
    23c8:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    23cc:	3501      	adds	r5, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    23ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    23d2:	429d      	cmp	r5, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    23d4:	7031      	strb	r1, [r6, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    23d6:	dbe8      	blt.n	23aa <fire(LEDStruct&)+0x2a6>
    23d8:	f8ae 2000 	strh.w	r2, [lr]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    23dc:	1edf      	subs	r7, r3, #3
    23de:	2f01      	cmp	r7, #1
    23e0:	f04f 0c00 	mov.w	ip, #0
    23e4:	f73f aecb 	bgt.w	217e <fire(LEDStruct&)+0x7a>
    23e8:	e6e4      	b.n	21b4 <fire(LEDStruct&)+0xb0>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    23ea:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    23ee:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    23f2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    23f6:	3219      	adds	r2, #25
    23f8:	b292      	uxth	r2, r2
    23fa:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    23fe:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2402:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2406:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2408:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    240c:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    240e:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2410:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2414:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2418:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    241a:	eb04 2222 	add.w	r2, r4, r2, asr #8
    241e:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    2422:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    2426:	f892 6289 	ldrb.w	r6, [r2, #649]	; 0x289
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    242a:	800d      	strh	r5, [r1, #0]
    242c:	1201      	asrs	r1, r0, #8
    242e:	3960      	subs	r1, #96	; 0x60
    2430:	4630      	mov	r0, r6
    2432:	fa80 f051 	uqadd8	r0, r0, r1
    2436:	f882 0289 	strb.w	r0, [r2, #649]	; 0x289
    243a:	e70c      	b.n	2256 <fire(LEDStruct&)+0x152>
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    243c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    2440:	2a00      	cmp	r2, #0
    2442:	d158      	bne.n	24f6 <fire(LEDStruct&)+0x3f2>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2444:	2b00      	cmp	r3, #0
    2446:	f43f af6a 	beq.w	231e <fire(LEDStruct&)+0x21a>
    244a:	f504 7722 	add.w	r7, r4, #648	; 0x288
    244e:	46b9      	mov	r9, r7
    2450:	f04f 0800 	mov.w	r8, #0
    2454:	ae01      	add	r6, sp, #4
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    2456:	f894 52d5 	ldrb.w	r5, [r4, #725]	; 0x2d5
    245a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    245e:	354b      	adds	r5, #75	; 0x4b
    2460:	4445      	add	r5, r8
    2462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2466:	4630      	mov	r0, r6
    2468:	f001 fc4e 	bl	3d08 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    246c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2470:	5563      	strb	r3, [r4, r5]
    2472:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    2474:	f89d 3006 	ldrb.w	r3, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2478:	f89d 2005 	ldrb.w	r2, [sp, #5]
    247c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    247e:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    2480:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2484:	f108 0801 	add.w	r8, r8, #1
    2488:	4543      	cmp	r3, r8
    248a:	dce4      	bgt.n	2456 <fire(LEDStruct&)+0x352>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    248c:	f894 22d7 	ldrb.w	r2, [r4, #727]	; 0x2d7
    2490:	2a00      	cmp	r2, #0
    2492:	f43f af44 	beq.w	231e <fire(LEDStruct&)+0x21a>
			if (leds.this_dir) {
    2496:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    249a:	2a00      	cmp	r2, #0
    249c:	d073      	beq.n	2586 <fire(LEDStruct&)+0x482>
				for (int j = 0; j < leds.heat_length; j++) {
    249e:	2b00      	cmp	r3, #0
    24a0:	f43f af3d 	beq.w	231e <fire(LEDStruct&)+0x21a>
    24a4:	4625      	mov	r5, r4
    24a6:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    24aa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    24ae:	4630      	mov	r0, r6
    24b0:	f001 fc2a 	bl	3d08 <HeatColor(unsigned char)>
    24b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    24b8:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    24bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    24c0:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    24c4:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    24c8:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    24cc:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    24d0:	f108 0801 	add.w	r8, r8, #1
    24d4:	4543      	cmp	r3, r8
    24d6:	f105 0503 	add.w	r5, r5, #3
    24da:	dce6      	bgt.n	24aa <fire(LEDStruct&)+0x3a6>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    24dc:	b002      	add	sp, #8
    24de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    24e2:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    24e6:	2b00      	cmp	r3, #0
    24e8:	d171      	bne.n	25ce <fire(LEDStruct&)+0x4ca>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    24ea:	f1bc 0f00 	cmp.w	ip, #0
    24ee:	f47f af05 	bne.w	22fc <fire(LEDStruct&)+0x1f8>
    24f2:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    24f6:	2b00      	cmp	r3, #0
    24f8:	f43f af11 	beq.w	231e <fire(LEDStruct&)+0x21a>
    24fc:	f504 7722 	add.w	r7, r4, #648	; 0x288
    2500:	46b9      	mov	r9, r7
    2502:	4625      	mov	r5, r4
    2504:	f04f 0800 	mov.w	r8, #0
    2508:	ae01      	add	r6, sp, #4
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    250a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    250e:	4630      	mov	r0, r6
    2510:	f001 fbfa 	bl	3d08 <HeatColor(unsigned char)>
    2514:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2518:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    251c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2520:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    2524:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    2528:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    252c:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2530:	f108 0801 	add.w	r8, r8, #1
    2534:	4543      	cmp	r3, r8
    2536:	f1a5 0503 	sub.w	r5, r5, #3
    253a:	dce6      	bgt.n	250a <fire(LEDStruct&)+0x406>
    253c:	e7a6      	b.n	248c <fire(LEDStruct&)+0x388>
    253e:	bf00      	nop
    2540:	1fff872e 	.word	0x1fff872e
    2544:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2548:	2b00      	cmp	r3, #0
    254a:	d040      	beq.n	25ce <fire(LEDStruct&)+0x4ca>
    254c:	4625      	mov	r5, r4
    254e:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    2552:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    2556:	4630      	mov	r0, r6
    2558:	f001 fbd6 	bl	3d08 <HeatColor(unsigned char)>
    255c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2560:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    2564:	f89d 2005 	ldrb.w	r2, [sp, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2568:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    256c:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    2570:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    2574:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    2578:	f108 0801 	add.w	r8, r8, #1
    257c:	4543      	cmp	r3, r8
    257e:	f1a5 0503 	sub.w	r5, r5, #3
    2582:	dce6      	bgt.n	2552 <fire(LEDStruct&)+0x44e>
    2584:	e6b5      	b.n	22f2 <fire(LEDStruct&)+0x1ee>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    2586:	4690      	mov	r8, r2
    2588:	2b00      	cmp	r3, #0
    258a:	f43f aec8 	beq.w	231e <fire(LEDStruct&)+0x21a>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    258e:	334b      	adds	r3, #75	; 0x4b
    2590:	ebc8 0503 	rsb	r5, r8, r3
    2594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2598:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    259c:	4630      	mov	r0, r6
    259e:	f001 fbb3 	bl	3d08 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    25a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    25a6:	5563      	strb	r3, [r4, r5]
    25a8:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    25aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    25ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
    25b2:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    25b4:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    25b6:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    25ba:	f108 0801 	add.w	r8, r8, #1
    25be:	4543      	cmp	r3, r8
    25c0:	dce5      	bgt.n	258e <fire(LEDStruct&)+0x48a>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    25c2:	b002      	add	sp, #8
    25c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - leds.fire_offset - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    25c8:	f894 32d7 	ldrb.w	r3, [r4, #727]	; 0x2d7
    25cc:	b183      	cbz	r3, 25f0 <fire(LEDStruct&)+0x4ec>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    25ce:	f894 32d6 	ldrb.w	r3, [r4, #726]	; 0x2d6
    25d2:	2b00      	cmp	r3, #0
    25d4:	f47f ae92 	bne.w	22fc <fire(LEDStruct&)+0x1f8>
    25d8:	e6a1      	b.n	231e <fire(LEDStruct&)+0x21a>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    25da:	f890 22d6 	ldrb.w	r2, [r0, #726]	; 0x2d6
    25de:	f8df e020 	ldr.w	lr, [pc, #32]	; 2600 <fire(LEDStruct&)+0x4fc>
    25e2:	b112      	cbz	r2, 25ea <fire(LEDStruct&)+0x4e6>
    25e4:	f8be 2000 	ldrh.w	r2, [lr]
    25e8:	e5c4      	b.n	2174 <fire(LEDStruct&)+0x70>
    25ea:	f8be 2000 	ldrh.w	r2, [lr]
    25ee:	e6f5      	b.n	23dc <fire(LEDStruct&)+0x2d8>
				leds.led_data[leds.heat_length / 2 + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    25f0:	f1bc 0f00 	cmp.w	ip, #0
    25f4:	f47f ae82 	bne.w	22fc <fire(LEDStruct&)+0x1f8>
    25f8:	f894 32d4 	ldrb.w	r3, [r4, #724]	; 0x2d4
    25fc:	e722      	b.n	2444 <fire(LEDStruct&)+0x340>
    25fe:	bf00      	nop
    2600:	1fff872e 	.word	0x1fff872e

00002604 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    2604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    2606:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    260a:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    260c:	2b0c      	cmp	r3, #12
    260e:	f200 83bf 	bhi.w	2d90 <switch_mode(LEDStruct&)+0x78c>
    2612:	e8df f013 	tbh	[pc, r3, lsl #1]
    2616:	0169      	.short	0x0169
    2618:	026901ea 	.word	0x026901ea
    261c:	00ce0051 	.word	0x00ce0051
    2620:	00d302e8 	.word	0x00d302e8
    2624:	012a0125 	.word	0x012a0125
    2628:	0381033f 	.word	0x0381033f
    262c:	004c000d 	.word	0x004c000d
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_UNSYNC:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    2630:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    2634:	2a00      	cmp	r2, #0
    2636:	d13a      	bne.n	26ae <switch_mode(LEDStruct&)+0xaa>
    2638:	4daa      	ldr	r5, [pc, #680]	; (28e4 <switch_mode(LEDStruct&)+0x2e0>)
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;
    263a:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    263e:	882b      	ldrh	r3, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    2640:	f880 22d6 	strb.w	r2, [r0, #726]	; 0x2d6
    2644:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2648:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    264c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2650:	3319      	adds	r3, #25
    2652:	b29b      	uxth	r3, r3
    2654:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    2658:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    265c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2660:	3619      	adds	r6, #25
    2662:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2664:	eb06 2216 	add.w	r2, r6, r6, lsr #8
    2668:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    266c:	b2d2      	uxtb	r2, r2
    266e:	b2db      	uxtb	r3, r3
    2670:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2674:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    2678:	1199      	asrs	r1, r3, #6
    267a:	1192      	asrs	r2, r2, #6
    267c:	323c      	adds	r2, #60	; 0x3c
    267e:	3132      	adds	r1, #50	; 0x32
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    2680:	2001      	movs	r0, #1
	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2682:	2325      	movs	r3, #37	; 0x25
    2684:	b2d2      	uxtb	r2, r2
    2686:	b2c9      	uxtb	r1, r1
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2688:	2708      	movs	r7, #8
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    268a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
    268e:	f884 02d7 	strb.w	r0, [r4, #727]	; 0x2d7
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    2692:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2696:	f884 123a 	strb.w	r1, [r4, #570]	; 0x23a
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    269a:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    269e:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
    26a2:	f884 32d5 	strb.w	r3, [r4, #725]	; 0x2d5
    26a6:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    26a8:	802e      	strh	r6, [r5, #0]
    26aa:	f7fd fef1 	bl	490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char) [clone .part.10]>
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    26ae:	4620      	mov	r0, r4
			break;
	}
}
    26b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    26b4:	f7ff bd26 	b.w	2104 <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    26b8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    26bc:	2b00      	cmp	r3, #0
    26be:	d178      	bne.n	27b2 <switch_mode(LEDStruct&)+0x1ae>
    26c0:	4988      	ldr	r1, [pc, #544]	; (28e4 <switch_mode(LEDStruct&)+0x2e0>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    26c2:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    26c6:	880b      	ldrh	r3, [r1, #0]
    26c8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    26cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    26d0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    26d4:	3319      	adds	r3, #25
    26d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    26da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    26de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    26e2:	3319      	adds	r3, #25
    26e4:	b29b      	uxth	r3, r3
    26e6:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    26ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    26ee:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    26f2:	3019      	adds	r0, #25
    26f4:	b280      	uxth	r0, r0
    26f6:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    26fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    26fe:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2702:	3219      	adds	r2, #25
    2704:	b292      	uxth	r2, r2
    2706:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    270a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    270e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2712:	3719      	adds	r7, #25
    2714:	b2bf      	uxth	r7, r7
    2716:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    271a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    271e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2722:	3519      	adds	r5, #25
    2724:	b2ad      	uxth	r5, r5
    2726:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    272a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    272e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2732:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2736:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    273a:	b2db      	uxtb	r3, r3
    273c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2740:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2742:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2746:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2748:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    274a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    274e:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    2756:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    275a:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    275e:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2760:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2762:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2766:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    2768:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    276c:	f100 0208 	add.w	r2, r0, #8
    2770:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2774:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    2778:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    277c:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    277e:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    2780:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2784:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2788:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    278c:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    278e:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2792:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2796:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    279a:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    279e:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    27a2:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    27a6:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    27aa:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    27ae:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    27b2:	4620      	mov	r0, r4

		case FIRE_RANDOM:
			fire(leds);
			break;
	}
}
    27b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    27b8:	f7fe bea2 	b.w	1500 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    27bc:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    27c0:	2b00      	cmp	r3, #0
    27c2:	d14d      	bne.n	2860 <switch_mode(LEDStruct&)+0x25c>
    27c4:	4947      	ldr	r1, [pc, #284]	; (28e4 <switch_mode(LEDStruct&)+0x2e0>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    27c6:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    27ca:	880b      	ldrh	r3, [r1, #0]
    27cc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    27d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    27d4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    27d8:	3319      	adds	r3, #25
    27da:	b29b      	uxth	r3, r3
    27dc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    27e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    27e4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    27e8:	3219      	adds	r2, #25
    27ea:	b292      	uxth	r2, r2
    27ec:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    27f0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    27f4:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    27f8:	3019      	adds	r0, #25
    27fa:	b280      	uxth	r0, r0
    27fc:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2800:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2804:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2808:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    280c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2810:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    2812:	b2d2      	uxtb	r2, r2
    2814:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2816:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    281a:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    281c:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2820:	121b      	asrs	r3, r3, #8
    2822:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    2824:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2826:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    282a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    282e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2832:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    2834:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2836:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    283a:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    283e:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    2840:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    2844:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2848:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    284c:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2850:	f884 7239 	strb.w	r7, [r4, #569]	; 0x239
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2854:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    2858:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    285a:	800d      	strh	r5, [r1, #0]
    285c:	f7fe f830 	bl	8c0 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    2860:	4620      	mov	r0, r4

		case FIRE_RANDOM:
			fire(leds);
			break;
	}
}
    2862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    2866:	f7ff bb89 	b.w	1f7c <rainbow_march(LEDStruct&)>
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    286a:	f890 022d 	ldrb.w	r0, [r0, #557]	; 0x22d
    286e:	2800      	cmp	r0, #0
    2870:	f47f af1d 	bne.w	26ae <switch_mode(LEDStruct&)+0xaa>
    2874:	4d1b      	ldr	r5, [pc, #108]	; (28e4 <switch_mode(LEDStruct&)+0x2e0>)
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;
    2876:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    287a:	882b      	ldrh	r3, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
    287c:	f884 02d7 	strb.w	r0, [r4, #727]	; 0x2d7
    2880:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2884:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2888:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    288c:	3319      	adds	r3, #25
    288e:	b29b      	uxth	r3, r3
    2890:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2894:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2898:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    289c:	3219      	adds	r2, #25
    289e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    28a0:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    28a4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    28a8:	b2c9      	uxtb	r1, r1
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    28aa:	b2db      	uxtb	r3, r3
	leds.fire_cooling		= fc;
    28ac:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    28b0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_cooling		= fc;
    28b4:	1189      	asrs	r1, r1, #6
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    28b6:	119b      	asrs	r3, r3, #6
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    28b8:	2601      	movs	r6, #1
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    28ba:	313c      	adds	r1, #60	; 0x3c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    28bc:	3332      	adds	r3, #50	; 0x32
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    28be:	2708      	movs	r7, #8
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    28c0:	f884 02d5 	strb.w	r0, [r4, #725]	; 0x2d5
    28c4:	204b      	movs	r0, #75	; 0x4b
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    28c6:	802a      	strh	r2, [r5, #0]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    28c8:	f884 123c 	strb.w	r1, [r4, #572]	; 0x23c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    28cc:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    28d0:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    28d4:	f884 62d6 	strb.w	r6, [r4, #726]	; 0x2d6
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    28d8:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    28dc:	f884 02d4 	strb.w	r0, [r4, #724]	; 0x2d4
    28e0:	e6e5      	b.n	26ae <switch_mode(LEDStruct&)+0xaa>
    28e2:	bf00      	nop
    28e4:	1fff872e 	.word	0x1fff872e
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    28e8:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    28ec:	2900      	cmp	r1, #0
    28ee:	f47f af60 	bne.w	27b2 <switch_mode(LEDStruct&)+0x1ae>
    28f2:	48e7      	ldr	r0, [pc, #924]	; (2c90 <switch_mode(LEDStruct&)+0x68c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    28f4:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    28f8:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    28fa:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    28fe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2902:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2906:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    290a:	3319      	adds	r3, #25
    290c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2910:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2914:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2918:	3319      	adds	r3, #25
    291a:	b29b      	uxth	r3, r3
    291c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    2920:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2924:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2928:	3519      	adds	r5, #25
    292a:	b2ad      	uxth	r5, r5
    292c:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    2930:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    2934:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2938:	3219      	adds	r2, #25
    293a:	b292      	uxth	r2, r2
    293c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    2940:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    2944:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2948:	3719      	adds	r7, #25
    294a:	b2bf      	uxth	r7, r7
    294c:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    2950:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2954:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2958:	3619      	adds	r6, #25
    295a:	b2b6      	uxth	r6, r6
    295c:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    2960:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2964:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2968:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    296c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2970:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2972:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2976:	b2ed      	uxtb	r5, r5
    2978:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    297c:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    297e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2982:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2986:	fa1f fc8e 	uxth.w	ip, lr
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    298a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    298e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2992:	11ad      	asrs	r5, r5, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2994:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2998:	ea4f 1ee3 	mov.w	lr, r3, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    299c:	f3c7 1742 	ubfx	r7, r7, #5, #3

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    29a0:	1193      	asrs	r3, r2, #6
    29a2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    29a6:	f105 0208 	add.w	r2, r5, #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    29aa:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    29ae:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    29b2:	f10e 0e01 	add.w	lr, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    29b6:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    29b8:	1c7d      	adds	r5, r7, #1
	leds.juggle_index_reset  = jir;
    29ba:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    29be:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    29c2:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    29c6:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    29c8:	f884 e22f 	strb.w	lr, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    29cc:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    29d0:	f884 5232 	strb.w	r5, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    29d4:	f8a0 c000 	strh.w	ip, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    29d8:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    29dc:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    29e0:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    29e4:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    29e8:	e6e3      	b.n	27b2 <switch_mode(LEDStruct&)+0x1ae>
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    29ea:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    29ee:	2a00      	cmp	r2, #0
    29f0:	f47f aedf 	bne.w	27b2 <switch_mode(LEDStruct&)+0x1ae>
    29f4:	49a6      	ldr	r1, [pc, #664]	; (2c90 <switch_mode(LEDStruct&)+0x68c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    29f6:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    29fa:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    29fc:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    2a00:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a08:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a0c:	3319      	adds	r3, #25
    2a0e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2a16:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a1a:	3319      	adds	r3, #25
    2a1c:	b29b      	uxth	r3, r3
    2a1e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2a22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2a26:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2a2a:	3019      	adds	r0, #25
    2a2c:	b280      	uxth	r0, r0
    2a2e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    2a32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2a36:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2a3a:	3219      	adds	r2, #25
    2a3c:	b292      	uxth	r2, r2
    2a3e:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    2a42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    2a46:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2a4a:	3719      	adds	r7, #25
    2a4c:	b2bf      	uxth	r7, r7
    2a4e:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    2a52:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    2a56:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2a5a:	3519      	adds	r5, #25
    2a5c:	b2ad      	uxth	r5, r5
    2a5e:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a62:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a66:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a6a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2a6e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_numdots 	 = jn;
    2a72:	b2db      	uxtb	r3, r3
    2a74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2a78:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a7a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2a7e:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a80:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2a82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2a86:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2a8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    2a8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2a92:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2a96:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a98:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a9a:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2a9e:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    2aa0:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2aa4:	f100 0208 	add.w	r2, r0, #8
    2aa8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2aac:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    2ab0:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2ab4:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    2ab6:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    2ab8:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2abc:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2ac0:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2ac4:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2ac6:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2aca:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ace:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2ad2:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2ad6:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2ada:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2ade:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2ae2:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    2ae6:	e664      	b.n	27b2 <switch_mode(LEDStruct&)+0x1ae>
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    2ae8:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    2aec:	2a00      	cmp	r2, #0
    2aee:	f47f ae60 	bne.w	27b2 <switch_mode(LEDStruct&)+0x1ae>
    2af2:	4967      	ldr	r1, [pc, #412]	; (2c90 <switch_mode(LEDStruct&)+0x68c>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2af4:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    2af8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2afa:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    2afe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2b02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2b06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b0a:	3319      	adds	r3, #25
    2b0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2b14:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2b18:	3319      	adds	r3, #25
    2b1a:	b29b      	uxth	r3, r3
    2b1c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2b20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2b24:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2b28:	3019      	adds	r0, #25
    2b2a:	b280      	uxth	r0, r0
    2b2c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    2b30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    2b34:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2b38:	3219      	adds	r2, #25
    2b3a:	b292      	uxth	r2, r2
    2b3c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    2b40:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    2b44:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2b48:	3719      	adds	r7, #25
    2b4a:	b2bf      	uxth	r7, r7
    2b4c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    2b50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    2b54:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2b58:	3519      	adds	r5, #25
    2b5a:	b2ad      	uxth	r5, r5
    2b5c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b60:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b64:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b68:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2b6c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2b70:	b2db      	uxtb	r3, r3
    2b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2b76:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b78:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2b7c:	b2c0      	uxtb	r0, r0
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2b7e:	11de      	asrs	r6, r3, #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2b80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2b84:	f10e 0e19 	add.w	lr, lr, #25
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2b88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    2b8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2b90:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2b94:	1180      	asrs	r0, r0, #6
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2b96:	3601      	adds	r6, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b98:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2b9c:	1193      	asrs	r3, r2, #6
	leds.juggle_diff		 = jd;
    2b9e:	f3c7 1742 	ubfx	r7, r7, #5, #3
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2ba2:	f100 0208 	add.w	r2, r0, #8
    2ba6:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2baa:	f884 622f 	strb.w	r6, [r4, #559]	; 0x22f
    2bae:	eb0e 261e 	add.w	r6, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2bb2:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    2bb4:	1c78      	adds	r0, r7, #1
	leds.juggle_index_reset  = jir;
    2bb6:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2bba:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2bbe:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2bc2:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2bc4:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2bc8:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2bcc:	f8a1 e000 	strh.w	lr, [r1]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2bd0:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2bd4:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	//if (DEBUG) { Serial.println("JUGGLE INIT BEGIN"); }
	leds.mode_initialized	= 1;
    2bd8:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2bdc:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2be0:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    2be4:	e5e5      	b.n	27b2 <switch_mode(LEDStruct&)+0x1ae>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    2be6:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    2bea:	2a00      	cmp	r2, #0
    2bec:	f47f ae38 	bne.w	2860 <switch_mode(LEDStruct&)+0x25c>
    2bf0:	4927      	ldr	r1, [pc, #156]	; (2c90 <switch_mode(LEDStruct&)+0x68c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2bf2:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    2bf6:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2bf8:	f880 2239 	strb.w	r2, [r0, #569]	; 0x239
    2bfc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2c00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2c04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2c08:	3319      	adds	r3, #25
    2c0a:	b29b      	uxth	r3, r3
    2c0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2c10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2c14:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2c18:	3219      	adds	r2, #25
    2c1a:	b292      	uxth	r2, r2
    2c1c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    2c20:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2c24:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2c28:	3019      	adds	r0, #25
    2c2a:	b280      	uxth	r0, r0
    2c2c:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2c30:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c34:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2c38:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c3c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    2c40:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    2c42:	b2d2      	uxtb	r2, r2
    2c44:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2c46:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2c4a:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    2c4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2c50:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2c52:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    2c56:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    2c58:	1212      	asrs	r2, r2, #8
    2c5a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    2c5e:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2c60:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    2c64:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2c68:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2c6a:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2c6e:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    2c70:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    2c74:	f884 2236 	strb.w	r2, [r4, #566]	; 0x236
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2c78:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2c7c:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    2c80:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    2c84:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2c86:	800d      	strh	r5, [r1, #0]
    2c88:	f7fd fe1a 	bl	8c0 <LEDDebug(LEDStruct&)>
    2c8c:	e5e8      	b.n	2860 <switch_mode(LEDStruct&)+0x25c>
    2c8e:	bf00      	nop
    2c90:	1fff872e 	.word	0x1fff872e
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_UNSYNC:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    2c94:	f890 022d 	ldrb.w	r0, [r0, #557]	; 0x22d
    2c98:	2800      	cmp	r0, #0
    2c9a:	f47f ad08 	bne.w	26ae <switch_mode(LEDStruct&)+0xaa>
    2c9e:	4d3d      	ldr	r5, [pc, #244]	; (2d94 <switch_mode(LEDStruct&)+0x790>)
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;
    2ca0:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    2ca4:	882b      	ldrh	r3, [r5, #0]

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    2ca6:	f884 02d6 	strb.w	r0, [r4, #726]	; 0x2d6
    2caa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2cae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2cb2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2cb6:	3319      	adds	r3, #25
    2cb8:	b29b      	uxth	r3, r3
    2cba:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    2cbe:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    2cc2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2cc6:	3619      	adds	r6, #25
    2cc8:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2cca:	eb06 2216 	add.w	r2, r6, r6, lsr #8
    2cce:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2cd2:	b2d2      	uxtb	r2, r2
    2cd4:	b2db      	uxtb	r3, r3
    2cd6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2cda:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    2cde:	1199      	asrs	r1, r3, #6
    2ce0:	1192      	asrs	r2, r2, #6
    2ce2:	323c      	adds	r2, #60	; 0x3c
    2ce4:	3132      	adds	r1, #50	; 0x32
    2ce6:	b2d2      	uxtb	r2, r2
    2ce8:	b2c9      	uxtb	r1, r1
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    2cea:	f04f 0e01 	mov.w	lr, #1
	leds.mode_type			= FIRE;
    2cee:	2708      	movs	r7, #8
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2cf0:	234b      	movs	r3, #75	; 0x4b
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
    2cf2:	f884 02d7 	strb.w	r0, [r4, #727]	; 0x2d7
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2cf6:	f884 02d5 	strb.w	r0, [r4, #725]	; 0x2d5
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    2cfa:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2cfe:	f884 123a 	strb.w	r1, [r4, #570]	; 0x23a
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    2d02:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.mode_type			= FIRE;
    2d06:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else				  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2d0a:	f884 32d4 	strb.w	r3, [r4, #724]	; 0x2d4
    2d0e:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d10:	802e      	strh	r6, [r5, #0]
    2d12:	f7fd fbbd 	bl	490 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char) [clone .part.10]>
    2d16:	e4ca      	b.n	26ae <switch_mode(LEDStruct&)+0xaa>
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    2d18:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    2d1c:	2b00      	cmp	r3, #0
    2d1e:	f47f acc6 	bne.w	26ae <switch_mode(LEDStruct&)+0xaa>
    2d22:	481c      	ldr	r0, [pc, #112]	; (2d94 <switch_mode(LEDStruct&)+0x790>)
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;
    2d24:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    2d28:	8803      	ldrh	r3, [r0, #0]
    2d2a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2d2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2d32:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d36:	3319      	adds	r3, #25
    2d38:	b29b      	uxth	r3, r3
    2d3a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2d3e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2d42:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2d46:	3219      	adds	r2, #25
    2d48:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d4a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    2d4e:	eb03 2313 	add.w	r3, r3, r3, lsr #8

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    2d52:	b2c9      	uxtb	r1, r1
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2d54:	b2db      	uxtb	r3, r3
	leds.fire_cooling		= fc;
    2d56:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2d5a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.fire_cooling		= fc;
    2d5e:	1189      	asrs	r1, r1, #6
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2d60:	119b      	asrs	r3, r3, #6
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    2d62:	2501      	movs	r5, #1
	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2d64:	2625      	movs	r6, #37	; 0x25
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    2d66:	313c      	adds	r1, #60	; 0x3c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2d68:	3332      	adds	r3, #50	; 0x32
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2d6a:	2708      	movs	r7, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d6c:	8002      	strh	r2, [r0, #0]
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
    2d6e:	f884 123c 	strb.w	r1, [r4, #572]	; 0x23c
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
    2d72:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
    2d76:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.mode_type			= FIRE;
	leds.use_palette		= 0;

	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
    2d7a:	f884 52d6 	strb.w	r5, [r4, #726]	; 0x2d6
	leds.fire_mirror		= fm;
    2d7e:	f884 52d7 	strb.w	r5, [r4, #727]	; 0x2d7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2d82:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c
	leds.fire_sparking		= fs;
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	
	if (leds.fire_mirror) { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2d86:	f884 62d4 	strb.w	r6, [r4, #724]	; 0x2d4
    2d8a:	f884 62d5 	strb.w	r6, [r4, #725]	; 0x2d5
    2d8e:	e48e      	b.n	26ae <switch_mode(LEDStruct&)+0xaa>
    2d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d92:	bf00      	nop
    2d94:	1fff872e 	.word	0x1fff872e

00002d98 <setup>:



// ================ SETUP ================

void setup() {
    2d98:	b570      	push	{r4, r5, r6, lr}
    2d9a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2d9e:	b082      	sub	sp, #8
    2da0:	4863      	ldr	r0, [pc, #396]	; (2f30 <setup+0x198>)
    2da2:	f001 fb55 	bl	4450 <VisualMicroDebug::init(unsigned long)>
    2da6:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    2daa:	4861      	ldr	r0, [pc, #388]	; (2f30 <setup+0x198>)
    2dac:	f001 fb4c 	bl	4448 <VisualMicroDebug::begin(unsigned long)>
    2db0:	2101      	movs	r1, #1
    2db2:	485f      	ldr	r0, [pc, #380]	; (2f30 <setup+0x198>)
    2db4:	f001 fb22 	bl	43fc <VisualMicroDebug::outPacketStart(bool)>
    2db8:	b150      	cbz	r0, 2dd0 <setup+0x38>
    2dba:	2110      	movs	r1, #16
    2dbc:	485d      	ldr	r0, [pc, #372]	; (2f34 <setup+0x19c>)
    2dbe:	f002 fe79 	bl	5ab4 <usb_serial_write>
    2dc2:	485b      	ldr	r0, [pc, #364]	; (2f30 <setup+0x198>)
    2dc4:	210a      	movs	r1, #10
    2dc6:	f001 fb07 	bl	43d8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    2dca:	4859      	ldr	r0, [pc, #356]	; (2f30 <setup+0x198>)
    2dcc:	f001 fb3a 	bl	4444 <VisualMicroDebug::outPacketEnd()>
    2dd0:	2201      	movs	r2, #1
    2dd2:	2100      	movs	r1, #0
    2dd4:	4856      	ldr	r0, [pc, #344]	; (2f30 <setup+0x198>)
    2dd6:	f001 fbe7 	bl	45a8 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    2dda:	f240 51dc 	movw	r1, #1500	; 0x5dc
    2dde:	4856      	ldr	r0, [pc, #344]	; (2f38 <setup+0x1a0>)
    2de0:	f003 f8c4 	bl	5f6c <Stream::setTimeout(unsigned long)>
    2de4:	2108      	movs	r1, #8
    2de6:	4855      	ldr	r0, [pc, #340]	; (2f3c <setup+0x1a4>)
    2de8:	f002 fe64 	bl	5ab4 <usb_serial_write>
    2dec:	4852      	ldr	r0, [pc, #328]	; (2f38 <setup+0x1a0>)
    2dee:	f003 f865 	bl	5ebc <Print::println()>

	delay(1000);
    2df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2df6:	f001 fe45 	bl	4a84 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    2dfa:	4851      	ldr	r0, [pc, #324]	; (2f40 <setup+0x1a8>)
    2dfc:	6803      	ldr	r3, [r0, #0]
    2dfe:	f013 0401 	ands.w	r4, r3, #1
    2e02:	d071      	beq.n	2ee8 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    2e04:	4c4f      	ldr	r4, [pc, #316]	; (2f44 <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    2e06:	4950      	ldr	r1, [pc, #320]	; (2f48 <setup+0x1b0>)
    2e08:	4850      	ldr	r0, [pc, #320]	; (2f4c <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    2e0a:	4d51      	ldr	r5, [pc, #324]	; (2f50 <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    2e0c:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    2e0e:	2300      	movs	r3, #0
    2e10:	2296      	movs	r2, #150	; 0x96
    2e12:	f001 f823 	bl	3e5c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2e16:	22b0      	movs	r2, #176	; 0xb0
    2e18:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    2e1a:	4620      	mov	r0, r4
    2e1c:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    2e1e:	7026      	strb	r6, [r4, #0]
    2e20:	f88d 2005 	strb.w	r2, [sp, #5]
    2e24:	f88d 3006 	strb.w	r3, [sp, #6]
    2e28:	f88d 6004 	strb.w	r6, [sp, #4]
    2e2c:	f001 f856 	bl	3edc <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    2e30:	f640 31b8 	movw	r1, #3000	; 0xbb8
    2e34:	2005      	movs	r0, #5
    2e36:	f001 fac3 	bl	43c0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    2e3a:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    2e3e:	2002      	movs	r0, #2
    2e40:	802b      	strh	r3, [r5, #0]
    2e42:	f001 fcf1 	bl	4828 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    2e46:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    2e48:	2100      	movs	r1, #0
    2e4a:	4403      	add	r3, r0
    2e4c:	4620      	mov	r0, r4
    2e4e:	802b      	strh	r3, [r5, #0]
    2e50:	f001 f956 	bl	4100 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    2e54:	7821      	ldrb	r1, [r4, #0]
    2e56:	4620      	mov	r0, r4
    2e58:	f001 f878 	bl	3f4c <CFastLED::show(unsigned char)>
    2e5c:	4620      	mov	r0, r4
    2e5e:	2132      	movs	r1, #50	; 0x32
    2e60:	f001 f8d6 	bl	4010 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2e64:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    2e66:	aa01      	add	r2, sp, #4
    2e68:	2196      	movs	r1, #150	; 0x96
    2e6a:	4837      	ldr	r0, [pc, #220]	; (2f48 <setup+0x1b0>)
    2e6c:	f88d 6004 	strb.w	r6, [sp, #4]
    2e70:	f88d 5005 	strb.w	r5, [sp, #5]
    2e74:	f88d 5006 	strb.w	r5, [sp, #6]
    2e78:	f000 fe46 	bl	3b08 <fill_solid(CRGB*, int, CRGB const&)>
    2e7c:	4620      	mov	r0, r4
    2e7e:	21fa      	movs	r1, #250	; 0xfa
    2e80:	f001 f8c6 	bl	4010 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    2e84:	aa01      	add	r2, sp, #4
    2e86:	2196      	movs	r1, #150	; 0x96
    2e88:	482f      	ldr	r0, [pc, #188]	; (2f48 <setup+0x1b0>)
    2e8a:	f88d 6006 	strb.w	r6, [sp, #6]
    2e8e:	f88d 5004 	strb.w	r5, [sp, #4]
    2e92:	f88d 5005 	strb.w	r5, [sp, #5]
    2e96:	f000 fe37 	bl	3b08 <fill_solid(CRGB*, int, CRGB const&)>
    2e9a:	4620      	mov	r0, r4
    2e9c:	21fa      	movs	r1, #250	; 0xfa
    2e9e:	f001 f8b7 	bl	4010 <CFastLED::delay(unsigned long)>
    2ea2:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    2ea4:	aa01      	add	r2, sp, #4
    2ea6:	2196      	movs	r1, #150	; 0x96
    2ea8:	4827      	ldr	r0, [pc, #156]	; (2f48 <setup+0x1b0>)
    2eaa:	f88d 3005 	strb.w	r3, [sp, #5]
    2eae:	f88d 5004 	strb.w	r5, [sp, #4]
    2eb2:	f88d 5006 	strb.w	r5, [sp, #6]
    2eb6:	f000 fe27 	bl	3b08 <fill_solid(CRGB*, int, CRGB const&)>
    2eba:	4620      	mov	r0, r4
    2ebc:	21fa      	movs	r1, #250	; 0xfa
    2ebe:	f001 f8a7 	bl	4010 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    2ec2:	4629      	mov	r1, r5
    2ec4:	4620      	mov	r0, r4
    2ec6:	f001 f91b 	bl	4100 <CFastLED::clear(bool)>
    2eca:	4620      	mov	r0, r4
    2ecc:	21fa      	movs	r1, #250	; 0xfa
    2ece:	f001 f89f 	bl	4010 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    2ed2:	f7fd ffad 	bl	e30 <initialize()>
    2ed6:	210e      	movs	r1, #14
    2ed8:	481e      	ldr	r0, [pc, #120]	; (2f54 <setup+0x1bc>)
    2eda:	f002 fdeb 	bl	5ab4 <usb_serial_write>
    2ede:	4816      	ldr	r0, [pc, #88]	; (2f38 <setup+0x1a0>)
    2ee0:	f002 ffec 	bl	5ebc <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    2ee4:	b002      	add	sp, #8
    2ee6:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    2ee8:	f001 fd4c 	bl	4984 <__cxa_guard_acquire>
    2eec:	2800      	cmp	r0, #0
    2eee:	d089      	beq.n	2e04 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2ef0:	4919      	ldr	r1, [pc, #100]	; (2f58 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2ef2:	4b16      	ldr	r3, [pc, #88]	; (2f4c <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2ef4:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2ef6:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2ef8:	22ff      	movs	r2, #255	; 0xff
    2efa:	2501      	movs	r5, #1
    2efc:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    2efe:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    2f00:	749d      	strb	r5, [r3, #18]
    2f02:	731a      	strb	r2, [r3, #12]
    2f04:	735a      	strb	r2, [r3, #13]
    2f06:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2f08:	73da      	strb	r2, [r3, #15]
    2f0a:	741a      	strb	r2, [r3, #16]
    2f0c:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2f0e:	b160      	cbz	r0, 2f2a <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    2f10:	4a12      	ldr	r2, [pc, #72]	; (2f5c <setup+0x1c4>)
    2f12:	6811      	ldr	r1, [r2, #0]
    2f14:	b101      	cbz	r1, 2f18 <setup+0x180>
    2f16:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    2f18:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    2f1a:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    2f1c:	4910      	ldr	r1, [pc, #64]	; (2f60 <setup+0x1c8>)
    2f1e:	4808      	ldr	r0, [pc, #32]	; (2f40 <setup+0x1a8>)
    2f20:	619a      	str	r2, [r3, #24]
    2f22:	6019      	str	r1, [r3, #0]
    2f24:	f001 fd34 	bl	4990 <__cxa_guard_release>
    2f28:	e76c      	b.n	2e04 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    2f2a:	600b      	str	r3, [r1, #0]
    2f2c:	e7f0      	b.n	2f10 <setup+0x178>
    2f2e:	bf00      	nop
    2f30:	1fff9730 	.word	0x1fff9730
    2f34:	0000771c 	.word	0x0000771c
    2f38:	1fff8738 	.word	0x1fff8738
    2f3c:	00007730 	.word	0x00007730
    2f40:	1fff8c3c 	.word	0x1fff8c3c
    2f44:	1fff9708 	.word	0x1fff9708
    2f48:	1fff8f88 	.word	0x1fff8f88
    2f4c:	1fff8c40 	.word	0x1fff8c40
    2f50:	1fff872e 	.word	0x1fff872e
    2f54:	0000773c 	.word	0x0000773c
    2f58:	1fff9718 	.word	0x1fff9718
    2f5c:	1fff9728 	.word	0x1fff9728
    2f60:	000065d4 	.word	0x000065d4

00002f64 <loop>:



// ================ LOOP ================

void loop() {
    2f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f68:	b093      	sub	sp, #76	; 0x4c
	// Add entropy to randomness
	random16_add_entropy(random());
    2f6a:	f003 faf1 	bl	6550 <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    2f6e:	4da9      	ldr	r5, [pc, #676]	; (3214 <loop+0x2b0>)
    2f70:	4aa9      	ldr	r2, [pc, #676]	; (3218 <loop+0x2b4>)
    2f72:	6829      	ldr	r1, [r5, #0]
    2f74:	8813      	ldrh	r3, [r2, #0]
    2f76:	07ce      	lsls	r6, r1, #31
    2f78:	4418      	add	r0, r3
    2f7a:	8010      	strh	r0, [r2, #0]
    2f7c:	f140 812f 	bpl.w	31de <loop+0x27a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f80:	4ea6      	ldr	r6, [pc, #664]	; (321c <loop+0x2b8>)
    2f82:	4ca7      	ldr	r4, [pc, #668]	; (3220 <loop+0x2bc>)
    2f84:	6833      	ldr	r3, [r6, #0]
    2f86:	9302      	str	r3, [sp, #8]
	return ret;
    2f88:	9a02      	ldr	r2, [sp, #8]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    2f8a:	48a6      	ldr	r0, [pc, #664]	; (3224 <loop+0x2c0>)
    2f8c:	8823      	ldrh	r3, [r4, #0]
    2f8e:	8861      	ldrh	r1, [r4, #2]
    2f90:	fba0 0202 	umull	r0, r2, r0, r2
    2f94:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    2f98:	b29b      	uxth	r3, r3
    2f9a:	4299      	cmp	r1, r3
    2f9c:	d809      	bhi.n	2fb2 <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f9e:	6833      	ldr	r3, [r6, #0]
    2fa0:	9301      	str	r3, [sp, #4]
	return ret;
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	4a9f      	ldr	r2, [pc, #636]	; (3224 <loop+0x2c0>)
    2fa6:	fba2 2303 	umull	r2, r3, r2, r3
    2faa:	099b      	lsrs	r3, r3, #6
    2fac:	8023      	strh	r3, [r4, #0]
		change_pattern();
    2fae:	f7fe f8e3 	bl	1178 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    2fb2:	4d9d      	ldr	r5, [pc, #628]	; (3228 <loop+0x2c4>)
    2fb4:	682b      	ldr	r3, [r5, #0]
    2fb6:	07dc      	lsls	r4, r3, #31
    2fb8:	f140 8108 	bpl.w	31cc <loop+0x268>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fbc:	6833      	ldr	r3, [r6, #0]
    2fbe:	4c9b      	ldr	r4, [pc, #620]	; (322c <loop+0x2c8>)
    2fc0:	9305      	str	r3, [sp, #20]
	return ret;
    2fc2:	9a05      	ldr	r2, [sp, #20]
    2fc4:	4897      	ldr	r0, [pc, #604]	; (3224 <loop+0x2c0>)
    2fc6:	8823      	ldrh	r3, [r4, #0]
    2fc8:	8861      	ldrh	r1, [r4, #2]
    2fca:	fba0 0202 	umull	r0, r2, r0, r2
    2fce:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    2fd2:	b29b      	uxth	r3, r3
    2fd4:	4299      	cmp	r1, r3
    2fd6:	f240 80d8 	bls.w	318a <loop+0x226>
    2fda:	4f95      	ldr	r7, [pc, #596]	; (3230 <loop+0x2cc>)
    2fdc:	f8df 9280 	ldr.w	r9, [pc, #640]	; 3260 <loop+0x2fc>
    2fe0:	f8df a264 	ldr.w	sl, [pc, #612]	; 3248 <loop+0x2e4>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    2fe4:	4d93      	ldr	r5, [pc, #588]	; (3234 <loop+0x2d0>)
    2fe6:	682b      	ldr	r3, [r5, #0]
    2fe8:	07d8      	lsls	r0, r3, #31
    2fea:	f140 809a 	bpl.w	3122 <loop+0x1be>
    2fee:	4c92      	ldr	r4, [pc, #584]	; (3238 <loop+0x2d4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ff0:	6833      	ldr	r3, [r6, #0]
    2ff2:	9308      	str	r3, [sp, #32]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2ff4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    2ff8:	9b08      	ldr	r3, [sp, #32]
    2ffa:	1a5b      	subs	r3, r3, r1
    2ffc:	429a      	cmp	r2, r3
    2ffe:	f240 80a0 	bls.w	3142 <loop+0x1de>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    3002:	f8df 8260 	ldr.w	r8, [pc, #608]	; 3264 <loop+0x300>
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    3006:	4d8d      	ldr	r5, [pc, #564]	; (323c <loop+0x2d8>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    3008:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    300c:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    3010:	f8df b254 	ldr.w	fp, [pc, #596]	; 3268 <loop+0x304>
    3014:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    3018:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    301a:	07d9      	lsls	r1, r3, #31
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    301c:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    3020:	d557      	bpl.n	30d2 <loop+0x16e>
    3022:	4c87      	ldr	r4, [pc, #540]	; (3240 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3024:	6833      	ldr	r3, [r6, #0]
    3026:	930b      	str	r3, [sp, #44]	; 0x2c
    3028:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    302c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    302e:	1a1b      	subs	r3, r3, r0
    3030:	428b      	cmp	r3, r1
    3032:	d25f      	bcs.n	30f4 <loop+0x190>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    3034:	f8df 8234 	ldr.w	r8, [pc, #564]	; 326c <loop+0x308>
    3038:	f8d8 3000 	ldr.w	r3, [r8]
    303c:	07da      	lsls	r2, r3, #31
    303e:	d567      	bpl.n	3110 <loop+0x1ac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3040:	6833      	ldr	r3, [r6, #0]
    3042:	4c80      	ldr	r4, [pc, #512]	; (3244 <loop+0x2e0>)
    3044:	930e      	str	r3, [sp, #56]	; 0x38
    3046:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    304a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    304c:	1a5b      	subs	r3, r3, r1
    304e:	4293      	cmp	r3, r2
    3050:	f0c0 8087 	bcc.w	3162 <loop+0x1fe>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3054:	6833      	ldr	r3, [r6, #0]
    3056:	930d      	str	r3, [sp, #52]	; 0x34
		if(in_transition){
    3058:	783b      	ldrb	r3, [r7, #0]
	return ret;
    305a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    305c:	6022      	str	r2, [r4, #0]
    305e:	4a79      	ldr	r2, [pc, #484]	; (3244 <loop+0x2e0>)
    3060:	2b00      	cmp	r3, #0
    3062:	d179      	bne.n	3158 <loop+0x1f4>
    3064:	4b78      	ldr	r3, [pc, #480]	; (3248 <loop+0x2e4>)
    3066:	4a79      	ldr	r2, [pc, #484]	; (324c <loop+0x2e8>)
    3068:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    306c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    306e:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    3070:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3072:	7014      	strb	r4, [r2, #0]
    3074:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    3076:	42ab      	cmp	r3, r5
        g = rhs.g;
    3078:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    307a:	7091      	strb	r1, [r2, #2]
    307c:	f102 0203 	add.w	r2, r2, #3
    3080:	d1f4      	bne.n	306c <loop+0x108>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    3082:	4d73      	ldr	r5, [pc, #460]	; (3250 <loop+0x2ec>)
    3084:	682b      	ldr	r3, [r5, #0]
    3086:	07db      	lsls	r3, r3, #31
    3088:	d575      	bpl.n	3176 <loop+0x212>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    308a:	6833      	ldr	r3, [r6, #0]
    308c:	4c71      	ldr	r4, [pc, #452]	; (3254 <loop+0x2f0>)
    308e:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    3090:	9a11      	ldr	r2, [sp, #68]	; 0x44
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    3092:	4864      	ldr	r0, [pc, #400]	; (3224 <loop+0x2c0>)
    3094:	8823      	ldrh	r3, [r4, #0]
    3096:	8861      	ldrh	r1, [r4, #2]
    3098:	fba0 0202 	umull	r0, r2, r0, r2
    309c:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    30a0:	b29b      	uxth	r3, r3
    30a2:	4299      	cmp	r1, r3
    30a4:	d80e      	bhi.n	30c4 <loop+0x160>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30a6:	6833      	ldr	r3, [r6, #0]
    30a8:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    30aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    30ac:	4a5d      	ldr	r2, [pc, #372]	; (3224 <loop+0x2c0>)
			LEDDebug(curr_leds);
    30ae:	4866      	ldr	r0, [pc, #408]	; (3248 <loop+0x2e4>)
    30b0:	fba2 2303 	umull	r2, r3, r2, r3
    30b4:	099b      	lsrs	r3, r3, #6
    30b6:	8023      	strh	r3, [r4, #0]
    30b8:	f7fd fc02 	bl	8c0 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    30bc:	783b      	ldrb	r3, [r7, #0]
    30be:	2b00      	cmp	r3, #0
    30c0:	f040 80a3 	bne.w	320a <loop+0x2a6>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    30c4:	4864      	ldr	r0, [pc, #400]	; (3258 <loop+0x2f4>)
    30c6:	7801      	ldrb	r1, [r0, #0]
    30c8:	f000 ff40 	bl	3f4c <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    30cc:	b013      	add	sp, #76	; 0x4c
    30ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    30d2:	4640      	mov	r0, r8
    30d4:	f001 fc56 	bl	4984 <__cxa_guard_acquire>
    30d8:	2800      	cmp	r0, #0
    30da:	f040 80f6 	bne.w	32ca <loop+0x366>
    30de:	4c58      	ldr	r4, [pc, #352]	; (3240 <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30e0:	6833      	ldr	r3, [r6, #0]
    30e2:	930b      	str	r3, [sp, #44]	; 0x2c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    30e4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    30e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    30ea:	1a5b      	subs	r3, r3, r1
    30ec:	4293      	cmp	r3, r2
    30ee:	d3a1      	bcc.n	3034 <loop+0xd0>
    30f0:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30f4:	6833      	ldr	r3, [r6, #0]
    30f6:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    30f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    30fa:	f8df 8170 	ldr.w	r8, [pc, #368]	; 326c <loop+0x308>
    30fe:	6062      	str	r2, [r4, #4]
    3100:	6023      	str	r3, [r4, #0]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    3102:	4851      	ldr	r0, [pc, #324]	; (3248 <loop+0x2e4>)
    3104:	f7ff fa7e 	bl	2604 <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    3108:	f8d8 3000 	ldr.w	r3, [r8]
    310c:	07da      	lsls	r2, r3, #31
    310e:	d497      	bmi.n	3040 <loop+0xdc>
    3110:	4640      	mov	r0, r8
    3112:	f001 fc37 	bl	4984 <__cxa_guard_acquire>
    3116:	2800      	cmp	r0, #0
    3118:	f040 80e3 	bne.w	32e2 <loop+0x37e>
    311c:	4c49      	ldr	r4, [pc, #292]	; (3244 <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    311e:	6833      	ldr	r3, [r6, #0]
    3120:	e790      	b.n	3044 <loop+0xe0>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    3122:	4628      	mov	r0, r5
    3124:	f001 fc2e 	bl	4984 <__cxa_guard_acquire>
    3128:	2800      	cmp	r0, #0
    312a:	f040 80b4 	bne.w	3296 <loop+0x332>
    312e:	4c42      	ldr	r4, [pc, #264]	; (3238 <loop+0x2d4>)
    3130:	6833      	ldr	r3, [r6, #0]
    3132:	9308      	str	r3, [sp, #32]
    3134:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    3138:	9b08      	ldr	r3, [sp, #32]
    313a:	1a5b      	subs	r3, r3, r1
    313c:	4293      	cmp	r3, r2
    313e:	f4ff af60 	bcc.w	3002 <loop+0x9e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3142:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    3144:	4945      	ldr	r1, [pc, #276]	; (325c <loop+0x2f8>)
    3146:	9307      	str	r3, [sp, #28]
	return ret;
    3148:	9b07      	ldr	r3, [sp, #28]
    314a:	6023      	str	r3, [r4, #0]
    314c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    3150:	2218      	movs	r2, #24
    3152:	f000 fe5b 	bl	3e0c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    3156:	e754      	b.n	3002 <loop+0x9e>
    3158:	782b      	ldrb	r3, [r5, #0]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    315a:	4841      	ldr	r0, [pc, #260]	; (3260 <loop+0x2fc>)
    315c:	6053      	str	r3, [r2, #4]
    315e:	f7ff fa51 	bl	2604 <switch_mode(LEDStruct&)>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    3162:	783b      	ldrb	r3, [r7, #0]
    3164:	2b00      	cmp	r3, #0
    3166:	f43f af7d 	beq.w	3064 <loop+0x100>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    316a:	4d39      	ldr	r5, [pc, #228]	; (3250 <loop+0x2ec>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    316c:	f7fe f870 	bl	1250 <blending()>
    3170:	682b      	ldr	r3, [r5, #0]
    3172:	07db      	lsls	r3, r3, #31
    3174:	d489      	bmi.n	308a <loop+0x126>
    3176:	4628      	mov	r0, r5
    3178:	f001 fc04 	bl	4984 <__cxa_guard_acquire>
    317c:	2800      	cmp	r0, #0
    317e:	f040 8095 	bne.w	32ac <loop+0x348>
    3182:	4c34      	ldr	r4, [pc, #208]	; (3254 <loop+0x2f0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3184:	6833      	ldr	r3, [r6, #0]
    3186:	9311      	str	r3, [sp, #68]	; 0x44
    3188:	e782      	b.n	3090 <loop+0x12c>
    318a:	6833      	ldr	r3, [r6, #0]
    318c:	9304      	str	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    318e:	4a25      	ldr	r2, [pc, #148]	; (3224 <loop+0x2c0>)
	return ret;
    3190:	9b04      	ldr	r3, [sp, #16]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    3192:	4f27      	ldr	r7, [pc, #156]	; (3230 <loop+0x2cc>)
    3194:	fba2 2303 	umull	r2, r3, r2, r3
    3198:	783a      	ldrb	r2, [r7, #0]
    319a:	099b      	lsrs	r3, r3, #6
    319c:	8023      	strh	r3, [r4, #0]
    319e:	b162      	cbz	r2, 31ba <loop+0x256>
	
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    31a0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 3260 <loop+0x2fc>
    31a4:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    31a8:	2b00      	cmp	r3, #0
    31aa:	f43f af19 	beq.w	2fe0 <loop+0x7c>
    31ae:	4648      	mov	r0, r9
    31b0:	f7fd fafc 	bl	7ac <change_palette(LEDStruct&) [clone .part.9]>
    31b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 3248 <loop+0x2e4>
    31b8:	e714      	b.n	2fe4 <loop+0x80>
    31ba:	f8df a08c 	ldr.w	sl, [pc, #140]	; 3248 <loop+0x2e4>
    31be:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    31c2:	2b00      	cmp	r3, #0
    31c4:	d154      	bne.n	3270 <loop+0x30c>
    31c6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3260 <loop+0x2fc>
    31ca:	e70b      	b.n	2fe4 <loop+0x80>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    31cc:	4628      	mov	r0, r5
    31ce:	f001 fbd9 	bl	4984 <__cxa_guard_acquire>
    31d2:	2800      	cmp	r0, #0
    31d4:	d150      	bne.n	3278 <loop+0x314>
    31d6:	4c15      	ldr	r4, [pc, #84]	; (322c <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31d8:	6833      	ldr	r3, [r6, #0]
    31da:	9305      	str	r3, [sp, #20]
    31dc:	e6f1      	b.n	2fc2 <loop+0x5e>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    31de:	4628      	mov	r0, r5
    31e0:	f001 fbd0 	bl	4984 <__cxa_guard_acquire>
    31e4:	4e0d      	ldr	r6, [pc, #52]	; (321c <loop+0x2b8>)
    31e6:	2800      	cmp	r0, #0
    31e8:	f43f aecb 	beq.w	2f82 <loop+0x1e>
    31ec:	6833      	ldr	r3, [r6, #0]
    31ee:	9300      	str	r3, [sp, #0]
    31f0:	4a0c      	ldr	r2, [pc, #48]	; (3224 <loop+0x2c0>)
	return ret;
    31f2:	9b00      	ldr	r3, [sp, #0]
    31f4:	4c0a      	ldr	r4, [pc, #40]	; (3220 <loop+0x2bc>)
    31f6:	fba2 2303 	umull	r2, r3, r2, r3
    31fa:	099b      	lsrs	r3, r3, #6
    31fc:	2214      	movs	r2, #20
    31fe:	4628      	mov	r0, r5
    3200:	8023      	strh	r3, [r4, #0]
    3202:	8062      	strh	r2, [r4, #2]
    3204:	f001 fbc4 	bl	4990 <__cxa_guard_release>
    3208:	e6bc      	b.n	2f84 <loop+0x20>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    320a:	4815      	ldr	r0, [pc, #84]	; (3260 <loop+0x2fc>)
    320c:	f7fd fb58 	bl	8c0 <LEDDebug(LEDStruct&)>
    3210:	e758      	b.n	30c4 <loop+0x160>
    3212:	bf00      	nop
    3214:	1fff8f70 	.word	0x1fff8f70
    3218:	1fff872e 	.word	0x1fff872e
    321c:	1fff9780 	.word	0x1fff9780
    3220:	1fff8f5c 	.word	0x1fff8f5c
    3224:	10624dd3 	.word	0x10624dd3
    3228:	1fff8f74 	.word	0x1fff8f74
    322c:	1fff8c60 	.word	0x1fff8c60
    3230:	1fff8f4c 	.word	0x1fff8f4c
    3234:	1fff8f78 	.word	0x1fff8f78
    3238:	1fff8f60 	.word	0x1fff8f60
    323c:	1fff8f80 	.word	0x1fff8f80
    3240:	1fff8f44 	.word	0x1fff8f44
    3244:	1fff8f3c 	.word	0x1fff8f3c
    3248:	1fff9430 	.word	0x1fff9430
    324c:	1fff8f88 	.word	0x1fff8f88
    3250:	1fff8f7c 	.word	0x1fff8f7c
    3254:	1fff8f68 	.word	0x1fff8f68
    3258:	1fff9708 	.word	0x1fff9708
    325c:	1fff9627 	.word	0x1fff9627
    3260:	1fff8c64 	.word	0x1fff8c64
    3264:	1fff942c 	.word	0x1fff942c
    3268:	1fff8f81 	.word	0x1fff8f81
    326c:	1fff9428 	.word	0x1fff9428
    3270:	4650      	mov	r0, sl
    3272:	f7fd fa9b 	bl	7ac <change_palette(LEDStruct&) [clone .part.9]>
    3276:	e7a6      	b.n	31c6 <loop+0x262>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3278:	6833      	ldr	r3, [r6, #0]
    327a:	9303      	str	r3, [sp, #12]
	return ret;
    327c:	9b03      	ldr	r3, [sp, #12]
    327e:	4a1e      	ldr	r2, [pc, #120]	; (32f8 <loop+0x394>)
    3280:	4c1e      	ldr	r4, [pc, #120]	; (32fc <loop+0x398>)
    3282:	fba2 2303 	umull	r2, r3, r2, r3
    3286:	099b      	lsrs	r3, r3, #6
    3288:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    328a:	4628      	mov	r0, r5
    328c:	8023      	strh	r3, [r4, #0]
    328e:	8062      	strh	r2, [r4, #2]
    3290:	f001 fb7e 	bl	4990 <__cxa_guard_release>
    3294:	e7a0      	b.n	31d8 <loop+0x274>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3296:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    3298:	4c19      	ldr	r4, [pc, #100]	; (3300 <loop+0x39c>)
    329a:	9306      	str	r3, [sp, #24]
	return ret;
    329c:	9b06      	ldr	r3, [sp, #24]
    329e:	6023      	str	r3, [r4, #0]
    32a0:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    32a2:	4628      	mov	r0, r5
    32a4:	6063      	str	r3, [r4, #4]
    32a6:	f001 fb73 	bl	4990 <__cxa_guard_release>
    32aa:	e741      	b.n	3130 <loop+0x1cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32ac:	6833      	ldr	r3, [r6, #0]
    32ae:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    32b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    32b2:	4a11      	ldr	r2, [pc, #68]	; (32f8 <loop+0x394>)
    32b4:	4c13      	ldr	r4, [pc, #76]	; (3304 <loop+0x3a0>)
    32b6:	fba2 2303 	umull	r2, r3, r2, r3
    32ba:	099b      	lsrs	r3, r3, #6
    32bc:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    32be:	4628      	mov	r0, r5
    32c0:	8023      	strh	r3, [r4, #0]
    32c2:	8062      	strh	r2, [r4, #2]
    32c4:	f001 fb64 	bl	4990 <__cxa_guard_release>
    32c8:	e75c      	b.n	3184 <loop+0x220>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32ca:	6833      	ldr	r3, [r6, #0]
    32cc:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    32ce:	4c0e      	ldr	r4, [pc, #56]	; (3308 <loop+0x3a4>)
	return ret;
    32d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    32d2:	f89b 3000 	ldrb.w	r3, [fp]
    32d6:	6022      	str	r2, [r4, #0]
    32d8:	4640      	mov	r0, r8
    32da:	6063      	str	r3, [r4, #4]
    32dc:	f001 fb58 	bl	4990 <__cxa_guard_release>
    32e0:	e6fe      	b.n	30e0 <loop+0x17c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32e2:	6833      	ldr	r3, [r6, #0]
    32e4:	930c      	str	r3, [sp, #48]	; 0x30
    32e6:	4c09      	ldr	r4, [pc, #36]	; (330c <loop+0x3a8>)
	return ret;
    32e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    32ea:	782b      	ldrb	r3, [r5, #0]
    32ec:	6022      	str	r2, [r4, #0]
    32ee:	4640      	mov	r0, r8
    32f0:	6063      	str	r3, [r4, #4]
    32f2:	f001 fb4d 	bl	4990 <__cxa_guard_release>
    32f6:	e712      	b.n	311e <loop+0x1ba>
    32f8:	10624dd3 	.word	0x10624dd3
    32fc:	1fff8c60 	.word	0x1fff8c60
    3300:	1fff8f60 	.word	0x1fff8f60
    3304:	1fff8f68 	.word	0x1fff8f68
    3308:	1fff8f44 	.word	0x1fff8f44
    330c:	1fff8f3c 	.word	0x1fff8f3c

00003310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    3310:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    3312:	0604      	lsls	r4, r0, #24
    3314:	f100 8119 	bmi.w	354a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3318:	4b48      	ldr	r3, [pc, #288]	; (343c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    331a:	4949      	ldr	r1, [pc, #292]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    331c:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    331e:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3320:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3322:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3324:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3326:	bf00      	nop
    3328:	bf00      	nop
    332a:	bf00      	nop
    332c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    332e:	601a      	str	r2, [r3, #0]
    3330:	bf00      	nop
    3332:	bf00      	nop
    3334:	bf00      	nop
    3336:	bf00      	nop
    3338:	0641      	lsls	r1, r0, #25
    333a:	f140 8083 	bpl.w	3444 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    333e:	4a40      	ldr	r2, [pc, #256]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    3340:	2102      	movs	r1, #2
    3342:	2304      	movs	r3, #4
    3344:	6011      	str	r1, [r2, #0]
    3346:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3348:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    334a:	bf00      	nop
    334c:	bf00      	nop
    334e:	bf00      	nop
    3350:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3352:	6053      	str	r3, [r2, #4]
    3354:	bf00      	nop
    3356:	bf00      	nop
    3358:	bf00      	nop
    335a:	bf00      	nop
    335c:	0682      	lsls	r2, r0, #26
    335e:	f140 8084 	bpl.w	346a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3362:	4a37      	ldr	r2, [pc, #220]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    3364:	2102      	movs	r1, #2
    3366:	2304      	movs	r3, #4
    3368:	6011      	str	r1, [r2, #0]
    336a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    336c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    336e:	bf00      	nop
    3370:	bf00      	nop
    3372:	bf00      	nop
    3374:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3376:	6053      	str	r3, [r2, #4]
    3378:	bf00      	nop
    337a:	bf00      	nop
    337c:	bf00      	nop
    337e:	bf00      	nop
    3380:	06c3      	lsls	r3, r0, #27
    3382:	f140 8085 	bpl.w	3490 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3386:	4a2e      	ldr	r2, [pc, #184]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    3388:	2102      	movs	r1, #2
    338a:	2304      	movs	r3, #4
    338c:	6011      	str	r1, [r2, #0]
    338e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3390:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3392:	bf00      	nop
    3394:	bf00      	nop
    3396:	bf00      	nop
    3398:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    339a:	6053      	str	r3, [r2, #4]
    339c:	bf00      	nop
    339e:	bf00      	nop
    33a0:	bf00      	nop
    33a2:	bf00      	nop
    33a4:	0704      	lsls	r4, r0, #28
    33a6:	f140 8086 	bpl.w	34b6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    33aa:	4a25      	ldr	r2, [pc, #148]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    33ac:	2102      	movs	r1, #2
    33ae:	2304      	movs	r3, #4
    33b0:	6011      	str	r1, [r2, #0]
    33b2:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    33b4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    33b6:	bf00      	nop
    33b8:	bf00      	nop
    33ba:	bf00      	nop
    33bc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    33be:	6053      	str	r3, [r2, #4]
    33c0:	bf00      	nop
    33c2:	bf00      	nop
    33c4:	bf00      	nop
    33c6:	bf00      	nop
    33c8:	0741      	lsls	r1, r0, #29
    33ca:	f140 8087 	bpl.w	34dc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    33ce:	4a1c      	ldr	r2, [pc, #112]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    33d0:	2102      	movs	r1, #2
    33d2:	2304      	movs	r3, #4
    33d4:	6011      	str	r1, [r2, #0]
    33d6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    33d8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    33da:	bf00      	nop
    33dc:	bf00      	nop
    33de:	bf00      	nop
    33e0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    33e2:	6053      	str	r3, [r2, #4]
    33e4:	bf00      	nop
    33e6:	bf00      	nop
    33e8:	bf00      	nop
    33ea:	bf00      	nop
    33ec:	0782      	lsls	r2, r0, #30
    33ee:	f140 8088 	bpl.w	3502 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    33f2:	4a13      	ldr	r2, [pc, #76]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    33f4:	2102      	movs	r1, #2
    33f6:	2304      	movs	r3, #4
    33f8:	6011      	str	r1, [r2, #0]
    33fa:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    33fc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    33fe:	bf00      	nop
    3400:	bf00      	nop
    3402:	bf00      	nop
    3404:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3406:	6053      	str	r3, [r2, #4]
    3408:	bf00      	nop
    340a:	bf00      	nop
    340c:	bf00      	nop
    340e:	bf00      	nop
    3410:	07c3      	lsls	r3, r0, #31
    3412:	f100 8089 	bmi.w	3528 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    3416:	4b09      	ldr	r3, [pc, #36]	; (343c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3418:	4909      	ldr	r1, [pc, #36]	; (3440 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    341a:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    341c:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    341e:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3420:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3422:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3424:	bf00      	nop
    3426:	bf00      	nop
    3428:	bf00      	nop
    342a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    342c:	601a      	str	r2, [r3, #0]
    342e:	bf00      	nop
    3430:	bf00      	nop
    3432:	bf00      	nop
    3434:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    3436:	bc10      	pop	{r4}
    3438:	4770      	bx	lr
    343a:	bf00      	nop
    343c:	400ff0c8 	.word	0x400ff0c8
    3440:	400ff0c4 	.word	0x400ff0c4
    3444:	4b49      	ldr	r3, [pc, #292]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3446:	494a      	ldr	r1, [pc, #296]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3448:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    344a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    344c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    344e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3450:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3452:	bf00      	nop
    3454:	bf00      	nop
    3456:	bf00      	nop
    3458:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    345a:	601a      	str	r2, [r3, #0]
    345c:	bf00      	nop
    345e:	bf00      	nop
    3460:	bf00      	nop
    3462:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    3464:	0682      	lsls	r2, r0, #26
    3466:	f53f af7c 	bmi.w	3362 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    346a:	4b40      	ldr	r3, [pc, #256]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    346c:	4940      	ldr	r1, [pc, #256]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    346e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3470:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3472:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3474:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3476:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3478:	bf00      	nop
    347a:	bf00      	nop
    347c:	bf00      	nop
    347e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3480:	601a      	str	r2, [r3, #0]
    3482:	bf00      	nop
    3484:	bf00      	nop
    3486:	bf00      	nop
    3488:	bf00      	nop
    348a:	06c3      	lsls	r3, r0, #27
    348c:	f53f af7b 	bmi.w	3386 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    3490:	4b36      	ldr	r3, [pc, #216]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3492:	4937      	ldr	r1, [pc, #220]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3494:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3496:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3498:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    349a:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    349c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    349e:	bf00      	nop
    34a0:	bf00      	nop
    34a2:	bf00      	nop
    34a4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34a6:	601a      	str	r2, [r3, #0]
    34a8:	bf00      	nop
    34aa:	bf00      	nop
    34ac:	bf00      	nop
    34ae:	bf00      	nop
    34b0:	0704      	lsls	r4, r0, #28
    34b2:	f53f af7a 	bmi.w	33aa <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    34b6:	4b2d      	ldr	r3, [pc, #180]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34b8:	492d      	ldr	r1, [pc, #180]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34ba:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34bc:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34be:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34c0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    34c2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    34c4:	bf00      	nop
    34c6:	bf00      	nop
    34c8:	bf00      	nop
    34ca:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34cc:	601a      	str	r2, [r3, #0]
    34ce:	bf00      	nop
    34d0:	bf00      	nop
    34d2:	bf00      	nop
    34d4:	bf00      	nop
    34d6:	0741      	lsls	r1, r0, #29
    34d8:	f53f af79 	bmi.w	33ce <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    34dc:	4b23      	ldr	r3, [pc, #140]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34de:	4924      	ldr	r1, [pc, #144]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34e0:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34e2:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34e4:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    34e6:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    34e8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    34ea:	bf00      	nop
    34ec:	bf00      	nop
    34ee:	bf00      	nop
    34f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    34f2:	601a      	str	r2, [r3, #0]
    34f4:	bf00      	nop
    34f6:	bf00      	nop
    34f8:	bf00      	nop
    34fa:	bf00      	nop
    34fc:	0782      	lsls	r2, r0, #30
    34fe:	f53f af78 	bmi.w	33f2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    3502:	4b1a      	ldr	r3, [pc, #104]	; (356c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3504:	491a      	ldr	r1, [pc, #104]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3506:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3508:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    350a:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    350c:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    350e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3510:	bf00      	nop
    3512:	bf00      	nop
    3514:	bf00      	nop
    3516:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3518:	601a      	str	r2, [r3, #0]
    351a:	bf00      	nop
    351c:	bf00      	nop
    351e:	bf00      	nop
    3520:	bf00      	nop
    3522:	07c3      	lsls	r3, r0, #31
    3524:	f57f af77 	bpl.w	3416 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3528:	4a11      	ldr	r2, [pc, #68]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    352a:	2102      	movs	r1, #2
    352c:	2304      	movs	r3, #4
    352e:	6011      	str	r1, [r2, #0]
    3530:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3532:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3534:	bf00      	nop
    3536:	bf00      	nop
    3538:	bf00      	nop
    353a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    353c:	6053      	str	r3, [r2, #4]
    353e:	bf00      	nop
    3540:	bf00      	nop
    3542:	bf00      	nop
    3544:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    3546:	bc10      	pop	{r4}
    3548:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    354a:	4a09      	ldr	r2, [pc, #36]	; (3570 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    354c:	2102      	movs	r1, #2
    354e:	2304      	movs	r3, #4
    3550:	6011      	str	r1, [r2, #0]
    3552:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3554:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3556:	bf00      	nop
    3558:	bf00      	nop
    355a:	bf00      	nop
    355c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    355e:	6053      	str	r3, [r2, #4]
    3560:	bf00      	nop
    3562:	bf00      	nop
    3564:	bf00      	nop
    3566:	bf00      	nop
    3568:	e6e6      	b.n	3338 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    356a:	bf00      	nop
    356c:	400ff0c8 	.word	0x400ff0c8
    3570:	400ff0c4 	.word	0x400ff0c4

00003574 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    3574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3578:	b085      	sub	sp, #20
    357a:	460e      	mov	r6, r1
    357c:	9003      	str	r0, [sp, #12]
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    357e:	6980      	ldr	r0, [r0, #24]
    3580:	b150      	cbz	r0, 3598 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    3582:	6803      	ldr	r3, [r0, #0]
    3584:	4a71      	ldr	r2, [pc, #452]	; (374c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1d8>)
    3586:	681b      	ldr	r3, [r3, #0]
    3588:	4293      	cmp	r3, r2
    358a:	f040 827e 	bne.w	3a8a <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x516>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    358e:	6842      	ldr	r2, [r0, #4]
    3590:	7b01      	ldrb	r1, [r0, #12]
    3592:	7813      	ldrb	r3, [r2, #0]
    3594:	430b      	orrs	r3, r1
    3596:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    3598:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    359a:	7d34      	ldrb	r4, [r6, #20]
    359c:	f896 8013 	ldrb.w	r8, [r6, #19]
    35a0:	f896 9012 	ldrb.w	r9, [r6, #18]
    35a4:	f7ff feb4 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    35a8:	2000      	movs	r0, #0
    35aa:	f7ff feb1 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    35ae:	2000      	movs	r0, #0
    35b0:	f7ff feae 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    35b4:	2000      	movs	r0, #0
    35b6:	f7ff feab 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    35ba:	68b3      	ldr	r3, [r6, #8]
    35bc:	2b00      	cmp	r3, #0
    35be:	f340 80ba 	ble.w	3736 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1c2>
    35c2:	f108 0201 	add.w	r2, r8, #1
    35c6:	9202      	str	r2, [sp, #8]
    35c8:	6833      	ldr	r3, [r6, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    35ca:	4d61      	ldr	r5, [pc, #388]	; (3750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1dc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    35cc:	f8df a184 	ldr.w	sl, [pc, #388]	; 3754 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e0>
    35d0:	1c62      	adds	r2, r4, #1
    35d2:	f109 0901 	add.w	r9, r9, #1
    35d6:	9201      	str	r2, [sp, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    35d8:	2702      	movs	r7, #2
    35da:	2404      	movs	r4, #4
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    35dc:	69b1      	ldr	r1, [r6, #24]
    35de:	185a      	adds	r2, r3, r1
    35e0:	f813 b001 	ldrb.w	fp, [r3, r1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    35e4:	7890      	ldrb	r0, [r2, #2]
    35e6:	7853      	ldrb	r3, [r2, #1]
    35e8:	9a01      	ldr	r2, [sp, #4]
    35ea:	602f      	str	r7, [r5, #0]
    35ec:	fb02 f000 	mul.w	r0, r2, r0
    35f0:	9a02      	ldr	r2, [sp, #8]
    35f2:	602c      	str	r4, [r5, #0]
    35f4:	fb09 fb0b 	mul.w	fp, r9, fp
    35f8:	fb02 f303 	mul.w	r3, r2, r3
    35fc:	1200      	asrs	r0, r0, #8
    35fe:	ea4f 2b2b 	mov.w	fp, fp, asr #8
    3602:	f060 00ff 	orn	r0, r0, #255	; 0xff
    3606:	ea4f 2823 	mov.w	r8, r3, asr #8
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    360a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    360c:	bf00      	nop
    360e:	bf00      	nop
    3610:	bf00      	nop
    3612:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3614:	f8ca 4000 	str.w	r4, [sl]
    3618:	bf00      	nop
    361a:	bf00      	nop
    361c:	bf00      	nop
    361e:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3620:	602f      	str	r7, [r5, #0]
    3622:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3624:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3626:	bf00      	nop
    3628:	bf00      	nop
    362a:	bf00      	nop
    362c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    362e:	f8ca 4000 	str.w	r4, [sl]
    3632:	bf00      	nop
    3634:	bf00      	nop
    3636:	bf00      	nop
    3638:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    363a:	602f      	str	r7, [r5, #0]
    363c:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    363e:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3640:	bf00      	nop
    3642:	bf00      	nop
    3644:	bf00      	nop
    3646:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3648:	f8ca 4000 	str.w	r4, [sl]
    364c:	bf00      	nop
    364e:	bf00      	nop
    3650:	bf00      	nop
    3652:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3654:	602f      	str	r7, [r5, #0]
    3656:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3658:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    365a:	bf00      	nop
    365c:	bf00      	nop
    365e:	bf00      	nop
    3660:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3662:	f8ca 4000 	str.w	r4, [sl]
    3666:	bf00      	nop
    3668:	bf00      	nop
    366a:	bf00      	nop
    366c:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    366e:	602f      	str	r7, [r5, #0]
    3670:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3672:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3674:	bf00      	nop
    3676:	bf00      	nop
    3678:	bf00      	nop
    367a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    367c:	f8ca 4000 	str.w	r4, [sl]
    3680:	bf00      	nop
    3682:	bf00      	nop
    3684:	bf00      	nop
    3686:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3688:	602f      	str	r7, [r5, #0]
    368a:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    368c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    368e:	bf00      	nop
    3690:	bf00      	nop
    3692:	bf00      	nop
    3694:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3696:	f8ca 4000 	str.w	r4, [sl]
    369a:	bf00      	nop
    369c:	bf00      	nop
    369e:	bf00      	nop
    36a0:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    36a2:	602f      	str	r7, [r5, #0]
    36a4:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    36a6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    36a8:	bf00      	nop
    36aa:	bf00      	nop
    36ac:	bf00      	nop
    36ae:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    36b0:	f8ca 4000 	str.w	r4, [sl]
    36b4:	bf00      	nop
    36b6:	bf00      	nop
    36b8:	bf00      	nop
    36ba:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    36bc:	602f      	str	r7, [r5, #0]
    36be:	602c      	str	r4, [r5, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    36c0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    36c2:	bf00      	nop
    36c4:	bf00      	nop
    36c6:	bf00      	nop
    36c8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    36ca:	f8ca 4000 	str.w	r4, [sl]
    36ce:	bf00      	nop
    36d0:	bf00      	nop
    36d2:	bf00      	nop
    36d4:	bf00      	nop
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    36d6:	b2c0      	uxtb	r0, r0
    36d8:	f7ff fe1a 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    36dc:	ea4f 2308 	mov.w	r3, r8, lsl #8
    36e0:	b29b      	uxth	r3, r3
		w |= b2;
    36e2:	ea43 0b0b 	orr.w	fp, r3, fp
    36e6:	fa1f fb8b 	uxth.w	fp, fp
    36ea:	ea4f 201b 	mov.w	r0, fp, lsr #8
    36ee:	f7ff fe0f 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    36f2:	fa5f f08b 	uxtb.w	r0, fp
    36f6:	f7ff fe0b 	bl	3310 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    36fa:	7bb2      	ldrb	r2, [r6, #14]
    36fc:	f896 c011 	ldrb.w	ip, [r6, #17]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    3700:	7c31      	ldrb	r1, [r6, #16]
    3702:	7b70      	ldrb	r0, [r6, #13]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    3704:	f896 e00c 	ldrb.w	lr, [r6, #12]
    3708:	f896 b00f 	ldrb.w	fp, [r6, #15]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    370c:	f996 3015 	ldrsb.w	r3, [r6, #21]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    3710:	ebc2 0c0c 	rsb	ip, r2, ip

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    3714:	68b2      	ldr	r2, [r6, #8]
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
                d[2] = e[2] - d[2];
    3716:	f886 c00e 	strb.w	ip, [r6, #14]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    371a:	1a08      	subs	r0, r1, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    371c:	6831      	ldr	r1, [r6, #0]
        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
                d[1] = e[1] - d[1];
    371e:	7370      	strb	r0, [r6, #13]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    3720:	3a01      	subs	r2, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    3722:	ebce 0e0b 	rsb	lr, lr, fp

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    3726:	440b      	add	r3, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    3728:	2a00      	cmp	r2, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    372a:	f886 e00c 	strb.w	lr, [r6, #12]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    372e:	6033      	str	r3, [r6, #0]
    3730:	60b2      	str	r2, [r6, #8]
    3732:	f73f af53 	bgt.w	35dc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x68>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    3736:	6874      	ldr	r4, [r6, #4]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3738:	4905      	ldr	r1, [pc, #20]	; (3750 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1dc>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    373a:	4a06      	ldr	r2, [pc, #24]	; (3754 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e0>)
    373c:	2c00      	cmp	r4, #0
    373e:	bfb8      	it	lt
    3740:	341f      	addlt	r4, #31
    3742:	1164      	asrs	r4, r4, #5
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3744:	2002      	movs	r0, #2
    3746:	2304      	movs	r3, #4
    3748:	e006      	b.n	3758 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e4>
    374a:	bf00      	nop
    374c:	00000475 	.word	0x00000475
    3750:	400ff0c4 	.word	0x400ff0c4
    3754:	400ff0c8 	.word	0x400ff0c8
    3758:	6008      	str	r0, [r1, #0]
    375a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    375c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    375e:	bf00      	nop
    3760:	bf00      	nop
    3762:	bf00      	nop
    3764:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3766:	6013      	str	r3, [r2, #0]
    3768:	bf00      	nop
    376a:	bf00      	nop
    376c:	bf00      	nop
    376e:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3770:	6008      	str	r0, [r1, #0]
    3772:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3774:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3776:	bf00      	nop
    3778:	bf00      	nop
    377a:	bf00      	nop
    377c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    377e:	6013      	str	r3, [r2, #0]
    3780:	bf00      	nop
    3782:	bf00      	nop
    3784:	bf00      	nop
    3786:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3788:	6008      	str	r0, [r1, #0]
    378a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    378c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    378e:	bf00      	nop
    3790:	bf00      	nop
    3792:	bf00      	nop
    3794:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3796:	6013      	str	r3, [r2, #0]
    3798:	bf00      	nop
    379a:	bf00      	nop
    379c:	bf00      	nop
    379e:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    37a0:	6008      	str	r0, [r1, #0]
    37a2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    37a4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    37a6:	bf00      	nop
    37a8:	bf00      	nop
    37aa:	bf00      	nop
    37ac:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    37ae:	6013      	str	r3, [r2, #0]
    37b0:	bf00      	nop
    37b2:	bf00      	nop
    37b4:	bf00      	nop
    37b6:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    37b8:	6008      	str	r0, [r1, #0]
    37ba:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    37bc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    37be:	bf00      	nop
    37c0:	bf00      	nop
    37c2:	bf00      	nop
    37c4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    37c6:	6013      	str	r3, [r2, #0]
    37c8:	bf00      	nop
    37ca:	bf00      	nop
    37cc:	bf00      	nop
    37ce:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    37d0:	6008      	str	r0, [r1, #0]
    37d2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    37d4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    37d6:	bf00      	nop
    37d8:	bf00      	nop
    37da:	bf00      	nop
    37dc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    37de:	6013      	str	r3, [r2, #0]
    37e0:	bf00      	nop
    37e2:	bf00      	nop
    37e4:	bf00      	nop
    37e6:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    37e8:	6008      	str	r0, [r1, #0]
    37ea:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    37ec:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    37ee:	bf00      	nop
    37f0:	bf00      	nop
    37f2:	bf00      	nop
    37f4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    37f6:	6013      	str	r3, [r2, #0]
    37f8:	bf00      	nop
    37fa:	bf00      	nop
    37fc:	bf00      	nop
    37fe:	bf00      	nop
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3800:	6008      	str	r0, [r1, #0]
    3802:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3804:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3806:	bf00      	nop
    3808:	bf00      	nop
    380a:	bf00      	nop
    380c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    380e:	6013      	str	r3, [r2, #0]
    3810:	bf00      	nop
    3812:	bf00      	nop
    3814:	bf00      	nop
    3816:	bf00      	nop
    3818:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    381a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    381c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    381e:	bf00      	nop
    3820:	bf00      	nop
    3822:	bf00      	nop
    3824:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3826:	6013      	str	r3, [r2, #0]
    3828:	bf00      	nop
    382a:	bf00      	nop
    382c:	bf00      	nop
    382e:	bf00      	nop
    3830:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3832:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3834:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3836:	bf00      	nop
    3838:	bf00      	nop
    383a:	bf00      	nop
    383c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    383e:	6013      	str	r3, [r2, #0]
    3840:	bf00      	nop
    3842:	bf00      	nop
    3844:	bf00      	nop
    3846:	bf00      	nop
    3848:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    384a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    384c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    384e:	bf00      	nop
    3850:	bf00      	nop
    3852:	bf00      	nop
    3854:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3856:	6013      	str	r3, [r2, #0]
    3858:	bf00      	nop
    385a:	bf00      	nop
    385c:	bf00      	nop
    385e:	bf00      	nop
    3860:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3862:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3864:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3866:	bf00      	nop
    3868:	bf00      	nop
    386a:	bf00      	nop
    386c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    386e:	6013      	str	r3, [r2, #0]
    3870:	bf00      	nop
    3872:	bf00      	nop
    3874:	bf00      	nop
    3876:	bf00      	nop
    3878:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    387a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    387c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    387e:	bf00      	nop
    3880:	bf00      	nop
    3882:	bf00      	nop
    3884:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3886:	6013      	str	r3, [r2, #0]
    3888:	bf00      	nop
    388a:	bf00      	nop
    388c:	bf00      	nop
    388e:	bf00      	nop
    3890:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3892:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3894:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3896:	bf00      	nop
    3898:	bf00      	nop
    389a:	bf00      	nop
    389c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    389e:	6013      	str	r3, [r2, #0]
    38a0:	bf00      	nop
    38a2:	bf00      	nop
    38a4:	bf00      	nop
    38a6:	bf00      	nop
    38a8:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    38aa:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    38ac:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    38ae:	bf00      	nop
    38b0:	bf00      	nop
    38b2:	bf00      	nop
    38b4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    38b6:	6013      	str	r3, [r2, #0]
    38b8:	bf00      	nop
    38ba:	bf00      	nop
    38bc:	bf00      	nop
    38be:	bf00      	nop
    38c0:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    38c2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    38c4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    38c6:	bf00      	nop
    38c8:	bf00      	nop
    38ca:	bf00      	nop
    38cc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    38ce:	6013      	str	r3, [r2, #0]
    38d0:	bf00      	nop
    38d2:	bf00      	nop
    38d4:	bf00      	nop
    38d6:	bf00      	nop
    38d8:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    38da:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    38dc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    38de:	bf00      	nop
    38e0:	bf00      	nop
    38e2:	bf00      	nop
    38e4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    38e6:	6013      	str	r3, [r2, #0]
    38e8:	bf00      	nop
    38ea:	bf00      	nop
    38ec:	bf00      	nop
    38ee:	bf00      	nop
    38f0:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    38f2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    38f4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    38f6:	bf00      	nop
    38f8:	bf00      	nop
    38fa:	bf00      	nop
    38fc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    38fe:	6013      	str	r3, [r2, #0]
    3900:	bf00      	nop
    3902:	bf00      	nop
    3904:	bf00      	nop
    3906:	bf00      	nop
    3908:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    390a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    390c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    390e:	bf00      	nop
    3910:	bf00      	nop
    3912:	bf00      	nop
    3914:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3916:	6013      	str	r3, [r2, #0]
    3918:	bf00      	nop
    391a:	bf00      	nop
    391c:	bf00      	nop
    391e:	bf00      	nop
    3920:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3922:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3924:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3926:	bf00      	nop
    3928:	bf00      	nop
    392a:	bf00      	nop
    392c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    392e:	6013      	str	r3, [r2, #0]
    3930:	bf00      	nop
    3932:	bf00      	nop
    3934:	bf00      	nop
    3936:	bf00      	nop
    3938:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    393a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    393c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    393e:	bf00      	nop
    3940:	bf00      	nop
    3942:	bf00      	nop
    3944:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3946:	6013      	str	r3, [r2, #0]
    3948:	bf00      	nop
    394a:	bf00      	nop
    394c:	bf00      	nop
    394e:	bf00      	nop
    3950:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3952:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3954:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3956:	bf00      	nop
    3958:	bf00      	nop
    395a:	bf00      	nop
    395c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    395e:	6013      	str	r3, [r2, #0]
    3960:	bf00      	nop
    3962:	bf00      	nop
    3964:	bf00      	nop
    3966:	bf00      	nop
    3968:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    396a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    396c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    396e:	bf00      	nop
    3970:	bf00      	nop
    3972:	bf00      	nop
    3974:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3976:	6013      	str	r3, [r2, #0]
    3978:	bf00      	nop
    397a:	bf00      	nop
    397c:	bf00      	nop
    397e:	bf00      	nop
    3980:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3982:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3984:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3986:	bf00      	nop
    3988:	bf00      	nop
    398a:	bf00      	nop
    398c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    398e:	6013      	str	r3, [r2, #0]
    3990:	bf00      	nop
    3992:	bf00      	nop
    3994:	bf00      	nop
    3996:	bf00      	nop
    3998:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    399a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    399c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    399e:	bf00      	nop
    39a0:	bf00      	nop
    39a2:	bf00      	nop
    39a4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    39a6:	6013      	str	r3, [r2, #0]
    39a8:	bf00      	nop
    39aa:	bf00      	nop
    39ac:	bf00      	nop
    39ae:	bf00      	nop
    39b0:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    39b2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    39b4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    39b6:	bf00      	nop
    39b8:	bf00      	nop
    39ba:	bf00      	nop
    39bc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    39be:	6013      	str	r3, [r2, #0]
    39c0:	bf00      	nop
    39c2:	bf00      	nop
    39c4:	bf00      	nop
    39c6:	bf00      	nop
    39c8:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    39ca:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    39cc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    39ce:	bf00      	nop
    39d0:	bf00      	nop
    39d2:	bf00      	nop
    39d4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    39d6:	6013      	str	r3, [r2, #0]
    39d8:	bf00      	nop
    39da:	bf00      	nop
    39dc:	bf00      	nop
    39de:	bf00      	nop
    39e0:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    39e2:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    39e4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    39e6:	bf00      	nop
    39e8:	bf00      	nop
    39ea:	bf00      	nop
    39ec:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    39ee:	6013      	str	r3, [r2, #0]
    39f0:	bf00      	nop
    39f2:	bf00      	nop
    39f4:	bf00      	nop
    39f6:	bf00      	nop
    39f8:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    39fa:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    39fc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    39fe:	bf00      	nop
    3a00:	bf00      	nop
    3a02:	bf00      	nop
    3a04:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3a06:	6013      	str	r3, [r2, #0]
    3a08:	bf00      	nop
    3a0a:	bf00      	nop
    3a0c:	bf00      	nop
    3a0e:	bf00      	nop
    3a10:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3a12:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3a14:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3a16:	bf00      	nop
    3a18:	bf00      	nop
    3a1a:	bf00      	nop
    3a1c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3a1e:	6013      	str	r3, [r2, #0]
    3a20:	bf00      	nop
    3a22:	bf00      	nop
    3a24:	bf00      	nop
    3a26:	bf00      	nop
    3a28:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3a2a:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3a2c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3a2e:	bf00      	nop
    3a30:	bf00      	nop
    3a32:	bf00      	nop
    3a34:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3a36:	6013      	str	r3, [r2, #0]
    3a38:	bf00      	nop
    3a3a:	bf00      	nop
    3a3c:	bf00      	nop
    3a3e:	bf00      	nop
    3a40:	6010      	str	r0, [r2, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    3a42:	600b      	str	r3, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    3a44:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    3a46:	bf00      	nop
    3a48:	bf00      	nop
    3a4a:	bf00      	nop
    3a4c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    3a4e:	6013      	str	r3, [r2, #0]
    3a50:	bf00      	nop
    3a52:	bf00      	nop
    3a54:	bf00      	nop
    3a56:	bf00      	nop
    3a58:	f114 34ff 	adds.w	r4, r4, #4294967295
    3a5c:	f4bf ae7c 	bcs.w	3758 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x1e4>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    3a60:	9b03      	ldr	r3, [sp, #12]
    3a62:	6998      	ldr	r0, [r3, #24]
    3a64:	b150      	cbz	r0, 3a7c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x508>
    3a66:	6803      	ldr	r3, [r0, #0]
    3a68:	4a09      	ldr	r2, [pc, #36]	; (3a90 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x51c>)
    3a6a:	685b      	ldr	r3, [r3, #4]
    3a6c:	4293      	cmp	r3, r2
    3a6e:	d108      	bne.n	3a82 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x50e>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    3a70:	6842      	ldr	r2, [r0, #4]
    3a72:	7b01      	ldrb	r1, [r0, #12]
    3a74:	7813      	ldrb	r3, [r2, #0]
    3a76:	ea23 0301 	bic.w	r3, r3, r1
    3a7a:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    3a7c:	b005      	add	sp, #20
    3a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a82:	b005      	add	sp, #20
    3a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a88:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    3a8a:	4798      	blx	r3
    3a8c:	e584      	b.n	3598 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    3a8e:	bf00      	nop
    3a90:	00000481 	.word	0x00000481

00003a94 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    3a94:	b470      	push	{r4, r5, r6}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    3a96:	4819      	ldr	r0, [pc, #100]	; (3afc <_GLOBAL__sub_I_ib_jul01_gp+0x68>)
    3a98:	4919      	ldr	r1, [pc, #100]	; (3b00 <_GLOBAL__sub_I_ib_jul01_gp+0x6c>)
    3a9a:	4a1a      	ldr	r2, [pc, #104]	; (3b04 <_GLOBAL__sub_I_ib_jul01_gp+0x70>)
    3a9c:	26ff      	movs	r6, #255	; 0xff
    3a9e:	250a      	movs	r5, #10
    3aa0:	2301      	movs	r3, #1
    3aa2:	2400      	movs	r4, #0
    3aa4:	f880 61c2 	strb.w	r6, [r0, #450]	; 0x1c2
    3aa8:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
    3aac:	f881 61c2 	strb.w	r6, [r1, #450]	; 0x1c2
    3ab0:	f881 51c3 	strb.w	r5, [r1, #451]	; 0x1c3
    3ab4:	f882 61c2 	strb.w	r6, [r2, #450]	; 0x1c2
    3ab8:	f882 51c3 	strb.w	r5, [r2, #451]	; 0x1c3
    3abc:	f880 422d 	strb.w	r4, [r0, #557]	; 0x22d
    3ac0:	f881 422d 	strb.w	r4, [r1, #557]	; 0x22d
    3ac4:	f882 422d 	strb.w	r4, [r2, #557]	; 0x22d
    3ac8:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
    3acc:	f880 31c5 	strb.w	r3, [r0, #453]	; 0x1c5
    3ad0:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
    3ad4:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    3ad8:	f881 31c4 	strb.w	r3, [r1, #452]	; 0x1c4
    3adc:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5
    3ae0:	f881 3228 	strb.w	r3, [r1, #552]	; 0x228
    3ae4:	f881 3229 	strb.w	r3, [r1, #553]	; 0x229
    3ae8:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
    3aec:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    3af0:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
    3af4:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229
    3af8:	bc70      	pop	{r4, r5, r6}
    3afa:	4770      	bx	lr
    3afc:	1fff9430 	.word	0x1fff9430
    3b00:	1fff8c64 	.word	0x1fff8c64
    3b04:	1fff914c 	.word	0x1fff914c

00003b08 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    3b08:	2900      	cmp	r1, #0
    3b0a:	dd0b      	ble.n	3b24 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    3b0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3b10:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b12:	7813      	ldrb	r3, [r2, #0]
    3b14:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3b16:	7853      	ldrb	r3, [r2, #1]
    3b18:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    3b1a:	7893      	ldrb	r3, [r2, #2]
    3b1c:	7083      	strb	r3, [r0, #2]
    3b1e:	3003      	adds	r0, #3
    3b20:	4288      	cmp	r0, r1
    3b22:	d1f6      	bne.n	3b12 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    3b24:	4770      	bx	lr
    3b26:	bf00      	nop

00003b28 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    3b28:	b570      	push	{r4, r5, r6, lr}
    3b2a:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    3b2c:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    3b2e:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    3b30:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    3b32:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    3b36:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    3b3a:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    3b3e:	dd10      	ble.n	3b62 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    3b40:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3b44:	461e      	mov	r6, r3
    3b46:	4604      	mov	r4, r0
    3b48:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    3b4a:	4621      	mov	r1, r4
    3b4c:	a801      	add	r0, sp, #4
    3b4e:	f000 faf9 	bl	4144 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    3b52:	f89d 2004 	ldrb.w	r2, [sp, #4]
    3b56:	3403      	adds	r4, #3
    3b58:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    3b5a:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    3b5c:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    3b60:	d1f3      	bne.n	3b4a <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    3b62:	b002      	add	sp, #8
    3b64:	bd70      	pop	{r4, r5, r6, pc}
    3b66:	bf00      	nop

00003b68 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    3b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3b6c:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    3b6e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    3b70:	d352      	bcc.n	3c18 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    3b72:	f896 e000 	ldrb.w	lr, [r6]
    3b76:	7815      	ldrb	r5, [r2, #0]
    3b78:	7877      	ldrb	r7, [r6, #1]
    3b7a:	f896 8002 	ldrb.w	r8, [r6, #2]
    3b7e:	7854      	ldrb	r4, [r2, #1]
    3b80:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    3b84:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3b88:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    3b8c:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3b90:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    3b94:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    3b98:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    3b9c:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    3ba0:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    3ba2:	b3b2      	cbz	r2, 3c12 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    3ba4:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3ba8:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    3bac:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3bb0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    3bb4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    3bb8:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3bbc:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    3bbe:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    3bc2:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    3bc6:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    3bca:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    3bce:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    3bd2:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    3bd6:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    3bda:	d818      	bhi.n	3c0e <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    3bdc:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3be0:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    3be2:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3be4:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3be6:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    3bea:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    3bee:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3bf2:	4475      	add	r5, lr
        g88 += gdelta87;
    3bf4:	4454      	add	r4, sl
        b88 += bdelta87;
    3bf6:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3bf8:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3bfa:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    3bfe:	b2ad      	uxth	r5, r5
        g = rhs.g;
    3c00:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    3c04:	b2a4      	uxth	r4, r4
        b = rhs.b;
    3c06:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    3c0a:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    3c0c:	d2e6      	bcs.n	3bdc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    3c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3c12:	f04f 0b01 	mov.w	fp, #1
    3c16:	e7c7      	b.n	3ba8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    3c18:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c1a:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c1c:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3c20:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3c22:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3c24:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3c28:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3c2c:	7015      	strb	r5, [r2, #0]
    3c2e:	4619      	mov	r1, r3
    3c30:	f886 e000 	strb.w	lr, [r6]
    3c34:	464b      	mov	r3, r9
        g = rhs.g;
    3c36:	7054      	strb	r4, [r2, #1]
    3c38:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    3c3a:	f882 c002 	strb.w	ip, [r2, #2]
    3c3e:	f886 8002 	strb.w	r8, [r6, #2]
    3c42:	e79f      	b.n	3b84 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

00003c44 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    3c44:	b309      	cbz	r1, 3c8a <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    3c46:	b430      	push	{r4, r5}
    3c48:	1e4d      	subs	r5, r1, #1
    3c4a:	b2ad      	uxth	r5, r5
    3c4c:	43d2      	mvns	r2, r2
    3c4e:	3501      	adds	r5, #1
    3c50:	b2d2      	uxtb	r2, r2
    3c52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3c56:	4405      	add	r5, r0
    3c58:	3201      	adds	r2, #1
    3c5a:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    3c5c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    3c60:	fb02 f303 	mul.w	r3, r2, r3
    3c64:	121b      	asrs	r3, r3, #8
    3c66:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3c6a:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3c6c:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3c6e:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3c72:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3c76:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3c78:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    3c7a:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    3c7c:	7083      	strb	r3, [r0, #2]
    3c7e:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    3c80:	4285      	cmp	r5, r0
    3c82:	f104 0403 	add.w	r4, r4, #3
    3c86:	d1e9      	bne.n	3c5c <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    3c88:	bc30      	pop	{r4, r5}
    3c8a:	4770      	bx	lr

00003c8c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    3c8c:	f7ff bfda 	b.w	3c44 <fade_raw(CRGB*, unsigned short, unsigned char)>

00003c90 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    3c90:	b322      	cbz	r2, 3cdc <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    3c92:	2aff      	cmp	r2, #255	; 0xff
    3c94:	d023      	beq.n	3cde <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    3c96:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3c98:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3c9a:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3c9c:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3c9e:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    3ca0:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3ca2:	43d2      	mvns	r2, r2
    3ca4:	fb06 7605 	mla	r6, r6, r5, r7
    3ca8:	b2d2      	uxtb	r2, r2
    3caa:	fb04 6402 	mla	r4, r4, r2, r6
    3cae:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3cb2:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3cb4:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    3cb6:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    3cb8:	191f      	adds	r7, r3, r4
    3cba:	fb04 7405 	mla	r4, r4, r5, r7
    3cbe:	fb03 4302 	mla	r3, r3, r2, r4
    3cc2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3cc6:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    3cc8:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    3cca:	18f1      	adds	r1, r6, r3
    3ccc:	fb03 1505 	mla	r5, r3, r5, r1
    3cd0:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    3cd4:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    3cd6:	f3c2 2207 	ubfx	r2, r2, #8, #8
    3cda:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    3cdc:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cde:	780b      	ldrb	r3, [r1, #0]
    3ce0:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    3ce2:	784b      	ldrb	r3, [r1, #1]
    3ce4:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    3ce6:	788b      	ldrb	r3, [r1, #2]
    3ce8:	7083      	strb	r3, [r0, #2]
    3cea:	4770      	bx	lr

00003cec <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    3cec:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cee:	780d      	ldrb	r5, [r1, #0]
    3cf0:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    3cf2:	784d      	ldrb	r5, [r1, #1]
    3cf4:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    3cf6:	7889      	ldrb	r1, [r1, #2]
    3cf8:	7081      	strb	r1, [r0, #2]
    3cfa:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    3cfc:	4611      	mov	r1, r2
    3cfe:	461a      	mov	r2, r3
    3d00:	f7ff ffc6 	bl	3c90 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    3d04:	4620      	mov	r0, r4
    3d06:	bd38      	pop	{r3, r4, r5, pc}

00003d08 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    3d08:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    3d0c:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    3d10:	3100      	adds	r1, #0
    3d12:	bf18      	it	ne
    3d14:	2101      	movne	r1, #1
    3d16:	eb01 2123 	add.w	r1, r1, r3, asr #8
    3d1a:	b2c9      	uxtb	r1, r1
    3d1c:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    3d1e:	060a      	lsls	r2, r1, #24
    3d20:	b2db      	uxtb	r3, r3
    3d22:	d40e      	bmi.n	3d42 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    3d24:	f001 0140 	and.w	r1, r1, #64	; 0x40
    3d28:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    3d2c:	b919      	cbnz	r1, 3d36 <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    3d2e:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    3d30:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    3d32:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    3d34:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    3d36:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    3d38:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    3d3a:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    3d3c:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    3d3e:	7082      	strb	r2, [r0, #2]
    3d40:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    3d42:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    3d44:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    3d46:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    3d48:	7042      	strb	r2, [r0, #1]
    3d4a:	4770      	bx	lr

00003d4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    3d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    3d50:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    3d52:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    3d56:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    3d5a:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    3d5c:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    3d60:	d000      	beq.n	3d64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    3d62:	b9e6      	cbnz	r6, 3d9e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    3d64:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    3d66:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    3d68:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    3d6a:	2bff      	cmp	r3, #255	; 0xff
    3d6c:	d012      	beq.n	3d94 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    3d6e:	2b00      	cmp	r3, #0
    3d70:	d043      	beq.n	3dfa <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    3d72:	3301      	adds	r3, #1
    3d74:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    3d76:	b11c      	cbz	r4, 3d80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    3d78:	fb03 4404 	mla	r4, r3, r4, r4
    3d7c:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    3d80:	b119      	cbz	r1, 3d8a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    3d82:	fb03 1101 	mla	r1, r3, r1, r1
    3d86:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    3d8a:	b11a      	cbz	r2, 3d94 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    3d8c:	fb03 2202 	mla	r2, r3, r2, r2
    3d90:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    3d94:	7004      	strb	r4, [r0, #0]
    3d96:	7041      	strb	r1, [r0, #1]
    3d98:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    3d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    3d9e:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    3da0:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    3da2:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    3da6:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    3da8:	d000      	beq.n	3dac <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    3daa:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    3dac:	0112      	lsls	r2, r2, #4
    3dae:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    3db2:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3db4:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3db8:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3dbc:	f891 8002 	ldrb.w	r8, [r1, #2]
    3dc0:	fb04 f606 	mul.w	r6, r4, r6
    3dc4:	1c51      	adds	r1, r2, #1
    3dc6:	fb04 f509 	mul.w	r5, r4, r9
    3dca:	fb04 f407 	mul.w	r4, r4, r7
    3dce:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3dd2:	f3c6 2707 	ubfx	r7, r6, #8, #8
    3dd6:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3dda:	fb01 f60c 	mul.w	r6, r1, ip
    3dde:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3de2:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3de6:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3dea:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3dee:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    3df2:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    3df4:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    3df6:	b2d2      	uxtb	r2, r2
    3df8:	e7b7      	b.n	3d6a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    3dfa:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    3dfc:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    3dfe:	461c      	mov	r4, r3
    3e00:	7004      	strb	r4, [r0, #0]
    3e02:	7041      	strb	r1, [r0, #1]
    3e04:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    3e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3e0a:	bf00      	nop

00003e0c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    3e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e0e:	3901      	subs	r1, #1
    3e10:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    3e12:	2500      	movs	r5, #0
    3e14:	302f      	adds	r0, #47	; 0x2f
    3e16:	e001      	b.n	3e1c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    3e18:	4284      	cmp	r4, r0
    3e1a:	d01e      	beq.n	3e5a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    3e1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    3e20:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    3e24:	42b3      	cmp	r3, r6
    3e26:	d0f7      	beq.n	3e18 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    3e28:	f103 0701 	add.w	r7, r3, #1
    3e2c:	d204      	bcs.n	3e38 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    3e2e:	b2fb      	uxtb	r3, r7
    3e30:	7023      	strb	r3, [r4, #0]
    3e32:	3501      	adds	r5, #1
    3e34:	780e      	ldrb	r6, [r1, #0]
    3e36:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    3e38:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    3e3a:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    3e3c:	b2ff      	uxtb	r7, r7
    3e3e:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    3e42:	d208      	bcs.n	3e56 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    3e44:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    3e46:	780e      	ldrb	r6, [r1, #0]
    3e48:	42be      	cmp	r6, r7
    3e4a:	bf38      	it	cc
    3e4c:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    3e4e:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    3e52:	bf38      	it	cc
    3e54:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    3e56:	4295      	cmp	r5, r2
    3e58:	d3de      	bcc.n	3e18 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    3e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e5c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    3e5e:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    3e60:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    3e62:	4604      	mov	r4, r0
    3e64:	bfcc      	ite	gt
    3e66:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    3e6a:	2500      	movle	r5, #0
    3e6c:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    3e6e:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    3e70:	bfd8      	it	le
    3e72:	4616      	movle	r6, r2

	pLed->init();
    3e74:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    3e76:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3e78:	6823      	ldr	r3, [r4, #0]
    3e7a:	6062      	str	r2, [r4, #4]
    3e7c:	695b      	ldr	r3, [r3, #20]
    3e7e:	4a0a      	ldr	r2, [pc, #40]	; (3ea8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    3e80:	6166      	str	r6, [r4, #20]
    3e82:	4293      	cmp	r3, r2
    3e84:	d101      	bne.n	3e8a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    3e86:	4620      	mov	r0, r4
    3e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    3e8a:	4620      	mov	r0, r4
    3e8c:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    3e8e:	2800      	cmp	r0, #0
    3e90:	d0f9      	beq.n	3e86 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    3e92:	4a06      	ldr	r2, [pc, #24]	; (3eac <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    3e94:	4b06      	ldr	r3, [pc, #24]	; (3eb0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    3e96:	6851      	ldr	r1, [r2, #4]
    3e98:	fb93 f0f0 	sdiv	r0, r3, r0
    3e9c:	4288      	cmp	r0, r1
    3e9e:	bf38      	it	cc
    3ea0:	4608      	movcc	r0, r1
    3ea2:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    3ea4:	4620      	mov	r0, r4
    3ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ea8:	00000471 	.word	0x00000471
    3eac:	1fff9708 	.word	0x1fff9708
    3eb0:	000f4240 	.word	0x000f4240

00003eb4 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3eb4:	4b08      	ldr	r3, [pc, #32]	; (3ed8 <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    3eb6:	b510      	push	{r4, lr}
    3eb8:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3eba:	b15c      	cbz	r4, 3ed4 <CFastLED::clearData()+0x20>
    3ebc:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    3ebe:	2100      	movs	r1, #0
    3ec0:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    3ec2:	b123      	cbz	r3, 3ece <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    3ec4:	6962      	ldr	r2, [r4, #20]
    3ec6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3eca:	f002 faf3 	bl	64b4 <memset>
    3ece:	68a4      	ldr	r4, [r4, #8]
    3ed0:	2c00      	cmp	r4, #0
    3ed2:	d1f3      	bne.n	3ebc <CFastLED::clearData()+0x8>
    3ed4:	bd10      	pop	{r4, pc}
    3ed6:	bf00      	nop
    3ed8:	1fff9718 	.word	0x1fff9718

00003edc <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    3edc:	4b07      	ldr	r3, [pc, #28]	; (3efc <CFastLED::setCorrection(CRGB const&)+0x20>)
    3ede:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3ee0:	b153      	cbz	r3, 3ef8 <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    3ee2:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ee4:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    3ee6:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    3ee8:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    3eea:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3eec:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    3eee:	735a      	strb	r2, [r3, #13]
    3ef0:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3ef2:	2b00      	cmp	r3, #0
    3ef4:	d1f6      	bne.n	3ee4 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    3ef6:	bc10      	pop	{r4}
    3ef8:	4770      	bx	lr
    3efa:	bf00      	nop
    3efc:	1fff9718 	.word	0x1fff9718

00003f00 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    3f00:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3f02:	4c0f      	ldr	r4, [pc, #60]	; (3f40 <CFastLED::countFPS(int)+0x40>)
    3f04:	6822      	ldr	r2, [r4, #0]
    3f06:	1c53      	adds	r3, r2, #1
    3f08:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    3f0a:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    3f0c:	6023      	str	r3, [r4, #0]
    3f0e:	db13      	blt.n	3f38 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f10:	4d0c      	ldr	r5, [pc, #48]	; (3f44 <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    3f12:	4a0d      	ldr	r2, [pc, #52]	; (3f48 <CFastLED::countFPS(int)+0x48>)
    3f14:	6829      	ldr	r1, [r5, #0]
    3f16:	9101      	str	r1, [sp, #4]
	return ret;
    3f18:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f1a:	682d      	ldr	r5, [r5, #0]
    3f1c:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    3f1e:	6816      	ldr	r6, [r2, #0]
	return ret;
    3f20:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    3f22:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    3f28:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3f2a:	1b89      	subs	r1, r1, r6
    3f2c:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    3f30:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    3f32:	fbb3 f3f1 	udiv	r3, r3, r1
    3f36:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    3f38:	b003      	add	sp, #12
    3f3a:	bc70      	pop	{r4, r5, r6}
    3f3c:	4770      	bx	lr
    3f3e:	bf00      	nop
    3f40:	1fff971c 	.word	0x1fff971c
    3f44:	1fff9780 	.word	0x1fff9780
    3f48:	1fff9724 	.word	0x1fff9724

00003f4c <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    3f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f50:	6843      	ldr	r3, [r0, #4]
    3f52:	4c2d      	ldr	r4, [pc, #180]	; (4008 <CFastLED::show(unsigned char)+0xbc>)
    3f54:	b083      	sub	sp, #12
    3f56:	4606      	mov	r6, r0
    3f58:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3f5a:	2b00      	cmp	r3, #0
    3f5c:	d14b      	bne.n	3ff6 <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    3f5e:	f000 fd6f 	bl	4a40 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3f62:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    3f64:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    3f66:	b11b      	cbz	r3, 3f70 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    3f68:	4648      	mov	r0, r9
    3f6a:	68b1      	ldr	r1, [r6, #8]
    3f6c:	4798      	blx	r3
    3f6e:	4681      	mov	r9, r0
    3f70:	4b26      	ldr	r3, [pc, #152]	; (400c <CFastLED::show(unsigned char)+0xc0>)
    3f72:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3f74:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3f76:	2c00      	cmp	r4, #0
    3f78:	d036      	beq.n	3fe8 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    3f7a:	8873      	ldrh	r3, [r6, #2]
    3f7c:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3f7e:	6861      	ldr	r1, [r4, #4]
    3f80:	6962      	ldr	r2, [r4, #20]
    3f82:	2b63      	cmp	r3, #99	; 0x63
    3f84:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3f86:	bf98      	it	ls
    3f88:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3f8a:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    3f8e:	f88d 5004 	strb.w	r5, [sp, #4]
    3f92:	f88d 5005 	strb.w	r5, [sp, #5]
    3f96:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    3f9a:	f1b9 0f00 	cmp.w	r9, #0
    3f9e:	d01c      	beq.n	3fda <CFastLED::show(unsigned char)+0x8e>
    3fa0:	f104 030b 	add.w	r3, r4, #11
    3fa4:	f10d 0e04 	add.w	lr, sp, #4
    3fa8:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    3fac:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3fb0:	f1bb 0f00 	cmp.w	fp, #0
    3fb4:	d00d      	beq.n	3fd2 <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    3fb6:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3fba:	f10a 0001 	add.w	r0, sl, #1
    3fbe:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    3fc2:	f1ba 0f00 	cmp.w	sl, #0
    3fc6:	d004      	beq.n	3fd2 <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    3fc8:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    3fcc:	0c00      	lsrs	r0, r0, #16
    3fce:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    3fd2:	4563      	cmp	r3, ip
    3fd4:	f10e 0e01 	add.w	lr, lr, #1
    3fd8:	d1e8      	bne.n	3fac <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    3fda:	4620      	mov	r0, r4
    3fdc:	ab01      	add	r3, sp, #4
    3fde:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    3fe0:	74a7      	strb	r7, [r4, #18]
    3fe2:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    3fe4:	2c00      	cmp	r4, #0
    3fe6:	d1c8      	bne.n	3f7a <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    3fe8:	4630      	mov	r0, r6
    3fea:	2119      	movs	r1, #25
    3fec:	f7ff ff88 	bl	3f00 <CFastLED::countFPS(int)>
}
    3ff0:	b003      	add	sp, #12
    3ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    3ff6:	f000 fd23 	bl	4a40 <micros>
    3ffa:	6822      	ldr	r2, [r4, #0]
    3ffc:	6873      	ldr	r3, [r6, #4]
    3ffe:	1a80      	subs	r0, r0, r2
    4000:	4298      	cmp	r0, r3
    4002:	d3aa      	bcc.n	3f5a <CFastLED::show(unsigned char)+0xe>
    4004:	e7ab      	b.n	3f5e <CFastLED::show(unsigned char)+0x12>
    4006:	bf00      	nop
    4008:	1fff9720 	.word	0x1fff9720
    400c:	1fff9718 	.word	0x1fff9718

00004010 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    4010:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4012:	4d0a      	ldr	r5, [pc, #40]	; (403c <CFastLED::delay(unsigned long)+0x2c>)
    4014:	b083      	sub	sp, #12
    4016:	682b      	ldr	r3, [r5, #0]
    4018:	9300      	str	r3, [sp, #0]
	return ret;
    401a:	9f00      	ldr	r7, [sp, #0]
    401c:	4604      	mov	r4, r0
    401e:	460e      	mov	r6, r1
    4020:	7821      	ldrb	r1, [r4, #0]
    4022:	4620      	mov	r0, r4
    4024:	f7ff ff92 	bl	3f4c <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    4028:	f001 ffb8 	bl	5f9c <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    402c:	682b      	ldr	r3, [r5, #0]
    402e:	9301      	str	r3, [sp, #4]
	return ret;
    4030:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    4032:	1bdb      	subs	r3, r3, r7
    4034:	42b3      	cmp	r3, r6
    4036:	d3f3      	bcc.n	4020 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    4038:	b003      	add	sp, #12
    403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    403c:	1fff9780 	.word	0x1fff9780

00004040 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    4040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4044:	6843      	ldr	r3, [r0, #4]
    4046:	4c2c      	ldr	r4, [pc, #176]	; (40f8 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    4048:	b083      	sub	sp, #12
    404a:	4606      	mov	r6, r0
    404c:	468a      	mov	sl, r1
    404e:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    4050:	2b00      	cmp	r3, #0
    4052:	d149      	bne.n	40e8 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    4054:	f000 fcf4 	bl	4a40 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    4058:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    405a:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    405c:	b11b      	cbz	r3, 4066 <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    405e:	4648      	mov	r0, r9
    4060:	68b1      	ldr	r1, [r6, #8]
    4062:	4798      	blx	r3
    4064:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    4066:	4b25      	ldr	r3, [pc, #148]	; (40fc <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    4068:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    406a:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    406c:	2c00      	cmp	r4, #0
    406e:	d034      	beq.n	40da <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    4070:	8873      	ldrh	r3, [r6, #2]
    4072:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    4074:	6962      	ldr	r2, [r4, #20]
    4076:	2b63      	cmp	r3, #99	; 0x63
    4078:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    407a:	bf98      	it	ls
    407c:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    407e:	f8d3 8000 	ldr.w	r8, [r3]
    4082:	f88d 5004 	strb.w	r5, [sp, #4]
    4086:	f88d 5005 	strb.w	r5, [sp, #5]
    408a:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    408e:	f1b9 0f00 	cmp.w	r9, #0
    4092:	d01a      	beq.n	40ca <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    4094:	f104 030b 	add.w	r3, r4, #11
    4098:	a801      	add	r0, sp, #4
    409a:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    409e:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    40a2:	f1bb 0f00 	cmp.w	fp, #0
    40a6:	d00c      	beq.n	40c2 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    40a8:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    40ac:	f10c 0101 	add.w	r1, ip, #1
    40b0:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    40b4:	f1bc 0f00 	cmp.w	ip, #0
    40b8:	d003      	beq.n	40c2 <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    40ba:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    40be:	0c09      	lsrs	r1, r1, #16
    40c0:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    40c2:	4573      	cmp	r3, lr
    40c4:	f100 0001 	add.w	r0, r0, #1
    40c8:	d1e9      	bne.n	409e <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    40ca:	4620      	mov	r0, r4
    40cc:	ab01      	add	r3, sp, #4
    40ce:	4651      	mov	r1, sl
    40d0:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    40d2:	74a7      	strb	r7, [r4, #18]
    40d4:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    40d6:	2c00      	cmp	r4, #0
    40d8:	d1ca      	bne.n	4070 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    40da:	4630      	mov	r0, r6
    40dc:	2119      	movs	r1, #25
    40de:	f7ff ff0f 	bl	3f00 <CFastLED::countFPS(int)>
}
    40e2:	b003      	add	sp, #12
    40e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    40e8:	f000 fcaa 	bl	4a40 <micros>
    40ec:	6822      	ldr	r2, [r4, #0]
    40ee:	6873      	ldr	r3, [r6, #4]
    40f0:	1a80      	subs	r0, r0, r2
    40f2:	4298      	cmp	r0, r3
    40f4:	d3ac      	bcc.n	4050 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    40f6:	e7ad      	b.n	4054 <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    40f8:	1fff9720 	.word	0x1fff9720
    40fc:	1fff9718 	.word	0x1fff9718

00004100 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    4100:	b510      	push	{r4, lr}
    4102:	4604      	mov	r4, r0
    4104:	b082      	sub	sp, #8
	if(writeData) {
    4106:	b151      	cbz	r1, 411e <CFastLED::clear(bool)+0x1e>
    4108:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    410a:	461a      	mov	r2, r3
    410c:	a901      	add	r1, sp, #4
    410e:	f88d 3004 	strb.w	r3, [sp, #4]
    4112:	f88d 3005 	strb.w	r3, [sp, #5]
    4116:	f88d 3006 	strb.w	r3, [sp, #6]
    411a:	f7ff ff91 	bl	4040 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    411e:	4620      	mov	r0, r4
    4120:	f7ff fec8 	bl	3eb4 <CFastLED::clearData()>
}
    4124:	b002      	add	sp, #8
    4126:	bd10      	pop	{r4, pc}

00004128 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    4128:	2000      	movs	r0, #0
    412a:	4770      	bx	lr

0000412c <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    412c:	4b04      	ldr	r3, [pc, #16]	; (4140 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    412e:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4130:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    4132:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    4136:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    4138:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    413a:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    413c:	60da      	str	r2, [r3, #12]
    413e:	4770      	bx	lr
    4140:	1fff9708 	.word	0x1fff9708

00004144 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    4144:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    4146:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    4148:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    414a:	7882      	ldrb	r2, [r0, #2]
    414c:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    414e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    4152:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4156:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    415a:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    415c:	0625      	lsls	r5, r4, #24
    415e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4162:	d45f      	bmi.n	4224 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    4164:	f004 0540 	and.w	r5, r4, #64	; 0x40
    4168:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    416c:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    4170:	2d00      	cmp	r5, #0
    4172:	d146      	bne.n	4202 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4174:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    4178:	2c00      	cmp	r4, #0
    417a:	d06c      	beq.n	4256 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    417c:	3355      	adds	r3, #85	; 0x55
    417e:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    4180:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    4182:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    4184:	2eff      	cmp	r6, #255	; 0xff
    4186:	d01c      	beq.n	41c2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    4188:	2e00      	cmp	r6, #0
    418a:	d079      	beq.n	4280 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    418c:	b11c      	cbz	r4, 4196 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    418e:	fb06 4404 	mla	r4, r6, r4, r4
    4192:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    4196:	b11d      	cbz	r5, 41a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    4198:	fb06 5505 	mla	r5, r6, r5, r5
    419c:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    41a0:	b11b      	cbz	r3, 41aa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    41a2:	fb06 3303 	mla	r3, r6, r3, r3
    41a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    41aa:	43f0      	mvns	r0, r6
    41ac:	b2c0      	uxtb	r0, r0
    41ae:	fb00 0000 	mla	r0, r0, r0, r0
    41b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    41b6:	4404      	add	r4, r0
            g += brightness_floor;
    41b8:	4405      	add	r5, r0
            b += brightness_floor;
    41ba:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    41bc:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    41be:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    41c0:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    41c2:	2aff      	cmp	r2, #255	; 0xff
    41c4:	d018      	beq.n	41f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    41c6:	fb12 f002 	smulbb	r0, r2, r2
    41ca:	3200      	adds	r2, #0
    41cc:	bf18      	it	ne
    41ce:	2201      	movne	r2, #1
    41d0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    41d4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    41d8:	d056      	beq.n	4288 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    41da:	b11c      	cbz	r4, 41e4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    41dc:	fb02 4404 	mla	r4, r2, r4, r4
    41e0:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    41e4:	b11d      	cbz	r5, 41ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    41e6:	fb02 5505 	mla	r5, r2, r5, r5
    41ea:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    41ee:	b11b      	cbz	r3, 41f8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    41f0:	fb02 3303 	mla	r3, r2, r3, r3
    41f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    41f8:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    41fa:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    41fc:	708b      	strb	r3, [r1, #2]
}
    41fe:	bcf0      	pop	{r4, r5, r6, r7}
    4200:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    4202:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    4206:	bb5c      	cbnz	r4, 4260 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4208:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    420c:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    4210:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4214:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    4216:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4218:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    421c:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    421e:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    4220:	463b      	mov	r3, r7
    4222:	e7af      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    4224:	f004 0740 	and.w	r7, r4, #64	; 0x40
    4228:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    422c:	b9e7      	cbnz	r7, 4268 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    422e:	f004 0720 	and.w	r7, r4, #32
    4232:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    4236:	2f00      	cmp	r7, #0
    4238:	d136      	bne.n	42a8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    423a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    423e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    4242:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    4246:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    424a:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    424e:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    4250:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    4252:	b2c3      	uxtb	r3, r0
    4254:	e796      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    4256:	43dc      	mvns	r4, r3
    4258:	b2e4      	uxtb	r4, r4
                g = third;
    425a:	461d      	mov	r5, r3
                b = 0;
    425c:	4603      	mov	r3, r0
    425e:	e791      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    4260:	2400      	movs	r4, #0
                g = K255 - third;
    4262:	43dd      	mvns	r5, r3
    4264:	b2ed      	uxtb	r5, r5
    4266:	e78d      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    4268:	f004 0420 	and.w	r4, r4, #32
    426c:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    4270:	b994      	cbnz	r4, 4298 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    4272:	f103 0455 	add.w	r4, r3, #85	; 0x55
    4276:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    4278:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    427c:	b2db      	uxtb	r3, r3
    427e:	e781      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    4280:	23ff      	movs	r3, #255	; 0xff
    4282:	461d      	mov	r5, r3
    4284:	461c      	mov	r4, r3
    4286:	e79c      	b.n	41c2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    4288:	4615      	mov	r5, r2
    428a:	4614      	mov	r4, r2
    428c:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    428e:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    4290:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    4292:	708b      	strb	r3, [r1, #2]
}
    4294:	bcf0      	pop	{r4, r5, r6, r7}
    4296:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    4298:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    429c:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    429e:	2500      	movs	r5, #0
                b = K85 - third;
    42a0:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    42a4:	b2db      	uxtb	r3, r3
    42a6:	e76d      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    42a8:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    42aa:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    42ac:	b2c3      	uxtb	r3, r0
    42ae:	e769      	b.n	4184 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

000042b0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    42b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    42b2:	b361      	cbz	r1, 430e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    42b4:	f101 3eff 	add.w	lr, r1, #4294967295
    42b8:	fa1f fe8e 	uxth.w	lr, lr
    42bc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    42c0:	2200      	movs	r2, #0
    42c2:	f10e 0e06 	add.w	lr, lr, #6
    42c6:	4486      	add	lr, r0
    42c8:	1cc3      	adds	r3, r0, #3
    42ca:	4615      	mov	r5, r2
    42cc:	4614      	mov	r4, r2
        red32   += *p++;
    42ce:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    42d2:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    42d6:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    42da:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    42dc:	4573      	cmp	r3, lr
        red32   += *p++;
    42de:	443c      	add	r4, r7
        green32 += *p++;
    42e0:	4405      	add	r5, r0
        blue32  += *p++;
    42e2:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    42e4:	d1f3      	bne.n	42ce <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    42e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    42ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    42ee:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    42f2:	f3c4 1317 	ubfx	r3, r4, #4, #24
    42f6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    42fa:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    42fe:	0a12      	lsrs	r2, r2, #8
    4300:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    4304:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4308:	1910      	adds	r0, r2, r4
}
    430a:	4408      	add	r0, r1
    430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    430e:	460c      	mov	r4, r1
    4310:	460a      	mov	r2, r1
    4312:	e7f7      	b.n	4304 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

00004314 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    4314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    4318:	4b25      	ldr	r3, [pc, #148]	; (43b0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    431a:	681c      	ldr	r4, [r3, #0]
    431c:	b085      	sub	sp, #20
    431e:	4607      	mov	r7, r0
    4320:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    4322:	b19c      	cbz	r4, 434c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    4324:	f8df 9094 	ldr.w	r9, [pc, #148]	; 43bc <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    4328:	257d      	movs	r5, #125	; 0x7d
    432a:	e007      	b.n	433c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    432c:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    432e:	b281      	uxth	r1, r0
    4330:	4630      	mov	r0, r6
    4332:	f7ff ffbd 	bl	42b0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    4336:	68a4      	ldr	r4, [r4, #8]
    4338:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    433a:	b144      	cbz	r4, 434e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    433c:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    4340:	691b      	ldr	r3, [r3, #16]
    4342:	454b      	cmp	r3, r9
    4344:	d0f2      	beq.n	432c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    4346:	4620      	mov	r0, r4
    4348:	4798      	blx	r3
    434a:	e7f0      	b.n	432e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    434c:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    434e:	fb05 f507 	mul.w	r5, r5, r7
    4352:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4354:	4b17      	ldr	r3, [pc, #92]	; (43b4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    4356:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    4358:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    435a:	d210      	bcs.n	437e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    435c:	b323      	cbz	r3, 43a8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    435e:	4a16      	ldr	r2, [pc, #88]	; (43b8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4360:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    4362:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4366:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    436a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    436e:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    4370:	4638      	mov	r0, r7
    4372:	ea23 0301 	bic.w	r3, r3, r1
    4376:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    4378:	b005      	add	sp, #20
    437a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    437e:	fb08 f707 	mul.w	r7, r8, r7
    4382:	fbb7 f0f5 	udiv	r0, r7, r5
    4386:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    4388:	b173      	cbz	r3, 43a8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    438a:	4a0b      	ldr	r2, [pc, #44]	; (43b8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    438c:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    438e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    4392:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    4396:	f89d 100c 	ldrb.w	r1, [sp, #12]
    439a:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    439c:	4638      	mov	r0, r7
    439e:	430b      	orrs	r3, r1
    43a0:	7013      	strb	r3, [r2, #0]
}
    43a2:	b005      	add	sp, #20
    43a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    43a8:	4638      	mov	r0, r7
}
    43aa:	b005      	add	sp, #20
    43ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    43b0:	1fff9718 	.word	0x1fff9718
    43b4:	1fff972c 	.word	0x1fff972c
    43b8:	00008498 	.word	0x00008498
    43bc:	0000046d 	.word	0x0000046d

000043c0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    43c0:	4b03      	ldr	r3, [pc, #12]	; (43d0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    43c2:	4a04      	ldr	r2, [pc, #16]	; (43d4 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    43c4:	60da      	str	r2, [r3, #12]
    43c6:	fb01 f100 	mul.w	r1, r1, r0
    43ca:	6099      	str	r1, [r3, #8]
    43cc:	4770      	bx	lr
    43ce:	bf00      	nop
    43d0:	1fff9708 	.word	0x1fff9708
    43d4:	00004315 	.word	0x00004315

000043d8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43d8:	4807      	ldr	r0, [pc, #28]	; (43f8 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    43da:	b082      	sub	sp, #8
    43dc:	6803      	ldr	r3, [r0, #0]
    43de:	9301      	str	r3, [sp, #4]
	return ret;
    43e0:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    43e2:	4411      	add	r1, r2
    43e4:	e001      	b.n	43ea <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    43e6:	4299      	cmp	r1, r3
    43e8:	d304      	bcc.n	43f4 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43ea:	6803      	ldr	r3, [r0, #0]
    43ec:	9300      	str	r3, [sp, #0]
	return ret;
    43ee:	9b00      	ldr	r3, [sp, #0]
    43f0:	429a      	cmp	r2, r3
    43f2:	d9f8      	bls.n	43e6 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    43f4:	b002      	add	sp, #8
    43f6:	4770      	bx	lr
    43f8:	1fff9780 	.word	0x1fff9780

000043fc <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    43fc:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43fe:	4a10      	ldr	r2, [pc, #64]	; (4440 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    4400:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    4402:	b9a1      	cbnz	r1, 442e <VisualMicroDebug::outPacketStart(bool)+0x32>
    4404:	6813      	ldr	r3, [r2, #0]
    4406:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    4408:	6841      	ldr	r1, [r0, #4]
	return ret;
    440a:	9b00      	ldr	r3, [sp, #0]
    440c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    440e:	2931      	cmp	r1, #49	; 0x31
    4410:	d80d      	bhi.n	442e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4412:	6813      	ldr	r3, [r2, #0]
    4414:	9302      	str	r3, [sp, #8]
	return ret;
    4416:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4418:	f104 0332 	add.w	r3, r4, #50	; 0x32
    441c:	1a59      	subs	r1, r3, r1
    441e:	e001      	b.n	4424 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4420:	4299      	cmp	r1, r3
    4422:	d304      	bcc.n	442e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4424:	6813      	ldr	r3, [r2, #0]
    4426:	9301      	str	r3, [sp, #4]
	return ret;
    4428:	9b01      	ldr	r3, [sp, #4]
    442a:	429c      	cmp	r4, r3
    442c:	d9f8      	bls.n	4420 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    442e:	6813      	ldr	r3, [r2, #0]
    4430:	9303      	str	r3, [sp, #12]
	return ret;
    4432:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4434:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    4436:	2001      	movs	r0, #1
    4438:	b005      	add	sp, #20
    443a:	bc10      	pop	{r4}
    443c:	4770      	bx	lr
    443e:	bf00      	nop
    4440:	1fff9780 	.word	0x1fff9780

00004444 <VisualMicroDebug::outPacketEnd()>:
    4444:	4770      	bx	lr
    4446:	bf00      	nop

00004448 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    4448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    444c:	f000 bb1a 	b.w	4a84 <delay>

00004450 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    4450:	2300      	movs	r3, #0
    4452:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    4454:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    4456:	b171      	cbz	r1, 4476 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4458:	4807      	ldr	r0, [pc, #28]	; (4478 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    445a:	b082      	sub	sp, #8
    445c:	6803      	ldr	r3, [r0, #0]
    445e:	9301      	str	r3, [sp, #4]
	return ret;
    4460:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    4462:	4411      	add	r1, r2
    4464:	e001      	b.n	446a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    4466:	4299      	cmp	r1, r3
    4468:	d304      	bcc.n	4474 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    446a:	6803      	ldr	r3, [r0, #0]
    446c:	9300      	str	r3, [sp, #0]
	return ret;
    446e:	9b00      	ldr	r3, [sp, #0]
    4470:	429a      	cmp	r2, r3
    4472:	d9f8      	bls.n	4466 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    4474:	b002      	add	sp, #8
    4476:	4770      	bx	lr
    4478:	1fff9780 	.word	0x1fff9780

0000447c <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    447c:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    447e:	4c13      	ldr	r4, [pc, #76]	; (44cc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    4480:	b085      	sub	sp, #20
    4482:	6823      	ldr	r3, [r4, #0]
    4484:	9303      	str	r3, [sp, #12]
	return ret;
    4486:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    4488:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    448a:	460d      	mov	r5, r1
    448c:	4810      	ldr	r0, [pc, #64]	; (44d0 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    448e:	2106      	movs	r1, #6
    4490:	f001 fb10 	bl	5ab4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4494:	2300      	movs	r3, #0
    4496:	220a      	movs	r2, #10
    4498:	4629      	mov	r1, r5
    449a:	480e      	ldr	r0, [pc, #56]	; (44d4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    449c:	f001 fd1e 	bl	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    44a0:	2106      	movs	r1, #6
    44a2:	480d      	ldr	r0, [pc, #52]	; (44d8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    44a4:	f001 fb06 	bl	5ab4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    44a8:	480a      	ldr	r0, [pc, #40]	; (44d4 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    44aa:	f001 fd07 	bl	5ebc <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44ae:	6823      	ldr	r3, [r4, #0]
    44b0:	9302      	str	r3, [sp, #8]
	return ret;
    44b2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    44b4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    44b8:	e001      	b.n	44be <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    44ba:	4299      	cmp	r1, r3
    44bc:	d304      	bcc.n	44c8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    44be:	6823      	ldr	r3, [r4, #0]
    44c0:	9301      	str	r3, [sp, #4]
	return ret;
    44c2:	9b01      	ldr	r3, [sp, #4]
    44c4:	429a      	cmp	r2, r3
    44c6:	d9f8      	bls.n	44ba <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    44c8:	b005      	add	sp, #20
    44ca:	bd30      	pop	{r4, r5, pc}
    44cc:	1fff9780 	.word	0x1fff9780
    44d0:	00008414 	.word	0x00008414
    44d4:	1fff8738 	.word	0x1fff8738
    44d8:	0000841c 	.word	0x0000841c

000044dc <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    44dc:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    44de:	7e03      	ldrb	r3, [r0, #24]
    44e0:	b90b      	cbnz	r3, 44e6 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    44e2:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    44e4:	bd38      	pop	{r3, r4, r5, pc}
    44e6:	460d      	mov	r5, r1
    44e8:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    44ea:	f001 fab9 	bl	5a60 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    44ee:	f010 0fff 	tst.w	r0, #255	; 0xff
    44f2:	d101      	bne.n	44f8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    44f4:	2065      	movs	r0, #101	; 0x65
    44f6:	bd38      	pop	{r3, r4, r5, pc}
    44f8:	f001 fab2 	bl	5a60 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    44fc:	f010 0fff 	tst.w	r0, #255	; 0xff
    4500:	d0f8      	beq.n	44f4 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    4502:	f001 fa71 	bl	59e8 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    4506:	b2c0      	uxtb	r0, r0
    4508:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    450c:	2b1e      	cmp	r3, #30
    450e:	d8f3      	bhi.n	44f8 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    4510:	a201      	add	r2, pc, #4	; (adr r2, 4518 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    4512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4516:	bf00      	nop
    4518:	000045a1 	.word	0x000045a1
    451c:	000044f9 	.word	0x000044f9
    4520:	000044f9 	.word	0x000044f9
    4524:	000044f9 	.word	0x000044f9
    4528:	000044f9 	.word	0x000044f9
    452c:	000044f9 	.word	0x000044f9
    4530:	000044f9 	.word	0x000044f9
    4534:	000044f9 	.word	0x000044f9
    4538:	000044f9 	.word	0x000044f9
    453c:	000044f9 	.word	0x000044f9
    4540:	000044f9 	.word	0x000044f9
    4544:	00004595 	.word	0x00004595
    4548:	000044f9 	.word	0x000044f9
    454c:	000044f9 	.word	0x000044f9
    4550:	000044f9 	.word	0x000044f9
    4554:	000044f9 	.word	0x000044f9
    4558:	000044e3 	.word	0x000044e3
    455c:	000044f9 	.word	0x000044f9
    4560:	000044f9 	.word	0x000044f9
    4564:	000044f9 	.word	0x000044f9
    4568:	000044f9 	.word	0x000044f9
    456c:	000044f9 	.word	0x000044f9
    4570:	000044f9 	.word	0x000044f9
    4574:	000044f9 	.word	0x000044f9
    4578:	000044f9 	.word	0x000044f9
    457c:	000044e3 	.word	0x000044e3
    4580:	000044f9 	.word	0x000044f9
    4584:	000044f9 	.word	0x000044f9
    4588:	000044f9 	.word	0x000044f9
    458c:	000044f9 	.word	0x000044f9
    4590:	000044e5 	.word	0x000044e5
		{

		case 'c':
			sendContinuedACK(breakPointId);
    4594:	4620      	mov	r0, r4
    4596:	4629      	mov	r1, r5
    4598:	f7ff ff70 	bl	447c <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    459c:	2063      	movs	r0, #99	; 0x63
    459e:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    45a0:	2300      	movs	r3, #0
    45a2:	7623      	strb	r3, [r4, #24]
			return 'c';
    45a4:	2063      	movs	r0, #99	; 0x63
    45a6:	bd38      	pop	{r3, r4, r5, pc}

000045a8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	4605      	mov	r5, r0
    45ac:	b082      	sub	sp, #8
    45ae:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    45b0:	b1c9      	cbz	r1, 45e6 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    45b2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45b4:	4c0d      	ldr	r4, [pc, #52]	; (45ec <VisualMicroDebug::start(bool, bool)+0x44>)
    45b6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    45b8:	2100      	movs	r1, #0
    45ba:	4628      	mov	r0, r5
    45bc:	f7ff ff8e 	bl	44dc <VisualMicroDebug::breakWait(unsigned char)>
    45c0:	2863      	cmp	r0, #99	; 0x63
    45c2:	d010      	beq.n	45e6 <VisualMicroDebug::start(bool, bool)+0x3e>
    45c4:	6823      	ldr	r3, [r4, #0]
    45c6:	9301      	str	r3, [sp, #4]
	return ret;
    45c8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    45ca:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    45cc:	6823      	ldr	r3, [r4, #0]
    45ce:	9300      	str	r3, [sp, #0]
	return ret;
    45d0:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    45d2:	429a      	cmp	r2, r3
    45d4:	d8f0      	bhi.n	45b8 <VisualMicroDebug::start(bool, bool)+0x10>
    45d6:	4299      	cmp	r1, r3
    45d8:	d2f8      	bcs.n	45cc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    45da:	2100      	movs	r1, #0
    45dc:	4628      	mov	r0, r5
    45de:	f7ff ff7d 	bl	44dc <VisualMicroDebug::breakWait(unsigned char)>
    45e2:	2863      	cmp	r0, #99	; 0x63
    45e4:	d1ee      	bne.n	45c4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    45e6:	762e      	strb	r6, [r5, #24]
#endif

}
    45e8:	b002      	add	sp, #8
    45ea:	bd70      	pop	{r4, r5, r6, pc}
    45ec:	1fff9780 	.word	0x1fff9780

000045f0 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    45f0:	4b03      	ldr	r3, [pc, #12]	; (4600 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    45f2:	2200      	movs	r2, #0
    45f4:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    45f6:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    45f8:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    45fa:	615a      	str	r2, [r3, #20]
    45fc:	4770      	bx	lr
    45fe:	bf00      	nop
    4600:	1fff9730 	.word	0x1fff9730

00004604 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    4604:	4a37      	ldr	r2, [pc, #220]	; (46e4 <wait_for_cal+0xe0>)
    4606:	4938      	ldr	r1, [pc, #224]	; (46e8 <wait_for_cal+0xe4>)
    4608:	6813      	ldr	r3, [r2, #0]
    460a:	061b      	lsls	r3, r3, #24
    460c:	d4fc      	bmi.n	4608 <wait_for_cal+0x4>
    460e:	680b      	ldr	r3, [r1, #0]
    4610:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    4614:	d1f8      	bne.n	4608 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    4616:	b672      	cpsid	i
	if (calibrating) {
    4618:	4934      	ldr	r1, [pc, #208]	; (46ec <wait_for_cal+0xe8>)
    461a:	780a      	ldrb	r2, [r1, #0]
    461c:	2a00      	cmp	r2, #0
    461e:	d05f      	beq.n	46e0 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4620:	4a33      	ldr	r2, [pc, #204]	; (46f0 <wait_for_cal+0xec>)
    4622:	4834      	ldr	r0, [pc, #208]	; (46f4 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    4624:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4626:	4c34      	ldr	r4, [pc, #208]	; (46f8 <wait_for_cal+0xf4>)
    4628:	6817      	ldr	r7, [r2, #0]
    462a:	6806      	ldr	r6, [r0, #0]
    462c:	6825      	ldr	r5, [r4, #0]
    462e:	68d4      	ldr	r4, [r2, #12]
    4630:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4632:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    4634:	3214      	adds	r2, #20
    4636:	6800      	ldr	r0, [r0, #0]
    4638:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    463a:	4f30      	ldr	r7, [pc, #192]	; (46fc <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    463c:	4435      	add	r5, r6
    463e:	442c      	add	r4, r5
    4640:	4420      	add	r0, r4
    4642:	4402      	add	r2, r0
    4644:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4648:	4e2d      	ldr	r6, [pc, #180]	; (4700 <wait_for_cal+0xfc>)
    464a:	482e      	ldr	r0, [pc, #184]	; (4704 <wait_for_cal+0x100>)
    464c:	4d2e      	ldr	r5, [pc, #184]	; (4708 <wait_for_cal+0x104>)
    464e:	4c2f      	ldr	r4, [pc, #188]	; (470c <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    4650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4654:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4656:	6837      	ldr	r7, [r6, #0]
    4658:	6806      	ldr	r6, [r0, #0]
    465a:	682d      	ldr	r5, [r5, #0]
    465c:	4a2c      	ldr	r2, [pc, #176]	; (4710 <wait_for_cal+0x10c>)
    465e:	6824      	ldr	r4, [r4, #0]
    4660:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4662:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    4664:	6800      	ldr	r0, [r0, #0]
    4666:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    4668:	4f2a      	ldr	r7, [pc, #168]	; (4714 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    466a:	4435      	add	r5, r6
    466c:	442c      	add	r4, r5
    466e:	4420      	add	r0, r4
    4670:	4402      	add	r2, r0
    4672:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4676:	4e28      	ldr	r6, [pc, #160]	; (4718 <wait_for_cal+0x114>)
    4678:	4828      	ldr	r0, [pc, #160]	; (471c <wait_for_cal+0x118>)
    467a:	4d29      	ldr	r5, [pc, #164]	; (4720 <wait_for_cal+0x11c>)
    467c:	4c29      	ldr	r4, [pc, #164]	; (4724 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    467e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    4682:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4684:	6837      	ldr	r7, [r6, #0]
    4686:	6806      	ldr	r6, [r0, #0]
    4688:	682d      	ldr	r5, [r5, #0]
    468a:	4a27      	ldr	r2, [pc, #156]	; (4728 <wait_for_cal+0x124>)
    468c:	6824      	ldr	r4, [r4, #0]
    468e:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    4690:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    4692:	6800      	ldr	r0, [r0, #0]
    4694:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    4696:	4f25      	ldr	r7, [pc, #148]	; (472c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    4698:	4435      	add	r5, r6
    469a:	442c      	add	r4, r5
    469c:	4420      	add	r0, r4
    469e:	4402      	add	r2, r0
    46a0:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    46a4:	4e22      	ldr	r6, [pc, #136]	; (4730 <wait_for_cal+0x12c>)
    46a6:	4823      	ldr	r0, [pc, #140]	; (4734 <wait_for_cal+0x130>)
    46a8:	4d23      	ldr	r5, [pc, #140]	; (4738 <wait_for_cal+0x134>)
    46aa:	4c24      	ldr	r4, [pc, #144]	; (473c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    46ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    46b0:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    46b2:	6837      	ldr	r7, [r6, #0]
    46b4:	6806      	ldr	r6, [r0, #0]
    46b6:	682d      	ldr	r5, [r5, #0]
    46b8:	4a21      	ldr	r2, [pc, #132]	; (4740 <wait_for_cal+0x13c>)
    46ba:	6824      	ldr	r4, [r4, #0]
    46bc:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    46be:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    46c0:	6800      	ldr	r0, [r0, #0]
    46c2:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    46c4:	4435      	add	r5, r6
    46c6:	442c      	add	r4, r5
    46c8:	4420      	add	r0, r4
    46ca:	4402      	add	r2, r0
    46cc:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    46d0:	481c      	ldr	r0, [pc, #112]	; (4744 <wait_for_cal+0x140>)
    46d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    46d6:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    46d8:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    46da:	b662      	cpsie	i
}
    46dc:	bcf0      	pop	{r4, r5, r6, r7}
    46de:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    46e0:	b662      	cpsie	i
    46e2:	4770      	bx	lr
    46e4:	4003b024 	.word	0x4003b024
    46e8:	400bb024 	.word	0x400bb024
    46ec:	1fff9779 	.word	0x1fff9779
    46f0:	4003b038 	.word	0x4003b038
    46f4:	4003b03c 	.word	0x4003b03c
    46f8:	4003b040 	.word	0x4003b040
    46fc:	4003b02c 	.word	0x4003b02c
    4700:	4003b058 	.word	0x4003b058
    4704:	4003b05c 	.word	0x4003b05c
    4708:	4003b060 	.word	0x4003b060
    470c:	4003b064 	.word	0x4003b064
    4710:	4003b06c 	.word	0x4003b06c
    4714:	4003b030 	.word	0x4003b030
    4718:	400bb038 	.word	0x400bb038
    471c:	400bb03c 	.word	0x400bb03c
    4720:	400bb040 	.word	0x400bb040
    4724:	400bb044 	.word	0x400bb044
    4728:	400bb04c 	.word	0x400bb04c
    472c:	400bb02c 	.word	0x400bb02c
    4730:	400bb058 	.word	0x400bb058
    4734:	400bb05c 	.word	0x400bb05c
    4738:	400bb060 	.word	0x400bb060
    473c:	400bb064 	.word	0x400bb064
    4740:	400bb06c 	.word	0x400bb06c
    4744:	400bb030 	.word	0x400bb030

00004748 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    4748:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    474a:	4829      	ldr	r0, [pc, #164]	; (47f0 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    474c:	4a29      	ldr	r2, [pc, #164]	; (47f4 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    474e:	4b2a      	ldr	r3, [pc, #168]	; (47f8 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    4750:	4d2a      	ldr	r5, [pc, #168]	; (47fc <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4752:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4754:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    4756:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    4758:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    475a:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    475c:	4c28      	ldr	r4, [pc, #160]	; (4800 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    475e:	2b08      	cmp	r3, #8
    4760:	d030      	beq.n	47c4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4762:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    4764:	4827      	ldr	r0, [pc, #156]	; (4804 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    4766:	4928      	ldr	r1, [pc, #160]	; (4808 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    4768:	d037      	beq.n	47da <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    476a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    476c:	bf0c      	ite	eq
    476e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4770:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4772:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4774:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    4776:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    4778:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    477a:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    477c:	4b23      	ldr	r3, [pc, #140]	; (480c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    477e:	4924      	ldr	r1, [pc, #144]	; (4810 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4780:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4782:	4a24      	ldr	r2, [pc, #144]	; (4814 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    4784:	b1bb      	cbz	r3, 47b6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    4786:	2301      	movs	r3, #1
    4788:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    478a:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    478c:	4b22      	ldr	r3, [pc, #136]	; (4818 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    478e:	4923      	ldr	r1, [pc, #140]	; (481c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    4790:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    4792:	4a23      	ldr	r2, [pc, #140]	; (4820 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    4794:	2b01      	cmp	r3, #1
    4796:	d926      	bls.n	47e6 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    4798:	2b04      	cmp	r3, #4
    479a:	d90f      	bls.n	47bc <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    479c:	2b08      	cmp	r3, #8
    479e:	d91e      	bls.n	47de <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    47a0:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    47a2:	bf94      	ite	ls
    47a4:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    47a6:	2387      	movhi	r3, #135	; 0x87
    47a8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    47aa:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    47ac:	4b1d      	ldr	r3, [pc, #116]	; (4824 <analog_init+0xdc>)
    47ae:	2201      	movs	r2, #1
    47b0:	701a      	strb	r2, [r3, #0]
}
    47b2:	bc30      	pop	{r4, r5}
    47b4:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    47b6:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    47b8:	6013      	str	r3, [r2, #0]
    47ba:	e7e7      	b.n	478c <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    47bc:	2384      	movs	r3, #132	; 0x84
    47be:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    47c0:	6013      	str	r3, [r2, #0]
    47c2:	e7f3      	b.n	47ac <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    47c4:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    47c8:	490f      	ldr	r1, [pc, #60]	; (4808 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    47ca:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    47cc:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    47ce:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    47d0:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    47d2:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    47d4:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    47d6:	600b      	str	r3, [r1, #0]
    47d8:	e7d0      	b.n	477c <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    47da:	2239      	movs	r2, #57	; 0x39
    47dc:	e7f7      	b.n	47ce <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    47de:	2385      	movs	r3, #133	; 0x85
    47e0:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    47e2:	6013      	str	r3, [r2, #0]
    47e4:	e7e2      	b.n	47ac <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    47e6:	2380      	movs	r3, #128	; 0x80
    47e8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    47ea:	6013      	str	r3, [r2, #0]
    47ec:	e7de      	b.n	47ac <analog_init+0x64>
    47ee:	bf00      	nop
    47f0:	40074000 	.word	0x40074000
    47f4:	40074001 	.word	0x40074001
    47f8:	1fff8730 	.word	0x1fff8730
    47fc:	4003b008 	.word	0x4003b008
    4800:	4003b00c 	.word	0x4003b00c
    4804:	400bb008 	.word	0x400bb008
    4808:	400bb00c 	.word	0x400bb00c
    480c:	1fff977c 	.word	0x1fff977c
    4810:	4003b020 	.word	0x4003b020
    4814:	400bb020 	.word	0x400bb020
    4818:	1fff8731 	.word	0x1fff8731
    481c:	4003b024 	.word	0x4003b024
    4820:	400bb024 	.word	0x400bb024
    4824:	1fff9779 	.word	0x1fff9779

00004828 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4828:	2828      	cmp	r0, #40	; 0x28
    482a:	d82f      	bhi.n	488c <analogRead+0x64>
	channel = pin2sc1a[pin];
    482c:	4b33      	ldr	r3, [pc, #204]	; (48fc <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    4832:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    4834:	2eff      	cmp	r6, #255	; 0xff
    4836:	d02b      	beq.n	4890 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    4838:	4b31      	ldr	r3, [pc, #196]	; (4900 <analogRead+0xd8>)
    483a:	781b      	ldrb	r3, [r3, #0]
    483c:	2b00      	cmp	r3, #0
    483e:	d12a      	bne.n	4896 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    4840:	0632      	lsls	r2, r6, #24
    4842:	d42c      	bmi.n	489e <analogRead+0x76>
#endif

	__disable_irq();
    4844:	b672      	cpsid	i
    4846:	4d2f      	ldr	r5, [pc, #188]	; (4904 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    4848:	4c2f      	ldr	r4, [pc, #188]	; (4908 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    484a:	462f      	mov	r7, r5
    484c:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    484e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    4850:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    4852:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    4854:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4856:	6823      	ldr	r3, [r4, #0]
    4858:	061b      	lsls	r3, r3, #24
    485a:	d40c      	bmi.n	4876 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    485c:	783b      	ldrb	r3, [r7, #0]
    485e:	b91b      	cbnz	r3, 4868 <analogRead+0x40>
    4860:	e7f4      	b.n	484c <analogRead+0x24>
    4862:	782b      	ldrb	r3, [r5, #0]
    4864:	2b00      	cmp	r3, #0
    4866:	d0f1      	beq.n	484c <analogRead+0x24>
		__enable_irq();
    4868:	b662      	cpsie	i
		yield();
    486a:	f001 fb97 	bl	5f9c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    486e:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    4870:	6823      	ldr	r3, [r4, #0]
    4872:	0618      	lsls	r0, r3, #24
    4874:	d5f5      	bpl.n	4862 <analogRead+0x3a>
			result = ADC0_RA;
    4876:	4b25      	ldr	r3, [pc, #148]	; (490c <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    4878:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    487a:	2200      	movs	r2, #0
    487c:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    487e:	b662      	cpsie	i
			result >>= analog_right_shift;
    4880:	4a23      	ldr	r2, [pc, #140]	; (4910 <analogRead+0xe8>)
    4882:	7810      	ldrb	r0, [r2, #0]
    4884:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    4888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    488c:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    488e:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    4890:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    4892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    4896:	f7ff feb5 	bl	4604 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    489a:	0632      	lsls	r2, r6, #24
    489c:	d5d2      	bpl.n	4844 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    489e:	b672      	cpsid	i
    48a0:	4d1c      	ldr	r5, [pc, #112]	; (4914 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    48a2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4920 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    48a6:	4c1c      	ldr	r4, [pc, #112]	; (4918 <analogRead+0xf0>)
    48a8:	f006 0740 	and.w	r7, r6, #64	; 0x40
    48ac:	b2ff      	uxtb	r7, r7
    48ae:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    48b2:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    48b6:	b1df      	cbz	r7, 48f0 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    48b8:	f023 0310 	bic.w	r3, r3, #16
    48bc:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    48c0:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    48c2:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    48c4:	4a13      	ldr	r2, [pc, #76]	; (4914 <analogRead+0xec>)
    48c6:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    48c8:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    48ca:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    48cc:	6823      	ldr	r3, [r4, #0]
    48ce:	0619      	lsls	r1, r3, #24
    48d0:	d40c      	bmi.n	48ec <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    48d2:	7813      	ldrb	r3, [r2, #0]
    48d4:	b91b      	cbnz	r3, 48de <analogRead+0xb6>
    48d6:	e7ec      	b.n	48b2 <analogRead+0x8a>
    48d8:	782b      	ldrb	r3, [r5, #0]
    48da:	2b00      	cmp	r3, #0
    48dc:	d0e9      	beq.n	48b2 <analogRead+0x8a>
		__enable_irq();
    48de:	b662      	cpsie	i
		yield();
    48e0:	f001 fb5c 	bl	5f9c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    48e4:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    48e6:	6823      	ldr	r3, [r4, #0]
    48e8:	061b      	lsls	r3, r3, #24
    48ea:	d5f5      	bpl.n	48d8 <analogRead+0xb0>
			result = ADC1_RA;
    48ec:	4b0b      	ldr	r3, [pc, #44]	; (491c <analogRead+0xf4>)
    48ee:	e7c3      	b.n	4878 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    48f0:	f043 0310 	orr.w	r3, r3, #16
    48f4:	f8c8 3000 	str.w	r3, [r8]
    48f8:	e7e2      	b.n	48c0 <analogRead+0x98>
    48fa:	bf00      	nop
    48fc:	0000846c 	.word	0x0000846c
    4900:	1fff9779 	.word	0x1fff9779
    4904:	1fff977b 	.word	0x1fff977b
    4908:	4003b000 	.word	0x4003b000
    490c:	4003b010 	.word	0x4003b010
    4910:	1fff9778 	.word	0x1fff9778
    4914:	1fff977a 	.word	0x1fff977a
    4918:	400bb000 	.word	0x400bb000
    491c:	400bb010 	.word	0x400bb010
    4920:	400bb00c 	.word	0x400bb00c

00004924 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    4924:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    4926:	4c10      	ldr	r4, [pc, #64]	; (4968 <fault_isr+0x44>)
    4928:	e008      	b.n	493c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    492a:	6823      	ldr	r3, [r4, #0]
    492c:	0559      	lsls	r1, r3, #21
    492e:	d40d      	bmi.n	494c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4930:	6823      	ldr	r3, [r4, #0]
    4932:	051a      	lsls	r2, r3, #20
    4934:	d40f      	bmi.n	4956 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    4936:	6823      	ldr	r3, [r4, #0]
    4938:	04db      	lsls	r3, r3, #19
    493a:	d411      	bmi.n	4960 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    493c:	6823      	ldr	r3, [r4, #0]
    493e:	0358      	lsls	r0, r3, #13
    4940:	d5f3      	bpl.n	492a <fault_isr+0x6>
    4942:	f000 fa37 	bl	4db4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    4946:	6823      	ldr	r3, [r4, #0]
    4948:	0559      	lsls	r1, r3, #21
    494a:	d5f1      	bpl.n	4930 <fault_isr+0xc>
    494c:	f001 fbaa 	bl	60a4 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    4950:	6823      	ldr	r3, [r4, #0]
    4952:	051a      	lsls	r2, r3, #20
    4954:	d5ef      	bpl.n	4936 <fault_isr+0x12>
    4956:	f001 fc3b 	bl	61d0 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    495a:	6823      	ldr	r3, [r4, #0]
    495c:	04db      	lsls	r3, r3, #19
    495e:	d5ed      	bpl.n	493c <fault_isr+0x18>
    4960:	f001 fccc 	bl	62fc <uart2_status_isr>
    4964:	e7ea      	b.n	493c <fault_isr+0x18>
    4966:	bf00      	nop
    4968:	40048034 	.word	0x40048034

0000496c <unused_isr>:
	}
}

void unused_isr(void)
{
    496c:	b508      	push	{r3, lr}
	fault_isr();
    496e:	f7ff ffd9 	bl	4924 <fault_isr>
    4972:	bf00      	nop

00004974 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    4974:	4b01      	ldr	r3, [pc, #4]	; (497c <startup_early_hook+0x8>)
    4976:	2210      	movs	r2, #16
    4978:	801a      	strh	r2, [r3, #0]
    497a:	4770      	bx	lr
    497c:	40052000 	.word	0x40052000

00004980 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    4980:	4770      	bx	lr
    4982:	bf00      	nop

00004984 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    4984:	7800      	ldrb	r0, [r0, #0]
}
    4986:	fab0 f080 	clz	r0, r0
    498a:	0940      	lsrs	r0, r0, #5
    498c:	4770      	bx	lr
    498e:	bf00      	nop

00004990 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    4990:	2301      	movs	r3, #1
    4992:	7003      	strb	r3, [r0, #0]
    4994:	4770      	bx	lr
    4996:	bf00      	nop

00004998 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    4998:	4a1c      	ldr	r2, [pc, #112]	; (4a0c <pinMode.part.2+0x74>)
    499a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    499e:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    49a0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    49a2:	d011      	beq.n	49c8 <pinMode.part.2+0x30>
    49a4:	2904      	cmp	r1, #4
    49a6:	d01b      	beq.n	49e0 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    49a8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    49ac:	2200      	movs	r2, #0
    49ae:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    49b2:	b129      	cbz	r1, 49c0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    49b4:	2902      	cmp	r1, #2
    49b6:	d020      	beq.n	49fa <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    49b8:	2903      	cmp	r1, #3
    49ba:	d022      	beq.n	4a02 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    49bc:	601a      	str	r2, [r3, #0]
    49be:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    49c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    49c4:	601a      	str	r2, [r3, #0]
    49c6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    49c8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    49cc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    49d0:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    49d4:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    49d6:	681a      	ldr	r2, [r3, #0]
    49d8:	f022 0220 	bic.w	r2, r2, #32
    49dc:	601a      	str	r2, [r3, #0]
    49de:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    49e0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    49e4:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    49e8:	2001      	movs	r0, #1
    49ea:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    49ee:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    49f0:	681a      	ldr	r2, [r3, #0]
    49f2:	f042 0220 	orr.w	r2, r2, #32
    49f6:	601a      	str	r2, [r3, #0]
    49f8:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    49fa:	f240 1203 	movw	r2, #259	; 0x103
    49fe:	601a      	str	r2, [r3, #0]
    4a00:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    4a02:	f44f 7281 	mov.w	r2, #258	; 0x102
    4a06:	601a      	str	r2, [r3, #0]
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop
    4a0c:	00008498 	.word	0x00008498

00004a10 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    4a10:	b430      	push	{r4, r5}
	RTC_SR = 0;
    4a12:	4b05      	ldr	r3, [pc, #20]	; (4a28 <rtc_set+0x18>)
	RTC_TPR = 0;
    4a14:	4d05      	ldr	r5, [pc, #20]	; (4a2c <rtc_set+0x1c>)
	RTC_TSR = t;
    4a16:	4c06      	ldr	r4, [pc, #24]	; (4a30 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4a18:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    4a1a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    4a1c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    4a1e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    4a20:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    4a22:	6019      	str	r1, [r3, #0]
}
    4a24:	bc30      	pop	{r4, r5}
    4a26:	4770      	bx	lr
    4a28:	4003d014 	.word	0x4003d014
    4a2c:	4003d004 	.word	0x4003d004
    4a30:	4003d000 	.word	0x4003d000

00004a34 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    4a34:	2821      	cmp	r0, #33	; 0x21
    4a36:	d801      	bhi.n	4a3c <pinMode+0x8>
    4a38:	f7ff bfae 	b.w	4998 <pinMode.part.2>
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop

00004a40 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4a40:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4a42:	490c      	ldr	r1, [pc, #48]	; (4a74 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4a44:	4b0c      	ldr	r3, [pc, #48]	; (4a78 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4a46:	4a0d      	ldr	r2, [pc, #52]	; (4a7c <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4a48:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4a4a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4a4c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4a4e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4a50:	0152      	lsls	r2, r2, #5
    4a52:	d502      	bpl.n	4a5a <micros+0x1a>
    4a54:	2b32      	cmp	r3, #50	; 0x32
    4a56:	bf88      	it	hi
    4a58:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4a5a:	4909      	ldr	r1, [pc, #36]	; (4a80 <micros+0x40>)
    4a5c:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4a64:	33ff      	adds	r3, #255	; 0xff
    4a66:	fba1 1303 	umull	r1, r3, r1, r3
    4a6a:	fb02 f000 	mul.w	r0, r2, r0
}
    4a6e:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    4a72:	4770      	bx	lr
    4a74:	1fff9780 	.word	0x1fff9780
    4a78:	e000e018 	.word	0xe000e018
    4a7c:	e000ed04 	.word	0xe000ed04
    4a80:	aaaaaaab 	.word	0xaaaaaaab

00004a84 <delay>:

void delay(uint32_t ms)
{
    4a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a88:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4a8a:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    4a8c:	4f20      	ldr	r7, [pc, #128]	; (4b10 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4a8e:	4b21      	ldr	r3, [pc, #132]	; (4b14 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4a90:	4a21      	ldr	r2, [pc, #132]	; (4b18 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4a92:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    4a94:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4a96:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    4a98:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4a9a:	0152      	lsls	r2, r2, #5
    4a9c:	d502      	bpl.n	4aa4 <delay+0x20>
    4a9e:	2b32      	cmp	r3, #50	; 0x32
    4aa0:	bf88      	it	hi
    4aa2:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    4aa4:	b395      	cbz	r5, 4b0c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4aa6:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    4aaa:	4e1c      	ldr	r6, [pc, #112]	; (4b1c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    4aac:	f8df 9064 	ldr.w	r9, [pc, #100]	; 4b14 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4ab0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 4b18 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    4ab4:	33ff      	adds	r3, #255	; 0xff
    4ab6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4aba:	fba6 1303 	umull	r1, r3, r6, r3
    4abe:	fb02 f404 	mul.w	r4, r2, r4
    4ac2:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    4ac6:	b672      	cpsid	i
	current = SYST_CVR;
    4ac8:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    4acc:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    4ace:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    4ad2:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4ad4:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    4ad8:	33ff      	adds	r3, #255	; 0xff
    4ada:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4ade:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4ae2:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    4ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    4aea:	d002      	beq.n	4af2 <delay+0x6e>
    4aec:	2932      	cmp	r1, #50	; 0x32
    4aee:	bf88      	it	hi
    4af0:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    4af2:	fb00 3302 	mla	r3, r0, r2, r3
    4af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    4afa:	d304      	bcc.n	4b06 <delay+0x82>
				ms--;
				if (ms == 0) return;
    4afc:	3d01      	subs	r5, #1
    4afe:	d005      	beq.n	4b0c <delay+0x88>
				start += 1000;
    4b00:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    4b04:	e7df      	b.n	4ac6 <delay+0x42>
			}
			yield();
    4b06:	f001 fa49 	bl	5f9c <yield>
		}
    4b0a:	e7dc      	b.n	4ac6 <delay+0x42>
    4b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b10:	1fff9780 	.word	0x1fff9780
    4b14:	e000e018 	.word	0xe000e018
    4b18:	e000ed04 	.word	0xe000ed04
    4b1c:	aaaaaaab 	.word	0xaaaaaaab

00004b20 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    4b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4b22:	4b2d      	ldr	r3, [pc, #180]	; (4bd8 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4b24:	492d      	ldr	r1, [pc, #180]	; (4bdc <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4b26:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 4bf8 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4b2a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 4bfc <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    4b2e:	4e2c      	ldr	r6, [pc, #176]	; (4be0 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    4b30:	4d2c      	ldr	r5, [pc, #176]	; (4be4 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    4b32:	4c2d      	ldr	r4, [pc, #180]	; (4be8 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    4b34:	4a2d      	ldr	r2, [pc, #180]	; (4bec <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    4b36:	4f2e      	ldr	r7, [pc, #184]	; (4bf0 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    4b38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    4b3c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    4b3e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4b42:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    4b44:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4b48:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    4b4a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    4b4e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    4b50:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    4b54:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    4b56:	2000      	movs	r0, #0
    4b58:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4b5a:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    4b5c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    4b60:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    4b64:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    4b68:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    4b6a:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    4b6c:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    4b6e:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    4b70:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    4b72:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    4b74:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4b76:	2209      	movs	r2, #9
    4b78:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    4b7c:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    4b80:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    4b84:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4b88:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    4b8c:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    4b90:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    4b94:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4b96:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4b9a:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4b9e:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    4ba2:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    4ba6:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    4ba8:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4bac:	4811      	ldr	r0, [pc, #68]	; (4bf4 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    4bae:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    4bb0:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    4bb4:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    4bb8:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    4bba:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    4bbc:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    4bbe:	f7ff fdc3 	bl	4748 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    4bc2:	2019      	movs	r0, #25
    4bc4:	f7ff ff5e 	bl	4a84 <delay>
	usb_init();
    4bc8:	f000 fe5c 	bl	5884 <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    4bcc:	f240 1013 	movw	r0, #275	; 0x113
}
    4bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    4bd4:	f7ff bf56 	b.w	4a84 <delay>
    4bd8:	e000e108 	.word	0xe000e108
    4bdc:	40038004 	.word	0x40038004
    4be0:	40038014 	.word	0x40038014
    4be4:	40038024 	.word	0x40038024
    4be8:	4003802c 	.word	0x4003802c
    4bec:	4003801c 	.word	0x4003801c
    4bf0:	40038034 	.word	0x40038034
    4bf4:	400b8000 	.word	0x400b8000
    4bf8:	4003800c 	.word	0x4003800c
    4bfc:	40038008 	.word	0x40038008

00004c00 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    4c00:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4c02:	2b03      	cmp	r3, #3
    4c04:	d814      	bhi.n	4c30 <usb_rx+0x30>
	__disable_irq();
    4c06:	b672      	cpsid	i
	ret = rx_first[endpoint];
    4c08:	490a      	ldr	r1, [pc, #40]	; (4c34 <usb_rx+0x34>)
    4c0a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    4c0e:	b168      	cbz	r0, 4c2c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    4c10:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4c12:	4c09      	ldr	r4, [pc, #36]	; (4c38 <usb_rx+0x38>)
    4c14:	8805      	ldrh	r5, [r0, #0]
    4c16:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    4c1a:	6846      	ldr	r6, [r0, #4]
    4c1c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    4c20:	1b52      	subs	r2, r2, r5
    4c22:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    4c26:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4c28:	bc70      	pop	{r4, r5, r6}
    4c2a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    4c2c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    4c2e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    4c30:	2000      	movs	r0, #0
    4c32:	4770      	bx	lr
    4c34:	1fff97dc 	.word	0x1fff97dc
    4c38:	1fff9a2c 	.word	0x1fff9a2c

00004c3c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    4c3c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4c3e:	2803      	cmp	r0, #3
    4c40:	d80b      	bhi.n	4c5a <usb_tx_packet_count+0x1e>
	__disable_irq();
    4c42:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    4c44:	4b07      	ldr	r3, [pc, #28]	; (4c64 <usb_tx_packet_count+0x28>)
    4c46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4c4a:	b143      	cbz	r3, 4c5e <usb_tx_packet_count+0x22>
    4c4c:	2000      	movs	r0, #0
    4c4e:	685b      	ldr	r3, [r3, #4]
    4c50:	3001      	adds	r0, #1
    4c52:	2b00      	cmp	r3, #0
    4c54:	d1fb      	bne.n	4c4e <usb_tx_packet_count+0x12>
	__enable_irq();
    4c56:	b662      	cpsie	i
	return count;
    4c58:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    4c5a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    4c5c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    4c5e:	4618      	mov	r0, r3
    4c60:	e7f9      	b.n	4c56 <usb_tx_packet_count+0x1a>
    4c62:	bf00      	nop
    4c64:	1fff9830 	.word	0x1fff9830

00004c68 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    4c68:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    4c6a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4c6c:	4a2b      	ldr	r2, [pc, #172]	; (4d1c <usb_rx_memory+0xb4>)
    4c6e:	7813      	ldrb	r3, [r2, #0]
    4c70:	071d      	lsls	r5, r3, #28
    4c72:	d506      	bpl.n	4c82 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4c74:	4b2a      	ldr	r3, [pc, #168]	; (4d20 <usb_rx_memory+0xb8>)
    4c76:	6a19      	ldr	r1, [r3, #32]
    4c78:	2900      	cmp	r1, #0
    4c7a:	d036      	beq.n	4cea <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4c7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    4c7e:	2900      	cmp	r1, #0
    4c80:	d041      	beq.n	4d06 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4c82:	7853      	ldrb	r3, [r2, #1]
    4c84:	071c      	lsls	r4, r3, #28
    4c86:	d506      	bpl.n	4c96 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4c88:	4b25      	ldr	r3, [pc, #148]	; (4d20 <usb_rx_memory+0xb8>)
    4c8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    4c8c:	2900      	cmp	r1, #0
    4c8e:	d03e      	beq.n	4d0e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4c90:	6c99      	ldr	r1, [r3, #72]	; 0x48
    4c92:	2900      	cmp	r1, #0
    4c94:	d039      	beq.n	4d0a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4c96:	7893      	ldrb	r3, [r2, #2]
    4c98:	0719      	lsls	r1, r3, #28
    4c9a:	d505      	bpl.n	4ca8 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4c9c:	4b20      	ldr	r3, [pc, #128]	; (4d20 <usb_rx_memory+0xb8>)
    4c9e:	6e19      	ldr	r1, [r3, #96]	; 0x60
    4ca0:	2900      	cmp	r1, #0
    4ca2:	d036      	beq.n	4d12 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4ca4:	6e99      	ldr	r1, [r3, #104]	; 0x68
    4ca6:	b189      	cbz	r1, 4ccc <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    4ca8:	78d3      	ldrb	r3, [r2, #3]
    4caa:	071b      	lsls	r3, r3, #28
    4cac:	d507      	bpl.n	4cbe <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    4cae:	4b1c      	ldr	r3, [pc, #112]	; (4d20 <usb_rx_memory+0xb8>)
    4cb0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4cb4:	b37a      	cbz	r2, 4d16 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4cb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4cba:	2111      	movs	r1, #17
    4cbc:	b13a      	cbz	r2, 4cce <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    4cbe:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    4cc0:	4b18      	ldr	r3, [pc, #96]	; (4d24 <usb_rx_memory+0xbc>)
    4cc2:	2200      	movs	r2, #0
    4cc4:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    4cc6:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    4cc8:	f000 be68 	b.w	599c <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4ccc:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4cce:	4c15      	ldr	r4, [pc, #84]	; (4d24 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4cd0:	4d15      	ldr	r5, [pc, #84]	; (4d28 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    4cd2:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    4cd4:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4cd8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4cdc:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4cde:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    4ce0:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    4ce2:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4ce4:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    4ce6:	bc30      	pop	{r4, r5}
    4ce8:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4cea:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4cec:	4c0d      	ldr	r4, [pc, #52]	; (4d24 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4cee:	4d0f      	ldr	r5, [pc, #60]	; (4d2c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    4cf0:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    4cf2:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4cf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4cfa:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4cfc:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    4cfe:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    4d00:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    4d02:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    4d04:	e7ef      	b.n	4ce6 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    4d06:	2105      	movs	r1, #5
    4d08:	e7e1      	b.n	4cce <usb_rx_memory+0x66>
    4d0a:	2109      	movs	r1, #9
    4d0c:	e7df      	b.n	4cce <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    4d0e:	2208      	movs	r2, #8
    4d10:	e7ec      	b.n	4cec <usb_rx_memory+0x84>
    4d12:	220c      	movs	r2, #12
    4d14:	e7ea      	b.n	4cec <usb_rx_memory+0x84>
    4d16:	2210      	movs	r2, #16
    4d18:	e7e8      	b.n	4cec <usb_rx_memory+0x84>
    4d1a:	bf00      	nop
    4d1c:	000085d4 	.word	0x000085d4
    4d20:	1fff8000 	.word	0x1fff8000
    4d24:	1fff9859 	.word	0x1fff9859
    4d28:	004000c8 	.word	0x004000c8
    4d2c:	00400088 	.word	0x00400088

00004d30 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    4d30:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    4d32:	2b03      	cmp	r3, #3
    4d34:	d81d      	bhi.n	4d72 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4d36:	4a1b      	ldr	r2, [pc, #108]	; (4da4 <usb_tx+0x74>)
    4d38:	0140      	lsls	r0, r0, #5
    4d3a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    4d3e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    4d40:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    4d42:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    4d44:	4c18      	ldr	r4, [pc, #96]	; (4da8 <usb_tx+0x78>)
    4d46:	5ce2      	ldrb	r2, [r4, r3]
    4d48:	2a03      	cmp	r2, #3
    4d4a:	d81b      	bhi.n	4d84 <usb_tx+0x54>
    4d4c:	e8df f002 	tbb	[pc, r2]
    4d50:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    4d54:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4d56:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    4d58:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4d5a:	f010 0f08 	tst.w	r0, #8
    4d5e:	bf14      	ite	ne
    4d60:	23c8      	movne	r3, #200	; 0xc8
    4d62:	2388      	moveq	r3, #136	; 0x88
    4d64:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4d68:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4d6a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    4d6c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    4d6e:	b662      	cpsie	i
}
    4d70:	bc30      	pop	{r4, r5}
    4d72:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    4d74:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    4d76:	2202      	movs	r2, #2
		break;
    4d78:	e7ed      	b.n	4d56 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    4d7a:	2205      	movs	r2, #5
    4d7c:	e7eb      	b.n	4d56 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    4d7e:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    4d80:	2204      	movs	r2, #4
		break;
    4d82:	e7e8      	b.n	4d56 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    4d84:	4a09      	ldr	r2, [pc, #36]	; (4dac <usb_tx+0x7c>)
    4d86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4d8a:	b138      	cbz	r0, 4d9c <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    4d8c:	4a08      	ldr	r2, [pc, #32]	; (4db0 <usb_tx+0x80>)
    4d8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    4d92:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    4d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    4d98:	b662      	cpsie	i
		return;
    4d9a:	e7e9      	b.n	4d70 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    4d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    4da0:	4a03      	ldr	r2, [pc, #12]	; (4db0 <usb_tx+0x80>)
    4da2:	e7f7      	b.n	4d94 <usb_tx+0x64>
    4da4:	1fff8000 	.word	0x1fff8000
    4da8:	1fff9868 	.word	0x1fff9868
    4dac:	1fff9830 	.word	0x1fff9830
    4db0:	1fff9840 	.word	0x1fff9840

00004db4 <usb_isr>:
}



void usb_isr(void)
{
    4db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4db8:	f8df b30c 	ldr.w	fp, [pc, #780]	; 50c8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    4dbc:	f8df a30c 	ldr.w	sl, [pc, #780]	; 50cc <usb_isr+0x318>
}



void usb_isr(void)
{
    4dc0:	b087      	sub	sp, #28
    4dc2:	e044      	b.n	4e4e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    4dc4:	4fab      	ldr	r7, [pc, #684]	; (5074 <usb_isr+0x2c0>)
    4dc6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    4dca:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4dce:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4dd0:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4dd4:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    4dd8:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    4dda:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    4dde:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4de2:	2b00      	cmp	r3, #0
    4de4:	f040 8102 	bne.w	4fec <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    4de8:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    4dec:	0c1b      	lsrs	r3, r3, #16
    4dee:	b299      	uxth	r1, r3
    4df0:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    4df4:	2b00      	cmp	r3, #0
    4df6:	f000 80f0 	beq.w	4fda <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    4dfa:	4b9f      	ldr	r3, [pc, #636]	; (5078 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    4dfc:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    4e00:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    4e04:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    4e08:	2a00      	cmp	r2, #0
    4e0a:	f000 82c5 	beq.w	5398 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    4e0e:	4d9b      	ldr	r5, [pc, #620]	; (507c <usb_isr+0x2c8>)
    4e10:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    4e14:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    4e16:	4c9a      	ldr	r4, [pc, #616]	; (5080 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    4e18:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    4e1c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    4e20:	4419      	add	r1, r3
    4e22:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    4e26:	f000 fd99 	bl	595c <usb_malloc>
					if (packet) {
    4e2a:	2800      	cmp	r0, #0
    4e2c:	f000 82ad 	beq.w	538a <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    4e30:	4a94      	ldr	r2, [pc, #592]	; (5084 <usb_isr+0x2d0>)
    4e32:	4b95      	ldr	r3, [pc, #596]	; (5088 <usb_isr+0x2d4>)
    4e34:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4e38:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    4e3c:	bf18      	it	ne
    4e3e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    4e40:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    4e44:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    4e48:	2308      	movs	r3, #8
    4e4a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    4e4e:	f89b 4000 	ldrb.w	r4, [fp]
    4e52:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    4e54:	0761      	lsls	r1, r4, #29
    4e56:	d51a      	bpl.n	4e8e <usb_isr+0xda>
		if (usb_configuration) {
    4e58:	4b8c      	ldr	r3, [pc, #560]	; (508c <usb_isr+0x2d8>)
    4e5a:	781b      	ldrb	r3, [r3, #0]
    4e5c:	b1a3      	cbz	r3, 4e88 <usb_isr+0xd4>
			t = usb_reboot_timer;
    4e5e:	498c      	ldr	r1, [pc, #560]	; (5090 <usb_isr+0x2dc>)
    4e60:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4e62:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4e66:	b122      	cbz	r2, 4e72 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    4e68:	3b01      	subs	r3, #1
    4e6a:	b2db      	uxtb	r3, r3
    4e6c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    4e6e:	b903      	cbnz	r3, 4e72 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    4e70:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    4e72:	4988      	ldr	r1, [pc, #544]	; (5094 <usb_isr+0x2e0>)
    4e74:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    4e76:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    4e7a:	b12a      	cbz	r2, 4e88 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    4e7c:	3b01      	subs	r3, #1
    4e7e:	b2db      	uxtb	r3, r3
    4e80:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    4e82:	2b00      	cmp	r3, #0
    4e84:	f000 8257 	beq.w	5336 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    4e88:	2304      	movs	r3, #4
    4e8a:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    4e8e:	f004 0308 	and.w	r3, r4, #8
    4e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    4e96:	2b00      	cmp	r3, #0
    4e98:	f000 80cc 	beq.w	5034 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    4e9c:	f89a 3000 	ldrb.w	r3, [sl]
    4ea0:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    4ea2:	091e      	lsrs	r6, r3, #4
    4ea4:	d18e      	bne.n	4dc4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4ea6:	089c      	lsrs	r4, r3, #2
    4ea8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 5074 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4eac:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    4eb0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4eb4:	f3c2 0283 	ubfx	r2, r2, #2, #4
    4eb8:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    4eba:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    4ebc:	2a0c      	cmp	r2, #12
    4ebe:	f200 8088 	bhi.w	4fd2 <usb_isr+0x21e>
    4ec2:	e8df f002 	tbb	[pc, r2]
    4ec6:	7c7c      	.short	0x7c7c
    4ec8:	86868686 	.word	0x86868686
    4ecc:	86478686 	.word	0x86478686
    4ed0:	8686      	.short	0x8686
    4ed2:	07          	.byte	0x07
    4ed3:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4ed4:	6808      	ldr	r0, [r1, #0]
    4ed6:	4d70      	ldr	r5, [pc, #448]	; (5098 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    4ed8:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4eda:	4f70      	ldr	r7, [pc, #448]	; (509c <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4edc:	4e70      	ldr	r6, [pc, #448]	; (50a0 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    4ede:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4ee0:	b281      	uxth	r1, r0
    4ee2:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4ee6:	4b67      	ldr	r3, [pc, #412]	; (5084 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    4ee8:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4eea:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4eee:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4ef0:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4ef2:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    4ef6:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4ef8:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    4efc:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    4f00:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    4f04:	4c5b      	ldr	r4, [pc, #364]	; (5074 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    4f06:	f200 80e3 	bhi.w	50d0 <usb_isr+0x31c>
    4f0a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    4f0e:	f080 8346 	bcs.w	559e <usb_isr+0x7ea>
    4f12:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    4f16:	f000 82fc 	beq.w	5512 <usb_isr+0x75e>
    4f1a:	f200 828d 	bhi.w	5438 <usb_isr+0x684>
    4f1e:	2980      	cmp	r1, #128	; 0x80
    4f20:	f000 8377 	beq.w	5612 <usb_isr+0x85e>
    4f24:	2982      	cmp	r1, #130	; 0x82
    4f26:	f040 82fa 	bne.w	551e <usb_isr+0x76a>
    4f2a:	88a9      	ldrh	r1, [r5, #4]
    4f2c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    4f30:	2904      	cmp	r1, #4
    4f32:	f200 82f4 	bhi.w	551e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4f36:	485b      	ldr	r0, [pc, #364]	; (50a4 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4f38:	4c5b      	ldr	r4, [pc, #364]	; (50a8 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4f3a:	0089      	lsls	r1, r1, #2
    4f3c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    4f3e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    4f40:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    4f42:	7802      	ldrb	r2, [r0, #0]
    4f44:	0793      	lsls	r3, r2, #30
    4f46:	f140 8458 	bpl.w	57fa <usb_isr+0xa46>
    4f4a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    4f4e:	f04f 0e02 	mov.w	lr, #2
    4f52:	e342      	b.n	55da <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    4f54:	4f51      	ldr	r7, [pc, #324]	; (509c <usb_isr+0x2e8>)
    4f56:	683a      	ldr	r2, [r7, #0]
		if (data) {
    4f58:	b332      	cbz	r2, 4fa8 <usb_isr+0x1f4>
			size = ep0_tx_len;
    4f5a:	4b54      	ldr	r3, [pc, #336]	; (50ac <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f5c:	4e50      	ldr	r6, [pc, #320]	; (50a0 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f5e:	4954      	ldr	r1, [pc, #336]	; (50b0 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    4f60:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f62:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f64:	780d      	ldrb	r5, [r1, #0]
    4f66:	2840      	cmp	r0, #64	; 0x40
    4f68:	4686      	mov	lr, r0
    4f6a:	f045 0802 	orr.w	r8, r5, #2
    4f6e:	bf28      	it	cs
    4f70:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f74:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    4f76:	f084 0401 	eor.w	r4, r4, #1
    4f7a:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4f7c:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f80:	bf0c      	ite	eq
    4f82:	2488      	moveq	r4, #136	; 0x88
    4f84:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f86:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4f8a:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4f8c:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    4f94:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    4f96:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    4f98:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    4f9c:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    4f9e:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    4fa0:	2800      	cmp	r0, #0
    4fa2:	f000 8145 	beq.w	5230 <usb_isr+0x47c>
    4fa6:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    4fa8:	4b3b      	ldr	r3, [pc, #236]	; (5098 <usb_isr+0x2e4>)
    4faa:	881a      	ldrh	r2, [r3, #0]
    4fac:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    4fb0:	d10f      	bne.n	4fd2 <usb_isr+0x21e>
			setup.bRequest = 0;
    4fb2:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4fb4:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    4fb6:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    4fb8:	4b3e      	ldr	r3, [pc, #248]	; (50b4 <usb_isr+0x300>)
    4fba:	701a      	strb	r2, [r3, #0]
    4fbc:	e009      	b.n	4fd2 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    4fbe:	4a36      	ldr	r2, [pc, #216]	; (5098 <usb_isr+0x2e4>)
    4fc0:	8810      	ldrh	r0, [r2, #0]
    4fc2:	f242 0221 	movw	r2, #8225	; 0x2021
    4fc6:	4290      	cmp	r0, r2
    4fc8:	f000 8137 	beq.w	523a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    4fcc:	4a2d      	ldr	r2, [pc, #180]	; (5084 <usb_isr+0x2d0>)
    4fce:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    4fd2:	4a39      	ldr	r2, [pc, #228]	; (50b8 <usb_isr+0x304>)
    4fd4:	2301      	movs	r3, #1
    4fd6:	7013      	strb	r3, [r2, #0]
    4fd8:	e736      	b.n	4e48 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    4fda:	4a2a      	ldr	r2, [pc, #168]	; (5084 <usb_isr+0x2d0>)
    4fdc:	4b2a      	ldr	r3, [pc, #168]	; (5088 <usb_isr+0x2d4>)
    4fde:	f019 0f08 	tst.w	r9, #8
    4fe2:	bf18      	it	ne
    4fe4:	4613      	movne	r3, r2
    4fe6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    4fea:	e72d      	b.n	4e48 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    4fec:	f000 fcd6 	bl	599c <usb_free>
				packet = tx_first[endpoint];
    4ff0:	4a32      	ldr	r2, [pc, #200]	; (50bc <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    4ff2:	4933      	ldr	r1, [pc, #204]	; (50c0 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    4ff4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    4ff8:	2b00      	cmp	r3, #0
    4ffa:	f000 81d1 	beq.w	53a0 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    4ffe:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    5000:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    5002:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    5006:	f103 0208 	add.w	r2, r3, #8
    500a:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    500e:	2c03      	cmp	r4, #3
    5010:	d805      	bhi.n	501e <usb_isr+0x26a>
    5012:	e8df f004 	tbb	[pc, r4]
    5016:	022c      	.short	0x022c
    5018:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    501a:	2202      	movs	r2, #2
    501c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    501e:	881a      	ldrh	r2, [r3, #0]
    5020:	f019 0f08 	tst.w	r9, #8
    5024:	bf0c      	ite	eq
    5026:	2388      	moveq	r3, #136	; 0x88
    5028:	23c8      	movne	r3, #200	; 0xc8
    502a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    502e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    5032:	e709      	b.n	4e48 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    5034:	07e0      	lsls	r0, r4, #31
    5036:	f100 8181 	bmi.w	533c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    503a:	0621      	lsls	r1, r4, #24
    503c:	f100 81f2 	bmi.w	5424 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5040:	07a2      	lsls	r2, r4, #30
    5042:	d506      	bpl.n	5052 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    5044:	4a1f      	ldr	r2, [pc, #124]	; (50c4 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5046:	4920      	ldr	r1, [pc, #128]	; (50c8 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    5048:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    504a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    504c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    504e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    5050:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    5052:	06e3      	lsls	r3, r4, #27
    5054:	d502      	bpl.n	505c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    5056:	4b1c      	ldr	r3, [pc, #112]	; (50c8 <usb_isr+0x314>)
    5058:	2210      	movs	r2, #16
    505a:	701a      	strb	r2, [r3, #0]
	}

}
    505c:	b007      	add	sp, #28
    505e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    5062:	2204      	movs	r2, #4
    5064:	558a      	strb	r2, [r1, r6]
						break;
    5066:	e7da      	b.n	501e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    5068:	2205      	movs	r2, #5
    506a:	558a      	strb	r2, [r1, r6]
						break;
    506c:	e7d7      	b.n	501e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    506e:	2203      	movs	r2, #3
    5070:	558a      	strb	r2, [r1, r6]
						break;
    5072:	e7d4      	b.n	501e <usb_isr+0x26a>
    5074:	1fff8000 	.word	0x1fff8000
    5078:	1fff97dc 	.word	0x1fff97dc
    507c:	1fff9788 	.word	0x1fff9788
    5080:	1fff9a2c 	.word	0x1fff9a2c
    5084:	004000c8 	.word	0x004000c8
    5088:	00400088 	.word	0x00400088
    508c:	1fff9864 	.word	0x1fff9864
    5090:	1fff97ed 	.word	0x1fff97ed
    5094:	1fff986c 	.word	0x1fff986c
    5098:	1fff9850 	.word	0x1fff9850
    509c:	1fff9784 	.word	0x1fff9784
    50a0:	1fff97ec 	.word	0x1fff97ec
    50a4:	400720c0 	.word	0x400720c0
    50a8:	1fff985c 	.word	0x1fff985c
    50ac:	1fff9798 	.word	0x1fff9798
    50b0:	1fff9858 	.word	0x1fff9858
    50b4:	40072098 	.word	0x40072098
    50b8:	40072094 	.word	0x40072094
    50bc:	1fff9830 	.word	0x1fff9830
    50c0:	1fff9868 	.word	0x1fff9868
    50c4:	40072088 	.word	0x40072088
    50c8:	40072080 	.word	0x40072080
    50cc:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    50d0:	f242 0021 	movw	r0, #8225	; 0x2021
    50d4:	4281      	cmp	r1, r0
    50d6:	f000 812a 	beq.w	532e <usb_isr+0x57a>
    50da:	f200 80d8 	bhi.w	528e <usb_isr+0x4da>
    50de:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    50e2:	f000 8276 	beq.w	55d2 <usb_isr+0x81e>
    50e6:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    50ea:	f040 8218 	bne.w	551e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    50ee:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    50f0:	49b3      	ldr	r1, [pc, #716]	; (53c0 <usb_isr+0x60c>)
    50f2:	78a8      	ldrb	r0, [r5, #2]
    50f4:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    50f6:	0612      	lsls	r2, r2, #24
    50f8:	f100 833a 	bmi.w	5770 <usb_isr+0x9bc>
    50fc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    5100:	49b0      	ldr	r1, [pc, #704]	; (53c4 <usb_isr+0x610>)
    5102:	0613      	lsls	r3, r2, #24
    5104:	f100 830c 	bmi.w	5720 <usb_isr+0x96c>
    5108:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    510c:	49ad      	ldr	r1, [pc, #692]	; (53c4 <usb_isr+0x610>)
    510e:	0615      	lsls	r5, r2, #24
    5110:	f100 8301 	bmi.w	5716 <usb_isr+0x962>
    5114:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    5118:	49aa      	ldr	r1, [pc, #680]	; (53c4 <usb_isr+0x610>)
    511a:	0614      	lsls	r4, r2, #24
    511c:	f100 82f6 	bmi.w	570c <usb_isr+0x958>
    5120:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    5124:	49a7      	ldr	r1, [pc, #668]	; (53c4 <usb_isr+0x610>)
    5126:	0610      	lsls	r0, r2, #24
    5128:	f100 834a 	bmi.w	57c0 <usb_isr+0xa0c>
    512c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    5130:	49a4      	ldr	r1, [pc, #656]	; (53c4 <usb_isr+0x610>)
    5132:	0612      	lsls	r2, r2, #24
    5134:	f100 833f 	bmi.w	57b6 <usb_isr+0xa02>
    5138:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    513c:	49a1      	ldr	r1, [pc, #644]	; (53c4 <usb_isr+0x610>)
    513e:	0613      	lsls	r3, r2, #24
    5140:	f100 8334 	bmi.w	57ac <usb_isr+0x9f8>
    5144:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    5148:	499e      	ldr	r1, [pc, #632]	; (53c4 <usb_isr+0x610>)
    514a:	0615      	lsls	r5, r2, #24
    514c:	f100 8329 	bmi.w	57a2 <usb_isr+0x9ee>
    5150:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    5154:	499b      	ldr	r1, [pc, #620]	; (53c4 <usb_isr+0x610>)
    5156:	0614      	lsls	r4, r2, #24
    5158:	f100 831e 	bmi.w	5798 <usb_isr+0x9e4>
    515c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    5160:	4998      	ldr	r1, [pc, #608]	; (53c4 <usb_isr+0x610>)
    5162:	0610      	lsls	r0, r2, #24
    5164:	f100 8313 	bmi.w	578e <usb_isr+0x9da>
    5168:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    516c:	4995      	ldr	r1, [pc, #596]	; (53c4 <usb_isr+0x610>)
    516e:	0612      	lsls	r2, r2, #24
    5170:	f100 8308 	bmi.w	5784 <usb_isr+0x9d0>
    5174:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    5178:	4992      	ldr	r1, [pc, #584]	; (53c4 <usb_isr+0x610>)
    517a:	0613      	lsls	r3, r2, #24
    517c:	f100 82fd 	bmi.w	577a <usb_isr+0x9c6>
    5180:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    5184:	498f      	ldr	r1, [pc, #572]	; (53c4 <usb_isr+0x610>)
    5186:	0615      	lsls	r5, r2, #24
    5188:	f100 8331 	bmi.w	57ee <usb_isr+0xa3a>
    518c:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    5190:	498c      	ldr	r1, [pc, #560]	; (53c4 <usb_isr+0x610>)
    5192:	0614      	lsls	r4, r2, #24
    5194:	f100 8325 	bmi.w	57e2 <usb_isr+0xa2e>
    5198:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    519c:	4989      	ldr	r1, [pc, #548]	; (53c4 <usb_isr+0x610>)
    519e:	0610      	lsls	r0, r2, #24
    51a0:	f100 8319 	bmi.w	57d6 <usb_isr+0xa22>
    51a4:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    51a8:	4986      	ldr	r1, [pc, #536]	; (53c4 <usb_isr+0x610>)
    51aa:	0612      	lsls	r2, r2, #24
    51ac:	f100 830d 	bmi.w	57ca <usb_isr+0xa16>
    51b0:	4885      	ldr	r0, [pc, #532]	; (53c8 <usb_isr+0x614>)
    51b2:	4a86      	ldr	r2, [pc, #536]	; (53cc <usb_isr+0x618>)
    51b4:	4986      	ldr	r1, [pc, #536]	; (53d0 <usb_isr+0x61c>)
    51b6:	9001      	str	r0, [sp, #4]
    51b8:	4886      	ldr	r0, [pc, #536]	; (53d4 <usb_isr+0x620>)
    51ba:	4d87      	ldr	r5, [pc, #540]	; (53d8 <usb_isr+0x624>)
    51bc:	4c87      	ldr	r4, [pc, #540]	; (53dc <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    51be:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    51c0:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    51c2:	9605      	str	r6, [sp, #20]
    51c4:	9502      	str	r5, [sp, #8]
    51c6:	4680      	mov	r8, r0
    51c8:	460f      	mov	r7, r1
    51ca:	4616      	mov	r6, r2
    51cc:	461d      	mov	r5, r3
    51ce:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    51d0:	6830      	ldr	r0, [r6, #0]
			while (p) {
    51d2:	b128      	cbz	r0, 51e0 <usb_isr+0x42c>
				n = p->next;
    51d4:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    51d6:	f000 fbe1 	bl	599c <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    51da:	4620      	mov	r0, r4
    51dc:	2c00      	cmp	r4, #0
    51de:	d1f9      	bne.n	51d4 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    51e0:	2300      	movs	r3, #0
    51e2:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    51e4:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    51e6:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    51e8:	461a      	mov	r2, r3
    51ea:	2300      	movs	r3, #0
    51ec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    51f0:	b128      	cbz	r0, 51fe <usb_isr+0x44a>
				n = p->next;
    51f2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    51f4:	f000 fbd2 	bl	599c <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    51f8:	4620      	mov	r0, r4
    51fa:	2c00      	cmp	r4, #0
    51fc:	d1f9      	bne.n	51f2 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    51fe:	2200      	movs	r2, #0
    5200:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    5202:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    5204:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    5208:	4611      	mov	r1, r2
    520a:	2200      	movs	r2, #0
    520c:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    5210:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    5212:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    5214:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    5216:	f04f 0100 	mov.w	r1, #0
    521a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    521e:	2b03      	cmp	r3, #3
    5220:	f200 812b 	bhi.w	547a <usb_isr+0x6c6>
    5224:	e8df f013 	tbh	[pc, r3, lsl #1]
    5228:	01250170 	.word	0x01250170
    522c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    5230:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5234:	bf18      	it	ne
    5236:	2200      	movne	r2, #0
    5238:	e6b5      	b.n	4fa6 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    523a:	4a69      	ldr	r2, [pc, #420]	; (53e0 <usb_isr+0x62c>)
    523c:	780d      	ldrb	r5, [r1, #0]
    523e:	7848      	ldrb	r0, [r1, #1]
    5240:	7015      	strb	r5, [r2, #0]
    5242:	7050      	strb	r0, [r2, #1]
    5244:	788d      	ldrb	r5, [r1, #2]
    5246:	78c8      	ldrb	r0, [r1, #3]
    5248:	7095      	strb	r5, [r2, #2]
    524a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    524c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    524e:	790d      	ldrb	r5, [r1, #4]
    5250:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5252:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    5254:	794d      	ldrb	r5, [r1, #5]
    5256:	7989      	ldrb	r1, [r1, #6]
    5258:	7155      	strb	r5, [r2, #5]
    525a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    525c:	f000 819b 	beq.w	5596 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5260:	4960      	ldr	r1, [pc, #384]	; (53e4 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5262:	4e61      	ldr	r6, [pc, #388]	; (53e8 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5264:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5266:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5268:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    526c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    526e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5272:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5274:	bf0c      	ite	eq
    5276:	2188      	moveq	r1, #136	; 0x88
    5278:	21c8      	movne	r1, #200	; 0xc8
    527a:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    527e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5282:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5286:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    5288:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    528a:	6051      	str	r1, [r2, #4]
    528c:	e69e      	b.n	4fcc <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    528e:	f242 2021 	movw	r0, #8737	; 0x2221
    5292:	4281      	cmp	r1, r0
    5294:	f040 81cb 	bne.w	562e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    5298:	4b54      	ldr	r3, [pc, #336]	; (53ec <usb_isr+0x638>)
    529a:	4c55      	ldr	r4, [pc, #340]	; (53f0 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    529c:	4955      	ldr	r1, [pc, #340]	; (53f4 <usb_isr+0x640>)
    529e:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    52a0:	681d      	ldr	r5, [r3, #0]
    52a2:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    52a4:	f8cd e004 	str.w	lr, [sp, #4]
    52a8:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    52aa:	2000      	movs	r0, #0
    52ac:	9002      	str	r0, [sp, #8]
    52ae:	4680      	mov	r8, r0
    52b0:	4684      	mov	ip, r0
    52b2:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    52b4:	494b      	ldr	r1, [pc, #300]	; (53e4 <usb_isr+0x630>)
    52b6:	780d      	ldrb	r5, [r1, #0]
    52b8:	f045 0e02 	orr.w	lr, r5, #2
    52bc:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    52c0:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52c2:	9b01      	ldr	r3, [sp, #4]
    52c4:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    52c6:	9b03      	ldr	r3, [sp, #12]
    52c8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52ca:	bf0c      	ite	eq
    52cc:	2488      	moveq	r4, #136	; 0x88
    52ce:	24c8      	movne	r4, #200	; 0xc8
    52d0:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    52d4:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52d8:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    52dc:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    52de:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    52e0:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 53c4 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    52e4:	4b40      	ldr	r3, [pc, #256]	; (53e8 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    52e6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 53e4 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    52ea:	2800      	cmp	r0, #0
    52ec:	f040 811e 	bne.w	552c <usb_isr+0x778>
    52f0:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    52f4:	d11b      	bne.n	532e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    52f6:	f044 0c02 	orr.w	ip, r4, #2
    52fa:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    52fe:	9c02      	ldr	r4, [sp, #8]
    5300:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 53c4 <usb_isr+0x610>
    5304:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5306:	2a00      	cmp	r2, #0
    5308:	f040 8126 	bne.w	5558 <usb_isr+0x7a4>
    530c:	0402      	lsls	r2, r0, #16
    530e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    5312:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5316:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    531a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    531c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    531e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5320:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    5322:	2840      	cmp	r0, #64	; 0x40
    5324:	d103      	bne.n	532e <usb_isr+0x57a>
    5326:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    5328:	4a33      	ldr	r2, [pc, #204]	; (53f8 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    532a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    532c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    532e:	4a33      	ldr	r2, [pc, #204]	; (53fc <usb_isr+0x648>)
    5330:	2301      	movs	r3, #1
    5332:	7013      	strb	r3, [r2, #0]
    5334:	e64d      	b.n	4fd2 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    5336:	f000 fc9d 	bl	5c74 <usb_serial_flush_callback>
    533a:	e5a5      	b.n	4e88 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    533c:	4b21      	ldr	r3, [pc, #132]	; (53c4 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    533e:	482f      	ldr	r0, [pc, #188]	; (53fc <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    5340:	4928      	ldr	r1, [pc, #160]	; (53e4 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    5342:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    5344:	f04f 0e02 	mov.w	lr, #2
    5348:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    534c:	4f2c      	ldr	r7, [pc, #176]	; (5400 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    534e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    5350:	492c      	ldr	r1, [pc, #176]	; (5404 <usb_isr+0x650>)
    5352:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    5354:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5356:	4e2c      	ldr	r6, [pc, #176]	; (5408 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    5358:	4d2c      	ldr	r5, [pc, #176]	; (540c <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    535a:	4c2d      	ldr	r4, [pc, #180]	; (5410 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    535c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    535e:	210d      	movs	r1, #13
    5360:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    5362:	21ff      	movs	r1, #255	; 0xff
    5364:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5366:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 5420 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    536a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    536c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    536e:	4d29      	ldr	r5, [pc, #164]	; (5414 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5370:	4a29      	ldr	r2, [pc, #164]	; (5418 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    5372:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    5376:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5378:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    537a:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    537e:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    5380:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    5382:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    5384:	b007      	add	sp, #28
    5386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    538a:	4a24      	ldr	r2, [pc, #144]	; (541c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    538c:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    5390:	7813      	ldrb	r3, [r2, #0]
    5392:	3301      	adds	r3, #1
    5394:	7013      	strb	r3, [r2, #0]
    5396:	e557      	b.n	4e48 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    5398:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    539c:	4d0e      	ldr	r5, [pc, #56]	; (53d8 <usb_isr+0x624>)
    539e:	e53a      	b.n	4e16 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    53a0:	5d8b      	ldrb	r3, [r1, r6]
    53a2:	2b03      	cmp	r3, #3
    53a4:	f200 80f0 	bhi.w	5588 <usb_isr+0x7d4>
    53a8:	a201      	add	r2, pc, #4	; (adr r2, 53b0 <usb_isr+0x5fc>)
    53aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    53ae:	bf00      	nop
    53b0:	00004e49 	.word	0x00004e49
    53b4:	00004e49 	.word	0x00004e49
    53b8:	0000546d 	.word	0x0000546d
    53bc:	00005467 	.word	0x00005467
    53c0:	1fff9864 	.word	0x1fff9864
    53c4:	1fff8000 	.word	0x1fff8000
    53c8:	1fff9840 	.word	0x1fff9840
    53cc:	1fff97dc 	.word	0x1fff97dc
    53d0:	1fff9830 	.word	0x1fff9830
    53d4:	1fff9868 	.word	0x1fff9868
    53d8:	1fff9788 	.word	0x1fff9788
    53dc:	1fff9a2c 	.word	0x1fff9a2c
    53e0:	1fff9a34 	.word	0x1fff9a34
    53e4:	1fff9858 	.word	0x1fff9858
    53e8:	1fff97ec 	.word	0x1fff97ec
    53ec:	1fff9780 	.word	0x1fff9780
    53f0:	1fff9a3c 	.word	0x1fff9a3c
    53f4:	1fff987c 	.word	0x1fff987c
    53f8:	1fff9798 	.word	0x1fff9798
    53fc:	40072094 	.word	0x40072094
    5400:	400720c0 	.word	0x400720c0
    5404:	00400088 	.word	0x00400088
    5408:	40072088 	.word	0x40072088
    540c:	40072080 	.word	0x40072080
    5410:	40072098 	.word	0x40072098
    5414:	1fff979c 	.word	0x1fff979c
    5418:	1fff97f0 	.word	0x1fff97f0
    541c:	1fff9859 	.word	0x1fff9859
    5420:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    5424:	49c1      	ldr	r1, [pc, #772]	; (572c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    5426:	4bc2      	ldr	r3, [pc, #776]	; (5730 <usb_isr+0x97c>)
    5428:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    542a:	200d      	movs	r0, #13
    542c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    542e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    5430:	07a2      	lsls	r2, r4, #30
    5432:	f57f ae0e 	bpl.w	5052 <usb_isr+0x29e>
    5436:	e605      	b.n	5044 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    5438:	f240 3202 	movw	r2, #770	; 0x302
    543c:	4291      	cmp	r1, r2
    543e:	f040 80ee 	bne.w	561e <usb_isr+0x86a>
    5442:	88a9      	ldrh	r1, [r5, #4]
    5444:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5448:	2904      	cmp	r1, #4
    544a:	d868      	bhi.n	551e <usb_isr+0x76a>
    544c:	886a      	ldrh	r2, [r5, #2]
    544e:	2a00      	cmp	r2, #0
    5450:	d165      	bne.n	551e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    5452:	48b6      	ldr	r0, [pc, #728]	; (572c <usb_isr+0x978>)
    5454:	f8cd e004 	str.w	lr, [sp, #4]
    5458:	0089      	lsls	r1, r1, #2
    545a:	4408      	add	r0, r1
    545c:	7801      	ldrb	r1, [r0, #0]
    545e:	f041 0102 	orr.w	r1, r1, #2
    5462:	7001      	strb	r1, [r0, #0]
    5464:	e721      	b.n	52aa <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5466:	2301      	movs	r3, #1
    5468:	558b      	strb	r3, [r1, r6]
						break;
    546a:	e4ed      	b.n	4e48 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    546c:	2300      	movs	r3, #0
    546e:	558b      	strb	r3, [r1, r6]
						break;
    5470:	e4ea      	b.n	4e48 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    5472:	f04f 0301 	mov.w	r3, #1
    5476:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    547a:	3501      	adds	r5, #1
    547c:	2d04      	cmp	r5, #4
    547e:	f106 0604 	add.w	r6, r6, #4
    5482:	f107 0704 	add.w	r7, r7, #4
    5486:	f108 0801 	add.w	r8, r8, #1
    548a:	f47f aea1 	bne.w	51d0 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    548e:	4ca9      	ldr	r4, [pc, #676]	; (5734 <usb_isr+0x980>)
			*reg = epconf;
    5490:	4ba9      	ldr	r3, [pc, #676]	; (5738 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    5492:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    5494:	4da9      	ldr	r5, [pc, #676]	; (573c <usb_isr+0x988>)
    5496:	9f04      	ldr	r7, [sp, #16]
    5498:	9e05      	ldr	r6, [sp, #20]
    549a:	2100      	movs	r1, #0
    549c:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    549e:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54a0:	0713      	lsls	r3, r2, #28
    54a2:	f100 8105 	bmi.w	56b0 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    54a6:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    54a8:	49a5      	ldr	r1, [pc, #660]	; (5740 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54aa:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 574c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    54ae:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54b0:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54b2:	f04f 0100 	mov.w	r1, #0
    54b6:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    54ba:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54be:	f100 80e0 	bmi.w	5682 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    54c2:	49a0      	ldr	r1, [pc, #640]	; (5744 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    54c4:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    54c6:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54c8:	2100      	movs	r1, #0
    54ca:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    54ce:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54d2:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54d4:	f8df 8274 	ldr.w	r8, [pc, #628]	; 574c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54d8:	f100 8101 	bmi.w	56de <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    54dc:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    54de:	499a      	ldr	r1, [pc, #616]	; (5748 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54e0:	4c9a      	ldr	r4, [pc, #616]	; (574c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    54e2:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54e4:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54e6:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54e8:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    54ec:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    54f0:	f100 80b0 	bmi.w	5654 <usb_isr+0x8a0>
    54f4:	7833      	ldrb	r3, [r6, #0]
    54f6:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    54f8:	2100      	movs	r1, #0
    54fa:	f083 0201 	eor.w	r2, r3, #1
    54fe:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    5502:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    5506:	e6d0      	b.n	52aa <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    5508:	f04f 0300 	mov.w	r3, #0
    550c:	f888 3000 	strb.w	r3, [r8]
    5510:	e7b3      	b.n	547a <usb_isr+0x6c6>
    5512:	88a9      	ldrh	r1, [r5, #4]
    5514:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5518:	2904      	cmp	r1, #4
    551a:	f240 808d 	bls.w	5638 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    551e:	4a83      	ldr	r2, [pc, #524]	; (572c <usb_isr+0x978>)
    5520:	230f      	movs	r3, #15
    5522:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    5524:	4a8a      	ldr	r2, [pc, #552]	; (5750 <usb_isr+0x99c>)
    5526:	2301      	movs	r3, #1
    5528:	7013      	strb	r3, [r2, #0]
    552a:	e552      	b.n	4fd2 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    552c:	2840      	cmp	r0, #64	; 0x40
    552e:	f67f aee2 	bls.w	52f6 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    5532:	f044 0402 	orr.w	r4, r4, #2
    5536:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    553a:	9e02      	ldr	r6, [sp, #8]
    553c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    553e:	b1ba      	cbz	r2, 5570 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    5540:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5544:	4a83      	ldr	r2, [pc, #524]	; (5754 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    5546:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5548:	4633      	mov	r3, r6
    554a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    554c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5550:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5552:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5556:	e6e7      	b.n	5328 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    5558:	f89d 3004 	ldrb.w	r3, [sp, #4]
    555c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    555e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5560:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    5562:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5564:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5568:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    556a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    556e:	e6d8      	b.n	5322 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    5570:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5574:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5576:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5578:	4a77      	ldr	r2, [pc, #476]	; (5758 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    557a:	f888 5000 	strb.w	r5, [r8]
    557e:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    5580:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    5582:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    5586:	e6cf      	b.n	5328 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    5588:	f019 0f08 	tst.w	r9, #8
    558c:	bf0c      	ite	eq
    558e:	2302      	moveq	r3, #2
    5590:	2303      	movne	r3, #3
    5592:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    5594:	e458      	b.n	4e48 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    5596:	4a71      	ldr	r2, [pc, #452]	; (575c <usb_isr+0x9a8>)
    5598:	210f      	movs	r1, #15
    559a:	7011      	strb	r1, [r2, #0]
    559c:	e660      	b.n	5260 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    559e:	4a70      	ldr	r2, [pc, #448]	; (5760 <usb_isr+0x9ac>)
    55a0:	6854      	ldr	r4, [r2, #4]
    55a2:	2c00      	cmp	r4, #0
    55a4:	d0bb      	beq.n	551e <usb_isr+0x76a>
    55a6:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    55a8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    55ac:	e003      	b.n	55b6 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    55ae:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    55b0:	6854      	ldr	r4, [r2, #4]
    55b2:	2c00      	cmp	r4, #0
    55b4:	d0b3      	beq.n	551e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    55b6:	8813      	ldrh	r3, [r2, #0]
    55b8:	4283      	cmp	r3, r0
    55ba:	d1f8      	bne.n	55ae <usb_isr+0x7fa>
    55bc:	8853      	ldrh	r3, [r2, #2]
    55be:	4573      	cmp	r3, lr
    55c0:	d1f5      	bne.n	55ae <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    55c2:	0a00      	lsrs	r0, r0, #8
    55c4:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    55c6:	bf0c      	ite	eq
    55c8:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    55cc:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    55d0:	e003      	b.n	55da <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    55d2:	4a64      	ldr	r2, [pc, #400]	; (5764 <usb_isr+0x9b0>)
    55d4:	4c64      	ldr	r4, [pc, #400]	; (5768 <usb_isr+0x9b4>)
    55d6:	7812      	ldrb	r2, [r2, #0]
    55d8:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    55da:	88e8      	ldrh	r0, [r5, #6]
    55dc:	4570      	cmp	r0, lr
    55de:	f080 813f 	bcs.w	5860 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    55e2:	4962      	ldr	r1, [pc, #392]	; (576c <usb_isr+0x9b8>)
    55e4:	780d      	ldrb	r5, [r1, #0]
    55e6:	2840      	cmp	r0, #64	; 0x40
    55e8:	4684      	mov	ip, r0
    55ea:	f045 0e02 	orr.w	lr, r5, #2
    55ee:	bf28      	it	cs
    55f0:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    55f4:	eb04 030c 	add.w	r3, r4, ip
    55f8:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    55fc:	9302      	str	r3, [sp, #8]
    55fe:	2301      	movs	r3, #1
    5600:	6054      	str	r4, [r2, #4]
    5602:	ebcc 0000 	rsb	r0, ip, r0
    5606:	ea4f 480c 	mov.w	r8, ip, lsl #16
    560a:	2200      	movs	r2, #0
    560c:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    560e:	24c8      	movs	r4, #200	; 0xc8
    5610:	e65e      	b.n	52d0 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5612:	4c55      	ldr	r4, [pc, #340]	; (5768 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    5614:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    5618:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    561a:	7062      	strb	r2, [r4, #1]
    561c:	e7dd      	b.n	55da <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    561e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    5622:	f47f af7c 	bne.w	551e <usb_isr+0x76a>
    5626:	2301      	movs	r3, #1
    5628:	2200      	movs	r2, #0
    562a:	9301      	str	r3, [sp, #4]
    562c:	e63d      	b.n	52aa <usb_isr+0x4f6>
    562e:	f242 3221 	movw	r2, #8993	; 0x2321
    5632:	4291      	cmp	r1, r2
    5634:	d0f7      	beq.n	5626 <usb_isr+0x872>
    5636:	e772      	b.n	551e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    5638:	886a      	ldrh	r2, [r5, #2]
    563a:	2a00      	cmp	r2, #0
    563c:	f47f af6f 	bne.w	551e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    5640:	483a      	ldr	r0, [pc, #232]	; (572c <usb_isr+0x978>)
    5642:	f8cd e004 	str.w	lr, [sp, #4]
    5646:	0089      	lsls	r1, r1, #2
    5648:	4408      	add	r0, r1
    564a:	7801      	ldrb	r1, [r0, #0]
    564c:	f021 0102 	bic.w	r1, r1, #2
    5650:	7001      	strb	r1, [r0, #0]
    5652:	e62a      	b.n	52aa <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5654:	f000 f982 	bl	595c <usb_malloc>
				if (p) {
    5658:	2800      	cmp	r0, #0
    565a:	f000 80ef 	beq.w	583c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    565e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5660:	4a3d      	ldr	r2, [pc, #244]	; (5758 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5662:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5666:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    566a:	f000 f977 	bl	595c <usb_malloc>
				if (p) {
    566e:	2800      	cmp	r0, #0
    5670:	f000 80de 	beq.w	5830 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    5674:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5676:	4a37      	ldr	r2, [pc, #220]	; (5754 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5678:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    567c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    5680:	e738      	b.n	54f4 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    5682:	f000 f96b 	bl	595c <usb_malloc>
				if (p) {
    5686:	2800      	cmp	r0, #0
    5688:	f000 80c0 	beq.w	580c <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    568c:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    568e:	4a32      	ldr	r2, [pc, #200]	; (5758 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    5690:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    5694:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    5698:	f000 f960 	bl	595c <usb_malloc>
				if (p) {
    569c:	2800      	cmp	r0, #0
    569e:	f000 80af 	beq.w	5800 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    56a2:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    56a4:	4a2b      	ldr	r2, [pc, #172]	; (5754 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    56a6:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    56aa:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    56ae:	e708      	b.n	54c2 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    56b0:	f000 f954 	bl	595c <usb_malloc>
				if (p) {
    56b4:	2800      	cmp	r0, #0
    56b6:	f000 80cd 	beq.w	5854 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    56ba:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    56bc:	4a26      	ldr	r2, [pc, #152]	; (5758 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    56be:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    56c2:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    56c6:	f000 f949 	bl	595c <usb_malloc>
				if (p) {
    56ca:	2800      	cmp	r0, #0
    56cc:	f000 80bc 	beq.w	5848 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    56d0:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    56d2:	4a20      	ldr	r2, [pc, #128]	; (5754 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    56d4:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    56d8:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    56dc:	e6e3      	b.n	54a6 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    56de:	f000 f93d 	bl	595c <usb_malloc>
				if (p) {
    56e2:	2800      	cmp	r0, #0
    56e4:	f000 809e 	beq.w	5824 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    56e8:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    56ea:	4a1b      	ldr	r2, [pc, #108]	; (5758 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    56ec:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    56f0:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    56f4:	f000 f932 	bl	595c <usb_malloc>
				if (p) {
    56f8:	2800      	cmp	r0, #0
    56fa:	f000 808d 	beq.w	5818 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    56fe:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5700:	4a14      	ldr	r2, [pc, #80]	; (5754 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    5702:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    5706:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    570a:	e6e7      	b.n	54dc <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    570c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    570e:	3808      	subs	r0, #8
    5710:	f000 f944 	bl	599c <usb_free>
    5714:	e504      	b.n	5120 <usb_isr+0x36c>
    5716:	6b48      	ldr	r0, [r1, #52]	; 0x34
    5718:	3808      	subs	r0, #8
    571a:	f000 f93f 	bl	599c <usb_free>
    571e:	e4f9      	b.n	5114 <usb_isr+0x360>
    5720:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    5722:	3808      	subs	r0, #8
    5724:	f000 f93a 	bl	599c <usb_free>
    5728:	e4ee      	b.n	5108 <usb_isr+0x354>
    572a:	bf00      	nop
    572c:	400720c0 	.word	0x400720c0
    5730:	40072080 	.word	0x40072080
    5734:	000085d4 	.word	0x000085d4
    5738:	400720c4 	.word	0x400720c4
    573c:	1fff9859 	.word	0x1fff9859
    5740:	400720c8 	.word	0x400720c8
    5744:	400720cc 	.word	0x400720cc
    5748:	400720d0 	.word	0x400720d0
    574c:	1fff8000 	.word	0x1fff8000
    5750:	40072094 	.word	0x40072094
    5754:	004000c8 	.word	0x004000c8
    5758:	00400088 	.word	0x00400088
    575c:	1fff97ed 	.word	0x1fff97ed
    5760:	000085d8 	.word	0x000085d8
    5764:	1fff9864 	.word	0x1fff9864
    5768:	1fff985c 	.word	0x1fff985c
    576c:	1fff9858 	.word	0x1fff9858
    5770:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5772:	3808      	subs	r0, #8
    5774:	f000 f912 	bl	599c <usb_free>
    5778:	e4c0      	b.n	50fc <usb_isr+0x348>
    577a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    577c:	3808      	subs	r0, #8
    577e:	f000 f90d 	bl	599c <usb_free>
    5782:	e4fd      	b.n	5180 <usb_isr+0x3cc>
    5784:	6f48      	ldr	r0, [r1, #116]	; 0x74
    5786:	3808      	subs	r0, #8
    5788:	f000 f908 	bl	599c <usb_free>
    578c:	e4f2      	b.n	5174 <usb_isr+0x3c0>
    578e:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    5790:	3808      	subs	r0, #8
    5792:	f000 f903 	bl	599c <usb_free>
    5796:	e4e7      	b.n	5168 <usb_isr+0x3b4>
    5798:	6e48      	ldr	r0, [r1, #100]	; 0x64
    579a:	3808      	subs	r0, #8
    579c:	f000 f8fe 	bl	599c <usb_free>
    57a0:	e4dc      	b.n	515c <usb_isr+0x3a8>
    57a2:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    57a4:	3808      	subs	r0, #8
    57a6:	f000 f8f9 	bl	599c <usb_free>
    57aa:	e4d1      	b.n	5150 <usb_isr+0x39c>
    57ac:	6d48      	ldr	r0, [r1, #84]	; 0x54
    57ae:	3808      	subs	r0, #8
    57b0:	f000 f8f4 	bl	599c <usb_free>
    57b4:	e4c6      	b.n	5144 <usb_isr+0x390>
    57b6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    57b8:	3808      	subs	r0, #8
    57ba:	f000 f8ef 	bl	599c <usb_free>
    57be:	e4bb      	b.n	5138 <usb_isr+0x384>
    57c0:	6c48      	ldr	r0, [r1, #68]	; 0x44
    57c2:	3808      	subs	r0, #8
    57c4:	f000 f8ea 	bl	599c <usb_free>
    57c8:	e4b0      	b.n	512c <usb_isr+0x378>
    57ca:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    57ce:	3808      	subs	r0, #8
    57d0:	f000 f8e4 	bl	599c <usb_free>
    57d4:	e4ec      	b.n	51b0 <usb_isr+0x3fc>
    57d6:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    57da:	3808      	subs	r0, #8
    57dc:	f000 f8de 	bl	599c <usb_free>
    57e0:	e4e0      	b.n	51a4 <usb_isr+0x3f0>
    57e2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    57e6:	3808      	subs	r0, #8
    57e8:	f000 f8d8 	bl	599c <usb_free>
    57ec:	e4d4      	b.n	5198 <usb_isr+0x3e4>
    57ee:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    57f2:	3808      	subs	r0, #8
    57f4:	f000 f8d2 	bl	599c <usb_free>
    57f8:	e4c8      	b.n	518c <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    57fa:	f04f 0e02 	mov.w	lr, #2
    57fe:	e6ec      	b.n	55da <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5800:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5802:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    5806:	3201      	adds	r2, #1
    5808:	702a      	strb	r2, [r5, #0]
    580a:	e65a      	b.n	54c2 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    580c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    580e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    5812:	3201      	adds	r2, #1
    5814:	702a      	strb	r2, [r5, #0]
    5816:	e73f      	b.n	5698 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5818:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    581a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    581e:	3201      	adds	r2, #1
    5820:	702a      	strb	r2, [r5, #0]
    5822:	e65b      	b.n	54dc <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5824:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5826:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    582a:	3201      	adds	r2, #1
    582c:	702a      	strb	r2, [r5, #0]
    582e:	e761      	b.n	56f4 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5830:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    5832:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    5836:	3201      	adds	r2, #1
    5838:	702a      	strb	r2, [r5, #0]
    583a:	e65b      	b.n	54f4 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    583c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    583e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    5842:	3201      	adds	r2, #1
    5844:	702a      	strb	r2, [r5, #0]
    5846:	e710      	b.n	566a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    5848:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    584a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    584e:	3201      	adds	r2, #1
    5850:	702a      	strb	r2, [r5, #0]
    5852:	e628      	b.n	54a6 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    5854:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    5856:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    585a:	3201      	adds	r2, #1
    585c:	702a      	strb	r2, [r5, #0]
    585e:	e732      	b.n	56c6 <usb_isr+0x912>
    5860:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    5864:	46f4      	mov	ip, lr
    5866:	bf28      	it	cs
    5868:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    586c:	eb04 030c 	add.w	r3, r4, ip
    5870:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    5872:	2301      	movs	r3, #1
    5874:	ebcc 000e 	rsb	r0, ip, lr
    5878:	ea4f 480c 	mov.w	r8, ip, lsl #16
    587c:	2200      	movs	r2, #0
    587e:	9301      	str	r3, [sp, #4]
    5880:	e518      	b.n	52b4 <usb_isr+0x500>
    5882:	bf00      	nop

00005884 <usb_init>:
}



void usb_init(void)
{
    5884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    5886:	f000 fda5 	bl	63d4 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    588a:	4b29      	ldr	r3, [pc, #164]	; (5930 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    588c:	4829      	ldr	r0, [pc, #164]	; (5934 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    588e:	4c2a      	ldr	r4, [pc, #168]	; (5938 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    5890:	4f2a      	ldr	r7, [pc, #168]	; (593c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    5892:	4d2b      	ldr	r5, [pc, #172]	; (5940 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5894:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 5954 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    5898:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 5958 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    589c:	4e29      	ldr	r6, [pc, #164]	; (5944 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    589e:	2200      	movs	r2, #0
    58a0:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    58a2:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58a4:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    58a6:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58a8:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    58aa:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58ac:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    58ae:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58b0:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    58b2:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58b4:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    58b6:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58b8:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    58ba:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58bc:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    58be:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58c0:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    58c2:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58c4:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    58c6:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58c8:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    58ca:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58cc:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    58ce:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58d0:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    58d2:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58d4:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    58d6:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58d8:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    58da:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58dc:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    58de:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    58e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    58e4:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    58e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    58ea:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    58ee:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    58f0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    58f4:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    58f6:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    58fa:	4913      	ldr	r1, [pc, #76]	; (5948 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    58fc:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    58fe:	0e1b      	lsrs	r3, r3, #24
    5900:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    5902:	23ff      	movs	r3, #255	; 0xff
    5904:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5908:	4d10      	ldr	r5, [pc, #64]	; (594c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    590a:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    590e:	4810      	ldr	r0, [pc, #64]	; (5950 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    5910:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    5912:	2301      	movs	r3, #1
    5914:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    5916:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    591a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    591c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    5920:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    5922:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    5926:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    5928:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    592a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    592e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5930:	1fff8000 	.word	0x1fff8000
    5934:	40048034 	.word	0x40048034
    5938:	4007209c 	.word	0x4007209c
    593c:	400720b0 	.word	0x400720b0
    5940:	400720b4 	.word	0x400720b4
    5944:	40072094 	.word	0x40072094
    5948:	40072010 	.word	0x40072010
    594c:	e000e449 	.word	0xe000e449
    5950:	e000e108 	.word	0xe000e108
    5954:	40072080 	.word	0x40072080
    5958:	40072088 	.word	0x40072088

0000595c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    595c:	b672      	cpsid	i
	avail = usb_buffer_available;
    595e:	480d      	ldr	r0, [pc, #52]	; (5994 <usb_malloc+0x38>)
    5960:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    5962:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    5966:	2b0b      	cmp	r3, #11
    5968:	dc10      	bgt.n	598c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    596a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    596e:	40d9      	lsrs	r1, r3
    5970:	ea22 0201 	bic.w	r2, r2, r1
    5974:	6002      	str	r2, [r0, #0]
	__enable_irq();
    5976:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    5978:	4807      	ldr	r0, [pc, #28]	; (5998 <usb_malloc+0x3c>)
    597a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    597e:	00db      	lsls	r3, r3, #3
    5980:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    5982:	2100      	movs	r1, #0
    5984:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    5986:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    5988:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    598a:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    598c:	b662      	cpsie	i
		return NULL;
    598e:	2000      	movs	r0, #0
    5990:	4770      	bx	lr
    5992:	bf00      	nop
    5994:	1fff8734 	.word	0x1fff8734
    5998:	1fff83bc 	.word	0x1fff83bc

0000599c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    599c:	4b0d      	ldr	r3, [pc, #52]	; (59d4 <usb_free+0x38>)
    599e:	4a0e      	ldr	r2, [pc, #56]	; (59d8 <usb_free+0x3c>)
    59a0:	1ac3      	subs	r3, r0, r3
    59a2:	fba2 2303 	umull	r2, r3, r2, r3
    59a6:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    59a8:	2b0b      	cmp	r3, #11
    59aa:	d80c      	bhi.n	59c6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    59ac:	4a0b      	ldr	r2, [pc, #44]	; (59dc <usb_free+0x40>)
    59ae:	7812      	ldrb	r2, [r2, #0]
    59b0:	b952      	cbnz	r2, 59c8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    59b2:	b672      	cpsid	i
	usb_buffer_available |= mask;
    59b4:	480a      	ldr	r0, [pc, #40]	; (59e0 <usb_free+0x44>)
    59b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    59ba:	6802      	ldr	r2, [r0, #0]
    59bc:	fa21 f303 	lsr.w	r3, r1, r3
    59c0:	431a      	orrs	r2, r3
    59c2:	6002      	str	r2, [r0, #0]
	__enable_irq();
    59c4:	b662      	cpsie	i
    59c6:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    59c8:	4a06      	ldr	r2, [pc, #24]	; (59e4 <usb_free+0x48>)
    59ca:	7812      	ldrb	r2, [r2, #0]
    59cc:	2a00      	cmp	r2, #0
    59ce:	d0f0      	beq.n	59b2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    59d0:	f7ff b94a 	b.w	4c68 <usb_rx_memory>
    59d4:	1fff83bc 	.word	0x1fff83bc
    59d8:	38e38e39 	.word	0x38e38e39
    59dc:	1fff9859 	.word	0x1fff9859
    59e0:	1fff8734 	.word	0x1fff8734
    59e4:	1fff9864 	.word	0x1fff9864

000059e8 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    59e8:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    59ea:	4d0f      	ldr	r5, [pc, #60]	; (5a28 <usb_serial_getchar+0x40>)
    59ec:	6828      	ldr	r0, [r5, #0]
    59ee:	b178      	cbz	r0, 5a10 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    59f0:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    59f2:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    59f4:	18c1      	adds	r1, r0, r3
    59f6:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    59f8:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    59fa:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    59fc:	d202      	bcs.n	5a04 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    59fe:	8043      	strh	r3, [r0, #2]
	}
	return c;
    5a00:	4620      	mov	r0, r4
}
    5a02:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    5a04:	f7ff ffca 	bl	599c <usb_free>
		rx_packet = NULL;
    5a08:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    5a0a:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5a0c:	602b      	str	r3, [r5, #0]
    5a0e:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5a10:	4b06      	ldr	r3, [pc, #24]	; (5a2c <usb_serial_getchar+0x44>)
    5a12:	781b      	ldrb	r3, [r3, #0]
    5a14:	b12b      	cbz	r3, 5a22 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5a16:	2003      	movs	r0, #3
    5a18:	f7ff f8f2 	bl	4c00 <usb_rx>
    5a1c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    5a1e:	2800      	cmp	r0, #0
    5a20:	d1e6      	bne.n	59f0 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5a22:	f04f 30ff 	mov.w	r0, #4294967295
    5a26:	bd38      	pop	{r3, r4, r5, pc}
    5a28:	1fff9878 	.word	0x1fff9878
    5a2c:	1fff9864 	.word	0x1fff9864

00005a30 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    5a30:	b510      	push	{r4, lr}
	if (!rx_packet) {
    5a32:	4c09      	ldr	r4, [pc, #36]	; (5a58 <usb_serial_peekchar+0x28>)
    5a34:	6820      	ldr	r0, [r4, #0]
    5a36:	b118      	cbz	r0, 5a40 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    5a38:	8843      	ldrh	r3, [r0, #2]
    5a3a:	4418      	add	r0, r3
    5a3c:	7a00      	ldrb	r0, [r0, #8]
}
    5a3e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5a40:	4b06      	ldr	r3, [pc, #24]	; (5a5c <usb_serial_peekchar+0x2c>)
    5a42:	781b      	ldrb	r3, [r3, #0]
    5a44:	b12b      	cbz	r3, 5a52 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    5a46:	2003      	movs	r0, #3
    5a48:	f7ff f8da 	bl	4c00 <usb_rx>
    5a4c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    5a4e:	2800      	cmp	r0, #0
    5a50:	d1f2      	bne.n	5a38 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    5a52:	f04f 30ff 	mov.w	r0, #4294967295
    5a56:	bd10      	pop	{r4, pc}
    5a58:	1fff9878 	.word	0x1fff9878
    5a5c:	1fff9864 	.word	0x1fff9864

00005a60 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5a60:	4b04      	ldr	r3, [pc, #16]	; (5a74 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    5a62:	4a05      	ldr	r2, [pc, #20]	; (5a78 <usb_serial_available+0x18>)
    5a64:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    5a66:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    5a68:	b11b      	cbz	r3, 5a72 <usb_serial_available+0x12>
    5a6a:	881a      	ldrh	r2, [r3, #0]
    5a6c:	885b      	ldrh	r3, [r3, #2]
    5a6e:	1ad3      	subs	r3, r2, r3
    5a70:	4418      	add	r0, r3
	return count;
}
    5a72:	4770      	bx	lr
    5a74:	1fff9878 	.word	0x1fff9878
    5a78:	1fff9a2c 	.word	0x1fff9a2c

00005a7c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    5a7c:	4b0b      	ldr	r3, [pc, #44]	; (5aac <usb_serial_flush_input+0x30>)
    5a7e:	781b      	ldrb	r3, [r3, #0]
    5a80:	b19b      	cbz	r3, 5aaa <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    5a82:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    5a84:	4c0a      	ldr	r4, [pc, #40]	; (5ab0 <usb_serial_flush_input+0x34>)
    5a86:	6820      	ldr	r0, [r4, #0]
    5a88:	b148      	cbz	r0, 5a9e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    5a8a:	f7ff ff87 	bl	599c <usb_free>
		rx_packet = NULL;
    5a8e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5a90:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    5a92:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5a94:	f7ff f8b4 	bl	4c00 <usb_rx>
		if (!rx) break;
    5a98:	b130      	cbz	r0, 5aa8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    5a9a:	f7ff ff7f 	bl	599c <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    5a9e:	2003      	movs	r0, #3
    5aa0:	f7ff f8ae 	bl	4c00 <usb_rx>
		if (!rx) break;
    5aa4:	2800      	cmp	r0, #0
    5aa6:	d1f8      	bne.n	5a9a <usb_serial_flush_input+0x1e>
    5aa8:	bd10      	pop	{r4, pc}
    5aaa:	4770      	bx	lr
    5aac:	1fff9864 	.word	0x1fff9864
    5ab0:	1fff9878 	.word	0x1fff9878

00005ab4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5ab8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 5bb4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    5abc:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    5abe:	2201      	movs	r2, #1
    5ac0:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    5ac4:	9101      	str	r1, [sp, #4]
    5ac6:	b369      	cbz	r1, 5b24 <usb_serial_write+0x70>
    5ac8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 5bb8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5acc:	4f36      	ldr	r7, [pc, #216]	; (5ba8 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5ace:	9e01      	ldr	r6, [sp, #4]
    5ad0:	4683      	mov	fp, r0
		if (!tx_packet) {
    5ad2:	f8d8 0000 	ldr.w	r0, [r8]
    5ad6:	b3b0      	cbz	r0, 5b46 <usb_serial_write+0x92>
    5ad8:	4d34      	ldr	r5, [pc, #208]	; (5bac <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    5ada:	8844      	ldrh	r4, [r0, #2]
    5adc:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    5ae0:	42b1      	cmp	r1, r6
    5ae2:	bf28      	it	cs
    5ae4:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5ae6:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5aea:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5aec:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    5af0:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    5af2:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    5af4:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    5af8:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    5afc:	b151      	cbz	r1, 5b14 <usb_serial_write+0x60>
    5afe:	3c01      	subs	r4, #1
    5b00:	4422      	add	r2, r4
    5b02:	4459      	add	r1, fp
    5b04:	f81b 4b01 	ldrb.w	r4, [fp], #1
    5b08:	f802 4f01 	strb.w	r4, [r2, #1]!
    5b0c:	458b      	cmp	fp, r1
    5b0e:	d1f9      	bne.n	5b04 <usb_serial_write+0x50>
    5b10:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    5b14:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    5b18:	d80b      	bhi.n	5b32 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    5b1a:	4a25      	ldr	r2, [pc, #148]	; (5bb0 <usb_serial_write+0xfc>)
    5b1c:	2105      	movs	r1, #5
    5b1e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    5b20:	2e00      	cmp	r6, #0
    5b22:	d1d6      	bne.n	5ad2 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    5b24:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    5b26:	2300      	movs	r3, #0
    5b28:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    5b2c:	b003      	add	sp, #12
    5b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    5b32:	2240      	movs	r2, #64	; 0x40
    5b34:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5b36:	4601      	mov	r1, r0
    5b38:	2004      	movs	r0, #4
    5b3a:	f7ff f8f9 	bl	4d30 <usb_tx>
			tx_packet = NULL;
    5b3e:	2200      	movs	r2, #0
    5b40:	f8c8 2000 	str.w	r2, [r8]
    5b44:	e7e9      	b.n	5b1a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5b46:	783a      	ldrb	r2, [r7, #0]
    5b48:	b32a      	cbz	r2, 5b96 <usb_serial_write+0xe2>
    5b4a:	4d18      	ldr	r5, [pc, #96]	; (5bac <usb_serial_write+0xf8>)
    5b4c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    5b50:	f04f 0a01 	mov.w	sl, #1
    5b54:	e007      	b.n	5b66 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5b56:	3c01      	subs	r4, #1
    5b58:	d016      	beq.n	5b88 <usb_serial_write+0xd4>
    5b5a:	782a      	ldrb	r2, [r5, #0]
    5b5c:	b9a2      	cbnz	r2, 5b88 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    5b5e:	f000 fa1d 	bl	5f9c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    5b62:	783a      	ldrb	r2, [r7, #0]
    5b64:	b1ba      	cbz	r2, 5b96 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    5b66:	2004      	movs	r0, #4
    5b68:	f7ff f868 	bl	4c3c <usb_tx_packet_count>
    5b6c:	2807      	cmp	r0, #7
    5b6e:	d8f2      	bhi.n	5b56 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    5b70:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    5b74:	f7ff fef2 	bl	595c <usb_malloc>
    5b78:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    5b7c:	2800      	cmp	r0, #0
    5b7e:	d1ac      	bne.n	5ada <usb_serial_write+0x26>
					tx_noautoflush = 0;
    5b80:	4b0c      	ldr	r3, [pc, #48]	; (5bb4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5b82:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    5b84:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    5b86:	d1e8      	bne.n	5b5a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    5b88:	2301      	movs	r3, #1
					return -1;
    5b8a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    5b8e:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5b90:	b003      	add	sp, #12
    5b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5b96:	2300      	movs	r3, #0
					return -1;
    5b98:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    5b9c:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    5ba0:	b003      	add	sp, #12
    5ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ba6:	bf00      	nop
    5ba8:	1fff9864 	.word	0x1fff9864
    5bac:	1fff9874 	.word	0x1fff9874
    5bb0:	1fff986c 	.word	0x1fff986c
    5bb4:	1fff986d 	.word	0x1fff986d
    5bb8:	1fff9870 	.word	0x1fff9870

00005bbc <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5bbc:	b500      	push	{lr}
    5bbe:	b083      	sub	sp, #12
    5bc0:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    5bc2:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    5bc4:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    5bc8:	4618      	mov	r0, r3
    5bca:	f7ff ff73 	bl	5ab4 <usb_serial_write>
}
    5bce:	b003      	add	sp, #12
    5bd0:	f85d fb04 	ldr.w	pc, [sp], #4

00005bd4 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    5bd4:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    5bd6:	4d0e      	ldr	r5, [pc, #56]	; (5c10 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5bd8:	4c0e      	ldr	r4, [pc, #56]	; (5c14 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    5bda:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    5bdc:	2301      	movs	r3, #1
    5bde:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    5be0:	b128      	cbz	r0, 5bee <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5be2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    5be4:	2300      	movs	r3, #0
    5be6:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    5be8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    5bec:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5bee:	4b0a      	ldr	r3, [pc, #40]	; (5c18 <usb_serial_write_buffer_free+0x44>)
    5bf0:	781b      	ldrb	r3, [r3, #0]
    5bf2:	b913      	cbnz	r3, 5bfa <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    5bf4:	2000      	movs	r0, #0
    5bf6:	7020      	strb	r0, [r4, #0]
			return 0;
    5bf8:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5bfa:	2004      	movs	r0, #4
    5bfc:	f7ff f81e 	bl	4c3c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    5c00:	2807      	cmp	r0, #7
    5c02:	d8f7      	bhi.n	5bf4 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    5c04:	f7ff feaa 	bl	595c <usb_malloc>
    5c08:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    5c0a:	2800      	cmp	r0, #0
    5c0c:	d1e9      	bne.n	5be2 <usb_serial_write_buffer_free+0xe>
    5c0e:	e7f1      	b.n	5bf4 <usb_serial_write_buffer_free+0x20>
    5c10:	1fff9870 	.word	0x1fff9870
    5c14:	1fff986d 	.word	0x1fff986d
    5c18:	1fff9864 	.word	0x1fff9864

00005c1c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    5c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    5c1e:	4b11      	ldr	r3, [pc, #68]	; (5c64 <usb_serial_flush_output+0x48>)
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	b18b      	cbz	r3, 5c48 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    5c24:	4e10      	ldr	r6, [pc, #64]	; (5c68 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5c26:	4d11      	ldr	r5, [pc, #68]	; (5c6c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    5c28:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    5c2a:	2701      	movs	r7, #1
    5c2c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    5c2e:	b164      	cbz	r4, 5c4a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    5c30:	4a0f      	ldr	r2, [pc, #60]	; (5c70 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    5c32:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    5c34:	2700      	movs	r7, #0
    5c36:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5c38:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    5c3a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5c3c:	2004      	movs	r0, #4
    5c3e:	f7ff f877 	bl	4d30 <usb_tx>
		tx_packet = NULL;
    5c42:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    5c44:	2300      	movs	r3, #0
    5c46:	702b      	strb	r3, [r5, #0]
    5c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5c4a:	f7ff fe87 	bl	595c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5c4e:	4b08      	ldr	r3, [pc, #32]	; (5c70 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    5c50:	b128      	cbz	r0, 5c5e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    5c52:	4601      	mov	r1, r0
    5c54:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    5c56:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    5c58:	f7ff f86a 	bl	4d30 <usb_tx>
    5c5c:	e7f2      	b.n	5c44 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5c5e:	701f      	strb	r7, [r3, #0]
    5c60:	e7f0      	b.n	5c44 <usb_serial_flush_output+0x28>
    5c62:	bf00      	nop
    5c64:	1fff9864 	.word	0x1fff9864
    5c68:	1fff9870 	.word	0x1fff9870
    5c6c:	1fff986d 	.word	0x1fff986d
    5c70:	1fff986c 	.word	0x1fff986c

00005c74 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    5c74:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    5c76:	4b0e      	ldr	r3, [pc, #56]	; (5cb0 <usb_serial_flush_callback+0x3c>)
    5c78:	781b      	ldrb	r3, [r3, #0]
    5c7a:	b973      	cbnz	r3, 5c9a <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    5c7c:	4c0d      	ldr	r4, [pc, #52]	; (5cb4 <usb_serial_flush_callback+0x40>)
    5c7e:	6821      	ldr	r1, [r4, #0]
    5c80:	b161      	cbz	r1, 5c9c <usb_serial_flush_callback+0x28>
    5c82:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    5c86:	884b      	ldrh	r3, [r1, #2]
    5c88:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    5c8a:	2004      	movs	r0, #4
    5c8c:	f7ff f850 	bl	4d30 <usb_tx>
		tx_packet = NULL;
    5c90:	6025      	str	r5, [r4, #0]
    5c92:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    5c94:	4b08      	ldr	r3, [pc, #32]	; (5cb8 <usb_serial_flush_callback+0x44>)
    5c96:	2201      	movs	r2, #1
    5c98:	701a      	strb	r2, [r3, #0]
    5c9a:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    5c9c:	f7ff fe5e 	bl	595c <usb_malloc>
		if (tx) {
    5ca0:	2800      	cmp	r0, #0
    5ca2:	d0f7      	beq.n	5c94 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    5ca4:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    5ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    5caa:	2004      	movs	r0, #4
    5cac:	f7ff b840 	b.w	4d30 <usb_tx>
    5cb0:	1fff986d 	.word	0x1fff986d
    5cb4:	1fff9870 	.word	0x1fff9870
    5cb8:	1fff986c 	.word	0x1fff986c

00005cbc <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    5cbc:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5cbe:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5cc2:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    5cc4:	7f43      	ldrb	r3, [r0, #29]
    5cc6:	b933      	cbnz	r3, 5cd6 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    5cc8:	7f01      	ldrb	r1, [r0, #28]
    5cca:	2901      	cmp	r1, #1
    5ccc:	d007      	beq.n	5cde <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    5cce:	2903      	cmp	r1, #3
    5cd0:	d00f      	beq.n	5cf2 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    5cd2:	2301      	movs	r3, #1
    5cd4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5cd6:	b902      	cbnz	r2, 5cda <EventResponder::triggerEventNotImmediate()+0x1e>
    5cd8:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    5cda:	bc10      	pop	{r4}
    5cdc:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    5cde:	4c12      	ldr	r4, [pc, #72]	; (5d28 <EventResponder::triggerEventNotImmediate()+0x6c>)
    5ce0:	6821      	ldr	r1, [r4, #0]
    5ce2:	b1a1      	cbz	r1, 5d0e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    5ce4:	4911      	ldr	r1, [pc, #68]	; (5d2c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    5ce6:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    5ce8:	680b      	ldr	r3, [r1, #0]
    5cea:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    5cec:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    5cee:	6158      	str	r0, [r3, #20]
    5cf0:	e7ef      	b.n	5cd2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    5cf2:	4c0f      	ldr	r4, [pc, #60]	; (5d30 <EventResponder::triggerEventNotImmediate()+0x74>)
    5cf4:	6821      	ldr	r1, [r4, #0]
    5cf6:	b181      	cbz	r1, 5d1a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    5cf8:	490e      	ldr	r1, [pc, #56]	; (5d34 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    5cfa:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    5cfc:	680b      	ldr	r3, [r1, #0]
    5cfe:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    5d00:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    5d02:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    5d04:	4b0c      	ldr	r3, [pc, #48]	; (5d38 <EventResponder::triggerEventNotImmediate()+0x7c>)
    5d06:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    5d0a:	6019      	str	r1, [r3, #0]
    5d0c:	e7e1      	b.n	5cd2 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    5d0e:	4b07      	ldr	r3, [pc, #28]	; (5d2c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    5d10:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5d12:	6181      	str	r1, [r0, #24]
				firstYield = this;
    5d14:	6020      	str	r0, [r4, #0]
				lastYield = this;
    5d16:	6018      	str	r0, [r3, #0]
    5d18:	e7db      	b.n	5cd2 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    5d1a:	4b06      	ldr	r3, [pc, #24]	; (5d34 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    5d1c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    5d1e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    5d20:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    5d22:	6018      	str	r0, [r3, #0]
    5d24:	e7ee      	b.n	5d04 <EventResponder::triggerEventNotImmediate()+0x48>
    5d26:	bf00      	nop
    5d28:	1fff9890 	.word	0x1fff9890
    5d2c:	1fff988c 	.word	0x1fff988c
    5d30:	1fff9880 	.word	0x1fff9880
    5d34:	1fff9884 	.word	0x1fff9884
    5d38:	e000ed04 	.word	0xe000ed04

00005d3c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    5d3c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5d3e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5d40:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5d42:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5d44:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    5d46:	d002      	beq.n	5d4e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    5d48:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5d4a:	f7ff bfb7 	b.w	5cbc <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5d4e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    5d50:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5d52:	4718      	bx	r3

00005d54 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    5d54:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d56:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5d5a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5d5c:	4c0c      	ldr	r4, [pc, #48]	; (5d90 <EventResponder::runFromInterrupt()+0x3c>)
    5d5e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5d60:	b180      	cbz	r0, 5d84 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5d62:	4e0c      	ldr	r6, [pc, #48]	; (5d94 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    5d64:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    5d66:	6943      	ldr	r3, [r0, #20]
    5d68:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    5d6a:	b173      	cbz	r3, 5d8a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    5d6c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5d6e:	b902      	cbnz	r2, 5d72 <EventResponder::runFromInterrupt()+0x1e>
    5d70:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    5d72:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    5d74:	6883      	ldr	r3, [r0, #8]
    5d76:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5d78:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    5d7c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    5d7e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    5d80:	2800      	cmp	r0, #0
    5d82:	d1f0      	bne.n	5d66 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5d84:	b902      	cbnz	r2, 5d88 <EventResponder::runFromInterrupt()+0x34>
    5d86:	b662      	cpsie	i
    5d88:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    5d8a:	6033      	str	r3, [r6, #0]
    5d8c:	e7ef      	b.n	5d6e <EventResponder::runFromInterrupt()+0x1a>
    5d8e:	bf00      	nop
    5d90:	1fff9880 	.word	0x1fff9880
    5d94:	1fff9884 	.word	0x1fff9884

00005d98 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    5d98:	f7ff bfdc 	b.w	5d54 <EventResponder::runFromInterrupt()>

00005d9c <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    5d9c:	4a18      	ldr	r2, [pc, #96]	; (5e00 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    5d9e:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    5da0:	6814      	ldr	r4, [r2, #0]
    5da2:	2c00      	cmp	r4, #0
    5da4:	d027      	beq.n	5df6 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    5da6:	6803      	ldr	r3, [r0, #0]
    5da8:	6821      	ldr	r1, [r4, #0]
    5daa:	428b      	cmp	r3, r1
    5dac:	d20e      	bcs.n	5dcc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5dae:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    5db0:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    5db2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5db4:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    5db6:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    5db8:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    5dba:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    5dbc:	2302      	movs	r3, #2
    5dbe:	7503      	strb	r3, [r0, #20]
}
    5dc0:	bc30      	pop	{r4, r5}
    5dc2:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    5dc4:	6811      	ldr	r1, [r2, #0]
    5dc6:	428b      	cmp	r3, r1
    5dc8:	4614      	mov	r4, r2
    5dca:	d308      	bcc.n	5dde <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5dcc:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    5dce:	1a5b      	subs	r3, r3, r1
    5dd0:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    5dd2:	2a00      	cmp	r2, #0
    5dd4:	d1f6      	bne.n	5dc4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    5dd6:	6082      	str	r2, [r0, #8]
		_prev = timer;
    5dd8:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    5dda:	60a0      	str	r0, [r4, #8]
    5ddc:	e7ee      	b.n	5dbc <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    5dde:	68d2      	ldr	r2, [r2, #12]
    5de0:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    5de2:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    5de4:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    5de6:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    5de8:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    5dea:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    5dec:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    5dee:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    5df0:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    5df2:	bc30      	pop	{r4, r5}
    5df4:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    5df6:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    5df8:	60c4      	str	r4, [r0, #12]
		listActive = this;
    5dfa:	6010      	str	r0, [r2, #0]
    5dfc:	e7de      	b.n	5dbc <MillisTimer::addToActiveList()+0x20>
    5dfe:	bf00      	nop
    5e00:	1fff9888 	.word	0x1fff9888

00005e04 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    5e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    5e06:	4e22      	ldr	r6, [pc, #136]	; (5e90 <MillisTimer::runFromTimer()+0x8c>)
    5e08:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    5e0a:	b32c      	cbz	r4, 5e58 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5e0c:	6823      	ldr	r3, [r4, #0]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d13a      	bne.n	5e88 <MillisTimer::runFromTimer()+0x84>
    5e12:	4f20      	ldr	r7, [pc, #128]	; (5e94 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    5e14:	461d      	mov	r5, r3
    5e16:	e004      	b.n	5e22 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    5e18:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5e1a:	b1ec      	cbz	r4, 5e58 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    5e1c:	6823      	ldr	r3, [r4, #0]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d132      	bne.n	5e88 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    5e22:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    5e24:	b103      	cbz	r3, 5e28 <MillisTimer::runFromTimer()+0x24>
    5e26:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    5e28:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    5e2a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5e2c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    5e2e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5e30:	681b      	ldr	r3, [r3, #0]
    5e32:	42bb      	cmp	r3, r7
    5e34:	d121      	bne.n	5e7a <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    5e36:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    5e38:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    5e3a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    5e3c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    5e3e:	d020      	beq.n	5e82 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    5e40:	f7ff ff3c 	bl	5cbc <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    5e44:	6863      	ldr	r3, [r4, #4]
    5e46:	2b00      	cmp	r3, #0
    5e48:	d0e6      	beq.n	5e18 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    5e4a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    5e4c:	4620      	mov	r0, r4
    5e4e:	f7ff ffa5 	bl	5d9c <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    5e52:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    5e54:	2c00      	cmp	r4, #0
    5e56:	d1e1      	bne.n	5e1c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5e58:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    5e5c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5e5e:	4a0e      	ldr	r2, [pc, #56]	; (5e98 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5e60:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    5e62:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    5e64:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    5e66:	b903      	cbnz	r3, 5e6a <MillisTimer::runFromTimer()+0x66>
    5e68:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    5e6a:	b128      	cbz	r0, 5e78 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    5e6c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    5e6e:	f7ff ff95 	bl	5d9c <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    5e72:	4620      	mov	r0, r4
    5e74:	2800      	cmp	r0, #0
    5e76:	d1f9      	bne.n	5e6c <MillisTimer::runFromTimer()+0x68>
    5e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    5e7a:	4622      	mov	r2, r4
    5e7c:	2100      	movs	r1, #0
    5e7e:	4798      	blx	r3
    5e80:	e7e0      	b.n	5e44 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    5e82:	6883      	ldr	r3, [r0, #8]
    5e84:	4798      	blx	r3
    5e86:	e7dd      	b.n	5e44 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    5e88:	3b01      	subs	r3, #1
    5e8a:	6023      	str	r3, [r4, #0]
			break;
    5e8c:	e7e4      	b.n	5e58 <MillisTimer::runFromTimer()+0x54>
    5e8e:	bf00      	nop
    5e90:	1fff9888 	.word	0x1fff9888
    5e94:	00005d3d 	.word	0x00005d3d
    5e98:	1fff9898 	.word	0x1fff9898

00005e9c <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    5e9c:	4a02      	ldr	r2, [pc, #8]	; (5ea8 <systick_isr+0xc>)
    5e9e:	6813      	ldr	r3, [r2, #0]
    5ea0:	3301      	adds	r3, #1
    5ea2:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    5ea4:	f7ff bfae 	b.w	5e04 <MillisTimer::runFromTimer()>
    5ea8:	1fff9780 	.word	0x1fff9780

00005eac <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    5eac:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    5eae:	f7fc ff73 	bl	2d98 <setup>
	while (1) {
		loop();
    5eb2:	f7fd f857 	bl	2f64 <loop>
		yield();
    5eb6:	f000 f871 	bl	5f9c <yield>
    5eba:	e7fa      	b.n	5eb2 <main+0x6>

00005ebc <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5ebc:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    5ebe:	4a06      	ldr	r2, [pc, #24]	; (5ed8 <Print::println()+0x1c>)
	return write(buf, 2);
    5ec0:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5ec2:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    5ec4:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    5ec6:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    5ec8:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    5eca:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    5ece:	2202      	movs	r2, #2
    5ed0:	4798      	blx	r3
}
    5ed2:	b003      	add	sp, #12
    5ed4:	f85d fb04 	ldr.w	pc, [sp], #4
    5ed8:	000085a8 	.word	0x000085a8

00005edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    5edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ede:	4607      	mov	r7, r0
    5ee0:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    5ee2:	2a00      	cmp	r2, #0
    5ee4:	d033      	beq.n	5f4e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    5ee6:	2a01      	cmp	r2, #1
    5ee8:	bf08      	it	eq
    5eea:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    5eec:	b351      	cbz	r1, 5f44 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    5eee:	2421      	movs	r4, #33	; 0x21
    5ef0:	e000      	b.n	5ef4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    5ef2:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    5ef4:	fbb1 f5f2 	udiv	r5, r1, r2
    5ef8:	fb02 1115 	mls	r1, r2, r5, r1
    5efc:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    5efe:	2909      	cmp	r1, #9
    5f00:	f100 0130 	add.w	r1, r0, #48	; 0x30
    5f04:	bf98      	it	ls
    5f06:	b2c8      	uxtbls	r0, r1
    5f08:	a90a      	add	r1, sp, #40	; 0x28
    5f0a:	bf88      	it	hi
    5f0c:	3037      	addhi	r0, #55	; 0x37
    5f0e:	4421      	add	r1, r4
    5f10:	bf88      	it	hi
    5f12:	b2c0      	uxtbhi	r0, r0
    5f14:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    5f18:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    5f1a:	4629      	mov	r1, r5
    5f1c:	2d00      	cmp	r5, #0
    5f1e:	d1e8      	bne.n	5ef2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    5f20:	b133      	cbz	r3, 5f30 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    5f22:	3c01      	subs	r4, #1
    5f24:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    5f26:	ab0a      	add	r3, sp, #40	; 0x28
    5f28:	4423      	add	r3, r4
    5f2a:	222d      	movs	r2, #45	; 0x2d
    5f2c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    5f30:	683b      	ldr	r3, [r7, #0]
    5f32:	aa01      	add	r2, sp, #4
    5f34:	1911      	adds	r1, r2, r4
    5f36:	685b      	ldr	r3, [r3, #4]
    5f38:	4638      	mov	r0, r7
    5f3a:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    5f3e:	4798      	blx	r3
}
    5f40:	b00b      	add	sp, #44	; 0x2c
    5f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    5f44:	2230      	movs	r2, #48	; 0x30
    5f46:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    5f4a:	2421      	movs	r4, #33	; 0x21
    5f4c:	e7e8      	b.n	5f20 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    5f4e:	6803      	ldr	r3, [r0, #0]
    5f50:	b2c9      	uxtb	r1, r1
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    5f56:	b00b      	add	sp, #44	; 0x2c
    5f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f5a:	bf00      	nop

00005f5c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    5f5c:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    5f5e:	bfba      	itte	lt
    5f60:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    5f62:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    5f64:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    5f66:	220a      	movs	r2, #10
    5f68:	f7ff bfb8 	b.w	5edc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00005f6c <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    5f6c:	6081      	str	r1, [r0, #8]
    5f6e:	4770      	bx	lr

00005f70 <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    5f70:	f7ff bd84 	b.w	5a7c <usb_serial_flush_input>

00005f74 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    5f74:	f7ff bd5c 	b.w	5a30 <usb_serial_peekchar>

00005f78 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    5f78:	f7ff bd36 	b.w	59e8 <usb_serial_getchar>

00005f7c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5f7c:	f7ff bd70 	b.w	5a60 <usb_serial_available>

00005f80 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    5f80:	f7ff be4c 	b.w	5c1c <usb_serial_flush_output>

00005f84 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    5f84:	f7ff be26 	b.w	5bd4 <usb_serial_write_buffer_free>

00005f88 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5f88:	4608      	mov	r0, r1
    5f8a:	4611      	mov	r1, r2
    5f8c:	f7ff bd92 	b.w	5ab4 <usb_serial_write>

00005f90 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    5f90:	4608      	mov	r0, r1
    5f92:	f7ff be13 	b.w	5bbc <usb_serial_putchar>
    5f96:	bf00      	nop

00005f98 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop

00005f9c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    5f9c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    5f9e:	4c22      	ldr	r4, [pc, #136]	; (6028 <yield+0x8c>)
    5fa0:	7823      	ldrb	r3, [r4, #0]
    5fa2:	b103      	cbz	r3, 5fa6 <yield+0xa>
    5fa4:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    5fa6:	2301      	movs	r3, #1
    5fa8:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    5faa:	f7ff fd59 	bl	5a60 <usb_serial_available>
	if (Serial.available()) serialEvent();
    5fae:	bb70      	cbnz	r0, 600e <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    5fb0:	f000 f868 	bl	6084 <serial_available>
	if (Serial1.available()) serialEvent1();
    5fb4:	bb40      	cbnz	r0, 6008 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    5fb6:	f000 f8fb 	bl	61b0 <serial2_available>
	if (Serial2.available()) serialEvent2();
    5fba:	bb10      	cbnz	r0, 6002 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    5fbc:	f000 f98e 	bl	62dc <serial3_available>
	if (Serial3.available()) serialEvent3();
    5fc0:	b9e0      	cbnz	r0, 5ffc <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    5fc2:	2300      	movs	r3, #0
    5fc4:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    5fc6:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d1ea      	bne.n	5fa4 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    5fce:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    5fd2:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    5fd4:	4b15      	ldr	r3, [pc, #84]	; (602c <yield+0x90>)
    5fd6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    5fd8:	b1e0      	cbz	r0, 6014 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    5fda:	4c15      	ldr	r4, [pc, #84]	; (6030 <yield+0x94>)
    5fdc:	7822      	ldrb	r2, [r4, #0]
    5fde:	b9ca      	cbnz	r2, 6014 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    5fe0:	6945      	ldr	r5, [r0, #20]
    5fe2:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    5fe4:	2301      	movs	r3, #1
    5fe6:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    5fe8:	b1c5      	cbz	r5, 601c <yield+0x80>
			firstYield->_prev = nullptr;
    5fea:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    5fec:	b901      	cbnz	r1, 5ff0 <yield+0x54>
    5fee:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    5ff0:	2500      	movs	r5, #0
    5ff2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    5ff4:	6883      	ldr	r3, [r0, #8]
    5ff6:	4798      	blx	r3
		runningFromYield = false;
    5ff8:	7025      	strb	r5, [r4, #0]
    5ffa:	e7d3      	b.n	5fa4 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    5ffc:	f000 fa30 	bl	6460 <serialEvent3()>
    6000:	e7df      	b.n	5fc2 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    6002:	f000 fa2b 	bl	645c <serialEvent2()>
    6006:	e7d9      	b.n	5fbc <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    6008:	f000 fa26 	bl	6458 <serialEvent1()>
    600c:	e7d3      	b.n	5fb6 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    600e:	f7ff ffc3 	bl	5f98 <serialEvent()>
    6012:	e7cd      	b.n	5fb0 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6014:	2900      	cmp	r1, #0
    6016:	d1c5      	bne.n	5fa4 <yield+0x8>
    6018:	b662      	cpsie	i
    601a:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    601c:	4b05      	ldr	r3, [pc, #20]	; (6034 <yield+0x98>)
    601e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    6020:	2900      	cmp	r1, #0
    6022:	d1e5      	bne.n	5ff0 <yield+0x54>
    6024:	e7e3      	b.n	5fee <yield+0x52>
    6026:	bf00      	nop
    6028:	1fff989c 	.word	0x1fff989c
    602c:	1fff9890 	.word	0x1fff9890
    6030:	1fff9894 	.word	0x1fff9894
    6034:	1fff988c 	.word	0x1fff988c

00006038 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6038:	b4f0      	push	{r4, r5, r6, r7}
    603a:	1e4d      	subs	r5, r1, #1
    603c:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    603e:	2400      	movs	r4, #0
    6040:	e000      	b.n	6044 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6042:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    6044:	fbb0 f3f2 	udiv	r3, r0, r2
    6048:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    604c:	2809      	cmp	r0, #9
    604e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6052:	bf8a      	itet	hi
    6054:	3037      	addhi	r0, #55	; 0x37
    6056:	b2f8      	uxtbls	r0, r7
    6058:	b2c0      	uxtbhi	r0, r0
    605a:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    605e:	4618      	mov	r0, r3
    6060:	2b00      	cmp	r3, #0
    6062:	d1ee      	bne.n	6042 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    6064:	190a      	adds	r2, r1, r4
    6066:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6068:	b14c      	cbz	r4, 607e <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    606a:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    606c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6070:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6072:	3301      	adds	r3, #1
    6074:	1ae0      	subs	r0, r4, r3
    6076:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6078:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    607c:	dbf5      	blt.n	606a <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    607e:	4608      	mov	r0, r1
    6080:	bcf0      	pop	{r4, r5, r6, r7}
    6082:	4770      	bx	lr

00006084 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6084:	4a05      	ldr	r2, [pc, #20]	; (609c <serial_available+0x18>)
	tail = rx_buffer_tail;
    6086:	4b06      	ldr	r3, [pc, #24]	; (60a0 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    6088:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    608a:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    608c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    608e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    6090:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    6092:	bf38      	it	cc
    6094:	3040      	addcc	r0, #64	; 0x40
    6096:	1ac0      	subs	r0, r0, r3
}
    6098:	4770      	bx	lr
    609a:	bf00      	nop
    609c:	1fff98a4 	.word	0x1fff98a4
    60a0:	1fff98a5 	.word	0x1fff98a5

000060a4 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    60a4:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    60a6:	4b38      	ldr	r3, [pc, #224]	; (6188 <uart0_status_isr+0xe4>)
    60a8:	791a      	ldrb	r2, [r3, #4]
    60aa:	f012 0f30 	tst.w	r2, #48	; 0x30
    60ae:	d02c      	beq.n	610a <uart0_status_isr+0x66>
		__disable_irq();
    60b0:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    60b2:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    60b4:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    60b8:	2900      	cmp	r1, #0
    60ba:	d03d      	beq.n	6138 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    60bc:	b662      	cpsie	i
			head = rx_buffer_head;
    60be:	4f33      	ldr	r7, [pc, #204]	; (618c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    60c0:	4933      	ldr	r1, [pc, #204]	; (6190 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    60c2:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    60c4:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    60c6:	4e33      	ldr	r6, [pc, #204]	; (6194 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    60c8:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    60ca:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    60cc:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    60ce:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    60d0:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    60d2:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    60d4:	bf28      	it	cs
    60d6:	2300      	movcs	r3, #0
				if (newhead != tail) {
    60d8:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    60da:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    60de:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    60e0:	bf1c      	itt	ne
    60e2:	54f1      	strbne	r1, [r6, r3]
    60e4:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    60e6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    60ea:	d1f0      	bne.n	60ce <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    60ec:	4b2a      	ldr	r3, [pc, #168]	; (6198 <uart0_status_isr+0xf4>)
    60ee:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    60f0:	b2c2      	uxtb	r2, r0
    60f2:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    60f4:	b14b      	cbz	r3, 610a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    60f6:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    60f8:	bf36      	itet	cc
    60fa:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    60fe:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    6100:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    6102:	2827      	cmp	r0, #39	; 0x27
    6104:	bfc4      	itt	gt
    6106:	2201      	movgt	r2, #1
    6108:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    610a:	491f      	ldr	r1, [pc, #124]	; (6188 <uart0_status_isr+0xe4>)
    610c:	78ca      	ldrb	r2, [r1, #3]
    610e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    6110:	0615      	lsls	r5, r2, #24
    6112:	d416      	bmi.n	6142 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    6114:	0652      	lsls	r2, r2, #25
    6116:	d50d      	bpl.n	6134 <uart0_status_isr+0x90>
    6118:	4b1b      	ldr	r3, [pc, #108]	; (6188 <uart0_status_isr+0xe4>)
    611a:	791b      	ldrb	r3, [r3, #4]
    611c:	065b      	lsls	r3, r3, #25
    611e:	d509      	bpl.n	6134 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    6120:	4b1e      	ldr	r3, [pc, #120]	; (619c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    6122:	491f      	ldr	r1, [pc, #124]	; (61a0 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6124:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    6126:	2200      	movs	r2, #0
    6128:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    612a:	b103      	cbz	r3, 612e <uart0_status_isr+0x8a>
    612c:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    612e:	4b16      	ldr	r3, [pc, #88]	; (6188 <uart0_status_isr+0xe4>)
    6130:	223c      	movs	r2, #60	; 0x3c
    6132:	70da      	strb	r2, [r3, #3]
	}
}
    6134:	bcf0      	pop	{r4, r5, r6, r7}
    6136:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    6138:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    613a:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    613c:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    613e:	b662      	cpsie	i
    6140:	e7e3      	b.n	610a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    6142:	790b      	ldrb	r3, [r1, #4]
    6144:	061c      	lsls	r4, r3, #24
    6146:	d5e5      	bpl.n	6114 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    6148:	4b16      	ldr	r3, [pc, #88]	; (61a4 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    614a:	4e17      	ldr	r6, [pc, #92]	; (61a8 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    614c:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    614e:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6150:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    6152:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6154:	429c      	cmp	r4, r3
    6156:	d00e      	beq.n	6176 <uart0_status_isr+0xd2>
    6158:	4d14      	ldr	r5, [pc, #80]	; (61ac <uart0_status_isr+0x108>)
    615a:	e001      	b.n	6160 <uart0_status_isr+0xbc>
    615c:	42a3      	cmp	r3, r4
    615e:	d00a      	beq.n	6176 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    6160:	3301      	adds	r3, #1
    6162:	2b40      	cmp	r3, #64	; 0x40
    6164:	bf28      	it	cs
    6166:	2300      	movcs	r3, #0
			avail = UART0_S1;
    6168:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    616a:	5ce8      	ldrb	r0, [r5, r3]
    616c:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    616e:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    6170:	7d08      	ldrb	r0, [r1, #20]
    6172:	2807      	cmp	r0, #7
    6174:	d9f2      	bls.n	615c <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    6176:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    6178:	4903      	ldr	r1, [pc, #12]	; (6188 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    617a:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    617c:	790b      	ldrb	r3, [r1, #4]
    617e:	0618      	lsls	r0, r3, #24
    6180:	bf44      	itt	mi
    6182:	237c      	movmi	r3, #124	; 0x7c
    6184:	70cb      	strbmi	r3, [r1, #3]
    6186:	e7c5      	b.n	6114 <uart0_status_isr+0x70>
    6188:	4006a000 	.word	0x4006a000
    618c:	1fff98a4 	.word	0x1fff98a4
    6190:	1fff98a5 	.word	0x1fff98a5
    6194:	1fff98e8 	.word	0x1fff98e8
    6198:	1fff98a0 	.word	0x1fff98a0
    619c:	1fff992c 	.word	0x1fff992c
    61a0:	1fff9928 	.word	0x1fff9928
    61a4:	1fff9930 	.word	0x1fff9930
    61a8:	1fff9929 	.word	0x1fff9929
    61ac:	1fff98a8 	.word	0x1fff98a8

000061b0 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    61b0:	4a05      	ldr	r2, [pc, #20]	; (61c8 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    61b2:	4b06      	ldr	r3, [pc, #24]	; (61cc <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    61b4:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    61b6:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    61b8:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    61ba:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    61bc:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    61be:	bf38      	it	cc
    61c0:	3040      	addcc	r0, #64	; 0x40
    61c2:	1ac0      	subs	r0, r0, r3
}
    61c4:	4770      	bx	lr
    61c6:	bf00      	nop
    61c8:	1fff99a4 	.word	0x1fff99a4
    61cc:	1fff9939 	.word	0x1fff9939

000061d0 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    61d0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    61d2:	4b38      	ldr	r3, [pc, #224]	; (62b4 <uart1_status_isr+0xe4>)
    61d4:	791a      	ldrb	r2, [r3, #4]
    61d6:	f012 0f30 	tst.w	r2, #48	; 0x30
    61da:	d02c      	beq.n	6236 <uart1_status_isr+0x66>
		__disable_irq();
    61dc:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    61de:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    61e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    61e4:	2900      	cmp	r1, #0
    61e6:	d03d      	beq.n	6264 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    61e8:	b662      	cpsie	i
			head = rx_buffer_head;
    61ea:	4f33      	ldr	r7, [pc, #204]	; (62b8 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    61ec:	4933      	ldr	r1, [pc, #204]	; (62bc <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    61ee:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    61f0:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    61f2:	4e33      	ldr	r6, [pc, #204]	; (62c0 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    61f4:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    61f6:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    61f8:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    61fa:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    61fc:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    61fe:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    6200:	bf28      	it	cs
    6202:	2300      	movcs	r3, #0
				if (newhead != tail) {
    6204:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    6206:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    620a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    620c:	bf1c      	itt	ne
    620e:	54f1      	strbne	r1, [r6, r3]
    6210:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    6212:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    6216:	d1f0      	bne.n	61fa <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    6218:	4b2a      	ldr	r3, [pc, #168]	; (62c4 <uart1_status_isr+0xf4>)
    621a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    621c:	b2c2      	uxtb	r2, r0
    621e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    6220:	b14b      	cbz	r3, 6236 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    6222:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    6224:	bf36      	itet	cc
    6226:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    622a:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    622c:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    622e:	2827      	cmp	r0, #39	; 0x27
    6230:	bfc4      	itt	gt
    6232:	2201      	movgt	r2, #1
    6234:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    6236:	491f      	ldr	r1, [pc, #124]	; (62b4 <uart1_status_isr+0xe4>)
    6238:	78ca      	ldrb	r2, [r1, #3]
    623a:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    623c:	0615      	lsls	r5, r2, #24
    623e:	d416      	bmi.n	626e <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    6240:	0652      	lsls	r2, r2, #25
    6242:	d50d      	bpl.n	6260 <uart1_status_isr+0x90>
    6244:	4b1b      	ldr	r3, [pc, #108]	; (62b4 <uart1_status_isr+0xe4>)
    6246:	791b      	ldrb	r3, [r3, #4]
    6248:	065b      	lsls	r3, r3, #25
    624a:	d509      	bpl.n	6260 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    624c:	4b1e      	ldr	r3, [pc, #120]	; (62c8 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    624e:	491f      	ldr	r1, [pc, #124]	; (62cc <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    6250:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    6252:	2200      	movs	r2, #0
    6254:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6256:	b103      	cbz	r3, 625a <uart1_status_isr+0x8a>
    6258:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    625a:	4b16      	ldr	r3, [pc, #88]	; (62b4 <uart1_status_isr+0xe4>)
    625c:	223c      	movs	r2, #60	; 0x3c
    625e:	70da      	strb	r2, [r3, #3]
	}
}
    6260:	bcf0      	pop	{r4, r5, r6, r7}
    6262:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6264:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    6266:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    6268:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    626a:	b662      	cpsie	i
    626c:	e7e3      	b.n	6236 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    626e:	790b      	ldrb	r3, [r1, #4]
    6270:	061c      	lsls	r4, r3, #24
    6272:	d5e5      	bpl.n	6240 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    6274:	4b16      	ldr	r3, [pc, #88]	; (62d0 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    6276:	4e17      	ldr	r6, [pc, #92]	; (62d4 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    6278:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    627a:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    627c:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    627e:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    6280:	429c      	cmp	r4, r3
    6282:	d00e      	beq.n	62a2 <uart1_status_isr+0xd2>
    6284:	4d14      	ldr	r5, [pc, #80]	; (62d8 <uart1_status_isr+0x108>)
    6286:	e001      	b.n	628c <uart1_status_isr+0xbc>
    6288:	42a3      	cmp	r3, r4
    628a:	d00a      	beq.n	62a2 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    628c:	3301      	adds	r3, #1
    628e:	2b28      	cmp	r3, #40	; 0x28
    6290:	bf28      	it	cs
    6292:	2300      	movcs	r3, #0
			avail = UART1_S1;
    6294:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    6296:	5ce8      	ldrb	r0, [r5, r3]
    6298:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    629a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    629c:	7d08      	ldrb	r0, [r1, #20]
    629e:	2807      	cmp	r0, #7
    62a0:	d9f2      	bls.n	6288 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    62a2:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    62a4:	4903      	ldr	r1, [pc, #12]	; (62b4 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    62a6:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    62a8:	790b      	ldrb	r3, [r1, #4]
    62aa:	0618      	lsls	r0, r3, #24
    62ac:	bf44      	itt	mi
    62ae:	237c      	movmi	r3, #124	; 0x7c
    62b0:	70cb      	strbmi	r3, [r1, #3]
    62b2:	e7c5      	b.n	6240 <uart1_status_isr+0x70>
    62b4:	4006b000 	.word	0x4006b000
    62b8:	1fff99a4 	.word	0x1fff99a4
    62bc:	1fff9939 	.word	0x1fff9939
    62c0:	1fff9964 	.word	0x1fff9964
    62c4:	1fff9934 	.word	0x1fff9934
    62c8:	1fff99a8 	.word	0x1fff99a8
    62cc:	1fff9938 	.word	0x1fff9938
    62d0:	1fff99ac 	.word	0x1fff99ac
    62d4:	1fff99a5 	.word	0x1fff99a5
    62d8:	1fff993c 	.word	0x1fff993c

000062dc <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    62dc:	4a05      	ldr	r2, [pc, #20]	; (62f4 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    62de:	4b06      	ldr	r3, [pc, #24]	; (62f8 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    62e0:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    62e2:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    62e4:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    62e6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    62e8:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    62ea:	bf38      	it	cc
    62ec:	3040      	addcc	r0, #64	; 0x40
    62ee:	1ac0      	subs	r0, r0, r3
}
    62f0:	4770      	bx	lr
    62f2:	bf00      	nop
    62f4:	1fff99b4 	.word	0x1fff99b4
    62f8:	1fff99b5 	.word	0x1fff99b5

000062fc <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    62fc:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    62fe:	4b2b      	ldr	r3, [pc, #172]	; (63ac <uart2_status_isr+0xb0>)
    6300:	791a      	ldrb	r2, [r3, #4]
    6302:	0694      	lsls	r4, r2, #26
    6304:	d51f      	bpl.n	6346 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6306:	482a      	ldr	r0, [pc, #168]	; (63b0 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    6308:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    630a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    630c:	4929      	ldr	r1, [pc, #164]	; (63b4 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    630e:	3301      	adds	r3, #1
    6310:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6312:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    6314:	bfc8      	it	gt
    6316:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    6318:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    631a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    631c:	d003      	beq.n	6326 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    631e:	4c26      	ldr	r4, [pc, #152]	; (63b8 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    6320:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    6322:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    6324:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    6326:	4a25      	ldr	r2, [pc, #148]	; (63bc <uart2_status_isr+0xc0>)
    6328:	6811      	ldr	r1, [r2, #0]
    632a:	b161      	cbz	r1, 6346 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    632c:	4a24      	ldr	r2, [pc, #144]	; (63c0 <uart2_status_isr+0xc4>)
    632e:	7812      	ldrb	r2, [r2, #0]
    6330:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    6332:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    6334:	bf36      	itet	cc
    6336:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    633a:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    633c:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    633e:	2b27      	cmp	r3, #39	; 0x27
    6340:	bfc4      	itt	gt
    6342:	2301      	movgt	r3, #1
    6344:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    6346:	4a19      	ldr	r2, [pc, #100]	; (63ac <uart2_status_isr+0xb0>)
    6348:	78d3      	ldrb	r3, [r2, #3]
    634a:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    634c:	0618      	lsls	r0, r3, #24
    634e:	d411      	bmi.n	6374 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    6350:	065a      	lsls	r2, r3, #25
    6352:	d50d      	bpl.n	6370 <uart2_status_isr+0x74>
    6354:	4b15      	ldr	r3, [pc, #84]	; (63ac <uart2_status_isr+0xb0>)
    6356:	791b      	ldrb	r3, [r3, #4]
    6358:	065b      	lsls	r3, r3, #25
    635a:	d509      	bpl.n	6370 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    635c:	4b19      	ldr	r3, [pc, #100]	; (63c4 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    635e:	491a      	ldr	r1, [pc, #104]	; (63c8 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    6360:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    6362:	2200      	movs	r2, #0
    6364:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    6366:	b103      	cbz	r3, 636a <uart2_status_isr+0x6e>
    6368:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    636a:	4b10      	ldr	r3, [pc, #64]	; (63ac <uart2_status_isr+0xb0>)
    636c:	222c      	movs	r2, #44	; 0x2c
    636e:	70da      	strb	r2, [r3, #3]
	}
}
    6370:	bc30      	pop	{r4, r5}
    6372:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    6374:	7911      	ldrb	r1, [r2, #4]
    6376:	0609      	lsls	r1, r1, #24
    6378:	d5ea      	bpl.n	6350 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    637a:	4914      	ldr	r1, [pc, #80]	; (63cc <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    637c:	4810      	ldr	r0, [pc, #64]	; (63c0 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    637e:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    6380:	7801      	ldrb	r1, [r0, #0]
    6382:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    6384:	428c      	cmp	r4, r1
    6386:	d00d      	beq.n	63a4 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    6388:	1c4a      	adds	r2, r1, #1
    638a:	2a27      	cmp	r2, #39	; 0x27
    638c:	bf84      	itt	hi
    638e:	2100      	movhi	r1, #0
    6390:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    6392:	4d0f      	ldr	r5, [pc, #60]	; (63d0 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    6394:	4c05      	ldr	r4, [pc, #20]	; (63ac <uart2_status_isr+0xb0>)
    6396:	bf98      	it	ls
    6398:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    639a:	5caa      	ldrb	r2, [r5, r2]
    639c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    639e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    63a0:	7001      	strb	r1, [r0, #0]
    63a2:	e7d5      	b.n	6350 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    63a4:	216c      	movs	r1, #108	; 0x6c
    63a6:	70d1      	strb	r1, [r2, #3]
    63a8:	e7d2      	b.n	6350 <uart2_status_isr+0x54>
    63aa:	bf00      	nop
    63ac:	4006c000 	.word	0x4006c000
    63b0:	1fff99b4 	.word	0x1fff99b4
    63b4:	1fff99b5 	.word	0x1fff99b5
    63b8:	1fff99e0 	.word	0x1fff99e0
    63bc:	1fff99b0 	.word	0x1fff99b0
    63c0:	1fff9a21 	.word	0x1fff9a21
    63c4:	1fff9a24 	.word	0x1fff9a24
    63c8:	1fff9a20 	.word	0x1fff9a20
    63cc:	1fff9a28 	.word	0x1fff9a28
    63d0:	1fff99b8 	.word	0x1fff99b8

000063d4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    63d8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    63da:	4b19      	ldr	r3, [pc, #100]	; (6440 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    63dc:	4d19      	ldr	r5, [pc, #100]	; (6444 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    63de:	481a      	ldr	r0, [pc, #104]	; (6448 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    63e0:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    63e2:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    63e4:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    63e6:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    63e8:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    63ea:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    63ec:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    63ee:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    63f0:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    63f2:	7813      	ldrb	r3, [r2, #0]
    63f4:	061b      	lsls	r3, r3, #24
    63f6:	d5fc      	bpl.n	63f2 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    63f8:	4b14      	ldr	r3, [pc, #80]	; (644c <usb_init_serialnumber+0x78>)
    63fa:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    63fc:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    63fe:	4b14      	ldr	r3, [pc, #80]	; (6450 <usb_init_serialnumber+0x7c>)
    6400:	4c14      	ldr	r4, [pc, #80]	; (6454 <usb_init_serialnumber+0x80>)
    6402:	4298      	cmp	r0, r3
    6404:	bf98      	it	ls
    6406:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    640a:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    640c:	bf98      	it	ls
    640e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    6410:	220a      	movs	r2, #10
    6412:	f7ff fe11 	bl	6038 <ultoa>
    6416:	a901      	add	r1, sp, #4
    6418:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    641a:	2300      	movs	r3, #0
		char c = buf[i];
    641c:	f811 2b01 	ldrb.w	r2, [r1], #1
    6420:	3301      	adds	r3, #1
		if (!c) break;
    6422:	b13a      	cbz	r2, 6434 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    6424:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    6426:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    642a:	d1f7      	bne.n	641c <usb_init_serialnumber+0x48>
    642c:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    642e:	7023      	strb	r3, [r4, #0]
}
    6430:	b004      	add	sp, #16
    6432:	bd70      	pop	{r4, r5, r6, pc}
    6434:	005b      	lsls	r3, r3, #1
    6436:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    6438:	7023      	strb	r3, [r4, #0]
}
    643a:	b004      	add	sp, #16
    643c:	bd70      	pop	{r4, r5, r6, pc}
    643e:	bf00      	nop
    6440:	40020000 	.word	0x40020000
    6444:	40020007 	.word	0x40020007
    6448:	40020006 	.word	0x40020006
    644c:	40020008 	.word	0x40020008
    6450:	0098967f 	.word	0x0098967f
    6454:	1fff87d4 	.word	0x1fff87d4

00006458 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    6458:	4770      	bx	lr
    645a:	bf00      	nop

0000645c <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    645c:	4770      	bx	lr
    645e:	bf00      	nop

00006460 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    6460:	4770      	bx	lr
    6462:	bf00      	nop

00006464 <__libc_init_array>:
    6464:	b570      	push	{r4, r5, r6, lr}
    6466:	4e0f      	ldr	r6, [pc, #60]	; (64a4 <__libc_init_array+0x40>)
    6468:	4d0f      	ldr	r5, [pc, #60]	; (64a8 <__libc_init_array+0x44>)
    646a:	1b76      	subs	r6, r6, r5
    646c:	10b6      	asrs	r6, r6, #2
    646e:	bf18      	it	ne
    6470:	2400      	movne	r4, #0
    6472:	d005      	beq.n	6480 <__libc_init_array+0x1c>
    6474:	3401      	adds	r4, #1
    6476:	f855 3b04 	ldr.w	r3, [r5], #4
    647a:	4798      	blx	r3
    647c:	42a6      	cmp	r6, r4
    647e:	d1f9      	bne.n	6474 <__libc_init_array+0x10>
    6480:	4e0a      	ldr	r6, [pc, #40]	; (64ac <__libc_init_array+0x48>)
    6482:	4d0b      	ldr	r5, [pc, #44]	; (64b0 <__libc_init_array+0x4c>)
    6484:	1b76      	subs	r6, r6, r5
    6486:	f002 f8d1 	bl	862c <_init>
    648a:	10b6      	asrs	r6, r6, #2
    648c:	bf18      	it	ne
    648e:	2400      	movne	r4, #0
    6490:	d006      	beq.n	64a0 <__libc_init_array+0x3c>
    6492:	3401      	adds	r4, #1
    6494:	f855 3b04 	ldr.w	r3, [r5], #4
    6498:	4798      	blx	r3
    649a:	42a6      	cmp	r6, r4
    649c:	d1f9      	bne.n	6492 <__libc_init_array+0x2e>
    649e:	bd70      	pop	{r4, r5, r6, pc}
    64a0:	bd70      	pop	{r4, r5, r6, pc}
    64a2:	bf00      	nop
    64a4:	00008638 	.word	0x00008638
    64a8:	00008638 	.word	0x00008638
    64ac:	0000864c 	.word	0x0000864c
    64b0:	00008638 	.word	0x00008638

000064b4 <memset>:
    64b4:	b470      	push	{r4, r5, r6}
    64b6:	0784      	lsls	r4, r0, #30
    64b8:	d046      	beq.n	6548 <memset+0x94>
    64ba:	1e54      	subs	r4, r2, #1
    64bc:	2a00      	cmp	r2, #0
    64be:	d041      	beq.n	6544 <memset+0x90>
    64c0:	b2cd      	uxtb	r5, r1
    64c2:	4603      	mov	r3, r0
    64c4:	e002      	b.n	64cc <memset+0x18>
    64c6:	1e62      	subs	r2, r4, #1
    64c8:	b3e4      	cbz	r4, 6544 <memset+0x90>
    64ca:	4614      	mov	r4, r2
    64cc:	f803 5b01 	strb.w	r5, [r3], #1
    64d0:	079a      	lsls	r2, r3, #30
    64d2:	d1f8      	bne.n	64c6 <memset+0x12>
    64d4:	2c03      	cmp	r4, #3
    64d6:	d92e      	bls.n	6536 <memset+0x82>
    64d8:	b2cd      	uxtb	r5, r1
    64da:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    64de:	2c0f      	cmp	r4, #15
    64e0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    64e4:	d919      	bls.n	651a <memset+0x66>
    64e6:	f103 0210 	add.w	r2, r3, #16
    64ea:	4626      	mov	r6, r4
    64ec:	3e10      	subs	r6, #16
    64ee:	2e0f      	cmp	r6, #15
    64f0:	f842 5c10 	str.w	r5, [r2, #-16]
    64f4:	f842 5c0c 	str.w	r5, [r2, #-12]
    64f8:	f842 5c08 	str.w	r5, [r2, #-8]
    64fc:	f842 5c04 	str.w	r5, [r2, #-4]
    6500:	f102 0210 	add.w	r2, r2, #16
    6504:	d8f2      	bhi.n	64ec <memset+0x38>
    6506:	f1a4 0210 	sub.w	r2, r4, #16
    650a:	f022 020f 	bic.w	r2, r2, #15
    650e:	f004 040f 	and.w	r4, r4, #15
    6512:	3210      	adds	r2, #16
    6514:	2c03      	cmp	r4, #3
    6516:	4413      	add	r3, r2
    6518:	d90d      	bls.n	6536 <memset+0x82>
    651a:	461e      	mov	r6, r3
    651c:	4622      	mov	r2, r4
    651e:	3a04      	subs	r2, #4
    6520:	2a03      	cmp	r2, #3
    6522:	f846 5b04 	str.w	r5, [r6], #4
    6526:	d8fa      	bhi.n	651e <memset+0x6a>
    6528:	1f22      	subs	r2, r4, #4
    652a:	f022 0203 	bic.w	r2, r2, #3
    652e:	3204      	adds	r2, #4
    6530:	4413      	add	r3, r2
    6532:	f004 0403 	and.w	r4, r4, #3
    6536:	b12c      	cbz	r4, 6544 <memset+0x90>
    6538:	b2c9      	uxtb	r1, r1
    653a:	441c      	add	r4, r3
    653c:	f803 1b01 	strb.w	r1, [r3], #1
    6540:	42a3      	cmp	r3, r4
    6542:	d1fb      	bne.n	653c <memset+0x88>
    6544:	bc70      	pop	{r4, r5, r6}
    6546:	4770      	bx	lr
    6548:	4614      	mov	r4, r2
    654a:	4603      	mov	r3, r0
    654c:	e7c2      	b.n	64d4 <memset+0x20>
    654e:	bf00      	nop

00006550 <random>:
    6550:	b410      	push	{r4}
    6552:	4b0c      	ldr	r3, [pc, #48]	; (6584 <random+0x34>)
    6554:	4c0c      	ldr	r4, [pc, #48]	; (6588 <random+0x38>)
    6556:	6819      	ldr	r1, [r3, #0]
    6558:	4a0c      	ldr	r2, [pc, #48]	; (658c <random+0x3c>)
    655a:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    655e:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    6562:	fb04 f403 	mul.w	r4, r4, r3
    6566:	fb02 4000 	mla	r0, r2, r0, r4
    656a:	fba3 2302 	umull	r2, r3, r3, r2
    656e:	4403      	add	r3, r0
    6570:	3201      	adds	r2, #1
    6572:	f143 0300 	adc.w	r3, r3, #0
    6576:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    657a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    657e:	bc10      	pop	{r4}
    6580:	4770      	bx	lr
    6582:	bf00      	nop
    6584:	1fff8c18 	.word	0x1fff8c18
    6588:	5851f42d 	.word	0x5851f42d
    658c:	4c957f2d 	.word	0x4c957f2d

00006590 <register_fini>:
    6590:	4b02      	ldr	r3, [pc, #8]	; (659c <register_fini+0xc>)
    6592:	b113      	cbz	r3, 659a <register_fini+0xa>
    6594:	4802      	ldr	r0, [pc, #8]	; (65a0 <register_fini+0x10>)
    6596:	f7fd bdc7 	b.w	4128 <atexit>
    659a:	4770      	bx	lr
    659c:	00000000 	.word	0x00000000
    65a0:	000065a5 	.word	0x000065a5

000065a4 <__libc_fini_array>:
    65a4:	b538      	push	{r3, r4, r5, lr}
    65a6:	4d07      	ldr	r5, [pc, #28]	; (65c4 <__libc_fini_array+0x20>)
    65a8:	4c07      	ldr	r4, [pc, #28]	; (65c8 <__libc_fini_array+0x24>)
    65aa:	1b2c      	subs	r4, r5, r4
    65ac:	10a4      	asrs	r4, r4, #2
    65ae:	d005      	beq.n	65bc <__libc_fini_array+0x18>
    65b0:	3c01      	subs	r4, #1
    65b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    65b6:	4798      	blx	r3
    65b8:	2c00      	cmp	r4, #0
    65ba:	d1f9      	bne.n	65b0 <__libc_fini_array+0xc>
    65bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    65c0:	f002 b844 	b.w	864c <__init_array_end>
	...

000065cc <vtable for APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>>:
	...
    65d4:	06e9 0000 0625 0000 04ed 0000 0529 0000     ....%.......)...
    65e4:	046d 0000 0471 0000 3575 0000               m...q...u5..

000065f0 <stratosphere_sunset_gp>:
    65f0:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    6600:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    6610:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    6620:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    6630:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    6640:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    6650:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    6660:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    6670:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    6680:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    6690:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    66a0:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    66b0:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    66c0:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    66d0:	01f6 0101 01fa 0101 01ff 0101               ............

000066dc <bhw4_009_gp>:
    66dc:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    66ec:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

000066fc <es_landscape_33_gp>:
    66fc:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
    670c:	2742 4a8e 01ff 0104                         B'.J....

00006714 <Orange_to_Purple_gp>:
    6714:	d000 0132 927f 2d1b 61ff b20c               ..2....-.a..

00006720 <Skydye11_gp>:
    6720:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    6730:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    6740:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    6750:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    6760:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    6770:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    6780:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    6790:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    67a0:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    67b0:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    67c0:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    67d0:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    67e0:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    67f0:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    6800:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    6810:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    6820:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    6830:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    6840:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    6850:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    6860:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    6870:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    6880:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    6890:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    68a0:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    68b0:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    68c0:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    68d0:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    68e0:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    68f0:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    6900:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    6910:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    6920:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    6930:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    6940:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    6950:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    6960:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    6970:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    6980:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    6990:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    69a0:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    69b0:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    69c0:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    69d0:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    69e0:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    69f0:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    6a00:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    6a10:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    6a20:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    6a30:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    6a40:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    6a50:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    6a60:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    6a70:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    6a80:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    6a90:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    6aa0:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    6ab0:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    6ac0:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    6ad0:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    6ae0:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    6af0:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    6b00:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    6b10:	04ff 0400                                   ....

00006b14 <vibrant_gp>:
    6b14:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    6b24:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

00006b30 <es_landscape_64_gp>:
    6b30:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    6b40:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    6b50:	01ff c025                                   ..%.

00006b54 <standard_gp>:
    6b54:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
    6b64:	0aa9 0000 ffff 0c11                         ........

00006b6c <sin16_C(unsigned short)::base>:
    6b6c:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

00006b7c <twilight_gp>:
    6b7c:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    6b8c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    6b9c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    6bac:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    6bbc:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    6bcc:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    6bdc:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    6bec:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    6bfc:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    6c0c:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    6c1c:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    6c2c:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    6c3c:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    6c4c:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    6c5c:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    6c6c:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    6c7c:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    6c8c:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    6c9c:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    6cac:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    6cbc:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    6ccc:	78fc f7e7 84ff ffed                         .x......

00006cd4 <Split_03_gp>:
    6cd4:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
    6ce4:	a7ff 0201                                   ....

00006ce8 <water1_gp>:
    6ce8:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    6cf8:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    6d08:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

00006d14 <ib15_gp>:
    6d14:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    6d24:	898d 271f 3bff 5921                         ...'.;!Y

00006d2c <apple_green_gp>:
    6d2c:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    6d3c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    6d4c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    6d5c:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    6d6c:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    6d7c:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    6d8c:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    6d9c:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    6dac:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    6dbc:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    6dcc:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
    6ddc:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
    6dec:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
    6dfc:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
    6e0c:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
    6e1c:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
    6e2c:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
    6e3c:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
    6e4c:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
    6e5c:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
    6e6c:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
    6e7c:	6efc 01f8 79ff 00ff                         .n...y..

00006e84 <RedsandCyans_gp>:
    6e84:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
    6e94:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
    6ea4:	0fff 8760                                   ..`.

00006ea8 <b_gp>:
    6ea8:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
    6eb8:	ffff ffff                                   ....

00006ebc <es_pinksplash_07_gp>:
    6ebc:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
    6ecc:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

00006ed8 <faint_rainbow_gp>:
    6ed8:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
    6ee8:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
    6ef8:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
    6f08:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
    6f18:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
    6f28:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
    6f38:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
    6f48:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
    6f58:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
    6f68:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
    6f78:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
    6f88:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
    6f98:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
    6fa8:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
    6fb8:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
    6fc8:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
    6fd8:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
    6fe8:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
    6ff8:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
    7008:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
    7018:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
    7028:	43ff 04ff                                   .C..

0000702c <bhw2_22_gp>:
    702c:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
    703c:	00ff 0000                                   ....

00007040 <es_autumn_19_gp>:
    7040:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
    7050:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
    7060:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
    7070:	11ff 0101                                   ....

00007074 <bhw1_28_gp>:
    7074:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
    7084:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00007094 <blue_fire_gp>:
    7094:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

000070a4 <ultraviolet_mold_gp>:
    70a4:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    70b4:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    70c4:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    70d4:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
    70e4:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
    70f4:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
    7104:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
    7114:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
    7124:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
    7134:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
    7144:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
    7154:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
    7164:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
    7174:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
    7184:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
    7194:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
    71a4:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
    71b4:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
    71c4:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
    71d4:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
    71e4:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
    71f4:	ffff 0124                                   ..$.

000071f8 <Cyan_Magenta_Blue_gp>:
    71f8:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
    7208:	00ff ff00                                   ....

0000720c <Fuschia_7_gp>:
    720c:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
    721c:	87ff b614                                   ....

00007220 <es_ocean_breeze_068_gp>:
    7220:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
    7230:	00b2 753f 01ff 0a0a                         ..?u....

00007238 <purple_flower_gp>:
    7238:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
    7248:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

00007254 <palettes>:
    7254:	7450 0000 7460 0000 82e0 0000 77f0 0000     Pt..`t.......w..
    7264:	6ebc 0000 7760 0000 7220 0000 7988 0000     .n..`w.. r...y..
    7274:	6b30 0000 66fc 0000 7bdc 0000 73e0 0000     0k...f...{...s..
    7284:	794c 0000 833c 0000 6d14 0000 720c 0000     Ly..<....m...r..
    7294:	7778 0000 7874 0000 77d4 0000 80ac 0000     xw..tx...w......
    72a4:	8134 0000 78fc 0000 7040 0000 796c 0000     4....x..@p..ly..
    72b4:	774c 0000 83e0 0000 79e8 0000 80fc 0000     Lw.......y......
    72c4:	8038 0000 7074 0000 7a38 0000 702c 0000     8...tp..8z..,p..
    72d4:	79cc 0000 740c 0000 7484 0000 78a8 0000     .y...t...t...x..
    72e4:	7998 0000 6b14 0000 79fc 0000 8170 0000     .y...k...y..p...
    72f4:	80d8 0000 6714 0000 81e8 0000 6b54 0000     .....g......Tk..
    7304:	826c 0000 6ea8 0000 8024 0000 81f4 0000     l....n..$.......
    7314:	6720 0000 7bf8 0000 7b50 0000 8150 0000      g...{..P{..P...
    7324:	8358 0000 7804 0000 7a08 0000 78e8 0000     X....x...z...x..
    7334:	6cd4 0000 8288 0000 8110 0000 7788 0000     .l...........w..
    7344:	81c4 0000 7238 0000 77b8 0000 7a54 0000     ....8r...w..Tz..
    7354:	6b7c 0000 7ff8 0000 70a4 0000 6d2c 0000     |k.......p..,m..
    7364:	6ed8 0000 7864 0000 7918 0000 73c8 0000     .n..dx...y...s..
    7374:	7b30 0000 785c 0000 792c 0000 8088 0000     0{..\x..,y......
    7384:	806c 0000 7bc4 0000 82f4 0000 66dc 0000     l....{.......f..
    7394:	8090 0000 8014 0000 78cc 0000 6ce8 0000     .........x...l..
    73a4:	65f0 0000 6e84 0000 71f8 0000 83d4 0000     .e...n...q......
    73b4:	73f8 0000 7094 0000 793c 0000 830c 0000     .s...p..<y......
    73c4:	7428 0000                                   (t..

000073c8 <scoutie_gp>:
    73c8:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

000073d8 <sin16_C(unsigned short)::slope>:
    73d8:	3031 262c 171f 040e                         10,&....

000073e0 <gr65_hult_gp>:
    73e0:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
    73f0:	01d8 6d7c 01ff 6d7c                         ..|m..|m

000073f8 <cyberpunk_neon_gp>:
    73f8:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
    7408:	09ff 3318                                   ...3

0000740c <bhw2_10_gp>:
    740c:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
    741c:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00007428 <blade_runner_2049_gp>:
    7428:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
    7438:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
    7448:	4bc8 4915 2cff 2a09                         .K.I.,.*

00007450 <ib_jul01_gp>:
    7450:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00007460 <rgi_15_gp>:
    7460:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
    7470:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
    7480:	16ff 2606                                   ...&

00007484 <bhw2_14_gp>:
    7484:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
    7494:	079e ff0c 00d1 2d00 00ff 0800 5e5e 5e5e     .......-....^^^^
    74a4:	5e5e 5e5e 6843 6e61 6967 676e 5020 6c61     ^^^^Changing Pal
    74b4:	7465 6574 5e5e 5e5e 5e5e 5e5e 0000 0000     ette^^^^^^^^....
    74c4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    74d4:	3d3d 3d3d 3d3d 3d3d 003d 0000 454c 2044     =========...LED 
    74e4:	7241 6172 3a79 2020 2020 2020 2020 0000     Array:        ..
    74f4:	5543 5252 4e45 0054 454e 5458 0000 0000     CURRENT.NEXT....
    7504:	564f 5245 414c 0059 7242 6769 7468 656e     OVERLAY.Brightne
    7514:	7373 203a 2020 2020 2020 0000 6564 616c     ss:       ..dela
    7524:	5f79 6974 656d 203a 2020 2020 2020 0000     y_time:       ..
    7534:	7375 5f65 6170 656c 7474 3a65 2020 2020     use_palette:    
    7544:	2020 0000 7375 5f65 7566 6c6c 725f 6e61       ..use_full_ran
    7554:	6567 203a 2020 0000 6874 7369 645f 7269     ge:   ..this_dir
    7564:	203a 2020 2020 2020 2020 0000 6f6d 6564     :         ..mode
    7574:	6e5f 6d75 6562 3a72 2020 2020 2020 0000     _number:      ..
    7584:	6f6d 6564 695f 696e 6974 6c61 7a69 6465     mode_initialized
    7594:	203a 0000 3d3d 4a3d 4755 4c47 2045 4156     : ..===JUGGLE VA
    75a4:	4952 4241 454c 3d53 3d3d 0000 6e69 6564     RIABLES===..inde
    75b4:	3a78 2020 2020 2020 2020 0020 756e 646d     x:         .numd
    75c4:	746f 3a73 2020 2020 2020 0020 6562 7461     ots:       .beat
    75d4:	203a 2020 2020 2020 2020 0020 6166 6564     :          .fade
    75e4:	203a 2020 2020 2020 2020 0020 6964 6666     :          .diff
    75f4:	203a 2020 2020 2020 2020 0020 6e69 6564     :          .inde
    7604:	5f78 6572 6573 3a74 2020 0020 6e6f 5f65     x_reset:   .one_
    7614:	6964 3a72 2020 2020 2020 0020 6870 7361     dir:       .phas
    7624:	6465 203a 2020 2020 2020 0020 3d3d 523d     ed:        .===R
    7634:	4941 424e 574f 4d20 5241 4843 3d3d 003d     AINBOW MARCH===.
    7644:	3d3d 523d 4941 424e 574f 4d20 5241 4843     ===RAINBOW MARCH
    7654:	5320 4c50 5449 3d3d 003d 0000 6e69 6564      SPLIT===...inde
    7664:	3a78 2020 2020 0020 6964 6666 203a 2020     x:     .diff:   
    7674:	2020 0020 6f72 3a74 2020 2020 2020 0020        .rot:       .
    7684:	3d3d 3d3d 463d 5249 0045 0000 4d20 5249     =====FIRE... MIR
    7694:	4f52 0052 5320 4e59 0043 0000 7073 7261     ROR. SYNC...spar
    76a4:	696b 676e 203a 2020 0020 0000 6f63 6c6f     king:    ...cool
    76b4:	6e69 3a67 2020 2020 0020 0000 7073 7261     ing:     ...spar
    76c4:	696b 676e 3a32 2020 0020 0000 6f63 6c6f     king2:   ...cool
    76d4:	6e69 3267 203a 2020 0020 0000 3d3d 4d3d     ing2:    ...===M
    76e4:	444f 2045 5954 4550 4520 5252 524f 3d3d     ODE TYPE ERROR==
    76f4:	003d 0000 2a2a 2a2a 2a2a 2a2a 6843 6e61     =...********Chan
    7704:	6967 676e 5020 7461 6574 6e72 2a2a 2a2a     ging Pattern****
    7714:	2a2a 2a2a 0000 0000 4d56 5044 5f56 7c31     ****....VMDPV_1|
    7724:	5f31 4d56 5044 0a56 0000 0000 4544 5542     1_VMDPV.....DEBU
    7734:	2047 4e4f 0000 0000 4553 5554 2050 4f43     G ON....SETUP CO
    7744:	504d 454c 4554 ff00                         MPLETE..

0000774c <BlacK_Magenta_Red_gp>:
    774c:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
    775c:	ffff 0000                                   ....

00007760 <Coral_reef_gp>:
    7760:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
    7770:	0a8b 6f49 01ff 4722                         ..Io.."G

00007778 <es_emerald_dragon_08_gp>:
    7778:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00007788 <cloudcolors_gp>:
    7788:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
    7798:	008f 8b00 879f face 87af face adbf e6d8     ................
    77a8:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

000077b8 <fierce_ice_gp>:
    77b8:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
    77c8:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

000077d4 <fire_gp>:
    77d4:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
    77e4:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

000077f0 <es_pinksplash_08_gp>:
    77f0:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
    7800:	9dff 7003                                   ...p

00007804 <hallows_gp>:
    7804:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
    7814:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
    7824:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
    7834:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
    7844:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
    7854:	01f9 0101 01ff 0101                         ........

0000785c <GMT_cool_gp>:
    785c:	0000 ffff ffff ff00                         ........

00007864 <otis_gp>:
    7864:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

00007874 <lava_gp>:
    7874:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
    7884:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
    7894:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
    78a4:	ffff ffff                                   ....

000078a8 <bhw3_21_gp>:
    78a8:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
    78b8:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
    78c8:	01ff 2e17                                   ....

000078cc <xanidu_2_gp>:
    78cc:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
    78dc:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

000078e8 <Secondary_01a_gp>:
    78e8:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
    78f8:	00ff 01ff                                   ....

000078fc <Sunset_Real_gp>:
    78fc:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
    790c:	6487 6700 10c6 8200 00ff a000               .d.g........

00007918 <parrot_gp>:
    7918:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
    7928:	00ff 2002                                   ... 

0000792c <bhw1_sunconure_gp>:
    792c:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

0000793c <purplefly_gp>:
    793c:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

0000794c <gr64_hult_gp>:
    794c:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
    795c:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

0000796c <BlacK_Blue_Magenta_White_gp>:
    796c:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
    797c:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00007988 <es_ocean_breeze_036_gp>:
    7988:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

00007998 <bhw3_30_gp>:
    7998:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
    79a8:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
    79b8:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
    79c8:	39ff 0702                                   .9..

000079cc <bhw2_49_gp>:
    79cc:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
    79dc:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

000079e8 <Blue_Cyan_Yellow_gp>:
    79e8:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
    79f8:	ffff 00ff                                   ....

000079fc <cw1_029_gp>:
    79fc:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

00007a08 <sea_treasure_gp>:
    7a08:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
    7a18:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
    7a28:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00007a38 <bhw2_23_gp>:
    7a38:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
    7a48:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

00007a54 <blueice_gp>:
    7a54:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
    7a64:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
    7a74:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
    7a84:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
    7a94:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
    7aa4:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
    7ab4:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
    7ac4:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
    7ad4:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
    7ae4:	0195 cf82 0197 d28a 019a d490 019c d697     ................
    7af4:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
    7b04:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
    7b14:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
    7b24:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00007b30 <sunlitwave_gp>:
    7b30:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
    7b40:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

00007b50 <Tropical_Colors_gp>:
    7b50:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
    7b60:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
    7b70:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
    7b80:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
    7b90:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
    7ba0:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
    7bb0:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
    7bc0:	12ff 0037                                   ..7.

00007bc4 <bhw3_13_gp>:
    7bc4:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
    7bd4:	a1b2 5720 18ff 6c06                         .. W...l

00007bdc <rainbowsherbet_gp>:
    7bdc:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
    7bec:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

00007bf8 <Wizzl019_gp>:
    7bf8:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
    7c08:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
    7c18:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
    7c28:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
    7c38:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
    7c48:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
    7c58:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
    7c68:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
    7c78:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
    7c88:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
    7c98:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
    7ca8:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
    7cb8:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
    7cc8:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
    7cd8:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
    7ce8:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
    7cf8:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
    7d08:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
    7d18:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
    7d28:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
    7d38:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
    7d48:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
    7d58:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
    7d68:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
    7d78:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
    7d88:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
    7d98:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
    7da8:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
    7db8:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
    7dc8:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
    7dd8:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
    7de8:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
    7df8:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
    7e08:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
    7e18:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
    7e28:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
    7e38:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
    7e48:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
    7e58:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
    7e68:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
    7e78:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
    7e88:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
    7e98:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
    7ea8:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
    7eb8:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
    7ec8:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
    7ed8:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
    7ee8:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
    7ef8:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
    7f08:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
    7f18:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
    7f28:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
    7f38:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
    7f48:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
    7f58:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
    7f68:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
    7f78:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
    7f88:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
    7f98:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
    7fa8:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
    7fb8:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
    7fc8:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
    7fd8:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
    7fe8:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

00007ff8 <green_gp>:
    7ff8:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
    8008:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00008014 <es_emerald_dragon_09_gp>:
    8014:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00008024 <es_emerald_dragon_01_gp>:
    8024:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
    8034:	1cff ffff                                   ....

00008038 <bhw1_26_gp>:
    8038:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
    8048:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
    8058:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
    8068:	35ff 38cb                                   .5.8

0000806c <bhw2_turq_gp>:
    806c:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
    807c:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

00008088 <bhw1_05_gp>:
    8088:	0100 35dd 49ff b203                         ...5.I..

00008090 <bhw3_34_gp>:
    8090:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
    80a0:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

000080ac <Colorfull_gp>:
    80ac:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
    80bc:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
    80cc:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

000080d8 <Ribbon_Colors_gp>:
    80d8:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
    80e8:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
    80f8:	ffff 00ff                                   ....

000080fc <bhw1_greeny_gp>:
    80fc:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
    810c:	00ff 0000                                   ....

00008110 <rainbow_gp>:
    8110:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
    8120:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
    8130:	ffff 0000                                   ....

00008134 <Magenta_Evening_gp>:
    8134:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
    8144:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

00008150 <slope_gp>:
    8150:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
    8160:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

00008170 <alarm_p4_0_2_gp>:
    8170:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
    8180:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
    8190:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
    81a0:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
    81b0:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
    81c0:	01ff baff                                   ....

000081c4 <cequal_gp>:
    81c4:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
    81d4:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
    81e4:	fcff fcfc                                   ....

000081e8 <Fire_1_gp>:
    81e8:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

000081f4 <froth316_gp>:
    81f4:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
    8204:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
    8214:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
    8224:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
    8234:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
    8244:	00aa f700 00ba f700 00ba a000 00cc a000     ................
    8254:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
    8264:	00ed 0e00 00ff 0e00                         ........

0000826c <a_gp>:
    826c:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
    827c:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00008288 <GMT_seafloor_gp>:
    8288:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
    8298:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
    82a8:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
    82b8:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
    82c8:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
    82d8:	a3f4 ffe1 dcff fff8                         ........

000082e0 <Analogous_1_gp>:
    82e0:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
    82f0:	ffff 0000                                   ....

000082f4 <bhw3_61_gp>:
    82f4:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
    8304:	09db 34eb 8bff e9eb                         ...4....

0000830c <rainbow2_gp>:
    830c:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
    831c:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
    832c:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................

0000833c <GMT_drywet_gp>:
    833c:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
    834c:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00008358 <ofaurora_gp>:
    8358:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
    8368:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
    8378:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
    8388:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
    8398:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
    83a8:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
    83b8:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
    83c8:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

000083d4 <Complementary_01a_gp>:
    83d4:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

000083e0 <BlacK_Red_Magenta_Yellow_gp>:
    83e0:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
    83f0:	ffaa ff00 ffd4 2d37 ffff 00ff 4d56 5044     ......7-....VMDP
    8400:	5f45 0000 323a 003a 003a 0000 565f 444d     E_..:2:.:..._VMD
    8410:	4550 0000 4d56 5044 5f43 0000 565f 444d     PE..VMDPC_.._VMD
    8420:	4350 0000 7245 6f72 3a72 4120 7474 6d65     PC..Error: Attem
    8430:	7470 7420 206f 6573 2074 2061 6572 6461     pt to set a read
    8440:	6f2d 6c6e 2079 6176 6972 6261 656c 6f20     -only variable o
    8450:	2072 6164 6174 7420 7079 2065 6f6e 2074     r data type not 
    8460:	7573 7070 726f 6574 0d64 000a               supported...

0000846c <pin2sc1a>:
    846c:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
    847c:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
    848c:	ffff 1300 9303 921a ff17 ffff               ............

00008498 <digital_pin_to_info_PGM>:
    8498:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
    84a8:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
    84b8:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
    84c8:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
    84d8:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
    84e8:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
    84f8:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
    8508:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
    8518:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
    8528:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
    8538:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
    8548:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
    8558:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
    8568:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
    8578:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
    8588:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
    8598:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
    85a8:	0a0d ffff                                   ....

000085ac <vtable for usb_serial_class>:
	...
    85b4:	5f91 0000 5f89 0000 5f85 0000 5f81 0000     ._..._..._..._..
    85c4:	5f7d 0000 5f79 0000 5f75 0000 5f71 0000     }_..y_..u_..q_..

000085d4 <usb_endpoint_config_table>:
    85d4:	1500 1519                                   ....

000085d8 <usb_descriptor_list>:
    85d8:	0100 0000 8748 1fff 0012 0000 0200 0000     ....H...........
    85e8:	8774 1fff 0043 0000 0300 0000 87d0 1fff     t...C...........
    85f8:	0000 0000 0301 0409 875c 1fff 0000 0000     ........\.......
    8608:	0302 0409 87b8 1fff 0000 0000 0303 0409     ................
    8618:	87d4 1fff 0000 0000 0000 0000 0000 0000     ................
    8628:	0000 0000                                   ....

0000862c <_init>:
    862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    862e:	bf00      	nop
    8630:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8632:	bc08      	pop	{r3}
    8634:	469e      	mov	lr, r3
    8636:	4770      	bx	lr

00008638 <__init_array_start>:
    8638:	00006591 	.word	0x00006591

0000863c <__frame_dummy_init_array_entry>:
    863c:	00000435 00003a95 0000412d 000045f1     5....:..-A...E..

Disassembly of section .fini:

0000864c <_fini>:
    864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    864e:	bf00      	nop
