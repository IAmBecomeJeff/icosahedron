
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 79 ae 00 00 31 ae 00 00     ... ....y...1...
      10:	31 ae 00 00 31 ae 00 00 31 ae 00 00 31 ae 00 00     1...1...1...1...
      20:	31 ae 00 00 31 ae 00 00 31 ae 00 00 79 ae 00 00     1...1...1...y...
      30:	79 ae 00 00 31 ae 00 00 a5 c2 00 00 a9 c3 00 00     y...1...........
      40:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      50:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      60:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      70:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      80:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      90:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      a0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      b0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      c0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      d0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      e0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
      f0:	79 ae 00 00 01 c7 00 00 79 ae 00 00 2d c8 00 00     y.......y...-...
     100:	79 ae 00 00 59 c9 00 00 79 ae 00 00 79 ae 00 00     y...Y...y...y...
     110:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     120:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     130:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     140:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     150:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     160:	79 ae 00 00 c1 b2 00 00 79 ae 00 00 79 ae 00 00     y.......y...y...
     170:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     180:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     190:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     1a0:	79 ae 00 00 79 ae 00 00 79 ae 00 00 79 ae 00 00     y...y...y...y...
     1b0:	79 ae 00 00 79 ae 00 00 79 ae 00 00                 y...y...y...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00a fe56 	bl	ae80 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00a feaa 	bl	b02c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00a fe1b 	bl	af1c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00a fe0c 	bl	af1c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00d fb0e 	bl	d928 <__libc_init_array>

	startup_late_hook();
     30c:	f00a fdbe 	bl	ae8c <startup_late_hook>
	main();
     310:	f00c f852 	bl	c3b8 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c4c 	.word	0x1fff8c4c
     33c:	00010c58 	.word	0x00010c58
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c4c 	.word	0x1fff8c4c
     348:	1fffab84 	.word	0x1fffab84
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3c36d1 	.word	0x5e3c36d1
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c4c 	.word	0x1fff8c4c
     42c:	00000000 	.word	0x00000000
     430:	00010c5c 	.word	0x00010c5c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c50 	.word	0x1fff8c50
     460:	00010c5c 	.word	0x00010c5c
     464:	1fff8c4c 	.word	0x1fff8c4c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]>:
		default:	Serial.println("Not a gradient palette");		break;
	}
}


LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4c1d      	ldr	r4, [pc, #116]	; (508 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]+0x78>)
     494:	b083      	sub	sp, #12
     496:	6824      	ldr	r4, [r4, #0]
     498:	9401      	str	r4, [sp, #4]
	return ret;
     49a:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     49c:	28ff      	cmp	r0, #255	; 0xff
     49e:	bf98      	it	ls
     4a0:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4a2:	f44f 748c 	mov.w	r4, #280	; 0x118
     4a6:	eba5 0303 	sub.w	r3, r5, r3
     4aa:	fb04 f303 	mul.w	r3, r4, r3
     4ae:	bf98      	it	ls
     4b0:	b280      	uxthls	r0, r0
     4b2:	fb00 f003 	mul.w	r0, r0, r3
     4b6:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4ba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4be:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4c0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4c4:	d503      	bpl.n	4ce <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]+0x3e>
     4c6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ca:	3307      	adds	r3, #7
     4cc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ce:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4d0:	4e0e      	ldr	r6, [pc, #56]	; (50c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4d2:	4c0f      	ldr	r4, [pc, #60]	; (510 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d4:	5d76      	ldrb	r6, [r6, r5]
     4d6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4da:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4de:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     4e2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4e4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     4e6:	bf4a      	itet	mi
     4e8:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4ea:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     4ec:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     4ee:	1a52      	subs	r2, r2, r1
     4f0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4f4:	b292      	uxth	r2, r2
     4f6:	b2a3      	uxth	r3, r4
     4f8:	fb02 3303 	mla	r3, r2, r3, r3
     4fc:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     500:	b280      	uxth	r0, r0
     502:	b003      	add	sp, #12
     504:	bc70      	pop	{r4, r5, r6}
     506:	4770      	bx	lr
     508:	1fffa8c0 	.word	0x1fffa8c0
     50c:	0000fa58 	.word	0x0000fa58
     510:	0000f2c8 	.word	0x0000f2c8

00000514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     514:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     516:	4c1e      	ldr	r4, [pc, #120]	; (590 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x7c>)
     518:	b083      	sub	sp, #12
     51a:	6824      	ldr	r4, [r4, #0]
     51c:	9401      	str	r4, [sp, #4]
	return ret;
     51e:	9d01      	ldr	r5, [sp, #4]
     520:	28ff      	cmp	r0, #255	; 0xff
     522:	bf98      	it	ls
     524:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     526:	f44f 748c 	mov.w	r4, #280	; 0x118
     52a:	eba5 0303 	sub.w	r3, r5, r3
     52e:	fb04 f303 	mul.w	r3, r4, r3
     532:	bf98      	it	ls
     534:	b280      	uxthls	r0, r0
     536:	fb00 f003 	mul.w	r0, r0, r3
     53a:	f3c0 400e 	ubfx	r0, r0, #16, #15
     53e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     542:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     544:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     546:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     54a:	d503      	bpl.n	554 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x40>
     54c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     550:	3307      	adds	r3, #7
     552:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     554:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     556:	4e0f      	ldr	r6, [pc, #60]	; (594 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     558:	4c0f      	ldr	r4, [pc, #60]	; (598 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     55a:	5d76      	ldrb	r6, [r6, r5]
     55c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     560:	f3c3 0546 	ubfx	r5, r3, #1, #7
     564:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     568:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     56a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     56c:	bf4a      	itet	mi
     56e:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     570:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     572:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     574:	1a52      	subs	r2, r2, r1
     576:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     57a:	b292      	uxth	r2, r2
     57c:	b2a3      	uxth	r3, r4
     57e:	fb02 3303 	mla	r3, r2, r3, r3
     582:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     586:	b280      	uxth	r0, r0
     588:	b003      	add	sp, #12
     58a:	bc70      	pop	{r4, r5, r6}
     58c:	4770      	bx	lr
     58e:	bf00      	nop
     590:	1fffa8c0 	.word	0x1fffa8c0
     594:	0000fa58 	.word	0x0000fa58
     598:	0000f2c8 	.word	0x0000f2c8

0000059c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     59c:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     59e:	4b18      	ldr	r3, [pc, #96]	; (600 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x64>)
     5a0:	b083      	sub	sp, #12
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	9301      	str	r3, [sp, #4]
	return ret;
     5a6:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     5a8:	f44f 738c 	mov.w	r3, #280	; 0x118
     5ac:	fb03 f606 	mul.w	r6, r3, r6
     5b0:	fb00 f006 	mul.w	r0, r0, r6
     5b4:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5b6:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5b8:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5bc:	d503      	bpl.n	5c6 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x2a>
     5be:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5c2:	3307      	adds	r3, #7
     5c4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5c6:	0a18      	lsrs	r0, r3, #8
     5c8:	4d0e      	ldr	r5, [pc, #56]	; (604 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x68>)
    uint8_t  m   = slope[section];
     5ca:	4c0f      	ldr	r4, [pc, #60]	; (608 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5cc:	5c24      	ldrb	r4, [r4, r0]
     5ce:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     5d2:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5d6:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     5da:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5dc:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     5de:	bf48      	it	mi
     5e0:	4264      	negmi	r4, r4
     5e2:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     5e4:	1a53      	subs	r3, r2, r1
     5e6:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     5ea:	b29a      	uxth	r2, r3
     5ec:	b2a3      	uxth	r3, r4
     5ee:	fb02 3303 	mla	r3, r2, r3, r3
     5f2:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     5f6:	b280      	uxth	r0, r0
     5f8:	b003      	add	sp, #12
     5fa:	bc70      	pop	{r4, r5, r6}
     5fc:	4770      	bx	lr
     5fe:	bf00      	nop
     600:	1fffa8c0 	.word	0x1fffa8c0
     604:	0000f2c8 	.word	0x0000f2c8
     608:	0000fa58 	.word	0x0000fa58

0000060c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     60c:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     60e:	2101      	movs	r1, #1
     610:	4604      	mov	r4, r0
     612:	200e      	movs	r0, #14
     614:	f00a fc94 	bl	af40 <pinMode>
     618:	2007      	movs	r0, #7
     61a:	2101      	movs	r1, #1
     61c:	f00a fc90 	bl	af40 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     620:	69a0      	ldr	r0, [r4, #24]
     622:	b158      	cbz	r0, 63c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     624:	6803      	ldr	r3, [r0, #0]
     626:	4a07      	ldr	r2, [pc, #28]	; (644 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     628:	685b      	ldr	r3, [r3, #4]
     62a:	4293      	cmp	r3, r2
     62c:	d107      	bne.n	63e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     62e:	6842      	ldr	r2, [r0, #4]
     630:	7b01      	ldrb	r1, [r0, #12]
     632:	7813      	ldrb	r3, [r2, #0]
     634:	ea23 0301 	bic.w	r3, r3, r1
     638:	7013      	strb	r3, [r2, #0]
     63a:	bd10      	pop	{r4, pc}
     63c:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     642:	4718      	bx	r3
     644:	00000481 	.word	0x00000481

00000648 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     648:	b5f0      	push	{r4, r5, r6, r7, lr}
     64a:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     64c:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     64e:	6805      	ldr	r5, [r0, #0]
     650:	f88d 3004 	strb.w	r3, [sp, #4]
     654:	f88d 3005 	strb.w	r3, [sp, #5]
     658:	f88d 3006 	strb.w	r3, [sp, #6]
     65c:	682e      	ldr	r6, [r5, #0]
     65e:	4a37      	ldr	r2, [pc, #220]	; (73c <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     660:	f88d 3008 	strb.w	r3, [sp, #8]
     664:	4296      	cmp	r6, r2
     666:	f88d 3009 	strb.w	r3, [sp, #9]
     66a:	f88d 300a 	strb.w	r3, [sp, #10]
     66e:	d15f      	bne.n	730 <CLEDController::clearLeds(int)+0xe8>
     670:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     672:	9104      	str	r1, [sp, #16]
     674:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     676:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     678:	a801      	add	r0, sp, #4
     67a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     67c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     680:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     684:	f88d 3020 	strb.w	r3, [sp, #32]
     688:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     68a:	d015      	beq.n	6b8 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     68c:	f88d 301d 	strb.w	r3, [sp, #29]
     690:	f88d 301c 	strb.w	r3, [sp, #28]
     694:	f88d 301b 	strb.w	r3, [sp, #27]
     698:	f88d 301a 	strb.w	r3, [sp, #26]
     69c:	f88d 3019 	strb.w	r3, [sp, #25]
     6a0:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6a4:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6a6:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     6a8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ac:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ae:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6b0:	a903      	add	r1, sp, #12
     6b2:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6b4:	b00b      	add	sp, #44	; 0x2c
     6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6b8:	4a21      	ldr	r2, [pc, #132]	; (740 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ba:	7813      	ldrb	r3, [r2, #0]
     6bc:	3301      	adds	r3, #1
     6be:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6c2:	f013 0f01 	tst.w	r3, #1
     6c6:	bf14      	ite	ne
     6c8:	2180      	movne	r1, #128	; 0x80
     6ca:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6cc:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6ce:	079a      	lsls	r2, r3, #30
     6d0:	bf44      	itt	mi
     6d2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     6d6:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     6d8:	075b      	lsls	r3, r3, #29
     6da:	bf48      	it	mi
     6dc:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6e0:	3110      	adds	r1, #16
     6e2:	2200      	movs	r2, #0
     6e4:	b2c9      	uxtb	r1, r1
     6e6:	f10d 031b 	add.w	r3, sp, #27
     6ea:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ee:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6f2:	b1aa      	cbz	r2, 720 <CLEDController::clearLeds(int)+0xd8>
     6f4:	fb9e f2f2 	sdiv	r2, lr, r2
     6f8:	b2d2      	uxtb	r2, r2
     6fa:	1c50      	adds	r0, r2, #1
     6fc:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     6fe:	fb00 1501 	mla	r5, r0, r1, r1
     702:	122d      	asrs	r5, r5, #8
     704:	7018      	strb	r0, [r3, #0]
     706:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     708:	b105      	cbz	r5, 70c <CLEDController::clearLeds(int)+0xc4>
     70a:	3e01      	subs	r6, #1
     70c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     710:	b100      	cbz	r0, 714 <CLEDController::clearLeds(int)+0xcc>
     712:	701a      	strb	r2, [r3, #0]
     714:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     716:	429f      	cmp	r7, r3
     718:	d008      	beq.n	72c <CLEDController::clearLeds(int)+0xe4>
     71a:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     71c:	2a00      	cmp	r2, #0
     71e:	d1e9      	bne.n	6f4 <CLEDController::clearLeds(int)+0xac>
     720:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     722:	f803 2c03 	strb.w	r2, [r3, #-3]
     726:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     728:	429f      	cmp	r7, r3
     72a:	d1f6      	bne.n	71a <CLEDController::clearLeds(int)+0xd2>
     72c:	6825      	ldr	r5, [r4, #0]
     72e:	e7b9      	b.n	6a4 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     730:	460a      	mov	r2, r1
     732:	ab02      	add	r3, sp, #8
     734:	a901      	add	r1, sp, #4
     736:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     738:	b00b      	add	sp, #44	; 0x2c
     73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     73c:	00000745 	.word	0x00000745
     740:	1fff8c68 	.word	0x1fff8c68

00000744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     744:	b5f0      	push	{r4, r5, r6, r7, lr}
     746:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     748:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     74a:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     74c:	789b      	ldrb	r3, [r3, #2]
     74e:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     750:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     752:	9101      	str	r1, [sp, #4]
     754:	9202      	str	r2, [sp, #8]
     756:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     758:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     75c:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     760:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     764:	d016      	beq.n	794 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     766:	2300      	movs	r3, #0
     768:	f88d 3015 	strb.w	r3, [sp, #21]
     76c:	f88d 3014 	strb.w	r3, [sp, #20]
     770:	f88d 3013 	strb.w	r3, [sp, #19]
     774:	f88d 3012 	strb.w	r3, [sp, #18]
     778:	f88d 3011 	strb.w	r3, [sp, #17]
     77c:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     780:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     782:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     784:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     786:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     78a:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     78c:	a901      	add	r1, sp, #4
     78e:	4790      	blx	r2
  }
     790:	b009      	add	sp, #36	; 0x24
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     794:	4a1b      	ldr	r2, [pc, #108]	; (804 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     796:	7813      	ldrb	r3, [r2, #0]
     798:	3301      	adds	r3, #1
     79a:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     79e:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7a2:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7a4:	bf14      	ite	ne
     7a6:	2280      	movne	r2, #128	; 0x80
     7a8:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7aa:	0799      	lsls	r1, r3, #30
     7ac:	bf44      	itt	mi
     7ae:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     7b2:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     7b4:	075b      	lsls	r3, r3, #29
     7b6:	bf48      	it	mi
     7b8:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     7bc:	3210      	adds	r2, #16
     7be:	b2d2      	uxtb	r2, r2
     7c0:	f10d 0313 	add.w	r3, sp, #19
     7c4:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7c8:	f44f 7e80 	mov.w	lr, #256	; 0x100
     7cc:	b1ac      	cbz	r4, 7fa <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     7ce:	fb9e f4f4 	sdiv	r4, lr, r4
     7d2:	b2e4      	uxtb	r4, r4
     7d4:	1c61      	adds	r1, r4, #1
     7d6:	b2c9      	uxtb	r1, r1
     7d8:	fb01 2502 	mla	r5, r1, r2, r2
     7dc:	122d      	asrs	r5, r5, #8
     7de:	7019      	strb	r1, [r3, #0]
     7e0:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     7e2:	b105      	cbz	r5, 7e6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     7e4:	3e01      	subs	r6, #1
     7e6:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7ea:	b101      	cbz	r1, 7ee <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7ec:	701c      	strb	r4, [r3, #0]
     7ee:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7f0:	42bb      	cmp	r3, r7
     7f2:	d0c5      	beq.n	780 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7f4:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7f6:	2c00      	cmp	r4, #0
     7f8:	d1e9      	bne.n	7ce <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7fa:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7fc:	f803 4c03 	strb.w	r4, [r3, #-3]
     800:	e7f5      	b.n	7ee <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     802:	bf00      	nop
     804:	1fff8c68 	.word	0x1fff8c68

00000808 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     808:	b5f0      	push	{r4, r5, r6, r7, lr}
     80a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     80c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     80e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     810:	789b      	ldrb	r3, [r3, #2]
     812:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     814:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     816:	9101      	str	r1, [sp, #4]
     818:	9202      	str	r2, [sp, #8]
     81a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     820:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     824:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     828:	d017      	beq.n	85a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     82a:	2300      	movs	r3, #0
     82c:	f88d 3015 	strb.w	r3, [sp, #21]
     830:	f88d 3014 	strb.w	r3, [sp, #20]
     834:	f88d 3013 	strb.w	r3, [sp, #19]
     838:	f88d 3012 	strb.w	r3, [sp, #18]
     83c:	f88d 3011 	strb.w	r3, [sp, #17]
     840:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     844:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     846:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     848:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     84a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     84c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     850:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     852:	a901      	add	r1, sp, #4
     854:	4798      	blx	r3
  }
     856:	b009      	add	sp, #36	; 0x24
     858:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     85a:	4a1b      	ldr	r2, [pc, #108]	; (8c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     85c:	7813      	ldrb	r3, [r2, #0]
     85e:	3301      	adds	r3, #1
     860:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     864:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     868:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     86a:	bf14      	ite	ne
     86c:	2280      	movne	r2, #128	; 0x80
     86e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     870:	0799      	lsls	r1, r3, #30
     872:	bf44      	itt	mi
     874:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     878:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     87a:	075b      	lsls	r3, r3, #29
     87c:	bf48      	it	mi
     87e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     882:	3210      	adds	r2, #16
     884:	b2d2      	uxtb	r2, r2
     886:	f10d 0313 	add.w	r3, sp, #19
     88a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     88e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     892:	b1ac      	cbz	r4, 8c0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     894:	fb9e f4f4 	sdiv	r4, lr, r4
     898:	b2e4      	uxtb	r4, r4
     89a:	1c61      	adds	r1, r4, #1
     89c:	b2c9      	uxtb	r1, r1
     89e:	fb01 2502 	mla	r5, r1, r2, r2
     8a2:	122d      	asrs	r5, r5, #8
     8a4:	7019      	strb	r1, [r3, #0]
     8a6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     8a8:	b105      	cbz	r5, 8ac <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     8aa:	3e01      	subs	r6, #1
     8ac:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     8b0:	b101      	cbz	r1, 8b4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     8b2:	701c      	strb	r4, [r3, #0]
     8b4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     8b6:	42bb      	cmp	r3, r7
     8b8:	d0c4      	beq.n	844 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     8ba:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     8bc:	2c00      	cmp	r4, #0
     8be:	d1e9      	bne.n	894 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     8c0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     8c2:	f803 4c03 	strb.w	r4, [r3, #-3]
     8c6:	e7f5      	b.n	8b4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     8c8:	1fff8c68 	.word	0x1fff8c68

000008cc <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	4604      	mov	r4, r0
     8d0:	4608      	mov	r0, r1
     8d2:	460d      	mov	r5, r1
     8d4:	f00d f8d4 	bl	da80 <strlen>
     8d8:	6823      	ldr	r3, [r4, #0]
     8da:	4602      	mov	r2, r0
     8dc:	4629      	mov	r1, r5
     8de:	4620      	mov	r0, r4
     8e0:	685b      	ldr	r3, [r3, #4]
     8e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     8e6:	4718      	bx	r3

000008e8 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8e8:	b538      	push	{r3, r4, r5, lr}
     8ea:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8ec:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8ee:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8f0:	f00d f8c6 	bl	da80 <strlen>
     8f4:	6823      	ldr	r3, [r4, #0]
     8f6:	4602      	mov	r2, r0
     8f8:	4629      	mov	r1, r5
     8fa:	685b      	ldr	r3, [r3, #4]
     8fc:	4620      	mov	r0, r4
     8fe:	4798      	blx	r3
     900:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     902:	4620      	mov	r0, r4
     904:	f00b fd60 	bl	c3c8 <Print::println()>
     908:	4428      	add	r0, r5
     90a:	bd38      	pop	{r3, r4, r5, pc}

0000090c <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     910:	780d      	ldrb	r5, [r1, #0]
     912:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     914:	784d      	ldrb	r5, [r1, #1]
     916:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     918:	7889      	ldrb	r1, [r1, #2]
     91a:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91c:	7811      	ldrb	r1, [r2, #0]
     91e:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     920:	7851      	ldrb	r1, [r2, #1]
     922:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     924:	7892      	ldrb	r2, [r2, #2]
     926:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     928:	781a      	ldrb	r2, [r3, #0]
     92a:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     92c:	785a      	ldrb	r2, [r3, #1]
     92e:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     930:	789b      	ldrb	r3, [r3, #2]
     932:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     936:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     938:	f89a b000 	ldrb.w	fp, [sl]
     93c:	f880 b009 	strb.w	fp, [r0, #9]
     940:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     944:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     948:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     94c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     94e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     950:	9d10      	ldr	r5, [sp, #64]	; 0x40
     952:	9911      	ldr	r1, [sp, #68]	; 0x44
     954:	9a12      	ldr	r2, [sp, #72]	; 0x48
     956:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     958:	f89a b001 	ldrb.w	fp, [sl, #1]
     95c:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     960:	f89a a002 	ldrb.w	sl, [sl, #2]
     964:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     968:	f899 a000 	ldrb.w	sl, [r9]
     96c:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     970:	f899 a001 	ldrb.w	sl, [r9, #1]
     974:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     978:	f899 9002 	ldrb.w	r9, [r9, #2]
     97c:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     980:	f898 9000 	ldrb.w	r9, [r8]
     984:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     988:	f898 9001 	ldrb.w	r9, [r8, #1]
     98c:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     990:	f898 8002 	ldrb.w	r8, [r8, #2]
     994:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     998:	f89c 8000 	ldrb.w	r8, [ip]
     99c:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     9a0:	f89c 8001 	ldrb.w	r8, [ip, #1]
     9a4:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     9a8:	f89c c002 	ldrb.w	ip, [ip, #2]
     9ac:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b0:	f89e c000 	ldrb.w	ip, [lr]
     9b4:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     9b8:	f89e c001 	ldrb.w	ip, [lr, #1]
     9bc:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     9c0:	f89e e002 	ldrb.w	lr, [lr, #2]
     9c4:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c8:	f897 e000 	ldrb.w	lr, [r7]
     9cc:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     9d0:	f897 e001 	ldrb.w	lr, [r7, #1]
     9d4:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     9d8:	78bf      	ldrb	r7, [r7, #2]
     9da:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9dc:	7837      	ldrb	r7, [r6, #0]
     9de:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     9e0:	7877      	ldrb	r7, [r6, #1]
     9e2:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     9e4:	78b6      	ldrb	r6, [r6, #2]
     9e6:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e8:	782e      	ldrb	r6, [r5, #0]
     9ea:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     9ec:	786e      	ldrb	r6, [r5, #1]
     9ee:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     9f0:	78ad      	ldrb	r5, [r5, #2]
     9f2:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f6:	780d      	ldrb	r5, [r1, #0]
     9f8:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     9fc:	784d      	ldrb	r5, [r1, #1]
     9fe:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     a02:	7889      	ldrb	r1, [r1, #2]
     a04:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a08:	7811      	ldrb	r1, [r2, #0]
     a0a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     a0e:	7851      	ldrb	r1, [r2, #1]
     a10:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     a14:	7892      	ldrb	r2, [r2, #2]
     a16:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a1c:	7812      	ldrb	r2, [r2, #0]
     a1e:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     a22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a24:	7852      	ldrb	r2, [r2, #1]
     a26:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     a2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a2c:	7892      	ldrb	r2, [r2, #2]
     a2e:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a32:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a34:	7812      	ldrb	r2, [r2, #0]
     a36:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     a3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a3c:	7852      	ldrb	r2, [r2, #1]
     a3e:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     a42:	9a14      	ldr	r2, [sp, #80]	; 0x50
     a44:	7892      	ldrb	r2, [r2, #2]
     a46:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a4a:	781a      	ldrb	r2, [r3, #0]
     a4c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     a50:	785a      	ldrb	r2, [r3, #1]
     a52:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     a56:	789b      	ldrb	r3, [r3, #2]
     a58:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a60 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a64:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a66:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a68:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a6a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a6e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a70:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a72:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a74:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a76:	d1f8      	bne.n	a6a <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a78:	680b      	ldr	r3, [r1, #0]
     a7a:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     a7c:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a80:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a84:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a88:	f04f 33ff 	mov.w	r3, #4294967295
     a8c:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a8e:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a90:	9305      	str	r3, [sp, #20]
     a92:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a94:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a98:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a9a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     a9e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     aa2:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     aa6:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     aa8:	b2f9      	uxtb	r1, r7
     aaa:	f3c5 6507 	ubfx	r5, r5, #24, #8
     aae:	9103      	str	r1, [sp, #12]
     ab0:	b2e9      	uxtb	r1, r5
     ab2:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     ab4:	fa5f f18c 	uxtb.w	r1, ip
     ab8:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     aba:	9907      	ldr	r1, [sp, #28]
     abc:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     abe:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ac0:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ac4:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ac8:	d80c      	bhi.n	ae4 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     aca:	9905      	ldr	r1, [sp, #20]
     acc:	458c      	cmp	ip, r1
     ace:	dc07      	bgt.n	ae0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     ad0:	290f      	cmp	r1, #15
     ad2:	d005      	beq.n	ae0 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     ad4:	3101      	adds	r1, #1
     ad6:	b2c9      	uxtb	r1, r1
     ad8:	428b      	cmp	r3, r1
     ada:	9102      	str	r1, [sp, #8]
     adc:	bf38      	it	cc
     ade:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     ae0:	b259      	sxtb	r1, r3
     ae2:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ae4:	a909      	add	r1, sp, #36	; 0x24
     ae6:	9100      	str	r1, [sp, #0]
     ae8:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aea:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     aee:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     af2:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af6:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     afa:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     afe:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     b02:	f009 f9b9 	bl	9e78 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b06:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     b08:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     b10:	46d1      	mov	r9, sl
     b12:	d1bf      	bne.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     b14:	9806      	ldr	r0, [sp, #24]
     b16:	b00b      	add	sp, #44	; 0x2c
     b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b1c <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     b1c:	4b48      	ldr	r3, [pc, #288]	; (c40 <updatePaletteIndex(LEDStruct&)+0x124>)
     b1e:	781b      	ldrb	r3, [r3, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	f000 808b 	beq.w	c3c <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     b26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b2a:	b09b      	sub	sp, #108	; 0x6c
     b2c:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     b30:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     b32:	2300      	movs	r3, #0
     b34:	4a43      	ldr	r2, [pc, #268]	; (c44 <updatePaletteIndex(LEDStruct&)+0x128>)
     b36:	9307      	str	r3, [sp, #28]
     b38:	f8df 910c 	ldr.w	r9, [pc, #268]	; c48 <updatePaletteIndex(LEDStruct&)+0x12c>
     b3c:	9009      	str	r0, [sp, #36]	; 0x24
     b3e:	f200 2327 	addw	r3, r0, #551	; 0x227
     b42:	9208      	str	r2, [sp, #32]
     b44:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     b46:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     b48:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b4c:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b4e:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b50:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b52:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b54:	d1f8      	bne.n	b48 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b56:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b5a:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b5c:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b60:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b64:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b66:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b6a:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     b6e:	2400      	movs	r4, #0
     b70:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b72:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b76:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b7a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b7e:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b82:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b84:	b2f1      	uxtb	r1, r6
     b86:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b8a:	9103      	str	r1, [sp, #12]
     b8c:	b2e9      	uxtb	r1, r5
     b8e:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b90:	fa5f f18c 	uxtb.w	r1, ip
     b94:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b96:	9906      	ldr	r1, [sp, #24]
     b98:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b9a:	aa0c      	add	r2, sp, #48	; 0x30
     b9c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b9e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ba2:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ba6:	d80c      	bhi.n	bc2 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     ba8:	9905      	ldr	r1, [sp, #20]
     baa:	458c      	cmp	ip, r1
     bac:	dc07      	bgt.n	bbe <updatePaletteIndex(LEDStruct&)+0xa2>
     bae:	290f      	cmp	r1, #15
     bb0:	d005      	beq.n	bbe <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     bb2:	3101      	adds	r1, #1
     bb4:	b2c9      	uxtb	r1, r1
     bb6:	428b      	cmp	r3, r1
     bb8:	9102      	str	r1, [sp, #8]
     bba:	bf38      	it	cc
     bbc:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     bbe:	b259      	sxtb	r1, r3
     bc0:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     bc2:	a90d      	add	r1, sp, #52	; 0x34
     bc4:	9100      	str	r1, [sp, #0]
     bc6:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bc8:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     bcc:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     bd0:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bd4:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     bd8:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     bdc:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     be0:	f009 f94a 	bl	9e78 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     be4:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     be6:	46d3      	mov	fp, sl
        g = rhs.g;
     be8:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     bec:	f8dd 8010 	ldr.w	r8, [sp, #16]
     bf0:	d1bf      	bne.n	b72 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     bf4:	aa0e      	add	r2, sp, #56	; 0x38
     bf6:	4293      	cmp	r3, r2
     bf8:	d018      	beq.n	c2c <updatePaletteIndex(LEDStruct&)+0x110>
     bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bfc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     bfe:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     c02:	e001      	b.n	c08 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     c04:	42a3      	cmp	r3, r4
     c06:	d011      	beq.n	c2c <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     c08:	f812 1b01 	ldrb.w	r1, [r2], #1
     c0c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     c10:	4288      	cmp	r0, r1
     c12:	d0f7      	beq.n	c04 <updatePaletteIndex(LEDStruct&)+0xe8>
     c14:	4b0a      	ldr	r3, [pc, #40]	; (c40 <updatePaletteIndex(LEDStruct&)+0x124>)
     c16:	9a07      	ldr	r2, [sp, #28]
     c18:	781b      	ldrb	r3, [r3, #0]
     c1a:	3201      	adds	r2, #1
     c1c:	4293      	cmp	r3, r2
     c1e:	9207      	str	r2, [sp, #28]
     c20:	dd09      	ble.n	c36 <updatePaletteIndex(LEDStruct&)+0x11a>
     c22:	9b08      	ldr	r3, [sp, #32]
     c24:	f853 9f04 	ldr.w	r9, [r3, #4]!
     c28:	9308      	str	r3, [sp, #32]
     c2a:	e78c      	b.n	b46 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c2e:	f89d 201c 	ldrb.w	r2, [sp, #28]
     c32:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     c36:	b01b      	add	sp, #108	; 0x6c
     c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c3c:	4770      	bx	lr
     c3e:	bf00      	nop
     c40:	1fff8750 	.word	0x1fff8750
     c44:	0000f898 	.word	0x0000f898
     c48:	00010414 	.word	0x00010414

00000c4c <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c4e:	4d35      	ldr	r5, [pc, #212]	; (d24 <initialize()+0xd8>)
		}
	}
}

// Initialization function
void initialize() {
     c50:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c52:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     c54:	2400      	movs	r4, #0
     c56:	4628      	mov	r0, r5
     c58:	2196      	movs	r1, #150	; 0x96
     c5a:	f88d 4004 	strb.w	r4, [sp, #4]
     c5e:	f88d 4005 	strb.w	r4, [sp, #5]
     c62:	f88d 4006 	strb.w	r4, [sp, #6]
     c66:	f009 f8d7 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     c6a:	492f      	ldr	r1, [pc, #188]	; (d28 <initialize()+0xdc>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     c6c:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     c70:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     c74:	f7ff fef4 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     c78:	492c      	ldr	r1, [pc, #176]	; (d2c <initialize()+0xe0>)
     c7a:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     c7e:	f7ff feef 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     c82:	4628      	mov	r0, r5
     c84:	f7ff ff4a 	bl	b1c <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     c88:	4b29      	ldr	r3, [pc, #164]	; (d30 <initialize()+0xe4>)
     c8a:	4a2a      	ldr	r2, [pc, #168]	; (d34 <initialize()+0xe8>)
     c8c:	7818      	ldrb	r0, [r3, #0]
     c8e:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     c92:	4623      	mov	r3, r4
     c94:	e001      	b.n	c9a <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     c96:	2b1e      	cmp	r3, #30
     c98:	d008      	beq.n	cac <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     c9a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     c9e:	4281      	cmp	r1, r0
     ca0:	b2dc      	uxtb	r4, r3
     ca2:	f103 0301 	add.w	r3, r3, #1
     ca6:	d1f6      	bne.n	c96 <initialize()+0x4a>
			leds.mode_number = i;
     ca8:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     cac:	4e22      	ldr	r6, [pc, #136]	; (d38 <initialize()+0xec>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     cae:	4f23      	ldr	r7, [pc, #140]	; (d3c <initialize()+0xf0>)
     cb0:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     cb2:	aa01      	add	r2, sp, #4
     cb4:	4630      	mov	r0, r6
     cb6:	2196      	movs	r1, #150	; 0x96
     cb8:	f88d 4004 	strb.w	r4, [sp, #4]
     cbc:	f88d 4005 	strb.w	r4, [sp, #5]
     cc0:	f88d 4006 	strb.w	r4, [sp, #6]
     cc4:	f009 f8a8 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     cc8:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     cca:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     cce:	491c      	ldr	r1, [pc, #112]	; (d40 <initialize()+0xf4>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     cd0:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     cd4:	f7ff fec4 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     cd8:	491a      	ldr	r1, [pc, #104]	; (d44 <initialize()+0xf8>)
     cda:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     cde:	f7ff febf 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     ce2:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     ce6:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     cea:	4630      	mov	r0, r6
     cec:	f7ff ff16 	bl	b1c <updatePaletteIndex(LEDStruct&)>

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     cf0:	aa01      	add	r2, sp, #4
     cf2:	4638      	mov	r0, r7
     cf4:	2196      	movs	r1, #150	; 0x96
     cf6:	f88d 4004 	strb.w	r4, [sp, #4]
     cfa:	f88d 4005 	strb.w	r4, [sp, #5]
     cfe:	f88d 4006 	strb.w	r4, [sp, #6]
     d02:	f009 f889 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	over_leds.array_type		= OVERLAY;
     d06:	2302      	movs	r3, #2
	over_leds.current_palette	= cequal_gp;
     d08:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     d0c:	490e      	ldr	r1, [pc, #56]	; (d48 <initialize()+0xfc>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
	over_leds.array_type		= OVERLAY;
     d0e:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	over_leds.current_palette	= cequal_gp;
     d12:	f7ff fea5 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
	over_leds.target_palette	= cequal_gp;
     d16:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     d1a:	490b      	ldr	r1, [pc, #44]	; (d48 <initialize()+0xfc>)
     d1c:	f7ff fea0 	bl	a60 <CRGBPalette16::operator=(unsigned char const*)>
}
     d20:	b003      	add	sp, #12
     d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d24:	1fff9e44 	.word	0x1fff9e44
     d28:	00010850 	.word	0x00010850
     d2c:	0000feec 	.word	0x0000feec
     d30:	1fff8749 	.word	0x1fff8749
     d34:	1fff8723 	.word	0x1fff8723
     d38:	1fff8c90 	.word	0x1fff8c90
     d3c:	1fff95e4 	.word	0x1fff95e4
     d40:	000105f0 	.word	0x000105f0
     d44:	0000f858 	.word	0x0000f858
     d48:	000106b0 	.word	0x000106b0

00000d4c <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     d4c:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d4e:	2112      	movs	r1, #18
     d50:	b082      	sub	sp, #8
     d52:	482e      	ldr	r0, [pc, #184]	; (e0c <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d54:	4c2e      	ldr	r4, [pc, #184]	; (e10 <global_debug()+0xc4>)
     d56:	f00b f933 	bl	bfc0 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     d5a:	4b2e      	ldr	r3, [pc, #184]	; (e14 <global_debug()+0xc8>)
     d5c:	4620      	mov	r0, r4
     d5e:	7819      	ldrb	r1, [r3, #0]
     d60:	f00b fb82 	bl	c468 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d64:	4620      	mov	r0, r4
     d66:	f00b fb2f 	bl	c3c8 <Print::println()>
     d6a:	2111      	movs	r1, #17
     d6c:	482a      	ldr	r0, [pc, #168]	; (e18 <global_debug()+0xcc>)
     d6e:	f00b f927 	bl	bfc0 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     d72:	4b2a      	ldr	r3, [pc, #168]	; (e1c <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d74:	4620      	mov	r0, r4
     d76:	7819      	ldrb	r1, [r3, #0]
     d78:	f00b fb76 	bl	c468 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d7c:	4620      	mov	r0, r4
     d7e:	f00b fb23 	bl	c3c8 <Print::println()>
     d82:	2115      	movs	r1, #21
     d84:	4826      	ldr	r0, [pc, #152]	; (e20 <global_debug()+0xd4>)
     d86:	f00b f91b 	bl	bfc0 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     d8a:	4b26      	ldr	r3, [pc, #152]	; (e24 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d8c:	4620      	mov	r0, r4
     d8e:	7819      	ldrb	r1, [r3, #0]
     d90:	f00b fb6a 	bl	c468 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d94:	4620      	mov	r0, r4
     d96:	f00b fb17 	bl	c3c8 <Print::println()>
     d9a:	2114      	movs	r1, #20
     d9c:	4822      	ldr	r0, [pc, #136]	; (e28 <global_debug()+0xdc>)
     d9e:	f00b f90f 	bl	bfc0 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     da2:	4b22      	ldr	r3, [pc, #136]	; (e2c <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     da4:	4620      	mov	r0, r4
     da6:	8819      	ldrh	r1, [r3, #0]
     da8:	f00b fb5e 	bl	c468 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     dac:	4620      	mov	r0, r4
     dae:	f00b fb0b 	bl	c3c8 <Print::println()>
     db2:	210f      	movs	r1, #15
     db4:	481e      	ldr	r0, [pc, #120]	; (e30 <global_debug()+0xe4>)
     db6:	f00b f903 	bl	bfc0 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     dba:	4b1e      	ldr	r3, [pc, #120]	; (e34 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     dbc:	4620      	mov	r0, r4
     dbe:	8819      	ldrh	r1, [r3, #0]
     dc0:	f00b fb52 	bl	c468 <Print::print(long)>
     dc4:	2102      	movs	r1, #2
     dc6:	481c      	ldr	r0, [pc, #112]	; (e38 <global_debug()+0xec>)
     dc8:	f00b f8fa 	bl	bfc0 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     dcc:	4b1b      	ldr	r3, [pc, #108]	; (e3c <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     dce:	220a      	movs	r2, #10
     dd0:	7819      	ldrb	r1, [r3, #0]
     dd2:	4620      	mov	r0, r4
     dd4:	2300      	movs	r3, #0
     dd6:	f00b fb07 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     dda:	2101      	movs	r1, #1
     ddc:	4818      	ldr	r0, [pc, #96]	; (e40 <global_debug()+0xf4>)
     dde:	f00b f8ef 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     de2:	4620      	mov	r0, r4
     de4:	f00b faf0 	bl	c3c8 <Print::println()>
     de8:	210e      	movs	r1, #14
     dea:	4816      	ldr	r0, [pc, #88]	; (e44 <global_debug()+0xf8>)
     dec:	f00b f8e8 	bl	bfc0 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     df0:	4b15      	ldr	r3, [pc, #84]	; (e48 <global_debug()+0xfc>)
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	9301      	str	r3, [sp, #4]
	return ret;
     df6:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     df8:	2300      	movs	r3, #0
     dfa:	220a      	movs	r2, #10
     dfc:	4620      	mov	r0, r4
     dfe:	f00b faf3 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     e02:	4620      	mov	r0, r4
     e04:	f00b fae0 	bl	c3c8 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     e08:	b002      	add	sp, #8
     e0a:	bd10      	pop	{r4, pc}
     e0c:	0000dcb4 	.word	0x0000dcb4
     e10:	1fff8768 	.word	0x1fff8768
     e14:	1fff875c 	.word	0x1fff875c
     e18:	0000dcc8 	.word	0x0000dcc8
     e1c:	1fff874c 	.word	0x1fff874c
     e20:	0000dcdc 	.word	0x0000dcdc
     e24:	1fff8722 	.word	0x1fff8722
     e28:	0000dcf4 	.word	0x0000dcf4
     e2c:	1fff8c8c 	.word	0x1fff8c8c
     e30:	0000dd0c 	.word	0x0000dd0c
     e34:	1fff95e0 	.word	0x1fff95e0
     e38:	0000dd1c 	.word	0x0000dd1c
     e3c:	1fff9539 	.word	0x1fff9539
     e40:	0000dd20 	.word	0x0000dd20
     e44:	0000dd24 	.word	0x0000dd24
     e48:	1fffa8c0 	.word	0x1fffa8c0

00000e4c <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e4c:	491e      	ldr	r1, [pc, #120]	; (ec8 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     e4e:	481f      	ldr	r0, [pc, #124]	; (ecc <begin_transition()+0x80>)
     e50:	880b      	ldrh	r3, [r1, #0]
     e52:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     e56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e5a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     e5e:	3319      	adds	r3, #25
     e60:	b29b      	uxth	r3, r3
     e62:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     e66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     e6a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e6e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e72:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e74:	b2db      	uxtb	r3, r3
     e76:	b292      	uxth	r2, r2
     e78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     e7c:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e7e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e80:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     e84:	4e12      	ldr	r6, [pc, #72]	; (ed0 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     e86:	4d13      	ldr	r5, [pc, #76]	; (ed4 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e88:	5cf3      	ldrb	r3, [r6, r3]
     e8a:	4c13      	ldr	r4, [pc, #76]	; (ed8 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e8c:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     e8e:	b2ff      	uxtb	r7, r7
     e90:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     e94:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     e96:	123f      	asrs	r7, r7, #8
     e98:	3703      	adds	r7, #3
	switch (transition_type) {
     e9a:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     e9c:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e9e:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     ea0:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     ea2:	d00c      	beq.n	ebe <begin_transition()+0x72>
     ea4:	d306      	bcc.n	eb4 <begin_transition()+0x68>
     ea6:	2b02      	cmp	r3, #2
     ea8:	d102      	bne.n	eb0 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     eaa:	4b0c      	ldr	r3, [pc, #48]	; (edc <begin_transition()+0x90>)
     eac:	2200      	movs	r2, #0
     eae:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     eb0:	bcf0      	pop	{r4, r5, r6, r7}
     eb2:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     eb4:	4b0a      	ldr	r3, [pc, #40]	; (ee0 <begin_transition()+0x94>)
     eb6:	2200      	movs	r2, #0
     eb8:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     eba:	bcf0      	pop	{r4, r5, r6, r7}
     ebc:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <begin_transition()+0x90>)
     ec0:	224a      	movs	r2, #74	; 0x4a
     ec2:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     ec4:	bcf0      	pop	{r4, r5, r6, r7}
     ec6:	4770      	bx	lr
     ec8:	1fff875e 	.word	0x1fff875e
     ecc:	1fff94dc 	.word	0x1fff94dc
     ed0:	1fff8754 	.word	0x1fff8754
     ed4:	1fff9e2d 	.word	0x1fff9e2d
     ed8:	1fff94f0 	.word	0x1fff94f0
     edc:	1fff9518 	.word	0x1fff9518
     ee0:	1fff8c8e 	.word	0x1fff8c8e

00000ee4 <finish_transition()>:

void finish_transition() {
     ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     ee6:	4cec      	ldr	r4, [pc, #944]	; (1298 <finish_transition()+0x3b4>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     ee8:	48ec      	ldr	r0, [pc, #944]	; (129c <finish_transition()+0x3b8>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     eea:	b083      	sub	sp, #12
	in_transition = 0;
     eec:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     eee:	aa01      	add	r2, sp, #4
     ef0:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
     ef2:	7023      	strb	r3, [r4, #0]
     ef4:	f88d 3004 	strb.w	r3, [sp, #4]
     ef8:	f88d 3005 	strb.w	r3, [sp, #5]
     efc:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     f00:	f008 ff8a 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
     f04:	4be6      	ldr	r3, [pc, #920]	; (12a0 <finish_transition()+0x3bc>)
     f06:	4ae7      	ldr	r2, [pc, #924]	; (12a4 <finish_transition()+0x3c0>)
     f08:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f0c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     f10:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     f14:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     f18:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     f1c:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     f20:	f803 1c01 	strb.w	r1, [r3, #-1]
     f24:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     f26:	429d      	cmp	r5, r3
     f28:	f102 0203 	add.w	r2, r2, #3
     f2c:	d1ee      	bne.n	f0c <finish_transition()+0x28>
     f2e:	4cde      	ldr	r4, [pc, #888]	; (12a8 <finish_transition()+0x3c4>)
     f30:	4eda      	ldr	r6, [pc, #872]	; (129c <finish_transition()+0x3b8>)
     f32:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
     f36:	f886 31c2 	strb.w	r3, [r6, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     f3a:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
     f3e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f40:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
     f44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f4a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     f4e:	f894 e1c3 	ldrb.w	lr, [r4, #451]	; 0x1c3
     f52:	f894 71c4 	ldrb.w	r7, [r4, #452]	; 0x1c4
     f56:	f886 e1c3 	strb.w	lr, [r6, #451]	; 0x1c3
     f5a:	f886 71c4 	strb.w	r7, [r6, #452]	; 0x1c4
     f5e:	f894 e1c5 	ldrb.w	lr, [r4, #453]	; 0x1c5
     f62:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
     f66:	f886 e1c5 	strb.w	lr, [r6, #453]	; 0x1c5
     f6a:	f886 71c6 	strb.w	r7, [r6, #454]	; 0x1c6
     f6e:	f894 e1c7 	ldrb.w	lr, [r4, #455]	; 0x1c7
     f72:	f886 e1c7 	strb.w	lr, [r6, #455]	; 0x1c7
     f76:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
     f7a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     f7e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f80:	f506 75fc 	add.w	r5, r6, #504	; 0x1f8
     f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f86:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f8a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     f8e:	f894 e229 	ldrb.w	lr, [r4, #553]	; 0x229
     f92:	f894 c228 	ldrb.w	ip, [r4, #552]	; 0x228
     f96:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
     f9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     f9e:	f886 e229 	strb.w	lr, [r6, #553]	; 0x229
     fa2:	f886 c228 	strb.w	ip, [r6, #552]	; 0x228
     fa6:	f886 722a 	strb.w	r7, [r6, #554]	; 0x22a
     faa:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
     fae:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
     fb2:	f894 e22d 	ldrb.w	lr, [r4, #557]	; 0x22d
     fb6:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
     fba:	f894 522f 	ldrb.w	r5, [r4, #559]	; 0x22f
     fbe:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
     fc2:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
     fc6:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b
     fca:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c
     fce:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
     fd2:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
     fd6:	f886 e22d 	strb.w	lr, [r6, #557]	; 0x22d
     fda:	f886 722e 	strb.w	r7, [r6, #558]	; 0x22e
     fde:	f894 e234 	ldrb.w	lr, [r4, #564]	; 0x234
     fe2:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
     fe6:	f886 522f 	strb.w	r5, [r6, #559]	; 0x22f
     fea:	f886 0230 	strb.w	r0, [r6, #560]	; 0x230
     fee:	f894 5236 	ldrb.w	r5, [r4, #566]	; 0x236
     ff2:	f894 0237 	ldrb.w	r0, [r4, #567]	; 0x237
     ff6:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
     ffa:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
     ffe:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    1002:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    1006:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
    100a:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    100e:	f886 7235 	strb.w	r7, [r6, #565]	; 0x235
    1012:	f886 2239 	strb.w	r2, [r6, #569]	; 0x239
    1016:	f886 323a 	strb.w	r3, [r6, #570]	; 0x23a
    101a:	f886 e234 	strb.w	lr, [r6, #564]	; 0x234
    101e:	f886 5236 	strb.w	r5, [r6, #566]	; 0x236
    1022:	f886 0237 	strb.w	r0, [r6, #567]	; 0x237
    1026:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    102a:	f206 233e 	addw	r3, r6, #574	; 0x23e
    102e:	f204 223e 	addw	r2, r4, #574	; 0x23e
    1032:	f206 277a 	addw	r7, r6, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1036:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
    103a:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    103e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1042:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
    1046:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    104a:	f803 1c01 	strb.w	r1, [r3, #-1]
    104e:	3303      	adds	r3, #3
    1050:	429f      	cmp	r7, r3
    1052:	f102 0203 	add.w	r2, r2, #3
    1056:	d1ee      	bne.n	1036 <finish_transition()+0x152>
    1058:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    105c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    1060:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    1064:	f886 2277 	strb.w	r2, [r6, #631]	; 0x277
    1068:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    106c:	4b8f      	ldr	r3, [pc, #572]	; (12ac <finish_transition()+0x3c8>)
    106e:	f886 0278 	strb.w	r0, [r6, #632]	; 0x278
    1072:	f886 1279 	strb.w	r1, [r6, #633]	; 0x279
    1076:	f894 027b 	ldrb.w	r0, [r4, #635]	; 0x27b
    107a:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    107e:	f886 227a 	strb.w	r2, [r6, #634]	; 0x27a
    1082:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    1086:	f886 027b 	strb.w	r0, [r6, #635]	; 0x27b
    108a:	f886 127c 	strb.w	r1, [r6, #636]	; 0x27c
    108e:	f894 027e 	ldrb.w	r0, [r4, #638]	; 0x27e
    1092:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    1096:	f886 227d 	strb.w	r2, [r6, #637]	; 0x27d
    109a:	4a85      	ldr	r2, [pc, #532]	; (12b0 <finish_transition()+0x3cc>)
    109c:	f886 027e 	strb.w	r0, [r6, #638]	; 0x27e
    10a0:	f886 127f 	strb.w	r1, [r6, #639]	; 0x27f
    10a4:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    10a8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    10ac:	f803 1b01 	strb.w	r1, [r3], #1
    10b0:	4283      	cmp	r3, r0
    10b2:	d1f9      	bne.n	10a8 <finish_transition()+0x1c4>
    10b4:	497f      	ldr	r1, [pc, #508]	; (12b4 <finish_transition()+0x3d0>)
    10b6:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    10ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    10be:	f803 2b01 	strb.w	r2, [r3], #1
    10c2:	4283      	cmp	r3, r0
    10c4:	4a75      	ldr	r2, [pc, #468]	; (129c <finish_transition()+0x3b8>)
    10c6:	d1f8      	bne.n	10ba <finish_transition()+0x1d6>
    10c8:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    10cc:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    10d0:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    10d4:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    10d8:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    10dc:	f882 3316 	strb.w	r3, [r2, #790]	; 0x316
    10e0:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    10e4:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
    10e8:	f882 5318 	strb.w	r5, [r2, #792]	; 0x318
    10ec:	f8b4 631c 	ldrh.w	r6, [r4, #796]	; 0x31c
    10f0:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    10f4:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    10f8:	f882 131a 	strb.w	r1, [r2, #794]	; 0x31a
    10fc:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    1100:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    1104:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
    1108:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
    110c:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
    1110:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
    1114:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
    1118:	f894 5325 	ldrb.w	r5, [r4, #805]	; 0x325
    111c:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
    1120:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    1124:	f894 0326 	ldrb.w	r0, [r4, #806]	; 0x326
    1128:	f894 1327 	ldrb.w	r1, [r4, #807]	; 0x327
    112c:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    1130:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    1134:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1138:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    113c:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
    1140:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    1144:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1148:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    114c:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    1150:	f8b4 632c 	ldrh.w	r6, [r4, #812]	; 0x32c
    1154:	f8b4 532e 	ldrh.w	r5, [r4, #814]	; 0x32e
    1158:	f8b4 0330 	ldrh.w	r0, [r4, #816]	; 0x330
    115c:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    1160:	f8b4 3334 	ldrh.w	r3, [r4, #820]	; 0x334
    1164:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1168:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    116c:	f8b4 6336 	ldrh.w	r6, [r4, #822]	; 0x336
    1170:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
    1174:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
    1178:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    117c:	f8b4 033a 	ldrh.w	r0, [r4, #826]	; 0x33a
    1180:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    1184:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    1188:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    118c:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    1190:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    1194:	f894 633f 	ldrb.w	r6, [r4, #831]	; 0x33f
    1198:	f894 5340 	ldrb.w	r5, [r4, #832]	; 0x340
    119c:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
    11a0:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    11a4:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341
    11a8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    11ac:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    11b0:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    11b4:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    11b8:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    11bc:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
    11c0:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    11c4:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    11c8:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    11cc:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    11d0:	f894 6345 	ldrb.w	r6, [r4, #837]	; 0x345
    11d4:	f894 5346 	ldrb.w	r5, [r4, #838]	; 0x346
    11d8:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
    11dc:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    11e0:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    11e4:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    11e8:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    11ec:	f894 634a 	ldrb.w	r6, [r4, #842]	; 0x34a
    11f0:	f894 534b 	ldrb.w	r5, [r4, #843]	; 0x34b
    11f4:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
    11f8:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    11fc:	f894 034c 	ldrb.w	r0, [r4, #844]	; 0x34c
    1200:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    1204:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    1208:	f894 334e 	ldrb.w	r3, [r4, #846]	; 0x34e
    120c:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    1210:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    1214:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
    1218:	f894 5350 	ldrb.w	r5, [r4, #848]	; 0x350
    121c:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
    1220:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    1224:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    1228:	f894 1352 	ldrb.w	r1, [r4, #850]	; 0x352
    122c:	f894 3353 	ldrb.w	r3, [r4, #851]	; 0x353
    1230:	f894 634f 	ldrb.w	r6, [r4, #847]	; 0x34f
    1234:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1238:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
    123c:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    1240:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    1244:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1248:	491b      	ldr	r1, [pc, #108]	; (12b8 <finish_transition()+0x3d4>)
    124a:	f894 6354 	ldrb.w	r6, [r4, #852]	; 0x354
    124e:	f894 335d 	ldrb.w	r3, [r4, #861]	; 0x35d
    1252:	f8d4 5358 	ldr.w	r5, [r4, #856]	; 0x358
    1256:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
    125a:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    125e:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    1262:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    1266:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
    126a:	f502 7358 	add.w	r3, r2, #864	; 0x360
    126e:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    1272:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1276:	f843 0b04 	str.w	r0, [r3], #4
    127a:	4293      	cmp	r3, r2
    127c:	d1f9      	bne.n	1272 <finish_transition()+0x38e>
    127e:	4a0f      	ldr	r2, [pc, #60]	; (12bc <finish_transition()+0x3d8>)
    1280:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1284:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1288:	f843 1b04 	str.w	r1, [r3], #4
    128c:	4283      	cmp	r3, r0
    128e:	d1f9      	bne.n	1284 <finish_transition()+0x3a0>
    1290:	4a0b      	ldr	r2, [pc, #44]	; (12c0 <finish_transition()+0x3dc>)
    1292:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    1296:	e015      	b.n	12c4 <finish_transition()+0x3e0>
    1298:	1fff94dc 	.word	0x1fff94dc
    129c:	1fff9e44 	.word	0x1fff9e44
    12a0:	1fff9e47 	.word	0x1fff9e47
    12a4:	1fff8c93 	.word	0x1fff8c93
    12a8:	1fff8c90 	.word	0x1fff8c90
    12ac:	1fffa0c4 	.word	0x1fffa0c4
    12b0:	1fff8f0f 	.word	0x1fff8f0f
    12b4:	1fff8f5a 	.word	0x1fff8f5a
    12b8:	1fff8fec 	.word	0x1fff8fec
    12bc:	1fff90dc 	.word	0x1fff90dc
    12c0:	1fff91cf 	.word	0x1fff91cf
    12c4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    12c8:	f803 1b01 	strb.w	r1, [r3], #1
    12cc:	4283      	cmp	r3, r0
    12ce:	d1f9      	bne.n	12c4 <finish_transition()+0x3e0>
    12d0:	4a5a      	ldr	r2, [pc, #360]	; (143c <finish_transition()+0x558>)
    12d2:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    12d6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    12da:	f843 1b04 	str.w	r1, [r3], #4
    12de:	4283      	cmp	r3, r0
    12e0:	d1f9      	bne.n	12d6 <finish_transition()+0x3f2>
    12e2:	4a57      	ldr	r2, [pc, #348]	; (1440 <finish_transition()+0x55c>)
    12e4:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    12e8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    12ec:	f843 1b04 	str.w	r1, [r3], #4
    12f0:	4283      	cmp	r3, r0
    12f2:	4954      	ldr	r1, [pc, #336]	; (1444 <finish_transition()+0x560>)
    12f4:	d1f8      	bne.n	12e8 <finish_transition()+0x404>
    12f6:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    12fa:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    12fe:	f894 675e 	ldrb.w	r6, [r4, #1886]	; 0x75e
    1302:	f8b4 5760 	ldrh.w	r5, [r4, #1888]	; 0x760
    1306:	f8b4 0762 	ldrh.w	r0, [r4, #1890]	; 0x762
    130a:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    130e:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    1312:	f8b4 3764 	ldrh.w	r3, [r4, #1892]	; 0x764
    1316:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    131a:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    131e:	f8a1 5760 	strh.w	r5, [r1, #1888]	; 0x760
    1322:	f8a1 0762 	strh.w	r0, [r1, #1890]	; 0x762
    1326:	f8a1 3764 	strh.w	r3, [r1, #1892]	; 0x764
    132a:	f881 2766 	strb.w	r2, [r1, #1894]	; 0x766
    132e:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    1332:	f894 6767 	ldrb.w	r6, [r4, #1895]	; 0x767
    1336:	f894 5768 	ldrb.w	r5, [r4, #1896]	; 0x768
    133a:	f894 0769 	ldrb.w	r0, [r4, #1897]	; 0x769
    133e:	4a42      	ldr	r2, [pc, #264]	; (1448 <finish_transition()+0x564>)
    1340:	f881 376a 	strb.w	r3, [r1, #1898]	; 0x76a
    1344:	f881 6767 	strb.w	r6, [r1, #1895]	; 0x767
    1348:	f881 5768 	strb.w	r5, [r1, #1896]	; 0x768
    134c:	f881 0769 	strb.w	r0, [r1, #1897]	; 0x769
    1350:	f201 736c 	addw	r3, r1, #1900	; 0x76c
    1354:	f201 718c 	addw	r1, r1, #1932	; 0x78c
    1358:	f852 0f04 	ldr.w	r0, [r2, #4]!
    135c:	f843 0b04 	str.w	r0, [r3], #4
    1360:	428b      	cmp	r3, r1
    1362:	d1f9      	bne.n	1358 <finish_transition()+0x474>
    1364:	4a39      	ldr	r2, [pc, #228]	; (144c <finish_transition()+0x568>)
    1366:	f103 0020 	add.w	r0, r3, #32
    136a:	f852 1f04 	ldr.w	r1, [r2, #4]!
    136e:	f843 1b04 	str.w	r1, [r3], #4
    1372:	4283      	cmp	r3, r0
    1374:	d1f9      	bne.n	136a <finish_transition()+0x486>
    1376:	4a36      	ldr	r2, [pc, #216]	; (1450 <finish_transition()+0x56c>)
    1378:	f103 0020 	add.w	r0, r3, #32
    137c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1380:	f843 1b04 	str.w	r1, [r3], #4
    1384:	4283      	cmp	r3, r0
    1386:	d1f9      	bne.n	137c <finish_transition()+0x498>
    1388:	4a32      	ldr	r2, [pc, #200]	; (1454 <finish_transition()+0x570>)
    138a:	f103 0020 	add.w	r0, r3, #32
    138e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1392:	f843 1b04 	str.w	r1, [r3], #4
    1396:	4283      	cmp	r3, r0
    1398:	d1f9      	bne.n	138e <finish_transition()+0x4aa>
    139a:	4a2f      	ldr	r2, [pc, #188]	; (1458 <finish_transition()+0x574>)
    139c:	f103 0020 	add.w	r0, r3, #32
    13a0:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13a4:	f843 1b04 	str.w	r1, [r3], #4
    13a8:	4283      	cmp	r3, r0
    13aa:	d1f9      	bne.n	13a0 <finish_transition()+0x4bc>
    13ac:	4a2b      	ldr	r2, [pc, #172]	; (145c <finish_transition()+0x578>)
    13ae:	f103 0020 	add.w	r0, r3, #32
    13b2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13b6:	f843 1b04 	str.w	r1, [r3], #4
    13ba:	4283      	cmp	r3, r0
    13bc:	4d21      	ldr	r5, [pc, #132]	; (1444 <finish_transition()+0x560>)
    13be:	d1f8      	bne.n	13b2 <finish_transition()+0x4ce>
    13c0:	f8b4 082c 	ldrh.w	r0, [r4, #2092]	; 0x82c
    13c4:	f894 382e 	ldrb.w	r3, [r4, #2094]	; 0x82e
    13c8:	f8b4 2832 	ldrh.w	r2, [r4, #2098]	; 0x832
    13cc:	f8b4 1834 	ldrh.w	r1, [r4, #2100]	; 0x834
    13d0:	f8a5 082c 	strh.w	r0, [r5, #2092]	; 0x82c
    13d4:	f894 0836 	ldrb.w	r0, [r4, #2102]	; 0x836
    13d8:	f8b4 7830 	ldrh.w	r7, [r4, #2096]	; 0x830
    13dc:	f894 6837 	ldrb.w	r6, [r4, #2103]	; 0x837
    13e0:	f885 382e 	strb.w	r3, [r5, #2094]	; 0x82e
    13e4:	f8a5 2832 	strh.w	r2, [r5, #2098]	; 0x832
    13e8:	f894 3838 	ldrb.w	r3, [r4, #2104]	; 0x838
    13ec:	f8a5 1834 	strh.w	r1, [r5, #2100]	; 0x834
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    13f0:	2400      	movs	r4, #0
    13f2:	f885 0836 	strb.w	r0, [r5, #2102]	; 0x836
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    13f6:	aa01      	add	r2, sp, #4
    13f8:	2196      	movs	r1, #150	; 0x96
    13fa:	4819      	ldr	r0, [pc, #100]	; (1460 <finish_transition()+0x57c>)
    13fc:	f885 3838 	strb.w	r3, [r5, #2104]	; 0x838
    1400:	f8a5 7830 	strh.w	r7, [r5, #2096]	; 0x830
    1404:	f885 6837 	strb.w	r6, [r5, #2103]	; 0x837
    1408:	f88d 4004 	strb.w	r4, [sp, #4]
    140c:	f88d 4005 	strb.w	r4, [sp, #5]
    1410:	f88d 4006 	strb.w	r4, [sp, #6]
    1414:	f008 fd00 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1418:	4b12      	ldr	r3, [pc, #72]	; (1464 <finish_transition()+0x580>)
void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
    141a:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    141e:	781b      	ldrb	r3, [r3, #0]
    1420:	b953      	cbnz	r3, 1438 <finish_transition()+0x554>
    1422:	aa01      	add	r2, sp, #4
    1424:	2196      	movs	r1, #150	; 0x96
    1426:	4810      	ldr	r0, [pc, #64]	; (1468 <finish_transition()+0x584>)
    1428:	f88d 3004 	strb.w	r3, [sp, #4]
    142c:	f88d 3005 	strb.w	r3, [sp, #5]
    1430:	f88d 3006 	strb.w	r3, [sp, #6]
    1434:	f008 fcf0 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
}
    1438:	b003      	add	sp, #12
    143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    143c:	1fff9208 	.word	0x1fff9208
    1440:	1fff92f8 	.word	0x1fff92f8
    1444:	1fff9e44 	.word	0x1fff9e44
    1448:	1fff93f8 	.word	0x1fff93f8
    144c:	1fff9418 	.word	0x1fff9418
    1450:	1fff9438 	.word	0x1fff9438
    1454:	1fff9458 	.word	0x1fff9458
    1458:	1fff9478 	.word	0x1fff9478
    145c:	1fff9498 	.word	0x1fff9498
    1460:	1fff8c90 	.word	0x1fff8c90
    1464:	1fff95de 	.word	0x1fff95de
    1468:	1fff95e4 	.word	0x1fff95e4

0000146c <blending()>:

void blending() {
    146c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1470:	4d2f      	ldr	r5, [pc, #188]	; (1530 <blending()+0xc4>)
    1472:	4e30      	ldr	r6, [pc, #192]	; (1534 <blending()+0xc8>)
    1474:	4c30      	ldr	r4, [pc, #192]	; (1538 <blending()+0xcc>)
    1476:	4f31      	ldr	r7, [pc, #196]	; (153c <blending()+0xd0>)
    1478:	b085      	sub	sp, #20
    147a:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    147e:	4632      	mov	r2, r6
    1480:	4629      	mov	r1, r5
    1482:	783b      	ldrb	r3, [r7, #0]
    1484:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 153c <blending()+0xd0>
    1488:	a803      	add	r0, sp, #12
    148a:	3503      	adds	r5, #3
    148c:	f008 fdb6 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1490:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1494:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1498:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    149c:	7021      	strb	r1, [r4, #0]
    149e:	4545      	cmp	r5, r8
        g = rhs.g;
    14a0:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    14a2:	70a3      	strb	r3, [r4, #2]
    14a4:	f106 0603 	add.w	r6, r6, #3
    14a8:	f104 0403 	add.w	r4, r4, #3
    14ac:	d1e7      	bne.n	147e <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    14ae:	4e24      	ldr	r6, [pc, #144]	; (1540 <blending()+0xd4>)
    14b0:	6833      	ldr	r3, [r6, #0]
    14b2:	07db      	lsls	r3, r3, #31
    14b4:	d51f      	bpl.n	14f6 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14b6:	4d23      	ldr	r5, [pc, #140]	; (1544 <blending()+0xd8>)
    14b8:	4c23      	ldr	r4, [pc, #140]	; (1548 <blending()+0xdc>)
    14ba:	682b      	ldr	r3, [r5, #0]
    14bc:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    14be:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    14c2:	9b03      	ldr	r3, [sp, #12]
    14c4:	1a5b      	subs	r3, r3, r1
    14c6:	4293      	cmp	r3, r2
    14c8:	d30c      	bcc.n	14e4 <blending()+0x78>
    14ca:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14cc:	682a      	ldr	r2, [r5, #0]
    14ce:	9202      	str	r2, [sp, #8]
    14d0:	3301      	adds	r3, #1
	return ret;
    14d2:	9a02      	ldr	r2, [sp, #8]
    14d4:	6022      	str	r2, [r4, #0]
    14d6:	b2db      	uxtb	r3, r3
    14d8:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    14da:	2bff      	cmp	r3, #255	; 0xff
    14dc:	d006      	beq.n	14ec <blending()+0x80>
		finish_transition();
	}
}
    14de:	b005      	add	sp, #20
    14e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14e4:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    14e8:	2bff      	cmp	r3, #255	; 0xff
    14ea:	d1f8      	bne.n	14de <blending()+0x72>
		finish_transition();
    14ec:	f7ff fcfa 	bl	ee4 <finish_transition()>
	}
}
    14f0:	b005      	add	sp, #20
    14f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    14f6:	4630      	mov	r0, r6
    14f8:	f009 fcca 	bl	ae90 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14fc:	4d11      	ldr	r5, [pc, #68]	; (1544 <blending()+0xd8>)
    14fe:	b950      	cbnz	r0, 1516 <blending()+0xaa>
    1500:	4c11      	ldr	r4, [pc, #68]	; (1548 <blending()+0xdc>)
    1502:	682b      	ldr	r3, [r5, #0]
    1504:	9303      	str	r3, [sp, #12]
    1506:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    150a:	9b03      	ldr	r3, [sp, #12]
    150c:	1a5b      	subs	r3, r3, r1
    150e:	4293      	cmp	r3, r2
    1510:	d2db      	bcs.n	14ca <blending()+0x5e>
    1512:	783b      	ldrb	r3, [r7, #0]
    1514:	e7e1      	b.n	14da <blending()+0x6e>
    1516:	4b0d      	ldr	r3, [pc, #52]	; (154c <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1518:	682a      	ldr	r2, [r5, #0]
    151a:	781b      	ldrb	r3, [r3, #0]
    151c:	4c0a      	ldr	r4, [pc, #40]	; (1548 <blending()+0xdc>)
    151e:	9201      	str	r2, [sp, #4]
	return ret;
    1520:	9a01      	ldr	r2, [sp, #4]
    1522:	6022      	str	r2, [r4, #0]
    1524:	009b      	lsls	r3, r3, #2
    1526:	4630      	mov	r0, r6
    1528:	6063      	str	r3, [r4, #4]
    152a:	f009 fcb7 	bl	ae9c <__cxa_guard_release>
    152e:	e7e8      	b.n	1502 <blending()+0x96>
    1530:	1fff9e44 	.word	0x1fff9e44
    1534:	1fff8c90 	.word	0x1fff8c90
    1538:	1fffa680 	.word	0x1fffa680
    153c:	1fff8c8e 	.word	0x1fff8c8e
    1540:	1fff95d0 	.word	0x1fff95d0
    1544:	1fffa8c0 	.word	0x1fffa8c0
    1548:	1fff94e0 	.word	0x1fff94e0
    154c:	1fff9e2d 	.word	0x1fff9e2d

00001550 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1554:	4e94      	ldr	r6, [pc, #592]	; (17a8 <wipedown()+0x258>)
    1556:	f896 c000 	ldrb.w	ip, [r6]
    155a:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    155e:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1560:	2b00      	cmp	r3, #0
    1562:	f000 811e 	beq.w	17a2 <wipedown()+0x252>
    1566:	f103 3bff 	add.w	fp, r3, #4294967295
    156a:	fa1f fb8b 	uxth.w	fp, fp
    156e:	488f      	ldr	r0, [pc, #572]	; (17ac <wipedown()+0x25c>)
    1570:	498f      	ldr	r1, [pc, #572]	; (17b0 <wipedown()+0x260>)
    1572:	f10b 0b01 	add.w	fp, fp, #1
    1576:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    157a:	4483      	add	fp, r0
    157c:	4602      	mov	r2, r0
    157e:	460d      	mov	r5, r1
    1580:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1582:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    1584:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1588:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    158c:	7027      	strb	r7, [r4, #0]
    158e:	3203      	adds	r2, #3
    1590:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1594:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    1598:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    159c:	f884 a001 	strb.w	sl, [r4, #1]
    15a0:	455a      	cmp	r2, fp
        b = rhs.b;
    15a2:	f884 9002 	strb.w	r9, [r4, #2]
    15a6:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15aa:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    15ae:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    15b2:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    15b6:	f104 0403 	add.w	r4, r4, #3
    15ba:	f1a1 0103 	sub.w	r1, r1, #3
    15be:	d1e0      	bne.n	1582 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    15c0:	2b4a      	cmp	r3, #74	; 0x4a
    15c2:	d827      	bhi.n	1614 <wipedown()+0xc4>
    15c4:	487b      	ldr	r0, [pc, #492]	; (17b4 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    15c6:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15ca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    15ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    15d2:	eb00 0801 	add.w	r8, r0, r1
    15d6:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    15da:	3301      	adds	r3, #1
    15dc:	186f      	adds	r7, r5, r1
    15de:	f810 b001 	ldrb.w	fp, [r0, r1]
    15e2:	f805 b001 	strb.w	fp, [r5, r1]
    15e6:	18ac      	adds	r4, r5, r2
    15e8:	b29b      	uxth	r3, r3
        g = rhs.g;
    15ea:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    15ee:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    15f2:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15f6:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    15fa:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    15fe:	f887 a001 	strb.w	sl, [r7, #1]
    1602:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1604:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1608:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    160c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1610:	70a1      	strb	r1, [r4, #2]
    1612:	d1d8      	bne.n	15c6 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1614:	f10c 3aff 	add.w	sl, ip, #4294967295
    1618:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    161c:	2480      	movs	r4, #128	; 0x80
    161e:	eb05 0b0a 	add.w	fp, r5, sl
    1622:	4659      	mov	r1, fp
    1624:	4623      	mov	r3, r4
    1626:	a803      	add	r0, sp, #12
    1628:	aa02      	add	r2, sp, #8
    162a:	2700      	movs	r7, #0
    162c:	f88d 4009 	strb.w	r4, [sp, #9]
    1630:	f88d 400a 	strb.w	r4, [sp, #10]
    1634:	f88d 7008 	strb.w	r7, [sp, #8]
    1638:	f008 fce0 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    163c:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1640:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    1644:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1648:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    164c:	f805 300a 	strb.w	r3, [r5, sl]
    1650:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    1654:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1658:	eb05 0908 	add.w	r9, r5, r8
    165c:	4649      	mov	r1, r9
    165e:	4623      	mov	r3, r4
        g = rhs.g;
    1660:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    1664:	f88b 0002 	strb.w	r0, [fp, #2]
    1668:	aa02      	add	r2, sp, #8
    166a:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    166c:	f88d 7008 	strb.w	r7, [sp, #8]
    1670:	f88d 4009 	strb.w	r4, [sp, #9]
    1674:	f88d 400a 	strb.w	r4, [sp, #10]
    1678:	f008 fcc0 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    167c:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    167e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1682:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1686:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    168a:	f89d 000d 	ldrb.w	r0, [sp, #13]
    168e:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1692:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1696:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    169a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    169e:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    16a2:	eb05 0e0c 	add.w	lr, r5, ip
    16a6:	1868      	adds	r0, r5, r1
    16a8:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    16aa:	2a4a      	cmp	r2, #74	; 0x4a
    16ac:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    16b0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17b0 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    16b4:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    16b8:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    16bc:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 17a8 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    16c0:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    16c2:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    16c4:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    16c6:	d82e      	bhi.n	1726 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    16c8:	4f3b      	ldr	r7, [pc, #236]	; (17b8 <wipedown()+0x268>)
    16ca:	683b      	ldr	r3, [r7, #0]
    16cc:	07db      	lsls	r3, r3, #31
    16ce:	d517      	bpl.n	1700 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16d0:	4d3a      	ldr	r5, [pc, #232]	; (17bc <wipedown()+0x26c>)
    16d2:	4c3b      	ldr	r4, [pc, #236]	; (17c0 <wipedown()+0x270>)
    16d4:	682b      	ldr	r3, [r5, #0]
    16d6:	9303      	str	r3, [sp, #12]
    16d8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    16dc:	9b03      	ldr	r3, [sp, #12]
    16de:	1a5b      	subs	r3, r3, r1
    16e0:	4293      	cmp	r3, r2
    16e2:	7833      	ldrb	r3, [r6, #0]
    16e4:	d306      	bcc.n	16f4 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16e6:	682a      	ldr	r2, [r5, #0]
    16e8:	9202      	str	r2, [sp, #8]
    16ea:	3b01      	subs	r3, #1
	return ret;
    16ec:	9a02      	ldr	r2, [sp, #8]
    16ee:	6022      	str	r2, [r4, #0]
    16f0:	b2db      	uxtb	r3, r3
    16f2:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    16f4:	b90b      	cbnz	r3, 16fa <wipedown()+0x1aa>
		finish_transition();
    16f6:	f7ff fbf5 	bl	ee4 <finish_transition()>
	}
}
    16fa:	b005      	add	sp, #20
    16fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1700:	4638      	mov	r0, r7
    1702:	f009 fbc5 	bl	ae90 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1706:	4d2d      	ldr	r5, [pc, #180]	; (17bc <wipedown()+0x26c>)
    1708:	2800      	cmp	r0, #0
    170a:	d0e2      	beq.n	16d2 <wipedown()+0x182>
    170c:	4b2d      	ldr	r3, [pc, #180]	; (17c4 <wipedown()+0x274>)
    170e:	682a      	ldr	r2, [r5, #0]
    1710:	781b      	ldrb	r3, [r3, #0]
    1712:	4c2b      	ldr	r4, [pc, #172]	; (17c0 <wipedown()+0x270>)
    1714:	9201      	str	r2, [sp, #4]
	return ret;
    1716:	9a01      	ldr	r2, [sp, #4]
    1718:	6022      	str	r2, [r4, #0]
    171a:	009b      	lsls	r3, r3, #2
    171c:	4638      	mov	r0, r7
    171e:	6063      	str	r3, [r4, #4]
    1720:	f009 fbbc 	bl	ae9c <__cxa_guard_release>
    1724:	e7d6      	b.n	16d4 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1726:	1c55      	adds	r5, r2, #1
    1728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    172c:	eb08 0a05 	add.w	sl, r8, r5
    1730:	4651      	mov	r1, sl
    1732:	4623      	mov	r3, r4
    1734:	aa02      	add	r2, sp, #8
    1736:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1738:	f88d 7008 	strb.w	r7, [sp, #8]
    173c:	f88d 4009 	strb.w	r4, [sp, #9]
    1740:	f88d 400a 	strb.w	r4, [sp, #10]
    1744:	f008 fc5a 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1748:	f899 3000 	ldrb.w	r3, [r9]
    174c:	f88d 7008 	strb.w	r7, [sp, #8]
    1750:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    1754:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1758:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    175c:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1760:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    1764:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1768:	f808 c005 	strb.w	ip, [r8, r5]
    176c:	aa02      	add	r2, sp, #8
    176e:	4623      	mov	r3, r4
    1770:	4649      	mov	r1, r9
    1772:	a803      	add	r0, sp, #12
        g = rhs.g;
    1774:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1778:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    177c:	f88d 4009 	strb.w	r4, [sp, #9]
    1780:	f88d 400a 	strb.w	r4, [sp, #10]
    1784:	f008 fc3a 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1788:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    178c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1790:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1794:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    1798:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    179c:	f889 3002 	strb.w	r3, [r9, #2]
    17a0:	e792      	b.n	16c8 <wipedown()+0x178>
    17a2:	4d03      	ldr	r5, [pc, #12]	; (17b0 <wipedown()+0x260>)
    17a4:	e70e      	b.n	15c4 <wipedown()+0x74>
    17a6:	bf00      	nop
    17a8:	1fff9518 	.word	0x1fff9518
    17ac:	1fff9e44 	.word	0x1fff9e44
    17b0:	1fffa680 	.word	0x1fffa680
    17b4:	1fff8c90 	.word	0x1fff8c90
    17b8:	1fff95d4 	.word	0x1fff95d4
    17bc:	1fffa8c0 	.word	0x1fffa8c0
    17c0:	1fff94f4 	.word	0x1fff94f4
    17c4:	1fff9e2d 	.word	0x1fff9e2d

000017c8 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    17c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    17cc:	4ba2      	ldr	r3, [pc, #648]	; (1a58 <wipeup()+0x290>)
    17ce:	781d      	ldrb	r5, [r3, #0]
    17d0:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    17d2:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    17d4:	2b00      	cmp	r3, #0
    17d6:	f000 8130 	beq.w	1a3a <wipeup()+0x272>
    17da:	f103 3bff 	add.w	fp, r3, #4294967295
    17de:	fa1f fb8b 	uxth.w	fp, fp
    17e2:	489e      	ldr	r0, [pc, #632]	; (1a5c <wipeup()+0x294>)
    17e4:	499e      	ldr	r1, [pc, #632]	; (1a60 <wipeup()+0x298>)
    17e6:	f10b 0b01 	add.w	fp, fp, #1
    17ea:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    17ee:	4483      	add	fp, r0
    17f0:	4602      	mov	r2, r0
    17f2:	460c      	mov	r4, r1
    17f4:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17f6:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    17fa:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    17fe:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1802:	f886 e000 	strb.w	lr, [r6]
    1806:	3203      	adds	r2, #3
    1808:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    180c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1810:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1814:	f886 a001 	strb.w	sl, [r6, #1]
    1818:	455a      	cmp	r2, fp
        b = rhs.b;
    181a:	f886 9002 	strb.w	r9, [r6, #2]
    181e:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1822:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1826:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    182a:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    182e:	f106 0603 	add.w	r6, r6, #3
    1832:	f1a1 0103 	sub.w	r1, r1, #3
    1836:	d1de      	bne.n	17f6 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1838:	2b4a      	cmp	r3, #74	; 0x4a
    183a:	d828      	bhi.n	188e <wipeup()+0xc6>
    183c:	4889      	ldr	r0, [pc, #548]	; (1a64 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    183e:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1842:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    184a:	eb00 0801 	add.w	r8, r0, r1
    184e:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1852:	3301      	adds	r3, #1
    1854:	eb04 0e01 	add.w	lr, r4, r1
    1858:	f810 b001 	ldrb.w	fp, [r0, r1]
    185c:	f804 b001 	strb.w	fp, [r4, r1]
    1860:	18a6      	adds	r6, r4, r2
    1862:	b29b      	uxth	r3, r3
        g = rhs.g;
    1864:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1868:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    186c:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1870:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1874:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1878:	f88e a001 	strb.w	sl, [lr, #1]
    187c:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    187e:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1882:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    1886:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    188a:	70b1      	strb	r1, [r6, #2]
    188c:	d1d7      	bne.n	183e <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    188e:	2d00      	cmp	r5, #0
    1890:	f040 808f 	bne.w	19b2 <wipeup()+0x1ea>
    1894:	f10d 0a0c 	add.w	sl, sp, #12
    1898:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    189c:	4b6e      	ldr	r3, [pc, #440]	; (1a58 <wipeup()+0x290>)
    189e:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    18a0:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    18a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    18a8:	1c5a      	adds	r2, r3, #1
    18aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    18ae:	eb04 0e03 	add.w	lr, r4, r3
    18b2:	1825      	adds	r5, r4, r0
    18b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18b8:	2680      	movs	r6, #128	; 0x80
    18ba:	eb04 0902 	add.w	r9, r4, r2
    18be:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    18c0:	22ff      	movs	r2, #255	; 0xff
    18c2:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18c4:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    18c8:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    18cc:	f88e 2002 	strb.w	r2, [lr, #2]
    18d0:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    18d2:	5422      	strb	r2, [r4, r0]
    18d4:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    18d6:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    18d8:	70aa      	strb	r2, [r5, #2]
    18da:	4650      	mov	r0, sl
    18dc:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18de:	f88d 6009 	strb.w	r6, [sp, #9]
    18e2:	f88d 600a 	strb.w	r6, [sp, #10]
    18e6:	f88d 8008 	strb.w	r8, [sp, #8]
    18ea:	f008 fb87 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    18ee:	4b5a      	ldr	r3, [pc, #360]	; (1a58 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    18f4:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    18f6:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18fa:	f88d 8008 	strb.w	r8, [sp, #8]
    18fe:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1906:	eb04 0805 	add.w	r8, r4, r5
    190a:	4633      	mov	r3, r6
    190c:	f88d 6009 	strb.w	r6, [sp, #9]
    1910:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1914:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1918:	55e1      	strb	r1, [r4, r7]
    191a:	465a      	mov	r2, fp
    191c:	4650      	mov	r0, sl
    191e:	4641      	mov	r1, r8
        g = rhs.g;
    1920:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1924:	f889 6002 	strb.w	r6, [r9, #2]
    1928:	f008 fb68 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    192c:	4b4e      	ldr	r3, [pc, #312]	; (1a68 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1932:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1934:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1938:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    193c:	5560      	strb	r0, [r4, r5]
    193e:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1940:	4845      	ldr	r0, [pc, #276]	; (1a58 <wipeup()+0x290>)
        g = rhs.g;
    1942:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1946:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    194a:	d520      	bpl.n	198e <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    194c:	4d47      	ldr	r5, [pc, #284]	; (1a6c <wipeup()+0x2a4>)
    194e:	4c48      	ldr	r4, [pc, #288]	; (1a70 <wipeup()+0x2a8>)
    1950:	682b      	ldr	r3, [r5, #0]
    1952:	9303      	str	r3, [sp, #12]
    1954:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1958:	9b03      	ldr	r3, [sp, #12]
    195a:	1a5b      	subs	r3, r3, r1
    195c:	4293      	cmp	r3, r2
    195e:	d30e      	bcc.n	197e <wipeup()+0x1b6>
    1960:	4b3d      	ldr	r3, [pc, #244]	; (1a58 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1962:	682a      	ldr	r2, [r5, #0]
    1964:	781b      	ldrb	r3, [r3, #0]
    1966:	9202      	str	r2, [sp, #8]
	return ret;
    1968:	9a02      	ldr	r2, [sp, #8]
    196a:	6022      	str	r2, [r4, #0]
    196c:	3301      	adds	r3, #1
    196e:	4a3a      	ldr	r2, [pc, #232]	; (1a58 <wipeup()+0x290>)
    1970:	b2db      	uxtb	r3, r3
    1972:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1974:	2b4a      	cmp	r3, #74	; 0x4a
    1976:	d005      	beq.n	1984 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1978:	b005      	add	sp, #20
    197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    197e:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1980:	2b4a      	cmp	r3, #74	; 0x4a
    1982:	d1f9      	bne.n	1978 <wipeup()+0x1b0>
		finish_transition();
    1984:	f7ff faae 	bl	ee4 <finish_transition()>
	}
}
    1988:	b005      	add	sp, #20
    198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    198e:	4836      	ldr	r0, [pc, #216]	; (1a68 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1990:	4d36      	ldr	r5, [pc, #216]	; (1a6c <wipeup()+0x2a4>)
    1992:	f009 fa7d 	bl	ae90 <__cxa_guard_acquire>
    1996:	2800      	cmp	r0, #0
    1998:	d151      	bne.n	1a3e <wipeup()+0x276>
    199a:	4c35      	ldr	r4, [pc, #212]	; (1a70 <wipeup()+0x2a8>)
    199c:	682b      	ldr	r3, [r5, #0]
    199e:	9303      	str	r3, [sp, #12]
    19a0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    19a4:	9b03      	ldr	r3, [sp, #12]
    19a6:	1a5b      	subs	r3, r3, r1
    19a8:	4293      	cmp	r3, r2
    19aa:	d2d9      	bcs.n	1960 <wipeup()+0x198>
    19ac:	4b2a      	ldr	r3, [pc, #168]	; (1a58 <wipeup()+0x290>)
    19ae:	781b      	ldrb	r3, [r3, #0]
    19b0:	e7e0      	b.n	1974 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    19b2:	3d01      	subs	r5, #1
    19b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19b8:	2680      	movs	r6, #128	; 0x80
    19ba:	eb04 0905 	add.w	r9, r4, r5
    19be:	f10d 0a0c 	add.w	sl, sp, #12
    19c2:	f10d 0b08 	add.w	fp, sp, #8
    19c6:	f04f 0800 	mov.w	r8, #0
    19ca:	4649      	mov	r1, r9
    19cc:	4633      	mov	r3, r6
    19ce:	4650      	mov	r0, sl
    19d0:	465a      	mov	r2, fp
    19d2:	f88d 8008 	strb.w	r8, [sp, #8]
    19d6:	f88d 6009 	strb.w	r6, [sp, #9]
    19da:	f88d 600a 	strb.w	r6, [sp, #10]
    19de:	f008 fb0d 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    19e2:	4b1d      	ldr	r3, [pc, #116]	; (1a58 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    19e8:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    19ea:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    19ee:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19f2:	f88d 8008 	strb.w	r8, [sp, #8]
    19f6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    19fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19fe:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a02:	5562      	strb	r2, [r4, r5]
    1a04:	461f      	mov	r7, r3
    1a06:	4641      	mov	r1, r8
    1a08:	4633      	mov	r3, r6
    1a0a:	465a      	mov	r2, fp
    1a0c:	4650      	mov	r0, sl
        g = rhs.g;
    1a0e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1a12:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a16:	f88d 6009 	strb.w	r6, [sp, #9]
    1a1a:	f88d 600a 	strb.w	r6, [sp, #10]
    1a1e:	f008 faed 	bl	9ffc <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a22:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1a26:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1a2a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a2e:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1a30:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1a34:	f888 3002 	strb.w	r3, [r8, #2]
    1a38:	e730      	b.n	189c <wipeup()+0xd4>
    1a3a:	4c09      	ldr	r4, [pc, #36]	; (1a60 <wipeup()+0x298>)
    1a3c:	e6fe      	b.n	183c <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a3e:	4b0d      	ldr	r3, [pc, #52]	; (1a74 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a40:	682a      	ldr	r2, [r5, #0]
    1a42:	781b      	ldrb	r3, [r3, #0]
    1a44:	4c0a      	ldr	r4, [pc, #40]	; (1a70 <wipeup()+0x2a8>)
    1a46:	9201      	str	r2, [sp, #4]
	return ret;
    1a48:	9a01      	ldr	r2, [sp, #4]
    1a4a:	6022      	str	r2, [r4, #0]
    1a4c:	009b      	lsls	r3, r3, #2
    1a4e:	4806      	ldr	r0, [pc, #24]	; (1a68 <wipeup()+0x2a0>)
    1a50:	6063      	str	r3, [r4, #4]
    1a52:	f009 fa23 	bl	ae9c <__cxa_guard_release>
    1a56:	e7a1      	b.n	199c <wipeup()+0x1d4>
    1a58:	1fff9518 	.word	0x1fff9518
    1a5c:	1fff8c90 	.word	0x1fff8c90
    1a60:	1fffa680 	.word	0x1fffa680
    1a64:	1fff9e44 	.word	0x1fff9e44
    1a68:	1fff95d8 	.word	0x1fff95d8
    1a6c:	1fffa8c0 	.word	0x1fffa8c0
    1a70:	1fff9e30 	.word	0x1fff9e30
    1a74:	1fff9e2d 	.word	0x1fff9e2d

00001a78 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1a78:	2801      	cmp	r0, #1
    1a7a:	d006      	beq.n	1a8a <switch_transition(TransitionType)+0x12>
    1a7c:	d303      	bcc.n	1a86 <switch_transition(TransitionType)+0xe>
    1a7e:	2802      	cmp	r0, #2
    1a80:	d101      	bne.n	1a86 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1a82:	f7ff bea1 	b.w	17c8 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1a86:	f7ff bcf1 	b.w	146c <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1a8a:	f7ff bd61 	b.w	1550 <wipedown()>
    1a8e:	bf00      	nop

00001a90 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1a90:	b510      	push	{r4, lr}
    1a92:	2110      	movs	r1, #16
    1a94:	4604      	mov	r4, r0
    1a96:	4894      	ldr	r0, [pc, #592]	; (1ce8 <print_palette(unsigned char)+0x258>)
    1a98:	f00a fa92 	bl	bfc0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a9c:	4621      	mov	r1, r4
    1a9e:	2300      	movs	r3, #0
    1aa0:	220a      	movs	r2, #10
    1aa2:	4892      	ldr	r0, [pc, #584]	; (1cec <print_palette(unsigned char)+0x25c>)
    1aa4:	f00a fca0 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1aa8:	2102      	movs	r1, #2
    1aaa:	4891      	ldr	r0, [pc, #580]	; (1cf0 <print_palette(unsigned char)+0x260>)
    1aac:	f00a fa88 	bl	bfc0 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1ab0:	2c5c      	cmp	r4, #92	; 0x5c
    1ab2:	f200 8281 	bhi.w	1fb8 <print_palette(unsigned char)+0x528>
    1ab6:	e8df f014 	tbh	[pc, r4, lsl #1]
    1aba:	027a      	.short	0x027a
    1abc:	02700275 	.word	0x02700275
    1ac0:	0266026b 	.word	0x0266026b
    1ac4:	025c0261 	.word	0x025c0261
    1ac8:	02520257 	.word	0x02520257
    1acc:	0248024d 	.word	0x0248024d
    1ad0:	023e0243 	.word	0x023e0243
    1ad4:	02340239 	.word	0x02340239
    1ad8:	022a022f 	.word	0x022a022f
    1adc:	02200225 	.word	0x02200225
    1ae0:	0216021b 	.word	0x0216021b
    1ae4:	020c0211 	.word	0x020c0211
    1ae8:	02020207 	.word	0x02020207
    1aec:	01f801fd 	.word	0x01f801fd
    1af0:	01ee01f3 	.word	0x01ee01f3
    1af4:	01e401e9 	.word	0x01e401e9
    1af8:	01da01df 	.word	0x01da01df
    1afc:	01d001d5 	.word	0x01d001d5
    1b00:	01c601cb 	.word	0x01c601cb
    1b04:	01bc01c1 	.word	0x01bc01c1
    1b08:	01b201b7 	.word	0x01b201b7
    1b0c:	01a801ad 	.word	0x01a801ad
    1b10:	019e01a3 	.word	0x019e01a3
    1b14:	01940199 	.word	0x01940199
    1b18:	018a018f 	.word	0x018a018f
    1b1c:	01800185 	.word	0x01800185
    1b20:	0176017b 	.word	0x0176017b
    1b24:	016c0171 	.word	0x016c0171
    1b28:	01110167 	.word	0x01110167
    1b2c:	0107010c 	.word	0x0107010c
    1b30:	00fd0102 	.word	0x00fd0102
    1b34:	00f300f8 	.word	0x00f300f8
    1b38:	00e900ee 	.word	0x00e900ee
    1b3c:	00df00e4 	.word	0x00df00e4
    1b40:	00d500da 	.word	0x00d500da
    1b44:	00cb00d0 	.word	0x00cb00d0
    1b48:	00c100c6 	.word	0x00c100c6
    1b4c:	00b700bc 	.word	0x00b700bc
    1b50:	00ad00b2 	.word	0x00ad00b2
    1b54:	00a300a8 	.word	0x00a300a8
    1b58:	0099009e 	.word	0x0099009e
    1b5c:	008f0094 	.word	0x008f0094
    1b60:	0085008a 	.word	0x0085008a
    1b64:	007b0080 	.word	0x007b0080
    1b68:	00710076 	.word	0x00710076
    1b6c:	0067006c 	.word	0x0067006c
    1b70:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1b74:	495f      	ldr	r1, [pc, #380]	; (1cf4 <print_palette(unsigned char)+0x264>)
    1b76:	485d      	ldr	r0, [pc, #372]	; (1cec <print_palette(unsigned char)+0x25c>)
    1b78:	f7fe feb6 	bl	8e8 <Print::println(char const*)>
    1b7c:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1b7e:	495e      	ldr	r1, [pc, #376]	; (1cf8 <print_palette(unsigned char)+0x268>)
    1b80:	485a      	ldr	r0, [pc, #360]	; (1cec <print_palette(unsigned char)+0x25c>)
    1b82:	f7fe feb1 	bl	8e8 <Print::println(char const*)>
    1b86:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1b88:	495c      	ldr	r1, [pc, #368]	; (1cfc <print_palette(unsigned char)+0x26c>)
    1b8a:	4858      	ldr	r0, [pc, #352]	; (1cec <print_palette(unsigned char)+0x25c>)
    1b8c:	f7fe feac 	bl	8e8 <Print::println(char const*)>
    1b90:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1b92:	495b      	ldr	r1, [pc, #364]	; (1d00 <print_palette(unsigned char)+0x270>)
    1b94:	4855      	ldr	r0, [pc, #340]	; (1cec <print_palette(unsigned char)+0x25c>)
    1b96:	f7fe fea7 	bl	8e8 <Print::println(char const*)>
    1b9a:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1b9c:	4959      	ldr	r1, [pc, #356]	; (1d04 <print_palette(unsigned char)+0x274>)
    1b9e:	4853      	ldr	r0, [pc, #332]	; (1cec <print_palette(unsigned char)+0x25c>)
    1ba0:	f7fe fea2 	bl	8e8 <Print::println(char const*)>
    1ba4:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1ba6:	4958      	ldr	r1, [pc, #352]	; (1d08 <print_palette(unsigned char)+0x278>)
    1ba8:	4850      	ldr	r0, [pc, #320]	; (1cec <print_palette(unsigned char)+0x25c>)
    1baa:	f7fe fe9d 	bl	8e8 <Print::println(char const*)>
    1bae:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1bb0:	4956      	ldr	r1, [pc, #344]	; (1d0c <print_palette(unsigned char)+0x27c>)
    1bb2:	484e      	ldr	r0, [pc, #312]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bb4:	f7fe fe98 	bl	8e8 <Print::println(char const*)>
    1bb8:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1bba:	4955      	ldr	r1, [pc, #340]	; (1d10 <print_palette(unsigned char)+0x280>)
    1bbc:	484b      	ldr	r0, [pc, #300]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bbe:	f7fe fe93 	bl	8e8 <Print::println(char const*)>
    1bc2:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1bc4:	4953      	ldr	r1, [pc, #332]	; (1d14 <print_palette(unsigned char)+0x284>)
    1bc6:	4849      	ldr	r0, [pc, #292]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bc8:	f7fe fe8e 	bl	8e8 <Print::println(char const*)>
    1bcc:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1bce:	4952      	ldr	r1, [pc, #328]	; (1d18 <print_palette(unsigned char)+0x288>)
    1bd0:	4846      	ldr	r0, [pc, #280]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bd2:	f7fe fe89 	bl	8e8 <Print::println(char const*)>
    1bd6:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1bd8:	4950      	ldr	r1, [pc, #320]	; (1d1c <print_palette(unsigned char)+0x28c>)
    1bda:	4844      	ldr	r0, [pc, #272]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bdc:	f7fe fe84 	bl	8e8 <Print::println(char const*)>
    1be0:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1be2:	494f      	ldr	r1, [pc, #316]	; (1d20 <print_palette(unsigned char)+0x290>)
    1be4:	4841      	ldr	r0, [pc, #260]	; (1cec <print_palette(unsigned char)+0x25c>)
    1be6:	f7fe fe7f 	bl	8e8 <Print::println(char const*)>
    1bea:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1bec:	494d      	ldr	r1, [pc, #308]	; (1d24 <print_palette(unsigned char)+0x294>)
    1bee:	483f      	ldr	r0, [pc, #252]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bf0:	f7fe fe7a 	bl	8e8 <Print::println(char const*)>
    1bf4:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1bf6:	494c      	ldr	r1, [pc, #304]	; (1d28 <print_palette(unsigned char)+0x298>)
    1bf8:	483c      	ldr	r0, [pc, #240]	; (1cec <print_palette(unsigned char)+0x25c>)
    1bfa:	f7fe fe75 	bl	8e8 <Print::println(char const*)>
    1bfe:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1c00:	494a      	ldr	r1, [pc, #296]	; (1d2c <print_palette(unsigned char)+0x29c>)
    1c02:	483a      	ldr	r0, [pc, #232]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c04:	f7fe fe70 	bl	8e8 <Print::println(char const*)>
    1c08:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1c0a:	4949      	ldr	r1, [pc, #292]	; (1d30 <print_palette(unsigned char)+0x2a0>)
    1c0c:	4837      	ldr	r0, [pc, #220]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c0e:	f7fe fe6b 	bl	8e8 <Print::println(char const*)>
    1c12:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1c14:	4947      	ldr	r1, [pc, #284]	; (1d34 <print_palette(unsigned char)+0x2a4>)
    1c16:	4835      	ldr	r0, [pc, #212]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c18:	f7fe fe66 	bl	8e8 <Print::println(char const*)>
    1c1c:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1c1e:	4946      	ldr	r1, [pc, #280]	; (1d38 <print_palette(unsigned char)+0x2a8>)
    1c20:	4832      	ldr	r0, [pc, #200]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c22:	f7fe fe61 	bl	8e8 <Print::println(char const*)>
    1c26:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1c28:	4944      	ldr	r1, [pc, #272]	; (1d3c <print_palette(unsigned char)+0x2ac>)
    1c2a:	4830      	ldr	r0, [pc, #192]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c2c:	f7fe fe5c 	bl	8e8 <Print::println(char const*)>
    1c30:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1c32:	4943      	ldr	r1, [pc, #268]	; (1d40 <print_palette(unsigned char)+0x2b0>)
    1c34:	482d      	ldr	r0, [pc, #180]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c36:	f7fe fe57 	bl	8e8 <Print::println(char const*)>
    1c3a:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1c3c:	4941      	ldr	r1, [pc, #260]	; (1d44 <print_palette(unsigned char)+0x2b4>)
    1c3e:	482b      	ldr	r0, [pc, #172]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c40:	f7fe fe52 	bl	8e8 <Print::println(char const*)>
    1c44:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1c46:	4940      	ldr	r1, [pc, #256]	; (1d48 <print_palette(unsigned char)+0x2b8>)
    1c48:	4828      	ldr	r0, [pc, #160]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c4a:	f7fe fe4d 	bl	8e8 <Print::println(char const*)>
    1c4e:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1c50:	493e      	ldr	r1, [pc, #248]	; (1d4c <print_palette(unsigned char)+0x2bc>)
    1c52:	4826      	ldr	r0, [pc, #152]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c54:	f7fe fe48 	bl	8e8 <Print::println(char const*)>
    1c58:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1c5a:	493d      	ldr	r1, [pc, #244]	; (1d50 <print_palette(unsigned char)+0x2c0>)
    1c5c:	4823      	ldr	r0, [pc, #140]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c5e:	f7fe fe43 	bl	8e8 <Print::println(char const*)>
    1c62:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1c64:	493b      	ldr	r1, [pc, #236]	; (1d54 <print_palette(unsigned char)+0x2c4>)
    1c66:	4821      	ldr	r0, [pc, #132]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c68:	f7fe fe3e 	bl	8e8 <Print::println(char const*)>
    1c6c:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1c6e:	493a      	ldr	r1, [pc, #232]	; (1d58 <print_palette(unsigned char)+0x2c8>)
    1c70:	481e      	ldr	r0, [pc, #120]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c72:	f7fe fe39 	bl	8e8 <Print::println(char const*)>
    1c76:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1c78:	4938      	ldr	r1, [pc, #224]	; (1d5c <print_palette(unsigned char)+0x2cc>)
    1c7a:	481c      	ldr	r0, [pc, #112]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c7c:	f7fe fe34 	bl	8e8 <Print::println(char const*)>
    1c80:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1c82:	4937      	ldr	r1, [pc, #220]	; (1d60 <print_palette(unsigned char)+0x2d0>)
    1c84:	4819      	ldr	r0, [pc, #100]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c86:	f7fe fe2f 	bl	8e8 <Print::println(char const*)>
    1c8a:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1c8c:	4935      	ldr	r1, [pc, #212]	; (1d64 <print_palette(unsigned char)+0x2d4>)
    1c8e:	4817      	ldr	r0, [pc, #92]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c90:	f7fe fe2a 	bl	8e8 <Print::println(char const*)>
    1c94:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1c96:	4934      	ldr	r1, [pc, #208]	; (1d68 <print_palette(unsigned char)+0x2d8>)
    1c98:	4814      	ldr	r0, [pc, #80]	; (1cec <print_palette(unsigned char)+0x25c>)
    1c9a:	f7fe fe25 	bl	8e8 <Print::println(char const*)>
    1c9e:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1ca0:	4932      	ldr	r1, [pc, #200]	; (1d6c <print_palette(unsigned char)+0x2dc>)
    1ca2:	4812      	ldr	r0, [pc, #72]	; (1cec <print_palette(unsigned char)+0x25c>)
    1ca4:	f7fe fe20 	bl	8e8 <Print::println(char const*)>
    1ca8:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1caa:	4931      	ldr	r1, [pc, #196]	; (1d70 <print_palette(unsigned char)+0x2e0>)
    1cac:	480f      	ldr	r0, [pc, #60]	; (1cec <print_palette(unsigned char)+0x25c>)
    1cae:	f7fe fe1b 	bl	8e8 <Print::println(char const*)>
    1cb2:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1cb4:	492f      	ldr	r1, [pc, #188]	; (1d74 <print_palette(unsigned char)+0x2e4>)
    1cb6:	480d      	ldr	r0, [pc, #52]	; (1cec <print_palette(unsigned char)+0x25c>)
    1cb8:	f7fe fe16 	bl	8e8 <Print::println(char const*)>
    1cbc:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1cbe:	492e      	ldr	r1, [pc, #184]	; (1d78 <print_palette(unsigned char)+0x2e8>)
    1cc0:	480a      	ldr	r0, [pc, #40]	; (1cec <print_palette(unsigned char)+0x25c>)
    1cc2:	f7fe fe11 	bl	8e8 <Print::println(char const*)>
    1cc6:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1cc8:	492c      	ldr	r1, [pc, #176]	; (1d7c <print_palette(unsigned char)+0x2ec>)
    1cca:	4808      	ldr	r0, [pc, #32]	; (1cec <print_palette(unsigned char)+0x25c>)
    1ccc:	f7fe fe0c 	bl	8e8 <Print::println(char const*)>
    1cd0:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1cd2:	492b      	ldr	r1, [pc, #172]	; (1d80 <print_palette(unsigned char)+0x2f0>)
    1cd4:	4805      	ldr	r0, [pc, #20]	; (1cec <print_palette(unsigned char)+0x25c>)
    1cd6:	f7fe fe07 	bl	8e8 <Print::println(char const*)>
    1cda:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1cdc:	4929      	ldr	r1, [pc, #164]	; (1d84 <print_palette(unsigned char)+0x2f4>)
    1cde:	4803      	ldr	r0, [pc, #12]	; (1cec <print_palette(unsigned char)+0x25c>)
    1ce0:	f7fe fe02 	bl	8e8 <Print::println(char const*)>
    1ce4:	bd10      	pop	{r4, pc}
    1ce6:	bf00      	nop
    1ce8:	0000dd34 	.word	0x0000dd34
    1cec:	1fff8768 	.word	0x1fff8768
    1cf0:	0000dd48 	.word	0x0000dd48
    1cf4:	0000e2dc 	.word	0x0000e2dc
    1cf8:	0000e2d0 	.word	0x0000e2d0
    1cfc:	0000e2c0 	.word	0x0000e2c0
    1d00:	0000e2b0 	.word	0x0000e2b0
    1d04:	0000e29c 	.word	0x0000e29c
    1d08:	0000e284 	.word	0x0000e284
    1d0c:	0000e26c 	.word	0x0000e26c
    1d10:	0000e25c 	.word	0x0000e25c
    1d14:	0000e244 	.word	0x0000e244
    1d18:	0000e238 	.word	0x0000e238
    1d1c:	0000e22c 	.word	0x0000e22c
    1d20:	0000e214 	.word	0x0000e214
    1d24:	0000e208 	.word	0x0000e208
    1d28:	0000e1fc 	.word	0x0000e1fc
    1d2c:	0000e1f0 	.word	0x0000e1f0
    1d30:	0000e1e4 	.word	0x0000e1e4
    1d34:	0000e1d4 	.word	0x0000e1d4
    1d38:	0000e1c8 	.word	0x0000e1c8
    1d3c:	0000e1b4 	.word	0x0000e1b4
    1d40:	0000e1a8 	.word	0x0000e1a8
    1d44:	0000e198 	.word	0x0000e198
    1d48:	0000e18c 	.word	0x0000e18c
    1d4c:	0000e180 	.word	0x0000e180
    1d50:	0000e178 	.word	0x0000e178
    1d54:	0000e164 	.word	0x0000e164
    1d58:	0000e154 	.word	0x0000e154
    1d5c:	0000e140 	.word	0x0000e140
    1d60:	0000e134 	.word	0x0000e134
    1d64:	0000e128 	.word	0x0000e128
    1d68:	0000e11c 	.word	0x0000e11c
    1d6c:	0000e10c 	.word	0x0000e10c
    1d70:	0000e0f8 	.word	0x0000e0f8
    1d74:	0000e0ec 	.word	0x0000e0ec
    1d78:	0000e0dc 	.word	0x0000e0dc
    1d7c:	0000e0d0 	.word	0x0000e0d0
    1d80:	0000e0c0 	.word	0x0000e0c0
    1d84:	0000e0b4 	.word	0x0000e0b4
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1d88:	498e      	ldr	r1, [pc, #568]	; (1fc4 <print_palette(unsigned char)+0x534>)
    1d8a:	488f      	ldr	r0, [pc, #572]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1d8c:	f7fe fdac 	bl	8e8 <Print::println(char const*)>
    1d90:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1d92:	498e      	ldr	r1, [pc, #568]	; (1fcc <print_palette(unsigned char)+0x53c>)
    1d94:	488c      	ldr	r0, [pc, #560]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1d96:	f7fe fda7 	bl	8e8 <Print::println(char const*)>
    1d9a:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1d9c:	498c      	ldr	r1, [pc, #560]	; (1fd0 <print_palette(unsigned char)+0x540>)
    1d9e:	488a      	ldr	r0, [pc, #552]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1da0:	f7fe fda2 	bl	8e8 <Print::println(char const*)>
    1da4:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1da6:	498b      	ldr	r1, [pc, #556]	; (1fd4 <print_palette(unsigned char)+0x544>)
    1da8:	4887      	ldr	r0, [pc, #540]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1daa:	f7fe fd9d 	bl	8e8 <Print::println(char const*)>
    1dae:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1db0:	4989      	ldr	r1, [pc, #548]	; (1fd8 <print_palette(unsigned char)+0x548>)
    1db2:	4885      	ldr	r0, [pc, #532]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1db4:	f7fe fd98 	bl	8e8 <Print::println(char const*)>
    1db8:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1dba:	4988      	ldr	r1, [pc, #544]	; (1fdc <print_palette(unsigned char)+0x54c>)
    1dbc:	4882      	ldr	r0, [pc, #520]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1dbe:	f7fe fd93 	bl	8e8 <Print::println(char const*)>
    1dc2:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1dc4:	4986      	ldr	r1, [pc, #536]	; (1fe0 <print_palette(unsigned char)+0x550>)
    1dc6:	4880      	ldr	r0, [pc, #512]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1dc8:	f7fe fd8e 	bl	8e8 <Print::println(char const*)>
    1dcc:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1dce:	4985      	ldr	r1, [pc, #532]	; (1fe4 <print_palette(unsigned char)+0x554>)
    1dd0:	487d      	ldr	r0, [pc, #500]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1dd2:	f7fe fd89 	bl	8e8 <Print::println(char const*)>
    1dd6:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1dd8:	4983      	ldr	r1, [pc, #524]	; (1fe8 <print_palette(unsigned char)+0x558>)
    1dda:	487b      	ldr	r0, [pc, #492]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ddc:	f7fe fd84 	bl	8e8 <Print::println(char const*)>
    1de0:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1de2:	4982      	ldr	r1, [pc, #520]	; (1fec <print_palette(unsigned char)+0x55c>)
    1de4:	4878      	ldr	r0, [pc, #480]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1de6:	f7fe fd7f 	bl	8e8 <Print::println(char const*)>
    1dea:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1dec:	4980      	ldr	r1, [pc, #512]	; (1ff0 <print_palette(unsigned char)+0x560>)
    1dee:	4876      	ldr	r0, [pc, #472]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1df0:	f7fe fd7a 	bl	8e8 <Print::println(char const*)>
    1df4:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1df6:	497f      	ldr	r1, [pc, #508]	; (1ff4 <print_palette(unsigned char)+0x564>)
    1df8:	4873      	ldr	r0, [pc, #460]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1dfa:	f7fe fd75 	bl	8e8 <Print::println(char const*)>
    1dfe:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1e00:	497d      	ldr	r1, [pc, #500]	; (1ff8 <print_palette(unsigned char)+0x568>)
    1e02:	4871      	ldr	r0, [pc, #452]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e04:	f7fe fd70 	bl	8e8 <Print::println(char const*)>
    1e08:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1e0a:	497c      	ldr	r1, [pc, #496]	; (1ffc <print_palette(unsigned char)+0x56c>)
    1e0c:	486e      	ldr	r0, [pc, #440]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e0e:	f7fe fd6b 	bl	8e8 <Print::println(char const*)>
    1e12:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1e14:	497a      	ldr	r1, [pc, #488]	; (2000 <print_palette(unsigned char)+0x570>)
    1e16:	486c      	ldr	r0, [pc, #432]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e18:	f7fe fd66 	bl	8e8 <Print::println(char const*)>
    1e1c:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1e1e:	4979      	ldr	r1, [pc, #484]	; (2004 <print_palette(unsigned char)+0x574>)
    1e20:	4869      	ldr	r0, [pc, #420]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e22:	f7fe fd61 	bl	8e8 <Print::println(char const*)>
    1e26:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1e28:	4977      	ldr	r1, [pc, #476]	; (2008 <print_palette(unsigned char)+0x578>)
    1e2a:	4867      	ldr	r0, [pc, #412]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e2c:	f7fe fd5c 	bl	8e8 <Print::println(char const*)>
    1e30:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1e32:	4976      	ldr	r1, [pc, #472]	; (200c <print_palette(unsigned char)+0x57c>)
    1e34:	4864      	ldr	r0, [pc, #400]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e36:	f7fe fd57 	bl	8e8 <Print::println(char const*)>
    1e3a:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1e3c:	4974      	ldr	r1, [pc, #464]	; (2010 <print_palette(unsigned char)+0x580>)
    1e3e:	4862      	ldr	r0, [pc, #392]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e40:	f7fe fd52 	bl	8e8 <Print::println(char const*)>
    1e44:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1e46:	4973      	ldr	r1, [pc, #460]	; (2014 <print_palette(unsigned char)+0x584>)
    1e48:	485f      	ldr	r0, [pc, #380]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e4a:	f7fe fd4d 	bl	8e8 <Print::println(char const*)>
    1e4e:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1e50:	4971      	ldr	r1, [pc, #452]	; (2018 <print_palette(unsigned char)+0x588>)
    1e52:	485d      	ldr	r0, [pc, #372]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e54:	f7fe fd48 	bl	8e8 <Print::println(char const*)>
    1e58:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1e5a:	4970      	ldr	r1, [pc, #448]	; (201c <print_palette(unsigned char)+0x58c>)
    1e5c:	485a      	ldr	r0, [pc, #360]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e5e:	f7fe fd43 	bl	8e8 <Print::println(char const*)>
    1e62:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1e64:	496e      	ldr	r1, [pc, #440]	; (2020 <print_palette(unsigned char)+0x590>)
    1e66:	4858      	ldr	r0, [pc, #352]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e68:	f7fe fd3e 	bl	8e8 <Print::println(char const*)>
    1e6c:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1e6e:	496d      	ldr	r1, [pc, #436]	; (2024 <print_palette(unsigned char)+0x594>)
    1e70:	4855      	ldr	r0, [pc, #340]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e72:	f7fe fd39 	bl	8e8 <Print::println(char const*)>
    1e76:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1e78:	496b      	ldr	r1, [pc, #428]	; (2028 <print_palette(unsigned char)+0x598>)
    1e7a:	4853      	ldr	r0, [pc, #332]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e7c:	f7fe fd34 	bl	8e8 <Print::println(char const*)>
    1e80:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1e82:	496a      	ldr	r1, [pc, #424]	; (202c <print_palette(unsigned char)+0x59c>)
    1e84:	4850      	ldr	r0, [pc, #320]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e86:	f7fe fd2f 	bl	8e8 <Print::println(char const*)>
    1e8a:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1e8c:	4968      	ldr	r1, [pc, #416]	; (2030 <print_palette(unsigned char)+0x5a0>)
    1e8e:	484e      	ldr	r0, [pc, #312]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e90:	f7fe fd2a 	bl	8e8 <Print::println(char const*)>
    1e94:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1e96:	4967      	ldr	r1, [pc, #412]	; (2034 <print_palette(unsigned char)+0x5a4>)
    1e98:	484b      	ldr	r0, [pc, #300]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1e9a:	f7fe fd25 	bl	8e8 <Print::println(char const*)>
    1e9e:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1ea0:	4965      	ldr	r1, [pc, #404]	; (2038 <print_palette(unsigned char)+0x5a8>)
    1ea2:	4849      	ldr	r0, [pc, #292]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ea4:	f7fe fd20 	bl	8e8 <Print::println(char const*)>
    1ea8:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1eaa:	4964      	ldr	r1, [pc, #400]	; (203c <print_palette(unsigned char)+0x5ac>)
    1eac:	4846      	ldr	r0, [pc, #280]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1eae:	f7fe fd1b 	bl	8e8 <Print::println(char const*)>
    1eb2:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1eb4:	4962      	ldr	r1, [pc, #392]	; (2040 <print_palette(unsigned char)+0x5b0>)
    1eb6:	4844      	ldr	r0, [pc, #272]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1eb8:	f7fe fd16 	bl	8e8 <Print::println(char const*)>
    1ebc:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1ebe:	4961      	ldr	r1, [pc, #388]	; (2044 <print_palette(unsigned char)+0x5b4>)
    1ec0:	4841      	ldr	r0, [pc, #260]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ec2:	f7fe fd11 	bl	8e8 <Print::println(char const*)>
    1ec6:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1ec8:	495f      	ldr	r1, [pc, #380]	; (2048 <print_palette(unsigned char)+0x5b8>)
    1eca:	483f      	ldr	r0, [pc, #252]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ecc:	f7fe fd0c 	bl	8e8 <Print::println(char const*)>
    1ed0:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1ed2:	495e      	ldr	r1, [pc, #376]	; (204c <print_palette(unsigned char)+0x5bc>)
    1ed4:	483c      	ldr	r0, [pc, #240]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ed6:	f7fe fd07 	bl	8e8 <Print::println(char const*)>
    1eda:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1edc:	495c      	ldr	r1, [pc, #368]	; (2050 <print_palette(unsigned char)+0x5c0>)
    1ede:	483a      	ldr	r0, [pc, #232]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ee0:	f7fe fd02 	bl	8e8 <Print::println(char const*)>
    1ee4:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1ee6:	495b      	ldr	r1, [pc, #364]	; (2054 <print_palette(unsigned char)+0x5c4>)
    1ee8:	4837      	ldr	r0, [pc, #220]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1eea:	f7fe fcfd 	bl	8e8 <Print::println(char const*)>
    1eee:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1ef0:	4959      	ldr	r1, [pc, #356]	; (2058 <print_palette(unsigned char)+0x5c8>)
    1ef2:	4835      	ldr	r0, [pc, #212]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1ef4:	f7fe fcf8 	bl	8e8 <Print::println(char const*)>
    1ef8:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    1efa:	4958      	ldr	r1, [pc, #352]	; (205c <print_palette(unsigned char)+0x5cc>)
    1efc:	4832      	ldr	r0, [pc, #200]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1efe:	f7fe fcf3 	bl	8e8 <Print::println(char const*)>
    1f02:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    1f04:	4956      	ldr	r1, [pc, #344]	; (2060 <print_palette(unsigned char)+0x5d0>)
    1f06:	4830      	ldr	r0, [pc, #192]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f08:	f7fe fcee 	bl	8e8 <Print::println(char const*)>
    1f0c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    1f0e:	4955      	ldr	r1, [pc, #340]	; (2064 <print_palette(unsigned char)+0x5d4>)
    1f10:	482d      	ldr	r0, [pc, #180]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f12:	f7fe fce9 	bl	8e8 <Print::println(char const*)>
    1f16:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    1f18:	4953      	ldr	r1, [pc, #332]	; (2068 <print_palette(unsigned char)+0x5d8>)
    1f1a:	482b      	ldr	r0, [pc, #172]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f1c:	f7fe fce4 	bl	8e8 <Print::println(char const*)>
    1f20:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    1f22:	4952      	ldr	r1, [pc, #328]	; (206c <print_palette(unsigned char)+0x5dc>)
    1f24:	4828      	ldr	r0, [pc, #160]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f26:	f7fe fcdf 	bl	8e8 <Print::println(char const*)>
    1f2a:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    1f2c:	4950      	ldr	r1, [pc, #320]	; (2070 <print_palette(unsigned char)+0x5e0>)
    1f2e:	4826      	ldr	r0, [pc, #152]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f30:	f7fe fcda 	bl	8e8 <Print::println(char const*)>
    1f34:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    1f36:	494f      	ldr	r1, [pc, #316]	; (2074 <print_palette(unsigned char)+0x5e4>)
    1f38:	4823      	ldr	r0, [pc, #140]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f3a:	f7fe fcd5 	bl	8e8 <Print::println(char const*)>
    1f3e:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    1f40:	494d      	ldr	r1, [pc, #308]	; (2078 <print_palette(unsigned char)+0x5e8>)
    1f42:	4821      	ldr	r0, [pc, #132]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f44:	f7fe fcd0 	bl	8e8 <Print::println(char const*)>
    1f48:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    1f4a:	494c      	ldr	r1, [pc, #304]	; (207c <print_palette(unsigned char)+0x5ec>)
    1f4c:	481e      	ldr	r0, [pc, #120]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f4e:	f7fe fccb 	bl	8e8 <Print::println(char const*)>
    1f52:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    1f54:	494a      	ldr	r1, [pc, #296]	; (2080 <print_palette(unsigned char)+0x5f0>)
    1f56:	481c      	ldr	r0, [pc, #112]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f58:	f7fe fcc6 	bl	8e8 <Print::println(char const*)>
    1f5c:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    1f5e:	4949      	ldr	r1, [pc, #292]	; (2084 <print_palette(unsigned char)+0x5f4>)
    1f60:	4819      	ldr	r0, [pc, #100]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f62:	f7fe fcc1 	bl	8e8 <Print::println(char const*)>
    1f66:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    1f68:	4947      	ldr	r1, [pc, #284]	; (2088 <print_palette(unsigned char)+0x5f8>)
    1f6a:	4817      	ldr	r0, [pc, #92]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f6c:	f7fe fcbc 	bl	8e8 <Print::println(char const*)>
    1f70:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    1f72:	4946      	ldr	r1, [pc, #280]	; (208c <print_palette(unsigned char)+0x5fc>)
    1f74:	4814      	ldr	r0, [pc, #80]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f76:	f7fe fcb7 	bl	8e8 <Print::println(char const*)>
    1f7a:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    1f7c:	4944      	ldr	r1, [pc, #272]	; (2090 <print_palette(unsigned char)+0x600>)
    1f7e:	4812      	ldr	r0, [pc, #72]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f80:	f7fe fcb2 	bl	8e8 <Print::println(char const*)>
    1f84:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    1f86:	4943      	ldr	r1, [pc, #268]	; (2094 <print_palette(unsigned char)+0x604>)
    1f88:	480f      	ldr	r0, [pc, #60]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f8a:	f7fe fcad 	bl	8e8 <Print::println(char const*)>
    1f8e:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    1f90:	4941      	ldr	r1, [pc, #260]	; (2098 <print_palette(unsigned char)+0x608>)
    1f92:	480d      	ldr	r0, [pc, #52]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f94:	f7fe fca8 	bl	8e8 <Print::println(char const*)>
    1f98:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    1f9a:	4940      	ldr	r1, [pc, #256]	; (209c <print_palette(unsigned char)+0x60c>)
    1f9c:	480a      	ldr	r0, [pc, #40]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1f9e:	f7fe fca3 	bl	8e8 <Print::println(char const*)>
    1fa2:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    1fa4:	493e      	ldr	r1, [pc, #248]	; (20a0 <print_palette(unsigned char)+0x610>)
    1fa6:	4808      	ldr	r0, [pc, #32]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1fa8:	f7fe fc9e 	bl	8e8 <Print::println(char const*)>
    1fac:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    1fae:	493d      	ldr	r1, [pc, #244]	; (20a4 <print_palette(unsigned char)+0x614>)
    1fb0:	4805      	ldr	r0, [pc, #20]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1fb2:	f7fe fc99 	bl	8e8 <Print::println(char const*)>
    1fb6:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    1fb8:	493b      	ldr	r1, [pc, #236]	; (20a8 <print_palette(unsigned char)+0x618>)
    1fba:	4803      	ldr	r0, [pc, #12]	; (1fc8 <print_palette(unsigned char)+0x538>)
    1fbc:	f7fe fc94 	bl	8e8 <Print::println(char const*)>
    1fc0:	bd10      	pop	{r4, pc}
    1fc2:	bf00      	nop
    1fc4:	0000e0a0 	.word	0x0000e0a0
    1fc8:	1fff8768 	.word	0x1fff8768
    1fcc:	0000e090 	.word	0x0000e090
    1fd0:	0000e084 	.word	0x0000e084
    1fd4:	0000e078 	.word	0x0000e078
    1fd8:	0000e06c 	.word	0x0000e06c
    1fdc:	0000e058 	.word	0x0000e058
    1fe0:	0000e04c 	.word	0x0000e04c
    1fe4:	0000e040 	.word	0x0000e040
    1fe8:	0000e034 	.word	0x0000e034
    1fec:	0000e01c 	.word	0x0000e01c
    1ff0:	0000e014 	.word	0x0000e014
    1ff4:	0000e0ac 	.word	0x0000e0ac
    1ff8:	0000e008 	.word	0x0000e008
    1ffc:	0000dffc 	.word	0x0000dffc
    2000:	0000dfe8 	.word	0x0000dfe8
    2004:	0000dfd4 	.word	0x0000dfd4
    2008:	0000dfc4 	.word	0x0000dfc4
    200c:	0000dfb8 	.word	0x0000dfb8
    2010:	0000dfac 	.word	0x0000dfac
    2014:	0000dfa0 	.word	0x0000dfa0
    2018:	0000df94 	.word	0x0000df94
    201c:	0000df88 	.word	0x0000df88
    2020:	0000df7c 	.word	0x0000df7c
    2024:	0000df70 	.word	0x0000df70
    2028:	0000df64 	.word	0x0000df64
    202c:	0000df58 	.word	0x0000df58
    2030:	0000df4c 	.word	0x0000df4c
    2034:	0000df40 	.word	0x0000df40
    2038:	0000df30 	.word	0x0000df30
    203c:	0000df1c 	.word	0x0000df1c
    2040:	0000df00 	.word	0x0000df00
    2044:	0000dee8 	.word	0x0000dee8
    2048:	0000decc 	.word	0x0000decc
    204c:	0000debc 	.word	0x0000debc
    2050:	0000deac 	.word	0x0000deac
    2054:	0000de98 	.word	0x0000de98
    2058:	0000de88 	.word	0x0000de88
    205c:	0000de80 	.word	0x0000de80
    2060:	0000de78 	.word	0x0000de78
    2064:	0000de60 	.word	0x0000de60
    2068:	0000de50 	.word	0x0000de50
    206c:	0000de48 	.word	0x0000de48
    2070:	0000de38 	.word	0x0000de38
    2074:	0000de28 	.word	0x0000de28
    2078:	0000de18 	.word	0x0000de18
    207c:	0000de04 	.word	0x0000de04
    2080:	0000ddf0 	.word	0x0000ddf0
    2084:	0000dddc 	.word	0x0000dddc
    2088:	0000ddc4 	.word	0x0000ddc4
    208c:	0000ddac 	.word	0x0000ddac
    2090:	0000dd9c 	.word	0x0000dd9c
    2094:	0000dd88 	.word	0x0000dd88
    2098:	0000dd74 	.word	0x0000dd74
    209c:	0000dd64 	.word	0x0000dd64
    20a0:	0000dd58 	.word	0x0000dd58
    20a4:	0000dd4c 	.word	0x0000dd4c
    20a8:	0000e2f4 	.word	0x0000e2f4

000020ac <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    20ac:	b538      	push	{r3, r4, r5, lr}
    20ae:	2100      	movs	r1, #0
    20b0:	4604      	mov	r4, r0
    20b2:	487f      	ldr	r0, [pc, #508]	; (22b0 <LEDDebug(LEDStruct&)+0x204>)
    20b4:	f009 ff84 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20b8:	487e      	ldr	r0, [pc, #504]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    20ba:	f00a f985 	bl	c3c8 <Print::println()>
    20be:	2122      	movs	r1, #34	; 0x22
    20c0:	487d      	ldr	r0, [pc, #500]	; (22b8 <LEDDebug(LEDStruct&)+0x20c>)
    20c2:	f009 ff7d 	bl	bfc0 <usb_serial_write>
    20c6:	487b      	ldr	r0, [pc, #492]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    20c8:	f00a f97e 	bl	c3c8 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    20cc:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    20d0:	2b00      	cmp	r3, #0
    20d2:	f000 80a0 	beq.w	2216 <LEDDebug(LEDStruct&)+0x16a>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    20d6:	2b01      	cmp	r3, #1
    20d8:	f000 850d 	beq.w	2af6 <LEDDebug(LEDStruct&)+0xa4a>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    20dc:	2b02      	cmp	r3, #2
    20de:	f000 8510 	beq.w	2b02 <LEDDebug(LEDStruct&)+0xa56>
    20e2:	2113      	movs	r1, #19
    20e4:	4875      	ldr	r0, [pc, #468]	; (22bc <LEDDebug(LEDStruct&)+0x210>)
    20e6:	f009 ff6b 	bl	bfc0 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    20ea:	4b75      	ldr	r3, [pc, #468]	; (22c0 <LEDDebug(LEDStruct&)+0x214>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    20ec:	4871      	ldr	r0, [pc, #452]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    20ee:	7819      	ldrb	r1, [r3, #0]
    20f0:	220a      	movs	r2, #10
    20f2:	2300      	movs	r3, #0
    20f4:	f00a f978 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    20f8:	2103      	movs	r1, #3
    20fa:	4872      	ldr	r0, [pc, #456]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    20fc:	f009 ff60 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2100:	486c      	ldr	r0, [pc, #432]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2102:	f00a f961 	bl	c3c8 <Print::println()>
    2106:	2113      	movs	r1, #19
    2108:	486f      	ldr	r0, [pc, #444]	; (22c8 <LEDDebug(LEDStruct&)+0x21c>)
    210a:	f009 ff59 	bl	bfc0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    210e:	2300      	movs	r3, #0
    2110:	220a      	movs	r2, #10
    2112:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2116:	4867      	ldr	r0, [pc, #412]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2118:	f00a f966 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    211c:	2103      	movs	r1, #3
    211e:	4869      	ldr	r0, [pc, #420]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2120:	f009 ff4e 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2124:	4863      	ldr	r0, [pc, #396]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2126:	f00a f94f 	bl	c3c8 <Print::println()>
    212a:	2111      	movs	r1, #17
    212c:	4867      	ldr	r0, [pc, #412]	; (22cc <LEDDebug(LEDStruct&)+0x220>)
    212e:	f009 ff47 	bl	bfc0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2132:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2136:	485f      	ldr	r0, [pc, #380]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2138:	f00a f996 	bl	c468 <Print::print(long)>
    213c:	2103      	movs	r1, #3
    213e:	4861      	ldr	r0, [pc, #388]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2140:	f009 ff3e 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2144:	485b      	ldr	r0, [pc, #364]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2146:	f00a f93f 	bl	c3c8 <Print::println()>
    214a:	2114      	movs	r1, #20
    214c:	4860      	ldr	r0, [pc, #384]	; (22d0 <LEDDebug(LEDStruct&)+0x224>)
    214e:	f009 ff37 	bl	bfc0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2152:	2300      	movs	r3, #0
    2154:	220a      	movs	r2, #10
    2156:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    215a:	4856      	ldr	r0, [pc, #344]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    215c:	f00a f944 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2160:	2103      	movs	r1, #3
    2162:	4858      	ldr	r0, [pc, #352]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2164:	f009 ff2c 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2168:	4852      	ldr	r0, [pc, #328]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    216a:	f00a f92d 	bl	c3c8 <Print::println()>
    216e:	2115      	movs	r1, #21
    2170:	4858      	ldr	r0, [pc, #352]	; (22d4 <LEDDebug(LEDStruct&)+0x228>)
    2172:	f009 ff25 	bl	bfc0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2176:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    217a:	484e      	ldr	r0, [pc, #312]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    217c:	f00a f974 	bl	c468 <Print::print(long)>
    2180:	2103      	movs	r1, #3
    2182:	4850      	ldr	r0, [pc, #320]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2184:	f009 ff1c 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2188:	484a      	ldr	r0, [pc, #296]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    218a:	f00a f91d 	bl	c3c8 <Print::println()>
    218e:	2111      	movs	r1, #17
    2190:	4851      	ldr	r0, [pc, #324]	; (22d8 <LEDDebug(LEDStruct&)+0x22c>)
    2192:	f009 ff15 	bl	bfc0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2196:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    219a:	4846      	ldr	r0, [pc, #280]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    219c:	f00a f964 	bl	c468 <Print::print(long)>
    21a0:	2103      	movs	r1, #3
    21a2:	4848      	ldr	r0, [pc, #288]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    21a4:	f009 ff0c 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21a8:	4842      	ldr	r0, [pc, #264]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    21aa:	f00a f90d 	bl	c3c8 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    21ae:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    21b2:	bb5b      	cbnz	r3, 220c <LEDDebug(LEDStruct&)+0x160>
    21b4:	2122      	movs	r1, #34	; 0x22
    21b6:	4840      	ldr	r0, [pc, #256]	; (22b8 <LEDDebug(LEDStruct&)+0x20c>)
    21b8:	f009 ff02 	bl	bfc0 <usb_serial_write>
    21bc:	483d      	ldr	r0, [pc, #244]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    21be:	f00a f903 	bl	c3c8 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    21c2:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    21c6:	2b1d      	cmp	r3, #29
    21c8:	f200 8487 	bhi.w	2ada <LEDDebug(LEDStruct&)+0xa2e>
    21cc:	e8df f013 	tbh	[pc, r3, lsl #1]
    21d0:	04850094 	.word	0x04850094
    21d4:	04850485 	.word	0x04850485
    21d8:	04850485 	.word	0x04850485
    21dc:	04850107 	.word	0x04850107
    21e0:	04850485 	.word	0x04850485
    21e4:	04850140 	.word	0x04850140
    21e8:	04850485 	.word	0x04850485
    21ec:	04850485 	.word	0x04850485
    21f0:	014f0485 	.word	0x014f0485
    21f4:	015c015a 	.word	0x015c015a
    21f8:	017f015e 	.word	0x017f015e
    21fc:	02ea023c 	.word	0x02ea023c
    2200:	03c60346 	.word	0x03c60346
    2204:	04050485 	.word	0x04050485
    2208:	002b045b 	.word	0x002b045b
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    220c:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2210:	f7ff fc3e 	bl	1a90 <print_palette(unsigned char)>
    2214:	e7ce      	b.n	21b4 <LEDDebug(LEDStruct&)+0x108>
    2216:	2122      	movs	r1, #34	; 0x22
    2218:	4830      	ldr	r0, [pc, #192]	; (22dc <LEDDebug(LEDStruct&)+0x230>)
    221a:	f009 fed1 	bl	bfc0 <usb_serial_write>
    221e:	4825      	ldr	r0, [pc, #148]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2220:	f00a f8d2 	bl	c3c8 <Print::println()>
    2224:	e75d      	b.n	20e2 <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2226:	492e      	ldr	r1, [pc, #184]	; (22e0 <LEDDebug(LEDStruct&)+0x234>)
    2228:	4822      	ldr	r0, [pc, #136]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    222a:	f7fe fb5d 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    222e:	492d      	ldr	r1, [pc, #180]	; (22e4 <LEDDebug(LEDStruct&)+0x238>)
    2230:	4820      	ldr	r0, [pc, #128]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2232:	f7fe fb4b 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2236:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    223a:	481e      	ldr	r0, [pc, #120]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    223c:	f00a f914 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2240:	4920      	ldr	r1, [pc, #128]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2242:	481c      	ldr	r0, [pc, #112]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2244:	f7fe fb50 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2248:	4927      	ldr	r1, [pc, #156]	; (22e8 <LEDDebug(LEDStruct&)+0x23c>)
    224a:	481a      	ldr	r0, [pc, #104]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    224c:	f7fe fb3e 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2250:	2300      	movs	r3, #0
    2252:	220a      	movs	r2, #10
    2254:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2258:	4816      	ldr	r0, [pc, #88]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    225a:	f00a f8c5 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    225e:	4919      	ldr	r1, [pc, #100]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2260:	4814      	ldr	r0, [pc, #80]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2262:	f7fe fb41 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2266:	4921      	ldr	r1, [pc, #132]	; (22ec <LEDDebug(LEDStruct&)+0x240>)
    2268:	4812      	ldr	r0, [pc, #72]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    226a:	f7fe fb2f 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    226e:	2300      	movs	r3, #0
    2270:	220a      	movs	r2, #10
    2272:	f894 1837 	ldrb.w	r1, [r4, #2103]	; 0x837
    2276:	480f      	ldr	r0, [pc, #60]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2278:	f00a f8b6 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    227c:	4911      	ldr	r1, [pc, #68]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    227e:	480d      	ldr	r0, [pc, #52]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2280:	f7fe fb32 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2284:	491a      	ldr	r1, [pc, #104]	; (22f0 <LEDDebug(LEDStruct&)+0x244>)
    2286:	480b      	ldr	r0, [pc, #44]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2288:	f7fe fb20 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    228c:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2290:	4808      	ldr	r0, [pc, #32]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    2292:	f00a f8e9 	bl	c468 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2296:	490b      	ldr	r1, [pc, #44]	; (22c4 <LEDDebug(LEDStruct&)+0x218>)
    2298:	4806      	ldr	r0, [pc, #24]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
    229a:	f7fe fb25 	bl	8e8 <Print::println(char const*)>
    229e:	2123      	movs	r1, #35	; 0x23
    22a0:	4814      	ldr	r0, [pc, #80]	; (22f4 <LEDDebug(LEDStruct&)+0x248>)
    22a2:	f009 fe8d 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22a6:	4803      	ldr	r0, [pc, #12]	; (22b4 <LEDDebug(LEDStruct&)+0x208>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    22a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    22ac:	f00a b88c 	b.w	c3c8 <Print::println()>
    22b0:	0000e4a4 	.word	0x0000e4a4
    22b4:	1fff8768 	.word	0x1fff8768
    22b8:	0000e30c 	.word	0x0000e30c
    22bc:	0000e39c 	.word	0x0000e39c
    22c0:	1fff8723 	.word	0x1fff8723
    22c4:	0000e3b0 	.word	0x0000e3b0
    22c8:	0000e3b4 	.word	0x0000e3b4
    22cc:	0000e3c8 	.word	0x0000e3c8
    22d0:	0000e3dc 	.word	0x0000e3dc
    22d4:	0000e3f4 	.word	0x0000e3f4
    22d8:	0000e40c 	.word	0x0000e40c
    22dc:	0000e330 	.word	0x0000e330
    22e0:	0000ec54 	.word	0x0000ec54
    22e4:	0000ec78 	.word	0x0000ec78
    22e8:	0000ec90 	.word	0x0000ec90
    22ec:	0000eca8 	.word	0x0000eca8
    22f0:	0000ecc0 	.word	0x0000ecc0
    22f4:	0000ecf8 	.word	0x0000ecf8
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    22f8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    22fc:	48b4      	ldr	r0, [pc, #720]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    22fe:	2b04      	cmp	r3, #4
    2300:	bf0c      	ite	eq
    2302:	49b4      	ldreq	r1, [pc, #720]	; (25d4 <LEDDebug(LEDStruct&)+0x528>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2304:	49b4      	ldrne	r1, [pc, #720]	; (25d8 <LEDDebug(LEDStruct&)+0x52c>)
    2306:	f7fe faef 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    230a:	49b4      	ldr	r1, [pc, #720]	; (25dc <LEDDebug(LEDStruct&)+0x530>)
    230c:	48b0      	ldr	r0, [pc, #704]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    230e:	f7fe fadd 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2312:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2316:	48ae      	ldr	r0, [pc, #696]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2318:	f00a f8a6 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    231c:	49b0      	ldr	r1, [pc, #704]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    231e:	48ac      	ldr	r0, [pc, #688]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2320:	f7fe fae2 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2324:	49af      	ldr	r1, [pc, #700]	; (25e4 <LEDDebug(LEDStruct&)+0x538>)
    2326:	48aa      	ldr	r0, [pc, #680]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2328:	f7fe fad0 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    232c:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    2330:	48a7      	ldr	r0, [pc, #668]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2332:	f00a f899 	bl	c468 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2336:	49aa      	ldr	r1, [pc, #680]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2338:	48a5      	ldr	r0, [pc, #660]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    233a:	f7fe fad5 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    233e:	49aa      	ldr	r1, [pc, #680]	; (25e8 <LEDDebug(LEDStruct&)+0x53c>)
    2340:	48a3      	ldr	r0, [pc, #652]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2342:	f7fe fac3 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2346:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    234a:	48a1      	ldr	r0, [pc, #644]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    234c:	f00a f88c 	bl	c468 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    2350:	49a3      	ldr	r1, [pc, #652]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2352:	489f      	ldr	r0, [pc, #636]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2354:	f7fe fac8 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2358:	49a4      	ldr	r1, [pc, #656]	; (25ec <LEDDebug(LEDStruct&)+0x540>)
    235a:	489d      	ldr	r0, [pc, #628]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    235c:	f7fe fab6 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2360:	2300      	movs	r3, #0
    2362:	220a      	movs	r2, #10
    2364:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2368:	4899      	ldr	r0, [pc, #612]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    236a:	f00a f83d 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    236e:	499c      	ldr	r1, [pc, #624]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2370:	4897      	ldr	r0, [pc, #604]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2372:	f7fe fab9 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2376:	499e      	ldr	r1, [pc, #632]	; (25f0 <LEDDebug(LEDStruct&)+0x544>)
    2378:	4895      	ldr	r0, [pc, #596]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    237a:	f7fe faa7 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237e:	2300      	movs	r3, #0
    2380:	220a      	movs	r2, #10
    2382:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2386:	4892      	ldr	r0, [pc, #584]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2388:	f00a f82e 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    238c:	4994      	ldr	r1, [pc, #592]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    238e:	4890      	ldr	r0, [pc, #576]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2390:	f7fe faaa 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2394:	4997      	ldr	r1, [pc, #604]	; (25f4 <LEDDebug(LEDStruct&)+0x548>)
    2396:	488e      	ldr	r0, [pc, #568]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2398:	f7fe fa98 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    239c:	2300      	movs	r3, #0
    239e:	220a      	movs	r2, #10
    23a0:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    23a4:	488a      	ldr	r0, [pc, #552]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23a6:	f00a f81f 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    23aa:	498d      	ldr	r1, [pc, #564]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    23ac:	4888      	ldr	r0, [pc, #544]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23ae:	f7fe fa9b 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23b2:	4991      	ldr	r1, [pc, #580]	; (25f8 <LEDDebug(LEDStruct&)+0x54c>)
    23b4:	4886      	ldr	r0, [pc, #536]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23b6:	f7fe fa89 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23ba:	2300      	movs	r3, #0
    23bc:	220a      	movs	r2, #10
    23be:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    23c2:	4883      	ldr	r0, [pc, #524]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23c4:	f00a f810 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    23c8:	4985      	ldr	r1, [pc, #532]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    23ca:	4881      	ldr	r0, [pc, #516]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23cc:	f7fe fa8c 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23d0:	498a      	ldr	r1, [pc, #552]	; (25fc <LEDDebug(LEDStruct&)+0x550>)
    23d2:	487f      	ldr	r0, [pc, #508]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23d4:	f7fe fa7a 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23d8:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    23dc:	e758      	b.n	2290 <LEDDebug(LEDStruct&)+0x1e4>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    23de:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    23e2:	2b00      	cmp	r3, #0
    23e4:	f000 83d2 	beq.w	2b8c <LEDDebug(LEDStruct&)+0xae0>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    23e8:	4985      	ldr	r1, [pc, #532]	; (2600 <LEDDebug(LEDStruct&)+0x554>)
    23ea:	4879      	ldr	r0, [pc, #484]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23ec:	f7fe fa7c 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23f0:	497a      	ldr	r1, [pc, #488]	; (25dc <LEDDebug(LEDStruct&)+0x530>)
    23f2:	4877      	ldr	r0, [pc, #476]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23f4:	f7fe fa6a 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23f8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    23fc:	4874      	ldr	r0, [pc, #464]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    23fe:	f00a f833 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2402:	4977      	ldr	r1, [pc, #476]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2404:	4872      	ldr	r0, [pc, #456]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2406:	f7fe fa6f 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    240a:	497e      	ldr	r1, [pc, #504]	; (2604 <LEDDebug(LEDStruct&)+0x558>)
    240c:	4870      	ldr	r0, [pc, #448]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    240e:	f7fe fa5d 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2412:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    2416:	486e      	ldr	r0, [pc, #440]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2418:	f00a f826 	bl	c468 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    241c:	4970      	ldr	r1, [pc, #448]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    241e:	486c      	ldr	r0, [pc, #432]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2420:	f7fe fa62 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2424:	4978      	ldr	r1, [pc, #480]	; (2608 <LEDDebug(LEDStruct&)+0x55c>)
    2426:	486a      	ldr	r0, [pc, #424]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2428:	f7fe fa50 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    242c:	2300      	movs	r3, #0
    242e:	220a      	movs	r2, #10
    2430:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2434:	4866      	ldr	r0, [pc, #408]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2436:	f009 ffd7 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    243a:	4969      	ldr	r1, [pc, #420]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    243c:	4864      	ldr	r0, [pc, #400]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    243e:	f7fe fa53 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2442:	4972      	ldr	r1, [pc, #456]	; (260c <LEDDebug(LEDStruct&)+0x560>)
    2444:	4862      	ldr	r0, [pc, #392]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2446:	f7fe fa41 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    244a:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    244e:	e034      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    2450:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2454:	3b0a      	subs	r3, #10
    2456:	2b06      	cmp	r3, #6
    2458:	f200 835d 	bhi.w	2b16 <LEDDebug(LEDStruct&)+0xa6a>
    245c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2460:	03d303d8 	.word	0x03d303d8
    2464:	03ce0357 	.word	0x03ce0357
    2468:	03c403c9 	.word	0x03c403c9
    246c:	03bf      	.short	0x03bf
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    246e:	4968      	ldr	r1, [pc, #416]	; (2610 <LEDDebug(LEDStruct&)+0x564>)
    2470:	4857      	ldr	r0, [pc, #348]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2472:	f7fe fa39 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2476:	4959      	ldr	r1, [pc, #356]	; (25dc <LEDDebug(LEDStruct&)+0x530>)
    2478:	4855      	ldr	r0, [pc, #340]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    247a:	f7fe fa27 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    247e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2482:	e705      	b.n	2290 <LEDDebug(LEDStruct&)+0x1e4>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2484:	4963      	ldr	r1, [pc, #396]	; (2614 <LEDDebug(LEDStruct&)+0x568>)
    2486:	e7f3      	b.n	2470 <LEDDebug(LEDStruct&)+0x3c4>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2488:	4963      	ldr	r1, [pc, #396]	; (2618 <LEDDebug(LEDStruct&)+0x56c>)
    248a:	e7f1      	b.n	2470 <LEDDebug(LEDStruct&)+0x3c4>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    248c:	4963      	ldr	r1, [pc, #396]	; (261c <LEDDebug(LEDStruct&)+0x570>)
    248e:	4850      	ldr	r0, [pc, #320]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2490:	f7fe fa2a 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2494:	4951      	ldr	r1, [pc, #324]	; (25dc <LEDDebug(LEDStruct&)+0x530>)
    2496:	484e      	ldr	r0, [pc, #312]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2498:	f7fe fa18 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    249c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    24a0:	484b      	ldr	r0, [pc, #300]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24a2:	f009 ffe1 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24a6:	494e      	ldr	r1, [pc, #312]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    24a8:	4849      	ldr	r0, [pc, #292]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24aa:	f7fe fa1d 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ae:	495c      	ldr	r1, [pc, #368]	; (2620 <LEDDebug(LEDStruct&)+0x574>)
    24b0:	4847      	ldr	r0, [pc, #284]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24b2:	f7fe fa0b 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24b6:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    24ba:	4845      	ldr	r0, [pc, #276]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24bc:	2300      	movs	r3, #0
    24be:	220a      	movs	r2, #10
    24c0:	f009 ff92 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    24c4:	4946      	ldr	r1, [pc, #280]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    24c6:	4842      	ldr	r0, [pc, #264]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24c8:	f7fe fa0e 	bl	8e8 <Print::println(char const*)>
    24cc:	e6e7      	b.n	229e <LEDDebug(LEDStruct&)+0x1f2>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    24ce:	4955      	ldr	r1, [pc, #340]	; (2624 <LEDDebug(LEDStruct&)+0x578>)
    24d0:	483f      	ldr	r0, [pc, #252]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24d2:	f7fe fa09 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24d6:	4941      	ldr	r1, [pc, #260]	; (25dc <LEDDebug(LEDStruct&)+0x530>)
    24d8:	483d      	ldr	r0, [pc, #244]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24da:	f7fe f9f7 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24de:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    24e2:	483b      	ldr	r0, [pc, #236]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24e4:	f009 ffc0 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24e8:	493d      	ldr	r1, [pc, #244]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    24ea:	4839      	ldr	r0, [pc, #228]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24ec:	f7fe f9fc 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24f0:	494d      	ldr	r1, [pc, #308]	; (2628 <LEDDebug(LEDStruct&)+0x57c>)
    24f2:	4837      	ldr	r0, [pc, #220]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    24f4:	f7fe f9ea 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24f8:	2300      	movs	r3, #0
    24fa:	220a      	movs	r2, #10
    24fc:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2500:	4833      	ldr	r0, [pc, #204]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2502:	f009 ff71 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2506:	4936      	ldr	r1, [pc, #216]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2508:	4831      	ldr	r0, [pc, #196]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    250a:	f7fe f9ed 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    250e:	4947      	ldr	r1, [pc, #284]	; (262c <LEDDebug(LEDStruct&)+0x580>)
    2510:	482f      	ldr	r0, [pc, #188]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2512:	f7fe f9db 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2516:	2300      	movs	r3, #0
    2518:	220a      	movs	r2, #10
    251a:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    251e:	482c      	ldr	r0, [pc, #176]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2520:	f009 ff62 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2524:	492e      	ldr	r1, [pc, #184]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2526:	482a      	ldr	r0, [pc, #168]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2528:	f7fe f9de 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    252c:	4940      	ldr	r1, [pc, #256]	; (2630 <LEDDebug(LEDStruct&)+0x584>)
    252e:	4828      	ldr	r0, [pc, #160]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2530:	f7fe f9cc 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2534:	2300      	movs	r3, #0
    2536:	220a      	movs	r2, #10
    2538:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    253c:	4824      	ldr	r0, [pc, #144]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    253e:	f009 ff53 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2542:	4927      	ldr	r1, [pc, #156]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2544:	4822      	ldr	r0, [pc, #136]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2546:	f7fe f9cf 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    254a:	493a      	ldr	r1, [pc, #232]	; (2634 <LEDDebug(LEDStruct&)+0x588>)
    254c:	4820      	ldr	r0, [pc, #128]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    254e:	f7fe f9bd 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2552:	2300      	movs	r3, #0
    2554:	220a      	movs	r2, #10
    2556:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    255a:	481d      	ldr	r0, [pc, #116]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    255c:	f009 ff44 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2560:	491f      	ldr	r1, [pc, #124]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2562:	481b      	ldr	r0, [pc, #108]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2564:	f7fe f9c0 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2568:	4933      	ldr	r1, [pc, #204]	; (2638 <LEDDebug(LEDStruct&)+0x58c>)
    256a:	4819      	ldr	r0, [pc, #100]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    256c:	f7fe f9ae 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2570:	2300      	movs	r3, #0
    2572:	220a      	movs	r2, #10
    2574:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2578:	4815      	ldr	r0, [pc, #84]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    257a:	f009 ff35 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    257e:	4918      	ldr	r1, [pc, #96]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    2580:	4813      	ldr	r0, [pc, #76]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2582:	f7fe f9b1 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2586:	492d      	ldr	r1, [pc, #180]	; (263c <LEDDebug(LEDStruct&)+0x590>)
    2588:	4811      	ldr	r0, [pc, #68]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    258a:	f7fe f99f 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    258e:	2300      	movs	r3, #0
    2590:	220a      	movs	r2, #10
    2592:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2596:	480e      	ldr	r0, [pc, #56]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    2598:	f009 ff26 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    259c:	4910      	ldr	r1, [pc, #64]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    259e:	480c      	ldr	r0, [pc, #48]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    25a0:	f7fe f9a2 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25a4:	4926      	ldr	r1, [pc, #152]	; (2640 <LEDDebug(LEDStruct&)+0x594>)
    25a6:	480a      	ldr	r0, [pc, #40]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    25a8:	f7fe f990 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ac:	2300      	movs	r3, #0
    25ae:	220a      	movs	r2, #10
    25b0:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    25b4:	4806      	ldr	r0, [pc, #24]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    25b6:	f009 ff17 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    25ba:	4909      	ldr	r1, [pc, #36]	; (25e0 <LEDDebug(LEDStruct&)+0x534>)
    25bc:	4804      	ldr	r0, [pc, #16]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    25be:	f7fe f993 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c2:	4920      	ldr	r1, [pc, #128]	; (2644 <LEDDebug(LEDStruct&)+0x598>)
    25c4:	4802      	ldr	r0, [pc, #8]	; (25d0 <LEDDebug(LEDStruct&)+0x524>)
    25c6:	f7fe f981 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25ca:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    25ce:	e774      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
    25d0:	1fff8768 	.word	0x1fff8768
    25d4:	0000e420 	.word	0x0000e420
    25d8:	0000e444 	.word	0x0000e444
    25dc:	0000e468 	.word	0x0000e468
    25e0:	0000e3b0 	.word	0x0000e3b0
    25e4:	0000e480 	.word	0x0000e480
    25e8:	0000e494 	.word	0x0000e494
    25ec:	0000e4a8 	.word	0x0000e4a8
    25f0:	0000e4bc 	.word	0x0000e4bc
    25f4:	0000e4cc 	.word	0x0000e4cc
    25f8:	0000e4dc 	.word	0x0000e4dc
    25fc:	0000e4ec 	.word	0x0000e4ec
    2600:	0000e528 	.word	0x0000e528
    2604:	0000e54c 	.word	0x0000e54c
    2608:	0000e55c 	.word	0x0000e55c
    260c:	0000e56c 	.word	0x0000e56c
    2610:	0000e6ec 	.word	0x0000e6ec
    2614:	0000e710 	.word	0x0000e710
    2618:	0000e734 	.word	0x0000e734
    261c:	0000e758 	.word	0x0000e758
    2620:	0000e77c 	.word	0x0000e77c
    2624:	0000e864 	.word	0x0000e864
    2628:	0000e888 	.word	0x0000e888
    262c:	0000e89c 	.word	0x0000e89c
    2630:	0000e8b0 	.word	0x0000e8b0
    2634:	0000e8c4 	.word	0x0000e8c4
    2638:	0000e8d8 	.word	0x0000e8d8
    263c:	0000e8ec 	.word	0x0000e8ec
    2640:	0000e900 	.word	0x0000e900
    2644:	0000e914 	.word	0x0000e914
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2648:	49a7      	ldr	r1, [pc, #668]	; (28e8 <LEDDebug(LEDStruct&)+0x83c>)
    264a:	48a8      	ldr	r0, [pc, #672]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    264c:	f7fe f94c 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2650:	49a7      	ldr	r1, [pc, #668]	; (28f0 <LEDDebug(LEDStruct&)+0x844>)
    2652:	48a6      	ldr	r0, [pc, #664]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2654:	f7fe f93a 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2658:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    265c:	48a3      	ldr	r0, [pc, #652]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    265e:	f009 ff03 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2662:	49a4      	ldr	r1, [pc, #656]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2664:	48a1      	ldr	r0, [pc, #644]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2666:	f7fe f93f 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    266a:	49a3      	ldr	r1, [pc, #652]	; (28f8 <LEDDebug(LEDStruct&)+0x84c>)
    266c:	489f      	ldr	r0, [pc, #636]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    266e:	f7fe f92d 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2672:	2300      	movs	r3, #0
    2674:	220a      	movs	r2, #10
    2676:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    267a:	489c      	ldr	r0, [pc, #624]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    267c:	f009 feb4 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    2680:	499c      	ldr	r1, [pc, #624]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2682:	489a      	ldr	r0, [pc, #616]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2684:	f7fe f930 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2688:	499c      	ldr	r1, [pc, #624]	; (28fc <LEDDebug(LEDStruct&)+0x850>)
    268a:	4898      	ldr	r0, [pc, #608]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    268c:	f7fe f91e 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2690:	2300      	movs	r3, #0
    2692:	220a      	movs	r2, #10
    2694:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2698:	4894      	ldr	r0, [pc, #592]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    269a:	f009 fea5 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    269e:	4995      	ldr	r1, [pc, #596]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    26a0:	4892      	ldr	r0, [pc, #584]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26a2:	f7fe f921 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26a6:	4996      	ldr	r1, [pc, #600]	; (2900 <LEDDebug(LEDStruct&)+0x854>)
    26a8:	4890      	ldr	r0, [pc, #576]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26aa:	f7fe f90f 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26ae:	2300      	movs	r3, #0
    26b0:	220a      	movs	r2, #10
    26b2:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    26b6:	488d      	ldr	r0, [pc, #564]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26b8:	f009 fe96 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    26bc:	498d      	ldr	r1, [pc, #564]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    26be:	488b      	ldr	r0, [pc, #556]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26c0:	f7fe f912 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26c4:	498f      	ldr	r1, [pc, #572]	; (2904 <LEDDebug(LEDStruct&)+0x858>)
    26c6:	4889      	ldr	r0, [pc, #548]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26c8:	f7fe f900 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26cc:	2300      	movs	r3, #0
    26ce:	220a      	movs	r2, #10
    26d0:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    26d4:	4885      	ldr	r0, [pc, #532]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26d6:	f009 fe87 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    26da:	4986      	ldr	r1, [pc, #536]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    26dc:	4883      	ldr	r0, [pc, #524]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26de:	f7fe f903 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26e2:	4989      	ldr	r1, [pc, #548]	; (2908 <LEDDebug(LEDStruct&)+0x85c>)
    26e4:	4881      	ldr	r0, [pc, #516]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26e6:	f7fe f8f1 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26ea:	2300      	movs	r3, #0
    26ec:	220a      	movs	r2, #10
    26ee:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    26f2:	487e      	ldr	r0, [pc, #504]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26f4:	f009 fe78 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    26f8:	497e      	ldr	r1, [pc, #504]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    26fa:	487c      	ldr	r0, [pc, #496]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    26fc:	f7fe f8f4 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2700:	4982      	ldr	r1, [pc, #520]	; (290c <LEDDebug(LEDStruct&)+0x860>)
    2702:	487a      	ldr	r0, [pc, #488]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2704:	f7fe f8e2 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2708:	2300      	movs	r3, #0
    270a:	220a      	movs	r2, #10
    270c:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2710:	4876      	ldr	r0, [pc, #472]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2712:	f009 fe69 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2716:	4977      	ldr	r1, [pc, #476]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2718:	4874      	ldr	r0, [pc, #464]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    271a:	f7fe f8e5 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    271e:	497c      	ldr	r1, [pc, #496]	; (2910 <LEDDebug(LEDStruct&)+0x864>)
    2720:	4872      	ldr	r0, [pc, #456]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2722:	f7fe f8d3 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2726:	2300      	movs	r3, #0
    2728:	220a      	movs	r2, #10
    272a:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    272e:	486f      	ldr	r0, [pc, #444]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2730:	f009 fe5a 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2734:	496f      	ldr	r1, [pc, #444]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2736:	486d      	ldr	r0, [pc, #436]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2738:	f7fe f8d6 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    273c:	4975      	ldr	r1, [pc, #468]	; (2914 <LEDDebug(LEDStruct&)+0x868>)
    273e:	486b      	ldr	r0, [pc, #428]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2740:	f7fe f8c4 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2744:	2300      	movs	r3, #0
    2746:	220a      	movs	r2, #10
    2748:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    274c:	4867      	ldr	r0, [pc, #412]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    274e:	f009 fe4b 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    2752:	4968      	ldr	r1, [pc, #416]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2754:	4865      	ldr	r0, [pc, #404]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2756:	f7fe f8c7 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    275a:	496f      	ldr	r1, [pc, #444]	; (2918 <LEDDebug(LEDStruct&)+0x86c>)
    275c:	4863      	ldr	r0, [pc, #396]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    275e:	f7fe f8b5 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2762:	2300      	movs	r3, #0
    2764:	220a      	movs	r2, #10
    2766:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    276a:	4860      	ldr	r0, [pc, #384]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    276c:	f009 fe3c 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    2770:	4960      	ldr	r1, [pc, #384]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2772:	485e      	ldr	r0, [pc, #376]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2774:	f7fe f8b8 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2778:	4968      	ldr	r1, [pc, #416]	; (291c <LEDDebug(LEDStruct&)+0x870>)
    277a:	485c      	ldr	r0, [pc, #368]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    277c:	f7fe f8a6 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2780:	2300      	movs	r3, #0
    2782:	220a      	movs	r2, #10
    2784:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2788:	4858      	ldr	r0, [pc, #352]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    278a:	f009 fe2d 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    278e:	4959      	ldr	r1, [pc, #356]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2790:	4856      	ldr	r0, [pc, #344]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2792:	f7fe f8a9 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2796:	4962      	ldr	r1, [pc, #392]	; (2920 <LEDDebug(LEDStruct&)+0x874>)
    2798:	4854      	ldr	r0, [pc, #336]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    279a:	f7fe f897 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    279e:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    27a2:	e68a      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    27a4:	495f      	ldr	r1, [pc, #380]	; (2924 <LEDDebug(LEDStruct&)+0x878>)
    27a6:	4851      	ldr	r0, [pc, #324]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27a8:	f7fe f89e 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ac:	495e      	ldr	r1, [pc, #376]	; (2928 <LEDDebug(LEDStruct&)+0x87c>)
    27ae:	484f      	ldr	r0, [pc, #316]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27b0:	f7fe f88c 	bl	8cc <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    27b4:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    27b8:	2b01      	cmp	r3, #1
    27ba:	f000 820b 	beq.w	2bd4 <LEDDebug(LEDStruct&)+0xb28>
    27be:	f0c0 822c 	bcc.w	2c1a <LEDDebug(LEDStruct&)+0xb6e>
    27c2:	2b02      	cmp	r3, #2
    27c4:	d107      	bne.n	27d6 <LEDDebug(LEDStruct&)+0x72a>
    27c6:	4959      	ldr	r1, [pc, #356]	; (292c <LEDDebug(LEDStruct&)+0x880>)
    27c8:	4848      	ldr	r0, [pc, #288]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27ca:	f7fe f87f 	bl	8cc <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    27ce:	4949      	ldr	r1, [pc, #292]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    27d0:	4846      	ldr	r0, [pc, #280]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27d2:	f7fe f889 	bl	8e8 <Print::println(char const*)>
    27d6:	4956      	ldr	r1, [pc, #344]	; (2930 <LEDDebug(LEDStruct&)+0x884>)
    27d8:	4844      	ldr	r0, [pc, #272]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27da:	f7fe f877 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27de:	2300      	movs	r3, #0
    27e0:	220a      	movs	r2, #10
    27e2:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    27e6:	4841      	ldr	r0, [pc, #260]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27e8:	f009 fdfe 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    27ec:	4941      	ldr	r1, [pc, #260]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    27ee:	483f      	ldr	r0, [pc, #252]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27f0:	f7fe f87a 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f4:	494f      	ldr	r1, [pc, #316]	; (2934 <LEDDebug(LEDStruct&)+0x888>)
    27f6:	483d      	ldr	r0, [pc, #244]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    27f8:	f7fe f868 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27fc:	2300      	movs	r3, #0
    27fe:	220a      	movs	r2, #10
    2800:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2804:	4839      	ldr	r0, [pc, #228]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2806:	f009 fdef 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    280a:	493a      	ldr	r1, [pc, #232]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    280c:	4837      	ldr	r0, [pc, #220]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    280e:	f7fe f86b 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2812:	4949      	ldr	r1, [pc, #292]	; (2938 <LEDDebug(LEDStruct&)+0x88c>)
    2814:	4835      	ldr	r0, [pc, #212]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2816:	f7fe f859 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    281a:	2300      	movs	r3, #0
    281c:	220a      	movs	r2, #10
    281e:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2822:	4832      	ldr	r0, [pc, #200]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2824:	f009 fde0 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2828:	4932      	ldr	r1, [pc, #200]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    282a:	4830      	ldr	r0, [pc, #192]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    282c:	f7fe f85c 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2830:	4942      	ldr	r1, [pc, #264]	; (293c <LEDDebug(LEDStruct&)+0x890>)
    2832:	482e      	ldr	r0, [pc, #184]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2834:	f7fe f84a 	bl	8cc <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2838:	2300      	movs	r3, #0
    283a:	220a      	movs	r2, #10
    283c:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2840:	482a      	ldr	r0, [pc, #168]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2842:	f009 fdd1 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2846:	492b      	ldr	r1, [pc, #172]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2848:	4828      	ldr	r0, [pc, #160]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    284a:	f7fe f84d 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    284e:	493c      	ldr	r1, [pc, #240]	; (2940 <LEDDebug(LEDStruct&)+0x894>)
    2850:	4826      	ldr	r0, [pc, #152]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2852:	f7fe f83b 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2856:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    285a:	e519      	b.n	2290 <LEDDebug(LEDStruct&)+0x1e4>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    285c:	4939      	ldr	r1, [pc, #228]	; (2944 <LEDDebug(LEDStruct&)+0x898>)
    285e:	4823      	ldr	r0, [pc, #140]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2860:	f7fe f842 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2864:	4938      	ldr	r1, [pc, #224]	; (2948 <LEDDebug(LEDStruct&)+0x89c>)
    2866:	4821      	ldr	r0, [pc, #132]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2868:	f7fe f830 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    286c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2870:	481e      	ldr	r0, [pc, #120]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2872:	f009 fdf9 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2876:	491f      	ldr	r1, [pc, #124]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2878:	481c      	ldr	r0, [pc, #112]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    287a:	f7fe f835 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    287e:	4933      	ldr	r1, [pc, #204]	; (294c <LEDDebug(LEDStruct&)+0x8a0>)
    2880:	481a      	ldr	r0, [pc, #104]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2882:	f7fe f823 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2886:	2300      	movs	r3, #0
    2888:	220a      	movs	r2, #10
    288a:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    288e:	4817      	ldr	r0, [pc, #92]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2890:	f009 fdaa 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2894:	4917      	ldr	r1, [pc, #92]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    2896:	4815      	ldr	r0, [pc, #84]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    2898:	f7fe f826 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    289c:	492c      	ldr	r1, [pc, #176]	; (2950 <LEDDebug(LEDStruct&)+0x8a4>)
    289e:	4813      	ldr	r0, [pc, #76]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28a0:	f7fe f814 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28a4:	2300      	movs	r3, #0
    28a6:	220a      	movs	r2, #10
    28a8:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    28ac:	480f      	ldr	r0, [pc, #60]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28ae:	f009 fd9b 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    28b2:	4910      	ldr	r1, [pc, #64]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    28b4:	480d      	ldr	r0, [pc, #52]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28b6:	f7fe f817 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ba:	4926      	ldr	r1, [pc, #152]	; (2954 <LEDDebug(LEDStruct&)+0x8a8>)
    28bc:	480b      	ldr	r0, [pc, #44]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28be:	f7fe f805 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c2:	2300      	movs	r3, #0
    28c4:	220a      	movs	r2, #10
    28c6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    28ca:	4808      	ldr	r0, [pc, #32]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28cc:	f009 fd8c 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    28d0:	4908      	ldr	r1, [pc, #32]	; (28f4 <LEDDebug(LEDStruct&)+0x848>)
    28d2:	4806      	ldr	r0, [pc, #24]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28d4:	f7fe f808 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28d8:	491f      	ldr	r1, [pc, #124]	; (2958 <LEDDebug(LEDStruct&)+0x8ac>)
    28da:	4804      	ldr	r0, [pc, #16]	; (28ec <LEDDebug(LEDStruct&)+0x840>)
    28dc:	f7fd fff6 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e0:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    28e4:	e5e9      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
    28e6:	bf00      	nop
    28e8:	0000e928 	.word	0x0000e928
    28ec:	1fff8768 	.word	0x1fff8768
    28f0:	0000e468 	.word	0x0000e468
    28f4:	0000e3b0 	.word	0x0000e3b0
    28f8:	0000e94c 	.word	0x0000e94c
    28fc:	0000e960 	.word	0x0000e960
    2900:	0000e974 	.word	0x0000e974
    2904:	0000e988 	.word	0x0000e988
    2908:	0000e99c 	.word	0x0000e99c
    290c:	0000e9b0 	.word	0x0000e9b0
    2910:	0000e9c4 	.word	0x0000e9c4
    2914:	0000e9d8 	.word	0x0000e9d8
    2918:	0000e9ec 	.word	0x0000e9ec
    291c:	0000ea00 	.word	0x0000ea00
    2920:	0000ea14 	.word	0x0000ea14
    2924:	0000e794 	.word	0x0000e794
    2928:	0000e7b8 	.word	0x0000e7b8
    292c:	0000e7cc 	.word	0x0000e7cc
    2930:	0000e7e8 	.word	0x0000e7e8
    2934:	0000e800 	.word	0x0000e800
    2938:	0000e818 	.word	0x0000e818
    293c:	0000e830 	.word	0x0000e830
    2940:	0000e84c 	.word	0x0000e84c
    2944:	0000ea28 	.word	0x0000ea28
    2948:	0000ea4c 	.word	0x0000ea4c
    294c:	0000ea64 	.word	0x0000ea64
    2950:	0000ea78 	.word	0x0000ea78
    2954:	0000ea90 	.word	0x0000ea90
    2958:	0000eaa8 	.word	0x0000eaa8
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    295c:	49b0      	ldr	r1, [pc, #704]	; (2c20 <LEDDebug(LEDStruct&)+0xb74>)
    295e:	48b1      	ldr	r0, [pc, #708]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2960:	f7fd ffc2 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2964:	49b0      	ldr	r1, [pc, #704]	; (2c28 <LEDDebug(LEDStruct&)+0xb7c>)
    2966:	48af      	ldr	r0, [pc, #700]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2968:	f7fd ffb0 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    296c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2970:	48ac      	ldr	r0, [pc, #688]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2972:	f009 fd79 	bl	c468 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2976:	49ad      	ldr	r1, [pc, #692]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2978:	48aa      	ldr	r0, [pc, #680]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    297a:	f7fd ffb5 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    297e:	49ac      	ldr	r1, [pc, #688]	; (2c30 <LEDDebug(LEDStruct&)+0xb84>)
    2980:	48a8      	ldr	r0, [pc, #672]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2982:	f7fd ffa3 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2986:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    298a:	48a6      	ldr	r0, [pc, #664]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    298c:	f009 fd6c 	bl	c468 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2990:	49a6      	ldr	r1, [pc, #664]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2992:	48a4      	ldr	r0, [pc, #656]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2994:	f7fd ffa8 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2998:	49a6      	ldr	r1, [pc, #664]	; (2c34 <LEDDebug(LEDStruct&)+0xb88>)
    299a:	48a2      	ldr	r0, [pc, #648]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    299c:	f7fd ff96 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29a0:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    29a4:	489f      	ldr	r0, [pc, #636]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29a6:	f009 fd5f 	bl	c468 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    29aa:	49a0      	ldr	r1, [pc, #640]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    29ac:	489d      	ldr	r0, [pc, #628]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29ae:	f7fd ff9b 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b2:	49a1      	ldr	r1, [pc, #644]	; (2c38 <LEDDebug(LEDStruct&)+0xb8c>)
    29b4:	489b      	ldr	r0, [pc, #620]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29b6:	f7fd ff89 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29ba:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    29be:	4899      	ldr	r0, [pc, #612]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29c0:	f009 fd52 	bl	c468 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    29c4:	4999      	ldr	r1, [pc, #612]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    29c6:	4897      	ldr	r0, [pc, #604]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29c8:	f7fd ff8e 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29cc:	499b      	ldr	r1, [pc, #620]	; (2c3c <LEDDebug(LEDStruct&)+0xb90>)
    29ce:	4895      	ldr	r0, [pc, #596]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29d0:	f7fd ff7c 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29d4:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    29d8:	e56f      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    29da:	4999      	ldr	r1, [pc, #612]	; (2c40 <LEDDebug(LEDStruct&)+0xb94>)
    29dc:	4891      	ldr	r0, [pc, #580]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29de:	f7fd ff83 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29e2:	4998      	ldr	r1, [pc, #608]	; (2c44 <LEDDebug(LEDStruct&)+0xb98>)
    29e4:	488f      	ldr	r0, [pc, #572]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29e6:	f7fd ff71 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29ea:	2300      	movs	r3, #0
    29ec:	220a      	movs	r2, #10
    29ee:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    29f2:	488c      	ldr	r0, [pc, #560]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29f4:	f009 fcf8 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    29f8:	498c      	ldr	r1, [pc, #560]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    29fa:	488a      	ldr	r0, [pc, #552]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    29fc:	f7fd ff74 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a00:	4991      	ldr	r1, [pc, #580]	; (2c48 <LEDDebug(LEDStruct&)+0xb9c>)
    2a02:	4888      	ldr	r0, [pc, #544]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a04:	f7fd ff62 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a08:	2300      	movs	r3, #0
    2a0a:	220a      	movs	r2, #10
    2a0c:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2a10:	4884      	ldr	r0, [pc, #528]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a12:	f009 fce9 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2a16:	4985      	ldr	r1, [pc, #532]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2a18:	4882      	ldr	r0, [pc, #520]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a1a:	f7fd ff65 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a1e:	498b      	ldr	r1, [pc, #556]	; (2c4c <LEDDebug(LEDStruct&)+0xba0>)
    2a20:	4880      	ldr	r0, [pc, #512]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a22:	f7fd ff53 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a26:	2300      	movs	r3, #0
    2a28:	220a      	movs	r2, #10
    2a2a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2a2e:	487d      	ldr	r0, [pc, #500]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a30:	f009 fcda 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2a34:	497d      	ldr	r1, [pc, #500]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2a36:	487b      	ldr	r0, [pc, #492]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a38:	f7fd ff56 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a3c:	4984      	ldr	r1, [pc, #528]	; (2c50 <LEDDebug(LEDStruct&)+0xba4>)
    2a3e:	4879      	ldr	r0, [pc, #484]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a40:	f7fd ff44 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a44:	2300      	movs	r3, #0
    2a46:	220a      	movs	r2, #10
    2a48:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2a4c:	4875      	ldr	r0, [pc, #468]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a4e:	f009 fccb 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2a52:	4976      	ldr	r1, [pc, #472]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2a54:	4873      	ldr	r0, [pc, #460]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a56:	f7fd ff47 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a5a:	497e      	ldr	r1, [pc, #504]	; (2c54 <LEDDebug(LEDStruct&)+0xba8>)
    2a5c:	4871      	ldr	r0, [pc, #452]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a5e:	f7fd ff35 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a62:	2300      	movs	r3, #0
    2a64:	220a      	movs	r2, #10
    2a66:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2a6a:	486e      	ldr	r0, [pc, #440]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a6c:	f009 fcbc 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2a70:	496e      	ldr	r1, [pc, #440]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2a72:	486c      	ldr	r0, [pc, #432]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a74:	f7fd ff38 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a78:	4977      	ldr	r1, [pc, #476]	; (2c58 <LEDDebug(LEDStruct&)+0xbac>)
    2a7a:	486a      	ldr	r0, [pc, #424]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a7c:	f7fd ff26 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a80:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2a84:	e404      	b.n	2290 <LEDDebug(LEDStruct&)+0x1e4>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2a86:	4975      	ldr	r1, [pc, #468]	; (2c5c <LEDDebug(LEDStruct&)+0xbb0>)
    2a88:	4866      	ldr	r0, [pc, #408]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a8a:	f7fd ff2d 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a8e:	4974      	ldr	r1, [pc, #464]	; (2c60 <LEDDebug(LEDStruct&)+0xbb4>)
    2a90:	4864      	ldr	r0, [pc, #400]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2a92:	f7fd ff1b 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a96:	2300      	movs	r3, #0
    2a98:	220a      	movs	r2, #10
    2a9a:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2a9e:	4861      	ldr	r0, [pc, #388]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2aa0:	f009 fca2 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2aa4:	4961      	ldr	r1, [pc, #388]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2aa6:	485f      	ldr	r0, [pc, #380]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2aa8:	f7fd ff1e 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aac:	496d      	ldr	r1, [pc, #436]	; (2c64 <LEDDebug(LEDStruct&)+0xbb8>)
    2aae:	485d      	ldr	r0, [pc, #372]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ab0:	f7fd ff0c 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ab4:	2300      	movs	r3, #0
    2ab6:	220a      	movs	r2, #10
    2ab8:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2abc:	4859      	ldr	r0, [pc, #356]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2abe:	f009 fc93 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2ac2:	495a      	ldr	r1, [pc, #360]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2ac4:	4857      	ldr	r0, [pc, #348]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ac6:	f7fd ff0f 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aca:	4967      	ldr	r1, [pc, #412]	; (2c68 <LEDDebug(LEDStruct&)+0xbbc>)
    2acc:	4855      	ldr	r0, [pc, #340]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ace:	f7fd fefd 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ad2:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2ad6:	f7ff bbdb 	b.w	2290 <LEDDebug(LEDStruct&)+0x1e4>
			Serial.print(leds.hold_time);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2ada:	4964      	ldr	r1, [pc, #400]	; (2c6c <LEDDebug(LEDStruct&)+0xbc0>)
    2adc:	4851      	ldr	r0, [pc, #324]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ade:	f7fd ff03 	bl	8e8 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2ae2:	4963      	ldr	r1, [pc, #396]	; (2c70 <LEDDebug(LEDStruct&)+0xbc4>)
    2ae4:	484f      	ldr	r0, [pc, #316]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ae6:	f7fd feff 	bl	8e8 <Print::println(char const*)>
			Serial.println("");
    2aea:	4960      	ldr	r1, [pc, #384]	; (2c6c <LEDDebug(LEDStruct&)+0xbc0>)
    2aec:	484d      	ldr	r0, [pc, #308]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2aee:	f7fd fefb 	bl	8e8 <Print::println(char const*)>
			break;
    2af2:	f7ff bbd4 	b.w	229e <LEDDebug(LEDStruct&)+0x1f2>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2af6:	495f      	ldr	r1, [pc, #380]	; (2c74 <LEDDebug(LEDStruct&)+0xbc8>)
    2af8:	484a      	ldr	r0, [pc, #296]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2afa:	f7fd fef5 	bl	8e8 <Print::println(char const*)>
    2afe:	f7ff baf0 	b.w	20e2 <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2b02:	495d      	ldr	r1, [pc, #372]	; (2c78 <LEDDebug(LEDStruct&)+0xbcc>)
    2b04:	4847      	ldr	r0, [pc, #284]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b06:	f7fd feef 	bl	8e8 <Print::println(char const*)>
    2b0a:	f7ff baea 	b.w	20e2 <LEDDebug(LEDStruct&)+0x36>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2b0e:	495b      	ldr	r1, [pc, #364]	; (2c7c <LEDDebug(LEDStruct&)+0xbd0>)
    2b10:	4844      	ldr	r0, [pc, #272]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b12:	f7fd fee9 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b16:	495a      	ldr	r1, [pc, #360]	; (2c80 <LEDDebug(LEDStruct&)+0xbd4>)
    2b18:	4842      	ldr	r0, [pc, #264]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b1a:	f7fd fed7 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b1e:	2300      	movs	r3, #0
    2b20:	220a      	movs	r2, #10
    2b22:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2b26:	483f      	ldr	r0, [pc, #252]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b28:	f009 fc5e 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2b2c:	493f      	ldr	r1, [pc, #252]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2b2e:	483d      	ldr	r0, [pc, #244]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b30:	f7fd feda 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b34:	4953      	ldr	r1, [pc, #332]	; (2c84 <LEDDebug(LEDStruct&)+0xbd8>)
    2b36:	483b      	ldr	r0, [pc, #236]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b38:	f7fd fec8 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b3c:	2300      	movs	r3, #0
    2b3e:	220a      	movs	r2, #10
    2b40:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2b44:	4837      	ldr	r0, [pc, #220]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b46:	f009 fc4f 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2b4a:	4938      	ldr	r1, [pc, #224]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2b4c:	4835      	ldr	r0, [pc, #212]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b4e:	f7fd fecb 	bl	8e8 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2b52:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2b56:	b1f5      	cbz	r5, 2b96 <LEDDebug(LEDStruct&)+0xaea>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b58:	494b      	ldr	r1, [pc, #300]	; (2c88 <LEDDebug(LEDStruct&)+0xbdc>)
    2b5a:	4832      	ldr	r0, [pc, #200]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b5c:	f7fd feb6 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b60:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2b64:	482f      	ldr	r0, [pc, #188]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b66:	f009 fc7f 	bl	c468 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2b6a:	4930      	ldr	r1, [pc, #192]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2b6c:	482d      	ldr	r0, [pc, #180]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b6e:	f7fd febb 	bl	8e8 <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2b72:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2b76:	3b0f      	subs	r3, #15
    2b78:	2b01      	cmp	r3, #1
    2b7a:	f63f ab90 	bhi.w	229e <LEDDebug(LEDStruct&)+0x1f2>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b7e:	4943      	ldr	r1, [pc, #268]	; (2c8c <LEDDebug(LEDStruct&)+0xbe0>)
    2b80:	4828      	ldr	r0, [pc, #160]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b82:	f7fd fea3 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b86:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2b8a:	e496      	b.n	24ba <LEDDebug(LEDStruct&)+0x40e>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2b8c:	4940      	ldr	r1, [pc, #256]	; (2c90 <LEDDebug(LEDStruct&)+0xbe4>)
    2b8e:	4825      	ldr	r0, [pc, #148]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b90:	f7fd feaa 	bl	8e8 <Print::println(char const*)>
    2b94:	e42c      	b.n	23f0 <LEDDebug(LEDStruct&)+0x344>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b96:	493f      	ldr	r1, [pc, #252]	; (2c94 <LEDDebug(LEDStruct&)+0xbe8>)
    2b98:	4822      	ldr	r0, [pc, #136]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2b9a:	f7fd fe97 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b9e:	462b      	mov	r3, r5
    2ba0:	220a      	movs	r2, #10
    2ba2:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2ba6:	481f      	ldr	r0, [pc, #124]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2ba8:	f009 fc1e 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2bac:	491f      	ldr	r1, [pc, #124]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2bae:	481d      	ldr	r0, [pc, #116]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bb0:	f7fd fe9a 	bl	8e8 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb4:	4938      	ldr	r1, [pc, #224]	; (2c98 <LEDDebug(LEDStruct&)+0xbec>)
    2bb6:	481b      	ldr	r0, [pc, #108]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bb8:	f7fd fe88 	bl	8cc <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bbc:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2bc0:	4818      	ldr	r0, [pc, #96]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bc2:	462b      	mov	r3, r5
    2bc4:	220a      	movs	r2, #10
    2bc6:	f009 fc0f 	bl	c3e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2bca:	4918      	ldr	r1, [pc, #96]	; (2c2c <LEDDebug(LEDStruct&)+0xb80>)
    2bcc:	4815      	ldr	r0, [pc, #84]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bce:	f7fd fe8b 	bl	8e8 <Print::println(char const*)>
    2bd2:	e7c1      	b.n	2b58 <LEDDebug(LEDStruct&)+0xaac>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2bd4:	4931      	ldr	r1, [pc, #196]	; (2c9c <LEDDebug(LEDStruct&)+0xbf0>)
    2bd6:	4813      	ldr	r0, [pc, #76]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bd8:	f7fd fe86 	bl	8e8 <Print::println(char const*)>
    2bdc:	e5fb      	b.n	27d6 <LEDDebug(LEDStruct&)+0x72a>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2bde:	4930      	ldr	r1, [pc, #192]	; (2ca0 <LEDDebug(LEDStruct&)+0xbf4>)
    2be0:	4810      	ldr	r0, [pc, #64]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2be2:	f7fd fe81 	bl	8e8 <Print::println(char const*)>
    2be6:	e796      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2be8:	492e      	ldr	r1, [pc, #184]	; (2ca4 <LEDDebug(LEDStruct&)+0xbf8>)
    2bea:	480e      	ldr	r0, [pc, #56]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bec:	f7fd fe7c 	bl	8e8 <Print::println(char const*)>
    2bf0:	e791      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				case FIRE_RANDOM:		Serial.println("===========FIRE RANDOM============"); break;
    2bf2:	492d      	ldr	r1, [pc, #180]	; (2ca8 <LEDDebug(LEDStruct&)+0xbfc>)
    2bf4:	480b      	ldr	r0, [pc, #44]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2bf6:	f7fd fe77 	bl	8e8 <Print::println(char const*)>
    2bfa:	e78c      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2bfc:	492b      	ldr	r1, [pc, #172]	; (2cac <LEDDebug(LEDStruct&)+0xc00>)
    2bfe:	4809      	ldr	r0, [pc, #36]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2c00:	f7fd fe72 	bl	8e8 <Print::println(char const*)>
    2c04:	e787      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2c06:	492a      	ldr	r1, [pc, #168]	; (2cb0 <LEDDebug(LEDStruct&)+0xc04>)
    2c08:	4806      	ldr	r0, [pc, #24]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2c0a:	f7fd fe6d 	bl	8e8 <Print::println(char const*)>
    2c0e:	e782      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2c10:	4928      	ldr	r1, [pc, #160]	; (2cb4 <LEDDebug(LEDStruct&)+0xc08>)
    2c12:	4804      	ldr	r0, [pc, #16]	; (2c24 <LEDDebug(LEDStruct&)+0xb78>)
    2c14:	f7fd fe68 	bl	8e8 <Print::println(char const*)>
    2c18:	e77d      	b.n	2b16 <LEDDebug(LEDStruct&)+0xa6a>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1a:	4927      	ldr	r1, [pc, #156]	; (2cb8 <LEDDebug(LEDStruct&)+0xc0c>)
    2c1c:	e5d4      	b.n	27c8 <LEDDebug(LEDStruct&)+0x71c>
    2c1e:	bf00      	nop
    2c20:	0000eac0 	.word	0x0000eac0
    2c24:	1fff8768 	.word	0x1fff8768
    2c28:	0000e468 	.word	0x0000e468
    2c2c:	0000e3b0 	.word	0x0000e3b0
    2c30:	0000eae4 	.word	0x0000eae4
    2c34:	0000eafc 	.word	0x0000eafc
    2c38:	0000eb14 	.word	0x0000eb14
    2c3c:	0000eb28 	.word	0x0000eb28
    2c40:	0000eb3c 	.word	0x0000eb3c
    2c44:	0000eb60 	.word	0x0000eb60
    2c48:	0000eb78 	.word	0x0000eb78
    2c4c:	0000eb90 	.word	0x0000eb90
    2c50:	0000eba8 	.word	0x0000eba8
    2c54:	0000ebc0 	.word	0x0000ebc0
    2c58:	0000ebd4 	.word	0x0000ebd4
    2c5c:	0000ebec 	.word	0x0000ebec
    2c60:	0000ec10 	.word	0x0000ec10
    2c64:	0000ec20 	.word	0x0000ec20
    2c68:	0000ec3c 	.word	0x0000ec3c
    2c6c:	0000e4a4 	.word	0x0000e4a4
    2c70:	0000ecd4 	.word	0x0000ecd4
    2c74:	0000e354 	.word	0x0000e354
    2c78:	0000e378 	.word	0x0000e378
    2c7c:	0000e60c 	.word	0x0000e60c
    2c80:	0000e678 	.word	0x0000e678
    2c84:	0000e68c 	.word	0x0000e68c
    2c88:	0000e6c8 	.word	0x0000e6c8
    2c8c:	0000e6d8 	.word	0x0000e6d8
    2c90:	0000e504 	.word	0x0000e504
    2c94:	0000e6a0 	.word	0x0000e6a0
    2c98:	0000e6b4 	.word	0x0000e6b4
    2c9c:	0000e7dc 	.word	0x0000e7dc
    2ca0:	0000e5a0 	.word	0x0000e5a0
    2ca4:	0000e57c 	.word	0x0000e57c
    2ca8:	0000e654 	.word	0x0000e654
    2cac:	0000e630 	.word	0x0000e630
    2cb0:	0000e5e8 	.word	0x0000e5e8
    2cb4:	0000e5c4 	.word	0x0000e5c4
    2cb8:	0000e7d4 	.word	0x0000e7d4

00002cbc <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc0:	b08d      	sub	sp, #52	; 0x34
    2cc2:	2134      	movs	r1, #52	; 0x34
    2cc4:	4605      	mov	r5, r0
    2cc6:	9009      	str	r0, [sp, #36]	; 0x24
    2cc8:	4846      	ldr	r0, [pc, #280]	; (2de4 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2cca:	4c47      	ldr	r4, [pc, #284]	; (2de8 <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    2ccc:	f009 f978 	bl	bfc0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2cd0:	4846      	ldr	r0, [pc, #280]	; (2dec <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2cd2:	f009 fb79 	bl	c3c8 <Print::println()>
    2cd6:	2133      	movs	r1, #51	; 0x33
    2cd8:	4845      	ldr	r0, [pc, #276]	; (2df0 <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    2cda:	f009 f971 	bl	bfc0 <usb_serial_write>
    2cde:	4843      	ldr	r0, [pc, #268]	; (2dec <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2ce0:	f009 fb72 	bl	c3c8 <Print::println()>
    2ce4:	2133      	movs	r1, #51	; 0x33
    2ce6:	4843      	ldr	r0, [pc, #268]	; (2df4 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    2ce8:	f009 f96a 	bl	bfc0 <usb_serial_write>
    2cec:	483f      	ldr	r0, [pc, #252]	; (2dec <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2cee:	f009 fb6b 	bl	c3c8 <Print::println()>
    2cf2:	4841      	ldr	r0, [pc, #260]	; (2df8 <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2cf4:	4a41      	ldr	r2, [pc, #260]	; (2dfc <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    2cf6:	8803      	ldrh	r3, [r0, #0]
    2cf8:	7811      	ldrb	r1, [r2, #0]
    2cfa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2cfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2d02:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d06:	3319      	adds	r3, #25
    2d08:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d0a:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2d0e:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2d10:	fb12 f201 	smulbb	r2, r2, r1
    2d14:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d16:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2d18:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2d1c:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2d20:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2d22:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2d26:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2d28:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2d2a:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2d2c:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2d2e:	d1f8      	bne.n	2d22 <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2d30:	f8d8 3000 	ldr.w	r3, [r8]
    2d34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d36:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2d38:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2d3c:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    2d40:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2d44:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2d48:	f04f 33ff 	mov.w	r3, #4294967295
    2d4c:	9207      	str	r2, [sp, #28]
    2d4e:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2d50:	2400      	movs	r4, #0
    2d52:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2d54:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2d58:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d5a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2d5e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d62:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2d66:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2d68:	b2f9      	uxtb	r1, r7
    2d6a:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2d6e:	9104      	str	r1, [sp, #16]
    2d70:	b2e9      	uxtb	r1, r5
    2d72:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2d74:	fa5f f18c 	uxtb.w	r1, ip
    2d78:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2d7a:	9908      	ldr	r1, [sp, #32]
    2d7c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2d7e:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2d80:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d84:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2d88:	d80c      	bhi.n	2da4 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2d8a:	9906      	ldr	r1, [sp, #24]
    2d8c:	458c      	cmp	ip, r1
    2d8e:	dc07      	bgt.n	2da0 <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    2d90:	290f      	cmp	r1, #15
    2d92:	d005      	beq.n	2da0 <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    2d94:	3101      	adds	r1, #1
    2d96:	b2c9      	uxtb	r1, r1
    2d98:	428b      	cmp	r3, r1
    2d9a:	9103      	str	r1, [sp, #12]
    2d9c:	bf38      	it	cc
    2d9e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2da0:	b259      	sxtb	r1, r3
    2da2:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2da4:	a90b      	add	r1, sp, #44	; 0x2c
    2da6:	9100      	str	r1, [sp, #0]
    2da8:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2daa:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2dae:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2db2:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2db6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    2dba:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    2dbe:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    2dc2:	f007 f859 	bl	9e78 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    2dc6:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dc8:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    2dcc:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2dd0:	46ca      	mov	sl, r9
    2dd2:	d1bf      	bne.n	2d54 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2dd6:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    2dda:	f7fe fe59 	bl	1a90 <print_palette(unsigned char)>
	}
}
    2dde:	b00d      	add	sp, #52	; 0x34
    2de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2de4:	0000ed1c 	.word	0x0000ed1c
    2de8:	0000f898 	.word	0x0000f898
    2dec:	1fff8768 	.word	0x1fff8768
    2df0:	0000ed54 	.word	0x0000ed54
    2df4:	0000ed88 	.word	0x0000ed88
    2df8:	1fff875e 	.word	0x1fff875e
    2dfc:	1fff8750 	.word	0x1fff8750

00002e00 <juggle_update(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2e00:	4b24      	ldr	r3, [pc, #144]	; (2e94 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2e02:	4a25      	ldr	r2, [pc, #148]	; (2e98 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2e04:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2e06:	2100      	movs	r1, #0
    2e08:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2e0a:	2b07      	cmp	r3, #7
    2e0c:	d809      	bhi.n	2e22 <juggle_update(LEDStruct&)+0x22>
    2e0e:	e8df f003 	tbb	[pc, r3]
    2e12:	1c13      	.short	0x1c13
    2e14:	04342e25 	.word	0x04342e25
    2e18:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2e1a:	4b20      	ldr	r3, [pc, #128]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e1c:	881b      	ldrh	r3, [r3, #0]
    2e1e:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e22:	f7ff b943 	b.w	20ac <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2e26:	4b1d      	ldr	r3, [pc, #116]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e28:	881b      	ldrh	r3, [r3, #0]
    2e2a:	3300      	adds	r3, #0
    2e2c:	bf18      	it	ne
    2e2e:	2301      	movne	r3, #1
    2e30:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    2e34:	f7ff b93a 	b.w	20ac <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2e38:	4b18      	ldr	r3, [pc, #96]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e3a:	881b      	ldrh	r3, [r3, #0]
    2e3c:	3300      	adds	r3, #0
    2e3e:	bf18      	it	ne
    2e40:	2301      	movne	r3, #1
    2e42:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e46:	f7ff b931 	b.w	20ac <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2e4a:	4b14      	ldr	r3, [pc, #80]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e4c:	881b      	ldrh	r3, [r3, #0]
    2e4e:	3300      	adds	r3, #0
    2e50:	bf18      	it	ne
    2e52:	2301      	movne	r3, #1
    2e54:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e58:	f7ff b928 	b.w	20ac <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    2e5c:	4b0f      	ldr	r3, [pc, #60]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e5e:	881b      	ldrh	r3, [r3, #0]
    2e60:	3300      	adds	r3, #0
    2e62:	bf18      	it	ne
    2e64:	2301      	movne	r3, #1
    2e66:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e6a:	f7ff b91f 	b.w	20ac <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2e6e:	4b0b      	ldr	r3, [pc, #44]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e70:	881b      	ldrh	r3, [r3, #0]
    2e72:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e76:	f7ff b919 	b.w	20ac <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2e7a:	4b08      	ldr	r3, [pc, #32]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e7c:	881b      	ldrh	r3, [r3, #0]
    2e7e:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e82:	f7ff b913 	b.w	20ac <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2e86:	4b05      	ldr	r3, [pc, #20]	; (2e9c <juggle_update(LEDStruct&)+0x9c>)
    2e88:	881b      	ldrh	r3, [r3, #0]
    2e8a:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e8e:	f7ff b90d 	b.w	20ac <LEDDebug(LEDStruct&)>
    2e92:	bf00      	nop
    2e94:	1fff9e2c 	.word	0x1fff9e2c
    2e98:	1fff95dd 	.word	0x1fff95dd
    2e9c:	1fff9e24 	.word	0x1fff9e24

00002ea0 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2ea4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2ea8:	b089      	sub	sp, #36	; 0x24
    2eaa:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2eac:	2b00      	cmp	r3, #0
    2eae:	f040 8097 	bne.w	2fe0 <juggle(LEDStruct&)+0x140>
    2eb2:	4ecd      	ldr	r6, [pc, #820]	; (31e8 <juggle(LEDStruct&)+0x348>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2eb4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    2eb8:	8833      	ldrh	r3, [r6, #0]
    2eba:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2ebe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2ec2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2ec6:	3019      	adds	r0, #25
    2ec8:	b280      	uxth	r0, r0
    2eca:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2ece:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    2ed2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2ed6:	3519      	adds	r5, #25
    2ed8:	b2ad      	uxth	r5, r5
    2eda:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    2ede:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2ee2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2ee6:	3319      	adds	r3, #25
    2ee8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2eec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2ef0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2ef4:	3319      	adds	r3, #25
    2ef6:	b29b      	uxth	r3, r3
    2ef8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2efc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f00:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2f04:	3119      	adds	r1, #25
    2f06:	b289      	uxth	r1, r1
    2f08:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2f0c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2f10:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f14:	3219      	adds	r2, #25
    2f16:	b292      	uxth	r2, r2
    2f18:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2f1c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2f20:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2f24:	f10e 0e19 	add.w	lr, lr, #25
    2f28:	fa1f fe8e 	uxth.w	lr, lr
    2f2c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    2f30:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    2f34:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    2f38:	f10c 0c19 	add.w	ip, ip, #25
    2f3c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f40:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f44:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
    2f48:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f4c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2f50:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f54:	b2ff      	uxtb	r7, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f56:	f503 5858 	add.w	r8, r3, #13824	; 0x3600
    2f5a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2f5e:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2f60:	b2c9      	uxtb	r1, r1
    2f62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	leds.juggle_fade		 = jf;
    2f66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f6a:	123a      	asrs	r2, r7, #8
    2f6c:	f108 0819 	add.w	r8, r8, #25
	leds.juggle_beat		 = jb;
    2f70:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f72:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.juggle_fade		 = jf;
    2f76:	1119      	asrs	r1, r3, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f78:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f7c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f80:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2f82:	f3ce 13c0 	ubfx	r3, lr, #7, #1
    2f86:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    2f8a:	f3c0 1ec0 	ubfx	lr, r0, #7, #1
    2f8e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2f92:	f101 0020 	add.w	r0, r1, #32
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f96:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    2f9a:	eb08 2218 	add.w	r2, r8, r8, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2f9e:	f3c5 19c0 	ubfx	r9, r5, #7, #1
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2fa2:	2101      	movs	r1, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2fa4:	f107 0508 	add.w	r5, r7, #8
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2fa8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2fac:	1c5f      	adds	r7, r3, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2fae:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2fb2:	f3cc 13c0 	ubfx	r3, ip, #7, #1
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    2fb6:	200f      	movs	r0, #15

	leds.juggle_one_dir		 = jod;
    2fb8:	f884 e235 	strb.w	lr, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    2fbc:	f884 9236 	strb.w	r9, [r4, #566]	; 0x236
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2fc0:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2fc4:	f884 7233 	strb.w	r7, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fc8:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2fcc:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2fd0:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2fd4:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2fd8:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    2fdc:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    2fe0:	4b82      	ldr	r3, [pc, #520]	; (31ec <juggle(LEDStruct&)+0x34c>)
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	2b00      	cmp	r3, #0
    2fe6:	f040 8366 	bne.w	36b6 <juggle(LEDStruct&)+0x816>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    2fea:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    2fee:	b113      	cbz	r3, 2ff6 <juggle(LEDStruct&)+0x156>
    2ff0:	2300      	movs	r3, #0
    2ff2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    2ff6:	2196      	movs	r1, #150	; 0x96
    2ff8:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    2ffc:	4620      	mov	r0, r4
    2ffe:	f006 ffcd 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3002:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    3006:	2900      	cmp	r1, #0
    3008:	f040 80dd 	bne.w	31c6 <juggle(LEDStruct&)+0x326>
		if (leds.juggle_phased) {
    300c:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3010:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    3014:	2f00      	cmp	r7, #0
    3016:	f000 8198 	beq.w	334a <juggle(LEDStruct&)+0x4aa>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    301a:	2b00      	cmp	r3, #0
    301c:	f000 825f 	beq.w	34de <juggle(LEDStruct&)+0x63e>
    3020:	4873      	ldr	r0, [pc, #460]	; (31f0 <juggle(LEDStruct&)+0x350>)
    3022:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3026:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 31f4 <juggle(LEDStruct&)+0x354>
    302a:	9003      	str	r0, [sp, #12]
    302c:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 31f8 <juggle(LEDStruct&)+0x358>
    3030:	460f      	mov	r7, r1
    3032:	f10d 0a1c 	add.w	sl, sp, #28
    3036:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    303a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    303e:	e05d      	b.n	30fc <juggle(LEDStruct&)+0x25c>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3040:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3044:	443b      	add	r3, r7
    3046:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3048:	f8d9 1000 	ldr.w	r1, [r9]
    304c:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    304e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3050:	9904      	ldr	r1, [sp, #16]
    3052:	bf98      	it	ls
    3054:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3056:	f44f 708c 	mov.w	r0, #280	; 0x118
    305a:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    305e:	bf98      	it	ls
    3060:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3062:	fb03 f301 	mul.w	r3, r3, r1
    3066:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3068:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    306a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    306e:	d503      	bpl.n	3078 <juggle(LEDStruct&)+0x1d8>
    3070:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3074:	3107      	adds	r1, #7
    3076:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3078:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    307a:	9e03      	ldr	r6, [sp, #12]
    307c:	5c36      	ldrb	r6, [r6, r0]
    307e:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3082:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3086:	fb06 0101 	mla	r1, r6, r1, r0
    308a:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    308c:	041e      	lsls	r6, r3, #16
    308e:	bf48      	it	mi
    3090:	4249      	negmi	r1, r1
    3092:	b20e      	sxth	r6, r1
    3094:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3098:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    309c:	9100      	str	r1, [sp, #0]
    309e:	4650      	mov	r0, sl
    30a0:	4641      	mov	r1, r8
    30a2:	f006 ffdb 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    30a6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    30aa:	2296      	movs	r2, #150	; 0x96
    30ac:	b29b      	uxth	r3, r3
    30ae:	fb02 f303 	mul.w	r3, r2, r3
    30b2:	0c1b      	lsrs	r3, r3, #16
    30b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30b8:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    30ba:	5ce2      	ldrb	r2, [r4, r3]
    30bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    30c0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    30c4:	54e2      	strb	r2, [r4, r3]
    30c6:	f89d 301d 	ldrb.w	r3, [sp, #29]
    30ca:	784a      	ldrb	r2, [r1, #1]
    30cc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    30d0:	704a      	strb	r2, [r1, #1]
    30d2:	788b      	ldrb	r3, [r1, #2]
    30d4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    30d8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    30dc:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    30de:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    30e2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    30e6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    30ea:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    30ec:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    30ee:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    30f0:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    30f2:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    30f4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    30f8:	f240 81f1 	bls.w	34de <juggle(LEDStruct&)+0x63e>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    30fc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3100:	2900      	cmp	r1, #0
    3102:	d19d      	bne.n	3040 <juggle(LEDStruct&)+0x1a0>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3104:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3108:	443b      	add	r3, r7
    310a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    310c:	f8d9 1000 	ldr.w	r1, [r9]
    3110:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3112:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3114:	9905      	ldr	r1, [sp, #20]
    3116:	bf98      	it	ls
    3118:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    311a:	f44f 708c 	mov.w	r0, #280	; 0x118
    311e:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3122:	bf98      	it	ls
    3124:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3126:	fb03 f301 	mul.w	r3, r3, r1
    312a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    312c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    312e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3132:	d503      	bpl.n	313c <juggle(LEDStruct&)+0x29c>
    3134:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3138:	3107      	adds	r1, #7
    313a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    313c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    313e:	9e03      	ldr	r6, [sp, #12]
    3140:	5c36      	ldrb	r6, [r6, r0]
    3142:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3146:	f3c1 0146 	ubfx	r1, r1, #1, #7
    314a:	fb06 0101 	mla	r1, r6, r1, r0
    314e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3150:	041e      	lsls	r6, r3, #16
    3152:	bf48      	it	mi
    3154:	4249      	negmi	r1, r1
    3156:	b20e      	sxth	r6, r1
    3158:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    315c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3160:	9100      	str	r1, [sp, #0]
    3162:	4650      	mov	r0, sl
    3164:	4641      	mov	r1, r8
    3166:	f006 ff79 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    316a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    316e:	b29b      	uxth	r3, r3
    3170:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3174:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3178:	0c1b      	lsrs	r3, r3, #16
    317a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    317e:	18e1      	adds	r1, r4, r3
    3180:	5ce2      	ldrb	r2, [r4, r3]
    3182:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3186:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    318a:	54e2      	strb	r2, [r4, r3]
    318c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3190:	784a      	ldrb	r2, [r1, #1]
    3192:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3196:	704a      	strb	r2, [r1, #1]
    3198:	788b      	ldrb	r3, [r1, #2]
    319a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    319e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    31a2:	708b      	strb	r3, [r1, #2]
    31a4:	4622      	mov	r2, r4
    31a6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31a8:	7819      	ldrb	r1, [r3, #0]
    31aa:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    31ae:	7859      	ldrb	r1, [r3, #1]
    31b0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    31b4:	7899      	ldrb	r1, [r3, #2]
    31b6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    31ba:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    31bc:	429d      	cmp	r5, r3
    31be:	f1a2 0203 	sub.w	r2, r2, #3
    31c2:	d1f1      	bne.n	31a8 <juggle(LEDStruct&)+0x308>
    31c4:	e78b      	b.n	30de <juggle(LEDStruct&)+0x23e>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    31c6:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    31ca:	2e00      	cmp	r6, #0
    31cc:	d062      	beq.n	3294 <juggle(LEDStruct&)+0x3f4>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    31ce:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    31d2:	2b00      	cmp	r3, #0
    31d4:	f000 8183 	beq.w	34de <juggle(LEDStruct&)+0x63e>
    31d8:	2500      	movs	r5, #0
    31da:	f10d 0a1c 	add.w	sl, sp, #28
    31de:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    31e2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    31e6:	e043      	b.n	3270 <juggle(LEDStruct&)+0x3d0>
    31e8:	1fff875e 	.word	0x1fff875e
    31ec:	1fff95dd 	.word	0x1fff95dd
    31f0:	0000fa58 	.word	0x0000fa58
    31f4:	1fffa8c0 	.word	0x1fffa8c0
    31f8:	0000f2c8 	.word	0x0000f2c8
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    31fc:	fb06 f305 	mul.w	r3, r6, r5
    3200:	2900      	cmp	r1, #0
    3202:	f000 81a6 	beq.w	3552 <juggle(LEDStruct&)+0x6b2>
    3206:	2295      	movs	r2, #149	; 0x95
    3208:	2100      	movs	r1, #0
    320a:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    320e:	f7fd f93f 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3212:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3216:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    321a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    321e:	9100      	str	r1, [sp, #0]
    3220:	4607      	mov	r7, r0
    3222:	4641      	mov	r1, r8
    3224:	4650      	mov	r0, sl
    3226:	f006 ff19 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    322a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    322e:	18e1      	adds	r1, r4, r3
    3230:	5ce2      	ldrb	r2, [r4, r3]
    3232:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3236:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    323a:	54e2      	strb	r2, [r4, r3]
    323c:	784a      	ldrb	r2, [r1, #1]
    323e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3242:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3246:	704a      	strb	r2, [r1, #1]
    3248:	788b      	ldrb	r3, [r1, #2]
    324a:	f89d 201e 	ldrb.w	r2, [sp, #30]
    324e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3252:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3254:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3258:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    325c:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3260:	3501      	adds	r5, #1
    3262:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3264:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3266:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3268:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    326c:	f240 8137 	bls.w	34de <juggle(LEDStruct&)+0x63e>
				if (leds.this_dir) {
    3270:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3274:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    3278:	2b00      	cmp	r3, #0
    327a:	d1bf      	bne.n	31fc <juggle(LEDStruct&)+0x35c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    327c:	2900      	cmp	r1, #0
    327e:	f000 81df 	beq.w	3640 <juggle(LEDStruct&)+0x7a0>
    3282:	4619      	mov	r1, r3
    3284:	2295      	movs	r2, #149	; 0x95
    3286:	fb06 f305 	mul.w	r3, r6, r5
    328a:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    328e:	f7fd f941 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    3292:	e7be      	b.n	3212 <juggle(LEDStruct&)+0x372>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3294:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3298:	2900      	cmp	r1, #0
    329a:	f000 8120 	beq.w	34de <juggle(LEDStruct&)+0x63e>
    329e:	f10d 0a1c 	add.w	sl, sp, #28
    32a2:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    32a6:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    32aa:	e03c      	b.n	3326 <juggle(LEDStruct&)+0x486>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32ac:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    32b0:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    32b4:	4431      	add	r1, r6
    32b6:	2b00      	cmp	r3, #0
    32b8:	f000 8114 	beq.w	34e4 <juggle(LEDStruct&)+0x644>
    32bc:	2300      	movs	r3, #0
    32be:	4408      	add	r0, r1
    32c0:	2295      	movs	r2, #149	; 0x95
    32c2:	4619      	mov	r1, r3
    32c4:	f7fd f8e4 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32c8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    32cc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    32d0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32d4:	9100      	str	r1, [sp, #0]
    32d6:	4607      	mov	r7, r0
    32d8:	4641      	mov	r1, r8
    32da:	4650      	mov	r0, sl
    32dc:	f006 febe 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    32e0:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    32e4:	18e1      	adds	r1, r4, r3
    32e6:	5ce2      	ldrb	r2, [r4, r3]
    32e8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    32ec:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    32f0:	54e2      	strb	r2, [r4, r3]
    32f2:	784a      	ldrb	r2, [r1, #1]
    32f4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    32f8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    32fc:	704a      	strb	r2, [r1, #1]
    32fe:	788b      	ldrb	r3, [r1, #2]
    3300:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3304:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3308:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    330a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    330e:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3312:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3316:	3601      	adds	r6, #1
    3318:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    331a:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    331c:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    331e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3322:	f240 80dc 	bls.w	34de <juggle(LEDStruct&)+0x63e>
				if (leds.this_dir) {
    3326:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    332a:	2b00      	cmp	r3, #0
    332c:	d1be      	bne.n	32ac <juggle(LEDStruct&)+0x40c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    332e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3332:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3336:	4431      	add	r1, r6
    3338:	4408      	add	r0, r1
    333a:	2a00      	cmp	r2, #0
    333c:	f000 8142 	beq.w	35c4 <juggle(LEDStruct&)+0x724>
    3340:	4619      	mov	r1, r3
    3342:	2295      	movs	r2, #149	; 0x95
    3344:	f7fd f8e6 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    3348:	e7be      	b.n	32c8 <juggle(LEDStruct&)+0x428>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    334a:	2b00      	cmp	r3, #0
    334c:	f000 80c7 	beq.w	34de <juggle(LEDStruct&)+0x63e>
    3350:	4bb8      	ldr	r3, [pc, #736]	; (3634 <juggle(LEDStruct&)+0x794>)
    3352:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3356:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3638 <juggle(LEDStruct&)+0x798>
    335a:	9303      	str	r3, [sp, #12]
    335c:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 363c <juggle(LEDStruct&)+0x79c>
    3360:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3364:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3368:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    336c:	e057      	b.n	341e <juggle(LEDStruct&)+0x57e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    336e:	f8d9 3000 	ldr.w	r3, [r9]
    3372:	9306      	str	r3, [sp, #24]
	return ret;
    3374:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3376:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    337a:	fb0a f303 	mul.w	r3, sl, r3
    337e:	0209      	lsls	r1, r1, #8
    3380:	fb03 f301 	mul.w	r3, r3, r1
    3384:	0379      	lsls	r1, r7, #13
    3386:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    338a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    338c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    338e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3392:	d503      	bpl.n	339c <juggle(LEDStruct&)+0x4fc>
    3394:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3398:	3307      	adds	r3, #7
    339a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    339c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    339e:	9e03      	ldr	r6, [sp, #12]
    33a0:	5c36      	ldrb	r6, [r6, r0]
    33a2:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    33a6:	f3c3 0346 	ubfx	r3, r3, #1, #7
    33aa:	fb06 0303 	mla	r3, r6, r3, r0
    33ae:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    33b0:	040e      	lsls	r6, r1, #16
    33b2:	bf48      	it	mi
    33b4:	425b      	negmi	r3, r3
    33b6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    33ba:	b21e      	sxth	r6, r3
    33bc:	a805      	add	r0, sp, #20
    33be:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33c2:	9100      	str	r1, [sp, #0]
    33c4:	4641      	mov	r1, r8
    33c6:	f006 fe49 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33ca:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    33ce:	2296      	movs	r2, #150	; 0x96
    33d0:	b29b      	uxth	r3, r3
    33d2:	fb02 f303 	mul.w	r3, r2, r3
    33d6:	0c1b      	lsrs	r3, r3, #16
    33d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33dc:	18e1      	adds	r1, r4, r3
    33de:	5ce2      	ldrb	r2, [r4, r3]
    33e0:	f89d 0014 	ldrb.w	r0, [sp, #20]
    33e4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    33e8:	54e2      	strb	r2, [r4, r3]
    33ea:	f89d 3015 	ldrb.w	r3, [sp, #21]
    33ee:	784a      	ldrb	r2, [r1, #1]
    33f0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    33f4:	704a      	strb	r2, [r1, #1]
    33f6:	788b      	ldrb	r3, [r1, #2]
    33f8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    33fc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3400:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3402:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3406:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    340a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    340e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3410:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3412:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3414:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3416:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3418:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    341c:	d95f      	bls.n	34de <juggle(LEDStruct&)+0x63e>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    341e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3422:	2b00      	cmp	r3, #0
    3424:	d1a3      	bne.n	336e <juggle(LEDStruct&)+0x4ce>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3426:	f8d9 3000 	ldr.w	r3, [r9]
    342a:	9307      	str	r3, [sp, #28]
	return ret;
    342c:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    342e:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3432:	fb0a f101 	mul.w	r1, sl, r1
    3436:	021b      	lsls	r3, r3, #8
    3438:	fb03 f301 	mul.w	r3, r3, r1
    343c:	0379      	lsls	r1, r7, #13
    343e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    3442:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3444:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3446:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    344a:	d503      	bpl.n	3454 <juggle(LEDStruct&)+0x5b4>
    344c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3450:	3307      	adds	r3, #7
    3452:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3454:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3456:	9e03      	ldr	r6, [sp, #12]
    3458:	5c36      	ldrb	r6, [r6, r0]
    345a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    345e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3462:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3466:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3468:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    346a:	bf48      	it	mi
    346c:	425b      	negmi	r3, r3
    346e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3472:	b21e      	sxth	r6, r3
    3474:	a805      	add	r0, sp, #20
    3476:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    347a:	9100      	str	r1, [sp, #0]
    347c:	4641      	mov	r1, r8
    347e:	f006 fded 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3482:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3486:	b29b      	uxth	r3, r3
    3488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    348c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3490:	0c1b      	lsrs	r3, r3, #16
    3492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3496:	18e1      	adds	r1, r4, r3
    3498:	5ce2      	ldrb	r2, [r4, r3]
    349a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    349e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34a2:	54e2      	strb	r2, [r4, r3]
    34a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    34a8:	784a      	ldrb	r2, [r1, #1]
    34aa:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34ae:	704a      	strb	r2, [r1, #1]
    34b0:	788b      	ldrb	r3, [r1, #2]
    34b2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    34b6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34ba:	708b      	strb	r3, [r1, #2]
    34bc:	4622      	mov	r2, r4
    34be:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    34c0:	7819      	ldrb	r1, [r3, #0]
    34c2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    34c6:	7859      	ldrb	r1, [r3, #1]
    34c8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    34cc:	7899      	ldrb	r1, [r3, #2]
    34ce:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    34d2:	3303      	adds	r3, #3
    34d4:	42ab      	cmp	r3, r5
    34d6:	f1a2 0203 	sub.w	r2, r2, #3
    34da:	d1f1      	bne.n	34c0 <juggle(LEDStruct&)+0x620>
    34dc:	e791      	b.n	3402 <juggle(LEDStruct&)+0x562>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    34de:	b009      	add	sp, #36	; 0x24
    34e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    34e4:	4408      	add	r0, r1
    34e6:	224a      	movs	r2, #74	; 0x4a
    34e8:	4619      	mov	r1, r3
    34ea:	f7fc ffd1 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]>
    34ee:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    34f2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34f6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34fa:	9100      	str	r1, [sp, #0]
    34fc:	4607      	mov	r7, r0
    34fe:	4641      	mov	r1, r8
    3500:	4650      	mov	r0, sl
    3502:	f006 fdab 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3506:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    350a:	18e1      	adds	r1, r4, r3
    350c:	5ce2      	ldrb	r2, [r4, r3]
    350e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3512:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3516:	54e2      	strb	r2, [r4, r3]
    3518:	f89d 301d 	ldrb.w	r3, [sp, #29]
    351c:	784a      	ldrb	r2, [r1, #1]
    351e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3522:	704a      	strb	r2, [r1, #1]
    3524:	788b      	ldrb	r3, [r1, #2]
    3526:	f89d 201e 	ldrb.w	r2, [sp, #30]
    352a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    352e:	708b      	strb	r3, [r1, #2]
    3530:	4622      	mov	r2, r4
    3532:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3534:	7819      	ldrb	r1, [r3, #0]
    3536:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    353a:	7859      	ldrb	r1, [r3, #1]
    353c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3540:	7899      	ldrb	r1, [r3, #2]
    3542:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3546:	3303      	adds	r3, #3
    3548:	42ab      	cmp	r3, r5
    354a:	f1a2 0203 	sub.w	r2, r2, #3
    354e:	d1f1      	bne.n	3534 <juggle(LEDStruct&)+0x694>
    3550:	e6db      	b.n	330a <juggle(LEDStruct&)+0x46a>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3552:	224a      	movs	r2, #74	; 0x4a
    3554:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3558:	f7fc ff9a 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.32]>
    355c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3560:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3564:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3568:	9100      	str	r1, [sp, #0]
    356a:	4607      	mov	r7, r0
    356c:	4641      	mov	r1, r8
    356e:	4650      	mov	r0, sl
    3570:	f006 fd74 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3574:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3578:	18e1      	adds	r1, r4, r3
    357a:	5ce2      	ldrb	r2, [r4, r3]
    357c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3580:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3584:	54e2      	strb	r2, [r4, r3]
    3586:	f89d 301d 	ldrb.w	r3, [sp, #29]
    358a:	784a      	ldrb	r2, [r1, #1]
    358c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3590:	704a      	strb	r2, [r1, #1]
    3592:	788b      	ldrb	r3, [r1, #2]
    3594:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3598:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    359c:	708b      	strb	r3, [r1, #2]
    359e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    35a2:	4623      	mov	r3, r4
    35a4:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35a6:	7819      	ldrb	r1, [r3, #0]
    35a8:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35ac:	7859      	ldrb	r1, [r3, #1]
    35ae:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35b2:	7899      	ldrb	r1, [r3, #2]
    35b4:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35b8:	3303      	adds	r3, #3
    35ba:	4283      	cmp	r3, r0
    35bc:	f1a2 0203 	sub.w	r2, r2, #3
    35c0:	d1f1      	bne.n	35a6 <juggle(LEDStruct&)+0x706>
    35c2:	e647      	b.n	3254 <juggle(LEDStruct&)+0x3b4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    35c4:	4613      	mov	r3, r2
    35c6:	4611      	mov	r1, r2
    35c8:	224a      	movs	r2, #74	; 0x4a
    35ca:	f7fc ffa3 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    35ce:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    35d2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35d6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35da:	9100      	str	r1, [sp, #0]
    35dc:	4607      	mov	r7, r0
    35de:	4641      	mov	r1, r8
    35e0:	4650      	mov	r0, sl
    35e2:	f006 fd3b 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35e6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    35ea:	18e1      	adds	r1, r4, r3
    35ec:	5ce2      	ldrb	r2, [r4, r3]
    35ee:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35f2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35f6:	54e2      	strb	r2, [r4, r3]
    35f8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35fc:	784a      	ldrb	r2, [r1, #1]
    35fe:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3602:	704a      	strb	r2, [r1, #1]
    3604:	788b      	ldrb	r3, [r1, #2]
    3606:	f89d 201e 	ldrb.w	r2, [sp, #30]
    360a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    360e:	708b      	strb	r3, [r1, #2]
    3610:	4622      	mov	r2, r4
    3612:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3614:	7819      	ldrb	r1, [r3, #0]
    3616:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    361a:	7859      	ldrb	r1, [r3, #1]
    361c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3620:	7899      	ldrb	r1, [r3, #2]
    3622:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3626:	3303      	adds	r3, #3
    3628:	42ab      	cmp	r3, r5
    362a:	f1a2 0203 	sub.w	r2, r2, #3
    362e:	d1f1      	bne.n	3614 <juggle(LEDStruct&)+0x774>
    3630:	e66b      	b.n	330a <juggle(LEDStruct&)+0x46a>
    3632:	bf00      	nop
    3634:	0000fa58 	.word	0x0000fa58
    3638:	1fffa8c0 	.word	0x1fffa8c0
    363c:	0000f2c8 	.word	0x0000f2c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3640:	fb06 f305 	mul.w	r3, r6, r5
    3644:	224a      	movs	r2, #74	; 0x4a
    3646:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    364a:	f7fc ff63 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    364e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3652:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3656:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    365a:	9100      	str	r1, [sp, #0]
    365c:	4607      	mov	r7, r0
    365e:	4641      	mov	r1, r8
    3660:	4650      	mov	r0, sl
    3662:	f006 fcfb 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3666:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    366a:	18e1      	adds	r1, r4, r3
    366c:	5ce2      	ldrb	r2, [r4, r3]
    366e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3672:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3676:	54e2      	strb	r2, [r4, r3]
    3678:	f89d 301d 	ldrb.w	r3, [sp, #29]
    367c:	784a      	ldrb	r2, [r1, #1]
    367e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3682:	704a      	strb	r2, [r1, #1]
    3684:	788b      	ldrb	r3, [r1, #2]
    3686:	f89d 201e 	ldrb.w	r2, [sp, #30]
    368a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    368e:	708b      	strb	r3, [r1, #2]
    3690:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3694:	4623      	mov	r3, r4
    3696:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3698:	7819      	ldrb	r1, [r3, #0]
    369a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    369e:	7859      	ldrb	r1, [r3, #1]
    36a0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36a4:	7899      	ldrb	r1, [r3, #2]
    36a6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36aa:	3303      	adds	r3, #3
    36ac:	4283      	cmp	r3, r0
    36ae:	f1a2 0203 	sub.w	r2, r2, #3
    36b2:	d1f1      	bne.n	3698 <juggle(LEDStruct&)+0x7f8>
    36b4:	e5ce      	b.n	3254 <juggle(LEDStruct&)+0x3b4>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    36b6:	4620      	mov	r0, r4
    36b8:	f7ff fba2 	bl	2e00 <juggle_update(LEDStruct&)>
    36bc:	e495      	b.n	2fea <juggle(LEDStruct&)+0x14a>
    36be:	bf00      	nop

000036c0 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    36c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    36c4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    36c8:	b08d      	sub	sp, #52	; 0x34
    36ca:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    36cc:	2b00      	cmp	r3, #0
    36ce:	f040 8097 	bne.w	3800 <juggle_half(LEDStruct&)+0x140>
    36d2:	4ec3      	ldr	r6, [pc, #780]	; (39e0 <juggle_half(LEDStruct&)+0x320>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    36d4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    36d8:	8833      	ldrh	r3, [r6, #0]
    36da:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    36de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    36e2:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    36e6:	3019      	adds	r0, #25
    36e8:	b280      	uxth	r0, r0
    36ea:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    36ee:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    36f2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    36f6:	3519      	adds	r5, #25
    36f8:	b2ad      	uxth	r5, r5
    36fa:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    36fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3702:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3706:	3319      	adds	r3, #25
    3708:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    370c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3710:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3714:	3319      	adds	r3, #25
    3716:	b29b      	uxth	r3, r3
    3718:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    371c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3720:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3724:	3119      	adds	r1, #25
    3726:	b289      	uxth	r1, r1
    3728:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    372c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3730:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3734:	3219      	adds	r2, #25
    3736:	b292      	uxth	r2, r2
    3738:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    373c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3740:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3744:	f10e 0e19 	add.w	lr, lr, #25
    3748:	fa1f fe8e 	uxth.w	lr, lr
    374c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3750:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3754:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3758:	f10c 0c19 	add.w	ip, ip, #25
    375c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3760:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3764:	eb0c 234c 	add.w	r3, ip, ip, lsl #9
    3768:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    376c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3770:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3774:	b2ff      	uxtb	r7, r7
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3776:	f503 5858 	add.w	r8, r3, #13824	; 0x3600
    377a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    377e:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3780:	b2c9      	uxtb	r1, r1
    3782:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	leds.juggle_fade		 = jf;
    3786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    378a:	123a      	asrs	r2, r7, #8
    378c:	f108 0819 	add.w	r8, r8, #25
	leds.juggle_beat		 = jb;
    3790:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3792:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.juggle_fade		 = jf;
    3796:	1119      	asrs	r1, r3, #4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3798:	fa1f f888 	uxth.w	r8, r8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    379c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37a0:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    37a2:	f3ce 13c0 	ubfx	r3, lr, #7, #1
    37a6:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    37aa:	f3c0 1ec0 	ubfx	lr, r0, #7, #1
    37ae:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37b2:	f101 0020 	add.w	r0, r1, #32
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    37b6:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    37ba:	eb08 2218 	add.w	r2, r8, r8, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    37be:	f3c5 19c0 	ubfx	r9, r5, #7, #1
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    37c2:	2101      	movs	r1, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    37c4:	f107 0508 	add.w	r5, r7, #8
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    37c8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    37cc:	1c5f      	adds	r7, r3, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    37ce:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    37d2:	f3cc 13c0 	ubfx	r3, ip, #7, #1
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    37d6:	200f      	movs	r0, #15

	leds.juggle_one_dir		 = jod;
    37d8:	f884 e235 	strb.w	lr, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    37dc:	f884 9236 	strb.w	r9, [r4, #566]	; 0x236
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    37e0:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    37e4:	f884 7233 	strb.w	r7, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    37e8:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    37ec:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    37f0:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    37f4:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    37f8:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    37fc:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3800:	4b78      	ldr	r3, [pc, #480]	; (39e4 <juggle_half(LEDStruct&)+0x324>)
    3802:	781b      	ldrb	r3, [r3, #0]
    3804:	2b00      	cmp	r3, #0
    3806:	f040 8291 	bne.w	3d2c <juggle_half(LEDStruct&)+0x66c>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    380a:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    380e:	b113      	cbz	r3, 3816 <juggle_half(LEDStruct&)+0x156>
    3810:	2300      	movs	r3, #0
    3812:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3816:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    381a:	2196      	movs	r1, #150	; 0x96
    381c:	4620      	mov	r0, r4
    381e:	f006 fbbd 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3822:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3826:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    382a:	2f00      	cmp	r7, #0
    382c:	f040 819d 	bne.w	3b6a <juggle_half(LEDStruct&)+0x4aa>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3830:	2a00      	cmp	r2, #0
    3832:	f000 834a 	beq.w	3eca <juggle_half(LEDStruct&)+0x80a>
    3836:	4b6c      	ldr	r3, [pc, #432]	; (39e8 <juggle_half(LEDStruct&)+0x328>)
    3838:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 39ec <juggle_half(LEDStruct&)+0x32c>
    383c:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 39f0 <juggle_half(LEDStruct&)+0x330>
    3840:	9303      	str	r3, [sp, #12]
    3842:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3846:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    384a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    384e:	b2be      	uxth	r6, r7
    3850:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3852:	f8db 2000 	ldr.w	r2, [fp]
    3856:	9207      	str	r2, [sp, #28]
    3858:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    385a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    385c:	9a07      	ldr	r2, [sp, #28]
    385e:	bf98      	it	ls
    3860:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3862:	f44f 718c 	mov.w	r1, #280	; 0x118
    3866:	bf98      	it	ls
    3868:	b29b      	uxthls	r3, r3
    386a:	fb01 f202 	mul.w	r2, r1, r2
    386e:	fb03 f302 	mul.w	r3, r3, r2
    3872:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3876:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    387a:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    387c:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    387e:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3882:	d503      	bpl.n	388c <juggle_half(LEDStruct&)+0x1cc>
    3884:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3888:	3207      	adds	r2, #7
    388a:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    388c:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    388e:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3892:	9a03      	ldr	r2, [sp, #12]
    3894:	f81a 5000 	ldrb.w	r5, [sl, r0]
    3898:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    389c:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    38a0:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38a2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    38a4:	bf48      	it	mi
    38a6:	4255      	negmi	r5, r2
    38a8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38ac:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38b0:	bf54      	ite	pl
    38b2:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    38b4:	b22d      	sxthmi	r5, r5
    38b6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    38ba:	9100      	str	r1, [sp, #0]
    38bc:	4648      	mov	r0, r9
    38be:	4641      	mov	r1, r8
    38c0:	f006 fbcc 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38c4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    38c8:	2226      	movs	r2, #38	; 0x26
    38ca:	b29b      	uxth	r3, r3
    38cc:	fb02 f303 	mul.w	r3, r2, r3
    38d0:	0c1b      	lsrs	r3, r3, #16
    38d2:	3325      	adds	r3, #37	; 0x25
    38d4:	b29b      	uxth	r3, r3
    38d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38da:	18e1      	adds	r1, r4, r3
    38dc:	5ce2      	ldrb	r2, [r4, r3]
    38de:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    38e2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    38e6:	54e2      	strb	r2, [r4, r3]
    38e8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    38ec:	784a      	ldrb	r2, [r1, #1]
    38ee:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    38f2:	704a      	strb	r2, [r1, #1]
    38f4:	788b      	ldrb	r3, [r1, #2]
    38f6:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    38fa:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    38fe:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3900:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3904:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3908:	4416      	add	r6, r2
    390a:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    390c:	f8db 3000 	ldr.w	r3, [fp]
    3910:	9306      	str	r3, [sp, #24]
    3912:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3914:	9a06      	ldr	r2, [sp, #24]
    3916:	bf98      	it	ls
    3918:	0236      	lslls	r6, r6, #8


LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    391a:	f44f 738c 	mov.w	r3, #280	; 0x118
    391e:	bf98      	it	ls
    3920:	b2b6      	uxthls	r6, r6
    3922:	fb03 f202 	mul.w	r2, r3, r2
    3926:	fb06 f202 	mul.w	r2, r6, r2
    392a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    392e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3932:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3934:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3938:	d503      	bpl.n	3942 <juggle_half(LEDStruct&)+0x282>
    393a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    393e:	3307      	adds	r3, #7
    3940:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3942:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3944:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	f81a 5000 	ldrb.w	r5, [sl, r0]
    394e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3952:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3956:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3958:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    395a:	bf48      	it	mi
    395c:	425b      	negmi	r3, r3
    395e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3962:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3966:	b21d      	sxth	r5, r3
    3968:	4648      	mov	r0, r9
    396a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    396e:	9100      	str	r1, [sp, #0]
    3970:	4641      	mov	r1, r8
    3972:	f006 fb73 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3976:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    397a:	2226      	movs	r2, #38	; 0x26
    397c:	b29b      	uxth	r3, r3
    397e:	fb02 f303 	mul.w	r3, r2, r3
    3982:	0c1b      	lsrs	r3, r3, #16
    3984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3988:	18e1      	adds	r1, r4, r3
    398a:	5ce2      	ldrb	r2, [r4, r3]
    398c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3990:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3994:	54e2      	strb	r2, [r4, r3]
    3996:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    399a:	784a      	ldrb	r2, [r1, #1]
    399c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    39a0:	704a      	strb	r2, [r1, #1]
    39a2:	788b      	ldrb	r3, [r1, #2]
    39a4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    39a8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    39ac:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    39ae:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    39b2:	3701      	adds	r7, #1
    39b4:	b2ff      	uxtb	r7, r7
    39b6:	42bb      	cmp	r3, r7
    39b8:	461a      	mov	r2, r3
    39ba:	f63f af46 	bhi.w	384a <juggle_half(LEDStruct&)+0x18a>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    39be:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    39c2:	2a00      	cmp	r2, #0
    39c4:	f000 819e 	beq.w	3d04 <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    39c8:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    39cc:	2f00      	cmp	r7, #0
    39ce:	f040 81b7 	bne.w	3d40 <juggle_half(LEDStruct&)+0x680>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    39d2:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    39d6:	2b00      	cmp	r3, #0
    39d8:	f000 80c4 	beq.w	3b64 <juggle_half(LEDStruct&)+0x4a4>
    39dc:	e00a      	b.n	39f4 <juggle_half(LEDStruct&)+0x334>
    39de:	bf00      	nop
    39e0:	1fff875e 	.word	0x1fff875e
    39e4:	1fff95dd 	.word	0x1fff95dd
    39e8:	0000f2c8 	.word	0x0000f2c8
    39ec:	1fffa8c0 	.word	0x1fffa8c0
    39f0:	0000fa58 	.word	0x0000fa58
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    39f4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    39f8:	3301      	adds	r3, #1
    39fa:	4413      	add	r3, r2
    39fc:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    39fe:	f8db 2000 	ldr.w	r2, [fp]
    3a02:	920b      	str	r2, [sp, #44]	; 0x2c
    3a04:	4433      	add	r3, r6
    3a06:	b29b      	uxth	r3, r3
    3a08:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3a0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a0c:	bf9c      	itt	ls
    3a0e:	021b      	lslls	r3, r3, #8
    3a10:	b29b      	uxthls	r3, r3
    3a12:	fb09 f202 	mul.w	r2, r9, r2
    3a16:	fb03 f302 	mul.w	r3, r3, r2
    3a1a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3a1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3a22:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a24:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3a26:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a2a:	d503      	bpl.n	3a34 <juggle_half(LEDStruct&)+0x374>
    3a2c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3a30:	3207      	adds	r2, #7
    3a32:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a34:	9803      	ldr	r0, [sp, #12]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3a36:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a38:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3a3c:	f81a 5001 	ldrb.w	r5, [sl, r1]
    3a40:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    3a44:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3a48:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a4a:	b2ad      	uxth	r5, r5
    3a4c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a50:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a54:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a58:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3a5a:	bf48      	it	mi
    3a5c:	426d      	negmi	r5, r5
    3a5e:	4641      	mov	r1, r8
    3a60:	a809      	add	r0, sp, #36	; 0x24
    3a62:	b22d      	sxth	r5, r5
    3a64:	f006 fafa 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a68:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3a6c:	2226      	movs	r2, #38	; 0x26
    3a6e:	b29b      	uxth	r3, r3
    3a70:	fb02 f303 	mul.w	r3, r2, r3
    3a74:	0c1b      	lsrs	r3, r3, #16
    3a76:	3370      	adds	r3, #112	; 0x70
    3a78:	b29b      	uxth	r3, r3
    3a7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a7e:	18e1      	adds	r1, r4, r3
    3a80:	5ce2      	ldrb	r2, [r4, r3]
    3a82:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3a86:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a8a:	54e2      	strb	r2, [r4, r3]
    3a8c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3a90:	784a      	ldrb	r2, [r1, #1]
    3a92:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a96:	704a      	strb	r2, [r1, #1]
    3a98:	788b      	ldrb	r3, [r1, #2]
    3a9a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3a9e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3aa2:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3aa4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3aa8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3aac:	4413      	add	r3, r2
    3aae:	3301      	adds	r3, #1
    3ab0:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ab2:	f8db 3000 	ldr.w	r3, [fp]
    3ab6:	930a      	str	r3, [sp, #40]	; 0x28
    3ab8:	b2b6      	uxth	r6, r6
    3aba:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3abe:	bf9c      	itt	ls
    3ac0:	0236      	lslls	r6, r6, #8
    3ac2:	b2b6      	uxthls	r6, r6


LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3ac4:	fb09 f202 	mul.w	r2, r9, r2
    3ac8:	fb06 f202 	mul.w	r2, r6, r2
    3acc:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3ad0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ad4:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3ad6:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ada:	d503      	bpl.n	3ae4 <juggle_half(LEDStruct&)+0x424>
    3adc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3ae0:	3307      	adds	r3, #7
    3ae2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ae4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ae6:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3aea:	9b03      	ldr	r3, [sp, #12]
    3aec:	f81a 5000 	ldrb.w	r5, [sl, r0]
    3af0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3af4:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3af8:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3afa:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3afc:	bf48      	it	mi
    3afe:	425b      	negmi	r3, r3
    3b00:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b04:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b08:	b21d      	sxth	r5, r3
    3b0a:	a809      	add	r0, sp, #36	; 0x24
    3b0c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b10:	9100      	str	r1, [sp, #0]
    3b12:	4641      	mov	r1, r8
    3b14:	f006 faa2 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b18:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b1c:	b29b      	uxth	r3, r3
    3b1e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3b22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3b26:	0c1b      	lsrs	r3, r3, #16
    3b28:	334b      	adds	r3, #75	; 0x4b
    3b2a:	b29b      	uxth	r3, r3
    3b2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b30:	18e1      	adds	r1, r4, r3
    3b32:	5ce2      	ldrb	r2, [r4, r3]
    3b34:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3b38:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b3c:	54e2      	strb	r2, [r4, r3]
    3b3e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3b42:	784a      	ldrb	r2, [r1, #1]
    3b44:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b48:	704a      	strb	r2, [r1, #1]
    3b4a:	788b      	ldrb	r3, [r1, #2]
    3b4c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3b50:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b54:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b56:	3701      	adds	r7, #1
    3b58:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3b5c:	b2ff      	uxtb	r7, r7
    3b5e:	42bb      	cmp	r3, r7
    3b60:	f63f af48 	bhi.w	39f4 <juggle_half(LEDStruct&)+0x334>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3b64:	b00d      	add	sp, #52	; 0x34
    3b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3b6a:	2a00      	cmp	r2, #0
    3b6c:	f000 81ad 	beq.w	3eca <juggle_half(LEDStruct&)+0x80a>
    3b70:	4b70      	ldr	r3, [pc, #448]	; (3d34 <juggle_half(LEDStruct&)+0x674>)
    3b72:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 3d38 <juggle_half(LEDStruct&)+0x678>
    3b76:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 3d3c <juggle_half(LEDStruct&)+0x67c>
    3b7a:	9303      	str	r3, [sp, #12]
    3b7c:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3b80:	2700      	movs	r7, #0
    3b82:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3b86:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3b8a:	b2be      	uxth	r6, r7
    3b8c:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b8e:	f8db 2000 	ldr.w	r2, [fp]
    3b92:	9205      	str	r2, [sp, #20]
    3b94:	440b      	add	r3, r1
    3b96:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b98:	9a05      	ldr	r2, [sp, #20]
    3b9a:	bf98      	it	ls
    3b9c:	021b      	lslls	r3, r3, #8
    3b9e:	f44f 718c 	mov.w	r1, #280	; 0x118
    3ba2:	bf98      	it	ls
    3ba4:	b29b      	uxthls	r3, r3
    3ba6:	fb01 f202 	mul.w	r2, r1, r2
    3baa:	fb03 f302 	mul.w	r3, r3, r2
    3bae:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bb6:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bb8:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bbc:	d503      	bpl.n	3bc6 <juggle_half(LEDStruct&)+0x506>
    3bbe:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3bc2:	3207      	adds	r2, #7
    3bc4:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3bc6:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bc8:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3bcc:	9a03      	ldr	r2, [sp, #12]
    3bce:	f81a 5000 	ldrb.w	r5, [sl, r0]
    3bd2:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3bd6:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3bda:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bdc:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3bde:	bf48      	it	mi
    3be0:	4255      	negmi	r5, r2
    3be2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3be6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bea:	bf54      	ite	pl
    3bec:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3bee:	b22d      	sxthmi	r5, r5
    3bf0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3bf4:	9100      	str	r1, [sp, #0]
    3bf6:	4648      	mov	r0, r9
    3bf8:	4641      	mov	r1, r8
    3bfa:	f006 fa2f 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3bfe:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c02:	2226      	movs	r2, #38	; 0x26
    3c04:	b29b      	uxth	r3, r3
    3c06:	fb02 f303 	mul.w	r3, r2, r3
    3c0a:	0c1b      	lsrs	r3, r3, #16
    3c0c:	3325      	adds	r3, #37	; 0x25
    3c0e:	b29b      	uxth	r3, r3
    3c10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c14:	18e1      	adds	r1, r4, r3
    3c16:	5ce2      	ldrb	r2, [r4, r3]
    3c18:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3c1c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c20:	54e2      	strb	r2, [r4, r3]
    3c22:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3c26:	784a      	ldrb	r2, [r1, #1]
    3c28:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c2c:	704a      	strb	r2, [r1, #1]
    3c2e:	788b      	ldrb	r3, [r1, #2]
    3c30:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3c34:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c38:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c3a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3c3e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3c42:	4416      	add	r6, r2
    3c44:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c46:	f8db 3000 	ldr.w	r3, [fp]
    3c4a:	9304      	str	r3, [sp, #16]
    3c4c:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3c4e:	9b04      	ldr	r3, [sp, #16]
    3c50:	bf98      	it	ls
    3c52:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3c54:	f44f 728c 	mov.w	r2, #280	; 0x118
    3c58:	bf98      	it	ls
    3c5a:	b2b6      	uxthls	r6, r6
    3c5c:	fb02 f303 	mul.w	r3, r2, r3
    3c60:	fb06 f303 	mul.w	r3, r6, r3
    3c64:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3c68:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3c6c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c6e:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c70:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c74:	d503      	bpl.n	3c7e <juggle_half(LEDStruct&)+0x5be>
    3c76:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3c7a:	3207      	adds	r2, #7
    3c7c:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c7e:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c80:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3c84:	9a03      	ldr	r2, [sp, #12]
    3c86:	f81a 5000 	ldrb.w	r5, [sl, r0]
    3c8a:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3c8e:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3c92:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c94:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3c96:	bf48      	it	mi
    3c98:	4252      	negmi	r2, r2
    3c9a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c9e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3ca2:	b215      	sxth	r5, r2
    3ca4:	4648      	mov	r0, r9
    3ca6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3caa:	9100      	str	r1, [sp, #0]
    3cac:	4641      	mov	r1, r8
    3cae:	f006 f9d5 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3cb2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3cb6:	2226      	movs	r2, #38	; 0x26
    3cb8:	b29b      	uxth	r3, r3
    3cba:	fb02 f303 	mul.w	r3, r2, r3
    3cbe:	0c1b      	lsrs	r3, r3, #16
    3cc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cc4:	18e1      	adds	r1, r4, r3
    3cc6:	5ce2      	ldrb	r2, [r4, r3]
    3cc8:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ccc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3cd0:	54e2      	strb	r2, [r4, r3]
    3cd2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3cd6:	784a      	ldrb	r2, [r1, #1]
    3cd8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3cdc:	704a      	strb	r2, [r1, #1]
    3cde:	788b      	ldrb	r3, [r1, #2]
    3ce0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3ce4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ce8:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3cea:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3cee:	3701      	adds	r7, #1
    3cf0:	b2ff      	uxtb	r7, r7
    3cf2:	42bb      	cmp	r3, r7
    3cf4:	461a      	mov	r2, r3
    3cf6:	f63f af46 	bhi.w	3b86 <juggle_half(LEDStruct&)+0x4c6>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3cfa:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3cfe:	2a00      	cmp	r2, #0
    3d00:	f47f ae62 	bne.w	39c8 <juggle_half(LEDStruct&)+0x308>
    3d04:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d08:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d0a:	7822      	ldrb	r2, [r4, #0]
    3d0c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3d10:	7862      	ldrb	r2, [r4, #1]
    3d12:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3d16:	78a2      	ldrb	r2, [r4, #2]
    3d18:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3d1c:	3403      	adds	r4, #3
    3d1e:	42a1      	cmp	r1, r4
    3d20:	f1a3 0303 	sub.w	r3, r3, #3
    3d24:	d1f1      	bne.n	3d0a <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3d26:	b00d      	add	sp, #52	; 0x34
    3d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3d2c:	4620      	mov	r0, r4
    3d2e:	f7ff f867 	bl	2e00 <juggle_update(LEDStruct&)>
    3d32:	e56a      	b.n	380a <juggle_half(LEDStruct&)+0x14a>
    3d34:	0000f2c8 	.word	0x0000f2c8
    3d38:	1fffa8c0 	.word	0x1fffa8c0
    3d3c:	0000fa58 	.word	0x0000fa58
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d40:	2b00      	cmp	r3, #0
    3d42:	f43f af0f 	beq.w	3b64 <juggle_half(LEDStruct&)+0x4a4>
    3d46:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d48:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d4c:	3301      	adds	r3, #1
    3d4e:	4413      	add	r3, r2
    3d50:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d52:	f8db 2000 	ldr.w	r2, [fp]
    3d56:	9209      	str	r2, [sp, #36]	; 0x24
    3d58:	4433      	add	r3, r6
    3d5a:	b29b      	uxth	r3, r3
    3d5c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d60:	bf98      	it	ls
    3d62:	021b      	lslls	r3, r3, #8


LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d64:	f44f 718c 	mov.w	r1, #280	; 0x118
    3d68:	bf98      	it	ls
    3d6a:	b29b      	uxthls	r3, r3
    3d6c:	fb01 f202 	mul.w	r2, r1, r2
    3d70:	fb03 f302 	mul.w	r3, r3, r2
    3d74:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3d78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d7c:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d7e:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d82:	d503      	bpl.n	3d8c <juggle_half(LEDStruct&)+0x6cc>
    3d84:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3d88:	3207      	adds	r2, #7
    3d8a:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d8c:	9803      	ldr	r0, [sp, #12]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d8e:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d90:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3d94:	f81a 5001 	ldrb.w	r5, [sl, r1]
    3d98:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    3d9c:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3da0:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3da2:	b2ad      	uxth	r5, r5
    3da4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3da8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3dac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3db0:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3db2:	bf48      	it	mi
    3db4:	426d      	negmi	r5, r5
    3db6:	4641      	mov	r1, r8
    3db8:	4648      	mov	r0, r9
    3dba:	b22d      	sxth	r5, r5
    3dbc:	f006 f94e 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3dc0:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3dc4:	2226      	movs	r2, #38	; 0x26
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	fb02 f303 	mul.w	r3, r2, r3
    3dcc:	0c1b      	lsrs	r3, r3, #16
    3dce:	3370      	adds	r3, #112	; 0x70
    3dd0:	b29b      	uxth	r3, r3
    3dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3dd6:	18e1      	adds	r1, r4, r3
    3dd8:	5ce2      	ldrb	r2, [r4, r3]
    3dda:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3dde:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3de2:	54e2      	strb	r2, [r4, r3]
    3de4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3de8:	784a      	ldrb	r2, [r1, #1]
    3dea:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3dee:	704a      	strb	r2, [r1, #1]
    3df0:	788b      	ldrb	r3, [r1, #2]
    3df2:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3df6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3dfa:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3dfc:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e00:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e04:	4413      	add	r3, r2
    3e06:	3301      	adds	r3, #1
    3e08:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e0a:	f8db 3000 	ldr.w	r3, [fp]
    3e0e:	9308      	str	r3, [sp, #32]
    3e10:	b2b6      	uxth	r6, r6
    3e12:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3e14:	9b08      	ldr	r3, [sp, #32]
    3e16:	bf98      	it	ls
    3e18:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3e1a:	f44f 728c 	mov.w	r2, #280	; 0x118
    3e1e:	bf98      	it	ls
    3e20:	b2b6      	uxthls	r6, r6
    3e22:	fb02 f303 	mul.w	r3, r2, r3
    3e26:	fb06 f303 	mul.w	r3, r6, r3
    3e2a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3e32:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e34:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e36:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e3a:	d503      	bpl.n	3e44 <juggle_half(LEDStruct&)+0x784>
    3e3c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e40:	3207      	adds	r2, #7
    3e42:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e44:	9803      	ldr	r0, [sp, #12]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e46:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e48:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3e4c:	f81a 5001 	ldrb.w	r5, [sl, r1]
    3e50:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    3e54:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3e58:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e5a:	b2ad      	uxth	r5, r5
    3e5c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e60:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e64:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3e68:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3e6a:	bf48      	it	mi
    3e6c:	426d      	negmi	r5, r5
    3e6e:	4641      	mov	r1, r8
    3e70:	4648      	mov	r0, r9
    3e72:	b22d      	sxth	r5, r5
    3e74:	f006 f8f2 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e78:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e7c:	b29b      	uxth	r3, r3
    3e7e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3e82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e86:	0c1b      	lsrs	r3, r3, #16
    3e88:	334b      	adds	r3, #75	; 0x4b
    3e8a:	b29b      	uxth	r3, r3
    3e8c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e90:	18e1      	adds	r1, r4, r3
    3e92:	5ce2      	ldrb	r2, [r4, r3]
    3e94:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3e98:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e9c:	54e2      	strb	r2, [r4, r3]
    3e9e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3ea2:	784a      	ldrb	r2, [r1, #1]
    3ea4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ea8:	704a      	strb	r2, [r1, #1]
    3eaa:	788b      	ldrb	r3, [r1, #2]
    3eac:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3eb0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3eb4:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3eb6:	3701      	adds	r7, #1
    3eb8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3ebc:	b2ff      	uxtb	r7, r7
    3ebe:	42bb      	cmp	r3, r7
    3ec0:	f63f af42 	bhi.w	3d48 <juggle_half(LEDStruct&)+0x688>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3ec4:	b00d      	add	sp, #52	; 0x34
    3ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3eca:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3ece:	2b00      	cmp	r3, #0
    3ed0:	f43f af18 	beq.w	3d04 <juggle_half(LEDStruct&)+0x644>
    3ed4:	e646      	b.n	3b64 <juggle_half(LEDStruct&)+0x4a4>
    3ed6:	bf00      	nop

00003ed8 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3ed8:	4b17      	ldr	r3, [pc, #92]	; (3f38 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    3eda:	4a18      	ldr	r2, [pc, #96]	; (3f3c <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    3edc:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    3ede:	2100      	movs	r1, #0
    3ee0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3ee2:	2b03      	cmp	r3, #3
    3ee4:	d80a      	bhi.n	3efc <rainbow_update(LEDStruct&)+0x24>
    3ee6:	e8df f003 	tbb	[pc, r3]
    3eea:	0217      	.short	0x0217
    3eec:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    3eee:	4b14      	ldr	r3, [pc, #80]	; (3f40 <rainbow_update(LEDStruct&)+0x68>)
    3ef0:	881b      	ldrh	r3, [r3, #0]
    3ef2:	3300      	adds	r3, #0
    3ef4:	bf18      	it	ne
    3ef6:	2301      	movne	r3, #1
    3ef8:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3efc:	f7fe b8d6 	b.w	20ac <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    3f00:	4b0f      	ldr	r3, [pc, #60]	; (3f40 <rainbow_update(LEDStruct&)+0x68>)
    3f02:	881b      	ldrh	r3, [r3, #0]
    3f04:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		default:	break;
	}
	LEDDebug(leds);
    3f08:	f7fe b8d0 	b.w	20ac <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    3f0c:	4b0c      	ldr	r3, [pc, #48]	; (3f40 <rainbow_update(LEDStruct&)+0x68>)
    3f0e:	881b      	ldrh	r3, [r3, #0]
    3f10:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3f14:	f7fe b8ca 	b.w	20ac <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    3f18:	4b09      	ldr	r3, [pc, #36]	; (3f40 <rainbow_update(LEDStruct&)+0x68>)
    3f1a:	881b      	ldrh	r3, [r3, #0]
    3f1c:	2b00      	cmp	r3, #0
    3f1e:	bf14      	ite	ne
    3f20:	2301      	movne	r3, #1
    3f22:	2300      	moveq	r3, #0
    3f24:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3f28:	bf14      	ite	ne
    3f2a:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    3f2c:	234b      	moveq	r3, #75	; 0x4b
    3f2e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3f32:	f7fe b8bb 	b.w	20ac <LEDDebug(LEDStruct&)>
    3f36:	bf00      	nop
    3f38:	1fff9e2c 	.word	0x1fff9e2c
    3f3c:	1fff95dd 	.word	0x1fff95dd
    3f40:	1fff9e24 	.word	0x1fff9e24

00003f44 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3f44:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    3f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f4c:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3f4e:	2b00      	cmp	r3, #0
    3f50:	d14a      	bne.n	3fe8 <rainbow_march(LEDStruct&)+0xa4>
    3f52:	4860      	ldr	r0, [pc, #384]	; (40d4 <rainbow_march(LEDStruct&)+0x190>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    3f54:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    3f58:	8803      	ldrh	r3, [r0, #0]
    3f5a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f5e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f62:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f66:	3319      	adds	r3, #25
    3f68:	b29b      	uxth	r3, r3
    3f6a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3f72:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f76:	3219      	adds	r2, #25
    3f78:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f7a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f7e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f80:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f84:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f88:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f8c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f90:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3f94:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f96:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f98:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f9a:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    3f9c:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f9e:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3fa2:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    3fa4:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    3fa8:	2706      	movs	r7, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3faa:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    3fac:	42b3      	cmp	r3, r6

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    3fae:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    3fb2:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    3fb6:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    3fba:	f884 627b 	strb.w	r6, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    3fbe:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    3fc2:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    3fc6:	f000 8083 	beq.w	40d0 <rainbow_march(LEDStruct&)+0x18c>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3fca:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3fce:	b2d2      	uxtb	r2, r2
    3fd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3fd4:	1212      	asrs	r2, r2, #8
    3fd6:	4432      	add	r2, r6
    3fd8:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    3fda:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    3fde:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    3fe2:	4620      	mov	r0, r4
    3fe4:	f7fe f862 	bl	20ac <LEDDebug(LEDStruct&)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    3fe8:	4b3b      	ldr	r3, [pc, #236]	; (40d8 <rainbow_march(LEDStruct&)+0x194>)
    3fea:	781b      	ldrb	r3, [r3, #0]
    3fec:	2b00      	cmp	r3, #0
    3fee:	d16b      	bne.n	40c8 <rainbow_march(LEDStruct&)+0x184>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3ff0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3ff4:	bb43      	cbnz	r3, 4048 <rainbow_march(LEDStruct&)+0x104>
    3ff6:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    3ffa:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    3ffe:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4000:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4004:	b2d2      	uxtb	r2, r2
    4006:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    400a:	bb4b      	cbnz	r3, 4060 <rainbow_march(LEDStruct&)+0x11c>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    400c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4010:	2b00      	cmp	r3, #0
    4012:	d151      	bne.n	40b8 <rainbow_march(LEDStruct&)+0x174>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4014:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4018:	214b      	movs	r1, #75	; 0x4b
    401a:	4620      	mov	r0, r4
    401c:	f005 ff0c 	bl	9e38 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4020:	4620      	mov	r0, r4
    4022:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4026:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4028:	7802      	ldrb	r2, [r0, #0]
    402a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    402e:	7842      	ldrb	r2, [r0, #1]
    4030:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4034:	7882      	ldrb	r2, [r0, #2]
    4036:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    403a:	3003      	adds	r0, #3
    403c:	4288      	cmp	r0, r1
    403e:	f1a3 0303 	sub.w	r3, r3, #3
    4042:	d1f1      	bne.n	4028 <rainbow_march(LEDStruct&)+0xe4>
    4044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4048:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    404c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4050:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4052:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4056:	b2d2      	uxtb	r2, r2
    4058:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    405c:	2b00      	cmp	r3, #0
    405e:	d0d5      	beq.n	400c <rainbow_march(LEDStruct&)+0xc8>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4060:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4064:	2125      	movs	r1, #37	; 0x25
    4066:	4620      	mov	r0, r4
    4068:	f005 fee6 	bl	9e38 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    406c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4070:	4623      	mov	r3, r4
    4072:	4621      	mov	r1, r4
    4074:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4076:	7810      	ldrb	r0, [r2, #0]
    4078:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    407c:	7850      	ldrb	r0, [r2, #1]
    407e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4082:	7890      	ldrb	r0, [r2, #2]
    4084:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4088:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    408a:	42aa      	cmp	r2, r5
    408c:	f1a1 0103 	sub.w	r1, r1, #3
    4090:	d1f1      	bne.n	4076 <rainbow_march(LEDStruct&)+0x132>
    4092:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4096:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4098:	7802      	ldrb	r2, [r0, #0]
    409a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    409e:	7842      	ldrb	r2, [r0, #1]
    40a0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    40a4:	7882      	ldrb	r2, [r0, #2]
    40a6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    40aa:	3003      	adds	r0, #3
    40ac:	4288      	cmp	r0, r1
    40ae:	f1a3 0303 	sub.w	r3, r3, #3
    40b2:	d1f1      	bne.n	4098 <rainbow_march(LEDStruct&)+0x154>
    40b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    40b8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    40bc:	4620      	mov	r0, r4
    40be:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    40c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    40c4:	f005 beb8 	b.w	9e38 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    40c8:	4620      	mov	r0, r4
    40ca:	f7ff ff05 	bl	3ed8 <rainbow_update(LEDStruct&)>
    40ce:	e78f      	b.n	3ff0 <rainbow_march(LEDStruct&)+0xac>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    40d0:	461a      	mov	r2, r3
    40d2:	e782      	b.n	3fda <rainbow_march(LEDStruct&)+0x96>
    40d4:	1fff875e 	.word	0x1fff875e
    40d8:	1fff95dd 	.word	0x1fff95dd

000040dc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    40dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    40de:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    40e2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    40e6:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    40ea:	250a      	movs	r5, #10
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    40ec:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    40ee:	3c0f      	subs	r4, #15
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    40f0:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    40f4:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    40f6:	f04f 050f 	mov.w	r5, #15
    40fa:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    40fe:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4102:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4106:	d93d      	bls.n	4184 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    4108:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    410a:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    410c:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4110:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4114:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4118:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    411c:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    4120:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4124:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    4128:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    412c:	4c1f      	ldr	r4, [pc, #124]	; (41ac <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    412e:	8823      	ldrh	r3, [r4, #0]
    4130:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4134:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4138:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    413c:	3319      	adds	r3, #25
    413e:	b29b      	uxth	r3, r3
    4140:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4144:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4148:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    414c:	3219      	adds	r2, #25
    414e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4150:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4154:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4158:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    415a:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    415c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4160:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4164:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4166:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4168:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    416c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4170:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4174:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4178:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    417c:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    417e:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4182:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4184:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4188:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    418c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4190:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4194:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4198:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    419c:	b112      	cbz	r2, 41a4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    419e:	2225      	movs	r2, #37	; 0x25
    41a0:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    41a4:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    41a8:	e7c0      	b.n	412c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    41aa:	bf00      	nop
    41ac:	1fff875e 	.word	0x1fff875e

000041b0 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    41b0:	4b19      	ldr	r3, [pc, #100]	; (4218 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    41b2:	4a1a      	ldr	r2, [pc, #104]	; (421c <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    41b4:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    41b6:	2100      	movs	r1, #0
    41b8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    41ba:	2b05      	cmp	r3, #5
    41bc:	d808      	bhi.n	41d0 <fire_update(LEDStruct&)+0x20>
    41be:	e8df f003 	tbb	[pc, r3]
    41c2:	150f      	.short	0x150f
    41c4:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    41c8:	4b15      	ldr	r3, [pc, #84]	; (4220 <fire_update(LEDStruct&)+0x70>)
    41ca:	881b      	ldrh	r3, [r3, #0]
    41cc:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    41d0:	f7fd bf6c 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    41d4:	4b12      	ldr	r3, [pc, #72]	; (4220 <fire_update(LEDStruct&)+0x70>)
    41d6:	881b      	ldrh	r3, [r3, #0]
    41d8:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    41dc:	f7fd bf66 	b.w	20ac <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    41e0:	4b0f      	ldr	r3, [pc, #60]	; (4220 <fire_update(LEDStruct&)+0x70>)
    41e2:	881b      	ldrh	r3, [r3, #0]
    41e4:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    41e8:	f7fd bf60 	b.w	20ac <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    41ec:	4b0c      	ldr	r3, [pc, #48]	; (4220 <fire_update(LEDStruct&)+0x70>)
    41ee:	881b      	ldrh	r3, [r3, #0]
    41f0:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    41f4:	f7fd bf5a 	b.w	20ac <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    41f8:	4b09      	ldr	r3, [pc, #36]	; (4220 <fire_update(LEDStruct&)+0x70>)
    41fa:	881b      	ldrh	r3, [r3, #0]
    41fc:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4200:	f7fd bf54 	b.w	20ac <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4204:	4b06      	ldr	r3, [pc, #24]	; (4220 <fire_update(LEDStruct&)+0x70>)
    4206:	881b      	ldrh	r3, [r3, #0]
    4208:	3300      	adds	r3, #0
    420a:	bf18      	it	ne
    420c:	2301      	movne	r3, #1
    420e:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4212:	f7fd bf4b 	b.w	20ac <LEDDebug(LEDStruct&)>
    4216:	bf00      	nop
    4218:	1fff9e2c 	.word	0x1fff9e2c
    421c:	1fff95dd 	.word	0x1fff95dd
    4220:	1fff9e24 	.word	0x1fff9e24

00004224 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    4224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4228:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    422c:	4dd0      	ldr	r5, [pc, #832]	; (4570 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    422e:	b086      	sub	sp, #24
    4230:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4232:	2b00      	cmp	r3, #0
    4234:	f000 8229 	beq.w	468a <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    4238:	4bce      	ldr	r3, [pc, #824]	; (4574 <fire(LEDStruct&)+0x350>)
    423a:	781b      	ldrb	r3, [r3, #0]
    423c:	2b00      	cmp	r3, #0
    423e:	f040 8220 	bne.w	4682 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4242:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4246:	2b00      	cmp	r3, #0
    4248:	f000 82d1 	beq.w	47ee <fire(LEDStruct&)+0x5ca>
    424c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4250:	882a      	ldrh	r2, [r5, #0]
    4252:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4256:	004f      	lsls	r7, r1, #1
    4258:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    425c:	fb97 f7f3 	sdiv	r7, r7, r3
    4260:	3702      	adds	r7, #2
    4262:	b2ff      	uxtb	r7, r7
    4264:	44a6      	add	lr, r4
    4266:	f204 267f 	addw	r6, r4, #639	; 0x27f
    426a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    426e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4272:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4276:	3219      	adds	r2, #25
    4278:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    427a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    427e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4282:	b2c9      	uxtb	r1, r1
    4284:	fb11 f107 	smulbb	r1, r1, r7
    4288:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    428c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4290:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4292:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4294:	d1e9      	bne.n	426a <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4296:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    429a:	802a      	strh	r2, [r5, #0]
    429c:	2e00      	cmp	r6, #0
    429e:	f000 80f5 	beq.w	448c <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    42a2:	f1a3 0e03 	sub.w	lr, r3, #3
    42a6:	f1be 0f01 	cmp.w	lr, #1
    42aa:	f04f 0c01 	mov.w	ip, #1
    42ae:	dd1a      	ble.n	42e6 <fire(LEDStruct&)+0xc2>
    42b0:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    42b4:	f203 277e 	addw	r7, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    42b8:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 4578 <fire(LEDStruct&)+0x354>
    42bc:	4420      	add	r0, r4
    42be:	4427      	add	r7, r4
    42c0:	f504 7820 	add.w	r8, r4, #640	; 0x280
    42c4:	7801      	ldrb	r1, [r0, #0]
    42c6:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    42ca:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    42ce:	fb89 a601 	smull	sl, r6, r9, r1
    42d2:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    42d6:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    42d8:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    42dc:	d1f2      	bne.n	42c4 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    42de:	f1bc 0f00 	cmp.w	ip, #0
    42e2:	f000 8102 	beq.w	44ea <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42e6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    42ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    42ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    42f2:	3219      	adds	r2, #25
    42f4:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    42f6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    42fa:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    42fe:	802a      	strh	r2, [r5, #0]
    4300:	b2c9      	uxtb	r1, r1
    4302:	428e      	cmp	r6, r1
    4304:	489a      	ldr	r0, [pc, #616]	; (4570 <fire(LEDStruct&)+0x34c>)
    4306:	d926      	bls.n	4356 <fire(LEDStruct&)+0x132>
    4308:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    430c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4310:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4314:	3219      	adds	r2, #25
    4316:	b292      	uxth	r2, r2
    4318:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    431c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4320:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4324:	3619      	adds	r6, #25
    4326:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4328:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    432c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4330:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4332:	b2d2      	uxtb	r2, r2
    4334:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    4338:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    433c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4340:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    4344:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4346:	8006      	strh	r6, [r0, #0]
    4348:	3960      	subs	r1, #96	; 0x60
    434a:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    434e:	fa80 f051 	uqadd8	r0, r0, r1
    4352:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4356:	f1bc 0f00 	cmp.w	ip, #0
    435a:	d112      	bne.n	4382 <fire(LEDStruct&)+0x15e>
    435c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    435e:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4362:	4983      	ldr	r1, [pc, #524]	; (4570 <fire(LEDStruct&)+0x34c>)
    4364:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4368:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    436c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4370:	3219      	adds	r2, #25
    4372:	b292      	uxth	r2, r2
    4374:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4378:	b2c0      	uxtb	r0, r0
    437a:	4286      	cmp	r6, r0
    437c:	802a      	strh	r2, [r5, #0]
    437e:	f200 80cd 	bhi.w	451c <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4382:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4386:	2a00      	cmp	r2, #0
    4388:	d15f      	bne.n	444a <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    438a:	2b00      	cmp	r3, #0
    438c:	f000 8226 	beq.w	47dc <fire(LEDStruct&)+0x5b8>
    4390:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4394:	4690      	mov	r8, r2
    4396:	46b9      	mov	r9, r7
    4398:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    439a:	3b01      	subs	r3, #1
    439c:	ebc8 0503 	rsb	r5, r8, r3
    43a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    43a4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    43a8:	4630      	mov	r0, r6
    43aa:	f005 fe35 	bl	a018 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    43ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
    43b2:	5563      	strb	r3, [r4, r5]
    43b4:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    43b6:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    43ba:	f89d 2015 	ldrb.w	r2, [sp, #21]
    43be:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    43c0:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    43c2:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    43c6:	f108 0801 	add.w	r8, r8, #1
    43ca:	4543      	cmp	r3, r8
    43cc:	dce5      	bgt.n	439a <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    43ce:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    43d2:	b30a      	cbz	r2, 4418 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    43d4:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    43d8:	2a00      	cmp	r2, #0
    43da:	f040 81bf 	bne.w	475c <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    43de:	4690      	mov	r8, r2
    43e0:	2b00      	cmp	r3, #0
    43e2:	f000 81fe 	beq.w	47e2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    43e6:	eb08 0503 	add.w	r5, r8, r3
    43ea:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    43ee:	4630      	mov	r0, r6
    43f0:	f005 fe12 	bl	a018 <HeatColor(unsigned char)>
    43f4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    43f8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    43fc:	54e2      	strb	r2, [r4, r3]
    43fe:	4423      	add	r3, r4
        g = rhs.g;
    4400:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    4404:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4408:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    440a:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    440c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4410:	f108 0801 	add.w	r8, r8, #1
    4414:	4543      	cmp	r3, r8
    4416:	dce6      	bgt.n	43e6 <fire(LEDStruct&)+0x1c2>
    4418:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    441c:	2a00      	cmp	r2, #0
    441e:	f000 80ad 	beq.w	457c <fire(LEDStruct&)+0x358>
    4422:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4426:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4428:	781a      	ldrb	r2, [r3, #0]
    442a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    442e:	785a      	ldrb	r2, [r3, #1]
    4430:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4434:	789a      	ldrb	r2, [r3, #2]
    4436:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    443a:	3303      	adds	r3, #3
    443c:	4299      	cmp	r1, r3
    443e:	f1a4 0403 	sub.w	r4, r4, #3
    4442:	d1f1      	bne.n	4428 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4444:	b006      	add	sp, #24
    4446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    444a:	2b00      	cmp	r3, #0
    444c:	f000 80ea 	beq.w	4624 <fire(LEDStruct&)+0x400>
    4450:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4454:	46b9      	mov	r9, r7
    4456:	4625      	mov	r5, r4
    4458:	f04f 0800 	mov.w	r8, #0
    445c:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    445e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4462:	4630      	mov	r0, r6
    4464:	f005 fdd8 	bl	a018 <HeatColor(unsigned char)>
    4468:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    446c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4470:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4474:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4476:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4478:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    447a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    447e:	f108 0801 	add.w	r8, r8, #1
    4482:	4543      	cmp	r3, r8
    4484:	f105 0503 	add.w	r5, r5, #3
    4488:	dce9      	bgt.n	445e <fire(LEDStruct&)+0x23a>
    448a:	e7a0      	b.n	43ce <fire(LEDStruct&)+0x1aa>
    448c:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4490:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4494:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4498:	fb9e fef3 	sdiv	lr, lr, r3
    449c:	f10e 0e02 	add.w	lr, lr, #2
    44a0:	fa5f fe8e 	uxtb.w	lr, lr
    44a4:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    44a8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    44ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    44b0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    44b4:	3219      	adds	r2, #25
    44b6:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44b8:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    44bc:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    44c0:	b2c9      	uxtb	r1, r1
    44c2:	fb11 f10e 	smulbb	r1, r1, lr
    44c6:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    44ca:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    44cc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    44d0:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    44d2:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    44d4:	dbe8      	blt.n	44a8 <fire(LEDStruct&)+0x284>
    44d6:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    44d8:	f1a3 0e03 	sub.w	lr, r3, #3
    44dc:	f1be 0f01 	cmp.w	lr, #1
    44e0:	f04f 0c00 	mov.w	ip, #0
    44e4:	f73f aee4 	bgt.w	42b0 <fire(LEDStruct&)+0x8c>
    44e8:	e6fd      	b.n	42e6 <fire(LEDStruct&)+0xc2>
    44ea:	f203 26c7 	addw	r6, r3, #711	; 0x2c7
    44ee:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    44f2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4578 <fire(LEDStruct&)+0x354>
    44f6:	4426      	add	r6, r4
    44f8:	4427      	add	r7, r4
    44fa:	7831      	ldrb	r1, [r6, #0]
    44fc:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    4500:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4504:	fb88 9001 	smull	r9, r0, r8, r1
    4508:	f10e 3eff 	add.w	lr, lr, #4294967295
    450c:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4510:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4514:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4518:	d1ef      	bne.n	44fa <fire(LEDStruct&)+0x2d6>
    451a:	e6e4      	b.n	42e6 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    451c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4520:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4524:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4528:	3219      	adds	r2, #25
    452a:	b292      	uxth	r2, r2
    452c:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4530:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4534:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4538:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    453a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    453e:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4540:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4542:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4546:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    454a:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    454c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4550:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4554:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4558:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    455c:	800d      	strh	r5, [r1, #0]
    455e:	1201      	asrs	r1, r0, #8
    4560:	3960      	subs	r1, #96	; 0x60
    4562:	4630      	mov	r0, r6
    4564:	fa80 f051 	uqadd8	r0, r0, r1
    4568:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
    456c:	e709      	b.n	4382 <fire(LEDStruct&)+0x15e>
    456e:	bf00      	nop
    4570:	1fff875e 	.word	0x1fff875e
    4574:	1fff95dd 	.word	0x1fff95dd
    4578:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    457c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4580:	2a00      	cmp	r2, #0
    4582:	d15a      	bne.n	463a <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4584:	2b00      	cmp	r3, #0
    4586:	f43f af5d 	beq.w	4444 <fire(LEDStruct&)+0x220>
    458a:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    458e:	46b9      	mov	r9, r7
    4590:	f04f 0800 	mov.w	r8, #0
    4594:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    4596:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    459a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    459e:	354b      	adds	r5, #75	; 0x4b
    45a0:	4445      	add	r5, r8
    45a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    45a6:	4630      	mov	r0, r6
    45a8:	f005 fd36 	bl	a018 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    45ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    45b0:	5563      	strb	r3, [r4, r5]
    45b2:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    45b4:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    45b8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    45bc:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    45be:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    45c0:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    45c4:	f108 0801 	add.w	r8, r8, #1
    45c8:	4543      	cmp	r3, r8
    45ca:	dce4      	bgt.n	4596 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    45cc:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    45d0:	2a00      	cmp	r2, #0
    45d2:	f43f af37 	beq.w	4444 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    45d6:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    45da:	2a00      	cmp	r2, #0
    45dc:	f000 80dd 	beq.w	479a <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    45e0:	2b00      	cmp	r3, #0
    45e2:	f43f af2f 	beq.w	4444 <fire(LEDStruct&)+0x220>
    45e6:	4625      	mov	r5, r4
    45e8:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    45ec:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    45f0:	4630      	mov	r0, r6
    45f2:	f005 fd11 	bl	a018 <HeatColor(unsigned char)>
    45f6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    45fa:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    45fe:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4602:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    4606:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    460a:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    460e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4612:	f108 0801 	add.w	r8, r8, #1
    4616:	4543      	cmp	r3, r8
    4618:	f105 0503 	add.w	r5, r5, #3
    461c:	dce6      	bgt.n	45ec <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    461e:	b006      	add	sp, #24
    4620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4624:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4628:	2b00      	cmp	r3, #0
    462a:	f040 80da 	bne.w	47e2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    462e:	f1bc 0f00 	cmp.w	ip, #0
    4632:	f47f aef6 	bne.w	4422 <fire(LEDStruct&)+0x1fe>
    4636:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    463a:	2b00      	cmp	r3, #0
    463c:	f43f af02 	beq.w	4444 <fire(LEDStruct&)+0x220>
    4640:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4644:	46b9      	mov	r9, r7
    4646:	4625      	mov	r5, r4
    4648:	f04f 0800 	mov.w	r8, #0
    464c:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    464e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4652:	4630      	mov	r0, r6
    4654:	f005 fce0 	bl	a018 <HeatColor(unsigned char)>
    4658:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    465c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4660:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4664:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4668:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    466c:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4670:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4674:	f108 0801 	add.w	r8, r8, #1
    4678:	4543      	cmp	r3, r8
    467a:	f1a5 0503 	sub.w	r5, r5, #3
    467e:	dce6      	bgt.n	464e <fire(LEDStruct&)+0x42a>
    4680:	e7a4      	b.n	45cc <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4682:	4620      	mov	r0, r4
    4684:	f7ff fd94 	bl	41b0 <fire_update(LEDStruct&)>
    4688:	e5db      	b.n	4242 <fire(LEDStruct&)+0x1e>
    468a:	882b      	ldrh	r3, [r5, #0]
    468c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4690:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4694:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4698:	3119      	adds	r1, #25
    469a:	b289      	uxth	r1, r1
    469c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    46a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    46a4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    46a8:	3219      	adds	r2, #25
    46aa:	b292      	uxth	r2, r2
    46ac:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    46b0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    46b4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    46b8:	f10e 0e19 	add.w	lr, lr, #25
    46bc:	fa1f fe8e 	uxth.w	lr, lr
    46c0:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    46c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    46c8:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    46cc:	3619      	adds	r6, #25
    46ce:	b2b6      	uxth	r6, r6
    46d0:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    46d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    46d8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    46dc:	3319      	adds	r3, #25
    46de:	b29b      	uxth	r3, r3
    46e0:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    46e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46e8:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    46ec:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46f0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46f4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    46f8:	b2f6      	uxtb	r6, r6
    46fa:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    46fe:	3719      	adds	r7, #25
    4700:	b2db      	uxtb	r3, r3
    4702:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4706:	b2bf      	uxth	r7, r7
    4708:	11b6      	asrs	r6, r6, #6
    470a:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    470e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4712:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4716:	119b      	asrs	r3, r3, #6
    4718:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    471c:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4720:	333c      	adds	r3, #60	; 0x3c
    4722:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4726:	f3c6 1681 	ubfx	r6, r6, #6, #2
    472a:	fa5f f883 	uxtb.w	r8, r3
    472e:	fa5f fc8c 	uxtb.w	ip, ip
    4732:	3601      	adds	r6, #1
    4734:	f10e 0314 	add.w	r3, lr, #20
    4738:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    473c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4740:	f8cd c000 	str.w	ip, [sp]
    4744:	f8cd 8004 	str.w	r8, [sp, #4]
    4748:	9602      	str	r6, [sp, #8]
    474a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    474e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4752:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4754:	802f      	strh	r7, [r5, #0]
    4756:	f7ff fcc1 	bl	40dc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    475a:	e56d      	b.n	4238 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    475c:	2b00      	cmp	r3, #0
    475e:	d040      	beq.n	47e2 <fire(LEDStruct&)+0x5be>
    4760:	4625      	mov	r5, r4
    4762:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4766:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    476a:	4630      	mov	r0, r6
    476c:	f005 fc54 	bl	a018 <HeatColor(unsigned char)>
    4770:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4774:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4778:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    477c:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4780:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4784:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4788:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    478c:	f108 0801 	add.w	r8, r8, #1
    4790:	4543      	cmp	r3, r8
    4792:	f1a5 0503 	sub.w	r5, r5, #3
    4796:	dce6      	bgt.n	4766 <fire(LEDStruct&)+0x542>
    4798:	e63e      	b.n	4418 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    479a:	4690      	mov	r8, r2
    479c:	2b00      	cmp	r3, #0
    479e:	f43f ae51 	beq.w	4444 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    47a2:	334b      	adds	r3, #75	; 0x4b
    47a4:	ebc8 0503 	rsb	r5, r8, r3
    47a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    47ac:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    47b0:	4630      	mov	r0, r6
    47b2:	f005 fc31 	bl	a018 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    47b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    47ba:	5563      	strb	r3, [r4, r5]
    47bc:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    47be:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    47c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    47c6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    47c8:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    47ca:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    47ce:	f108 0801 	add.w	r8, r8, #1
    47d2:	4543      	cmp	r3, r8
    47d4:	dce5      	bgt.n	47a2 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    47d6:	b006      	add	sp, #24
    47d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    47dc:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    47e0:	b163      	cbz	r3, 47fc <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    47e2:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    47e6:	2b00      	cmp	r3, #0
    47e8:	f47f ae1b 	bne.w	4422 <fire(LEDStruct&)+0x1fe>
    47ec:	e62a      	b.n	4444 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    47ee:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    47f2:	b10a      	cbz	r2, 47f8 <fire(LEDStruct&)+0x5d4>
    47f4:	882a      	ldrh	r2, [r5, #0]
    47f6:	e554      	b.n	42a2 <fire(LEDStruct&)+0x7e>
    47f8:	882a      	ldrh	r2, [r5, #0]
    47fa:	e66d      	b.n	44d8 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    47fc:	f1bc 0f00 	cmp.w	ip, #0
    4800:	f47f ae0f 	bne.w	4422 <fire(LEDStruct&)+0x1fe>
    4804:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4808:	e6bc      	b.n	4584 <fire(LEDStruct&)+0x360>
    480a:	bf00      	nop

0000480c <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4810:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4814:	4dd0      	ldr	r5, [pc, #832]	; (4b58 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4816:	b087      	sub	sp, #28
    4818:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    481a:	2b00      	cmp	r3, #0
    481c:	f000 81da 	beq.w	4bd4 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    4820:	4bce      	ldr	r3, [pc, #824]	; (4b5c <torch(LEDStruct&)+0x350>)
    4822:	781b      	ldrb	r3, [r3, #0]
    4824:	2b00      	cmp	r3, #0
    4826:	f040 8242 	bne.w	4cae <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    482a:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    482e:	4663      	mov	r3, ip
    4830:	f1bc 0f00 	cmp.w	ip, #0
    4834:	f000 823f 	beq.w	4cb6 <torch(LEDStruct&)+0x4aa>
    4838:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    483c:	882a      	ldrh	r2, [r5, #0]
    483e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4842:	004f      	lsls	r7, r1, #1
    4844:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4848:	fb97 f7fc 	sdiv	r7, r7, ip
    484c:	3702      	adds	r7, #2
    484e:	b2ff      	uxtb	r7, r7
    4850:	44a6      	add	lr, r4
    4852:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4856:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    485a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    485e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4862:	3219      	adds	r2, #25
    4864:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4866:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    486a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    486e:	b2c9      	uxtb	r1, r1
    4870:	fb11 f107 	smulbb	r1, r1, r7
    4874:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4878:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    487c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    487e:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4880:	d1e9      	bne.n	4856 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4882:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4886:	802a      	strh	r2, [r5, #0]
    4888:	2e00      	cmp	r6, #0
    488a:	f000 816b 	beq.w	4b64 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    488e:	f1ac 0703 	sub.w	r7, ip, #3
    4892:	2f01      	cmp	r7, #1
    4894:	f04f 0901 	mov.w	r9, #1
    4898:	dd1a      	ble.n	48d0 <torch(LEDStruct&)+0xc4>
    489a:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    489e:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    48a2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 4b60 <torch(LEDStruct&)+0x354>
    48a6:	4420      	add	r0, r4
    48a8:	4426      	add	r6, r4
    48aa:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    48ae:	7801      	ldrb	r1, [r0, #0]
    48b0:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    48b4:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    48b8:	fb88 ba01 	smull	fp, sl, r8, r1
    48bc:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    48c0:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    48c2:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    48c6:	d1f2      	bne.n	48ae <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    48c8:	f1b9 0f00 	cmp.w	r9, #0
    48cc:	f000 812c 	beq.w	4b28 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    48d0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    48d4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    48d8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    48dc:	3219      	adds	r2, #25
    48de:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    48e0:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    48e4:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    48e8:	802a      	strh	r2, [r5, #0]
    48ea:	b2c0      	uxtb	r0, r0
    48ec:	4286      	cmp	r6, r0
    48ee:	499a      	ldr	r1, [pc, #616]	; (4b58 <torch(LEDStruct&)+0x34c>)
    48f0:	d928      	bls.n	4944 <torch(LEDStruct&)+0x138>
    48f2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    48f6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    48fa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    48fe:	3219      	adds	r2, #25
    4900:	b292      	uxth	r2, r2
    4902:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4906:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    490a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    490e:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4910:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4914:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4916:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4918:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    491c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4920:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4922:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4926:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    492a:	800e      	strh	r6, [r1, #0]
    492c:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4930:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4934:	1200      	asrs	r0, r0, #8
    4936:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    493a:	4630      	mov	r0, r6
    493c:	fa80 f051 	uqadd8	r0, r0, r1
    4940:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4944:	f1b9 0f00 	cmp.w	r9, #0
    4948:	d112      	bne.n	4970 <torch(LEDStruct&)+0x164>
    494a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    494c:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4950:	4981      	ldr	r1, [pc, #516]	; (4b58 <torch(LEDStruct&)+0x34c>)
    4952:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4956:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    495a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    495e:	3219      	adds	r2, #25
    4960:	b292      	uxth	r2, r2
    4962:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4966:	b2c0      	uxtb	r0, r0
    4968:	4286      	cmp	r6, r0
    496a:	802a      	strh	r2, [r5, #0]
    496c:	f200 80af 	bhi.w	4ace <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4970:	f1bc 0f00 	cmp.w	ip, #0
    4974:	f000 81a4 	beq.w	4cc0 <torch(LEDStruct&)+0x4b4>
    4978:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    497c:	2600      	movs	r6, #0
    497e:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4982:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    4986:	199d      	adds	r5, r3, r6
    4988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    498c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4990:	4648      	mov	r0, r9
    4992:	f005 fb41 	bl	a018 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4996:	f89d 3014 	ldrb.w	r3, [sp, #20]
    499a:	5563      	strb	r3, [r4, r5]
    499c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    499e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    49a2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    49a6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    49a8:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    49aa:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    49ae:	3601      	adds	r6, #1
    49b0:	42b3      	cmp	r3, r6
    49b2:	dce6      	bgt.n	4982 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    49b4:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    49b8:	2e00      	cmp	r6, #0
    49ba:	d175      	bne.n	4aa8 <torch(LEDStruct&)+0x29c>
    49bc:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    49c0:	2b00      	cmp	r3, #0
    49c2:	f000 8183 	beq.w	4ccc <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    49c6:	334a      	adds	r3, #74	; 0x4a
    49c8:	1b9d      	subs	r5, r3, r6
    49ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    49ce:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    49d2:	4648      	mov	r0, r9
    49d4:	f005 fb20 	bl	a018 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    49d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    49dc:	5563      	strb	r3, [r4, r5]
    49de:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    49e0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    49e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    49e8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    49ea:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    49ec:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    49f0:	3601      	adds	r6, #1
    49f2:	42b3      	cmp	r3, r6
    49f4:	dce7      	bgt.n	49c6 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    49f6:	2b4b      	cmp	r3, #75	; 0x4b
    49f8:	d047      	beq.n	4a8a <torch(LEDStruct&)+0x27e>
    49fa:	f10d 0914 	add.w	r9, sp, #20
    49fe:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    4a02:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4a04:	4626      	mov	r6, r4
    4a06:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4a08:	f04f 0a01 	mov.w	sl, #1
    4a0c:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4a10:	f8cd a000 	str.w	sl, [sp]
    4a14:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4a18:	fb98 f3f3 	sdiv	r3, r8, r3
    4a1c:	441a      	add	r2, r3
    4a1e:	b2d2      	uxtb	r2, r2
    4a20:	23ff      	movs	r3, #255	; 0xff
    4a22:	4659      	mov	r1, fp
    4a24:	4648      	mov	r0, r9
    4a26:	f005 fb19 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a2a:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a2e:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4a32:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a36:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4a38:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4a3a:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4a3c:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4a40:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    4a44:	fb98 f8f2 	sdiv	r8, r8, r2
    4a48:	eb08 0203 	add.w	r2, r8, r3
    4a4c:	b2d2      	uxtb	r2, r2
    4a4e:	23ff      	movs	r3, #255	; 0xff
    4a50:	4659      	mov	r1, fp
    4a52:	f8cd a000 	str.w	sl, [sp]
    4a56:	4648      	mov	r0, r9
    4a58:	f005 fb00 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4a5c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4a60:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a64:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a68:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a6c:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    4a70:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4a74:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a78:	3501      	adds	r5, #1
    4a7a:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    4a7e:	42aa      	cmp	r2, r5
    4a80:	f106 0603 	add.w	r6, r6, #3
    4a84:	f1a7 0703 	sub.w	r7, r7, #3
    4a88:	dcc0      	bgt.n	4a0c <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    4a8a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a8e:	2b00      	cmp	r3, #0
    4a90:	f040 8096 	bne.w	4bc0 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    4a94:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4a98:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    4a9c:	1a9b      	subs	r3, r3, r2
    4a9e:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    4aa2:	b007      	add	sp, #28
    4aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4aa8:	4621      	mov	r1, r4
    4aaa:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4aae:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ab0:	7810      	ldrb	r0, [r2, #0]
    4ab2:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    4ab6:	7850      	ldrb	r0, [r2, #1]
    4ab8:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    4abc:	7890      	ldrb	r0, [r2, #2]
    4abe:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    4ac2:	3203      	adds	r2, #3
    4ac4:	4295      	cmp	r5, r2
    4ac6:	f1a1 0103 	sub.w	r1, r1, #3
    4aca:	d1f1      	bne.n	4ab0 <torch(LEDStruct&)+0x2a4>
    4acc:	e793      	b.n	49f6 <torch(LEDStruct&)+0x1ea>
    4ace:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4ad2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4ad6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ada:	3219      	adds	r2, #25
    4adc:	b292      	uxth	r2, r2
    4ade:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4ae2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4ae6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4aea:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4aec:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4af0:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4af2:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4af4:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4af8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4afc:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4afe:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4b02:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4b06:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4b0a:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b0e:	800d      	strh	r5, [r1, #0]
    4b10:	1201      	asrs	r1, r0, #8
    4b12:	3960      	subs	r1, #96	; 0x60
    4b14:	4630      	mov	r0, r6
    4b16:	fa80 f051 	uqadd8	r0, r0, r1
    4b1a:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4b1e:	f1bc 0f00 	cmp.w	ip, #0
    4b22:	f47f af29 	bne.w	4978 <torch(LEDStruct&)+0x16c>
    4b26:	e0cf      	b.n	4cc8 <torch(LEDStruct&)+0x4bc>
    4b28:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    4b2c:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4b30:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4b60 <torch(LEDStruct&)+0x354>
    4b34:	4426      	add	r6, r4
    4b36:	44a6      	add	lr, r4
    4b38:	7831      	ldrb	r1, [r6, #0]
    4b3a:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    4b3e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4b42:	fb88 a001 	smull	sl, r0, r8, r1
    4b46:	3f01      	subs	r7, #1
    4b48:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b4c:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4b4e:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b52:	d1f1      	bne.n	4b38 <torch(LEDStruct&)+0x32c>
    4b54:	e6bc      	b.n	48d0 <torch(LEDStruct&)+0xc4>
    4b56:	bf00      	nop
    4b58:	1fff875e 	.word	0x1fff875e
    4b5c:	1fff95dd 	.word	0x1fff95dd
    4b60:	55555556 	.word	0x55555556
    4b64:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4b68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4b6c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4b70:	fb9e fefc 	sdiv	lr, lr, ip
    4b74:	f10e 0e02 	add.w	lr, lr, #2
    4b78:	fa5f fe8e 	uxtb.w	lr, lr
    4b7c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4b80:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4b84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b88:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b8c:	3219      	adds	r2, #25
    4b8e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b90:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4b94:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4b98:	b2c9      	uxtb	r1, r1
    4b9a:	fb11 f10e 	smulbb	r1, r1, lr
    4b9e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4ba2:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4ba4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4ba8:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4baa:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4bac:	dbe8      	blt.n	4b80 <torch(LEDStruct&)+0x374>
    4bae:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4bb0:	f1ac 0703 	sub.w	r7, ip, #3
    4bb4:	2f01      	cmp	r7, #1
    4bb6:	f04f 0900 	mov.w	r9, #0
    4bba:	f73f ae6e 	bgt.w	489a <torch(LEDStruct&)+0x8e>
    4bbe:	e687      	b.n	48d0 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    4bc0:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4bc4:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    4bc8:	4413      	add	r3, r2
    4bca:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    4bce:	b007      	add	sp, #28
    4bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bd4:	882b      	ldrh	r3, [r5, #0]
    4bd6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4bda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4bde:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4be2:	3119      	adds	r1, #25
    4be4:	b289      	uxth	r1, r1
    4be6:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4bea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4bee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4bf2:	3219      	adds	r2, #25
    4bf4:	b292      	uxth	r2, r2
    4bf6:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4bfa:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4bfe:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4c02:	f10e 0e19 	add.w	lr, lr, #25
    4c06:	fa1f fe8e 	uxth.w	lr, lr
    4c0a:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4c0e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4c12:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4c16:	3619      	adds	r6, #25
    4c18:	b2b6      	uxth	r6, r6
    4c1a:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4c1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4c22:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c26:	3319      	adds	r3, #25
    4c28:	b29b      	uxth	r3, r3
    4c2a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4c2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c32:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4c36:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c3a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c3e:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4c42:	b2f6      	uxtb	r6, r6
    4c44:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c48:	3719      	adds	r7, #25
    4c4a:	b2db      	uxtb	r3, r3
    4c4c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4c50:	b2bf      	uxth	r7, r7
    4c52:	11b6      	asrs	r6, r6, #6
    4c54:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4c58:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4c5c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4c60:	119b      	asrs	r3, r3, #6
    4c62:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c66:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4c6a:	333c      	adds	r3, #60	; 0x3c
    4c6c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4c70:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4c74:	fa5f fc8c 	uxtb.w	ip, ip
    4c78:	fa5f f883 	uxtb.w	r8, r3
    4c7c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4c80:	f10e 0314 	add.w	r3, lr, #20
    4c84:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4c88:	3601      	adds	r6, #1
    4c8a:	f8cd c000 	str.w	ip, [sp]
    4c8e:	f8cd 8004 	str.w	r8, [sp, #4]
    4c92:	9602      	str	r6, [sp, #8]
    4c94:	b2db      	uxtb	r3, r3
    4c96:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4c9a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c9e:	802f      	strh	r7, [r5, #0]
    4ca0:	f7ff fa1c 	bl	40dc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    4ca4:	4b0b      	ldr	r3, [pc, #44]	; (4cd4 <torch(LEDStruct&)+0x4c8>)
    4ca6:	781b      	ldrb	r3, [r3, #0]
    4ca8:	2b00      	cmp	r3, #0
    4caa:	f43f adbe 	beq.w	482a <torch(LEDStruct&)+0x1e>
    4cae:	4620      	mov	r0, r4
    4cb0:	f7ff fa7e 	bl	41b0 <fire_update(LEDStruct&)>
    4cb4:	e5b9      	b.n	482a <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4cb6:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    4cba:	b14a      	cbz	r2, 4cd0 <torch(LEDStruct&)+0x4c4>
    4cbc:	882a      	ldrh	r2, [r5, #0]
    4cbe:	e5e6      	b.n	488e <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4cc0:	f1b9 0f00 	cmp.w	r9, #0
    4cc4:	f47f aef0 	bne.w	4aa8 <torch(LEDStruct&)+0x29c>
    4cc8:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4ccc:	2300      	movs	r3, #0
    4cce:	e696      	b.n	49fe <torch(LEDStruct&)+0x1f2>
    4cd0:	882a      	ldrh	r2, [r5, #0]
    4cd2:	e76d      	b.n	4bb0 <torch(LEDStruct&)+0x3a4>
    4cd4:	1fff95dd 	.word	0x1fff95dd

00004cd8 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4cd8:	4b0e      	ldr	r3, [pc, #56]	; (4d14 <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    4cda:	4a0f      	ldr	r2, [pc, #60]	; (4d18 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    4cdc:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    4cde:	2100      	movs	r1, #0
    4ce0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4ce2:	b13b      	cbz	r3, 4cf4 <confetti_update(LEDStruct&)+0x1c>
    4ce4:	2b01      	cmp	r3, #1
    4ce6:	d103      	bne.n	4cf0 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    4ce8:	4b0c      	ldr	r3, [pc, #48]	; (4d1c <confetti_update(LEDStruct&)+0x44>)
    4cea:	881b      	ldrh	r3, [r3, #0]
    4cec:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    4cf0:	f7fd b9dc 	b.w	20ac <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    4cf4:	4b09      	ldr	r3, [pc, #36]	; (4d1c <confetti_update(LEDStruct&)+0x44>)
    4cf6:	881b      	ldrh	r3, [r3, #0]
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	bf14      	ite	ne
    4cfc:	2301      	movne	r3, #1
    4cfe:	2300      	moveq	r3, #0
    4d00:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4d04:	bf14      	ite	ne
    4d06:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4d08:	234b      	moveq	r3, #75	; 0x4b
    4d0a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    4d0e:	f7fd b9cd 	b.w	20ac <LEDDebug(LEDStruct&)>
    4d12:	bf00      	nop
    4d14:	1fff9e2c 	.word	0x1fff9e2c
    4d18:	1fff95dd 	.word	0x1fff95dd
    4d1c:	1fff9e24 	.word	0x1fff9e24

00004d20 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    4d20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    4d22:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4d26:	4e4b      	ldr	r6, [pc, #300]	; (4e54 <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    4d28:	b085      	sub	sp, #20
    4d2a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    4d2c:	bb8b      	cbnz	r3, 4d92 <confetti(LEDStruct&)+0x72>
    4d2e:	8833      	ldrh	r3, [r6, #0]
    4d30:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d38:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d3c:	3319      	adds	r3, #25
    4d3e:	b29b      	uxth	r3, r3
    4d40:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4d44:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4d48:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4d4c:	3119      	adds	r1, #25
    4d4e:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d50:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4d54:	b2d2      	uxtb	r2, r2
    4d56:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    4d5a:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d5c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    4d60:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4d62:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4d64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    4d68:	2714      	movs	r7, #20
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    4d6a:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d6c:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4d6e:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    4d70:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    4d74:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    4d78:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    4d7c:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    4d80:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4d84:	2b00      	cmp	r3, #0
    4d86:	d15c      	bne.n	4e42 <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    4d88:	234b      	movs	r3, #75	; 0x4b
    4d8a:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    4d8e:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4d92:	4b31      	ldr	r3, [pc, #196]	; (4e58 <confetti(LEDStruct&)+0x138>)
    4d94:	781b      	ldrb	r3, [r3, #0]
    4d96:	2b00      	cmp	r3, #0
    4d98:	d157      	bne.n	4e4a <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    4d9a:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    4d9e:	4620      	mov	r0, r4
    4da0:	2196      	movs	r1, #150	; 0x96
    4da2:	f005 f8fb 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4da6:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    4da8:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4dac:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    4db0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4db4:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    4db8:	3319      	adds	r3, #25
    4dba:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4dbc:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4dc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    4dc4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4dc8:	3719      	adds	r7, #25
    4dca:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    4dcc:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    4dd0:	fb03 f305 	mul.w	r3, r3, r5
    4dd4:	2101      	movs	r1, #1
    4dd6:	0c1d      	lsrs	r5, r3, #16
    4dd8:	9100      	str	r1, [sp, #0]
    4dda:	a803      	add	r0, sp, #12
    4ddc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    4de0:	b2d2      	uxtb	r2, r2
    4de2:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4de4:	8037      	strh	r7, [r6, #0]
    4de6:	f005 f939 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4dea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4dee:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4df0:	5ce2      	ldrb	r2, [r4, r3]
    4df2:	f89d 000c 	ldrb.w	r0, [sp, #12]
    4df6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4dfa:	54e2      	strb	r2, [r4, r3]
    4dfc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4e00:	784a      	ldrb	r2, [r1, #1]
    4e02:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4e06:	704a      	strb	r2, [r1, #1]
    4e08:	788b      	ldrb	r3, [r1, #2]
    4e0a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    4e0e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4e12:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    4e14:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4e18:	b98b      	cbnz	r3, 4e3e <confetti(LEDStruct&)+0x11e>
    4e1a:	4620      	mov	r0, r4
    4e1c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4e20:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4e22:	781a      	ldrb	r2, [r3, #0]
    4e24:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4e28:	785a      	ldrb	r2, [r3, #1]
    4e2a:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4e2e:	789a      	ldrb	r2, [r3, #2]
    4e30:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4e34:	3303      	adds	r3, #3
    4e36:	428b      	cmp	r3, r1
    4e38:	f1a0 0003 	sub.w	r0, r0, #3
    4e3c:	d1f1      	bne.n	4e22 <confetti(LEDStruct&)+0x102>
}
    4e3e:	b005      	add	sp, #20
    4e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4e42:	2396      	movs	r3, #150	; 0x96
    4e44:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    4e48:	e7a1      	b.n	4d8e <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4e4a:	4620      	mov	r0, r4
    4e4c:	f7ff ff44 	bl	4cd8 <confetti_update(LEDStruct&)>
    4e50:	e7a3      	b.n	4d9a <confetti(LEDStruct&)+0x7a>
    4e52:	bf00      	nop
    4e54:	1fff875e 	.word	0x1fff875e
    4e58:	1fff95dd 	.word	0x1fff95dd

00004e5c <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4e5c:	4b24      	ldr	r3, [pc, #144]	; (4ef0 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4e5e:	4a25      	ldr	r2, [pc, #148]	; (4ef4 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    4e60:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4e62:	2100      	movs	r1, #0
    4e64:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4e66:	2b09      	cmp	r3, #9
    4e68:	d80a      	bhi.n	4e80 <one_sin_update(LEDStruct&)+0x24>
    4e6a:	e8df f003 	tbb	[pc, r3]
    4e6e:	1e10      	.short	0x1e10
    4e70:	322d2823 	.word	0x322d2823
    4e74:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    4e78:	4b1f      	ldr	r3, [pc, #124]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4e7a:	881b      	ldrh	r3, [r3, #0]
    4e7c:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    4e80:	f7fd b914 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    4e84:	4b1c      	ldr	r3, [pc, #112]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4e86:	881b      	ldrh	r3, [r3, #0]
    4e88:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    4e8c:	e7f8      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4e8e:	4b1a      	ldr	r3, [pc, #104]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4e90:	881b      	ldrh	r3, [r3, #0]
    4e92:	2b00      	cmp	r3, #0
    4e94:	bf14      	ite	ne
    4e96:	2301      	movne	r3, #1
    4e98:	2300      	moveq	r3, #0
    4e9a:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4e9e:	bf14      	ite	ne
    4ea0:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4ea2:	234b      	moveq	r3, #75	; 0x4b
    4ea4:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4ea8:	e7ea      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    4eaa:	4b13      	ldr	r3, [pc, #76]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4eac:	881b      	ldrh	r3, [r3, #0]
    4eae:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    4eb2:	e7e5      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    4eb4:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4eb6:	881b      	ldrh	r3, [r3, #0]
    4eb8:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    4ebc:	e7e0      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    4ebe:	4b0e      	ldr	r3, [pc, #56]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4ec0:	881b      	ldrh	r3, [r3, #0]
    4ec2:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    4ec6:	e7db      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    4ec8:	4b0b      	ldr	r3, [pc, #44]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4eca:	881b      	ldrh	r3, [r3, #0]
    4ecc:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    4ed0:	e7d6      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    4ed2:	4b09      	ldr	r3, [pc, #36]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4ed4:	881b      	ldrh	r3, [r3, #0]
    4ed6:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    4eda:	e7d1      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    4edc:	4b06      	ldr	r3, [pc, #24]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4ede:	881b      	ldrh	r3, [r3, #0]
    4ee0:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    4ee4:	e7cc      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    4ee6:	4b04      	ldr	r3, [pc, #16]	; (4ef8 <one_sin_update(LEDStruct&)+0x9c>)
    4ee8:	881b      	ldrh	r3, [r3, #0]
    4eea:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    4eee:	e7c7      	b.n	4e80 <one_sin_update(LEDStruct&)+0x24>
    4ef0:	1fff9e2c 	.word	0x1fff9e2c
    4ef4:	1fff95dd 	.word	0x1fff95dd
    4ef8:	1fff9e24 	.word	0x1fff9e24

00004efc <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4f00:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4f04:	b085      	sub	sp, #20
    4f06:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4f08:	2b00      	cmp	r3, #0
    4f0a:	f040 80be 	bne.w	508a <one_sin(LEDStruct&)+0x18e>
    4f0e:	f8df c32c 	ldr.w	ip, [pc, #812]	; 523c <one_sin(LEDStruct&)+0x340>
    4f12:	f8bc 3000 	ldrh.w	r3, [ip]
    4f16:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    4f1a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    4f1e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4f22:	3619      	adds	r6, #25
    4f24:	b2b6      	uxth	r6, r6
    4f26:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    4f2a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    4f2e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4f32:	3119      	adds	r1, #25
    4f34:	b289      	uxth	r1, r1
    4f36:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    4f3a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    4f3e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4f42:	3519      	adds	r5, #25
    4f44:	b2ad      	uxth	r5, r5
    4f46:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    4f4a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4f4e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4f52:	3319      	adds	r3, #25
    4f54:	b29b      	uxth	r3, r3
    4f56:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4f5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    4f5e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4f62:	3719      	adds	r7, #25
    4f64:	b2bf      	uxth	r7, r7
    4f66:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    4f6a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    4f6e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4f72:	3019      	adds	r0, #25
    4f74:	b280      	uxth	r0, r0
    4f76:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    4f7a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    4f7e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4f82:	3219      	adds	r2, #25
    4f84:	b292      	uxth	r2, r2
    4f86:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4f8a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4f8e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4f92:	f10e 0e19 	add.w	lr, lr, #25
    4f96:	fa1f fe8e 	uxth.w	lr, lr
    4f9a:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    4f9e:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    4fa2:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fa6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4faa:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4fae:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4fb2:	f108 0819 	add.w	r8, r8, #25
    4fb6:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4fba:	b2db      	uxtb	r3, r3
    4fbc:	b2c9      	uxtb	r1, r1
    4fbe:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fc0:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4fc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4fc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4fcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4fd0:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    4fd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fd8:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fdc:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4fe0:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4fe2:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4fe6:	119b      	asrs	r3, r3, #6
    4fe8:	3101      	adds	r1, #1
    4fea:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4fee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ff2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4ff6:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ffa:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4ffc:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5000:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5004:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5008:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    500c:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5014:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5018:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    501c:	f04f 0815 	mov.w	r8, #21
    5020:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5022:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5026:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5028:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    502a:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    502e:	fa5f f989 	uxtb.w	r9, r9
    5032:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5034:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5038:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    503a:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    503e:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    5042:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5046:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    504a:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    504e:	2e00      	cmp	r6, #0
    5050:	f040 80e8 	bne.w	5224 <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    5054:	224b      	movs	r2, #75	; 0x4b
    5056:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    505a:	4d76      	ldr	r5, [pc, #472]	; (5234 <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    505c:	f884 a33f 	strb.w	sl, [r4, #831]	; 0x33f
	leds.sin_speed		= ss + (saf/5);
    5060:	fba5 2503 	umull	r2, r5, r5, r3
    5064:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5068:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    506a:	f884 9341 	strb.w	r9, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    506e:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    5072:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    5076:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    507a:	f884 e34f 	strb.w	lr, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    507e:	f884 c350 	strb.w	ip, [r4, #848]	; 0x350
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5082:	f884 2340 	strb.w	r2, [r4, #832]	; 0x340
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5086:	f884 1345 	strb.w	r1, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    508a:	4b6b      	ldr	r3, [pc, #428]	; (5238 <one_sin(LEDStruct&)+0x33c>)
    508c:	781b      	ldrb	r3, [r3, #0]
    508e:	2b00      	cmp	r3, #0
    5090:	f040 80cc 	bne.w	522c <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    5094:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    5098:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    509c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    50a0:	440b      	add	r3, r1
    50a2:	b2db      	uxtb	r3, r3
    50a4:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    50a8:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    50ac:	2a00      	cmp	r2, #0
    50ae:	f000 80b1 	beq.w	5214 <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    50b2:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    50b6:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    50ba:	4413      	add	r3, r2
    50bc:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    50c0:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    50c4:	2b00      	cmp	r3, #0
    50c6:	f000 808e 	beq.w	51e6 <one_sin(LEDStruct&)+0x2ea>
    50ca:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    50ce:	4625      	mov	r5, r4
    50d0:	1c67      	adds	r7, r4, #1
    50d2:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    50d4:	f04f 08ff 	mov.w	r8, #255	; 0xff
    50d8:	e05c      	b.n	5194 <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    50da:	2900      	cmp	r1, #0
        in = 255 - in;
    50dc:	bfbc      	itt	lt
    50de:	43d2      	mvnlt	r2, r2
    50e0:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    50e2:	0052      	lsls	r2, r2, #1
    50e4:	b2d2      	uxtb	r2, r2
    50e6:	1c53      	adds	r3, r2, #1
    50e8:	fb03 f202 	mul.w	r2, r3, r2
    50ec:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    50ee:	fb02 f303 	mul.w	r3, r2, r3
    50f2:	121b      	asrs	r3, r3, #8
    50f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    50f8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    50fc:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    50fe:	05d3      	lsls	r3, r2, #23
    5100:	bf54      	ite	pl
    5102:	fa5f fb82 	uxtbpl.w	fp, r2
    5106:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    510a:	ebc0 0b0b 	rsb	fp, r0, fp
    510e:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    5112:	f894 2350 	ldrb.w	r2, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5116:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
    511a:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    511e:	4629      	mov	r1, r5
    5120:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5122:	f88d 300c 	strb.w	r3, [sp, #12]
    5126:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    512a:	f005 f995 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    512e:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    5132:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    5136:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    513a:	9100      	str	r1, [sp, #0]
    513c:	fb02 320a 	mla	r2, r2, sl, r3
    5140:	b2d2      	uxtb	r2, r2
    5142:	465b      	mov	r3, fp
    5144:	4649      	mov	r1, r9
    5146:	a803      	add	r0, sp, #12
    5148:	f004 ff88 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    514c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    5150:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5154:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5158:	f807 3c01 	strb.w	r3, [r7, #-1]
    515c:	786a      	ldrb	r2, [r5, #1]
    515e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5162:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5166:	706a      	strb	r2, [r5, #1]
    5168:	78ab      	ldrb	r3, [r5, #2]
    516a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    516e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5172:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    5174:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    5178:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    517c:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    5180:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5182:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5184:	42b2      	cmp	r2, r6
    5186:	f105 0503 	add.w	r5, r5, #3
    518a:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    518e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5192:	dd28      	ble.n	51e6 <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    5194:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    5198:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    519c:	fa5f fa86 	uxtb.w	sl, r6
    51a0:	fb03 220a 	mla	r2, r3, sl, r2
    51a4:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    51a6:	b251      	sxtb	r1, r2
    51a8:	2900      	cmp	r1, #0
        in = 255 - in;
    51aa:	bfba      	itte	lt
    51ac:	43d3      	mvnlt	r3, r2
    51ae:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    51b0:	4613      	movge	r3, r2
    51b2:	005b      	lsls	r3, r3, #1
    51b4:	b2db      	uxtb	r3, r3
    51b6:	1c58      	adds	r0, r3, #1
    51b8:	fb00 f303 	mul.w	r3, r0, r3
    51bc:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    51be:	fb03 f000 	mul.w	r0, r3, r0
    51c2:	1200      	asrs	r0, r0, #8
    51c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    51c8:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    51cc:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    51ce:	05d8      	lsls	r0, r3, #23
    51d0:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    51d4:	bf54      	ite	pl
    51d6:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    51d8:	23ff      	movmi	r3, #255	; 0xff
    51da:	4298      	cmp	r0, r3
    51dc:	f4ff af7d 	bcc.w	50da <one_sin(LEDStruct&)+0x1de>
    51e0:	f04f 0b00 	mov.w	fp, #0
    51e4:	e795      	b.n	5112 <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    51e6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    51ea:	b983      	cbnz	r3, 520e <one_sin(LEDStruct&)+0x312>
    51ec:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    51f0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    51f2:	7822      	ldrb	r2, [r4, #0]
    51f4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    51f8:	7862      	ldrb	r2, [r4, #1]
    51fa:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    51fe:	78a2      	ldrb	r2, [r4, #2]
    5200:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    5204:	3403      	adds	r4, #3
    5206:	42a1      	cmp	r1, r4
    5208:	f1a3 0303 	sub.w	r3, r3, #3
    520c:	d1f1      	bne.n	51f2 <one_sin(LEDStruct&)+0x2f6>
}
    520e:	b005      	add	sp, #20
    5210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    5214:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    5218:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    521c:	1a9b      	subs	r3, r3, r2
    521e:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    5222:	e74d      	b.n	50c0 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5224:	2296      	movs	r2, #150	; 0x96
    5226:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
    522a:	e716      	b.n	505a <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    522c:	4620      	mov	r0, r4
    522e:	f7ff fe15 	bl	4e5c <one_sin_update(LEDStruct&)>
    5232:	e72f      	b.n	5094 <one_sin(LEDStruct&)+0x198>
    5234:	cccccccd 	.word	0xcccccccd
    5238:	1fff95dd 	.word	0x1fff95dd
    523c:	1fff875e 	.word	0x1fff875e

00005240 <prepare_for_explosion(LEDStruct&)>:
		case 0:	leds.use_overlay = (bool)update_arg;	break; //a
		default:	break;
	}
}

void prepare_for_explosion(LEDStruct& leds) {
    5240:	b570      	push	{r4, r5, r6, lr}
    5242:	4604      	mov	r4, r0
    5244:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    5246:	4d1b      	ldr	r5, [pc, #108]	; (52b4 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5248:	2002      	movs	r0, #2
    524a:	f005 fd73 	bl	ad34 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    524e:	882b      	ldrh	r3, [r5, #0]
    5250:	4418      	add	r0, r3
    5252:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    5256:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    525a:	f243 6319 	movw	r3, #13849	; 0x3619
    525e:	4418      	add	r0, r3
    5260:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5262:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5266:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    526a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    526e:	b2d2      	uxtb	r2, r2
    5270:	4403      	add	r3, r0
    5272:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5276:	b29b      	uxth	r3, r3
    5278:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    527a:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    527c:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	}
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5280:	321b      	adds	r2, #27
    5282:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    5286:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    528a:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    528e:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    5292:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5296:	4620      	mov	r0, r4
    5298:	aa01      	add	r2, sp, #4
    529a:	2196      	movs	r1, #150	; 0x96
    529c:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    529e:	f88d 6004 	strb.w	r6, [sp, #4]
    52a2:	f88d 6005 	strb.w	r6, [sp, #5]
    52a6:	f88d 6006 	strb.w	r6, [sp, #6]
    52aa:	f004 fdb5 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
}
    52ae:	b002      	add	sp, #8
    52b0:	bd70      	pop	{r4, r5, r6, pc}
    52b2:	bf00      	nop
    52b4:	1fff875e 	.word	0x1fff875e

000052b8 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    52b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    52bc:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    52c0:	b087      	sub	sp, #28
    52c2:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    52c4:	2b00      	cmp	r3, #0
    52c6:	f000 8089 	beq.w	53dc <fadeup(LEDStruct&)+0x124>
    52ca:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    52ce:	9303      	str	r3, [sp, #12]
    52d0:	4606      	mov	r6, r0
    52d2:	4618      	mov	r0, r3
    52d4:	4b5d      	ldr	r3, [pc, #372]	; (544c <fadeup(LEDStruct&)+0x194>)
    52d6:	881b      	ldrh	r3, [r3, #0]
    52d8:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    52dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    52e0:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    52e4:	3419      	adds	r4, #25
    52e6:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52e8:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52ec:	b2db      	uxtb	r3, r3
    52ee:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    52f2:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    52f6:	ea4f 2929 	mov.w	r9, r9, asr #8
    52fa:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    52fe:	2301      	movs	r3, #1
    5300:	fa5f f989 	uxtb.w	r9, r9
    5304:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5308:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    530c:	f008 f8a8 	bl	d460 <__aeabi_ui2f>
    5310:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    5314:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5318:	465b      	mov	r3, fp
    531a:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    531e:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    5322:	46d3      	mov	fp, sl
    5324:	9001      	str	r0, [sp, #4]
    5326:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    532a:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    532c:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    532e:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5332:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5336:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    533a:	3419      	adds	r4, #25
    533c:	b2a4      	uxth	r4, r4
    533e:	2373      	movs	r3, #115	; 0x73
    5340:	fb03 f004 	mul.w	r0, r3, r4
    5344:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    5346:	9b01      	ldr	r3, [sp, #4]
    5348:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    534c:	300a      	adds	r0, #10
    534e:	b280      	uxth	r0, r0
    5350:	f008 f886 	bl	d460 <__aeabi_ui2f>
    5354:	493e      	ldr	r1, [pc, #248]	; (5450 <fadeup(LEDStruct&)+0x198>)
    5356:	f008 f98f 	bl	d678 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    535a:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    535e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5362:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5366:	3319      	adds	r3, #25
    5368:	b29b      	uxth	r3, r3
    536a:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    536e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5372:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5376:	3419      	adds	r4, #25
    5378:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    537a:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    537e:	b2c9      	uxtb	r1, r1
    5380:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5384:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5388:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    538a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    538e:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5390:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    5394:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5398:	b2c8      	uxtb	r0, r1
    539a:	f008 f861 	bl	d460 <__aeabi_ui2f>
    539e:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    53a0:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    53a2:	4a2c      	ldr	r2, [pc, #176]	; (5454 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    53a4:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    53a8:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    53aa:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    53ae:	d8be      	bhi.n	532e <fadeup(LEDStruct&)+0x76>
    53b0:	9a03      	ldr	r2, [sp, #12]
    53b2:	9e02      	ldr	r6, [sp, #8]
    53b4:	4f25      	ldr	r7, [pc, #148]	; (544c <fadeup(LEDStruct&)+0x194>)
    53b6:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    53ba:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    53be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    53c2:	18f5      	adds	r5, r6, r3
    53c4:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    53c6:	22ff      	movs	r2, #255	; 0xff
    53c8:	803c      	strh	r4, [r7, #0]
    53ca:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    53cc:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    53ce:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    53d0:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    53d2:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    53d4:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    53d6:	b007      	add	sp, #28
    53d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    53dc:	9d02      	ldr	r5, [sp, #8]
    53de:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    53e2:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    53e6:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    53ea:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    53ee:	3305      	adds	r3, #5
    53f0:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    53f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    53f6:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    53fa:	4429      	add	r1, r5
    53fc:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    53fe:	24ff      	movs	r4, #255	; 0xff
    5400:	f88d 3016 	strb.w	r3, [sp, #22]
    5404:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5408:	f005 f826 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    540c:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5410:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5414:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    5418:	f88d 3014 	strb.w	r3, [sp, #20]
    541c:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    5420:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5424:	a805      	add	r0, sp, #20
    5426:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5428:	f88d 4015 	strb.w	r4, [sp, #21]
    542c:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5430:	f005 f812 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    5434:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    5438:	2bff      	cmp	r3, #255	; 0xff
    543a:	d1cc      	bne.n	53d6 <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    543c:	9a02      	ldr	r2, [sp, #8]
    543e:	2301      	movs	r3, #1
    5440:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    5444:	b007      	add	sp, #28
    5446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    544a:	bf00      	nop
    544c:	1fff875e 	.word	0x1fff875e
    5450:	42c80000 	.word	0x42c80000
    5454:	437f0000 	.word	0x437f0000

00005458 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    545c:	4b65      	ldr	r3, [pc, #404]	; (55f4 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    545e:	4605      	mov	r5, r0
    5460:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5462:	781a      	ldrb	r2, [r3, #0]
    5464:	2196      	movs	r1, #150	; 0x96
    5466:	f004 fd99 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    546a:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    546e:	2600      	movs	r6, #0
    5470:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5474:	2c00      	cmp	r4, #0
    5476:	d07e      	beq.n	5576 <explosion(LEDStruct&)+0x11e>
    5478:	f8df 9190 	ldr.w	r9, [pc, #400]	; 560c <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    547c:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5480:	e03b      	b.n	54fa <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5482:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    5486:	4650      	mov	r0, sl
    5488:	f007 ff3a 	bl	d300 <__addsf3>
    548c:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    548e:	2100      	movs	r1, #0
    5490:	4638      	mov	r0, r7
    5492:	f008 f9db 	bl	d84c <__aeabi_fcmplt>
    5496:	4958      	ldr	r1, [pc, #352]	; (55f8 <explosion(LEDStruct&)+0x1a0>)
    5498:	2800      	cmp	r0, #0
    549a:	d168      	bne.n	556e <explosion(LEDStruct&)+0x116>
    549c:	4638      	mov	r0, r7
    549e:	f008 f9f3 	bl	d888 <__aeabi_fcmpgt>
    54a2:	b100      	cbz	r0, 54a6 <explosion(LEDStruct&)+0x4e>
    54a4:	4f54      	ldr	r7, [pc, #336]	; (55f8 <explosion(LEDStruct&)+0x1a0>)
    54a6:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    54aa:	4651      	mov	r1, sl
    54ac:	f8d9 0000 	ldr.w	r0, [r9]
    54b0:	f008 f82e 	bl	d510 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    54b4:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    54b8:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    54bc:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    54c0:	f008 f826 	bl	d510 <__aeabi_fmul>
    54c4:	4601      	mov	r1, r0
    54c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    54ca:	f007 ff17 	bl	d2fc <__aeabi_fsub>
    54ce:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    54d2:	f008 f81d 	bl	d510 <__aeabi_fmul>
    54d6:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    54da:	f008 fa05 	bl	d8e8 <__aeabi_f2uiz>
    54de:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    54e2:	b2c0      	uxtb	r0, r0
    54e4:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    54e6:	f106 0601 	add.w	r6, r6, #1
    54ea:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    54ee:	bf38      	it	cc
    54f0:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    54f4:	b2f6      	uxtb	r6, r6
    54f6:	42b3      	cmp	r3, r6
    54f8:	d93b      	bls.n	5572 <explosion(LEDStruct&)+0x11a>
    54fa:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    54fe:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5502:	f008 f9cb 	bl	d89c <__aeabi_f2iz>
    5506:	4607      	mov	r7, r0
    5508:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    550c:	f008 f9ec 	bl	d8e8 <__aeabi_f2uiz>
    5510:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5514:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5518:	a901      	add	r1, sp, #4
    551a:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    551c:	f88d 3000 	strb.w	r3, [sp]
    5520:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5524:	f004 ff98 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5528:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    552c:	1829      	adds	r1, r5, r0
    552e:	5c2b      	ldrb	r3, [r5, r0]
    5530:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5534:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5538:	542b      	strb	r3, [r5, r0]
    553a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    553e:	784a      	ldrb	r2, [r1, #1]
    5540:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5544:	704a      	strb	r2, [r1, #1]
    5546:	788b      	ldrb	r3, [r1, #2]
    5548:	f89d 2006 	ldrb.w	r2, [sp, #6]
    554c:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5550:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    5552:	708b      	strb	r3, [r1, #2]
    5554:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    5558:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    555c:	2b00      	cmp	r3, #0
    555e:	d190      	bne.n	5482 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    5560:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5564:	4651      	mov	r1, sl
    5566:	f007 fec9 	bl	d2fc <__aeabi_fsub>
    556a:	4607      	mov	r7, r0
    556c:	e78f      	b.n	548e <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    556e:	2700      	movs	r7, #0
    5570:	e799      	b.n	54a6 <explosion(LEDStruct&)+0x4e>
    5572:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    5576:	462a      	mov	r2, r5
    5578:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    557c:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    557e:	7819      	ldrb	r1, [r3, #0]
    5580:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    5584:	7859      	ldrb	r1, [r3, #1]
    5586:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    558a:	7899      	ldrb	r1, [r3, #2]
    558c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    5590:	3303      	adds	r3, #3
    5592:	4283      	cmp	r3, r0
    5594:	f1a2 0203 	sub.w	r2, r2, #3
    5598:	d1f1      	bne.n	557e <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    559a:	bb44      	cbnz	r4, 55ee <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    559c:	aa01      	add	r2, sp, #4
    559e:	2196      	movs	r1, #150	; 0x96
    55a0:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    55a2:	f88d 4004 	strb.w	r4, [sp, #4]
    55a6:	f88d 4005 	strb.w	r4, [sp, #5]
    55aa:	f88d 4006 	strb.w	r4, [sp, #6]
    55ae:	f004 fc33 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55b2:	4812      	ldr	r0, [pc, #72]	; (55fc <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    55b4:	4c12      	ldr	r4, [pc, #72]	; (5600 <explosion(LEDStruct&)+0x1a8>)
    55b6:	8803      	ldrh	r3, [r0, #0]
    55b8:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    55ba:	4912      	ldr	r1, [pc, #72]	; (5604 <explosion(LEDStruct&)+0x1ac>)
    55bc:	4a12      	ldr	r2, [pc, #72]	; (5608 <explosion(LEDStruct&)+0x1b0>)
    55be:	9401      	str	r4, [sp, #4]
    55c0:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    55c4:	8809      	ldrh	r1, [r1, #0]
    55c6:	8812      	ldrh	r2, [r2, #0]
    55c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    55d0:	440a      	add	r2, r1
    55d2:	3319      	adds	r3, #25
    55d4:	b29b      	uxth	r3, r3
    55d6:	b292      	uxth	r2, r2
	return ret;
    55d8:	9901      	ldr	r1, [sp, #4]
    55da:	8003      	strh	r3, [r0, #0]
    55dc:	fb03 f302 	mul.w	r3, r3, r2
    55e0:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    55e4:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    55e6:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    55ea:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    55ee:	b002      	add	sp, #8
    55f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    55f4:	1fff8748 	.word	0x1fff8748
    55f8:	42940000 	.word	0x42940000
    55fc:	1fff875e 	.word	0x1fff875e
    5600:	1fffa8c0 	.word	0x1fffa8c0
    5604:	1fff874e 	.word	0x1fff874e
    5608:	1fff874a 	.word	0x1fff874a
    560c:	1fff8758 	.word	0x1fff8758

00005610 <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    5610:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    5612:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    5616:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    5618:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    561a:	d01c      	beq.n	5656 <fireworks_render(LEDStruct&)+0x46>
    561c:	d317      	bcc.n	564e <fireworks_render(LEDStruct&)+0x3e>
    561e:	2b02      	cmp	r3, #2
    5620:	d113      	bne.n	564a <fireworks_render(LEDStruct&)+0x3a>
    5622:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5624:	aa01      	add	r2, sp, #4
    5626:	2196      	movs	r1, #150	; 0x96
    5628:	4604      	mov	r4, r0
    562a:	f88d 3004 	strb.w	r3, [sp, #4]
    562e:	f88d 3005 	strb.w	r3, [sp, #5]
    5632:	f88d 3006 	strb.w	r3, [sp, #6]
    5636:	f004 fbef 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    563a:	4a0b      	ldr	r2, [pc, #44]	; (5668 <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    563c:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    5640:	6812      	ldr	r2, [r2, #0]
    5642:	9201      	str	r2, [sp, #4]
	return ret;
    5644:	9a01      	ldr	r2, [sp, #4]
    5646:	429a      	cmp	r2, r3
    5648:	d209      	bcs.n	565e <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    564a:	b002      	add	sp, #8
    564c:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    564e:	f7ff fe33 	bl	52b8 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5652:	b002      	add	sp, #8
    5654:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    5656:	f7ff feff 	bl	5458 <explosion(LEDStruct&)>
			break;
	}
}
    565a:	b002      	add	sp, #8
    565c:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    565e:	4620      	mov	r0, r4
    5660:	f7ff fdee 	bl	5240 <prepare_for_explosion(LEDStruct&)>
    5664:	e7f1      	b.n	564a <fireworks_render(LEDStruct&)+0x3a>
    5666:	bf00      	nop
    5668:	1fffa8c0 	.word	0x1fffa8c0

0000566c <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    566e:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5672:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5674:	b1a3      	cbz	r3, 56a0 <fireworks(LEDStruct&)+0x34>
    5676:	4d34      	ldr	r5, [pc, #208]	; (5748 <fireworks(LEDStruct&)+0xdc>)
	if (keyboard_update) { fireworks_update(leds); }
    5678:	4b34      	ldr	r3, [pc, #208]	; (574c <fireworks(LEDStruct&)+0xe0>)
    567a:	781a      	ldrb	r2, [r3, #0]
    567c:	b12a      	cbz	r2, 568a <fireworks(LEDStruct&)+0x1e>
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    567e:	4a34      	ldr	r2, [pc, #208]	; (5750 <fireworks(LEDStruct&)+0xe4>)
    5680:	7812      	ldrb	r2, [r2, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5682:	2100      	movs	r1, #0
    5684:	7019      	strb	r1, [r3, #0]
	switch (update_var) {
    5686:	2a00      	cmp	r2, #0
    5688:	d033      	beq.n	56f2 <fireworks(LEDStruct&)+0x86>

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }

	fireworks_render(leds);
    568a:	4620      	mov	r0, r4
    568c:	f7ff ffc0 	bl	5610 <fireworks_render(LEDStruct&)>

	overlay_in_use = 0;
	if (leds.use_overlay) {
    5690:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }

	fireworks_render(leds);

	overlay_in_use = 0;
    5694:	492c      	ldr	r1, [pc, #176]	; (5748 <fireworks(LEDStruct&)+0xdc>)
    5696:	2200      	movs	r2, #0
    5698:	702a      	strb	r2, [r5, #0]
	if (leds.use_overlay) {
    569a:	2b00      	cmp	r3, #0
    569c:	d131      	bne.n	5702 <fireworks(LEDStruct&)+0x96>
    569e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56a0:	492c      	ldr	r1, [pc, #176]	; (5754 <fireworks(LEDStruct&)+0xe8>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    56a2:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    56a6:	880b      	ldrh	r3, [r1, #0]
    56a8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    56ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    56b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    56b4:	3319      	adds	r3, #25
    56b6:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56b8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	leds.delay_time			= 15;
    56bc:	250f      	movs	r5, #15
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    56be:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    56c2:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    56c4:	2617      	movs	r6, #23
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;
    56c6:	2002      	movs	r0, #2

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    56c8:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56cc:	800b      	strh	r3, [r1, #0]

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
    56ce:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    56d2:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    56d6:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;
    56da:	f884 0354 	strb.w	r0, [r4, #852]	; 0x354

	leds.use_overlay		= uo;
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
    56de:	4d1a      	ldr	r5, [pc, #104]	; (5748 <fireworks(LEDStruct&)+0xdc>)
    56e0:	2a00      	cmp	r2, #0
    56e2:	d0c9      	beq.n	5678 <fireworks(LEDStruct&)+0xc>
    56e4:	782b      	ldrb	r3, [r5, #0]
    56e6:	2b00      	cmp	r3, #0
    56e8:	d1c6      	bne.n	5678 <fireworks(LEDStruct&)+0xc>
    56ea:	4b1b      	ldr	r3, [pc, #108]	; (5758 <fireworks(LEDStruct&)+0xec>)
    56ec:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
    56f0:	e7c2      	b.n	5678 <fireworks(LEDStruct&)+0xc>
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	break; //a
    56f2:	4b1a      	ldr	r3, [pc, #104]	; (575c <fireworks(LEDStruct&)+0xf0>)
    56f4:	881b      	ldrh	r3, [r3, #0]
    56f6:	1a5b      	subs	r3, r3, r1
    56f8:	bf18      	it	ne
    56fa:	2301      	movne	r3, #1
    56fc:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    5700:	e7c3      	b.n	568a <fireworks(LEDStruct&)+0x1e>

	fireworks_render(leds);

	overlay_in_use = 0;
	if (leds.use_overlay) {
		overlay_in_use = 1;
    5702:	2301      	movs	r3, #1
		fireworks_render(over_leds);
    5704:	4814      	ldr	r0, [pc, #80]	; (5758 <fireworks(LEDStruct&)+0xec>)

	fireworks_render(leds);

	overlay_in_use = 0;
	if (leds.use_overlay) {
		overlay_in_use = 1;
    5706:	700b      	strb	r3, [r1, #0]
		fireworks_render(over_leds);
    5708:	f7ff ff82 	bl	5610 <fireworks_render(LEDStruct&)>
    570c:	4b12      	ldr	r3, [pc, #72]	; (5758 <fireworks(LEDStruct&)+0xec>)
    570e:	4620      	mov	r0, r4
    5710:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    5714:	3401      	adds	r4, #1
    5716:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    571a:	7819      	ldrb	r1, [r3, #0]
    571c:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5720:	f804 2c01 	strb.w	r2, [r4, #-1]
    5724:	7841      	ldrb	r1, [r0, #1]
    5726:	785a      	ldrb	r2, [r3, #1]
    5728:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    572c:	7041      	strb	r1, [r0, #1]
    572e:	7882      	ldrb	r2, [r0, #2]
    5730:	7899      	ldrb	r1, [r3, #2]
    5732:	fa82 f251 	uqadd8	r2, r2, r1
    5736:	3303      	adds	r3, #3
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5738:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    573a:	7082      	strb	r2, [r0, #2]
    573c:	f104 0403 	add.w	r4, r4, #3
    5740:	f100 0003 	add.w	r0, r0, #3
    5744:	d1e7      	bne.n	5716 <fireworks(LEDStruct&)+0xaa>
    5746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5748:	1fff95de 	.word	0x1fff95de
    574c:	1fff95dd 	.word	0x1fff95dd
    5750:	1fff9e2c 	.word	0x1fff9e2c
    5754:	1fff875e 	.word	0x1fff875e
    5758:	1fff95e4 	.word	0x1fff95e4
    575c:	1fff9e24 	.word	0x1fff9e24

00005760 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5760:	4b18      	ldr	r3, [pc, #96]	; (57c4 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    5762:	4a19      	ldr	r2, [pc, #100]	; (57c8 <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    5764:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    5766:	2100      	movs	r1, #0
    5768:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    576a:	2b04      	cmp	r3, #4
    576c:	d80d      	bhi.n	578a <shooting_pole_update(LEDStruct&)+0x2a>
    576e:	e8df f003 	tbb	[pc, r3]
    5772:	1403      	.short	0x1403
    5774:	201a      	.short	0x201a
    5776:	0e          	.byte	0x0e
    5777:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    5778:	4b14      	ldr	r3, [pc, #80]	; (57cc <shooting_pole_update(LEDStruct&)+0x6c>)
    577a:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    577c:	2b09      	cmp	r3, #9
    577e:	d91e      	bls.n	57be <shooting_pole_update(LEDStruct&)+0x5e>
    5780:	2b41      	cmp	r3, #65	; 0x41
    5782:	bfa8      	it	ge
    5784:	2341      	movge	r3, #65	; 0x41
    5786:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    578a:	f7fc bc8f 	b.w	20ac <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    578e:	4b0f      	ldr	r3, [pc, #60]	; (57cc <shooting_pole_update(LEDStruct&)+0x6c>)
    5790:	881b      	ldrh	r3, [r3, #0]
    5792:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
		default:	break;
	}
	LEDDebug(leds);
    5796:	f7fc bc89 	b.w	20ac <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    579a:	4b0c      	ldr	r3, [pc, #48]	; (57cc <shooting_pole_update(LEDStruct&)+0x6c>)
    579c:	881b      	ldrh	r3, [r3, #0]
    579e:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    57a2:	f7fc bc83 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    57a6:	4b09      	ldr	r3, [pc, #36]	; (57cc <shooting_pole_update(LEDStruct&)+0x6c>)
    57a8:	881b      	ldrh	r3, [r3, #0]
    57aa:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    57ae:	f7fc bc7d 	b.w	20ac <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    57b2:	4b06      	ldr	r3, [pc, #24]	; (57cc <shooting_pole_update(LEDStruct&)+0x6c>)
    57b4:	881b      	ldrh	r3, [r3, #0]
    57b6:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    57ba:	f7fc bc77 	b.w	20ac <LEDDebug(LEDStruct&)>
    57be:	230a      	movs	r3, #10
    57c0:	e7e1      	b.n	5786 <shooting_pole_update(LEDStruct&)+0x26>
    57c2:	bf00      	nop
    57c4:	1fff9e2c 	.word	0x1fff9e2c
    57c8:	1fff95dd 	.word	0x1fff95dd
    57cc:	1fff9e24 	.word	0x1fff9e24

000057d0 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    57d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    57d4:	f890 622e 	ldrb.w	r6, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    57d8:	b087      	sub	sp, #28
    57da:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    57dc:	2e00      	cmp	r6, #0
    57de:	f000 80f7 	beq.w	59d0 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    57e2:	4bbc      	ldr	r3, [pc, #752]	; (5ad4 <shooting_pole(LEDStruct&)+0x304>)
    57e4:	781b      	ldrb	r3, [r3, #0]
    57e6:	2b00      	cmp	r3, #0
    57e8:	f040 8161 	bne.w	5aae <shooting_pole(LEDStruct&)+0x2de>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    57ec:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    57f0:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    57f4:	b311      	cbz	r1, 583c <shooting_pole(LEDStruct&)+0x6c>
    57f6:	4626      	mov	r6, r4
    57f8:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    57fa:	f04f 0801 	mov.w	r8, #1
    57fe:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    5802:	f8cd 8000 	str.w	r8, [sp]
    5806:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    580a:	fb92 f2f1 	sdiv	r2, r2, r1
    580e:	441a      	add	r2, r3
    5810:	b2d2      	uxtb	r2, r2
    5812:	23ff      	movs	r3, #255	; 0xff
    5814:	4639      	mov	r1, r7
    5816:	a805      	add	r0, sp, #20
    5818:	f004 fc20 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    581c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5820:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    5824:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5828:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    582a:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    582c:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    582e:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    5832:	3501      	adds	r5, #1
    5834:	42a9      	cmp	r1, r5
    5836:	f106 0603 	add.w	r6, r6, #3
    583a:	dce0      	bgt.n	57fe <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    583c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5840:	2b00      	cmp	r3, #0
    5842:	f000 80bd 	beq.w	59c0 <shooting_pole(LEDStruct&)+0x1f0>
    5846:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    584a:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    584e:	4413      	add	r3, r2
    5850:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    5854:	294a      	cmp	r1, #74	; 0x4a
    5856:	f300 812e 	bgt.w	5ab6 <shooting_pole(LEDStruct&)+0x2e6>
    585a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    585e:	18a3      	adds	r3, r4, r2
    5860:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5864:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5868:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    586a:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    586c:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5870:	43c9      	mvns	r1, r1
    5872:	b2c9      	uxtb	r1, r1
    5874:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5876:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    587a:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    587e:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5882:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5884:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5886:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5888:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    588a:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    588c:	709a      	strb	r2, [r3, #2]
    588e:	3303      	adds	r3, #3
    5890:	42ab      	cmp	r3, r5
    5892:	d1e7      	bne.n	5864 <shooting_pole(LEDStruct&)+0x94>
    5894:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5898:	f8df 824c 	ldr.w	r8, [pc, #588]	; 5ae8 <shooting_pole(LEDStruct&)+0x318>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    589c:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    58a0:	f8d8 2000 	ldr.w	r2, [r8]
    58a4:	9205      	str	r2, [sp, #20]
	return ret;
    58a6:	9805      	ldr	r0, [sp, #20]
    58a8:	f44f 728c 	mov.w	r2, #280	; 0x118
    58ac:	fb02 f200 	mul.w	r2, r2, r0
    58b0:	021b      	lsls	r3, r3, #8
    58b2:	fb03 f202 	mul.w	r2, r3, r2
    58b6:	f3c2 420e 	ubfx	r2, r2, #16, #15
    58ba:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    58be:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    58c0:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    58c2:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    58c6:	d503      	bpl.n	58d0 <shooting_pole(LEDStruct&)+0x100>
    58c8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    58cc:	3307      	adds	r3, #7
    58ce:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    58d0:	0a18      	lsrs	r0, r3, #8
    58d2:	f8df e218 	ldr.w	lr, [pc, #536]	; 5aec <shooting_pole(LEDStruct&)+0x31c>
    uint8_t  m   = slope[section];
    58d6:	4e80      	ldr	r6, [pc, #512]	; (5ad8 <shooting_pole(LEDStruct&)+0x308>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    58d8:	5c36      	ldrb	r6, [r6, r0]
    58da:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    58de:	f3c3 0346 	ubfx	r3, r3, #1, #7
    58e2:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    58e6:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    58e8:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    58ea:	bf48      	it	mi
    58ec:	4276      	negmi	r6, r6
    58ee:	b236      	sxth	r6, r6
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
    58f0:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    58f4:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    58f8:	b29b      	uxth	r3, r3
    58fa:	b2b6      	uxth	r6, r6
    58fc:	fb03 6606 	mla	r6, r3, r6, r6
    5900:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    5904:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    5908:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    590c:	9000      	str	r0, [sp, #0]
    590e:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    5912:	a804      	add	r0, sp, #16
    5914:	4639      	mov	r1, r7
    5916:	b2b6      	uxth	r6, r6
    5918:	f004 fba0 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    591c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5920:	18e1      	adds	r1, r4, r3
    5922:	5ce2      	ldrb	r2, [r4, r3]
    5924:	f89d 0010 	ldrb.w	r0, [sp, #16]
    5928:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    592c:	54e2      	strb	r2, [r4, r3]
    592e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5932:	784a      	ldrb	r2, [r1, #1]
    5934:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5938:	704a      	strb	r2, [r1, #1]
    593a:	788b      	ldrb	r3, [r1, #2]
    593c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    5940:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5944:	4f65      	ldr	r7, [pc, #404]	; (5adc <shooting_pole(LEDStruct&)+0x30c>)
        b = qadd8( b, rhs.b);
    5946:	708b      	strb	r3, [r1, #2]
    5948:	683b      	ldr	r3, [r7, #0]
    594a:	07db      	lsls	r3, r3, #31
    594c:	d51b      	bpl.n	5986 <shooting_pole(LEDStruct&)+0x1b6>
    594e:	4e64      	ldr	r6, [pc, #400]	; (5ae0 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5950:	f8d8 3000 	ldr.w	r3, [r8]
    5954:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    5956:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    595a:	9b04      	ldr	r3, [sp, #16]
    595c:	1a5b      	subs	r3, r3, r1
    595e:	429a      	cmp	r2, r3
    5960:	d921      	bls.n	59a6 <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    5962:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5964:	781a      	ldrb	r2, [r3, #0]
    5966:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    596a:	785a      	ldrb	r2, [r3, #1]
    596c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5970:	789a      	ldrb	r2, [r3, #2]
    5972:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5976:	3303      	adds	r3, #3
    5978:	429d      	cmp	r5, r3
    597a:	f1a4 0403 	sub.w	r4, r4, #3
    597e:	d1f1      	bne.n	5964 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    5980:	b007      	add	sp, #28
    5982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5986:	4638      	mov	r0, r7
    5988:	f005 fa82 	bl	ae90 <__cxa_guard_acquire>
    598c:	2800      	cmp	r0, #0
    598e:	f040 8095 	bne.w	5abc <shooting_pole(LEDStruct&)+0x2ec>
    5992:	4e53      	ldr	r6, [pc, #332]	; (5ae0 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5994:	f8d8 3000 	ldr.w	r3, [r8]
    5998:	9304      	str	r3, [sp, #16]
    599a:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    599e:	9b04      	ldr	r3, [sp, #16]
    59a0:	1a5b      	subs	r3, r3, r1
    59a2:	4293      	cmp	r3, r2
    59a4:	d3dd      	bcc.n	5962 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    59a6:	f8d8 1000 	ldr.w	r1, [r8]
    59aa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    59ae:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    59b2:	9103      	str	r1, [sp, #12]
	return ret;
    59b4:	9903      	ldr	r1, [sp, #12]
    59b6:	6031      	str	r1, [r6, #0]
    59b8:	4413      	add	r3, r2
    59ba:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    59be:	e7d0      	b.n	5962 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    59c0:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    59c4:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    59c8:	1a9b      	subs	r3, r3, r2
    59ca:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    59ce:	e741      	b.n	5854 <shooting_pole(LEDStruct&)+0x84>
    59d0:	4f44      	ldr	r7, [pc, #272]	; (5ae4 <shooting_pole(LEDStruct&)+0x314>)
    59d2:	883b      	ldrh	r3, [r7, #0]
    59d4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    59d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    59dc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59e0:	3319      	adds	r3, #25
    59e2:	b29b      	uxth	r3, r3
    59e4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    59e8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    59ec:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    59f0:	3219      	adds	r2, #25
    59f2:	b292      	uxth	r2, r2
    59f4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    59f8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    59fc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5a00:	f10e 0e19 	add.w	lr, lr, #25
    5a04:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a08:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5a0c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
    5a10:	2146      	movs	r1, #70	; 0x46
    5a12:	2032      	movs	r0, #50	; 0x32
    5a14:	b2dd      	uxtb	r5, r3
    5a16:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a1a:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a1e:	fa5f f982 	uxtb.w	r9, r2
    5a22:	f006 fddf 	bl	c5e4 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a26:	883b      	ldrh	r3, [r7, #0]
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    5a28:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
    5a2c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    5a34:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5a38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5a3c:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a3e:	fa5f f888 	uxtb.w	r8, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a42:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5a46:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	3019      	adds	r0, #25
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5a4e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5a52:	b280      	uxth	r0, r0
    5a54:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    5a58:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5a5c:	4b1d      	ldr	r3, [pc, #116]	; (5ad4 <shooting_pole(LEDStruct&)+0x304>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
    5a5e:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5a62:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
    5a66:	ea4f 11e8 	mov.w	r1, r8, asr #7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a6a:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5a6e:	1215      	asrs	r5, r2, #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5a70:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5a74:	f101 021e 	add.w	r2, r1, #30
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5a78:	781b      	ldrb	r3, [r3, #0]
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5a7a:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5a7e:	1c69      	adds	r1, r5, #1


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
    5a80:	f04f 0c18 	mov.w	ip, #24

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5a84:	f10e 0501 	add.w	r5, lr, #1
void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    5a88:	220f      	movs	r2, #15
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    5a8a:	f04f 0e01 	mov.w	lr, #1
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5a8e:	f884 175e 	strb.w	r1, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a92:	8038      	strh	r0, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5a94:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    5a98:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    5a9c:	f884 e22a 	strb.w	lr, [r4, #554]	; 0x22a
	leds.mode_type			= SHOOTING_POLE;
    5aa0:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    5aa4:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5aa8:	2b00      	cmp	r3, #0
    5aaa:	f43f ae9f 	beq.w	57ec <shooting_pole(LEDStruct&)+0x1c>
    5aae:	4620      	mov	r0, r4
    5ab0:	f7ff fe56 	bl	5760 <shooting_pole_update(LEDStruct&)>
    5ab4:	e69a      	b.n	57ec <shooting_pole(LEDStruct&)+0x1c>
    5ab6:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    5aba:	e6ed      	b.n	5898 <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5abc:	f8d8 3000 	ldr.w	r3, [r8]
    5ac0:	4e07      	ldr	r6, [pc, #28]	; (5ae0 <shooting_pole(LEDStruct&)+0x310>)
    5ac2:	9302      	str	r3, [sp, #8]
	return ret;
    5ac4:	9b02      	ldr	r3, [sp, #8]
    5ac6:	6033      	str	r3, [r6, #0]
    5ac8:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5aca:	4638      	mov	r0, r7
    5acc:	6073      	str	r3, [r6, #4]
    5ace:	f005 f9e5 	bl	ae9c <__cxa_guard_release>
    5ad2:	e75f      	b.n	5994 <shooting_pole(LEDStruct&)+0x1c4>
    5ad4:	1fff95dd 	.word	0x1fff95dd
    5ad8:	0000fa58 	.word	0x0000fa58
    5adc:	1fff95cc 	.word	0x1fff95cc
    5ae0:	1fff94e8 	.word	0x1fff94e8
    5ae4:	1fff875e 	.word	0x1fff875e
    5ae8:	1fffa8c0 	.word	0x1fffa8c0
    5aec:	0000f2c8 	.word	0x0000f2c8

00005af0 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5af0:	4b2a      	ldr	r3, [pc, #168]	; (5b9c <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5af2:	4a2b      	ldr	r2, [pc, #172]	; (5ba0 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    5af4:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5af6:	2100      	movs	r1, #0
    5af8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5afa:	2b0b      	cmp	r3, #11
    5afc:	d80b      	bhi.n	5b16 <two_sin_update(LEDStruct&)+0x26>
    5afe:	e8df f003 	tbb	[pc, r3]
    5b02:	1f11      	.short	0x1f11
    5b04:	332e2924 	.word	0x332e2924
    5b08:	06423d38 	.word	0x06423d38
    5b0c:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    5b0e:	4b25      	ldr	r3, [pc, #148]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b10:	881b      	ldrh	r3, [r3, #0]
    5b12:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5b16:	f7fc bac9 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    5b1a:	4b22      	ldr	r3, [pc, #136]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b1c:	881b      	ldrh	r3, [r3, #0]
    5b1e:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5b22:	e7f8      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5b24:	4b1f      	ldr	r3, [pc, #124]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b26:	881b      	ldrh	r3, [r3, #0]
    5b28:	2b00      	cmp	r3, #0
    5b2a:	bf14      	ite	ne
    5b2c:	2301      	movne	r3, #1
    5b2e:	2300      	moveq	r3, #0
    5b30:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5b34:	bf14      	ite	ne
    5b36:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5b38:	234b      	moveq	r3, #75	; 0x4b
    5b3a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    5b3e:	e7ea      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5b40:	4b18      	ldr	r3, [pc, #96]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b42:	881b      	ldrh	r3, [r3, #0]
    5b44:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5b48:	e7e5      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5b4a:	4b16      	ldr	r3, [pc, #88]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b4c:	881b      	ldrh	r3, [r3, #0]
    5b4e:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    5b52:	e7e0      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5b54:	4b13      	ldr	r3, [pc, #76]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b56:	881b      	ldrh	r3, [r3, #0]
    5b58:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5b5c:	e7db      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    5b5e:	4b11      	ldr	r3, [pc, #68]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b60:	881b      	ldrh	r3, [r3, #0]
    5b62:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5b66:	e7d6      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5b68:	4b0e      	ldr	r3, [pc, #56]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b6a:	881b      	ldrh	r3, [r3, #0]
    5b6c:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5b70:	e7d1      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    5b72:	4b0c      	ldr	r3, [pc, #48]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b74:	881b      	ldrh	r3, [r3, #0]
    5b76:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    5b7a:	e7cc      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5b7c:	4b09      	ldr	r3, [pc, #36]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b7e:	881b      	ldrh	r3, [r3, #0]
    5b80:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5b84:	e7c7      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5b86:	4b07      	ldr	r3, [pc, #28]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b88:	881b      	ldrh	r3, [r3, #0]
    5b8a:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    5b8e:	e7c2      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    5b90:	4b04      	ldr	r3, [pc, #16]	; (5ba4 <two_sin_update(LEDStruct&)+0xb4>)
    5b92:	881b      	ldrh	r3, [r3, #0]
    5b94:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    5b98:	e7bd      	b.n	5b16 <two_sin_update(LEDStruct&)+0x26>
    5b9a:	bf00      	nop
    5b9c:	1fff9e2c 	.word	0x1fff9e2c
    5ba0:	1fff95dd 	.word	0x1fff95dd
    5ba4:	1fff9e24 	.word	0x1fff9e24

00005ba8 <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5bac:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5bb0:	b083      	sub	sp, #12
    5bb2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	f040 80cb 	bne.w	5d50 <two_sin(LEDStruct&)+0x1a8>
    5bba:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 5f88 <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    5bbe:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5bc2:	f8ba 3000 	ldrh.w	r3, [sl]
    5bc6:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5bca:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5bce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5bd2:	3619      	adds	r6, #25
    5bd4:	b2b6      	uxth	r6, r6
    5bd6:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5bda:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    5bde:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5be2:	f10c 0c19 	add.w	ip, ip, #25
    5be6:	fa1f fc8c 	uxth.w	ip, ip
    5bea:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    5bee:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    5bf2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5bf6:	f10e 0e19 	add.w	lr, lr, #25
    5bfa:	fa1f fe8e 	uxth.w	lr, lr
    5bfe:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    5c02:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    5c06:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5c0a:	3119      	adds	r1, #25
    5c0c:	b289      	uxth	r1, r1
    5c0e:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    5c12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    5c16:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5c1a:	3719      	adds	r7, #25
    5c1c:	b2bf      	uxth	r7, r7
    5c1e:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5c22:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5c26:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5c2a:	3519      	adds	r5, #25
    5c2c:	b2ad      	uxth	r5, r5
    5c2e:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    5c32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5c36:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5c3a:	3019      	adds	r0, #25
    5c3c:	b280      	uxth	r0, r0
    5c3e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5c42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5c46:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5c4a:	3219      	adds	r2, #25
    5c4c:	b292      	uxth	r2, r2
    5c4e:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5c52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5c56:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5c5a:	3319      	adds	r3, #25
    5c5c:	b29b      	uxth	r3, r3
    5c5e:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    5c62:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5c66:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5c6a:	f109 0919 	add.w	r9, r9, #25
    5c6e:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5c72:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    5c76:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5c7a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5c7e:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5c82:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5c86:	b2c9      	uxtb	r1, r1
    5c88:	b2d2      	uxtb	r2, r2
    5c8a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5c8e:	b2db      	uxtb	r3, r3
    5c90:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5c94:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5c98:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5c9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5ca0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    5ca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5ca8:	1112      	asrs	r2, r2, #4
    5caa:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cae:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cb2:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cb4:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5cb8:	b2ed      	uxtb	r5, r5
    5cba:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cbc:	111b      	asrs	r3, r3, #4
    5cbe:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5cc2:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cc6:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cca:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    5cce:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cd2:	3903      	subs	r1, #3
    5cd4:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5cdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5ce0:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5ce2:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
    5ce6:	f04f 0816 	mov.w	r8, #22

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5cea:	f04f 0901 	mov.w	r9, #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
    5cee:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cf2:	fa5f fc8c 	uxtb.w	ip, ip
    5cf6:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5cfa:	b2c9      	uxtb	r1, r1
    5cfc:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5cfe:	f3c5 2507 	ubfx	r5, r5, #8, #8
    5d02:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5d06:	fa5f fb8b 	uxtb.w	fp, fp
    5d0a:	b2d2      	uxtb	r2, r2
    5d0c:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5d0e:	f884 922e 	strb.w	r9, [r4, #558]	; 0x22e
	leds.mode_type			= TWO_SIN;
    5d12:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5d16:	2e00      	cmp	r6, #0
    5d18:	f040 812b 	bne.w	5f72 <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    5d1c:	264b      	movs	r6, #75	; 0x4b
    5d1e:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5d22:	2600      	movs	r6, #0
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue		= sh;		// changes by rot
    5d24:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue		= th;
    5d28:	f884 e34d 	strb.w	lr, [r4, #845]	; 0x34d
	leds.sin_speed		= ss;		// changes the phase
    5d2c:	f884 1340 	strb.w	r1, [r4, #832]	; 0x340
	leds.two_speed		= ts;
    5d30:	f884 7349 	strb.w	r7, [r4, #841]	; 0x349
	leds.sin_rot		= sr;		// changes the hue
    5d34:	f884 5342 	strb.w	r5, [r4, #834]	; 0x342
	leds.two_rot		= tr;
    5d38:	f884 034a 	strb.w	r0, [r4, #842]	; 0x34a
	leds.sin_cutoff		= sc;		// limits the brightness
    5d3c:	f884 b341 	strb.w	fp, [r4, #833]	; 0x341
	leds.two_cutoff		= tc;
    5d40:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    5d44:	f884 2343 	strb.w	r2, [r4, #835]	; 0x343
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5d48:	f884 6346 	strb.w	r6, [r4, #838]	; 0x346
	leds.two_phase		= 0;
    5d4c:	f884 634c 	strb.w	r6, [r4, #844]	; 0x34c
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5d50:	4b8c      	ldr	r3, [pc, #560]	; (5f84 <two_sin(LEDStruct&)+0x3dc>)
    5d52:	781b      	ldrb	r3, [r3, #0]
    5d54:	2b00      	cmp	r3, #0
    5d56:	f040 8110 	bne.w	5f7a <two_sin(LEDStruct&)+0x3d2>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    5d5a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5d5e:	2b00      	cmp	r3, #0
    5d60:	f040 80f8 	bne.w	5f54 <two_sin(LEDStruct&)+0x3ac>
    5d64:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    5d68:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    5d6c:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    5d70:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    5d74:	4402      	add	r2, r0
    5d76:	440b      	add	r3, r1
    5d78:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    5d7c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5d80:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    5d84:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5d88:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    5d8c:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range; k++) {
    5d90:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5d94:	4494      	add	ip, r2
    5d96:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5d9a:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    5d9c:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    5da0:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range; k++) {
    5da4:	2900      	cmp	r1, #0
    5da6:	f000 80be 	beq.w	5f26 <two_sin(LEDStruct&)+0x37e>
    5daa:	4626      	mov	r6, r4
    5dac:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5dae:	25ff      	movs	r5, #255	; 0xff
    5db0:	e08b      	b.n	5eca <two_sin(LEDStruct&)+0x322>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5db2:	2b00      	cmp	r3, #0
        in = 255 - in;
    5db4:	bfbc      	itt	lt
    5db6:	43c9      	mvnlt	r1, r1
    5db8:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5dba:	0049      	lsls	r1, r1, #1
    5dbc:	b2c9      	uxtb	r1, r1
    5dbe:	1c4b      	adds	r3, r1, #1
    5dc0:	fb03 f101 	mul.w	r1, r3, r1
    5dc4:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5dc6:	fb01 f303 	mul.w	r3, r1, r3
    5dca:	121b      	asrs	r3, r3, #8
    5dcc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5dd0:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    5dd4:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5dd6:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5dd8:	bf54      	ite	pl
    5dda:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5dde:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5de2:	ebc8 0e0e 	rsb	lr, r8, lr
    5de6:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5dea:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5dee:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5df2:	3b80      	subs	r3, #128	; 0x80
    5df4:	4403      	add	r3, r0
    5df6:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5df8:	b259      	sxtb	r1, r3
    5dfa:	2900      	cmp	r1, #0
        in = 255 - in;
    5dfc:	bfba      	itte	lt
    5dfe:	43da      	mvnlt	r2, r3
    5e00:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5e02:	461a      	movge	r2, r3
    5e04:	0052      	lsls	r2, r2, #1
    5e06:	b2d2      	uxtb	r2, r2
    5e08:	1c50      	adds	r0, r2, #1
    5e0a:	fb00 f202 	mul.w	r2, r0, r2
    5e0e:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5e10:	fb02 f000 	mul.w	r0, r2, r0
    5e14:	1200      	asrs	r0, r0, #8
    5e16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5e1a:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    5e1e:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5e20:	05d0      	lsls	r0, r2, #23
    5e22:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5e26:	bf54      	ite	pl
    5e28:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5e2a:	22ff      	movmi	r2, #255	; 0xff
    5e2c:	4290      	cmp	r0, r2
    5e2e:	d278      	bcs.n	5f22 <two_sin(LEDStruct&)+0x37a>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5e30:	2900      	cmp	r1, #0
        in = 255 - in;
    5e32:	bfbc      	itt	lt
    5e34:	43db      	mvnlt	r3, r3
    5e36:	b2db      	uxtblt	r3, r3
    5e38:	005a      	lsls	r2, r3, #1
    5e3a:	b2d2      	uxtb	r2, r2
    5e3c:	1c53      	adds	r3, r2, #1
    5e3e:	fb03 f202 	mul.w	r2, r3, r2
    5e42:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5e44:	fb02 f303 	mul.w	r3, r2, r3
    5e48:	121b      	asrs	r3, r3, #8
    5e4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5e4e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5e52:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5e54:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5e56:	bf54      	ite	pl
    5e58:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5e5a:	23ff      	movmi	r3, #255	; 0xff
    5e5c:	1a1b      	subs	r3, r3, r0
    5e5e:	b2db      	uxtb	r3, r3
    5e60:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e64:	4631      	mov	r1, r6
    5e66:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e68:	f88d c004 	strb.w	ip, [sp, #4]
    5e6c:	f88d e006 	strb.w	lr, [sp, #6]
    5e70:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e74:	f004 faf0 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    5e78:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e7c:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    5e80:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e84:	a901      	add	r1, sp, #4
    5e86:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5e88:	f88d 3000 	strb.w	r3, [sp]
    5e8c:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5e90:	f004 fae2 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5e94:	7833      	ldrb	r3, [r6, #0]
    5e96:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5e9a:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5e9e:	7033      	strb	r3, [r6, #0]
    5ea0:	7872      	ldrb	r2, [r6, #1]
    5ea2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5ea6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5eaa:	7072      	strb	r2, [r6, #1]
    5eac:	78b3      	ldrb	r3, [r6, #2]
    5eae:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5eb2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5eb6:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
    5eb8:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5ebc:	3701      	adds	r7, #1
    5ebe:	42bb      	cmp	r3, r7
    5ec0:	f106 0603 	add.w	r6, r6, #3
    5ec4:	dd2f      	ble.n	5f26 <two_sin(LEDStruct&)+0x37e>
    5ec6:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    5eca:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    5ece:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    5ed2:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    5ed6:	fb10 f007 	smulbb	r0, r0, r7
    5eda:	b2c0      	uxtb	r0, r0
    5edc:	4401      	add	r1, r0
    5ede:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5ee0:	b24b      	sxtb	r3, r1
    5ee2:	2b00      	cmp	r3, #0
        in = 255 - in;
    5ee4:	bfba      	itte	lt
    5ee6:	43ca      	mvnlt	r2, r1
    5ee8:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5eea:	460a      	movge	r2, r1
    5eec:	0052      	lsls	r2, r2, #1
    5eee:	b2d2      	uxtb	r2, r2
    5ef0:	f102 0e01 	add.w	lr, r2, #1
    5ef4:	fb0e f202 	mul.w	r2, lr, r2
    5ef8:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5efa:	fb02 fe0e 	mul.w	lr, r2, lr
    5efe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5f02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5f06:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    5f0a:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5f0c:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5f10:	bf0c      	ite	eq
    5f12:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5f14:	22ff      	movne	r2, #255	; 0xff
    5f16:	4590      	cmp	r8, r2
    5f18:	f4ff af4b 	bcc.w	5db2 <two_sin(LEDStruct&)+0x20a>
    5f1c:	f04f 0e00 	mov.w	lr, #0
    5f20:	e763      	b.n	5dea <two_sin(LEDStruct&)+0x242>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5f22:	2300      	movs	r3, #0
    5f24:	e79c      	b.n	5e60 <two_sin(LEDStruct&)+0x2b8>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
	if (!leds.use_full_range) { strip_sync(leds); }
    5f26:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5f2a:	b983      	cbnz	r3, 5f4e <two_sin(LEDStruct&)+0x3a6>
    5f2c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5f30:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5f32:	781a      	ldrb	r2, [r3, #0]
    5f34:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5f38:	785a      	ldrb	r2, [r3, #1]
    5f3a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5f3e:	789a      	ldrb	r2, [r3, #2]
    5f40:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5f44:	3303      	adds	r3, #3
    5f46:	428b      	cmp	r3, r1
    5f48:	f1a4 0403 	sub.w	r4, r4, #3
    5f4c:	d1f1      	bne.n	5f32 <two_sin(LEDStruct&)+0x38a>
}
    5f4e:	b003      	add	sp, #12
    5f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    5f54:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5f58:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    5f5c:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    5f60:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    5f64:	1a12      	subs	r2, r2, r0
    5f66:	1a5b      	subs	r3, r3, r1
    5f68:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    5f6c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    5f70:	e706      	b.n	5d80 <two_sin(LEDStruct&)+0x1d8>

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5f72:	2696      	movs	r6, #150	; 0x96
    5f74:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
    5f78:	e6d3      	b.n	5d22 <two_sin(LEDStruct&)+0x17a>
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    5f7a:	4620      	mov	r0, r4
    5f7c:	f7ff fdb8 	bl	5af0 <two_sin_update(LEDStruct&)>
    5f80:	e6eb      	b.n	5d5a <two_sin(LEDStruct&)+0x1b2>
    5f82:	bf00      	nop
    5f84:	1fff95dd 	.word	0x1fff95dd
    5f88:	1fff875e 	.word	0x1fff875e

00005f8c <noise_update(LEDStruct&)>:
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5f8c:	4b19      	ldr	r3, [pc, #100]	; (5ff4 <noise_update(LEDStruct&)+0x68>)
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    5f8e:	4a1a      	ldr	r2, [pc, #104]	; (5ff8 <noise_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    5f90:	781b      	ldrb	r3, [r3, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    5f92:	2100      	movs	r1, #0
    5f94:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5f96:	2b04      	cmp	r3, #4
    5f98:	d808      	bhi.n	5fac <noise_update(LEDStruct&)+0x20>
    5f9a:	e8df f003 	tbb	[pc, r3]
    5f9e:	1e0f      	.short	0x1e0f
    5fa0:	2403      	.short	0x2403
    5fa2:	09          	.byte	0x09
    5fa3:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
    5fa4:	4b15      	ldr	r3, [pc, #84]	; (5ffc <noise_update(LEDStruct&)+0x70>)
    5fa6:	881b      	ldrh	r3, [r3, #0]
    5fa8:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5fac:	f7fc b87e 	b.w	20ac <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
    5fb0:	4b12      	ldr	r3, [pc, #72]	; (5ffc <noise_update(LEDStruct&)+0x70>)
    5fb2:	881b      	ldrh	r3, [r3, #0]
    5fb4:	f880 3767 	strb.w	r3, [r0, #1895]	; 0x767
		default:	break;
	}
	LEDDebug(leds);
    5fb8:	f7fc b878 	b.w	20ac <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    5fbc:	4b0f      	ldr	r3, [pc, #60]	; (5ffc <noise_update(LEDStruct&)+0x70>)
    5fbe:	881b      	ldrh	r3, [r3, #0]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	bf14      	ite	ne
    5fc4:	2301      	movne	r3, #1
    5fc6:	2300      	moveq	r3, #0
    5fc8:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    5fcc:	bf14      	ite	ne
    5fce:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    5fd0:	234b      	moveq	r3, #75	; 0x4b
    5fd2:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5fd6:	f7fc b869 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    5fda:	4b08      	ldr	r3, [pc, #32]	; (5ffc <noise_update(LEDStruct&)+0x70>)
    5fdc:	881b      	ldrh	r3, [r3, #0]
    5fde:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5fe2:	f7fc b863 	b.w	20ac <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
    5fe6:	4b05      	ldr	r3, [pc, #20]	; (5ffc <noise_update(LEDStruct&)+0x70>)
    5fe8:	881b      	ldrh	r3, [r3, #0]
    5fea:	f8a0 3764 	strh.w	r3, [r0, #1892]	; 0x764
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5fee:	f7fc b85d 	b.w	20ac <LEDDebug(LEDStruct&)>
    5ff2:	bf00      	nop
    5ff4:	1fff9e2c 	.word	0x1fff9e2c
    5ff8:	1fff95dd 	.word	0x1fff95dd
    5ffc:	1fff9e24 	.word	0x1fff9e24

00006000 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    6000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    6004:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    6008:	b085      	sub	sp, #20
    600a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    600c:	2b00      	cmp	r3, #0
    600e:	d16a      	bne.n	60e6 <noise(LEDStruct&)+0xe6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6010:	4d78      	ldr	r5, [pc, #480]	; (61f4 <noise(LEDStruct&)+0x1f4>)
    6012:	882b      	ldrh	r3, [r5, #0]
    6014:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6018:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    601c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6020:	3619      	adds	r6, #25
    6022:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6024:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    6028:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    602c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6030:	3219      	adds	r2, #25
    6032:	b292      	uxth	r2, r2
    6034:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    6038:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    603c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6040:	3319      	adds	r3, #25
    6042:	b29b      	uxth	r3, r3
    6044:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    6048:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    604c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6050:	f10e 0e19 	add.w	lr, lr, #25
    6054:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6058:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    605c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6060:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6064:	3019      	adds	r0, #25
    6066:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6068:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    606c:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6070:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6072:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6076:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    607a:	fb07 fe0e 	mul.w	lr, r7, lr
    607e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6082:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6086:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    608a:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    608e:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6090:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6092:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6094:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6098:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    609c:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60a0:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    60a4:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    60a6:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    60a8:	f04f 0e19 	mov.w	lr, #25
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    60ac:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    60b0:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    60b4:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    60b6:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60ba:	b289      	uxth	r1, r1
    60bc:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    60be:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    60c0:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    60c2:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    60c6:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    60ca:	2f00      	cmp	r7, #0
    60cc:	f040 8089 	bne.w	61e2 <noise(LEDStruct&)+0x1e2>
	else				  	 { leds.strip_range = ONE_SIDE; }
    60d0:	254b      	movs	r5, #75	; 0x4b
    60d2:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    60d6:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    60da:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    60de:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    60e2:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    60e6:	4b44      	ldr	r3, [pc, #272]	; (61f8 <noise(LEDStruct&)+0x1f8>)
    60e8:	781b      	ldrb	r3, [r3, #0]
    60ea:	2b00      	cmp	r3, #0
    60ec:	d17d      	bne.n	61ea <noise(LEDStruct&)+0x1ea>

	for (int i = 0; i < leds.strip_range; i++) {
    60ee:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    60f2:	b37b      	cbz	r3, 6154 <noise(LEDStruct&)+0x154>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    60f4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 6204 <noise(LEDStruct&)+0x204>
    60f8:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    60fc:	4625      	mov	r5, r4

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    60fe:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6100:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    6102:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    6106:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    610a:	fb10 f006 	smulbb	r0, r0, r6
    610e:	b280      	uxth	r0, r0
    6110:	4401      	add	r1, r0
    6112:	b289      	uxth	r1, r1
    6114:	f004 fb48 	bl	a7a8 <inoise8(unsigned short, unsigned short)>
    6118:	fba9 3200 	umull	r3, r2, r9, r0
    611c:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    6120:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    6124:	9700      	str	r7, [sp, #0]
    6126:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    6128:	f884 2766 	strb.w	r2, [r4, #1894]	; 0x766
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    612c:	4641      	mov	r1, r8
    612e:	a803      	add	r0, sp, #12
    6130:	f003 ff94 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    6134:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6138:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    613c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6140:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    6142:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    6144:	70ab      	strb	r3, [r5, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    6146:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    614a:	3601      	adds	r6, #1
    614c:	42b3      	cmp	r3, r6
    614e:	f105 0503 	add.w	r5, r5, #3
    6152:	dcd6      	bgt.n	6102 <noise(LEDStruct&)+0x102>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6154:	4b29      	ldr	r3, [pc, #164]	; (61fc <noise(LEDStruct&)+0x1fc>)
    6156:	681b      	ldr	r3, [r3, #0]
    6158:	9303      	str	r3, [sp, #12]
	return ret;
    615a:	9803      	ldr	r0, [sp, #12]
    615c:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    6160:	fb03 f000 	mul.w	r0, r3, r0
    6164:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6166:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6168:	0659      	lsls	r1, r3, #25
    616a:	d535      	bpl.n	61d8 <noise(LEDStruct&)+0x1d8>
        offset = (uint8_t)255 - offset;
    616c:	43db      	mvns	r3, r3
    616e:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6170:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6174:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6176:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    617a:	110b      	asrs	r3, r1, #4
    617c:	4920      	ldr	r1, [pc, #128]	; (6200 <noise(LEDStruct&)+0x200>)
    617e:	005b      	lsls	r3, r3, #1
    6180:	18cd      	adds	r5, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6182:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6184:	7869      	ldrb	r1, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6186:	fb11 f202 	smulbb	r2, r1, r2
    618a:	eb03 1322 	add.w	r3, r3, r2, asr #4
    618e:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6190:	0602      	lsls	r2, r0, #24
    6192:	bf48      	it	mi
    6194:	425b      	negmi	r3, r3
    6196:	b25b      	sxtb	r3, r3

    y += 128;
    6198:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    619a:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    619e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    61a2:	f3c3 1381 	ubfx	r3, r3, #6, #2
    61a6:	3301      	adds	r3, #1
    61a8:	4413      	add	r3, r2
    61aa:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    61ae:	b981      	cbnz	r1, 61d2 <noise(LEDStruct&)+0x1d2>
    61b0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    61b4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    61b6:	781a      	ldrb	r2, [r3, #0]
    61b8:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    61bc:	785a      	ldrb	r2, [r3, #1]
    61be:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    61c2:	789a      	ldrb	r2, [r3, #2]
    61c4:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    61c8:	3303      	adds	r3, #3
    61ca:	4299      	cmp	r1, r3
    61cc:	f1a4 0403 	sub.w	r4, r4, #3
    61d0:	d1f1      	bne.n	61b6 <noise(LEDStruct&)+0x1b6>
}
    61d2:	b005      	add	sp, #20
    61d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    61d8:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    61dc:	f003 020f 	and.w	r2, r3, #15
    61e0:	e7cb      	b.n	617a <noise(LEDStruct&)+0x17a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    61e2:	2596      	movs	r5, #150	; 0x96
    61e4:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    61e8:	e775      	b.n	60d6 <noise(LEDStruct&)+0xd6>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    61ea:	4620      	mov	r0, r4
    61ec:	f7ff fece 	bl	5f8c <noise_update(LEDStruct&)>
    61f0:	e77d      	b.n	60ee <noise(LEDStruct&)+0xee>
    61f2:	bf00      	nop
    61f4:	1fff875e 	.word	0x1fff875e
    61f8:	1fff95dd 	.word	0x1fff95dd
    61fc:	1fffa8c0 	.word	0x1fffa8c0
    6200:	0000f450 	.word	0x0000f450
    6204:	80808081 	.word	0x80808081

00006208 <noise_mover(LEDStruct&)>:

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    6208:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    620a:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    620e:	b085      	sub	sp, #20
    6210:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    6212:	2b00      	cmp	r3, #0
    6214:	d16a      	bne.n	62ec <noise_mover(LEDStruct&)+0xe4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6216:	4d7e      	ldr	r5, [pc, #504]	; (6410 <noise_mover(LEDStruct&)+0x208>)
    6218:	882b      	ldrh	r3, [r5, #0]
    621a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    621e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    6222:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6226:	3619      	adds	r6, #25
    6228:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    622a:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    622e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6232:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6236:	3219      	adds	r2, #25
    6238:	b292      	uxth	r2, r2
    623a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    623e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6242:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6246:	3319      	adds	r3, #25
    6248:	b29b      	uxth	r3, r3
    624a:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    624e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    6252:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6256:	f10e 0e19 	add.w	lr, lr, #25
    625a:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    625e:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    6262:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6266:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    626a:	3019      	adds	r0, #25
    626c:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    626e:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6272:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6276:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6278:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    627c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6280:	fb07 fe0e 	mul.w	lr, r7, lr
    6284:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6288:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    628c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6290:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6294:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6296:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6298:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    629a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    629e:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    62a2:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62a6:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    62aa:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    62ac:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    62ae:	f04f 0e19 	mov.w	lr, #25
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    62b2:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    62b6:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    62ba:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    62bc:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62c0:	b289      	uxth	r1, r1
    62c2:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    62c4:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    62c6:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    62c8:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    62cc:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    62d0:	2f00      	cmp	r7, #0
    62d2:	f040 8094 	bne.w	63fe <noise_mover(LEDStruct&)+0x1f6>
	else				  	 { leds.strip_range = ONE_SIDE; }
    62d6:	254b      	movs	r5, #75	; 0x4b
    62d8:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    62dc:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    62e0:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    62e4:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    62e8:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    62ec:	4b49      	ldr	r3, [pc, #292]	; (6414 <noise_mover(LEDStruct&)+0x20c>)
    62ee:	781b      	ldrb	r3, [r3, #0]
    62f0:	2b00      	cmp	r3, #0
    62f2:	f040 8088 	bne.w	6406 <noise_mover(LEDStruct&)+0x1fe>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    62f6:	f894 2767 	ldrb.w	r2, [r4, #1895]	; 0x767
    62fa:	2196      	movs	r1, #150	; 0x96
    62fc:	4620      	mov	r0, r4
    62fe:	f003 fe4d 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    6302:	f8b4 3762 	ldrh.w	r3, [r4, #1890]	; 0x762
    6306:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    630a:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    630e:	4419      	add	r1, r3
    6310:	b289      	uxth	r1, r1
    6312:	f004 fa49 	bl	a7a8 <inoise8(unsigned short, unsigned short)>
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    6316:	4a40      	ldr	r2, [pc, #256]	; (6418 <noise_mover(LEDStruct&)+0x210>)
    6318:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    631c:	fba2 1500 	umull	r1, r5, r2, r0
    6320:	eb00 10d5 	add.w	r0, r0, r5, lsr #7
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    6324:	2bfe      	cmp	r3, #254	; 0xfe
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    6326:	f000 05ff 	and.w	r5, r0, #255	; 0xff
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    632a:	dc5f      	bgt.n	63ec <noise_mover(LEDStruct&)+0x1e4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    632c:	fb03 5305 	mla	r3, r3, r5, r5
    6330:	121d      	asrs	r5, r3, #8
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   
    6332:	b2ed      	uxtb	r5, r5
    6334:	2301      	movs	r3, #1
    6336:	462a      	mov	r2, r5
    6338:	9300      	str	r3, [sp, #0]
    633a:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    633e:	23ff      	movs	r3, #255	; 0xff
    6340:	a803      	add	r0, sp, #12
    6342:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6346:	f003 fe89 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    634a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    634e:	5563      	strb	r3, [r4, r5]
    6350:	4425      	add	r5, r4
        g = rhs.g;
    6352:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    6356:	f89d 200e 	ldrb.w	r2, [sp, #14]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    635a:	4b30      	ldr	r3, [pc, #192]	; (641c <noise_mover(LEDStruct&)+0x214>)

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    635c:	7069      	strb	r1, [r5, #1]
        b = rhs.b;
    635e:	70aa      	strb	r2, [r5, #2]
    6360:	681b      	ldr	r3, [r3, #0]
    6362:	9303      	str	r3, [sp, #12]
	return ret;
    6364:	9903      	ldr	r1, [sp, #12]
    6366:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    636a:	fb03 f101 	mul.w	r1, r3, r1
    636e:	0e09      	lsrs	r1, r1, #24
    6370:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6372:	0658      	lsls	r0, r3, #25
    6374:	d535      	bpl.n	63e2 <noise_mover(LEDStruct&)+0x1da>
        offset = (uint8_t)255 - offset;
    6376:	43db      	mvns	r3, r3
    6378:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    637a:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    637e:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6380:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6384:	4826      	ldr	r0, [pc, #152]	; (6420 <noise_mover(LEDStruct&)+0x218>)
    6386:	1112      	asrs	r2, r2, #4
    6388:	0052      	lsls	r2, r2, #1
    638a:	1885      	adds	r5, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    638c:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    638e:	7868      	ldrb	r0, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6390:	fb10 f303 	smulbb	r3, r0, r3
    6394:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6398:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    639a:	060a      	lsls	r2, r1, #24
    639c:	bf48      	it	mi
    639e:	425b      	negmi	r3, r3
    63a0:	b25b      	sxtb	r3, r3

    y += 128;
    63a2:	3b80      	subs	r3, #128	; 0x80

	leds.noise_dist += beatsin8(10, 1, 4);
    63a4:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    63a8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   

	leds.noise_dist += beatsin8(10, 1, 4);
    63ac:	f3c3 1381 	ubfx	r3, r3, #6, #2
    63b0:	3301      	adds	r3, #1
    63b2:	4413      	add	r3, r2
    63b4:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    63b8:	b989      	cbnz	r1, 63de <noise_mover(LEDStruct&)+0x1d6>
    63ba:	4620      	mov	r0, r4
    63bc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    63c0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    63c2:	781a      	ldrb	r2, [r3, #0]
    63c4:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    63c8:	785a      	ldrb	r2, [r3, #1]
    63ca:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    63ce:	789a      	ldrb	r2, [r3, #2]
    63d0:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    63d4:	3303      	adds	r3, #3
    63d6:	4299      	cmp	r1, r3
    63d8:	f1a0 0003 	sub.w	r0, r0, #3
    63dc:	d1f1      	bne.n	63c2 <noise_mover(LEDStruct&)+0x1ba>
}
    63de:	b005      	add	sp, #20
    63e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    63e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    63e6:	f003 030f 	and.w	r3, r3, #15
    63ea:	e7cb      	b.n	6384 <noise_mover(LEDStruct&)+0x17c>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    63ec:	fb03 f305 	mul.w	r3, r3, r5
    63f0:	fb82 2503 	smull	r2, r5, r2, r3
    63f4:	441d      	add	r5, r3
    63f6:	17db      	asrs	r3, r3, #31
    63f8:	ebc3 15e5 	rsb	r5, r3, r5, asr #7
    63fc:	e799      	b.n	6332 <noise_mover(LEDStruct&)+0x12a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    63fe:	2596      	movs	r5, #150	; 0x96
    6400:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    6404:	e76a      	b.n	62dc <noise_mover(LEDStruct&)+0xd4>
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    6406:	4620      	mov	r0, r4
    6408:	f7ff fdc0 	bl	5f8c <noise_update(LEDStruct&)>
    640c:	e773      	b.n	62f6 <noise_mover(LEDStruct&)+0xee>
    640e:	bf00      	nop
    6410:	1fff875e 	.word	0x1fff875e
    6414:	1fff95dd 	.word	0x1fff95dd
    6418:	80808081 	.word	0x80808081
    641c:	1fffa8c0 	.word	0x1fffa8c0
    6420:	0000f450 	.word	0x0000f450

00006424 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6428:	4607      	mov	r7, r0
    642a:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    642c:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6430:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    6434:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    6438:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    643a:	2800      	cmp	r0, #0
    643c:	d06e      	beq.n	651c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    643e:	085b      	lsrs	r3, r3, #1
    6440:	f103 0a14 	add.w	sl, r3, #20
    6444:	f10a 0301 	add.w	r3, sl, #1
    6448:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 6524 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    644c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 6528 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    6450:	9303      	str	r3, [sp, #12]
    6452:	4614      	mov	r4, r2
    6454:	2600      	movs	r6, #0
        waveangle += 250;
    6456:	35fa      	adds	r5, #250	; 0xfa
    6458:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    645a:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    645c:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6460:	d503      	bpl.n	646a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    6462:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6466:	3307      	adds	r3, #7
    6468:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    646a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    646c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6470:	f819 0001 	ldrb.w	r0, [r9, r1]
    6474:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    6478:	fb00 3302 	mla	r3, r0, r2, r3
    647c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    647e:	0428      	lsls	r0, r5, #16
    6480:	bf48      	it	mi
    6482:	425b      	negmi	r3, r3
    6484:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    6486:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    648a:	9a03      	ldr	r2, [sp, #12]
    648c:	b29b      	uxth	r3, r3
    648e:	fb02 f303 	mul.w	r3, r2, r3
    6492:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    6496:	441c      	add	r4, r3
    6498:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    649a:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    649c:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    64a0:	d503      	bpl.n	64aa <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    64a2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    64a6:	3307      	adds	r3, #7
    64a8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    64aa:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    64ac:	f3c3 0246 	ubfx	r2, r3, #1, #7
    64b0:	f819 0001 	ldrb.w	r0, [r9, r1]
    64b4:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    64b8:	9902      	ldr	r1, [sp, #8]
    64ba:	fb00 3302 	mla	r3, r0, r2, r3
    64be:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    64c0:	0422      	lsls	r2, r4, #16
    64c2:	bf48      	it	mi
    64c4:	425b      	negmi	r3, r3
    64c6:	b21b      	sxth	r3, r3
    64c8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    64cc:	b29b      	uxth	r3, r3
    64ce:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    64d2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    64d6:	2301      	movs	r3, #1
    64d8:	9300      	str	r3, [sp, #0]
    64da:	a805      	add	r0, sp, #20
    64dc:	465b      	mov	r3, fp
    64de:	f3c2 4207 	ubfx	r2, r2, #16, #8
    64e2:	f003 fdbb 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    64e6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    64ea:	18b9      	adds	r1, r7, r2
    64ec:	5cbb      	ldrb	r3, [r7, r2]
    64ee:	f89d 0014 	ldrb.w	r0, [sp, #20]
    64f2:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    64f6:	54bb      	strb	r3, [r7, r2]
    64f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    64fc:	784a      	ldrb	r2, [r1, #1]
    64fe:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    6502:	704a      	strb	r2, [r1, #1]
    6504:	788b      	ldrb	r3, [r1, #2]
    6506:	f89d 2016 	ldrb.w	r2, [sp, #22]
    650a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    650e:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6510:	3601      	adds	r6, #1
    6512:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    6516:	b2b6      	uxth	r6, r6
    6518:	42b3      	cmp	r3, r6
    651a:	d89c      	bhi.n	6456 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    651c:	b007      	add	sp, #28
    651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6522:	bf00      	nop
    6524:	0000fa58 	.word	0x0000fa58
    6528:	0000f2c8 	.word	0x0000f2c8

0000652c <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6530:	4c58      	ldr	r4, [pc, #352]	; (6694 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    6532:	b083      	sub	sp, #12
    6534:	6823      	ldr	r3, [r4, #0]
    6536:	9301      	str	r3, [sp, #4]
	return ret;
    6538:	9901      	ldr	r1, [sp, #4]
    653a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    653e:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    6542:	f3c1 3147 	ubfx	r1, r1, #13, #8
    6546:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6548:	065e      	lsls	r6, r3, #25
    654a:	f140 809e 	bpl.w	668a <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    654e:	43db      	mvns	r3, r3
    6550:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6552:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    6556:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6558:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    655c:	f8df a138 	ldr.w	sl, [pc, #312]	; 6698 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    6560:	1112      	asrs	r2, r2, #4
    6562:	0052      	lsls	r2, r2, #1
    6564:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6568:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    656c:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    656e:	fb15 f303 	smulbb	r3, r5, r3
    6572:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6576:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6578:	060d      	lsls	r5, r1, #24
    657a:	bf48      	it	mi
    657c:	425b      	negmi	r3, r3
    657e:	b25b      	sxtb	r3, r3

    y += 128;
    6580:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    6582:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6584:	6822      	ldr	r2, [r4, #0]
    6586:	9200      	str	r2, [sp, #0]
    6588:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    658c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    6590:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6592:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    6596:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    659a:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    659e:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    65a2:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    65a6:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    65aa:	0e24      	lsrs	r4, r4, #24
    65ac:	2b00      	cmp	r3, #0
    65ae:	d069      	beq.n	6684 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    65b0:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    65b4:	44a3      	add	fp, r4
    65b6:	43e7      	mvns	r7, r4
    65b8:	fa5f fb8b 	uxtb.w	fp, fp
    65bc:	f100 0801 	add.w	r8, r0, #1
    65c0:	b2ff      	uxtb	r7, r7
    65c2:	e058      	b.n	6676 <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    65c4:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    65c8:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    65ca:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    65ce:	1112      	asrs	r2, r2, #4
    65d0:	0052      	lsls	r2, r2, #1
    65d2:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    65d6:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    65da:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    65dc:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    65e0:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    65e2:	fb11 f303 	smulbb	r3, r1, r3
    65e6:	eb02 1323 	add.w	r3, r2, r3, asr #4
    65ea:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    65ec:	0622      	lsls	r2, r4, #24
    65ee:	7842      	ldrb	r2, [r0, #1]
    65f0:	bf48      	it	mi
    65f2:	425b      	negmi	r3, r3
    65f4:	fa0f fc8e 	sxth.w	ip, lr
    65f8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    65fc:	b25b      	sxtb	r3, r3
    65fe:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    6602:	3b80      	subs	r3, #128	; 0x80
    6604:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    6608:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    660a:	b2db      	uxtb	r3, r3
    660c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    6610:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    6614:	1212      	asrs	r2, r2, #8
    6616:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    661a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    661e:	4465      	add	r5, ip
    6620:	eb02 2525 	add.w	r5, r2, r5, asr #8
    6624:	440e      	add	r6, r1
    6626:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    662a:	eb09 2323 	add.w	r3, r9, r3, asr #8
    662e:	eb05 2626 	add.w	r6, r5, r6, asr #8
    6632:	b2db      	uxtb	r3, r3
    6634:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    6636:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    6638:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    663a:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    663c:	42b3      	cmp	r3, r6
    663e:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    6640:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    6642:	d210      	bcs.n	6666 <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    6644:	fa81 f152 	uqadd8	r1, r1, r2
    6648:	460d      	mov	r5, r1
    664a:	fa85 f551 	uqadd8	r5, r5, r1
    664e:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    6652:	f808 ec01 	strb.w	lr, [r8, #-1]
    6656:	7842      	ldrb	r2, [r0, #1]
    6658:	fa82 f251 	uqadd8	r2, r2, r1
    665c:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    665e:	7042      	strb	r2, [r0, #1]
    6660:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    6664:	7083      	strb	r3, [r0, #2]
    6666:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6668:	455c      	cmp	r4, fp
    666a:	b2ff      	uxtb	r7, r7
    666c:	f100 0003 	add.w	r0, r0, #3
    6670:	f108 0803 	add.w	r8, r8, #3
    6674:	d006      	beq.n	6684 <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6676:	0661      	lsls	r1, r4, #25
    6678:	d4a4      	bmi.n	65c4 <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    667a:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    667e:	f004 030f 	and.w	r3, r4, #15
    6682:	e7a4      	b.n	65ce <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    6684:	b003      	add	sp, #12
    6686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    668a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    668e:	f003 030f 	and.w	r3, r3, #15
    6692:	e763      	b.n	655c <pacifica_add_whitecaps(LEDStruct&)+0x30>
    6694:	1fffa8c0 	.word	0x1fffa8c0
    6698:	0000f450 	.word	0x0000f450

0000669c <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    669c:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    66a0:	b383      	cbz	r3, 6704 <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    66a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    66a4:	1e5c      	subs	r4, r3, #1
    66a6:	b2a4      	uxth	r4, r4
    66a8:	3401      	adds	r4, #1
    66aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    66ae:	4602      	mov	r2, r0
    66b0:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    66b2:	2702      	movs	r7, #2
    66b4:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    66b6:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    66b8:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    66ba:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    66bc:	7891      	ldrb	r1, [r2, #2]
    66be:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    66c2:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    66c6:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    66ca:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    66ce:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    66d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    66d6:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    66d8:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    66da:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    66dc:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    66e0:	2901      	cmp	r1, #1
    66e2:	bf9c      	itt	ls
    66e4:	f800 7c02 	strbls.w	r7, [r0, #-2]
    66e8:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    66ea:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    66ec:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    66ee:	bf98      	it	ls
    66f0:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    66f2:	2b06      	cmp	r3, #6
    66f4:	bf98      	it	ls
    66f6:	7095      	strbls	r5, [r2, #2]
    66f8:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    66fa:	42a2      	cmp	r2, r4
    66fc:	f100 0003 	add.w	r0, r0, #3
    6700:	d1db      	bne.n	66ba <pacifica_deepen_colors(LEDStruct&)+0x1e>
    6702:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6704:	4770      	bx	lr
    6706:	bf00      	nop

00006708 <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    6708:	4b0a      	ldr	r3, [pc, #40]	; (6734 <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    670a:	4a0b      	ldr	r2, [pc, #44]	; (6738 <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    670c:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    670e:	2100      	movs	r1, #0
    6710:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    6712:	b963      	cbnz	r3, 672e <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    6714:	4b09      	ldr	r3, [pc, #36]	; (673c <pacifica_update(LEDStruct&)+0x34>)
    6716:	881b      	ldrh	r3, [r3, #0]
    6718:	428b      	cmp	r3, r1
    671a:	bf14      	ite	ne
    671c:	2301      	movne	r3, #1
    671e:	460b      	moveq	r3, r1
    6720:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6724:	bf14      	ite	ne
    6726:	2396      	movne	r3, #150	; 0x96
        else                     { leds.strip_range = ONE_SIDE; }
    6728:	234b      	moveq	r3, #75	; 0x4b
    672a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
        break;
    default:	break;
    }
    LEDDebug(leds);
    672e:	f7fb bcbd 	b.w	20ac <LEDDebug(LEDStruct&)>
    6732:	bf00      	nop
    6734:	1fff9e2c 	.word	0x1fff9e2c
    6738:	1fff95dd 	.word	0x1fff95dd
    673c:	1fff9e24 	.word	0x1fff9e24

00006740 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    6740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    6744:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    6748:	b08b      	sub	sp, #44	; 0x2c
    674a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    674c:	bb0b      	cbnz	r3, 6792 <pride(LEDStruct&)+0x52>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    674e:	49b4      	ldr	r1, [pc, #720]	; (6a20 <pride(LEDStruct&)+0x2e0>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
	leds.use_palette		= 0;
    6750:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6754:	880b      	ldrh	r3, [r1, #0]
    6756:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    675a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    675e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6762:	3319      	adds	r3, #25
    6764:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6766:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    676a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    676e:	2601      	movs	r6, #1
	leds.mode_type			= PRIDE;
    6770:	2512      	movs	r5, #18
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6772:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6774:	800b      	strh	r3, [r1, #0]

	leds.use_full_range		= ufr;
    6776:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    677a:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
	leds.mode_type			= PRIDE;
    677e:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6782:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6786:	2a00      	cmp	r2, #0
    6788:	f000 81d3 	beq.w	6b32 <pride(LEDStruct&)+0x3f2>
    678c:	2396      	movs	r3, #150	; 0x96
    678e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    6792:	4ba4      	ldr	r3, [pc, #656]	; (6a24 <pride(LEDStruct&)+0x2e4>)
    6794:	781b      	ldrb	r3, [r3, #0]
    6796:	2b00      	cmp	r3, #0
    6798:	f040 81d3 	bne.w	6b42 <pride(LEDStruct&)+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    679c:	49a2      	ldr	r1, [pc, #648]	; (6a28 <pride(LEDStruct&)+0x2e8>)
    679e:	680b      	ldr	r3, [r1, #0]
    67a0:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    67a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    67a4:	f645 7328 	movw	r3, #24360	; 0x5f28
    67a8:	fb03 f000 	mul.w	r0, r3, r0
    67ac:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    67ae:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    67b0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    67b4:	d503      	bpl.n	67be <pride(LEDStruct&)+0x7e>
    67b6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    67ba:	3307      	adds	r3, #7
    67bc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    67be:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    67c0:	4d9a      	ldr	r5, [pc, #616]	; (6a2c <pride(LEDStruct&)+0x2ec>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    67c2:	4e9b      	ldr	r6, [pc, #620]	; (6a30 <pride(LEDStruct&)+0x2f0>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    67c4:	f815 e002 	ldrb.w	lr, [r5, r2]
    67c8:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
    67cc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    67d0:	fb0e 7302 	mla	r3, lr, r2, r7
    67d4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    67d6:	0407      	lsls	r7, r0, #16
    67d8:	bf48      	it	mi
    67da:	425b      	negmi	r3, r3
    67dc:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    67de:	680a      	ldr	r2, [r1, #0]
    67e0:	9208      	str	r2, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    67e2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    67e6:	b29b      	uxth	r3, r3
    67e8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
	return ret;
    67ec:	9f08      	ldr	r7, [sp, #32]
    67ee:	4b91      	ldr	r3, [pc, #580]	; (6a34 <pride(LEDStruct&)+0x2f4>)
    67f0:	0c12      	lsrs	r2, r2, #16
    67f2:	fb03 f707 	mul.w	r7, r3, r7
    67f6:	0c3f      	lsrs	r7, r7, #16
    67f8:	32dc      	adds	r2, #220	; 0xdc
    67fa:	b2d2      	uxtb	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    67fc:	0478      	lsls	r0, r7, #17
    67fe:	f884 2325 	strb.w	r2, [r4, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6802:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6806:	d503      	bpl.n	6810 <pride(LEDStruct&)+0xd0>
    6808:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    680c:	3307      	adds	r3, #7
    680e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6810:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6814:	f3c3 0046 	ubfx	r0, r3, #1, #7
    6818:	f815 c00e 	ldrb.w	ip, [r5, lr]
    681c:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    6820:	fb0c 3300 	mla	r3, ip, r0, r3
    6824:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6826:	0438      	lsls	r0, r7, #16
    6828:	bf48      	it	mi
    682a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    682c:	6808      	ldr	r0, [r1, #0]
    682e:	9007      	str	r0, [sp, #28]
    6830:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    6832:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6836:	b29b      	uxth	r3, r3
	return ret;
    6838:	9f07      	ldr	r7, [sp, #28]
    683a:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    683e:	f64d 6308 	movw	r3, #56840	; 0xde08
    6842:	fb03 fe07 	mul.w	lr, r3, r7
    6846:	0c00      	lsrs	r0, r0, #16
    6848:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    684c:	3060      	adds	r0, #96	; 0x60
    684e:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6850:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    6854:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6858:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    685c:	d003      	beq.n	6866 <pride(LEDStruct&)+0x126>
    685e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6862:	3307      	adds	r3, #7
    6864:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6866:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    686a:	f3c3 0746 	ubfx	r7, r3, #1, #7
    686e:	f815 800c 	ldrb.w	r8, [r5, ip]
    6872:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    6876:	fb08 3307 	mla	r3, r8, r7, r3

    if( theta & 0x8000 ) y = -y;
    687a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    687e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6880:	bf18      	it	ne
    6882:	425b      	negne	r3, r3
    6884:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6886:	680f      	ldr	r7, [r1, #0]
    6888:	9706      	str	r7, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    688a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    688e:	b29b      	uxth	r3, r3
    6890:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
	return ret;
    6894:	9f06      	ldr	r7, [sp, #24]
    6896:	eb03 2e0e 	add.w	lr, r3, lr, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    689a:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    689e:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    68a2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    68a6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    68aa:	f50e 5ec8 	add.w	lr, lr, #6400	; 0x1900
    68ae:	fa1f f78e 	uxth.w	r7, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    68b2:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    68b6:	f8a4 7328 	strh.w	r7, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    68ba:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    68be:	d003      	beq.n	68c8 <pride(LEDStruct&)+0x188>
    68c0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    68c4:	3307      	adds	r3, #7
    68c6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    68c8:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    68cc:	f3c3 0e46 	ubfx	lr, r3, #1, #7
    68d0:	f815 9008 	ldrb.w	r9, [r5, r8]
    68d4:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    68d8:	fb09 330e 	mla	r3, r9, lr, r3
    68dc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    68de:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    68e2:	bf18      	it	ne
    68e4:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68e6:	f8d1 e000 	ldr.w	lr, [r1]
    68ea:	f8cd e014 	str.w	lr, [sp, #20]
    68ee:	b21b      	sxth	r3, r3
    68f0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    68f4:	b29b      	uxth	r3, r3
    68f6:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    68fa:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    68fe:	f8b4 9320 	ldrh.w	r9, [r4, #800]	; 0x320
    6902:	f8a4 932a 	strh.w	r9, [r4, #810]	; 0x32a
    6906:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    690a:	f647 3398 	movw	r3, #31640	; 0x7b98
    690e:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6912:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6916:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    691a:	f10e 0e17 	add.w	lr, lr, #23
    691e:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6922:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    6926:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    692a:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    692e:	d003      	beq.n	6938 <pride(LEDStruct&)+0x1f8>
    6930:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6934:	3307      	adds	r3, #7
    6936:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6938:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    693c:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    6940:	f815 b00a 	ldrb.w	fp, [r5, sl]
    6944:	f836 301a 	ldrh.w	r3, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6948:	f8b4 a31e 	ldrh.w	sl, [r4, #798]	; 0x31e
    694c:	fb0b 330c 	mla	r3, fp, ip, r3
    6950:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6952:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    6956:	bf18      	it	ne
    6958:	425b      	negne	r3, r3
    695a:	fa0f fc83 	sxth.w	ip, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    695e:	680b      	ldr	r3, [r1, #0]
    6960:	9303      	str	r3, [sp, #12]
	return ret;
    6962:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6964:	6809      	ldr	r1, [r1, #0]
    6966:	9104      	str	r1, [sp, #16]
    6968:	f5ac 4100 	sub.w	r1, ip, #32768	; 0x8000
    696c:	b289      	uxth	r1, r1
    696e:	f640 3cb8 	movw	ip, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    6972:	fa1f f883 	uxth.w	r8, r3
	return ret;
    6976:	f8dd b010 	ldr.w	fp, [sp, #16]
    697a:	f8a4 832e 	strh.w	r8, [r4, #814]	; 0x32e
    697e:	fb0c f301 	mul.w	r3, ip, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6982:	492d      	ldr	r1, [pc, #180]	; (6a38 <pride(LEDStruct&)+0x2f8>)
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6984:	f8b4 c31c 	ldrh.w	ip, [r4, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    6988:	f8a4 831e 	strh.w	r8, [r4, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    698c:	ebca 0a08 	rsb	sl, sl, r8
    6990:	fa1f fa8a 	uxth.w	sl, sl
    6994:	fb01 fb0b 	mul.w	fp, r1, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6998:	0c1b      	lsrs	r3, r3, #16
    699a:	3301      	adds	r3, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    699c:	fb1a cc0e 	smlabb	ip, sl, lr, ip
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    69a0:	ea4f 4e1b 	mov.w	lr, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    69a4:	b299      	uxth	r1, r3
    69a6:	fa1f fc8c 	uxth.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    69aa:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    69ae:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    69b2:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    69b6:	f8a4 c31c 	strh.w	ip, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    69ba:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    69be:	d003      	beq.n	69c8 <pride(LEDStruct&)+0x288>
    69c0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    69c4:	3307      	adds	r3, #7
    69c6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    69c8:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    69cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    69d0:	f815 b008 	ldrb.w	fp, [r5, r8]
    69d4:	f836 8018 	ldrh.w	r8, [r6, r8, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    69d8:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    69dc:	fb0b 8303 	mla	r3, fp, r3, r8

    if( theta & 0x8000 ) y = -y;
    69e0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    69e4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    69e6:	bf16      	itet	ne
    69e8:	f1c3 0800 	rsbne	r8, r3, #0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    69ec:	fa0f f883 	sxtheq.w	r8, r3

    if( theta & 0x8000 ) y = -y;
    69f0:	fa0f f888 	sxthne.w	r8, r8

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    69f4:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
    69f8:	fa1f f888 	uxth.w	r8, r8
    69fc:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    6a00:	0c1b      	lsrs	r3, r3, #16
    6a02:	3305      	adds	r3, #5
    6a04:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6a06:	f8b4 e33c 	ldrh.w	lr, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6a0a:	fb0a 9303 	mla	r3, sl, r3, r9
    6a0e:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6a12:	f1be 0f00 	cmp.w	lr, #0
    6a16:	d074      	beq.n	6b02 <pride(LEDStruct&)+0x3c2>
    6a18:	46be      	mov	lr, r7
    6a1a:	460b      	mov	r3, r1
    6a1c:	2700      	movs	r7, #0
    6a1e:	e019      	b.n	6a54 <pride(LEDStruct&)+0x314>
    6a20:	1fff875e 	.word	0x1fff875e
    6a24:	1fff95dd 	.word	0x1fff95dd
    6a28:	1fffa8c0 	.word	0x1fffa8c0
    6a2c:	0000fa58 	.word	0x0000fa58
    6a30:	0000f2c8 	.word	0x0000f2c8
    6a34:	000174f8 	.word	0x000174f8
    6a38:	0001b580 	.word	0x0001b580
    6a3c:	f8b4 932a 	ldrh.w	r9, [r4, #810]	; 0x32a
    6a40:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    6a44:	f8b4 c332 	ldrh.w	ip, [r4, #818]	; 0x332
    6a48:	f8b4 e328 	ldrh.w	lr, [r4, #808]	; 0x328
    6a4c:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    6a50:	f894 2325 	ldrb.w	r2, [r4, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6a54:	44f4      	add	ip, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6a56:	444b      	add	r3, r9
    6a58:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6a5a:	fa1f fc8c 	uxth.w	ip, ip
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    6a5e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a62:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6a66:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
		leds.hue8 = leds.hue16 / 256;
    6a6a:	f884 e324 	strb.w	lr, [r4, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6a6e:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6a72:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a76:	d003      	beq.n	6a80 <pride(LEDStruct&)+0x340>
    6a78:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6a7c:	3307      	adds	r3, #7
    6a7e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6a80:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a84:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6a88:	f815 9008 	ldrb.w	r9, [r5, r8]
    6a8c:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6a90:	f88d e008 	strb.w	lr, [sp, #8]
    6a94:	fb09 3301 	mla	r3, r9, r1, r3

    if( theta & 0x8000 ) y = -y;
    6a98:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a9c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6a9e:	bf18      	it	ne
    6aa0:	425b      	negne	r3, r3
    6aa2:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6aa4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6aa8:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6aaa:	fb03 f103 	mul.w	r1, r3, r3
    6aae:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6ab0:	fb01 fc00 	mul.w	ip, r1, r0
    6ab4:	43c0      	mvns	r0, r0
    6ab6:	eb00 4c1c 	add.w	ip, r0, ip, lsr #16
    6aba:	fa5f fc8c 	uxtb.w	ip, ip
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6abe:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6ac2:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6ac6:	f884 c326 	strb.w	ip, [r4, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6aca:	a901      	add	r1, sp, #4
    6acc:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6ace:	f88d c00a 	strb.w	ip, [sp, #10]
    6ad2:	f88d 2009 	strb.w	r2, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6ad6:	f003 fcbf 	bl	a458 <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6ada:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6ade:	3b01      	subs	r3, #1
    6ae0:	1bdb      	subs	r3, r3, r7
    6ae2:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6ae4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6ae8:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6aec:	4420      	add	r0, r4
    6aee:	2240      	movs	r2, #64	; 0x40
    6af0:	a901      	add	r1, sp, #4
    6af2:	f003 fa55 	bl	9fa0 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6af6:	3701      	adds	r7, #1
    6af8:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6afc:	b2bf      	uxth	r7, r7
    6afe:	42bb      	cmp	r3, r7
    6b00:	d89c      	bhi.n	6a3c <pride(LEDStruct&)+0x2fc>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    6b02:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    6b06:	b98b      	cbnz	r3, 6b2c <pride(LEDStruct&)+0x3ec>
    6b08:	4623      	mov	r3, r4
    6b0a:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    6b0e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6b10:	7811      	ldrb	r1, [r2, #0]
    6b12:	f883 11bf 	strb.w	r1, [r3, #447]	; 0x1bf
        g = rhs.g;
    6b16:	7851      	ldrb	r1, [r2, #1]
    6b18:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
        b = rhs.b;
    6b1c:	7891      	ldrb	r1, [r2, #2]
    6b1e:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
    6b22:	3203      	adds	r2, #3
    6b24:	4290      	cmp	r0, r2
    6b26:	f1a3 0303 	sub.w	r3, r3, #3
    6b2a:	d1f1      	bne.n	6b10 <pride(LEDStruct&)+0x3d0>
}
    6b2c:	b00b      	add	sp, #44	; 0x2c
    6b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    6b32:	234b      	movs	r3, #75	; 0x4b
    6b34:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    6b38:	4b04      	ldr	r3, [pc, #16]	; (6b4c <pride(LEDStruct&)+0x40c>)
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	2b00      	cmp	r3, #0
    6b3e:	f43f ae2d 	beq.w	679c <pride(LEDStruct&)+0x5c>
    6b42:	4620      	mov	r0, r4
    6b44:	f7ff fde0 	bl	6708 <pacifica_update(LEDStruct&)>
    6b48:	e628      	b.n	679c <pride(LEDStruct&)+0x5c>
    6b4a:	bf00      	nop
    6b4c:	1fff95dd 	.word	0x1fff95dd

00006b50 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6b54:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6b58:	b08b      	sub	sp, #44	; 0x2c
    6b5a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6b5c:	bb0b      	cbnz	r3, 6ba2 <colorwave(LEDStruct&)+0x52>
    6b5e:	48d0      	ldr	r0, [pc, #832]	; (6ea0 <colorwave(LEDStruct&)+0x350>)
    6b60:	8803      	ldrh	r3, [r0, #0]
    6b62:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6b66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6b6a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6b6e:	3319      	adds	r3, #25
    6b70:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b72:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6b76:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6b78:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette		= 1;
	leds.mode_type			= COLORWAVE;
    6b7c:	2611      	movs	r6, #17
	leds.delay_time			= 15;
    6b7e:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6b80:	8003      	strh	r3, [r0, #0]
	
	leds.use_full_range		= ufr;
    6b82:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6b86:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    6b8a:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.mode_type			= COLORWAVE;
    6b8e:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
    6b92:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6b96:	2a00      	cmp	r2, #0
    6b98:	f000 81b8 	beq.w	6f0c <colorwave(LEDStruct&)+0x3bc>
    6b9c:	2396      	movs	r3, #150	; 0x96
    6b9e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    6ba2:	4bc0      	ldr	r3, [pc, #768]	; (6ea4 <colorwave(LEDStruct&)+0x354>)
    6ba4:	781b      	ldrb	r3, [r3, #0]
    6ba6:	2b00      	cmp	r3, #0
    6ba8:	f040 81b8 	bne.w	6f1c <colorwave(LEDStruct&)+0x3cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bac:	4abe      	ldr	r2, [pc, #760]	; (6ea8 <colorwave(LEDStruct&)+0x358>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6bae:	4bbf      	ldr	r3, [pc, #764]	; (6eac <colorwave(LEDStruct&)+0x35c>)
    6bb0:	6811      	ldr	r1, [r2, #0]
    6bb2:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    6bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
    6bb6:	fb03 f000 	mul.w	r0, r3, r0
    6bba:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6bbc:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6bbe:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6bc2:	d503      	bpl.n	6bcc <colorwave(LEDStruct&)+0x7c>
    6bc4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6bc8:	3307      	adds	r3, #7
    6bca:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6bcc:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    6bce:	4fb8      	ldr	r7, [pc, #736]	; (6eb0 <colorwave(LEDStruct&)+0x360>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6bd0:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 6eb4 <colorwave(LEDStruct&)+0x364>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6bd4:	5c7e      	ldrb	r6, [r7, r1]
    6bd6:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    6bda:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6bde:	fb06 5301 	mla	r3, r6, r1, r5

    if( theta & 0x8000 ) y = -y;
    6be2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6be4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6be6:	bf48      	it	mi
    6be8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bea:	6811      	ldr	r1, [r2, #0]
    6bec:	9108      	str	r1, [sp, #32]
    6bee:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    6bf0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6bf4:	b29b      	uxth	r3, r3
	return ret;
    6bf6:	9d08      	ldr	r5, [sp, #32]
    6bf8:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    6bfc:	f64d 6308 	movw	r3, #56840	; 0xde08
    6c00:	fb03 f505 	mul.w	r5, r3, r5
    6c04:	0c00      	lsrs	r0, r0, #16
    6c06:	0c2d      	lsrs	r5, r5, #16
    6c08:	3060      	adds	r0, #96	; 0x60
    6c0a:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c0c:	0469      	lsls	r1, r5, #17
    6c0e:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6c12:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c16:	d503      	bpl.n	6c20 <colorwave(LEDStruct&)+0xd0>
    6c18:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c1c:	3307      	adds	r3, #7
    6c1e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c20:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c22:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6c26:	f817 e006 	ldrb.w	lr, [r7, r6]
    6c2a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    6c2e:	fb0e 3301 	mla	r3, lr, r1, r3

    if( theta & 0x8000 ) y = -y;
    6c32:	042e      	lsls	r6, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c34:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6c36:	bf48      	it	mi
    6c38:	425b      	negmi	r3, r3
    6c3a:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c3c:	6811      	ldr	r1, [r2, #0]
    6c3e:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6c40:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6c44:	b29b      	uxth	r3, r3
    6c46:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    6c4a:	9e07      	ldr	r6, [sp, #28]
    6c4c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6c50:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    6c54:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6c58:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6c5a:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6c5c:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    6c60:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c62:	0475      	lsls	r5, r6, #17
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    6c64:	f8a4 1328 	strh.w	r1, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6c68:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c6c:	d503      	bpl.n	6c76 <colorwave(LEDStruct&)+0x126>
    6c6e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c72:	3307      	adds	r3, #7
    6c74:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c76:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c7a:	f3c3 0546 	ubfx	r5, r3, #1, #7
    6c7e:	f817 c00e 	ldrb.w	ip, [r7, lr]
    6c82:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    6c86:	fb0c 3305 	mla	r3, ip, r5, r3
    6c8a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6c8c:	0435      	lsls	r5, r6, #16
    6c8e:	bf48      	it	mi
    6c90:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c92:	6815      	ldr	r5, [r2, #0]
    6c94:	9506      	str	r5, [sp, #24]
    6c96:	b21b      	sxth	r3, r3
    6c98:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6c9c:	b29b      	uxth	r3, r3
    6c9e:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    6ca2:	9d06      	ldr	r5, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    6ca4:	f8b4 c320 	ldrh.w	ip, [r4, #800]	; 0x320
    6ca8:	f8a4 c32a 	strh.w	ip, [r4, #810]	; 0x32a
    6cac:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6cb0:	f647 3398 	movw	r3, #31640	; 0x7b98
    6cb4:	fb03 f505 	mul.w	r5, r3, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6cb8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6cbc:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6cbe:	f10e 0e17 	add.w	lr, lr, #23
    6cc2:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6cc6:	046e      	lsls	r6, r5, #17
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    6cc8:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6ccc:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6cd0:	d503      	bpl.n	6cda <colorwave(LEDStruct&)+0x18a>
    6cd2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6cd6:	3307      	adds	r3, #7
    6cd8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6cda:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6cde:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6ce2:	f817 a009 	ldrb.w	sl, [r7, r9]
    6ce6:	f838 6019 	ldrh.w	r6, [r8, r9, lsl #1]
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6cea:	f8b4 b31c 	ldrh.w	fp, [r4, #796]	; 0x31c
    6cee:	fb0a 6603 	mla	r6, sl, r3, r6
    6cf2:	b2b6      	uxth	r6, r6

    if( theta & 0x8000 ) y = -y;
    6cf4:	042b      	lsls	r3, r5, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cf6:	6813      	ldr	r3, [r2, #0]
    6cf8:	9304      	str	r3, [sp, #16]
    6cfa:	bf48      	it	mi
    6cfc:	4276      	negmi	r6, r6
	return ret;
    6cfe:	f8dd 9010 	ldr.w	r9, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d02:	6813      	ldr	r3, [r2, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6d04:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    6d08:	9305      	str	r3, [sp, #20]
    6d0a:	b236      	sxth	r6, r6
    6d0c:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
    6d10:	f240 43b1 	movw	r3, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    6d14:	fa1f f689 	uxth.w	r6, r9
    6d18:	b292      	uxth	r2, r2
	return ret;
    6d1a:	f8dd a014 	ldr.w	sl, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d1e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 6eb8 <colorwave(LEDStruct&)+0x368>
    6d22:	f8a4 632e 	strh.w	r6, [r4, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d26:	fb03 f202 	mul.w	r2, r3, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    6d2a:	1b73      	subs	r3, r6, r5
    6d2c:	b29d      	uxth	r5, r3
    6d2e:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d30:	fb09 f90a 	mul.w	r9, r9, sl
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d34:	f502 7396 	add.w	r3, r2, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6d38:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6d3c:	fb15 be0e 	smlabb	lr, r5, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6d40:	b29a      	uxth	r2, r3
    6d42:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d46:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    6d4a:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6d4e:	f8a4 5330 	strh.w	r5, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
    6d52:	f8a4 631e 	strh.w	r6, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6d56:	f8a4 e31c 	strh.w	lr, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6d5a:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d5e:	d003      	beq.n	6d68 <colorwave(LEDStruct&)+0x218>
    6d60:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6d64:	3307      	adds	r3, #7
    6d66:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6d68:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6d6c:	f3c3 0646 	ubfx	r6, r3, #1, #7
    6d70:	f817 b00a 	ldrb.w	fp, [r7, sl]
    6d74:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    6d78:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    6d7c:	fb0b 3306 	mla	r3, fp, r6, r3
    6d80:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6d82:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    6d86:	bf18      	it	ne
    6d88:	425b      	negne	r3, r3
    6d8a:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6d8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6d90:	b29b      	uxth	r3, r3
    6d92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6d96:	0c1b      	lsrs	r3, r3, #16
    6d98:	3305      	adds	r3, #5
    6d9a:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6d9c:	f8b4 633c 	ldrh.w	r6, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6da0:	fb05 c303 	mla	r3, r5, r3, ip
    6da4:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6da8:	2e00      	cmp	r6, #0
    6daa:	f000 8098 	beq.w	6ede <colorwave(LEDStruct&)+0x38e>
    6dae:	4613      	mov	r3, r2
    6db0:	f504 7ae4 	add.w	sl, r4, #456	; 0x1c8
    6db4:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6db6:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6dba:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    6dbc:	4463      	add	r3, ip
    6dbe:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    6dc0:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    6dc4:	448e      	add	lr, r1
    6dc6:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    6dca:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    6dce:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    6dd2:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    6dd4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    6dd8:	bf08      	it	eq
    6dda:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ddc:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    6de0:	f884 b324 	strb.w	fp, [r4, #804]	; 0x324
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    6de4:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    6de8:	f8a4 c334 	strh.w	ip, [r4, #820]	; 0x334
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    6dec:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    6df0:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6df4:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6df8:	d003      	beq.n	6e02 <colorwave(LEDStruct&)+0x2b2>
    6dfa:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    6dfe:	3107      	adds	r1, #7
    6e00:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6e02:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6e06:	f3c1 0346 	ubfx	r3, r1, #1, #7
    6e0a:	f817 b00c 	ldrb.w	fp, [r7, ip]
    6e0e:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    6e12:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    6e16:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6e1a:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    6e1c:	bf18      	it	ne
    6e1e:	4249      	negne	r1, r1
    6e20:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6e22:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    6e26:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6e28:	fb01 fe01 	mul.w	lr, r1, r1
    6e2c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    6e30:	fb0e f300 	mul.w	r3, lr, r0
    6e34:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    6e38:	43c0      	mvns	r0, r0
    6e3a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    6e3e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    6e42:	b2db      	uxtb	r3, r3
    6e44:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6e48:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6e4c:	f8a4 e338 	strh.w	lr, [r4, #824]	; 0x338
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    6e50:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6e54:	4651      	mov	r1, sl
    6e56:	f8cd 9000 	str.w	r9, [sp]
    6e5a:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    6e5c:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    6e60:	f003 f8fc 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6e64:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6e68:	3b01      	subs	r3, #1
    6e6a:	1b9b      	subs	r3, r3, r6
    6e6c:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    6e6e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6e72:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    6e76:	4420      	add	r0, r4
    6e78:	2280      	movs	r2, #128	; 0x80
    6e7a:	a903      	add	r1, sp, #12
    6e7c:	3d01      	subs	r5, #1
    6e7e:	f003 f88f 	bl	9fa0 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    6e82:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    6e86:	d019      	beq.n	6ebc <colorwave(LEDStruct&)+0x36c>
    6e88:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    6e8c:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    6e90:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    6e94:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    6e98:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    6e9c:	e78e      	b.n	6dbc <colorwave(LEDStruct&)+0x26c>
    6e9e:	bf00      	nop
    6ea0:	1fff875e 	.word	0x1fff875e
    6ea4:	1fff95dd 	.word	0x1fff95dd
    6ea8:	1fffa8c0 	.word	0x1fffa8c0
    6eac:	000174f8 	.word	0x000174f8
    6eb0:	0000fa58 	.word	0x0000fa58
    6eb4:	0000f2c8 	.word	0x0000f2c8
    6eb8:	0001b580 	.word	0x0001b580
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6ebc:	3601      	adds	r6, #1
    6ebe:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6ec2:	b2b6      	uxth	r6, r6
    6ec4:	42b3      	cmp	r3, r6
    6ec6:	d90a      	bls.n	6ede <colorwave(LEDStruct&)+0x38e>
    6ec8:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    6ecc:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    6ed0:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    6ed4:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    6ed8:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    6edc:	e76d      	b.n	6dba <colorwave(LEDStruct&)+0x26a>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    6ede:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    6ee2:	b983      	cbnz	r3, 6f06 <colorwave(LEDStruct&)+0x3b6>
    6ee4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6ee8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6eea:	781a      	ldrb	r2, [r3, #0]
    6eec:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6ef0:	785a      	ldrb	r2, [r3, #1]
    6ef2:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    6ef6:	789a      	ldrb	r2, [r3, #2]
    6ef8:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6efc:	3303      	adds	r3, #3
    6efe:	4299      	cmp	r1, r3
    6f00:	f1a4 0403 	sub.w	r4, r4, #3
    6f04:	d1f1      	bne.n	6eea <colorwave(LEDStruct&)+0x39a>
}
    6f06:	b00b      	add	sp, #44	; 0x2c
    6f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    6f0c:	234b      	movs	r3, #75	; 0x4b
    6f0e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    6f12:	4b04      	ldr	r3, [pc, #16]	; (6f24 <colorwave(LEDStruct&)+0x3d4>)
    6f14:	781b      	ldrb	r3, [r3, #0]
    6f16:	2b00      	cmp	r3, #0
    6f18:	f43f ae48 	beq.w	6bac <colorwave(LEDStruct&)+0x5c>
    6f1c:	4620      	mov	r0, r4
    6f1e:	f7ff fbf3 	bl	6708 <pacifica_update(LEDStruct&)>
    6f22:	e643      	b.n	6bac <colorwave(LEDStruct&)+0x5c>
    6f24:	1fff95dd 	.word	0x1fff95dd

00006f28 <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    6f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    6f2c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    6f30:	b095      	sub	sp, #84	; 0x54
    6f32:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    6f34:	bb0b      	cbnz	r3, 6f7a <pacifica(LEDStruct&)+0x52>
    6f36:	49c7      	ldr	r1, [pc, #796]	; (7254 <pacifica(LEDStruct&)+0x32c>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    leds.use_palette        = 0;
    6f38:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6f3c:	880b      	ldrh	r3, [r1, #0]
    6f3e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6f42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6f46:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6f4a:	3319      	adds	r3, #25
    6f4c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6f4e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6f52:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6f56:	2601      	movs	r6, #1
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    6f58:	2513      	movs	r5, #19
    leds.delay_time         = 15;
    6f5a:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6f5c:	800b      	strh	r3, [r1, #0]

    leds.use_full_range     = ufr;
    6f5e:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    6f62:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    6f66:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.delay_time         = 15;
    6f6a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6f6e:	2a00      	cmp	r2, #0
    6f70:	f000 828d 	beq.w	748e <pacifica(LEDStruct&)+0x566>
    6f74:	2396      	movs	r3, #150	; 0x96
    6f76:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    6f7a:	4bb7      	ldr	r3, [pc, #732]	; (7258 <pacifica(LEDStruct&)+0x330>)
    6f7c:	781b      	ldrb	r3, [r3, #0]
    6f7e:	2b00      	cmp	r3, #0
    6f80:	f040 828d 	bne.w	749e <pacifica(LEDStruct&)+0x576>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f84:	4db5      	ldr	r5, [pc, #724]	; (725c <pacifica(LEDStruct&)+0x334>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    6f86:	4bb6      	ldr	r3, [pc, #728]	; (7260 <pacifica(LEDStruct&)+0x338>)
    6f88:	682a      	ldr	r2, [r5, #0]
    6f8a:	9205      	str	r2, [sp, #20]
	return ret;
    6f8c:	9a05      	ldr	r2, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f8e:	6829      	ldr	r1, [r5, #0]
    6f90:	9113      	str	r1, [sp, #76]	; 0x4c
	return ret;
    6f92:	9813      	ldr	r0, [sp, #76]	; 0x4c
    6f94:	6819      	ldr	r1, [r3, #0]
    sLastms = ms;
    6f96:	601a      	str	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6f98:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    6f9c:	fb03 f000 	mul.w	r0, r3, r0
    6fa0:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6fa2:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6fa4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    6fa8:	eba2 0101 	sub.w	r1, r2, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    6fac:	d503      	bpl.n	6fb6 <pacifica(LEDStruct&)+0x8e>
    6fae:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6fb2:	3307      	adds	r3, #7
    6fb4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6fb6:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    6fb8:	4faa      	ldr	r7, [pc, #680]	; (7264 <pacifica(LEDStruct&)+0x33c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6fba:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 7280 <pacifica(LEDStruct&)+0x358>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6fbe:	f817 e002 	ldrb.w	lr, [r7, r2]
    6fc2:	f838 6012 	ldrh.w	r6, [r8, r2, lsl #1]
    6fc6:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6fca:	fb0e 6302 	mla	r3, lr, r2, r6

    if( theta & 0x8000 ) y = -y;
    6fce:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6fd0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6fd2:	bf48      	it	mi
    6fd4:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fd6:	682a      	ldr	r2, [r5, #0]
    6fd8:	9212      	str	r2, [sp, #72]	; 0x48
    6fda:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6fdc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6fe0:	b29b      	uxth	r3, r3
    6fe2:	265b      	movs	r6, #91	; 0x5b
	return ret;
    6fe4:	9812      	ldr	r0, [sp, #72]	; 0x48
    6fe6:	fb06 f603 	mul.w	r6, r6, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6fea:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    6fee:	fb03 f000 	mul.w	r0, r3, r0
    6ff2:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6ff4:	0c36      	lsrs	r6, r6, #16
    6ff6:	36b3      	adds	r6, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ff8:	0442      	lsls	r2, r0, #17
    6ffa:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6ffc:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7000:	d503      	bpl.n	700a <pacifica(LEDStruct&)+0xe2>
    7002:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7006:	3307      	adds	r3, #7
    7008:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    700a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    700e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7012:	f817 c00e 	ldrb.w	ip, [r7, lr]
    7016:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    701a:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    701e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7020:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7022:	bf48      	it	mi
    7024:	425b      	negmi	r3, r3
    7026:	b21b      	sxth	r3, r3
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7028:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    702c:	225b      	movs	r2, #91	; 0x5b
    702e:	b29b      	uxth	r3, r3
    7030:	fb02 f303 	mul.w	r3, r2, r3
    7034:	0c1b      	lsrs	r3, r3, #16
    7036:	33b3      	adds	r3, #179	; 0xb3
    7038:	b29b      	uxth	r3, r3
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    703a:	fb01 f606 	mul.w	r6, r1, r6
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    703e:	fb01 f103 	mul.w	r1, r1, r3
    7042:	0a0b      	lsrs	r3, r1, #8
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    7044:	0a36      	lsrs	r6, r6, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    7046:	220d      	movs	r2, #13
    7048:	210a      	movs	r1, #10
    704a:	f240 30f3 	movw	r0, #1011	; 0x3f3
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    704e:	eb06 0903 	add.w	r9, r6, r3
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7052:	9302      	str	r3, [sp, #8]
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    7054:	f7f9 faa2 	bl	59c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7058:	682a      	ldr	r2, [r5, #0]
    705a:	9211      	str	r2, [sp, #68]	; 0x44
    705c:	4b82      	ldr	r3, [pc, #520]	; (7268 <pacifica(LEDStruct&)+0x340>)
	return ret;
    705e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7062:	4982      	ldr	r1, [pc, #520]	; (726c <pacifica(LEDStruct&)+0x344>)
    7064:	881a      	ldrh	r2, [r3, #0]
    7066:	fb01 fe0e 	mul.w	lr, r1, lr
    706a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    706e:	fb06 2000 	mla	r0, r6, r0, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7072:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    7076:	ea4f 0959 	mov.w	r9, r9, lsr #1
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    707a:	8018      	strh	r0, [r3, #0]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    707c:	f3ce 02ca 	ubfx	r2, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7080:	d003      	beq.n	708a <pacifica(LEDStruct&)+0x162>
    7082:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    7086:	3207      	adds	r2, #7
    7088:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    708a:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    708c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    7090:	f817 c000 	ldrb.w	ip, [r7, r0]
    7094:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    7098:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 7284 <pacifica(LEDStruct&)+0x35c>
    709c:	fb0c 2201 	mla	r2, ip, r1, r2

    if( theta & 0x8000 ) y = -y;
    70a0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70a4:	6829      	ldr	r1, [r5, #0]
    70a6:	9110      	str	r1, [sp, #64]	; 0x40
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    70a8:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    70aa:	bf18      	it	ne
    70ac:	4252      	negne	r2, r2
    70ae:	4970      	ldr	r1, [pc, #448]	; (7270 <pacifica(LEDStruct&)+0x348>)
	return ret;
    70b0:	9810      	ldr	r0, [sp, #64]	; 0x40
    70b2:	f8bb e000 	ldrh.w	lr, [fp]
    70b6:	b212      	sxth	r2, r2
    70b8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    70bc:	fb01 f000 	mul.w	r0, r1, r0
    70c0:	f3c2 3281 	ubfx	r2, r2, #14, #2
    70c4:	3208      	adds	r2, #8
    70c6:	0c00      	lsrs	r0, r0, #16
    70c8:	fb09 e912 	mls	r9, r9, r2, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    70cc:	0441      	lsls	r1, r0, #17
    70ce:	f8ab 9000 	strh.w	r9, [fp]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    70d2:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    70d6:	d503      	bpl.n	70e0 <pacifica(LEDStruct&)+0x1b8>
    70d8:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    70dc:	3207      	adds	r2, #7
    70de:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    70e0:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    70e4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    70e8:	f817 c00e 	ldrb.w	ip, [r7, lr]
    70ec:	f838 201e 	ldrh.w	r2, [r8, lr, lsl #1]
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    70f0:	f8df a194 	ldr.w	sl, [pc, #404]	; 7288 <pacifica(LEDStruct&)+0x360>
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    70f4:	f8df 9194 	ldr.w	r9, [pc, #404]	; 728c <pacifica(LEDStruct&)+0x364>
    70f8:	9303      	str	r3, [sp, #12]
    70fa:	fb0c 2201 	mla	r2, ip, r1, r2
    70fe:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    7100:	0401      	lsls	r1, r0, #16
    7102:	bf48      	it	mi
    7104:	4252      	negmi	r2, r2
    7106:	b212      	sxth	r2, r2
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7108:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    710c:	b292      	uxth	r2, r2
    710e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    7112:	0c12      	lsrs	r2, r2, #16
    7114:	f8ba 1000 	ldrh.w	r1, [sl]
    7118:	3205      	adds	r2, #5
    711a:	b292      	uxth	r2, r2
    711c:	fb06 1612 	mls	r6, r6, r2, r1
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7120:	f240 1001 	movw	r0, #257	; 0x101
    7124:	2206      	movs	r2, #6
    7126:	2104      	movs	r1, #4
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7128:	f8aa 6000 	strh.w	r6, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    712c:	f7f9 fa36 	bl	59c <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    7130:	f8b9 2000 	ldrh.w	r2, [r9]
    7134:	9b02      	ldr	r3, [sp, #8]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    7136:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    713a:	fb03 2010 	mls	r0, r3, r0, r2
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    713e:	2202      	movs	r2, #2
    7140:	f04f 0e06 	mov.w	lr, #6
    7144:	f8a9 0000 	strh.w	r0, [r9]
    7148:	260a      	movs	r6, #10
    714a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    714e:	4620      	mov	r0, r4
    7150:	aa0f      	add	r2, sp, #60	; 0x3c
    7152:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
    7156:	f88d e03d 	strb.w	lr, [sp, #61]	; 0x3d
    715a:	f002 fe5d 	bl	9e18 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    715e:	682a      	ldr	r2, [r5, #0]
    7160:	920f      	str	r2, [sp, #60]	; 0x3c

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    7162:	9b03      	ldr	r3, [sp, #12]
	return ret;
    7164:	980f      	ldr	r0, [sp, #60]	; 0x3c
    7166:	881a      	ldrh	r2, [r3, #0]
    7168:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    716c:	fb03 f000 	mul.w	r0, r3, r0
    7170:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7172:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7174:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7178:	d503      	bpl.n	7182 <pacifica(LEDStruct&)+0x25a>
    717a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    717e:	3307      	adds	r3, #7
    7180:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7182:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7184:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7188:	f817 e006 	ldrb.w	lr, [r7, r6]
    718c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    7190:	fb0e 3301 	mla	r3, lr, r1, r3
    7194:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7196:	0401      	lsls	r1, r0, #16
    7198:	bf48      	it	mi
    719a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    719c:	6829      	ldr	r1, [r5, #0]
    719e:	910e      	str	r1, [sp, #56]	; 0x38
    71a0:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    71a2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    71a6:	980e      	ldr	r0, [sp, #56]	; 0x38
    71a8:	b29b      	uxth	r3, r3
    71aa:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    71ae:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    71b2:	fb01 f000 	mul.w	r0, r1, r0
    71b6:	eb03 2306 	add.w	r3, r3, r6, lsl #8
    71ba:	0e00      	lsrs	r0, r0, #24
    71bc:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    71be:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    71c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    71c4:	064e      	lsls	r6, r1, #25
    71c6:	b29b      	uxth	r3, r3
    71c8:	f140 815c 	bpl.w	7484 <pacifica(LEDStruct&)+0x55c>
        offset = (uint8_t)255 - offset;
    71cc:	43c9      	mvns	r1, r1
    71ce:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    71d2:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    71d6:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    71d8:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    71dc:	4e25      	ldr	r6, [pc, #148]	; (7274 <pacifica(LEDStruct&)+0x34c>)
    71de:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    71e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    71e6:	eb06 0c0e 	add.w	ip, r6, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71ea:	f816 e00e 	ldrb.w	lr, [r6, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    71ee:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71f2:	fb1c f101 	smulbb	r1, ip, r1
    71f6:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    71fa:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    71fc:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    71fe:	bf48      	it	mi
    7200:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7202:	6828      	ldr	r0, [r5, #0]
    7204:	9009      	str	r0, [sp, #36]	; 0x24
    7206:	b249      	sxtb	r1, r1

    y += 128;
    7208:	3980      	subs	r1, #128	; 0x80
    720a:	b2c9      	uxtb	r1, r1
	return ret;
    720c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    7210:	4819      	ldr	r0, [pc, #100]	; (7278 <pacifica(LEDStruct&)+0x350>)
    7212:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    7216:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    721a:	fb00 f00e 	mul.w	r0, r0, lr
    721e:	1209      	asrs	r1, r1, #8
    7220:	0c00      	lsrs	r0, r0, #16
    7222:	3146      	adds	r1, #70	; 0x46
    7224:	4240      	negs	r0, r0
    7226:	b2c9      	uxtb	r1, r1
    7228:	b280      	uxth	r0, r0
    722a:	9100      	str	r1, [sp, #0]
    722c:	9001      	str	r0, [sp, #4]
    722e:	4913      	ldr	r1, [pc, #76]	; (727c <pacifica(LEDStruct&)+0x354>)
    7230:	4620      	mov	r0, r4
    7232:	f7ff f8f7 	bl	6424 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7236:	682b      	ldr	r3, [r5, #0]
    7238:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    723a:	980d      	ldr	r0, [sp, #52]	; 0x34
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    723c:	f8bb 2000 	ldrh.w	r2, [fp]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7240:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    7244:	fb03 f000 	mul.w	r0, r3, r0
    7248:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    724a:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    724c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7250:	d522      	bpl.n	7298 <pacifica(LEDStruct&)+0x370>
    7252:	e01d      	b.n	7290 <pacifica(LEDStruct&)+0x368>
    7254:	1fff875e 	.word	0x1fff875e
    7258:	1fff95dd 	.word	0x1fff95dd
    725c:	1fffa8c0 	.word	0x1fffa8c0
    7260:	1fff951c 	.word	0x1fff951c
    7264:	0000fa58 	.word	0x0000fa58
    7268:	1fff9520 	.word	0x1fff9520
    726c:	000351d8 	.word	0x000351d8
    7270:	000223f8 	.word	0x000223f8
    7274:	0000f450 	.word	0x0000f450
    7278:	00014938 	.word	0x00014938
    727c:	1fff953c 	.word	0x1fff953c
    7280:	0000f2c8 	.word	0x0000f2c8
    7284:	1fff9522 	.word	0x1fff9522
    7288:	1fff9508 	.word	0x1fff9508
    728c:	1fff9526 	.word	0x1fff9526
    7290:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7294:	3307      	adds	r3, #7
    7296:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7298:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    729c:	f3c3 0146 	ubfx	r1, r3, #1, #7
    72a0:	f817 700e 	ldrb.w	r7, [r7, lr]
    72a4:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    72a8:	fb07 3301 	mla	r3, r7, r1, r3
    72ac:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    72ae:	0407      	lsls	r7, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72b0:	6829      	ldr	r1, [r5, #0]
    72b2:	910c      	str	r1, [sp, #48]	; 0x30
    72b4:	bf48      	it	mi
    72b6:	425b      	negmi	r3, r3
    72b8:	b21b      	sxth	r3, r3
    72ba:	497b      	ldr	r1, [pc, #492]	; (74a8 <pacifica(LEDStruct&)+0x580>)
	return ret;
    72bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    72be:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    72c2:	b29b      	uxth	r3, r3
    72c4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    72c8:	fb01 f707 	mul.w	r7, r1, r7
    72cc:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    72d0:	0e3f      	lsrs	r7, r7, #24
    72d2:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    72d4:	b2f9      	uxtb	r1, r7
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    72d6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    72da:	0648      	lsls	r0, r1, #25
    72dc:	b29b      	uxth	r3, r3
    72de:	f140 80cc 	bpl.w	747a <pacifica(LEDStruct&)+0x552>
        offset = (uint8_t)255 - offset;
    72e2:	43c8      	mvns	r0, r1
    72e4:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    72e6:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    72ea:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    72ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    72f0:	1100      	asrs	r0, r0, #4
    72f2:	0040      	lsls	r0, r0, #1
    72f4:	eb06 0e00 	add.w	lr, r6, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    72f8:	5c30      	ldrb	r0, [r6, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    72fa:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    72fe:	fb1e f101 	smulbb	r1, lr, r1
    7302:	eb00 1121 	add.w	r1, r0, r1, asr #4
    7306:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    7308:	0638      	lsls	r0, r7, #24
    730a:	bf48      	it	mi
    730c:	4249      	negmi	r1, r1
    730e:	b249      	sxtb	r1, r1

    y += 128;
    7310:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7312:	6828      	ldr	r0, [r5, #0]
    7314:	9008      	str	r0, [sp, #32]
    7316:	b2c9      	uxtb	r1, r1
    7318:	eb01 0081 	add.w	r0, r1, r1, lsl #2
	return ret;
    731c:	9f08      	ldr	r7, [sp, #32]
    731e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    7322:	4862      	ldr	r0, [pc, #392]	; (74ac <pacifica(LEDStruct&)+0x584>)
    7324:	1209      	asrs	r1, r1, #8
    7326:	fb00 f007 	mul.w	r0, r0, r7
    732a:	3128      	adds	r1, #40	; 0x28
    732c:	b2c9      	uxtb	r1, r1
    732e:	0c00      	lsrs	r0, r0, #16
    7330:	9100      	str	r1, [sp, #0]
    7332:	9001      	str	r0, [sp, #4]
    7334:	495e      	ldr	r1, [pc, #376]	; (74b0 <pacifica(LEDStruct&)+0x588>)
    7336:	4620      	mov	r0, r4
    7338:	f7ff f874 	bl	6424 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    733c:	682b      	ldr	r3, [r5, #0]
    733e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    7340:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    7342:	f8ba 2000 	ldrh.w	r2, [sl]
    7346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    734a:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    734e:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7352:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7354:	065f      	lsls	r7, r3, #25
    7356:	f140 808b 	bpl.w	7470 <pacifica(LEDStruct&)+0x548>
        offset = (uint8_t)255 - offset;
    735a:	43db      	mvns	r3, r3
    735c:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    735e:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    7362:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7364:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7368:	1109      	asrs	r1, r1, #4
    736a:	0049      	lsls	r1, r1, #1
    736c:	1877      	adds	r7, r6, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    736e:	5c71      	ldrb	r1, [r6, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7370:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7372:	fb17 f303 	smulbb	r3, r7, r3
    7376:	eb01 1323 	add.w	r3, r1, r3, asr #4
    737a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    737c:	0601      	lsls	r1, r0, #24
    737e:	bf48      	it	mi
    7380:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7382:	6829      	ldr	r1, [r5, #0]
    7384:	9107      	str	r1, [sp, #28]
    7386:	b25b      	sxtb	r3, r3

    y += 128;
    7388:	3b80      	subs	r3, #128	; 0x80
	return ret;
    738a:	9807      	ldr	r0, [sp, #28]
    738c:	4949      	ldr	r1, [pc, #292]	; (74b4 <pacifica(LEDStruct&)+0x58c>)
    738e:	b2db      	uxtb	r3, r3
    7390:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
    7394:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    7398:	fb01 f100 	mul.w	r1, r1, r0
    739c:	121b      	asrs	r3, r3, #8
    739e:	0c09      	lsrs	r1, r1, #16
    73a0:	330a      	adds	r3, #10
    73a2:	4249      	negs	r1, r1
    73a4:	b2db      	uxtb	r3, r3
    73a6:	b289      	uxth	r1, r1
    73a8:	9300      	str	r3, [sp, #0]
    73aa:	9101      	str	r1, [sp, #4]
    73ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    73b0:	4620      	mov	r0, r4
    73b2:	4941      	ldr	r1, [pc, #260]	; (74b8 <pacifica(LEDStruct&)+0x590>)
    73b4:	f7ff f836 	bl	6424 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73b8:	682b      	ldr	r3, [r5, #0]
    73ba:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    73bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    73be:	f8b9 2000 	ldrh.w	r2, [r9]
    73c2:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    73c6:	fb03 f000 	mul.w	r0, r3, r0
    73ca:	0e00      	lsrs	r0, r0, #24
    73cc:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    73ce:	065f      	lsls	r7, r3, #25
    73d0:	d549      	bpl.n	7466 <pacifica(LEDStruct&)+0x53e>
        offset = (uint8_t)255 - offset;
    73d2:	43db      	mvns	r3, r3
    73d4:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    73d6:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    73da:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    73dc:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    73e0:	1109      	asrs	r1, r1, #4
    73e2:	0049      	lsls	r1, r1, #1
    73e4:	1877      	adds	r7, r6, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    73e6:	5c71      	ldrb	r1, [r6, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    73e8:	787e      	ldrb	r6, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    73ea:	fb16 f303 	smulbb	r3, r6, r3
    73ee:	eb01 1323 	add.w	r3, r1, r3, asr #4
    73f2:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    73f4:	0601      	lsls	r1, r0, #24
    73f6:	bf48      	it	mi
    73f8:	425b      	negmi	r3, r3
    73fa:	b25b      	sxtb	r3, r3

    y += 128;
    73fc:	3b80      	subs	r3, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73fe:	6829      	ldr	r1, [r5, #0]
    7400:	9106      	str	r1, [sp, #24]
    7402:	b2db      	uxtb	r3, r3
    7404:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    7408:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	return ret;
    740c:	9d06      	ldr	r5, [sp, #24]
    740e:	482b      	ldr	r0, [pc, #172]	; (74bc <pacifica(LEDStruct&)+0x594>)
    7410:	4929      	ldr	r1, [pc, #164]	; (74b8 <pacifica(LEDStruct&)+0x590>)
    7412:	121b      	asrs	r3, r3, #8
    7414:	330a      	adds	r3, #10
    7416:	fb00 f005 	mul.w	r0, r0, r5
    741a:	b2db      	uxtb	r3, r3
    741c:	0c00      	lsrs	r0, r0, #16
    741e:	9300      	str	r3, [sp, #0]
    7420:	9001      	str	r0, [sp, #4]
    7422:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    7426:	4620      	mov	r0, r4
    7428:	f7fe fffc 	bl	6424 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps(leds);
    742c:	4620      	mov	r0, r4
    742e:	f7ff f87d 	bl	652c <pacifica_add_whitecaps(LEDStruct&)>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors(leds);
    7432:	4620      	mov	r0, r4
    7434:	f7ff f932 	bl	669c <pacifica_deepen_colors(LEDStruct&)>

    if (!leds.use_full_range) { strip_sync(leds); }
    7438:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    743c:	b983      	cbnz	r3, 7460 <pacifica(LEDStruct&)+0x538>
    743e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    7442:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7444:	781a      	ldrb	r2, [r3, #0]
    7446:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    744a:	785a      	ldrb	r2, [r3, #1]
    744c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    7450:	789a      	ldrb	r2, [r3, #2]
    7452:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    7456:	3303      	adds	r3, #3
    7458:	4299      	cmp	r1, r3
    745a:	f1a4 0403 	sub.w	r4, r4, #3
    745e:	d1f1      	bne.n	7444 <pacifica(LEDStruct&)+0x51c>
}
    7460:	b015      	add	sp, #84	; 0x54
    7462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7466:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    746a:	f003 030f 	and.w	r3, r3, #15
    746e:	e7b7      	b.n	73e0 <pacifica(LEDStruct&)+0x4b8>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7470:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7474:	f003 030f 	and.w	r3, r3, #15
    7478:	e776      	b.n	7368 <pacifica(LEDStruct&)+0x440>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    747a:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    747e:	f001 010f 	and.w	r1, r1, #15
    7482:	e735      	b.n	72f0 <pacifica(LEDStruct&)+0x3c8>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7484:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7488:	f001 010f 	and.w	r1, r1, #15
    748c:	e6a6      	b.n	71dc <pacifica(LEDStruct&)+0x2b4>
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
    748e:	234b      	movs	r3, #75	; 0x4b
    7490:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    7494:	4b0a      	ldr	r3, [pc, #40]	; (74c0 <pacifica(LEDStruct&)+0x598>)
    7496:	781b      	ldrb	r3, [r3, #0]
    7498:	2b00      	cmp	r3, #0
    749a:	f43f ad73 	beq.w	6f84 <pacifica(LEDStruct&)+0x5c>
    749e:	4620      	mov	r0, r4
    74a0:	f7ff f932 	bl	6708 <pacifica_update(LEDStruct&)>
    74a4:	e56e      	b.n	6f84 <pacifica(LEDStruct&)+0x5c>
    74a6:	bf00      	nop
    74a8:	00129800 	.word	0x00129800
    74ac:	0001b698 	.word	0x0001b698
    74b0:	1fff956c 	.word	0x1fff956c
    74b4:	00022628 	.word	0x00022628
    74b8:	1fff959c 	.word	0x1fff959c
    74bc:	00029158 	.word	0x00029158
    74c0:	1fff95dd 	.word	0x1fff95dd

000074c4 <bounce_update(LEDStruct&)>:
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    74c4:	4b1c      	ldr	r3, [pc, #112]	; (7538 <bounce_update(LEDStruct&)+0x74>)
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    74c6:	4a1d      	ldr	r2, [pc, #116]	; (753c <bounce_update(LEDStruct&)+0x78>)
	switch (update_var) {
    74c8:	781b      	ldrb	r3, [r3, #0]
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    74ca:	2100      	movs	r1, #0
    74cc:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    74ce:	2b05      	cmp	r3, #5
    74d0:	d810      	bhi.n	74f4 <bounce_update(LEDStruct&)+0x30>
    74d2:	e8df f003 	tbb	[pc, r3]
    74d6:	031a      	.short	0x031a
    74d8:	11292320 	.word	0x11292320
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length,10,BOUNCE_MAX_LENGTH);	//b		
    74dc:	4b18      	ldr	r3, [pc, #96]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    74de:	781b      	ldrb	r3, [r3, #0]
    74e0:	2b09      	cmp	r3, #9
    74e2:	d927      	bls.n	7534 <bounce_update(LEDStruct&)+0x70>
    74e4:	2b14      	cmp	r3, #20
    74e6:	461a      	mov	r2, r3
    74e8:	bfa8      	it	ge
    74ea:	2214      	movge	r2, #20
    74ec:	f880 223a 	strb.w	r2, [r0, #570]	; 0x23a
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
    74f0:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    74f4:	f7fa bdda 	b.w	20ac <LEDDebug(LEDStruct&)>
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length,10,BOUNCE_MAX_LENGTH);	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
    74f8:	4b11      	ldr	r3, [pc, #68]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    74fa:	881b      	ldrh	r3, [r3, #0]
    74fc:	3300      	adds	r3, #0
    74fe:	bf18      	it	ne
    7500:	2301      	movne	r3, #1
    7502:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    7506:	f7fa bdd1 	b.w	20ac <LEDDebug(LEDStruct&)>


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
    750a:	4b0d      	ldr	r3, [pc, #52]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    750c:	881b      	ldrh	r3, [r3, #0]
    750e:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7512:	f7fa bdcb 	b.w	20ac <LEDDebug(LEDStruct&)>
    7516:	4b0a      	ldr	r3, [pc, #40]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	e7e9      	b.n	74f0 <bounce_update(LEDStruct&)+0x2c>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length,10,BOUNCE_MAX_LENGTH);	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
    751c:	4b08      	ldr	r3, [pc, #32]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    751e:	881b      	ldrh	r3, [r3, #0]
    7520:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7524:	f7fa bdc2 	b.w	20ac <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length,10,BOUNCE_MAX_LENGTH);	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
    7528:	4b05      	ldr	r3, [pc, #20]	; (7540 <bounce_update(LEDStruct&)+0x7c>)
    752a:	881b      	ldrh	r3, [r3, #0]
    752c:	f880 3238 	strb.w	r3, [r0, #568]	; 0x238
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7530:	f7fa bdbc 	b.w	20ac <LEDDebug(LEDStruct&)>
    7534:	220a      	movs	r2, #10
    7536:	e7d9      	b.n	74ec <bounce_update(LEDStruct&)+0x28>
    7538:	1fff9e2c 	.word	0x1fff9e2c
    753c:	1fff95dd 	.word	0x1fff95dd
    7540:	1fff9e24 	.word	0x1fff9e24

00007544 <bounce(LEDStruct&)>:
}


void bounce(LEDStruct& leds) {
    7544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    7548:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void bounce(LEDStruct& leds) {
    754c:	b08b      	sub	sp, #44	; 0x2c
    754e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    7550:	2a00      	cmp	r2, #0
    7552:	f000 813f 	beq.w	77d4 <bounce(LEDStruct&)+0x290>
    7556:	f200 233b 	addw	r3, r0, #571	; 0x23b
    755a:	9303      	str	r3, [sp, #12]
    755c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (keyboard_update) { bounce_update(leds); }
    7560:	4b97      	ldr	r3, [pc, #604]	; (77c0 <bounce(LEDStruct&)+0x27c>)
    7562:	781b      	ldrb	r3, [r3, #0]
    7564:	2b00      	cmp	r3, #0
    7566:	f040 8126 	bne.w	77b6 <bounce(LEDStruct&)+0x272>

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    756a:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    756e:	2b00      	cmp	r3, #0
    7570:	f000 80fc 	beq.w	776c <bounce(LEDStruct&)+0x228>
    7574:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    7578:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    757c:	1c51      	adds	r1, r2, #1
    757e:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
    7582:	4620      	mov	r0, r4
    7584:	214b      	movs	r1, #75	; 0x4b
    7586:	f002 fc57 	bl	9e38 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    758a:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    758e:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7592:	4f8c      	ldr	r7, [pc, #560]	; (77c4 <bounce(LEDStruct&)+0x280>)
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    7594:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    7598:	9803      	ldr	r0, [sp, #12]
    759a:	2114      	movs	r1, #20
    759c:	f002 fcfe 	bl	9f9c <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    75a0:	683b      	ldr	r3, [r7, #0]
    75a2:	9308      	str	r3, [sp, #32]
	return ret;
    75a4:	9808      	ldr	r0, [sp, #32]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    75a6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    75aa:	f894 223a 	ldrb.w	r2, [r4, #570]	; 0x23a
    75ae:	f44f 738c 	mov.w	r3, #280	; 0x118
    75b2:	fb03 f300 	mul.w	r3, r3, r0
    75b6:	0209      	lsls	r1, r1, #8
    75b8:	fb03 f101 	mul.w	r1, r3, r1
    75bc:	0e09      	lsrs	r1, r1, #24
    75be:	b2c8      	uxtb	r0, r1
    75c0:	3a01      	subs	r2, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    75c2:	0646      	lsls	r6, r0, #25
    75c4:	b2d2      	uxtb	r2, r2
    75c6:	f140 80cc 	bpl.w	7762 <bounce(LEDStruct&)+0x21e>
        offset = (uint8_t)255 - offset;
    75ca:	43c3      	mvns	r3, r0
    75cc:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    75ce:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    75d2:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    75d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    75d8:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 77cc <bounce(LEDStruct&)+0x288>
    75dc:	111b      	asrs	r3, r3, #4
    75de:	005b      	lsls	r3, r3, #1
    75e0:	eb0a 0603 	add.w	r6, sl, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75e4:	f81a 3003 	ldrb.w	r3, [sl, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    75e8:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75ea:	fb16 f000 	smulbb	r0, r6, r0
    75ee:	eb03 1320 	add.w	r3, r3, r0, asr #4
    if( theta & 0x80 ) y = -y;
    75f2:	0609      	lsls	r1, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    75f4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    75f6:	bf48      	it	mi
    75f8:	425b      	negmi	r3, r3
    75fa:	b25b      	sxtb	r3, r3
    75fc:	3b80      	subs	r3, #128	; 0x80
    75fe:	b2de      	uxtb	r6, r3
    7600:	fb02 6606 	mla	r6, r2, r6, r6
    7604:	1236      	asrs	r6, r6, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    7606:	2301      	movs	r3, #1
    7608:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    760c:	f884 6239 	strb.w	r6, [r4, #569]	; 0x239
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    7610:	4649      	mov	r1, r9
    7612:	9300      	str	r3, [sp, #0]
    7614:	4640      	mov	r0, r8
    7616:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    7618:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    761c:	f002 fd1e 	bl	a05c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    7620:	19a3      	adds	r3, r4, r6
    7622:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    7626:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
    762a:	fa82 f251 	uqadd8	r2, r2, r1
    762e:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
    7632:	f893 123c 	ldrb.w	r1, [r3, #572]	; 0x23c
    7636:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    763a:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    763e:	f883 123c 	strb.w	r1, [r3, #572]	; 0x23c
    7642:	f893 223d 	ldrb.w	r2, [r3, #573]	; 0x23d
    7646:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    764a:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    764e:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    7652:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    7656:	b1f3      	cbz	r3, 7696 <bounce(LEDStruct&)+0x152>
    7658:	2600      	movs	r6, #0
    765a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    765c:	46b0      	mov	r8, r6
    765e:	e001      	b.n	7664 <bounce(LEDStruct&)+0x120>
    7660:	f201 213b 	addw	r1, r1, #571	; 0x23b
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    7664:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    7668:	4433      	add	r3, r6
    766a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    766e:	18e2      	adds	r2, r4, r3
    7670:	f804 8003 	strb.w	r8, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    7674:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    7676:	f882 8001 	strb.w	r8, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    767a:	f882 8002 	strb.w	r8, [r2, #2]
    767e:	22ff      	movs	r2, #255	; 0xff
    7680:	f002 fc8e 	bl	9fa0 <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    7684:	3601      	adds	r6, #1
    7686:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    768a:	b2f6      	uxtb	r6, r6
    768c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    7690:	42b3      	cmp	r3, r6
    7692:	4421      	add	r1, r4
    7694:	d8e4      	bhi.n	7660 <bounce(LEDStruct&)+0x11c>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    7696:	f8df 8138 	ldr.w	r8, [pc, #312]	; 77d0 <bounce(LEDStruct&)+0x28c>
    769a:	f8d8 2000 	ldr.w	r2, [r8]
    769e:	07d6      	lsls	r6, r2, #31
    76a0:	d51a      	bpl.n	76d8 <bounce(LEDStruct&)+0x194>
    76a2:	4e49      	ldr	r6, [pc, #292]	; (77c8 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76a4:	683a      	ldr	r2, [r7, #0]
    76a6:	9207      	str	r2, [sp, #28]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    76a8:	e896 0003 	ldmia.w	r6, {r0, r1}
	return ret;
    76ac:	9a07      	ldr	r2, [sp, #28]
    76ae:	1a12      	subs	r2, r2, r0
    76b0:	428a      	cmp	r2, r1
    76b2:	d222      	bcs.n	76fa <bounce(LEDStruct&)+0x1b6>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    76b4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    76b6:	781a      	ldrb	r2, [r3, #0]
    76b8:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    76bc:	785a      	ldrb	r2, [r3, #1]
    76be:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    76c2:	789a      	ldrb	r2, [r3, #2]
    76c4:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    76c8:	3303      	adds	r3, #3
    76ca:	429d      	cmp	r5, r3
    76cc:	f1a4 0403 	sub.w	r4, r4, #3
    76d0:	d1f1      	bne.n	76b6 <bounce(LEDStruct&)+0x172>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }

	strip_sync(leds);
}
    76d2:	b00b      	add	sp, #44	; 0x2c
    76d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    76d8:	4640      	mov	r0, r8
    76da:	f003 fbd9 	bl	ae90 <__cxa_guard_acquire>
    76de:	2800      	cmp	r0, #0
    76e0:	f040 8111 	bne.w	7906 <bounce(LEDStruct&)+0x3c2>
    76e4:	4e38      	ldr	r6, [pc, #224]	; (77c8 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76e6:	683b      	ldr	r3, [r7, #0]
    76e8:	9307      	str	r3, [sp, #28]
    76ea:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    76ee:	9b07      	ldr	r3, [sp, #28]
    76f0:	1a5b      	subs	r3, r3, r1
    76f2:	4293      	cmp	r3, r2
    76f4:	d3de      	bcc.n	76b4 <bounce(LEDStruct&)+0x170>
    76f6:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76fa:	683a      	ldr	r2, [r7, #0]
    76fc:	9206      	str	r2, [sp, #24]
	return ret;
    76fe:	9906      	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7700:	683a      	ldr	r2, [r7, #0]
    7702:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    7704:	9809      	ldr	r0, [sp, #36]	; 0x24
    7706:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    770a:	6031      	str	r1, [r6, #0]
    770c:	f44f 718c 	mov.w	r1, #280	; 0x118
    7710:	fb01 f100 	mul.w	r1, r1, r0
    7714:	0212      	lsls	r2, r2, #8
    7716:	fb02 f101 	mul.w	r1, r2, r1
    771a:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    771c:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    771e:	0650      	lsls	r0, r2, #25
    7720:	f100 80e9 	bmi.w	78f6 <bounce(LEDStruct&)+0x3b2>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7724:	f002 063f 	and.w	r6, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7728:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    772c:	1132      	asrs	r2, r6, #4
    772e:	0052      	lsls	r2, r2, #1
    7730:	eb0a 0602 	add.w	r6, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7734:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7738:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffs