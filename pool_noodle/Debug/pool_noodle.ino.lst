
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 bd 94 00 00 75 94 00 00     ... ........u...
      10:	75 94 00 00 75 94 00 00 75 94 00 00 75 94 00 00     u...u...u...u...
      20:	75 94 00 00 75 94 00 00 75 94 00 00 bd 94 00 00     u...u...u.......
      30:	bd 94 00 00 75 94 00 00 e9 a8 00 00 ed a9 00 00     ....u...........
      40:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      50:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      60:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      70:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      80:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      90:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      a0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      b0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      c0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      d0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      e0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
      f0:	bd 94 00 00 45 ad 00 00 bd 94 00 00 71 ae 00 00     ....E.......q...
     100:	bd 94 00 00 9d af 00 00 bd 94 00 00 bd 94 00 00     ................
     110:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     120:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     130:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     140:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     150:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     160:	bd 94 00 00 05 99 00 00 bd 94 00 00 bd 94 00 00     ................
     170:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     180:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     190:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     1a0:	bd 94 00 00 bd 94 00 00 bd 94 00 00 bd 94 00 00     ................
     1b0:	bd 94 00 00 bd 94 00 00 bd 94 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f009 f978 	bl	94c4 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f009 f9cc 	bl	9670 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f009 f93d 	bl	9560 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f009 f92e 	bl	9560 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00b fe30 	bl	bf6c <__libc_init_array>

	startup_late_hook();
     30c:	f009 f8e0 	bl	94d0 <startup_late_hook>
	main();
     310:	f00a fb74 	bl	a9fc <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c44 	.word	0x1fff8c44
     33c:	0000ed08 	.word	0x0000ed08
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c44 	.word	0x1fff8c44
     348:	1fffa31c 	.word	0x1fffa31c
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3078bc 	.word	0x5e3078bc
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c44 	.word	0x1fff8c44
     42c:	00000000 	.word	0x00000000
     430:	0000ed0c 	.word	0x0000ed0c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c48 	.word	0x1fff8c48
     460:	0000ed0c 	.word	0x0000ed0c
     464:	1fff8c44 	.word	0x1fff8c44
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4b18      	ldr	r3, [pc, #96]	; (4f4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x64>)
     494:	b083      	sub	sp, #12
     496:	681b      	ldr	r3, [r3, #0]
     498:	9301      	str	r3, [sp, #4]
	return ret;
     49a:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     49c:	f44f 738c 	mov.w	r3, #280	; 0x118
     4a0:	fb03 f606 	mul.w	r6, r3, r6
     4a4:	fb00 f006 	mul.w	r0, r0, r6
     4a8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4aa:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4ac:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4b0:	d503      	bpl.n	4ba <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x2a>
     4b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4b6:	3307      	adds	r3, #7
     4b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ba:	0a18      	lsrs	r0, r3, #8
     4bc:	4d0e      	ldr	r5, [pc, #56]	; (4f8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x68>)
    uint8_t  m   = slope[section];
     4be:	4c0f      	ldr	r4, [pc, #60]	; (4fc <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4c0:	5c24      	ldrb	r4, [r4, r0]
     4c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     4c6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4ca:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     4ce:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d0:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     4d2:	bf48      	it	mi
     4d4:	4264      	negmi	r4, r4
     4d6:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     4d8:	1a53      	subs	r3, r2, r1
     4da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4de:	b29a      	uxth	r2, r3
     4e0:	b2a3      	uxth	r3, r4
     4e2:	fb02 3303 	mla	r3, r2, r3, r3
     4e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     4ea:	b280      	uxth	r0, r0
     4ec:	b003      	add	sp, #12
     4ee:	bc70      	pop	{r4, r5, r6}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	1fffa058 	.word	0x1fffa058
     4f8:	0000cf9c 	.word	0x0000cf9c
     4fc:	0000dab4 	.word	0x0000dab4

00000500 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     500:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     502:	2101      	movs	r1, #1
     504:	4604      	mov	r4, r0
     506:	200e      	movs	r0, #14
     508:	f009 f83c 	bl	9584 <pinMode>
     50c:	2007      	movs	r0, #7
     50e:	2101      	movs	r1, #1
     510:	f009 f838 	bl	9584 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     514:	69a0      	ldr	r0, [r4, #24]
     516:	b158      	cbz	r0, 530 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     518:	6803      	ldr	r3, [r0, #0]
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	4293      	cmp	r3, r2
     520:	d107      	bne.n	532 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     522:	6842      	ldr	r2, [r0, #4]
     524:	7b01      	ldrb	r1, [r0, #12]
     526:	7813      	ldrb	r3, [r2, #0]
     528:	ea23 0301 	bic.w	r3, r3, r1
     52c:	7013      	strb	r3, [r2, #0]
     52e:	bd10      	pop	{r4, pc}
     530:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     536:	4718      	bx	r3
     538:	00000481 	.word	0x00000481

0000053c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     540:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     542:	6805      	ldr	r5, [r0, #0]
     544:	f88d 3004 	strb.w	r3, [sp, #4]
     548:	f88d 3005 	strb.w	r3, [sp, #5]
     54c:	f88d 3006 	strb.w	r3, [sp, #6]
     550:	682e      	ldr	r6, [r5, #0]
     552:	4a37      	ldr	r2, [pc, #220]	; (630 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     554:	f88d 3008 	strb.w	r3, [sp, #8]
     558:	4296      	cmp	r6, r2
     55a:	f88d 3009 	strb.w	r3, [sp, #9]
     55e:	f88d 300a 	strb.w	r3, [sp, #10]
     562:	d15f      	bne.n	624 <CLEDController::clearLeds(int)+0xe8>
     564:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     566:	9104      	str	r1, [sp, #16]
     568:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     56c:	a801      	add	r0, sp, #4
     56e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     570:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     574:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     578:	f88d 3020 	strb.w	r3, [sp, #32]
     57c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     57e:	d015      	beq.n	5ac <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     580:	f88d 301d 	strb.w	r3, [sp, #29]
     584:	f88d 301c 	strb.w	r3, [sp, #28]
     588:	f88d 301b 	strb.w	r3, [sp, #27]
     58c:	f88d 301a 	strb.w	r3, [sp, #26]
     590:	f88d 3019 	strb.w	r3, [sp, #25]
     594:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     598:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     59a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     59c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     5a2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a4:	a903      	add	r1, sp, #12
     5a6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5a8:	b00b      	add	sp, #44	; 0x2c
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     5ac:	4a21      	ldr	r2, [pc, #132]	; (634 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ae:	7813      	ldrb	r3, [r2, #0]
     5b0:	3301      	adds	r3, #1
     5b2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5b6:	f013 0f01 	tst.w	r3, #1
     5ba:	bf14      	ite	ne
     5bc:	2180      	movne	r1, #128	; 0x80
     5be:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5c0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5c2:	079a      	lsls	r2, r3, #30
     5c4:	bf44      	itt	mi
     5c6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5ca:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5cc:	075b      	lsls	r3, r3, #29
     5ce:	bf48      	it	mi
     5d0:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5d4:	3110      	adds	r1, #16
     5d6:	2200      	movs	r2, #0
     5d8:	b2c9      	uxtb	r1, r1
     5da:	f10d 031b 	add.w	r3, sp, #27
     5de:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5e2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5e6:	b1aa      	cbz	r2, 614 <CLEDController::clearLeds(int)+0xd8>
     5e8:	fb9e f2f2 	sdiv	r2, lr, r2
     5ec:	b2d2      	uxtb	r2, r2
     5ee:	1c50      	adds	r0, r2, #1
     5f0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5f2:	fb00 1501 	mla	r5, r0, r1, r1
     5f6:	122d      	asrs	r5, r5, #8
     5f8:	7018      	strb	r0, [r3, #0]
     5fa:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5fc:	b105      	cbz	r5, 600 <CLEDController::clearLeds(int)+0xc4>
     5fe:	3e01      	subs	r6, #1
     600:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     604:	b100      	cbz	r0, 608 <CLEDController::clearLeds(int)+0xcc>
     606:	701a      	strb	r2, [r3, #0]
     608:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     60a:	429f      	cmp	r7, r3
     60c:	d008      	beq.n	620 <CLEDController::clearLeds(int)+0xe4>
     60e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     610:	2a00      	cmp	r2, #0
     612:	d1e9      	bne.n	5e8 <CLEDController::clearLeds(int)+0xac>
     614:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     616:	f803 2c03 	strb.w	r2, [r3, #-3]
     61a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     61c:	429f      	cmp	r7, r3
     61e:	d1f6      	bne.n	60e <CLEDController::clearLeds(int)+0xd2>
     620:	6825      	ldr	r5, [r4, #0]
     622:	e7b9      	b.n	598 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     624:	460a      	mov	r2, r1
     626:	ab02      	add	r3, sp, #8
     628:	a901      	add	r1, sp, #4
     62a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     62c:	b00b      	add	sp, #44	; 0x2c
     62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     630:	000006fd 	.word	0x000006fd
     634:	1fff8c60 	.word	0x1fff8c60

00000638 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     63c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     63e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     640:	789b      	ldrb	r3, [r3, #2]
     642:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     646:	9101      	str	r1, [sp, #4]
     648:	9202      	str	r2, [sp, #8]
     64a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     650:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     658:	d017      	beq.n	68a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     65a:	2300      	movs	r3, #0
     65c:	f88d 3015 	strb.w	r3, [sp, #21]
     660:	f88d 3014 	strb.w	r3, [sp, #20]
     664:	f88d 3013 	strb.w	r3, [sp, #19]
     668:	f88d 3012 	strb.w	r3, [sp, #18]
     66c:	f88d 3011 	strb.w	r3, [sp, #17]
     670:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     674:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     676:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     678:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     67a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     67c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     680:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     682:	a901      	add	r1, sp, #4
     684:	4798      	blx	r3
  }
     686:	b009      	add	sp, #36	; 0x24
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     68a:	4a1b      	ldr	r2, [pc, #108]	; (6f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     68c:	7813      	ldrb	r3, [r2, #0]
     68e:	3301      	adds	r3, #1
     690:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     694:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     698:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     69a:	bf14      	ite	ne
     69c:	2280      	movne	r2, #128	; 0x80
     69e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6a0:	0799      	lsls	r1, r3, #30
     6a2:	bf44      	itt	mi
     6a4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6a8:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6aa:	075b      	lsls	r3, r3, #29
     6ac:	bf48      	it	mi
     6ae:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6b2:	3210      	adds	r2, #16
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	f10d 0313 	add.w	r3, sp, #19
     6ba:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6be:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6c2:	b1ac      	cbz	r4, 6f0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     6c4:	fb9e f4f4 	sdiv	r4, lr, r4
     6c8:	b2e4      	uxtb	r4, r4
     6ca:	1c61      	adds	r1, r4, #1
     6cc:	b2c9      	uxtb	r1, r1
     6ce:	fb01 2502 	mla	r5, r1, r2, r2
     6d2:	122d      	asrs	r5, r5, #8
     6d4:	7019      	strb	r1, [r3, #0]
     6d6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6d8:	b105      	cbz	r5, 6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     6da:	3e01      	subs	r6, #1
     6dc:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6e0:	b101      	cbz	r1, 6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6e2:	701c      	strb	r4, [r3, #0]
     6e4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6e6:	42bb      	cmp	r3, r7
     6e8:	d0c4      	beq.n	674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     6ea:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ec:	2c00      	cmp	r4, #0
     6ee:	d1e9      	bne.n	6c4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     6f0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6f2:	f803 4c03 	strb.w	r4, [r3, #-3]
     6f6:	e7f5      	b.n	6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6f8:	1fff8c60 	.word	0x1fff8c60

000006fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     700:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     702:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     704:	789b      	ldrb	r3, [r3, #2]
     706:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     70a:	9101      	str	r1, [sp, #4]
     70c:	9202      	str	r2, [sp, #8]
     70e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     710:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     714:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     718:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     71c:	d016      	beq.n	74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71e:	2300      	movs	r3, #0
     720:	f88d 3015 	strb.w	r3, [sp, #21]
     724:	f88d 3014 	strb.w	r3, [sp, #20]
     728:	f88d 3013 	strb.w	r3, [sp, #19]
     72c:	f88d 3012 	strb.w	r3, [sp, #18]
     730:	f88d 3011 	strb.w	r3, [sp, #17]
     734:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73a:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     73c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73e:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     742:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     744:	a901      	add	r1, sp, #4
     746:	4790      	blx	r2
  }
     748:	b009      	add	sp, #36	; 0x24
     74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     74c:	4a1b      	ldr	r2, [pc, #108]	; (7bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74e:	7813      	ldrb	r3, [r2, #0]
     750:	3301      	adds	r3, #1
     752:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     756:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     75a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     75c:	bf14      	ite	ne
     75e:	2280      	movne	r2, #128	; 0x80
     760:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     762:	0799      	lsls	r1, r3, #30
     764:	bf44      	itt	mi
     766:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     76a:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     76c:	075b      	lsls	r3, r3, #29
     76e:	bf48      	it	mi
     770:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     774:	3210      	adds	r2, #16
     776:	b2d2      	uxtb	r2, r2
     778:	f10d 0313 	add.w	r3, sp, #19
     77c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     780:	f44f 7e80 	mov.w	lr, #256	; 0x100
     784:	b1ac      	cbz	r4, 7b2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     786:	fb9e f4f4 	sdiv	r4, lr, r4
     78a:	b2e4      	uxtb	r4, r4
     78c:	1c61      	adds	r1, r4, #1
     78e:	b2c9      	uxtb	r1, r1
     790:	fb01 2502 	mla	r5, r1, r2, r2
     794:	122d      	asrs	r5, r5, #8
     796:	7019      	strb	r1, [r3, #0]
     798:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     79a:	b105      	cbz	r5, 79e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     79c:	3e01      	subs	r6, #1
     79e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7a2:	b101      	cbz	r1, 7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a4:	701c      	strb	r4, [r3, #0]
     7a6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a8:	42bb      	cmp	r3, r7
     7aa:	d0c5      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7ac:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ae:	2c00      	cmp	r4, #0
     7b0:	d1e9      	bne.n	786 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7b2:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b4:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b8:	e7f5      	b.n	7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7ba:	bf00      	nop
     7bc:	1fff8c60 	.word	0x1fff8c60

000007c0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4604      	mov	r4, r0
     7c4:	4608      	mov	r0, r1
     7c6:	460d      	mov	r5, r1
     7c8:	f00b fc7a 	bl	c0c0 <strlen>
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	4602      	mov	r2, r0
     7d0:	4629      	mov	r1, r5
     7d2:	4620      	mov	r0, r4
     7d4:	685b      	ldr	r3, [r3, #4]
     7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     7da:	4718      	bx	r3

000007dc <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7dc:	b538      	push	{r3, r4, r5, lr}
     7de:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7e2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e4:	f00b fc6c 	bl	c0c0 <strlen>
     7e8:	6823      	ldr	r3, [r4, #0]
     7ea:	4602      	mov	r2, r0
     7ec:	4629      	mov	r1, r5
     7ee:	685b      	ldr	r3, [r3, #4]
     7f0:	4620      	mov	r0, r4
     7f2:	4798      	blx	r3
     7f4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7f6:	4620      	mov	r0, r4
     7f8:	f00a f908 	bl	aa0c <Print::println()>
     7fc:	4428      	add	r0, r5
     7fe:	bd38      	pop	{r3, r4, r5, pc}

00000800 <Print::println(unsigned char)>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     800:	b538      	push	{r3, r4, r5, lr}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     802:	220a      	movs	r2, #10
     804:	2300      	movs	r3, #0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     806:	4605      	mov	r5, r0
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     808:	f00a f910 	bl	aa2c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     80c:	4604      	mov	r4, r0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     80e:	4628      	mov	r0, r5
     810:	f00a f8fc 	bl	aa0c <Print::println()>
     814:	4420      	add	r0, r4
     816:	bd38      	pop	{r3, r4, r5, pc}

00000818 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81c:	780d      	ldrb	r5, [r1, #0]
     81e:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     820:	784d      	ldrb	r5, [r1, #1]
     822:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     824:	7889      	ldrb	r1, [r1, #2]
     826:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     828:	7811      	ldrb	r1, [r2, #0]
     82a:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     82c:	7851      	ldrb	r1, [r2, #1]
     82e:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     830:	7892      	ldrb	r2, [r2, #2]
     832:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     834:	781a      	ldrb	r2, [r3, #0]
     836:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     838:	785a      	ldrb	r2, [r3, #1]
     83a:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     83c:	789b      	ldrb	r3, [r3, #2]
     83e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     842:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     844:	f89a b000 	ldrb.w	fp, [sl]
     848:	f880 b009 	strb.w	fp, [r0, #9]
     84c:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     850:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     854:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     858:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     85a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     85c:	9d10      	ldr	r5, [sp, #64]	; 0x40
     85e:	9911      	ldr	r1, [sp, #68]	; 0x44
     860:	9a12      	ldr	r2, [sp, #72]	; 0x48
     862:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     864:	f89a b001 	ldrb.w	fp, [sl, #1]
     868:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     86c:	f89a a002 	ldrb.w	sl, [sl, #2]
     870:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     874:	f899 a000 	ldrb.w	sl, [r9]
     878:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     87c:	f899 a001 	ldrb.w	sl, [r9, #1]
     880:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     884:	f899 9002 	ldrb.w	r9, [r9, #2]
     888:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     88c:	f898 9000 	ldrb.w	r9, [r8]
     890:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     894:	f898 9001 	ldrb.w	r9, [r8, #1]
     898:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     89c:	f898 8002 	ldrb.w	r8, [r8, #2]
     8a0:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a4:	f89c 8000 	ldrb.w	r8, [ip]
     8a8:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     8ac:	f89c 8001 	ldrb.w	r8, [ip, #1]
     8b0:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     8b4:	f89c c002 	ldrb.w	ip, [ip, #2]
     8b8:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8bc:	f89e c000 	ldrb.w	ip, [lr]
     8c0:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     8c4:	f89e c001 	ldrb.w	ip, [lr, #1]
     8c8:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     8cc:	f89e e002 	ldrb.w	lr, [lr, #2]
     8d0:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d4:	f897 e000 	ldrb.w	lr, [r7]
     8d8:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     8dc:	f897 e001 	ldrb.w	lr, [r7, #1]
     8e0:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     8e4:	78bf      	ldrb	r7, [r7, #2]
     8e6:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8e8:	7837      	ldrb	r7, [r6, #0]
     8ea:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     8ec:	7877      	ldrb	r7, [r6, #1]
     8ee:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     8f0:	78b6      	ldrb	r6, [r6, #2]
     8f2:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8f4:	782e      	ldrb	r6, [r5, #0]
     8f6:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     8f8:	786e      	ldrb	r6, [r5, #1]
     8fa:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     8fc:	78ad      	ldrb	r5, [r5, #2]
     8fe:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     902:	780d      	ldrb	r5, [r1, #0]
     904:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     908:	784d      	ldrb	r5, [r1, #1]
     90a:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     90e:	7889      	ldrb	r1, [r1, #2]
     910:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     914:	7811      	ldrb	r1, [r2, #0]
     916:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     91a:	7851      	ldrb	r1, [r2, #1]
     91c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     920:	7892      	ldrb	r2, [r2, #2]
     922:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     926:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     92e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     930:	7852      	ldrb	r2, [r2, #1]
     932:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     936:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     938:	7892      	ldrb	r2, [r2, #2]
     93a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     93e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     940:	7812      	ldrb	r2, [r2, #0]
     942:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     946:	9a14      	ldr	r2, [sp, #80]	; 0x50
     948:	7852      	ldrb	r2, [r2, #1]
     94a:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     94e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     950:	7892      	ldrb	r2, [r2, #2]
     952:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     956:	781a      	ldrb	r2, [r3, #0]
     958:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     95c:	785a      	ldrb	r2, [r3, #1]
     95e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     962:	789b      	ldrb	r3, [r3, #2]
     964:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000096c <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     970:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     972:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     974:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     976:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     97a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     97c:	3701      	adds	r7, #1
        } while ( u.index != 255);
     97e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     980:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     982:	d1f8      	bne.n	976 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     984:	680b      	ldr	r3, [r1, #0]
     986:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     988:	ea4f 6813 	mov.w	r8, r3, lsr #24
     98c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     990:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     994:	f04f 33ff 	mov.w	r3, #4294967295
     998:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     99a:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     99c:	9305      	str	r3, [sp, #20]
     99e:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9a0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9a4:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9a6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     9aa:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ae:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     9b2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     9b4:	b2f9      	uxtb	r1, r7
     9b6:	f3c5 6507 	ubfx	r5, r5, #24, #8
     9ba:	9103      	str	r1, [sp, #12]
     9bc:	b2e9      	uxtb	r1, r5
     9be:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     9c0:	fa5f f18c 	uxtb.w	r1, ip
     9c4:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     9c6:	9907      	ldr	r1, [sp, #28]
     9c8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9ca:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     9cc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9d0:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9d4:	d80c      	bhi.n	9f0 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9d6:	9905      	ldr	r1, [sp, #20]
     9d8:	458c      	cmp	ip, r1
     9da:	dc07      	bgt.n	9ec <CRGBPalette16::operator=(unsigned char const*)+0x80>
     9dc:	290f      	cmp	r1, #15
     9de:	d005      	beq.n	9ec <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     9e0:	3101      	adds	r1, #1
     9e2:	b2c9      	uxtb	r1, r1
     9e4:	428b      	cmp	r3, r1
     9e6:	9102      	str	r1, [sp, #8]
     9e8:	bf38      	it	cc
     9ea:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9ec:	b259      	sxtb	r1, r3
     9ee:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9f0:	a909      	add	r1, sp, #36	; 0x24
     9f2:	9100      	str	r1, [sp, #0]
     9f4:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f6:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     9fa:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     9fe:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a02:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     a06:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     a0a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     a0e:	f007 fd57 	bl	84c0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a12:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     a14:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a18:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     a1c:	46d1      	mov	r9, sl
     a1e:	d1bf      	bne.n	9a0 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     a20:	9806      	ldr	r0, [sp, #24]
     a22:	b00b      	add	sp, #44	; 0x2c
     a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a28 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     a28:	4b48      	ldr	r3, [pc, #288]	; (b4c <updatePaletteIndex(LEDStruct&)+0x124>)
     a2a:	781b      	ldrb	r3, [r3, #0]
     a2c:	2b00      	cmp	r3, #0
     a2e:	f000 808b 	beq.w	b48 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a36:	b09b      	sub	sp, #108	; 0x6c
     a38:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     a3c:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     a3e:	2300      	movs	r3, #0
     a40:	4a43      	ldr	r2, [pc, #268]	; (b50 <updatePaletteIndex(LEDStruct&)+0x128>)
     a42:	9307      	str	r3, [sp, #28]
     a44:	f8df 910c 	ldr.w	r9, [pc, #268]	; b54 <updatePaletteIndex(LEDStruct&)+0x12c>
     a48:	9009      	str	r0, [sp, #36]	; 0x24
     a4a:	f200 2326 	addw	r3, r0, #550	; 0x226
     a4e:	9208      	str	r2, [sp, #32]
     a50:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a52:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a54:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a58:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a5a:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a5c:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a5e:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a60:	d1f8      	bne.n	a54 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a62:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a66:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a68:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a6c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a70:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a72:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a76:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     a7a:	2400      	movs	r4, #0
     a7c:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a7e:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a82:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     a86:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a8a:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a8e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a90:	b2f1      	uxtb	r1, r6
     a92:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a96:	9103      	str	r1, [sp, #12]
     a98:	b2e9      	uxtb	r1, r5
     a9a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a9c:	fa5f f18c 	uxtb.w	r1, ip
     aa0:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     aa2:	9906      	ldr	r1, [sp, #24]
     aa4:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     aa6:	aa0c      	add	r2, sp, #48	; 0x30
     aa8:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     aaa:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     aae:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ab2:	d80c      	bhi.n	ace <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     ab4:	9905      	ldr	r1, [sp, #20]
     ab6:	458c      	cmp	ip, r1
     ab8:	dc07      	bgt.n	aca <updatePaletteIndex(LEDStruct&)+0xa2>
     aba:	290f      	cmp	r1, #15
     abc:	d005      	beq.n	aca <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     abe:	3101      	adds	r1, #1
     ac0:	b2c9      	uxtb	r1, r1
     ac2:	428b      	cmp	r3, r1
     ac4:	9102      	str	r1, [sp, #8]
     ac6:	bf38      	it	cc
     ac8:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     aca:	b259      	sxtb	r1, r3
     acc:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ace:	a90d      	add	r1, sp, #52	; 0x34
     ad0:	9100      	str	r1, [sp, #0]
     ad2:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ad4:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     ad8:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     adc:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ae0:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     ae4:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     ae8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     aec:	f007 fce8 	bl	84c0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     af0:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af2:	46d3      	mov	fp, sl
        g = rhs.g;
     af4:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     af8:	f8dd 8010 	ldr.w	r8, [sp, #16]
     afc:	d1bf      	bne.n	a7e <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b00:	aa0e      	add	r2, sp, #56	; 0x38
     b02:	4293      	cmp	r3, r2
     b04:	d018      	beq.n	b38 <updatePaletteIndex(LEDStruct&)+0x110>
     b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     b0a:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     b0e:	e001      	b.n	b14 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     b10:	42a3      	cmp	r3, r4
     b12:	d011      	beq.n	b38 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     b14:	f812 1b01 	ldrb.w	r1, [r2], #1
     b18:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b1c:	4288      	cmp	r0, r1
     b1e:	d0f7      	beq.n	b10 <updatePaletteIndex(LEDStruct&)+0xe8>
     b20:	4b0a      	ldr	r3, [pc, #40]	; (b4c <updatePaletteIndex(LEDStruct&)+0x124>)
     b22:	9a07      	ldr	r2, [sp, #28]
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	3201      	adds	r2, #1
     b28:	4293      	cmp	r3, r2
     b2a:	9207      	str	r2, [sp, #28]
     b2c:	dd09      	ble.n	b42 <updatePaletteIndex(LEDStruct&)+0x11a>
     b2e:	9b08      	ldr	r3, [sp, #32]
     b30:	f853 9f04 	ldr.w	r9, [r3, #4]!
     b34:	9308      	str	r3, [sp, #32]
     b36:	e78c      	b.n	a52 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b3a:	f89d 201c 	ldrb.w	r2, [sp, #28]
     b3e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     b42:	b01b      	add	sp, #108	; 0x6c
     b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b48:	4770      	bx	lr
     b4a:	bf00      	nop
     b4c:	1fff874c 	.word	0x1fff874c
     b50:	0000d910 	.word	0x0000d910
     b54:	0000db2c 	.word	0x0000db2c

00000b58 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     b58:	b530      	push	{r4, r5, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b5a:	4d29      	ldr	r5, [pc, #164]	; (c00 <initialize()+0xa8>)
		}
	}
}

// Initialization function
void initialize() {
     b5c:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b5e:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b60:	2400      	movs	r4, #0
     b62:	4628      	mov	r0, r5
     b64:	2196      	movs	r1, #150	; 0x96
     b66:	f88d 4004 	strb.w	r4, [sp, #4]
     b6a:	f88d 4005 	strb.w	r4, [sp, #5]
     b6e:	f88d 4006 	strb.w	r4, [sp, #6]
     b72:	f007 fc75 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     b76:	4923      	ldr	r1, [pc, #140]	; (c04 <initialize()+0xac>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     b78:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     b7c:	f205 10c7 	addw	r0, r5, #455	; 0x1c7
     b80:	f7ff fef4 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     b84:	4920      	ldr	r1, [pc, #128]	; (c08 <initialize()+0xb0>)
     b86:	f205 10f7 	addw	r0, r5, #503	; 0x1f7
     b8a:	f7ff feef 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     b8e:	4628      	mov	r0, r5
     b90:	f7ff ff4a 	bl	a28 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     b94:	4b1d      	ldr	r3, [pc, #116]	; (c0c <initialize()+0xb4>)
     b96:	4a1e      	ldr	r2, [pc, #120]	; (c10 <initialize()+0xb8>)
     b98:	7818      	ldrb	r0, [r3, #0]
     b9a:	f885 022b 	strb.w	r0, [r5, #555]	; 0x22b
     b9e:	4623      	mov	r3, r4
     ba0:	e001      	b.n	ba6 <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     ba2:	2b1a      	cmp	r3, #26
     ba4:	d008      	beq.n	bb8 <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     ba6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     baa:	4281      	cmp	r1, r0
     bac:	b2dc      	uxtb	r4, r3
     bae:	f103 0301 	add.w	r3, r3, #1
     bb2:	d1f6      	bne.n	ba2 <initialize()+0x4a>
			leds.mode_number = i;
     bb4:	f885 422a 	strb.w	r4, [r5, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     bb8:	4c16      	ldr	r4, [pc, #88]	; (c14 <initialize()+0xbc>)
     bba:	aa01      	add	r2, sp, #4
     bbc:	2300      	movs	r3, #0
     bbe:	4620      	mov	r0, r4
     bc0:	2196      	movs	r1, #150	; 0x96
     bc2:	f88d 3004 	strb.w	r3, [sp, #4]
     bc6:	f88d 3005 	strb.w	r3, [sp, #5]
     bca:	f88d 3006 	strb.w	r3, [sp, #6]
     bce:	f007 fc47 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     bd2:	2301      	movs	r3, #1
	next_leds.current_palette	= bhw3_21_gp;
     bd4:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
     bd8:	490f      	ldr	r1, [pc, #60]	; (c18 <initialize()+0xc0>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     bda:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	next_leds.current_palette	= bhw3_21_gp;
     bde:	f7ff fec5 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= bhw3_30_gp;
     be2:	490e      	ldr	r1, [pc, #56]	; (c1c <initialize()+0xc4>)
     be4:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
     be8:	f7ff fec0 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     bec:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
     bf0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     bf4:	4620      	mov	r0, r4
     bf6:	f7ff ff17 	bl	a28 <updatePaletteIndex(LEDStruct&)>
}
     bfa:	b003      	add	sp, #12
     bfc:	bd30      	pop	{r4, r5, pc}
     bfe:	bf00      	nop
     c00:	1fff95ec 	.word	0x1fff95ec
     c04:	0000e900 	.word	0x0000e900
     c08:	0000df70 	.word	0x0000df70
     c0c:	1fff8745 	.word	0x1fff8745
     c10:	1fff8723 	.word	0x1fff8723
     c14:	1fff8c88 	.word	0x1fff8c88
     c18:	0000dc90 	.word	0x0000dc90
     c1c:	0000dea0 	.word	0x0000dea0

00000c20 <finish_transition()>:



// Transition functions

void finish_transition() {
     c20:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     c22:	4cef      	ldr	r4, [pc, #956]	; (fe0 <finish_transition()+0x3c0>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c24:	48ef      	ldr	r0, [pc, #956]	; (fe4 <finish_transition()+0x3c4>)



// Transition functions

void finish_transition() {
     c26:	b083      	sub	sp, #12
	in_transition = 0;
     c28:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c2a:	aa01      	add	r2, sp, #4
     c2c:	2196      	movs	r1, #150	; 0x96


// Transition functions

void finish_transition() {
	in_transition = 0;
     c2e:	7023      	strb	r3, [r4, #0]
     c30:	f88d 3004 	strb.w	r3, [sp, #4]
     c34:	f88d 3005 	strb.w	r3, [sp, #5]
     c38:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c3c:	f007 fc10 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
     c40:	4be9      	ldr	r3, [pc, #932]	; (fe8 <finish_transition()+0x3c8>)
     c42:	4aea      	ldr	r2, [pc, #936]	; (fec <finish_transition()+0x3cc>)
     c44:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c48:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     c4c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     c50:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c54:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     c58:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     c5c:	f803 1c01 	strb.w	r1, [r3, #-1]
     c60:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     c62:	429d      	cmp	r5, r3
     c64:	f102 0203 	add.w	r2, r2, #3
     c68:	d1ee      	bne.n	c48 <finish_transition()+0x28>
     c6a:	48e1      	ldr	r0, [pc, #900]	; (ff0 <finish_transition()+0x3d0>)
     c6c:	4fdd      	ldr	r7, [pc, #884]	; (fe4 <finish_transition()+0x3c4>)
     c6e:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
     c72:	f890 21c5 	ldrb.w	r2, [r0, #453]	; 0x1c5
     c76:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
     c7a:	f890 51c2 	ldrb.w	r5, [r0, #450]	; 0x1c2
     c7e:	f890 41c3 	ldrb.w	r4, [r0, #451]	; 0x1c3
     c82:	f887 11c4 	strb.w	r1, [r7, #452]	; 0x1c4
     c86:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
     c8a:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
     c8e:	f887 51c2 	strb.w	r5, [r7, #450]	; 0x1c2
     c92:	f887 41c3 	strb.w	r4, [r7, #451]	; 0x1c3
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     c96:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
     c9a:	f207 12c7 	addw	r2, r7, #455	; 0x1c7
     c9e:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
     ca2:	681d      	ldr	r5, [r3, #0]
     ca4:	685c      	ldr	r4, [r3, #4]
     ca6:	6015      	str	r5, [r2, #0]
     ca8:	689d      	ldr	r5, [r3, #8]
     caa:	6054      	str	r4, [r2, #4]
     cac:	68dc      	ldr	r4, [r3, #12]
     cae:	60d4      	str	r4, [r2, #12]
     cb0:	3310      	adds	r3, #16
     cb2:	428b      	cmp	r3, r1
     cb4:	6095      	str	r5, [r2, #8]
     cb6:	f102 0210 	add.w	r2, r2, #16
     cba:	d1f2      	bne.n	ca2 <finish_transition()+0x82>
     cbc:	4bcd      	ldr	r3, [pc, #820]	; (ff4 <finish_transition()+0x3d4>)
     cbe:	4ace      	ldr	r2, [pc, #824]	; (ff8 <finish_transition()+0x3d8>)
     cc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
     cc4:	681d      	ldr	r5, [r3, #0]
     cc6:	685c      	ldr	r4, [r3, #4]
     cc8:	6015      	str	r5, [r2, #0]
     cca:	689d      	ldr	r5, [r3, #8]
     ccc:	6054      	str	r4, [r2, #4]
     cce:	68dc      	ldr	r4, [r3, #12]
     cd0:	60d4      	str	r4, [r2, #12]
     cd2:	3310      	adds	r3, #16
     cd4:	428b      	cmp	r3, r1
     cd6:	6095      	str	r5, [r2, #8]
     cd8:	f102 0210 	add.w	r2, r2, #16
     cdc:	d1f2      	bne.n	cc4 <finish_transition()+0xa4>
     cde:	f890 2227 	ldrb.w	r2, [r0, #551]	; 0x227
     ce2:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
     ce6:	f890 5229 	ldrb.w	r5, [r0, #553]	; 0x229
     cea:	f890 422a 	ldrb.w	r4, [r0, #554]	; 0x22a
     cee:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
     cf2:	f887 2227 	strb.w	r2, [r7, #551]	; 0x227
     cf6:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
     cfa:	f890 222c 	ldrb.w	r2, [r0, #556]	; 0x22c
     cfe:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
     d02:	f887 5229 	strb.w	r5, [r7, #553]	; 0x229
     d06:	f887 422a 	strb.w	r4, [r7, #554]	; 0x22a
     d0a:	f890 522e 	ldrb.w	r5, [r0, #558]	; 0x22e
     d0e:	f890 422f 	ldrb.w	r4, [r0, #559]	; 0x22f
     d12:	f887 122b 	strb.w	r1, [r7, #555]	; 0x22b
     d16:	f887 222c 	strb.w	r2, [r7, #556]	; 0x22c
     d1a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     d1e:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231
     d22:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
     d26:	f890 3232 	ldrb.w	r3, [r0, #562]	; 0x232
     d2a:	f887 522e 	strb.w	r5, [r7, #558]	; 0x22e
     d2e:	f887 422f 	strb.w	r4, [r7, #559]	; 0x22f
     d32:	f890 5233 	ldrb.w	r5, [r0, #563]	; 0x233
     d36:	f890 4234 	ldrb.w	r4, [r0, #564]	; 0x234
     d3a:	f887 1230 	strb.w	r1, [r7, #560]	; 0x230
     d3e:	f887 2231 	strb.w	r2, [r7, #561]	; 0x231
     d42:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
     d46:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
     d4a:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
     d4e:	4bab      	ldr	r3, [pc, #684]	; (ffc <finish_transition()+0x3dc>)
     d50:	f887 4234 	strb.w	r4, [r7, #564]	; 0x234
     d54:	f887 1235 	strb.w	r1, [r7, #565]	; 0x235
     d58:	f887 2236 	strb.w	r2, [r7, #566]	; 0x236
     d5c:	f887 5233 	strb.w	r5, [r7, #563]	; 0x233
     d60:	4aa7      	ldr	r2, [pc, #668]	; (1000 <finish_transition()+0x3e0>)
     d62:	f890 5237 	ldrb.w	r5, [r0, #567]	; 0x237
     d66:	f890 4238 	ldrb.w	r4, [r0, #568]	; 0x238
     d6a:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
     d6e:	f887 5237 	strb.w	r5, [r7, #567]	; 0x237
     d72:	f103 063c 	add.w	r6, r3, #60	; 0x3c
     d76:	f887 4238 	strb.w	r4, [r7, #568]	; 0x238
     d7a:	f887 1239 	strb.w	r1, [r7, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d7e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
     d82:	f812 4c02 	ldrb.w	r4, [r2, #-2]
        b = rhs.b;
     d86:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d8a:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
     d8e:	f803 4c02 	strb.w	r4, [r3, #-2]
        b = rhs.b;
     d92:	f803 1c01 	strb.w	r1, [r3, #-1]
     d96:	3303      	adds	r3, #3
     d98:	429e      	cmp	r6, r3
     d9a:	f102 0203 	add.w	r2, r2, #3
     d9e:	d1ee      	bne.n	d7e <finish_transition()+0x15e>
     da0:	f890 2276 	ldrb.w	r2, [r0, #630]	; 0x276
     da4:	f890 4277 	ldrb.w	r4, [r0, #631]	; 0x277
     da8:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
     dac:	f887 2276 	strb.w	r2, [r7, #630]	; 0x276
     db0:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
     db4:	4b93      	ldr	r3, [pc, #588]	; (1004 <finish_transition()+0x3e4>)
     db6:	f887 4277 	strb.w	r4, [r7, #631]	; 0x277
     dba:	f887 1278 	strb.w	r1, [r7, #632]	; 0x278
     dbe:	f890 427a 	ldrb.w	r4, [r0, #634]	; 0x27a
     dc2:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
     dc6:	f887 2279 	strb.w	r2, [r7, #633]	; 0x279
     dca:	f890 227c 	ldrb.w	r2, [r0, #636]	; 0x27c
     dce:	f887 427a 	strb.w	r4, [r7, #634]	; 0x27a
     dd2:	f887 127b 	strb.w	r1, [r7, #635]	; 0x27b
     dd6:	f890 427d 	ldrb.w	r4, [r0, #637]	; 0x27d
     dda:	f890 127e 	ldrb.w	r1, [r0, #638]	; 0x27e
     dde:	f887 227c 	strb.w	r2, [r7, #636]	; 0x27c
     de2:	4a89      	ldr	r2, [pc, #548]	; (1008 <finish_transition()+0x3e8>)
     de4:	f887 427d 	strb.w	r4, [r7, #637]	; 0x27d
     de8:	f887 127e 	strb.w	r1, [r7, #638]	; 0x27e
     dec:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     df0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     df4:	f803 1b01 	strb.w	r1, [r3], #1
     df8:	42a3      	cmp	r3, r4
     dfa:	d1f9      	bne.n	df0 <finish_transition()+0x1d0>
     dfc:	4983      	ldr	r1, [pc, #524]	; (100c <finish_transition()+0x3ec>)
     dfe:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     e02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     e06:	f803 2b01 	strb.w	r2, [r3], #1
     e0a:	42a3      	cmp	r3, r4
     e0c:	4a75      	ldr	r2, [pc, #468]	; (fe4 <finish_transition()+0x3c4>)
     e0e:	d1f8      	bne.n	e02 <finish_transition()+0x1e2>
     e10:	f890 3315 	ldrb.w	r3, [r0, #789]	; 0x315
     e14:	f890 6316 	ldrb.w	r6, [r0, #790]	; 0x316
     e18:	f890 5317 	ldrb.w	r5, [r0, #791]	; 0x317
     e1c:	f890 4318 	ldrb.w	r4, [r0, #792]	; 0x318
     e20:	f890 1319 	ldrb.w	r1, [r0, #793]	; 0x319
     e24:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
     e28:	f890 331a 	ldrb.w	r3, [r0, #794]	; 0x31a
     e2c:	f882 6316 	strb.w	r6, [r2, #790]	; 0x316
     e30:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
     e34:	f8b0 631c 	ldrh.w	r6, [r0, #796]	; 0x31c
     e38:	f8b0 531e 	ldrh.w	r5, [r0, #798]	; 0x31e
     e3c:	f882 4318 	strb.w	r4, [r2, #792]	; 0x318
     e40:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
     e44:	f8b0 4320 	ldrh.w	r4, [r0, #800]	; 0x320
     e48:	f890 1322 	ldrb.w	r1, [r0, #802]	; 0x322
     e4c:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
     e50:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
     e54:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
     e58:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
     e5c:	f890 6324 	ldrb.w	r6, [r0, #804]	; 0x324
     e60:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
     e64:	f8a2 4320 	strh.w	r4, [r2, #800]	; 0x320
     e68:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
     e6c:	f890 4326 	ldrb.w	r4, [r0, #806]	; 0x326
     e70:	f890 1327 	ldrb.w	r1, [r0, #807]	; 0x327
     e74:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
     e78:	f8b0 3328 	ldrh.w	r3, [r0, #808]	; 0x328
     e7c:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
     e80:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
     e84:	f882 4326 	strb.w	r4, [r2, #806]	; 0x326
     e88:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
     e8c:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
     e90:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
     e94:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
     e98:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
     e9c:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
     ea0:	f8b0 4330 	ldrh.w	r4, [r0, #816]	; 0x330
     ea4:	f8b0 1332 	ldrh.w	r1, [r0, #818]	; 0x332
     ea8:	f8b0 3334 	ldrh.w	r3, [r0, #820]	; 0x334
     eac:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
     eb0:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
     eb4:	f8b0 6336 	ldrh.w	r6, [r0, #822]	; 0x336
     eb8:	f8b0 5338 	ldrh.w	r5, [r0, #824]	; 0x338
     ebc:	f8a2 4330 	strh.w	r4, [r2, #816]	; 0x330
     ec0:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
     ec4:	f8b0 433a 	ldrh.w	r4, [r0, #826]	; 0x33a
     ec8:	f8b0 133c 	ldrh.w	r1, [r0, #828]	; 0x33c
     ecc:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
     ed0:	f890 333e 	ldrb.w	r3, [r0, #830]	; 0x33e
     ed4:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
     ed8:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
     edc:	f890 633f 	ldrb.w	r6, [r0, #831]	; 0x33f
     ee0:	f890 5340 	ldrb.w	r5, [r0, #832]	; 0x340
     ee4:	f8a2 433a 	strh.w	r4, [r2, #826]	; 0x33a
     ee8:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
     eec:	f890 4341 	ldrb.w	r4, [r0, #833]	; 0x341
     ef0:	f890 1342 	ldrb.w	r1, [r0, #834]	; 0x342
     ef4:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
     ef8:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
     efc:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
     f00:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
     f04:	f882 4341 	strb.w	r4, [r2, #833]	; 0x341
     f08:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
     f0c:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
     f10:	f890 3344 	ldrb.w	r3, [r0, #836]	; 0x344
     f14:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
     f18:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
     f1c:	f890 5346 	ldrb.w	r5, [r0, #838]	; 0x346
     f20:	f890 4347 	ldrb.w	r4, [r0, #839]	; 0x347
     f24:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
     f28:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
     f2c:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
     f30:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
     f34:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
     f38:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
     f3c:	f882 4347 	strb.w	r4, [r2, #839]	; 0x347
     f40:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
     f44:	f890 434c 	ldrb.w	r4, [r0, #844]	; 0x34c
     f48:	f890 134d 	ldrb.w	r1, [r0, #845]	; 0x34d
     f4c:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
     f50:	f890 334e 	ldrb.w	r3, [r0, #846]	; 0x34e
     f54:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
     f58:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
     f5c:	f882 434c 	strb.w	r4, [r2, #844]	; 0x34c
     f60:	f890 5350 	ldrb.w	r5, [r0, #848]	; 0x350
     f64:	f890 4351 	ldrb.w	r4, [r0, #849]	; 0x351
     f68:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
     f6c:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
     f70:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
     f74:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
     f78:	f890 634f 	ldrb.w	r6, [r0, #847]	; 0x34f
     f7c:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
     f80:	f882 4351 	strb.w	r4, [r2, #849]	; 0x351
     f84:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
     f88:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
     f8c:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
     f90:	491f      	ldr	r1, [pc, #124]	; (1010 <finish_transition()+0x3f0>)
     f92:	f890 6354 	ldrb.w	r6, [r0, #852]	; 0x354
     f96:	f890 335d 	ldrb.w	r3, [r0, #861]	; 0x35d
     f9a:	f8d0 5358 	ldr.w	r5, [r0, #856]	; 0x358
     f9e:	f890 435c 	ldrb.w	r4, [r0, #860]	; 0x35c
     fa2:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
     fa6:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
     faa:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
     fae:	f882 435c 	strb.w	r4, [r2, #860]	; 0x35c
     fb2:	f502 7358 	add.w	r3, r2, #864	; 0x360
     fb6:	f502 628a 	add.w	r2, r2, #1104	; 0x450
     fba:	f851 4f04 	ldr.w	r4, [r1, #4]!
     fbe:	f843 4b04 	str.w	r4, [r3], #4
     fc2:	4293      	cmp	r3, r2
     fc4:	d1f9      	bne.n	fba <finish_transition()+0x39a>
     fc6:	4a13      	ldr	r2, [pc, #76]	; (1014 <finish_transition()+0x3f4>)
     fc8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
     fcc:	f852 1f04 	ldr.w	r1, [r2, #4]!
     fd0:	f843 1b04 	str.w	r1, [r3], #4
     fd4:	42a3      	cmp	r3, r4
     fd6:	d1f9      	bne.n	fcc <finish_transition()+0x3ac>
     fd8:	4a0f      	ldr	r2, [pc, #60]	; (1018 <finish_transition()+0x3f8>)
     fda:	f103 043c 	add.w	r4, r3, #60	; 0x3c
     fde:	e01d      	b.n	101c <finish_transition()+0x3fc>
     fe0:	1fff94c0 	.word	0x1fff94c0
     fe4:	1fff95ec 	.word	0x1fff95ec
     fe8:	1fff95ef 	.word	0x1fff95ef
     fec:	1fff8c8b 	.word	0x1fff8c8b
     ff0:	1fff8c88 	.word	0x1fff8c88
     ff4:	1fff8e7f 	.word	0x1fff8e7f
     ff8:	1fff97e3 	.word	0x1fff97e3
     ffc:	1fff9829 	.word	0x1fff9829
    1000:	1fff8ec5 	.word	0x1fff8ec5
    1004:	1fff986b 	.word	0x1fff986b
    1008:	1fff8f06 	.word	0x1fff8f06
    100c:	1fff8f51 	.word	0x1fff8f51
    1010:	1fff8fe4 	.word	0x1fff8fe4
    1014:	1fff90d4 	.word	0x1fff90d4
    1018:	1fff91c7 	.word	0x1fff91c7
    101c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1020:	f803 1b01 	strb.w	r1, [r3], #1
    1024:	42a3      	cmp	r3, r4
    1026:	d1f9      	bne.n	101c <finish_transition()+0x3fc>
    1028:	4a3f      	ldr	r2, [pc, #252]	; (1128 <finish_transition()+0x508>)
    102a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    102e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1032:	f843 1b04 	str.w	r1, [r3], #4
    1036:	42a3      	cmp	r3, r4
    1038:	d1f9      	bne.n	102e <finish_transition()+0x40e>
    103a:	4a3c      	ldr	r2, [pc, #240]	; (112c <finish_transition()+0x50c>)
    103c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    1040:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1044:	f843 1b04 	str.w	r1, [r3], #4
    1048:	42a3      	cmp	r3, r4
    104a:	4939      	ldr	r1, [pc, #228]	; (1130 <finish_transition()+0x510>)
    104c:	d1f8      	bne.n	1040 <finish_transition()+0x420>
    104e:	f890 575c 	ldrb.w	r5, [r0, #1884]	; 0x75c
    1052:	f890 475d 	ldrb.w	r4, [r0, #1885]	; 0x75d
    1056:	f890 375e 	ldrb.w	r3, [r0, #1886]	; 0x75e
    105a:	f8b0 2760 	ldrh.w	r2, [r0, #1888]	; 0x760
    105e:	f881 575c 	strb.w	r5, [r1, #1884]	; 0x75c
    1062:	f881 475d 	strb.w	r4, [r1, #1885]	; 0x75d
    1066:	f881 375e 	strb.w	r3, [r1, #1886]	; 0x75e
    106a:	f8a1 2760 	strh.w	r2, [r1, #1888]	; 0x760
    106e:	f890 3767 	ldrb.w	r3, [r0, #1895]	; 0x767
    1072:	f8b0 7762 	ldrh.w	r7, [r0, #1890]	; 0x762
    1076:	f890 6764 	ldrb.w	r6, [r0, #1892]	; 0x764
    107a:	f890 5765 	ldrb.w	r5, [r0, #1893]	; 0x765
    107e:	f890 4766 	ldrb.w	r4, [r0, #1894]	; 0x766
    1082:	4a2c      	ldr	r2, [pc, #176]	; (1134 <finish_transition()+0x514>)
    1084:	f881 3767 	strb.w	r3, [r1, #1895]	; 0x767
    1088:	f8a1 7762 	strh.w	r7, [r1, #1890]	; 0x762
    108c:	f881 6764 	strb.w	r6, [r1, #1892]	; 0x764
    1090:	f881 5765 	strb.w	r5, [r1, #1893]	; 0x765
    1094:	f881 4766 	strb.w	r4, [r1, #1894]	; 0x766
    1098:	f501 63ed 	add.w	r3, r1, #1896	; 0x768
    109c:	f501 61f1 	add.w	r1, r1, #1928	; 0x788
    10a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
    10a4:	f843 0b04 	str.w	r0, [r3], #4
    10a8:	428b      	cmp	r3, r1
    10aa:	d1f9      	bne.n	10a0 <finish_transition()+0x480>
    10ac:	4a22      	ldr	r2, [pc, #136]	; (1138 <finish_transition()+0x518>)
    10ae:	f103 0020 	add.w	r0, r3, #32
    10b2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10b6:	f843 1b04 	str.w	r1, [r3], #4
    10ba:	4283      	cmp	r3, r0
    10bc:	d1f9      	bne.n	10b2 <finish_transition()+0x492>
    10be:	4a1f      	ldr	r2, [pc, #124]	; (113c <finish_transition()+0x51c>)
    10c0:	f103 0020 	add.w	r0, r3, #32
    10c4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10c8:	f843 1b04 	str.w	r1, [r3], #4
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f9      	bne.n	10c4 <finish_transition()+0x4a4>
    10d0:	4a1b      	ldr	r2, [pc, #108]	; (1140 <finish_transition()+0x520>)
    10d2:	f103 0020 	add.w	r0, r3, #32
    10d6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10da:	f843 1b04 	str.w	r1, [r3], #4
    10de:	4283      	cmp	r3, r0
    10e0:	d1f9      	bne.n	10d6 <finish_transition()+0x4b6>
    10e2:	4a18      	ldr	r2, [pc, #96]	; (1144 <finish_transition()+0x524>)
    10e4:	f103 0020 	add.w	r0, r3, #32
    10e8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10ec:	f843 1b04 	str.w	r1, [r3], #4
    10f0:	4283      	cmp	r3, r0
    10f2:	d1f9      	bne.n	10e8 <finish_transition()+0x4c8>
    10f4:	4a14      	ldr	r2, [pc, #80]	; (1148 <finish_transition()+0x528>)
    10f6:	f103 0020 	add.w	r0, r3, #32
    10fa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10fe:	f843 1b04 	str.w	r1, [r3], #4
    1102:	4283      	cmp	r3, r0
    1104:	4c0a      	ldr	r4, [pc, #40]	; (1130 <finish_transition()+0x510>)
    1106:	d1f8      	bne.n	10fa <finish_transition()+0x4da>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1108:	2500      	movs	r5, #0
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    110a:	aa01      	add	r2, sp, #4
    110c:	2196      	movs	r1, #150	; 0x96
    110e:	480f      	ldr	r0, [pc, #60]	; (114c <finish_transition()+0x52c>)
    1110:	f88d 5004 	strb.w	r5, [sp, #4]
    1114:	f88d 5005 	strb.w	r5, [sp, #5]
    1118:	f88d 5006 	strb.w	r5, [sp, #6]
    111c:	f007 f9a0 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    1120:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
}
    1124:	b003      	add	sp, #12
    1126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1128:	1fff9200 	.word	0x1fff9200
    112c:	1fff92f0 	.word	0x1fff92f0
    1130:	1fff95ec 	.word	0x1fff95ec
    1134:	1fff93ec 	.word	0x1fff93ec
    1138:	1fff940c 	.word	0x1fff940c
    113c:	1fff942c 	.word	0x1fff942c
    1140:	1fff944c 	.word	0x1fff944c
    1144:	1fff946c 	.word	0x1fff946c
    1148:	1fff948c 	.word	0x1fff948c
    114c:	1fff8c88 	.word	0x1fff8c88

00001150 <blending()>:

void blending() {
    1150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1154:	4d2f      	ldr	r5, [pc, #188]	; (1214 <blending()+0xc4>)
    1156:	4e30      	ldr	r6, [pc, #192]	; (1218 <blending()+0xc8>)
    1158:	4c30      	ldr	r4, [pc, #192]	; (121c <blending()+0xcc>)
    115a:	4f31      	ldr	r7, [pc, #196]	; (1220 <blending()+0xd0>)
    115c:	b085      	sub	sp, #20
    115e:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    1162:	4632      	mov	r2, r6
    1164:	4629      	mov	r1, r5
    1166:	783b      	ldrb	r3, [r7, #0]
    1168:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1220 <blending()+0xd0>
    116c:	a803      	add	r0, sp, #12
    116e:	3503      	adds	r5, #3
    1170:	f007 fa68 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1174:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1178:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    117c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1180:	7021      	strb	r1, [r4, #0]
    1182:	4545      	cmp	r5, r8
        g = rhs.g;
    1184:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1186:	70a3      	strb	r3, [r4, #2]
    1188:	f106 0603 	add.w	r6, r6, #3
    118c:	f104 0403 	add.w	r4, r4, #3
    1190:	d1e7      	bne.n	1162 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1192:	4e24      	ldr	r6, [pc, #144]	; (1224 <blending()+0xd4>)
    1194:	6833      	ldr	r3, [r6, #0]
    1196:	07db      	lsls	r3, r3, #31
    1198:	d51f      	bpl.n	11da <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    119a:	4d23      	ldr	r5, [pc, #140]	; (1228 <blending()+0xd8>)
    119c:	4c23      	ldr	r4, [pc, #140]	; (122c <blending()+0xdc>)
    119e:	682b      	ldr	r3, [r5, #0]
    11a0:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    11a2:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    11a6:	9b03      	ldr	r3, [sp, #12]
    11a8:	1a5b      	subs	r3, r3, r1
    11aa:	4293      	cmp	r3, r2
    11ac:	d30c      	bcc.n	11c8 <blending()+0x78>
    11ae:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11b0:	682a      	ldr	r2, [r5, #0]
    11b2:	9202      	str	r2, [sp, #8]
    11b4:	3301      	adds	r3, #1
	return ret;
    11b6:	9a02      	ldr	r2, [sp, #8]
    11b8:	6022      	str	r2, [r4, #0]
    11ba:	b2db      	uxtb	r3, r3
    11bc:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    11be:	2bff      	cmp	r3, #255	; 0xff
    11c0:	d006      	beq.n	11d0 <blending()+0x80>
		finish_transition();
	}
}
    11c2:	b005      	add	sp, #20
    11c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    11c8:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    11cc:	2bff      	cmp	r3, #255	; 0xff
    11ce:	d1f8      	bne.n	11c2 <blending()+0x72>
		finish_transition();
    11d0:	f7ff fd26 	bl	c20 <finish_transition()>
	}
}
    11d4:	b005      	add	sp, #20
    11d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    11da:	4630      	mov	r0, r6
    11dc:	f008 f97a 	bl	94d4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11e0:	4d11      	ldr	r5, [pc, #68]	; (1228 <blending()+0xd8>)
    11e2:	b950      	cbnz	r0, 11fa <blending()+0xaa>
    11e4:	4c11      	ldr	r4, [pc, #68]	; (122c <blending()+0xdc>)
    11e6:	682b      	ldr	r3, [r5, #0]
    11e8:	9303      	str	r3, [sp, #12]
    11ea:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    11ee:	9b03      	ldr	r3, [sp, #12]
    11f0:	1a5b      	subs	r3, r3, r1
    11f2:	4293      	cmp	r3, r2
    11f4:	d2db      	bcs.n	11ae <blending()+0x5e>
    11f6:	783b      	ldrb	r3, [r7, #0]
    11f8:	e7e1      	b.n	11be <blending()+0x6e>
    11fa:	4b0d      	ldr	r3, [pc, #52]	; (1230 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11fc:	682a      	ldr	r2, [r5, #0]
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	4c0a      	ldr	r4, [pc, #40]	; (122c <blending()+0xdc>)
    1202:	9201      	str	r2, [sp, #4]
	return ret;
    1204:	9a01      	ldr	r2, [sp, #4]
    1206:	6022      	str	r2, [r4, #0]
    1208:	009b      	lsls	r3, r3, #2
    120a:	4630      	mov	r0, r6
    120c:	6063      	str	r3, [r4, #4]
    120e:	f008 f967 	bl	94e0 <__cxa_guard_release>
    1212:	e7e8      	b.n	11e6 <blending()+0x96>
    1214:	1fff95ec 	.word	0x1fff95ec
    1218:	1fff8c88 	.word	0x1fff8c88
    121c:	1fff9e14 	.word	0x1fff9e14
    1220:	1fff8c86 	.word	0x1fff8c86
    1224:	1fff95b4 	.word	0x1fff95b4
    1228:	1fffa058 	.word	0x1fffa058
    122c:	1fff94c4 	.word	0x1fff94c4
    1230:	1fff95d1 	.word	0x1fff95d1

00001234 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1238:	4e8b      	ldr	r6, [pc, #556]	; (1468 <wipedown()+0x234>)
    123a:	f896 c000 	ldrb.w	ip, [r6]
    123e:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1242:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1244:	2b00      	cmp	r3, #0
    1246:	f000 810d 	beq.w	1464 <wipedown()+0x230>
    124a:	f103 38ff 	add.w	r8, r3, #4294967295
    124e:	fa1f f888 	uxth.w	r8, r8
    1252:	4986      	ldr	r1, [pc, #536]	; (146c <wipedown()+0x238>)
    1254:	4a86      	ldr	r2, [pc, #536]	; (1470 <wipedown()+0x23c>)
    1256:	f108 0801 	add.w	r8, r8, #1
    125a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    125e:	4490      	add	r8, r2
    1260:	460d      	mov	r5, r1
    1262:	4608      	mov	r0, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1264:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1268:	7857      	ldrb	r7, [r2, #1]
        b = rhs.b;
    126a:	7894      	ldrb	r4, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    126c:	f880 e000 	strb.w	lr, [r0]
    1270:	3203      	adds	r2, #3
    1272:	4542      	cmp	r2, r8
        g = rhs.g;
    1274:	7047      	strb	r7, [r0, #1]
        b = rhs.b;
    1276:	7084      	strb	r4, [r0, #2]
    1278:	f1a1 0103 	sub.w	r1, r1, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    127c:	f881 e1c2 	strb.w	lr, [r1, #450]	; 0x1c2
        g = rhs.g;
    1280:	f881 71c3 	strb.w	r7, [r1, #451]	; 0x1c3
        b = rhs.b;
    1284:	f881 41c4 	strb.w	r4, [r1, #452]	; 0x1c4
    1288:	f100 0003 	add.w	r0, r0, #3
    128c:	d1ea      	bne.n	1264 <wipedown()+0x30>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    128e:	2b4a      	cmp	r3, #74	; 0x4a
    1290:	d81e      	bhi.n	12d0 <wipedown()+0x9c>
    1292:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 1484 <wipedown()+0x250>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1296:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
    129a:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    129e:	eb09 0401 	add.w	r4, r9, r1
    12a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    12a6:	3301      	adds	r3, #1
    12a8:	eb05 0801 	add.w	r8, r5, r1
    12ac:	18a8      	adds	r0, r5, r2
    12ae:	b29b      	uxth	r3, r3
        g = rhs.g;
    12b0:	7867      	ldrb	r7, [r4, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b2:	f819 e001 	ldrb.w	lr, [r9, r1]
        g = rhs.g;
        b = rhs.b;
    12b6:	78a4      	ldrb	r4, [r4, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b8:	f805 e001 	strb.w	lr, [r5, r1]
    12bc:	2b4b      	cmp	r3, #75	; 0x4b
        g = rhs.g;
    12be:	f888 7001 	strb.w	r7, [r8, #1]
        b = rhs.b;
    12c2:	f888 4002 	strb.w	r4, [r8, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12c6:	f805 e002 	strb.w	lr, [r5, r2]
        g = rhs.g;
    12ca:	7047      	strb	r7, [r0, #1]
        b = rhs.b;
    12cc:	7084      	strb	r4, [r0, #2]
    12ce:	d1e2      	bne.n	1296 <wipedown()+0x62>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    12d0:	f10c 3aff 	add.w	sl, ip, #4294967295
    12d4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12d8:	2480      	movs	r4, #128	; 0x80
    12da:	eb05 0b0a 	add.w	fp, r5, sl
    12de:	4659      	mov	r1, fp
    12e0:	4623      	mov	r3, r4
    12e2:	a803      	add	r0, sp, #12
    12e4:	aa02      	add	r2, sp, #8
    12e6:	2700      	movs	r7, #0
    12e8:	f88d 4009 	strb.w	r4, [sp, #9]
    12ec:	f88d 400a 	strb.w	r4, [sp, #10]
    12f0:	f88d 7008 	strb.w	r7, [sp, #8]
    12f4:	f007 f9a6 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    12f8:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    1300:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1304:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1308:	f805 300a 	strb.w	r3, [r5, sl]
    130c:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    1310:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1314:	eb05 0908 	add.w	r9, r5, r8
    1318:	4649      	mov	r1, r9
    131a:	4623      	mov	r3, r4
        g = rhs.g;
    131c:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    1320:	f88b 0002 	strb.w	r0, [fp, #2]
    1324:	aa02      	add	r2, sp, #8
    1326:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1328:	f88d 7008 	strb.w	r7, [sp, #8]
    132c:	f88d 4009 	strb.w	r4, [sp, #9]
    1330:	f88d 400a 	strb.w	r4, [sp, #10]
    1334:	f007 f986 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    1338:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    133a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    133e:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1342:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1346:	f89d 000d 	ldrb.w	r0, [sp, #13]
    134a:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    134e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1356:	f89d 300e 	ldrb.w	r3, [sp, #14]
    135a:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    135e:	eb05 0e0c 	add.w	lr, r5, ip
    1362:	1868      	adds	r0, r5, r1
    1364:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    1366:	2a4a      	cmp	r2, #74	; 0x4a
    1368:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    136c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 146c <wipedown()+0x238>
        g = (colorcode >>  8) & 0xFF;
    1370:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1374:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1378:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1468 <wipedown()+0x234>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    137c:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    137e:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1380:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    1382:	d831      	bhi.n	13e8 <wipedown()+0x1b4>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos--; }		// 1000 / 75
    1384:	4f3b      	ldr	r7, [pc, #236]	; (1474 <wipedown()+0x240>)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	07db      	lsls	r3, r3, #31
    138a:	d517      	bpl.n	13bc <wipedown()+0x188>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    138c:	4d3a      	ldr	r5, [pc, #232]	; (1478 <wipedown()+0x244>)
    138e:	4c3b      	ldr	r4, [pc, #236]	; (147c <wipedown()+0x248>)
    1390:	682b      	ldr	r3, [r5, #0]
    1392:	9303      	str	r3, [sp, #12]
    1394:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1398:	9b03      	ldr	r3, [sp, #12]
    139a:	1a5b      	subs	r3, r3, r1
    139c:	4293      	cmp	r3, r2
    139e:	7833      	ldrb	r3, [r6, #0]
    13a0:	d306      	bcc.n	13b0 <wipedown()+0x17c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13a2:	682a      	ldr	r2, [r5, #0]
    13a4:	9202      	str	r2, [sp, #8]
    13a6:	3b01      	subs	r3, #1
	return ret;
    13a8:	9a02      	ldr	r2, [sp, #8]
    13aa:	6022      	str	r2, [r4, #0]
    13ac:	b2db      	uxtb	r3, r3
    13ae:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    13b0:	b90b      	cbnz	r3, 13b6 <wipedown()+0x182>
		finish_transition();
    13b2:	f7ff fc35 	bl	c20 <finish_transition()>
	}
}
    13b6:	b005      	add	sp, #20
    13b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos--; }		// 1000 / 75
    13bc:	4638      	mov	r0, r7
    13be:	f008 f889 	bl	94d4 <__cxa_guard_acquire>
    13c2:	2800      	cmp	r0, #0
    13c4:	d0e2      	beq.n	138c <wipedown()+0x158>
    13c6:	4b2e      	ldr	r3, [pc, #184]	; (1480 <wipedown()+0x24c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13c8:	4d2b      	ldr	r5, [pc, #172]	; (1478 <wipedown()+0x244>)
    13ca:	781b      	ldrb	r3, [r3, #0]
    13cc:	682a      	ldr	r2, [r5, #0]
    13ce:	9201      	str	r2, [sp, #4]
    13d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    13d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    13d8:	4c28      	ldr	r4, [pc, #160]	; (147c <wipedown()+0x248>)
	return ret;
    13da:	9a01      	ldr	r2, [sp, #4]
    13dc:	4638      	mov	r0, r7
    13de:	e884 000c 	stmia.w	r4, {r2, r3}
    13e2:	f008 f87d 	bl	94e0 <__cxa_guard_release>
    13e6:	e7d3      	b.n	1390 <wipedown()+0x15c>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    13e8:	1c55      	adds	r5, r2, #1
    13ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    13ee:	eb08 0a05 	add.w	sl, r8, r5
    13f2:	4651      	mov	r1, sl
    13f4:	4623      	mov	r3, r4
    13f6:	aa02      	add	r2, sp, #8
    13f8:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    13fa:	f88d 7008 	strb.w	r7, [sp, #8]
    13fe:	f88d 4009 	strb.w	r4, [sp, #9]
    1402:	f88d 400a 	strb.w	r4, [sp, #10]
    1406:	f007 f91d 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    140a:	f899 3000 	ldrb.w	r3, [r9]
    140e:	f88d 7008 	strb.w	r7, [sp, #8]
    1412:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    1416:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    141a:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    141e:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1422:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    1426:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    142a:	f808 c005 	strb.w	ip, [r8, r5]
    142e:	aa02      	add	r2, sp, #8
    1430:	4623      	mov	r3, r4
    1432:	4649      	mov	r1, r9
    1434:	a803      	add	r0, sp, #12
        g = rhs.g;
    1436:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    143a:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    143e:	f88d 4009 	strb.w	r4, [sp, #9]
    1442:	f88d 400a 	strb.w	r4, [sp, #10]
    1446:	f007 f8fd 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    144a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    144e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1452:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1456:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    145a:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    145e:	f889 3002 	strb.w	r3, [r9, #2]
    1462:	e78f      	b.n	1384 <wipedown()+0x150>
    1464:	4d01      	ldr	r5, [pc, #4]	; (146c <wipedown()+0x238>)
    1466:	e714      	b.n	1292 <wipedown()+0x5e>
    1468:	1fff94fc 	.word	0x1fff94fc
    146c:	1fff9e14 	.word	0x1fff9e14
    1470:	1fff95ec 	.word	0x1fff95ec
    1474:	1fff95b8 	.word	0x1fff95b8
    1478:	1fffa058 	.word	0x1fffa058
    147c:	1fff94d8 	.word	0x1fff94d8
    1480:	1fff95d1 	.word	0x1fff95d1
    1484:	1fff8c88 	.word	0x1fff8c88

00001488 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    148c:	4b9b      	ldr	r3, [pc, #620]	; (16fc <wipeup()+0x274>)
    148e:	781d      	ldrb	r5, [r3, #0]
    1490:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1492:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1494:	2b00      	cmp	r3, #0
    1496:	f000 811d 	beq.w	16d4 <wipeup()+0x24c>
    149a:	f103 38ff 	add.w	r8, r3, #4294967295
    149e:	fa1f f888 	uxth.w	r8, r8
    14a2:	4997      	ldr	r1, [pc, #604]	; (1700 <wipeup()+0x278>)
    14a4:	4a97      	ldr	r2, [pc, #604]	; (1704 <wipeup()+0x27c>)
    14a6:	f108 0801 	add.w	r8, r8, #1
    14aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    14ae:	4490      	add	r8, r2
    14b0:	460c      	mov	r4, r1
    14b2:	4608      	mov	r0, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14b4:	f892 c000 	ldrb.w	ip, [r2]
        g = rhs.g;
    14b8:	f892 e001 	ldrb.w	lr, [r2, #1]
        b = rhs.b;
    14bc:	7896      	ldrb	r6, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14be:	f880 c000 	strb.w	ip, [r0]
    14c2:	3203      	adds	r2, #3
    14c4:	4542      	cmp	r2, r8
        g = rhs.g;
    14c6:	f880 e001 	strb.w	lr, [r0, #1]
        b = rhs.b;
    14ca:	7086      	strb	r6, [r0, #2]
    14cc:	f1a1 0103 	sub.w	r1, r1, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14d0:	f881 c1c2 	strb.w	ip, [r1, #450]	; 0x1c2
        g = rhs.g;
    14d4:	f881 e1c3 	strb.w	lr, [r1, #451]	; 0x1c3
        b = rhs.b;
    14d8:	f881 61c4 	strb.w	r6, [r1, #452]	; 0x1c4
    14dc:	f100 0003 	add.w	r0, r0, #3
    14e0:	d1e8      	bne.n	14b4 <wipeup()+0x2c>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    14e2:	2b4a      	cmp	r3, #74	; 0x4a
    14e4:	d820      	bhi.n	1528 <wipeup()+0xa0>
    14e6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 1718 <wipeup()+0x290>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
    14ee:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    14f2:	eb09 0601 	add.w	r6, r9, r1
    14f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    14fa:	3301      	adds	r3, #1
    14fc:	eb04 0801 	add.w	r8, r4, r1
    1500:	18a0      	adds	r0, r4, r2
    1502:	b29b      	uxth	r3, r3
        g = rhs.g;
    1504:	f896 e001 	ldrb.w	lr, [r6, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1508:	f819 c001 	ldrb.w	ip, [r9, r1]
        g = rhs.g;
        b = rhs.b;
    150c:	78b6      	ldrb	r6, [r6, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    150e:	f804 c001 	strb.w	ip, [r4, r1]
    1512:	2b4b      	cmp	r3, #75	; 0x4b
        g = rhs.g;
    1514:	f888 e001 	strb.w	lr, [r8, #1]
        b = rhs.b;
    1518:	f888 6002 	strb.w	r6, [r8, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    151c:	f804 c002 	strb.w	ip, [r4, r2]
        g = rhs.g;
    1520:	f880 e001 	strb.w	lr, [r0, #1]
        b = rhs.b;
    1524:	7086      	strb	r6, [r0, #2]
    1526:	d1e0      	bne.n	14ea <wipeup()+0x62>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
    1528:	2d00      	cmp	r5, #0
    152a:	f040 808f 	bne.w	164c <wipeup()+0x1c4>
    152e:	f10d 0a0c 	add.w	sl, sp, #12
    1532:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    1536:	4b71      	ldr	r3, [pc, #452]	; (16fc <wipeup()+0x274>)
    1538:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    153a:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    153e:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1542:	1c5a      	adds	r2, r3, #1
    1544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1548:	eb04 0e03 	add.w	lr, r4, r3
    154c:	1825      	adds	r5, r4, r0
    154e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1552:	2680      	movs	r6, #128	; 0x80
    1554:	eb04 0902 	add.w	r9, r4, r2
    1558:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    155a:	22ff      	movs	r2, #255	; 0xff
    155c:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    155e:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1562:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1566:	f88e 2002 	strb.w	r2, [lr, #2]
    156a:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    156c:	5422      	strb	r2, [r4, r0]
    156e:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1570:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1572:	70aa      	strb	r2, [r5, #2]
    1574:	4650      	mov	r0, sl
    1576:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1578:	f88d 6009 	strb.w	r6, [sp, #9]
    157c:	f88d 600a 	strb.w	r6, [sp, #10]
    1580:	f88d 8008 	strb.w	r8, [sp, #8]
    1584:	f007 f85e 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1588:	4b5c      	ldr	r3, [pc, #368]	; (16fc <wipeup()+0x274>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    158a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    158e:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1590:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1594:	f88d 8008 	strb.w	r8, [sp, #8]
    1598:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    159c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    15a0:	eb04 0805 	add.w	r8, r4, r5
    15a4:	4633      	mov	r3, r6
    15a6:	f88d 6009 	strb.w	r6, [sp, #9]
    15aa:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    15ae:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15b2:	55e1      	strb	r1, [r4, r7]
    15b4:	465a      	mov	r2, fp
    15b6:	4650      	mov	r0, sl
    15b8:	4641      	mov	r1, r8
        g = rhs.g;
    15ba:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    15be:	f889 6002 	strb.w	r6, [r9, #2]
    15c2:	f007 f83f 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    15c6:	4b50      	ldr	r3, [pc, #320]	; (1708 <wipeup()+0x280>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    15cc:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    15ce:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    15d2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d6:	5560      	strb	r0, [r4, r5]
    15d8:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    15da:	4848      	ldr	r0, [pc, #288]	; (16fc <wipeup()+0x274>)
        g = rhs.g;
    15dc:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    15e0:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    15e4:	d520      	bpl.n	1628 <wipeup()+0x1a0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e6:	4d49      	ldr	r5, [pc, #292]	; (170c <wipeup()+0x284>)
    15e8:	4c49      	ldr	r4, [pc, #292]	; (1710 <wipeup()+0x288>)
    15ea:	682b      	ldr	r3, [r5, #0]
    15ec:	9303      	str	r3, [sp, #12]
    15ee:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	1a5b      	subs	r3, r3, r1
    15f6:	4293      	cmp	r3, r2
    15f8:	d30e      	bcc.n	1618 <wipeup()+0x190>
    15fa:	4b40      	ldr	r3, [pc, #256]	; (16fc <wipeup()+0x274>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15fc:	682a      	ldr	r2, [r5, #0]
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	9202      	str	r2, [sp, #8]
	return ret;
    1602:	9a02      	ldr	r2, [sp, #8]
    1604:	6022      	str	r2, [r4, #0]
    1606:	3301      	adds	r3, #1
    1608:	4a3c      	ldr	r2, [pc, #240]	; (16fc <wipeup()+0x274>)
    160a:	b2db      	uxtb	r3, r3
    160c:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    160e:	2b4a      	cmp	r3, #74	; 0x4a
    1610:	d005      	beq.n	161e <wipeup()+0x196>
		finish_transition();
	}
}
    1612:	b005      	add	sp, #20
    1614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    161a:	2b4a      	cmp	r3, #74	; 0x4a
    161c:	d1f9      	bne.n	1612 <wipeup()+0x18a>
		finish_transition();
    161e:	f7ff faff 	bl	c20 <finish_transition()>
	}
}
    1622:	b005      	add	sp, #20
    1624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    1628:	4837      	ldr	r0, [pc, #220]	; (1708 <wipeup()+0x280>)
    162a:	f007 ff53 	bl	94d4 <__cxa_guard_acquire>
    162e:	2800      	cmp	r0, #0
    1630:	d152      	bne.n	16d8 <wipeup()+0x250>
    1632:	4d36      	ldr	r5, [pc, #216]	; (170c <wipeup()+0x284>)
    1634:	4c36      	ldr	r4, [pc, #216]	; (1710 <wipeup()+0x288>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1636:	682b      	ldr	r3, [r5, #0]
    1638:	9303      	str	r3, [sp, #12]
    163a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    163e:	9b03      	ldr	r3, [sp, #12]
    1640:	1a5b      	subs	r3, r3, r1
    1642:	4293      	cmp	r3, r2
    1644:	d2d9      	bcs.n	15fa <wipeup()+0x172>
    1646:	4b2d      	ldr	r3, [pc, #180]	; (16fc <wipeup()+0x274>)
    1648:	781b      	ldrb	r3, [r3, #0]
    164a:	e7e0      	b.n	160e <wipeup()+0x186>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    164c:	3d01      	subs	r5, #1
    164e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1652:	2680      	movs	r6, #128	; 0x80
    1654:	eb04 0905 	add.w	r9, r4, r5
    1658:	f10d 0a0c 	add.w	sl, sp, #12
    165c:	f10d 0b08 	add.w	fp, sp, #8
    1660:	f04f 0800 	mov.w	r8, #0
    1664:	4649      	mov	r1, r9
    1666:	4633      	mov	r3, r6
    1668:	4650      	mov	r0, sl
    166a:	465a      	mov	r2, fp
    166c:	f88d 8008 	strb.w	r8, [sp, #8]
    1670:	f88d 6009 	strb.w	r6, [sp, #9]
    1674:	f88d 600a 	strb.w	r6, [sp, #10]
    1678:	f006 ffe4 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    167c:	4b1f      	ldr	r3, [pc, #124]	; (16fc <wipeup()+0x274>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    167e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1682:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1684:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1688:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    168c:	f88d 8008 	strb.w	r8, [sp, #8]
    1690:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1698:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    169c:	5562      	strb	r2, [r4, r5]
    169e:	461f      	mov	r7, r3
    16a0:	4641      	mov	r1, r8
    16a2:	4633      	mov	r3, r6
    16a4:	465a      	mov	r2, fp
    16a6:	4650      	mov	r0, sl
        g = rhs.g;
    16a8:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    16ac:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    16b0:	f88d 6009 	strb.w	r6, [sp, #9]
    16b4:	f88d 600a 	strb.w	r6, [sp, #10]
    16b8:	f006 ffc4 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    16c0:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    16c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16c8:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    16ca:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    16ce:	f888 3002 	strb.w	r3, [r8, #2]
    16d2:	e730      	b.n	1536 <wipeup()+0xae>
    16d4:	4c0a      	ldr	r4, [pc, #40]	; (1700 <wipeup()+0x278>)
    16d6:	e706      	b.n	14e6 <wipeup()+0x5e>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    16d8:	4b0e      	ldr	r3, [pc, #56]	; (1714 <wipeup()+0x28c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16da:	4d0c      	ldr	r5, [pc, #48]	; (170c <wipeup()+0x284>)
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	682a      	ldr	r2, [r5, #0]
    16e0:	9201      	str	r2, [sp, #4]
    16e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    16e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    16ea:	4c09      	ldr	r4, [pc, #36]	; (1710 <wipeup()+0x288>)
	return ret;
    16ec:	9a01      	ldr	r2, [sp, #4]
    16ee:	4806      	ldr	r0, [pc, #24]	; (1708 <wipeup()+0x280>)
    16f0:	e884 000c 	stmia.w	r4, {r2, r3}
    16f4:	f007 fef4 	bl	94e0 <__cxa_guard_release>
    16f8:	e79d      	b.n	1636 <wipeup()+0x1ae>
    16fa:	bf00      	nop
    16fc:	1fff94fc 	.word	0x1fff94fc
    1700:	1fff9e14 	.word	0x1fff9e14
    1704:	1fff8c88 	.word	0x1fff8c88
    1708:	1fff95bc 	.word	0x1fff95bc
    170c:	1fffa058 	.word	0x1fffa058
    1710:	1fff95d4 	.word	0x1fff95d4
    1714:	1fff95d1 	.word	0x1fff95d1
    1718:	1fff95ec 	.word	0x1fff95ec

0000171c <colorfade()>:
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    171c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (color_up) {
    1720:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 17e8 <colorfade()+0xcc>
    1724:	f89a 3000 	ldrb.w	r3, [sl]
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    1728:	b082      	sub	sp, #8
	if (color_up) {
    172a:	b32b      	cbz	r3, 1778 <colorfade()+0x5c>
    172c:	4d29      	ldr	r5, [pc, #164]	; (17d4 <colorfade()+0xb8>)
    172e:	4c2a      	ldr	r4, [pc, #168]	; (17d8 <colorfade()+0xbc>)
    1730:	4f2a      	ldr	r7, [pc, #168]	; (17dc <colorfade()+0xc0>)
    1732:	f505 79e1 	add.w	r9, r5, #450	; 0x1c2
    1736:	ae01      	add	r6, sp, #4
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
    1738:	4629      	mov	r1, r5
    173a:	783b      	ldrb	r3, [r7, #0]
    173c:	4a28      	ldr	r2, [pc, #160]	; (17e0 <colorfade()+0xc4>)
    173e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 17dc <colorfade()+0xc0>
    1742:	4630      	mov	r0, r6
    1744:	3503      	adds	r5, #3
    1746:	f006 ff7d 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    174a:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    174e:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    1752:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1756:	7021      	strb	r1, [r4, #0]
	}
}

void colorfade() {
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1758:	454d      	cmp	r5, r9
        g = rhs.g;
    175a:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    175c:	70a3      	strb	r3, [r4, #2]
    175e:	f104 0403 	add.w	r4, r4, #3
    1762:	d1e9      	bne.n	1738 <colorfade()+0x1c>
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio++ == 255) { color_up = 0; }
    1764:	f898 3000 	ldrb.w	r3, [r8]
    1768:	1c5a      	adds	r2, r3, #1
    176a:	2bff      	cmp	r3, #255	; 0xff
    176c:	f888 2000 	strb.w	r2, [r8]
    1770:	d02a      	beq.n	17c8 <colorfade()+0xac>
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio-- == 0) { finish_transition(); }
	}
}
    1772:	b002      	add	sp, #8
    1774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1778:	4d1a      	ldr	r5, [pc, #104]	; (17e4 <colorfade()+0xc8>)
    177a:	4c17      	ldr	r4, [pc, #92]	; (17d8 <colorfade()+0xbc>)
    177c:	4f17      	ldr	r7, [pc, #92]	; (17dc <colorfade()+0xc0>)
    177e:	f505 79e1 	add.w	r9, r5, #450	; 0x1c2
    1782:	ae01      	add	r6, sp, #4
		}
		if (transition_ratio++ == 255) { color_up = 0; }
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
    1784:	4629      	mov	r1, r5
    1786:	783b      	ldrb	r3, [r7, #0]
    1788:	4a15      	ldr	r2, [pc, #84]	; (17e0 <colorfade()+0xc4>)
    178a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 17dc <colorfade()+0xc0>
    178e:	4630      	mov	r0, r6
    1790:	3503      	adds	r5, #3
    1792:	f006 ff57 	bl	8644 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1796:	f89d 1004 	ldrb.w	r1, [sp, #4]
        g = rhs.g;
    179a:	f89d 2005 	ldrb.w	r2, [sp, #5]
        b = rhs.b;
    179e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17a2:	7021      	strb	r1, [r4, #0]
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio++ == 255) { color_up = 0; }
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    17a4:	454d      	cmp	r5, r9
        g = rhs.g;
    17a6:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    17a8:	70a3      	strb	r3, [r4, #2]
    17aa:	f104 0403 	add.w	r4, r4, #3
    17ae:	d1e9      	bne.n	1784 <colorfade()+0x68>
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio-- == 0) { finish_transition(); }
    17b0:	f898 3000 	ldrb.w	r3, [r8]
    17b4:	1e5a      	subs	r2, r3, #1
    17b6:	f888 2000 	strb.w	r2, [r8]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d1d9      	bne.n	1772 <colorfade()+0x56>
    17be:	f7ff fa2f 	bl	c20 <finish_transition()>
	}
}
    17c2:	b002      	add	sp, #8
    17c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
void colorfade() {
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio++ == 255) { color_up = 0; }
    17c8:	2300      	movs	r3, #0
    17ca:	f88a 3000 	strb.w	r3, [sl]
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		if (transition_ratio-- == 0) { finish_transition(); }
	}
}
    17ce:	b002      	add	sp, #8
    17d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    17d4:	1fff95ec 	.word	0x1fff95ec
    17d8:	1fff9e14 	.word	0x1fff9e14
    17dc:	1fff8c86 	.word	0x1fff8c86
    17e0:	1fff9fd8 	.word	0x1fff9fd8
    17e4:	1fff8c88 	.word	0x1fff8c88
    17e8:	1fff94d4 	.word	0x1fff94d4

000017ec <switch_transition(TransitionType)>:

void switch_transition(TransitionType tt) {
	switch (tt) {
    17ec:	2803      	cmp	r0, #3
    17ee:	d803      	bhi.n	17f8 <switch_transition(TransitionType)+0xc>
    17f0:	e8df f000 	tbb	[pc, r0]
    17f4:	08040602 	.word	0x08040602
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
		default:		blending();		break;
    17f8:	f7ff bcaa 	b.w	1150 <blending()>

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    17fc:	f7ff be44 	b.w	1488 <wipeup()>
}

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1800:	f7ff bd18 	b.w	1234 <wipedown()>
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
    1804:	f7ff bf8a 	b.w	171c <colorfade()>

00001808 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1808:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    180a:	2101      	movs	r1, #1
    180c:	4604      	mov	r4, r0
    180e:	4894      	ldr	r0, [pc, #592]	; (1a60 <print_palette(unsigned char)+0x258>)
    1810:	f008 fef8 	bl	a604 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1814:	4621      	mov	r1, r4
    1816:	2300      	movs	r3, #0
    1818:	220a      	movs	r2, #10
    181a:	4892      	ldr	r0, [pc, #584]	; (1a64 <print_palette(unsigned char)+0x25c>)
    181c:	f009 f906 	bl	aa2c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1820:	2102      	movs	r1, #2
    1822:	4891      	ldr	r0, [pc, #580]	; (1a68 <print_palette(unsigned char)+0x260>)
    1824:	f008 feee 	bl	a604 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1828:	2c5c      	cmp	r4, #92	; 0x5c
    182a:	f200 8281 	bhi.w	1d30 <print_palette(unsigned char)+0x528>
    182e:	e8df f014 	tbh	[pc, r4, lsl #1]
    1832:	027a      	.short	0x027a
    1834:	02700275 	.word	0x02700275
    1838:	0266026b 	.word	0x0266026b
    183c:	025c0261 	.word	0x025c0261
    1840:	02520257 	.word	0x02520257
    1844:	0248024d 	.word	0x0248024d
    1848:	023e0243 	.word	0x023e0243
    184c:	02340239 	.word	0x02340239
    1850:	022a022f 	.word	0x022a022f
    1854:	02200225 	.word	0x02200225
    1858:	0216021b 	.word	0x0216021b
    185c:	020c0211 	.word	0x020c0211
    1860:	02020207 	.word	0x02020207
    1864:	01f801fd 	.word	0x01f801fd
    1868:	01ee01f3 	.word	0x01ee01f3
    186c:	01e401e9 	.word	0x01e401e9
    1870:	01da01df 	.word	0x01da01df
    1874:	01d001d5 	.word	0x01d001d5
    1878:	01c601cb 	.word	0x01c601cb
    187c:	01bc01c1 	.word	0x01bc01c1
    1880:	01b201b7 	.word	0x01b201b7
    1884:	01a801ad 	.word	0x01a801ad
    1888:	019e01a3 	.word	0x019e01a3
    188c:	01940199 	.word	0x01940199
    1890:	018a018f 	.word	0x018a018f
    1894:	01800185 	.word	0x01800185
    1898:	0176017b 	.word	0x0176017b
    189c:	016c0171 	.word	0x016c0171
    18a0:	01110167 	.word	0x01110167
    18a4:	0107010c 	.word	0x0107010c
    18a8:	00fd0102 	.word	0x00fd0102
    18ac:	00f300f8 	.word	0x00f300f8
    18b0:	00e900ee 	.word	0x00e900ee
    18b4:	00df00e4 	.word	0x00df00e4
    18b8:	00d500da 	.word	0x00d500da
    18bc:	00cb00d0 	.word	0x00cb00d0
    18c0:	00c100c6 	.word	0x00c100c6
    18c4:	00b700bc 	.word	0x00b700bc
    18c8:	00ad00b2 	.word	0x00ad00b2
    18cc:	00a300a8 	.word	0x00a300a8
    18d0:	0099009e 	.word	0x0099009e
    18d4:	008f0094 	.word	0x008f0094
    18d8:	0085008a 	.word	0x0085008a
    18dc:	007b0080 	.word	0x007b0080
    18e0:	00710076 	.word	0x00710076
    18e4:	0067006c 	.word	0x0067006c
    18e8:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    18ec:	495f      	ldr	r1, [pc, #380]	; (1a6c <print_palette(unsigned char)+0x264>)
    18ee:	485d      	ldr	r0, [pc, #372]	; (1a64 <print_palette(unsigned char)+0x25c>)
    18f0:	f7fe ff74 	bl	7dc <Print::println(char const*)>
		break;
    18f4:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    18f6:	495e      	ldr	r1, [pc, #376]	; (1a70 <print_palette(unsigned char)+0x268>)
    18f8:	485a      	ldr	r0, [pc, #360]	; (1a64 <print_palette(unsigned char)+0x25c>)
    18fa:	f7fe ff6f 	bl	7dc <Print::println(char const*)>
		break;
    18fe:	bd10      	pop	{r4, pc}
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    1900:	495c      	ldr	r1, [pc, #368]	; (1a74 <print_palette(unsigned char)+0x26c>)
    1902:	4858      	ldr	r0, [pc, #352]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1904:	f7fe ff6a 	bl	7dc <Print::println(char const*)>
		break;
    1908:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    190a:	495b      	ldr	r1, [pc, #364]	; (1a78 <print_palette(unsigned char)+0x270>)
    190c:	4855      	ldr	r0, [pc, #340]	; (1a64 <print_palette(unsigned char)+0x25c>)
    190e:	f7fe ff65 	bl	7dc <Print::println(char const*)>
		break;
    1912:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    1914:	4959      	ldr	r1, [pc, #356]	; (1a7c <print_palette(unsigned char)+0x274>)
    1916:	4853      	ldr	r0, [pc, #332]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1918:	f7fe ff60 	bl	7dc <Print::println(char const*)>
		break;
    191c:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    191e:	4958      	ldr	r1, [pc, #352]	; (1a80 <print_palette(unsigned char)+0x278>)
    1920:	4850      	ldr	r0, [pc, #320]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1922:	f7fe ff5b 	bl	7dc <Print::println(char const*)>
		break;
    1926:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    1928:	4956      	ldr	r1, [pc, #344]	; (1a84 <print_palette(unsigned char)+0x27c>)
    192a:	484e      	ldr	r0, [pc, #312]	; (1a64 <print_palette(unsigned char)+0x25c>)
    192c:	f7fe ff56 	bl	7dc <Print::println(char const*)>
		break;
    1930:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    1932:	4955      	ldr	r1, [pc, #340]	; (1a88 <print_palette(unsigned char)+0x280>)
    1934:	484b      	ldr	r0, [pc, #300]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1936:	f7fe ff51 	bl	7dc <Print::println(char const*)>
		break;
    193a:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    193c:	4953      	ldr	r1, [pc, #332]	; (1a8c <print_palette(unsigned char)+0x284>)
    193e:	4849      	ldr	r0, [pc, #292]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1940:	f7fe ff4c 	bl	7dc <Print::println(char const*)>
		break;
    1944:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    1946:	4952      	ldr	r1, [pc, #328]	; (1a90 <print_palette(unsigned char)+0x288>)
    1948:	4846      	ldr	r0, [pc, #280]	; (1a64 <print_palette(unsigned char)+0x25c>)
    194a:	f7fe ff47 	bl	7dc <Print::println(char const*)>
		break;
    194e:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    1950:	4950      	ldr	r1, [pc, #320]	; (1a94 <print_palette(unsigned char)+0x28c>)
    1952:	4844      	ldr	r0, [pc, #272]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1954:	f7fe ff42 	bl	7dc <Print::println(char const*)>
		break;
    1958:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    195a:	494f      	ldr	r1, [pc, #316]	; (1a98 <print_palette(unsigned char)+0x290>)
    195c:	4841      	ldr	r0, [pc, #260]	; (1a64 <print_palette(unsigned char)+0x25c>)
    195e:	f7fe ff3d 	bl	7dc <Print::println(char const*)>
		break;
    1962:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    1964:	494d      	ldr	r1, [pc, #308]	; (1a9c <print_palette(unsigned char)+0x294>)
    1966:	483f      	ldr	r0, [pc, #252]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1968:	f7fe ff38 	bl	7dc <Print::println(char const*)>
		break;
    196c:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    196e:	494c      	ldr	r1, [pc, #304]	; (1aa0 <print_palette(unsigned char)+0x298>)
    1970:	483c      	ldr	r0, [pc, #240]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1972:	f7fe ff33 	bl	7dc <Print::println(char const*)>
		break;
    1976:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    1978:	494a      	ldr	r1, [pc, #296]	; (1aa4 <print_palette(unsigned char)+0x29c>)
    197a:	483a      	ldr	r0, [pc, #232]	; (1a64 <print_palette(unsigned char)+0x25c>)
    197c:	f7fe ff2e 	bl	7dc <Print::println(char const*)>
		break;
    1980:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    1982:	4949      	ldr	r1, [pc, #292]	; (1aa8 <print_palette(unsigned char)+0x2a0>)
    1984:	4837      	ldr	r0, [pc, #220]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1986:	f7fe ff29 	bl	7dc <Print::println(char const*)>
		break;
    198a:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    198c:	4947      	ldr	r1, [pc, #284]	; (1aac <print_palette(unsigned char)+0x2a4>)
    198e:	4835      	ldr	r0, [pc, #212]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1990:	f7fe ff24 	bl	7dc <Print::println(char const*)>
		break;
    1994:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    1996:	4946      	ldr	r1, [pc, #280]	; (1ab0 <print_palette(unsigned char)+0x2a8>)
    1998:	4832      	ldr	r0, [pc, #200]	; (1a64 <print_palette(unsigned char)+0x25c>)
    199a:	f7fe ff1f 	bl	7dc <Print::println(char const*)>
		break;
    199e:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    19a0:	4944      	ldr	r1, [pc, #272]	; (1ab4 <print_palette(unsigned char)+0x2ac>)
    19a2:	4830      	ldr	r0, [pc, #192]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19a4:	f7fe ff1a 	bl	7dc <Print::println(char const*)>
		break;
    19a8:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    19aa:	4943      	ldr	r1, [pc, #268]	; (1ab8 <print_palette(unsigned char)+0x2b0>)
    19ac:	482d      	ldr	r0, [pc, #180]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19ae:	f7fe ff15 	bl	7dc <Print::println(char const*)>
		break;
    19b2:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    19b4:	4941      	ldr	r1, [pc, #260]	; (1abc <print_palette(unsigned char)+0x2b4>)
    19b6:	482b      	ldr	r0, [pc, #172]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19b8:	f7fe ff10 	bl	7dc <Print::println(char const*)>
		break;
    19bc:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    19be:	4940      	ldr	r1, [pc, #256]	; (1ac0 <print_palette(unsigned char)+0x2b8>)
    19c0:	4828      	ldr	r0, [pc, #160]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19c2:	f7fe ff0b 	bl	7dc <Print::println(char const*)>
		break;
    19c6:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    19c8:	493e      	ldr	r1, [pc, #248]	; (1ac4 <print_palette(unsigned char)+0x2bc>)
    19ca:	4826      	ldr	r0, [pc, #152]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19cc:	f7fe ff06 	bl	7dc <Print::println(char const*)>
		break;
    19d0:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    19d2:	493d      	ldr	r1, [pc, #244]	; (1ac8 <print_palette(unsigned char)+0x2c0>)
    19d4:	4823      	ldr	r0, [pc, #140]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19d6:	f7fe ff01 	bl	7dc <Print::println(char const*)>
		break;
    19da:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    19dc:	493b      	ldr	r1, [pc, #236]	; (1acc <print_palette(unsigned char)+0x2c4>)
    19de:	4821      	ldr	r0, [pc, #132]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19e0:	f7fe fefc 	bl	7dc <Print::println(char const*)>
		break;
    19e4:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    19e6:	493a      	ldr	r1, [pc, #232]	; (1ad0 <print_palette(unsigned char)+0x2c8>)
    19e8:	481e      	ldr	r0, [pc, #120]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19ea:	f7fe fef7 	bl	7dc <Print::println(char const*)>
		break;
    19ee:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    19f0:	4938      	ldr	r1, [pc, #224]	; (1ad4 <print_palette(unsigned char)+0x2cc>)
    19f2:	481c      	ldr	r0, [pc, #112]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19f4:	f7fe fef2 	bl	7dc <Print::println(char const*)>
		break;
    19f8:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    19fa:	4937      	ldr	r1, [pc, #220]	; (1ad8 <print_palette(unsigned char)+0x2d0>)
    19fc:	4819      	ldr	r0, [pc, #100]	; (1a64 <print_palette(unsigned char)+0x25c>)
    19fe:	f7fe feed 	bl	7dc <Print::println(char const*)>
		break;
    1a02:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1a04:	4935      	ldr	r1, [pc, #212]	; (1adc <print_palette(unsigned char)+0x2d4>)
    1a06:	4817      	ldr	r0, [pc, #92]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a08:	f7fe fee8 	bl	7dc <Print::println(char const*)>
		break;
    1a0c:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    1a0e:	4934      	ldr	r1, [pc, #208]	; (1ae0 <print_palette(unsigned char)+0x2d8>)
    1a10:	4814      	ldr	r0, [pc, #80]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a12:	f7fe fee3 	bl	7dc <Print::println(char const*)>
		break;
    1a16:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1a18:	4932      	ldr	r1, [pc, #200]	; (1ae4 <print_palette(unsigned char)+0x2dc>)
    1a1a:	4812      	ldr	r0, [pc, #72]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a1c:	f7fe fede 	bl	7dc <Print::println(char const*)>
		break;
    1a20:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    1a22:	4931      	ldr	r1, [pc, #196]	; (1ae8 <print_palette(unsigned char)+0x2e0>)
    1a24:	480f      	ldr	r0, [pc, #60]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a26:	f7fe fed9 	bl	7dc <Print::println(char const*)>
		break;
    1a2a:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1a2c:	492f      	ldr	r1, [pc, #188]	; (1aec <print_palette(unsigned char)+0x2e4>)
    1a2e:	480d      	ldr	r0, [pc, #52]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a30:	f7fe fed4 	bl	7dc <Print::println(char const*)>
		break;
    1a34:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    1a36:	492e      	ldr	r1, [pc, #184]	; (1af0 <print_palette(unsigned char)+0x2e8>)
    1a38:	480a      	ldr	r0, [pc, #40]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a3a:	f7fe fecf 	bl	7dc <Print::println(char const*)>
		break;
    1a3e:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    1a40:	492c      	ldr	r1, [pc, #176]	; (1af4 <print_palette(unsigned char)+0x2ec>)
    1a42:	4808      	ldr	r0, [pc, #32]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a44:	f7fe feca 	bl	7dc <Print::println(char const*)>
		break;
    1a48:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    1a4a:	492b      	ldr	r1, [pc, #172]	; (1af8 <print_palette(unsigned char)+0x2f0>)
    1a4c:	4805      	ldr	r0, [pc, #20]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a4e:	f7fe fec5 	bl	7dc <Print::println(char const*)>
		break;
    1a52:	bd10      	pop	{r4, pc}
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    1a54:	4929      	ldr	r1, [pc, #164]	; (1afc <print_palette(unsigned char)+0x2f4>)
    1a56:	4803      	ldr	r0, [pc, #12]	; (1a64 <print_palette(unsigned char)+0x25c>)
    1a58:	f7fe fec0 	bl	7dc <Print::println(char const*)>
		break;
    1a5c:	bd10      	pop	{r4, pc}
    1a5e:	bf00      	nop
    1a60:	0000c2f4 	.word	0x0000c2f4
    1a64:	1fff8764 	.word	0x1fff8764
    1a68:	0000c2f8 	.word	0x0000c2f8
    1a6c:	0000c88c 	.word	0x0000c88c
    1a70:	0000c880 	.word	0x0000c880
    1a74:	0000c870 	.word	0x0000c870
    1a78:	0000c860 	.word	0x0000c860
    1a7c:	0000c84c 	.word	0x0000c84c
    1a80:	0000c834 	.word	0x0000c834
    1a84:	0000c81c 	.word	0x0000c81c
    1a88:	0000c80c 	.word	0x0000c80c
    1a8c:	0000c7f4 	.word	0x0000c7f4
    1a90:	0000c7e8 	.word	0x0000c7e8
    1a94:	0000c7dc 	.word	0x0000c7dc
    1a98:	0000c7c4 	.word	0x0000c7c4
    1a9c:	0000c7b8 	.word	0x0000c7b8
    1aa0:	0000c7ac 	.word	0x0000c7ac
    1aa4:	0000c7a0 	.word	0x0000c7a0
    1aa8:	0000c794 	.word	0x0000c794
    1aac:	0000c784 	.word	0x0000c784
    1ab0:	0000c778 	.word	0x0000c778
    1ab4:	0000c764 	.word	0x0000c764
    1ab8:	0000c758 	.word	0x0000c758
    1abc:	0000c748 	.word	0x0000c748
    1ac0:	0000c73c 	.word	0x0000c73c
    1ac4:	0000c730 	.word	0x0000c730
    1ac8:	0000c728 	.word	0x0000c728
    1acc:	0000c714 	.word	0x0000c714
    1ad0:	0000c704 	.word	0x0000c704
    1ad4:	0000c6f0 	.word	0x0000c6f0
    1ad8:	0000c6e4 	.word	0x0000c6e4
    1adc:	0000c6d8 	.word	0x0000c6d8
    1ae0:	0000c6cc 	.word	0x0000c6cc
    1ae4:	0000c6bc 	.word	0x0000c6bc
    1ae8:	0000c6a8 	.word	0x0000c6a8
    1aec:	0000c69c 	.word	0x0000c69c
    1af0:	0000c68c 	.word	0x0000c68c
    1af4:	0000c680 	.word	0x0000c680
    1af8:	0000c670 	.word	0x0000c670
    1afc:	0000c664 	.word	0x0000c664
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1b00:	498e      	ldr	r1, [pc, #568]	; (1d3c <print_palette(unsigned char)+0x534>)
    1b02:	488f      	ldr	r0, [pc, #572]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b04:	f7fe fe6a 	bl	7dc <Print::println(char const*)>
		break;
    1b08:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    1b0a:	498e      	ldr	r1, [pc, #568]	; (1d44 <print_palette(unsigned char)+0x53c>)
    1b0c:	488c      	ldr	r0, [pc, #560]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b0e:	f7fe fe65 	bl	7dc <Print::println(char const*)>
		break;
    1b12:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1b14:	498c      	ldr	r1, [pc, #560]	; (1d48 <print_palette(unsigned char)+0x540>)
    1b16:	488a      	ldr	r0, [pc, #552]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b18:	f7fe fe60 	bl	7dc <Print::println(char const*)>
		break;
    1b1c:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    1b1e:	498b      	ldr	r1, [pc, #556]	; (1d4c <print_palette(unsigned char)+0x544>)
    1b20:	4887      	ldr	r0, [pc, #540]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b22:	f7fe fe5b 	bl	7dc <Print::println(char const*)>
		break;
    1b26:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    1b28:	4989      	ldr	r1, [pc, #548]	; (1d50 <print_palette(unsigned char)+0x548>)
    1b2a:	4885      	ldr	r0, [pc, #532]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b2c:	f7fe fe56 	bl	7dc <Print::println(char const*)>
		break;
    1b30:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    1b32:	4988      	ldr	r1, [pc, #544]	; (1d54 <print_palette(unsigned char)+0x54c>)
    1b34:	4882      	ldr	r0, [pc, #520]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b36:	f7fe fe51 	bl	7dc <Print::println(char const*)>
		break;
    1b3a:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    1b3c:	4986      	ldr	r1, [pc, #536]	; (1d58 <print_palette(unsigned char)+0x550>)
    1b3e:	4880      	ldr	r0, [pc, #512]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b40:	f7fe fe4c 	bl	7dc <Print::println(char const*)>
		break;
    1b44:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    1b46:	4985      	ldr	r1, [pc, #532]	; (1d5c <print_palette(unsigned char)+0x554>)
    1b48:	487d      	ldr	r0, [pc, #500]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b4a:	f7fe fe47 	bl	7dc <Print::println(char const*)>
		break;
    1b4e:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    1b50:	4983      	ldr	r1, [pc, #524]	; (1d60 <print_palette(unsigned char)+0x558>)
    1b52:	487b      	ldr	r0, [pc, #492]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b54:	f7fe fe42 	bl	7dc <Print::println(char const*)>
		break;
    1b58:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    1b5a:	4982      	ldr	r1, [pc, #520]	; (1d64 <print_palette(unsigned char)+0x55c>)
    1b5c:	4878      	ldr	r0, [pc, #480]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b5e:	f7fe fe3d 	bl	7dc <Print::println(char const*)>
		break;
    1b62:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    1b64:	4980      	ldr	r1, [pc, #512]	; (1d68 <print_palette(unsigned char)+0x560>)
    1b66:	4876      	ldr	r0, [pc, #472]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b68:	f7fe fe38 	bl	7dc <Print::println(char const*)>
		break;
    1b6c:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    1b6e:	497f      	ldr	r1, [pc, #508]	; (1d6c <print_palette(unsigned char)+0x564>)
    1b70:	4873      	ldr	r0, [pc, #460]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b72:	f7fe fe33 	bl	7dc <Print::println(char const*)>
		break;
    1b76:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    1b78:	497d      	ldr	r1, [pc, #500]	; (1d70 <print_palette(unsigned char)+0x568>)
    1b7a:	4871      	ldr	r0, [pc, #452]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b7c:	f7fe fe2e 	bl	7dc <Print::println(char const*)>
		break;
    1b80:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1b82:	497c      	ldr	r1, [pc, #496]	; (1d74 <print_palette(unsigned char)+0x56c>)
    1b84:	486e      	ldr	r0, [pc, #440]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b86:	f7fe fe29 	bl	7dc <Print::println(char const*)>
		break;
    1b8a:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    1b8c:	497a      	ldr	r1, [pc, #488]	; (1d78 <print_palette(unsigned char)+0x570>)
    1b8e:	486c      	ldr	r0, [pc, #432]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b90:	f7fe fe24 	bl	7dc <Print::println(char const*)>
		break;
    1b94:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    1b96:	4979      	ldr	r1, [pc, #484]	; (1d7c <print_palette(unsigned char)+0x574>)
    1b98:	4869      	ldr	r0, [pc, #420]	; (1d40 <print_palette(unsigned char)+0x538>)
    1b9a:	f7fe fe1f 	bl	7dc <Print::println(char const*)>
		break;
    1b9e:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    1ba0:	4977      	ldr	r1, [pc, #476]	; (1d80 <print_palette(unsigned char)+0x578>)
    1ba2:	4867      	ldr	r0, [pc, #412]	; (1d40 <print_palette(unsigned char)+0x538>)
    1ba4:	f7fe fe1a 	bl	7dc <Print::println(char const*)>
		break;
    1ba8:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    1baa:	4976      	ldr	r1, [pc, #472]	; (1d84 <print_palette(unsigned char)+0x57c>)
    1bac:	4864      	ldr	r0, [pc, #400]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bae:	f7fe fe15 	bl	7dc <Print::println(char const*)>
		break;
    1bb2:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    1bb4:	4974      	ldr	r1, [pc, #464]	; (1d88 <print_palette(unsigned char)+0x580>)
    1bb6:	4862      	ldr	r0, [pc, #392]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bb8:	f7fe fe10 	bl	7dc <Print::println(char const*)>
		break;
    1bbc:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    1bbe:	4973      	ldr	r1, [pc, #460]	; (1d8c <print_palette(unsigned char)+0x584>)
    1bc0:	485f      	ldr	r0, [pc, #380]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bc2:	f7fe fe0b 	bl	7dc <Print::println(char const*)>
		break;
    1bc6:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    1bc8:	4971      	ldr	r1, [pc, #452]	; (1d90 <print_palette(unsigned char)+0x588>)
    1bca:	485d      	ldr	r0, [pc, #372]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bcc:	f7fe fe06 	bl	7dc <Print::println(char const*)>
		break;
    1bd0:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    1bd2:	4970      	ldr	r1, [pc, #448]	; (1d94 <print_palette(unsigned char)+0x58c>)
    1bd4:	485a      	ldr	r0, [pc, #360]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bd6:	f7fe fe01 	bl	7dc <Print::println(char const*)>
		break;
    1bda:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    1bdc:	496e      	ldr	r1, [pc, #440]	; (1d98 <print_palette(unsigned char)+0x590>)
    1bde:	4858      	ldr	r0, [pc, #352]	; (1d40 <print_palette(unsigned char)+0x538>)
    1be0:	f7fe fdfc 	bl	7dc <Print::println(char const*)>
		break;
    1be4:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    1be6:	496d      	ldr	r1, [pc, #436]	; (1d9c <print_palette(unsigned char)+0x594>)
    1be8:	4855      	ldr	r0, [pc, #340]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bea:	f7fe fdf7 	bl	7dc <Print::println(char const*)>
		break;
    1bee:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    1bf0:	496b      	ldr	r1, [pc, #428]	; (1da0 <print_palette(unsigned char)+0x598>)
    1bf2:	4853      	ldr	r0, [pc, #332]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bf4:	f7fe fdf2 	bl	7dc <Print::println(char const*)>
		break;
    1bf8:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    1bfa:	496a      	ldr	r1, [pc, #424]	; (1da4 <print_palette(unsigned char)+0x59c>)
    1bfc:	4850      	ldr	r0, [pc, #320]	; (1d40 <print_palette(unsigned char)+0x538>)
    1bfe:	f7fe fded 	bl	7dc <Print::println(char const*)>
		break;
    1c02:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1c04:	4968      	ldr	r1, [pc, #416]	; (1da8 <print_palette(unsigned char)+0x5a0>)
    1c06:	484e      	ldr	r0, [pc, #312]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c08:	f7fe fde8 	bl	7dc <Print::println(char const*)>
		break;
    1c0c:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    1c0e:	4967      	ldr	r1, [pc, #412]	; (1dac <print_palette(unsigned char)+0x5a4>)
    1c10:	484b      	ldr	r0, [pc, #300]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c12:	f7fe fde3 	bl	7dc <Print::println(char const*)>
		break;
    1c16:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    1c18:	4965      	ldr	r1, [pc, #404]	; (1db0 <print_palette(unsigned char)+0x5a8>)
    1c1a:	4849      	ldr	r0, [pc, #292]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c1c:	f7fe fdde 	bl	7dc <Print::println(char const*)>
		break;
    1c20:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    1c22:	4964      	ldr	r1, [pc, #400]	; (1db4 <print_palette(unsigned char)+0x5ac>)
    1c24:	4846      	ldr	r0, [pc, #280]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c26:	f7fe fdd9 	bl	7dc <Print::println(char const*)>
		break;
    1c2a:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    1c2c:	4962      	ldr	r1, [pc, #392]	; (1db8 <print_palette(unsigned char)+0x5b0>)
    1c2e:	4844      	ldr	r0, [pc, #272]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c30:	f7fe fdd4 	bl	7dc <Print::println(char const*)>
		break;
    1c34:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    1c36:	4961      	ldr	r1, [pc, #388]	; (1dbc <print_palette(unsigned char)+0x5b4>)
    1c38:	4841      	ldr	r0, [pc, #260]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c3a:	f7fe fdcf 	bl	7dc <Print::println(char const*)>
		break;
    1c3e:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    1c40:	495f      	ldr	r1, [pc, #380]	; (1dc0 <print_palette(unsigned char)+0x5b8>)
    1c42:	483f      	ldr	r0, [pc, #252]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c44:	f7fe fdca 	bl	7dc <Print::println(char const*)>
		break;
    1c48:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    1c4a:	495e      	ldr	r1, [pc, #376]	; (1dc4 <print_palette(unsigned char)+0x5bc>)
    1c4c:	483c      	ldr	r0, [pc, #240]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c4e:	f7fe fdc5 	bl	7dc <Print::println(char const*)>
		break;
    1c52:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    1c54:	495c      	ldr	r1, [pc, #368]	; (1dc8 <print_palette(unsigned char)+0x5c0>)
    1c56:	483a      	ldr	r0, [pc, #232]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c58:	f7fe fdc0 	bl	7dc <Print::println(char const*)>
		break;
    1c5c:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    1c5e:	495b      	ldr	r1, [pc, #364]	; (1dcc <print_palette(unsigned char)+0x5c4>)
    1c60:	4837      	ldr	r0, [pc, #220]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c62:	f7fe fdbb 	bl	7dc <Print::println(char const*)>
		break;
    1c66:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    1c68:	4959      	ldr	r1, [pc, #356]	; (1dd0 <print_palette(unsigned char)+0x5c8>)
    1c6a:	4835      	ldr	r0, [pc, #212]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c6c:	f7fe fdb6 	bl	7dc <Print::println(char const*)>
		break;
    1c70:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    1c72:	4958      	ldr	r1, [pc, #352]	; (1dd4 <print_palette(unsigned char)+0x5cc>)
    1c74:	4832      	ldr	r0, [pc, #200]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c76:	f7fe fdb1 	bl	7dc <Print::println(char const*)>
		break;
    1c7a:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    1c7c:	4956      	ldr	r1, [pc, #344]	; (1dd8 <print_palette(unsigned char)+0x5d0>)
    1c7e:	4830      	ldr	r0, [pc, #192]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c80:	f7fe fdac 	bl	7dc <Print::println(char const*)>
		break;
    1c84:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    1c86:	4955      	ldr	r1, [pc, #340]	; (1ddc <print_palette(unsigned char)+0x5d4>)
    1c88:	482d      	ldr	r0, [pc, #180]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c8a:	f7fe fda7 	bl	7dc <Print::println(char const*)>
		break;
    1c8e:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    1c90:	4953      	ldr	r1, [pc, #332]	; (1de0 <print_palette(unsigned char)+0x5d8>)
    1c92:	482b      	ldr	r0, [pc, #172]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c94:	f7fe fda2 	bl	7dc <Print::println(char const*)>
		break;
    1c98:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    1c9a:	4952      	ldr	r1, [pc, #328]	; (1de4 <print_palette(unsigned char)+0x5dc>)
    1c9c:	4828      	ldr	r0, [pc, #160]	; (1d40 <print_palette(unsigned char)+0x538>)
    1c9e:	f7fe fd9d 	bl	7dc <Print::println(char const*)>
		break;
    1ca2:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    1ca4:	4950      	ldr	r1, [pc, #320]	; (1de8 <print_palette(unsigned char)+0x5e0>)
    1ca6:	4826      	ldr	r0, [pc, #152]	; (1d40 <print_palette(unsigned char)+0x538>)
    1ca8:	f7fe fd98 	bl	7dc <Print::println(char const*)>
		break;
    1cac:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    1cae:	494f      	ldr	r1, [pc, #316]	; (1dec <print_palette(unsigned char)+0x5e4>)
    1cb0:	4823      	ldr	r0, [pc, #140]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cb2:	f7fe fd93 	bl	7dc <Print::println(char const*)>
		break;
    1cb6:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    1cb8:	494d      	ldr	r1, [pc, #308]	; (1df0 <print_palette(unsigned char)+0x5e8>)
    1cba:	4821      	ldr	r0, [pc, #132]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cbc:	f7fe fd8e 	bl	7dc <Print::println(char const*)>
		break;
    1cc0:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    1cc2:	494c      	ldr	r1, [pc, #304]	; (1df4 <print_palette(unsigned char)+0x5ec>)
    1cc4:	481e      	ldr	r0, [pc, #120]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cc6:	f7fe fd89 	bl	7dc <Print::println(char const*)>
		break;
    1cca:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    1ccc:	494a      	ldr	r1, [pc, #296]	; (1df8 <print_palette(unsigned char)+0x5f0>)
    1cce:	481c      	ldr	r0, [pc, #112]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cd0:	f7fe fd84 	bl	7dc <Print::println(char const*)>
		break;
    1cd4:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    1cd6:	4949      	ldr	r1, [pc, #292]	; (1dfc <print_palette(unsigned char)+0x5f4>)
    1cd8:	4819      	ldr	r0, [pc, #100]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cda:	f7fe fd7f 	bl	7dc <Print::println(char const*)>
		break;
    1cde:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    1ce0:	4947      	ldr	r1, [pc, #284]	; (1e00 <print_palette(unsigned char)+0x5f8>)
    1ce2:	4817      	ldr	r0, [pc, #92]	; (1d40 <print_palette(unsigned char)+0x538>)
    1ce4:	f7fe fd7a 	bl	7dc <Print::println(char const*)>
		break;
    1ce8:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    1cea:	4946      	ldr	r1, [pc, #280]	; (1e04 <print_palette(unsigned char)+0x5fc>)
    1cec:	4814      	ldr	r0, [pc, #80]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cee:	f7fe fd75 	bl	7dc <Print::println(char const*)>
		break;
    1cf2:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1cf4:	4944      	ldr	r1, [pc, #272]	; (1e08 <print_palette(unsigned char)+0x600>)
    1cf6:	4812      	ldr	r0, [pc, #72]	; (1d40 <print_palette(unsigned char)+0x538>)
    1cf8:	f7fe fd70 	bl	7dc <Print::println(char const*)>
		break;
    1cfc:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    1cfe:	4943      	ldr	r1, [pc, #268]	; (1e0c <print_palette(unsigned char)+0x604>)
    1d00:	480f      	ldr	r0, [pc, #60]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d02:	f7fe fd6b 	bl	7dc <Print::println(char const*)>
		break;
    1d06:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    1d08:	4941      	ldr	r1, [pc, #260]	; (1e10 <print_palette(unsigned char)+0x608>)
    1d0a:	480d      	ldr	r0, [pc, #52]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d0c:	f7fe fd66 	bl	7dc <Print::println(char const*)>
		break;
    1d10:	bd10      	pop	{r4, pc}
	case 1:
		Serial.println("rgi_15_gp");
		break;

	case 2:
		Serial.println("Analogous_1_gp");
    1d12:	4940      	ldr	r1, [pc, #256]	; (1e14 <print_palette(unsigned char)+0x60c>)
    1d14:	480a      	ldr	r0, [pc, #40]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d16:	f7fe fd61 	bl	7dc <Print::println(char const*)>
		break;
    1d1a:	bd10      	pop	{r4, pc}
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    1d1c:	493e      	ldr	r1, [pc, #248]	; (1e18 <print_palette(unsigned char)+0x610>)
    1d1e:	4808      	ldr	r0, [pc, #32]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d20:	f7fe fd5c 	bl	7dc <Print::println(char const*)>
		break;
    1d24:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    1d26:	493d      	ldr	r1, [pc, #244]	; (1e1c <print_palette(unsigned char)+0x614>)
    1d28:	4805      	ldr	r0, [pc, #20]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d2a:	f7fe fd57 	bl	7dc <Print::println(char const*)>
		break;
    1d2e:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    1d30:	493b      	ldr	r1, [pc, #236]	; (1e20 <print_palette(unsigned char)+0x618>)
    1d32:	4803      	ldr	r0, [pc, #12]	; (1d40 <print_palette(unsigned char)+0x538>)
    1d34:	f7fe fd52 	bl	7dc <Print::println(char const*)>
    1d38:	bd10      	pop	{r4, pc}
    1d3a:	bf00      	nop
    1d3c:	0000c650 	.word	0x0000c650
    1d40:	1fff8764 	.word	0x1fff8764
    1d44:	0000c640 	.word	0x0000c640
    1d48:	0000c634 	.word	0x0000c634
    1d4c:	0000c628 	.word	0x0000c628
    1d50:	0000c61c 	.word	0x0000c61c
    1d54:	0000c608 	.word	0x0000c608
    1d58:	0000c5fc 	.word	0x0000c5fc
    1d5c:	0000c5f0 	.word	0x0000c5f0
    1d60:	0000c5e4 	.word	0x0000c5e4
    1d64:	0000c5cc 	.word	0x0000c5cc
    1d68:	0000c5c4 	.word	0x0000c5c4
    1d6c:	0000c65c 	.word	0x0000c65c
    1d70:	0000c5b8 	.word	0x0000c5b8
    1d74:	0000c5ac 	.word	0x0000c5ac
    1d78:	0000c598 	.word	0x0000c598
    1d7c:	0000c584 	.word	0x0000c584
    1d80:	0000c574 	.word	0x0000c574
    1d84:	0000c568 	.word	0x0000c568
    1d88:	0000c55c 	.word	0x0000c55c
    1d8c:	0000c550 	.word	0x0000c550
    1d90:	0000c544 	.word	0x0000c544
    1d94:	0000c538 	.word	0x0000c538
    1d98:	0000c52c 	.word	0x0000c52c
    1d9c:	0000c520 	.word	0x0000c520
    1da0:	0000c514 	.word	0x0000c514
    1da4:	0000c508 	.word	0x0000c508
    1da8:	0000c4fc 	.word	0x0000c4fc
    1dac:	0000c4f0 	.word	0x0000c4f0
    1db0:	0000c4e0 	.word	0x0000c4e0
    1db4:	0000c4cc 	.word	0x0000c4cc
    1db8:	0000c4b0 	.word	0x0000c4b0
    1dbc:	0000c498 	.word	0x0000c498
    1dc0:	0000c47c 	.word	0x0000c47c
    1dc4:	0000c46c 	.word	0x0000c46c
    1dc8:	0000c45c 	.word	0x0000c45c
    1dcc:	0000c448 	.word	0x0000c448
    1dd0:	0000c438 	.word	0x0000c438
    1dd4:	0000c430 	.word	0x0000c430
    1dd8:	0000c428 	.word	0x0000c428
    1ddc:	0000c410 	.word	0x0000c410
    1de0:	0000c400 	.word	0x0000c400
    1de4:	0000c3f8 	.word	0x0000c3f8
    1de8:	0000c3e8 	.word	0x0000c3e8
    1dec:	0000c3d8 	.word	0x0000c3d8
    1df0:	0000c3c8 	.word	0x0000c3c8
    1df4:	0000c3b4 	.word	0x0000c3b4
    1df8:	0000c3a0 	.word	0x0000c3a0
    1dfc:	0000c38c 	.word	0x0000c38c
    1e00:	0000c374 	.word	0x0000c374
    1e04:	0000c35c 	.word	0x0000c35c
    1e08:	0000c34c 	.word	0x0000c34c
    1e0c:	0000c338 	.word	0x0000c338
    1e10:	0000c324 	.word	0x0000c324
    1e14:	0000c314 	.word	0x0000c314
    1e18:	0000c308 	.word	0x0000c308
    1e1c:	0000c2fc 	.word	0x0000c2fc
    1e20:	0000c8a4 	.word	0x0000c8a4

00001e24 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    1e24:	b510      	push	{r4, lr}
    1e26:	2100      	movs	r1, #0
    1e28:	4604      	mov	r4, r0
    1e2a:	489f      	ldr	r0, [pc, #636]	; (20a8 <LEDDebug(LEDStruct&)+0x284>)
    1e2c:	f008 fbea 	bl	a604 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1e30:	489e      	ldr	r0, [pc, #632]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e32:	f008 fdeb 	bl	aa0c <Print::println()>
    1e36:	2132      	movs	r1, #50	; 0x32
    1e38:	489d      	ldr	r0, [pc, #628]	; (20b0 <LEDDebug(LEDStruct&)+0x28c>)
    1e3a:	f008 fbe3 	bl	a604 <usb_serial_write>
    1e3e:	489b      	ldr	r0, [pc, #620]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e40:	f008 fde4 	bl	aa0c <Print::println()>
    1e44:	2112      	movs	r1, #18
    1e46:	489b      	ldr	r0, [pc, #620]	; (20b4 <LEDDebug(LEDStruct&)+0x290>)
    1e48:	f008 fbdc 	bl	a604 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    1e4c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    1e50:	2b00      	cmp	r3, #0
    1e52:	f000 8082 	beq.w	1f5a <LEDDebug(LEDStruct&)+0x136>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1e56:	2b01      	cmp	r3, #1
    1e58:	f000 839f 	beq.w	259a <LEDDebug(LEDStruct&)+0x776>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1e5c:	2b02      	cmp	r3, #2
    1e5e:	f000 83a1 	beq.w	25a4 <LEDDebug(LEDStruct&)+0x780>
    1e62:	2112      	movs	r1, #18
    1e64:	4894      	ldr	r0, [pc, #592]	; (20b8 <LEDDebug(LEDStruct&)+0x294>)
    1e66:	f008 fbcd 	bl	a604 <usb_serial_write>

	// Print Standard Variables
	Serial.print("Brightness:       ");
	Serial.println(max_bright);
    1e6a:	4b94      	ldr	r3, [pc, #592]	; (20bc <LEDDebug(LEDStruct&)+0x298>)
    1e6c:	488f      	ldr	r0, [pc, #572]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e6e:	7819      	ldrb	r1, [r3, #0]
    1e70:	f7fe fcc6 	bl	800 <Print::println(unsigned char)>
    1e74:	2112      	movs	r1, #18
    1e76:	4892      	ldr	r0, [pc, #584]	; (20c0 <LEDDebug(LEDStruct&)+0x29c>)
    1e78:	f008 fbc4 	bl	a604 <usb_serial_write>
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
    1e7c:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1e80:	488a      	ldr	r0, [pc, #552]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e82:	f7fe fcbd 	bl	800 <Print::println(unsigned char)>
    1e86:	2112      	movs	r1, #18
    1e88:	488e      	ldr	r0, [pc, #568]	; (20c4 <LEDDebug(LEDStruct&)+0x2a0>)
    1e8a:	f008 fbbb 	bl	a604 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1e8e:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    1e92:	4886      	ldr	r0, [pc, #536]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e94:	f008 fe0a 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1e98:	4884      	ldr	r0, [pc, #528]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1e9a:	f008 fdb7 	bl	aa0c <Print::println()>
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1e9e:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d154      	bne.n	1f50 <LEDDebug(LEDStruct&)+0x12c>
    1ea6:	2112      	movs	r1, #18
    1ea8:	4887      	ldr	r0, [pc, #540]	; (20c8 <LEDDebug(LEDStruct&)+0x2a4>)
    1eaa:	f008 fbab 	bl	a604 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1eae:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1eb2:	487e      	ldr	r0, [pc, #504]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1eb4:	f008 fdfa 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1eb8:	487c      	ldr	r0, [pc, #496]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1eba:	f008 fda7 	bl	aa0c <Print::println()>
    1ebe:	2112      	movs	r1, #18
    1ec0:	4882      	ldr	r0, [pc, #520]	; (20cc <LEDDebug(LEDStruct&)+0x2a8>)
    1ec2:	f008 fb9f 	bl	a604 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1ec6:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    1eca:	4878      	ldr	r0, [pc, #480]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ecc:	f008 fdee 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1ed0:	4876      	ldr	r0, [pc, #472]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ed2:	f008 fd9b 	bl	aa0c <Print::println()>
    1ed6:	2112      	movs	r1, #18
    1ed8:	487d      	ldr	r0, [pc, #500]	; (20d0 <LEDDebug(LEDStruct&)+0x2ac>)
    1eda:	f008 fb93 	bl	a604 <usb_serial_write>
	Serial.print("use_full_range:   ");
	Serial.println(leds.use_full_range);
	Serial.print("this_dir:         ");
	Serial.println(leds.this_dir);
	Serial.print("mode_number:      ");
	Serial.println(leds.mode_number);
    1ede:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    1ee2:	4872      	ldr	r0, [pc, #456]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ee4:	f7fe fc8c 	bl	800 <Print::println(unsigned char)>
    1ee8:	2112      	movs	r1, #18
    1eea:	487a      	ldr	r0, [pc, #488]	; (20d4 <LEDDebug(LEDStruct&)+0x2b0>)
    1eec:	f008 fb8a 	bl	a604 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1ef0:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1ef4:	486d      	ldr	r0, [pc, #436]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ef6:	f008 fdd9 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1efa:	486c      	ldr	r0, [pc, #432]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1efc:	f008 fd86 	bl	aa0c <Print::println()>
    1f00:	2119      	movs	r1, #25
    1f02:	4875      	ldr	r0, [pc, #468]	; (20d8 <LEDDebug(LEDStruct&)+0x2b4>)
    1f04:	f008 fb7e 	bl	a604 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f08:	4868      	ldr	r0, [pc, #416]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f0a:	f008 fd7f 	bl	aa0c <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    1f0e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    1f12:	2b19      	cmp	r3, #25
    1f14:	f200 8334 	bhi.w	2580 <LEDDebug(LEDStruct&)+0x75c>
    1f18:	e8df f013 	tbh	[pc, r3, lsl #1]
    1f1c:	0332004a 	.word	0x0332004a
    1f20:	03320332 	.word	0x03320332
    1f24:	00a00332 	.word	0x00a00332
    1f28:	03320332 	.word	0x03320332
    1f2c:	03320102 	.word	0x03320102
    1f30:	03320332 	.word	0x03320332
    1f34:	03320332 	.word	0x03320332
    1f38:	01410332 	.word	0x01410332
    1f3c:	014b0146 	.word	0x014b0146
    1f40:	015e0150 	.word	0x015e0150
    1f44:	021301ab 	.word	0x021301ab
    1f48:	02d702a2 	.word	0x02d702a2
    1f4c:	002402f4 	.word	0x002402f4
	Serial.println(max_bright);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1f50:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    1f54:	f7ff fc58 	bl	1808 <print_palette(unsigned char)>
    1f58:	e7a5      	b.n	1ea6 <LEDDebug(LEDStruct&)+0x82>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    1f5a:	4960      	ldr	r1, [pc, #384]	; (20dc <LEDDebug(LEDStruct&)+0x2b8>)
    1f5c:	4853      	ldr	r0, [pc, #332]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f5e:	f7fe fc3d 	bl	7dc <Print::println(char const*)>
    1f62:	e77e      	b.n	1e62 <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("bounce_rainbow:    ");
			Serial.println(leds.bounce_rainbow);
			break;

		case BOUNCING_BALLS:
			Serial.println("=====BOUNCING BALLS=====");
    1f64:	495e      	ldr	r1, [pc, #376]	; (20e0 <LEDDebug(LEDStruct&)+0x2bc>)
    1f66:	4851      	ldr	r0, [pc, #324]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f68:	f7fe fc38 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1f6c:	495d      	ldr	r1, [pc, #372]	; (20e4 <LEDDebug(LEDStruct&)+0x2c0>)
    1f6e:	484f      	ldr	r0, [pc, #316]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f70:	f7fe fc26 	bl	7c0 <Print::write(char const*)>
			Serial.print("fade:\t\t");
			Serial.println(leds.bouncing_fade);
    1f74:	f894 1766 	ldrb.w	r1, [r4, #1894]	; 0x766
    1f78:	484c      	ldr	r0, [pc, #304]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f7a:	f7fe fc41 	bl	800 <Print::println(unsigned char)>
    1f7e:	495a      	ldr	r1, [pc, #360]	; (20e8 <LEDDebug(LEDStruct&)+0x2c4>)
    1f80:	484a      	ldr	r0, [pc, #296]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f82:	f7fe fc1d 	bl	7c0 <Print::write(char const*)>
			Serial.print("number of balls: ");
			Serial.println(leds.number_of_balls);
    1f86:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    1f8a:	4848      	ldr	r0, [pc, #288]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f8c:	f7fe fc38 	bl	800 <Print::println(unsigned char)>
    1f90:	2119      	movs	r1, #25
    1f92:	4851      	ldr	r0, [pc, #324]	; (20d8 <LEDDebug(LEDStruct&)+0x2b4>)
    1f94:	f008 fb36 	bl	a604 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1f98:	4844      	ldr	r0, [pc, #272]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1f9a:	f008 fd37 	bl	aa0c <Print::println()>
    1f9e:	2100      	movs	r1, #0
    1fa0:	4841      	ldr	r0, [pc, #260]	; (20a8 <LEDDebug(LEDStruct&)+0x284>)
    1fa2:	f008 fb2f 	bl	a604 <usb_serial_write>
    1fa6:	4841      	ldr	r0, [pc, #260]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    1fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fac:	f008 bd2e 	b.w	aa0c <Print::println()>
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("===JUGGLE VARIABLES===");
    1fb0:	494e      	ldr	r1, [pc, #312]	; (20ec <LEDDebug(LEDStruct&)+0x2c8>)
    1fb2:	483e      	ldr	r0, [pc, #248]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fb4:	f7fe fc12 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1fb8:	494d      	ldr	r1, [pc, #308]	; (20f0 <LEDDebug(LEDStruct&)+0x2cc>)
    1fba:	483c      	ldr	r0, [pc, #240]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fbc:	f7fe fc00 	bl	7c0 <Print::write(char const*)>
			Serial.print("index:         ");
			Serial.println(leds.juggle_index);
    1fc0:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    1fc4:	4839      	ldr	r0, [pc, #228]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fc6:	f7fe fc1b 	bl	800 <Print::println(unsigned char)>
    1fca:	494a      	ldr	r1, [pc, #296]	; (20f4 <LEDDebug(LEDStruct&)+0x2d0>)
    1fcc:	4837      	ldr	r0, [pc, #220]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fce:	f7fe fbf7 	bl	7c0 <Print::write(char const*)>
			Serial.print("numdots:       ");
			Serial.println(leds.juggle_numdots);
    1fd2:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    1fd6:	4835      	ldr	r0, [pc, #212]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fd8:	f7fe fc12 	bl	800 <Print::println(unsigned char)>
    1fdc:	4946      	ldr	r1, [pc, #280]	; (20f8 <LEDDebug(LEDStruct&)+0x2d4>)
    1fde:	4833      	ldr	r0, [pc, #204]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fe0:	f7fe fbee 	bl	7c0 <Print::write(char const*)>
			Serial.print("beat:          ");
			Serial.println(leds.juggle_beat);
    1fe4:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1fe8:	4830      	ldr	r0, [pc, #192]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1fea:	f7fe fc09 	bl	800 <Print::println(unsigned char)>
    1fee:	4943      	ldr	r1, [pc, #268]	; (20fc <LEDDebug(LEDStruct&)+0x2d8>)
    1ff0:	482e      	ldr	r0, [pc, #184]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ff2:	f7fe fbe5 	bl	7c0 <Print::write(char const*)>
			Serial.print("fade:          ");
			Serial.println(leds.juggle_fade);
    1ff6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    1ffa:	482c      	ldr	r0, [pc, #176]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    1ffc:	f7fe fc00 	bl	800 <Print::println(unsigned char)>
    2000:	493f      	ldr	r1, [pc, #252]	; (2100 <LEDDebug(LEDStruct&)+0x2dc>)
    2002:	482a      	ldr	r0, [pc, #168]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2004:	f7fe fbdc 	bl	7c0 <Print::write(char const*)>
			Serial.print("diff:          ");
			Serial.println(leds.juggle_diff);
    2008:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    200c:	4827      	ldr	r0, [pc, #156]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    200e:	f7fe fbf7 	bl	800 <Print::println(unsigned char)>
    2012:	493c      	ldr	r1, [pc, #240]	; (2104 <LEDDebug(LEDStruct&)+0x2e0>)
    2014:	4825      	ldr	r0, [pc, #148]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2016:	f7fe fbd3 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    201a:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    201e:	4823      	ldr	r0, [pc, #140]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2020:	f008 fd44 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2024:	4821      	ldr	r0, [pc, #132]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2026:	f008 fcf1 	bl	aa0c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    202a:	4937      	ldr	r1, [pc, #220]	; (2108 <LEDDebug(LEDStruct&)+0x2e4>)
    202c:	481f      	ldr	r0, [pc, #124]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    202e:	f7fe fbc7 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2032:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2036:	481d      	ldr	r0, [pc, #116]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2038:	f008 fd38 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    203c:	481b      	ldr	r0, [pc, #108]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    203e:	f008 fce5 	bl	aa0c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2042:	4932      	ldr	r1, [pc, #200]	; (210c <LEDDebug(LEDStruct&)+0x2e8>)
    2044:	4819      	ldr	r0, [pc, #100]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2046:	f7fe fbbb 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    204a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    204e:	4817      	ldr	r0, [pc, #92]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2050:	f008 fd2c 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2054:	4815      	ldr	r0, [pc, #84]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2056:	f008 fcd9 	bl	aa0c <Print::println()>
    205a:	e799      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    205c:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    2060:	2b00      	cmp	r3, #0
    2062:	f000 82a4 	beq.w	25ae <LEDDebug(LEDStruct&)+0x78a>
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
    2066:	492a      	ldr	r1, [pc, #168]	; (2110 <LEDDebug(LEDStruct&)+0x2ec>)
    2068:	4810      	ldr	r0, [pc, #64]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    206a:	f7fe fbb7 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    206e:	4929      	ldr	r1, [pc, #164]	; (2114 <LEDDebug(LEDStruct&)+0x2f0>)
    2070:	480e      	ldr	r0, [pc, #56]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2072:	f7fe fba5 	bl	7c0 <Print::write(char const*)>
			Serial.print("index:     ");
			Serial.println(leds.rainbow_index);
    2076:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    207a:	480c      	ldr	r0, [pc, #48]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    207c:	f7fe fbc0 	bl	800 <Print::println(unsigned char)>
    2080:	4925      	ldr	r1, [pc, #148]	; (2118 <LEDDebug(LEDStruct&)+0x2f4>)
    2082:	480a      	ldr	r0, [pc, #40]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2084:	f7fe fb9c 	bl	7c0 <Print::write(char const*)>
			Serial.print("diff:      ");
			Serial.println(leds.rainbow_diff);
    2088:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    208c:	4807      	ldr	r0, [pc, #28]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    208e:	f7fe fbb7 	bl	800 <Print::println(unsigned char)>
    2092:	4922      	ldr	r1, [pc, #136]	; (211c <LEDDebug(LEDStruct&)+0x2f8>)
    2094:	4805      	ldr	r0, [pc, #20]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    2096:	f7fe fb93 	bl	7c0 <Print::write(char const*)>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
    209a:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    209e:	4803      	ldr	r0, [pc, #12]	; (20ac <LEDDebug(LEDStruct&)+0x288>)
    20a0:	f7fe fbae 	bl	800 <Print::println(unsigned char)>
			break;
    20a4:	e774      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
    20a6:	bf00      	nop
    20a8:	0000cef4 	.word	0x0000cef4
    20ac:	1fff8764 	.word	0x1fff8764
    20b0:	0000c8bc 	.word	0x0000c8bc
    20b4:	0000c8f0 	.word	0x0000c8f0
    20b8:	0000c91c 	.word	0x0000c91c
    20bc:	1fff9fd6 	.word	0x1fff9fd6
    20c0:	0000c930 	.word	0x0000c930
    20c4:	0000c944 	.word	0x0000c944
    20c8:	0000c958 	.word	0x0000c958
    20cc:	0000c96c 	.word	0x0000c96c
    20d0:	0000c980 	.word	0x0000c980
    20d4:	0000c994 	.word	0x0000c994
    20d8:	0000c9a8 	.word	0x0000c9a8
    20dc:	0000c904 	.word	0x0000c904
    20e0:	0000ce48 	.word	0x0000ce48
    20e4:	0000ce64 	.word	0x0000ce64
    20e8:	0000ce6c 	.word	0x0000ce6c
    20ec:	0000c9c4 	.word	0x0000c9c4
    20f0:	0000c9dc 	.word	0x0000c9dc
    20f4:	0000c9ec 	.word	0x0000c9ec
    20f8:	0000c9fc 	.word	0x0000c9fc
    20fc:	0000ca0c 	.word	0x0000ca0c
    2100:	0000ca1c 	.word	0x0000ca1c
    2104:	0000ca2c 	.word	0x0000ca2c
    2108:	0000ca3c 	.word	0x0000ca3c
    210c:	0000ca4c 	.word	0x0000ca4c
    2110:	0000ca70 	.word	0x0000ca70
    2114:	0000ca8c 	.word	0x0000ca8c
    2118:	0000ce14 	.word	0x0000ce14
    211c:	0000cc50 	.word	0x0000cc50

		case FIRE:
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { Serial.print("=====TORCH"); }
    2120:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2124:	48a9      	ldr	r0, [pc, #676]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2126:	3b0d      	subs	r3, #13
    2128:	2b01      	cmp	r3, #1
    212a:	bf94      	ite	ls
    212c:	49a8      	ldrls	r1, [pc, #672]	; (23d0 <LEDDebug(LEDStruct&)+0x5ac>)
    212e:	49a9      	ldrhi	r1, [pc, #676]	; (23d4 <LEDDebug(LEDStruct&)+0x5b0>)
    2130:	f7fe fb46 	bl	7c0 <Print::write(char const*)>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    2134:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    2138:	2b00      	cmp	r3, #0
    213a:	f040 8255 	bne.w	25e8 <LEDDebug(LEDStruct&)+0x7c4>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    213e:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    2142:	2b00      	cmp	r3, #0
    2144:	f040 8238 	bne.w	25b8 <LEDDebug(LEDStruct&)+0x794>
			Serial.println("=====");
    2148:	49a3      	ldr	r1, [pc, #652]	; (23d8 <LEDDebug(LEDStruct&)+0x5b4>)
    214a:	48a0      	ldr	r0, [pc, #640]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    214c:	f7fe fb46 	bl	7dc <Print::println(char const*)>
    2150:	49a2      	ldr	r1, [pc, #648]	; (23dc <LEDDebug(LEDStruct&)+0x5b8>)
    2152:	489e      	ldr	r0, [pc, #632]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2154:	f7fe fb34 	bl	7c0 <Print::write(char const*)>
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
    2158:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    215c:	489b      	ldr	r0, [pc, #620]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    215e:	f7fe fb4f 	bl	800 <Print::println(unsigned char)>
    2162:	499f      	ldr	r1, [pc, #636]	; (23e0 <LEDDebug(LEDStruct&)+0x5bc>)
    2164:	4899      	ldr	r0, [pc, #612]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2166:	f7fe fb2b 	bl	7c0 <Print::write(char const*)>
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
    216a:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    216e:	4897      	ldr	r0, [pc, #604]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2170:	f7fe fb46 	bl	800 <Print::println(unsigned char)>
			if (!leds.fire_sync) {
    2174:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    2178:	2b00      	cmp	r3, #0
    217a:	f000 8222 	beq.w	25c2 <LEDDebug(LEDStruct&)+0x79e>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    217e:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2182:	3b0d      	subs	r3, #13
    2184:	2b01      	cmp	r3, #1
    2186:	f63f af03 	bhi.w	1f90 <LEDDebug(LEDStruct&)+0x16c>
    218a:	4996      	ldr	r1, [pc, #600]	; (23e4 <LEDDebug(LEDStruct&)+0x5c0>)
    218c:	488f      	ldr	r0, [pc, #572]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    218e:	f7fe fb17 	bl	7c0 <Print::write(char const*)>
				Serial.print("torch_diff:  ");
				Serial.println(leds.torch_diff);
    2192:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    2196:	488d      	ldr	r0, [pc, #564]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2198:	f7fe fb32 	bl	800 <Print::println(unsigned char)>
    219c:	e6f8      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			}
			break;
		
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
    219e:	4992      	ldr	r1, [pc, #584]	; (23e8 <LEDDebug(LEDStruct&)+0x5c4>)
    21a0:	488a      	ldr	r0, [pc, #552]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21a2:	f7fe fb1b 	bl	7dc <Print::println(char const*)>
			break;
    21a6:	e6f3      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>

		case PRIDE:
			Serial.println("=====PRIDE=====");
    21a8:	4990      	ldr	r1, [pc, #576]	; (23ec <LEDDebug(LEDStruct&)+0x5c8>)
    21aa:	4888      	ldr	r0, [pc, #544]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21ac:	f7fe fb16 	bl	7dc <Print::println(char const*)>
			break;
    21b0:	e6ee      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>

		case PACIFICA:
			Serial.println("=====PACIFCIA=====");
    21b2:	498f      	ldr	r1, [pc, #572]	; (23f0 <LEDDebug(LEDStruct&)+0x5cc>)
    21b4:	4885      	ldr	r0, [pc, #532]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21b6:	f7fe fb11 	bl	7dc <Print::println(char const*)>
			break;
    21ba:	e6e9      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>

		case CONFETTI:
			Serial.println("=====CONFETTI=====");
    21bc:	498d      	ldr	r1, [pc, #564]	; (23f4 <LEDDebug(LEDStruct&)+0x5d0>)
    21be:	4883      	ldr	r0, [pc, #524]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21c0:	f7fe fb0c 	bl	7dc <Print::println(char const*)>
    21c4:	498c      	ldr	r1, [pc, #560]	; (23f8 <LEDDebug(LEDStruct&)+0x5d4>)
    21c6:	4881      	ldr	r0, [pc, #516]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21c8:	f7fe fafa 	bl	7c0 <Print::write(char const*)>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
    21cc:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    21d0:	487e      	ldr	r0, [pc, #504]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21d2:	f7fe fb15 	bl	800 <Print::println(unsigned char)>
			break;
    21d6:	e6db      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			Serial.print("Next explosion time: ");
			Serial.println(leds.next_explosion_time);
			break;

		case ONE_SIN:
			Serial.println("=====ONE_SIN=====");
    21d8:	4988      	ldr	r1, [pc, #544]	; (23fc <LEDDebug(LEDStruct&)+0x5d8>)
    21da:	487c      	ldr	r0, [pc, #496]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21dc:	f7fe fafe 	bl	7dc <Print::println(char const*)>
    21e0:	4987      	ldr	r1, [pc, #540]	; (2400 <LEDDebug(LEDStruct&)+0x5dc>)
    21e2:	487a      	ldr	r0, [pc, #488]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21e4:	f7fe faec 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_inc:       ");
			Serial.println(leds.sin_inc);
    21e8:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    21ec:	4877      	ldr	r0, [pc, #476]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21ee:	f7fe fb07 	bl	800 <Print::println(unsigned char)>
    21f2:	4984      	ldr	r1, [pc, #528]	; (2404 <LEDDebug(LEDStruct&)+0x5e0>)
    21f4:	4875      	ldr	r0, [pc, #468]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    21f6:	f7fe fae3 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    21fa:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    21fe:	4873      	ldr	r0, [pc, #460]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2200:	f7fe fafe 	bl	800 <Print::println(unsigned char)>
    2204:	4980      	ldr	r1, [pc, #512]	; (2408 <LEDDebug(LEDStruct&)+0x5e4>)
    2206:	4871      	ldr	r0, [pc, #452]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2208:	f7fe fada 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    220c:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2210:	486e      	ldr	r0, [pc, #440]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2212:	f7fe faf5 	bl	800 <Print::println(unsigned char)>
    2216:	497d      	ldr	r1, [pc, #500]	; (240c <LEDDebug(LEDStruct&)+0x5e8>)
    2218:	486c      	ldr	r0, [pc, #432]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    221a:	f7fe fad1 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    221e:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2222:	486a      	ldr	r0, [pc, #424]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2224:	f7fe faec 	bl	800 <Print::println(unsigned char)>
    2228:	4979      	ldr	r1, [pc, #484]	; (2410 <LEDDebug(LEDStruct&)+0x5ec>)
    222a:	4868      	ldr	r0, [pc, #416]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    222c:	f7fe fac8 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    2230:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2234:	4865      	ldr	r0, [pc, #404]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2236:	f7fe fae3 	bl	800 <Print::println(unsigned char)>
    223a:	4976      	ldr	r1, [pc, #472]	; (2414 <LEDDebug(LEDStruct&)+0x5f0>)
    223c:	4863      	ldr	r0, [pc, #396]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    223e:	f7fe fabf 	bl	7c0 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    2242:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2246:	4861      	ldr	r0, [pc, #388]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2248:	f7fe fada 	bl	800 <Print::println(unsigned char)>
    224c:	4972      	ldr	r1, [pc, #456]	; (2418 <LEDDebug(LEDStruct&)+0x5f4>)
    224e:	485f      	ldr	r0, [pc, #380]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2250:	f7fe fab6 	bl	7c0 <Print::write(char const*)>
			Serial.print("bg_clr:        ");
			Serial.println(leds.bg_clr);
    2254:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2258:	485c      	ldr	r0, [pc, #368]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    225a:	f7fe fad1 	bl	800 <Print::println(unsigned char)>
    225e:	496f      	ldr	r1, [pc, #444]	; (241c <LEDDebug(LEDStruct&)+0x5f8>)
    2260:	485a      	ldr	r0, [pc, #360]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2262:	f7fe faad 	bl	7c0 <Print::write(char const*)>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
    2266:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    226a:	4858      	ldr	r0, [pc, #352]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    226c:	f7fe fac8 	bl	800 <Print::println(unsigned char)>
			break;
    2270:	e68e      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>

		case TWO_SIN:
			Serial.println("=====TWO_SIN=====");
    2272:	496b      	ldr	r1, [pc, #428]	; (2420 <LEDDebug(LEDStruct&)+0x5fc>)
    2274:	4855      	ldr	r0, [pc, #340]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2276:	f7fe fab1 	bl	7dc <Print::println(char const*)>
    227a:	496a      	ldr	r1, [pc, #424]	; (2424 <LEDDebug(LEDStruct&)+0x600>)
    227c:	4853      	ldr	r0, [pc, #332]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    227e:	f7fe fa9f 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_hue:       ");
			Serial.println(leds.sin_inc);
    2282:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2286:	4851      	ldr	r0, [pc, #324]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2288:	f7fe faba 	bl	800 <Print::println(unsigned char)>
    228c:	495d      	ldr	r1, [pc, #372]	; (2404 <LEDDebug(LEDStruct&)+0x5e0>)
    228e:	484f      	ldr	r0, [pc, #316]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2290:	f7fe fa96 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    2294:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2298:	484c      	ldr	r0, [pc, #304]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    229a:	f7fe fab1 	bl	800 <Print::println(unsigned char)>
    229e:	495a      	ldr	r1, [pc, #360]	; (2408 <LEDDebug(LEDStruct&)+0x5e4>)
    22a0:	484a      	ldr	r0, [pc, #296]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22a2:	f7fe fa8d 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    22a6:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    22aa:	4848      	ldr	r0, [pc, #288]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22ac:	f7fe faa8 	bl	800 <Print::println(unsigned char)>
    22b0:	4956      	ldr	r1, [pc, #344]	; (240c <LEDDebug(LEDStruct&)+0x5e8>)
    22b2:	4846      	ldr	r0, [pc, #280]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22b4:	f7fe fa84 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    22b8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    22bc:	4843      	ldr	r0, [pc, #268]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22be:	f7fe fa9f 	bl	800 <Print::println(unsigned char)>
    22c2:	4953      	ldr	r1, [pc, #332]	; (2410 <LEDDebug(LEDStruct&)+0x5ec>)
    22c4:	4841      	ldr	r0, [pc, #260]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22c6:	f7fe fa7b 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    22ca:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    22ce:	483f      	ldr	r0, [pc, #252]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22d0:	f7fe fa96 	bl	800 <Print::println(unsigned char)>
    22d4:	4954      	ldr	r1, [pc, #336]	; (2428 <LEDDebug(LEDStruct&)+0x604>)
    22d6:	483d      	ldr	r0, [pc, #244]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22d8:	f7fe fa72 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_hue:       ");
			Serial.println(leds.two_hue);
    22dc:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    22e0:	483a      	ldr	r0, [pc, #232]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22e2:	f7fe fa8d 	bl	800 <Print::println(unsigned char)>
    22e6:	4951      	ldr	r1, [pc, #324]	; (242c <LEDDebug(LEDStruct&)+0x608>)
    22e8:	4838      	ldr	r0, [pc, #224]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22ea:	f7fe fa69 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_speed:     ");
			Serial.println(leds.two_speed);
    22ee:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    22f2:	4836      	ldr	r0, [pc, #216]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22f4:	f7fe fa84 	bl	800 <Print::println(unsigned char)>
    22f8:	494d      	ldr	r1, [pc, #308]	; (2430 <LEDDebug(LEDStruct&)+0x60c>)
    22fa:	4834      	ldr	r0, [pc, #208]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    22fc:	f7fe fa60 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_cutoff:    ");
			Serial.println(leds.two_cutoff);
    2300:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2304:	4831      	ldr	r0, [pc, #196]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2306:	f7fe fa7b 	bl	800 <Print::println(unsigned char)>
    230a:	494a      	ldr	r1, [pc, #296]	; (2434 <LEDDebug(LEDStruct&)+0x610>)
    230c:	482f      	ldr	r0, [pc, #188]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    230e:	f7fe fa57 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_rot:       ");
			Serial.println(leds.two_rot);
    2312:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2316:	482d      	ldr	r0, [pc, #180]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2318:	f7fe fa72 	bl	800 <Print::println(unsigned char)>
    231c:	4946      	ldr	r1, [pc, #280]	; (2438 <LEDDebug(LEDStruct&)+0x614>)
    231e:	482b      	ldr	r0, [pc, #172]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2320:	f7fe fa4e 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_phase:     ");
			Serial.println(leds.two_phase);
    2324:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2328:	4828      	ldr	r0, [pc, #160]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    232a:	f7fe fa69 	bl	800 <Print::println(unsigned char)>
    232e:	4939      	ldr	r1, [pc, #228]	; (2414 <LEDDebug(LEDStruct&)+0x5f0>)
    2330:	4826      	ldr	r0, [pc, #152]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2332:	f7fe fa45 	bl	7c0 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    2336:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    233a:	4824      	ldr	r0, [pc, #144]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    233c:	f7fe fa60 	bl	800 <Print::println(unsigned char)>
			break;
    2340:	e626      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
			break;

		case FIREWORKS:
			Serial.println("=====FIREWORKS=====");
    2342:	493e      	ldr	r1, [pc, #248]	; (243c <LEDDebug(LEDStruct&)+0x618>)
    2344:	4821      	ldr	r0, [pc, #132]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2346:	f7fe fa49 	bl	7dc <Print::println(char const*)>
    234a:	493d      	ldr	r1, [pc, #244]	; (2440 <LEDDebug(LEDStruct&)+0x61c>)
    234c:	481f      	ldr	r0, [pc, #124]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    234e:	f7fe fa37 	bl	7c0 <Print::write(char const*)>
			Serial.print("firework_position:   ");
			Serial.println(leds.firework_position);
    2352:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2356:	481d      	ldr	r0, [pc, #116]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2358:	f7fe fa52 	bl	800 <Print::println(unsigned char)>
    235c:	4939      	ldr	r1, [pc, #228]	; (2444 <LEDDebug(LEDStruct&)+0x620>)
    235e:	481b      	ldr	r0, [pc, #108]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2360:	f7fe fa2e 	bl	7c0 <Print::write(char const*)>
			Serial.print("Current Stage:  ");
			switch (leds.current_stage) {
    2364:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2368:	2b01      	cmp	r3, #1
    236a:	d00a      	beq.n	2382 <LEDDebug(LEDStruct&)+0x55e>
    236c:	d305      	bcc.n	237a <LEDDebug(LEDStruct&)+0x556>
    236e:	2b02      	cmp	r3, #2
    2370:	d10b      	bne.n	238a <LEDDebug(LEDStruct&)+0x566>
			case WAITING: Serial.println("WAITING");
    2372:	4935      	ldr	r1, [pc, #212]	; (2448 <LEDDebug(LEDStruct&)+0x624>)
    2374:	4815      	ldr	r0, [pc, #84]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2376:	f7fe fa31 	bl	7dc <Print::println(char const*)>
			case FADEUP: Serial.println("FADEUP");
    237a:	4934      	ldr	r1, [pc, #208]	; (244c <LEDDebug(LEDStruct&)+0x628>)
    237c:	4813      	ldr	r0, [pc, #76]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    237e:	f7fe fa2d 	bl	7dc <Print::println(char const*)>
			case EXPLOSION: Serial.println("EXPLOSION");
    2382:	4933      	ldr	r1, [pc, #204]	; (2450 <LEDDebug(LEDStruct&)+0x62c>)
    2384:	4811      	ldr	r0, [pc, #68]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2386:	f7fe fa29 	bl	7dc <Print::println(char const*)>
    238a:	4932      	ldr	r1, [pc, #200]	; (2454 <LEDDebug(LEDStruct&)+0x630>)
    238c:	480f      	ldr	r0, [pc, #60]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    238e:	f7fe fa17 	bl	7c0 <Print::write(char const*)>
			}
			Serial.print("Number of sparks:  ");
			Serial.println(leds.number_of_sparks);
    2392:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2396:	480d      	ldr	r0, [pc, #52]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    2398:	f7fe fa32 	bl	800 <Print::println(unsigned char)>
    239c:	492e      	ldr	r1, [pc, #184]	; (2458 <LEDDebug(LEDStruct&)+0x634>)
    239e:	480b      	ldr	r0, [pc, #44]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    23a0:	f7fe fa0e 	bl	7c0 <Print::write(char const*)>
			Serial.print("Brightest spark:   ");
			Serial.println(leds.brightest_spark);
    23a4:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    23a8:	4808      	ldr	r0, [pc, #32]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    23aa:	f7fe fa29 	bl	800 <Print::println(unsigned char)>
    23ae:	492b      	ldr	r1, [pc, #172]	; (245c <LEDDebug(LEDStruct&)+0x638>)
    23b0:	4806      	ldr	r0, [pc, #24]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    23b2:	f7fe fa05 	bl	7c0 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    23b6:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    23ba:	4804      	ldr	r0, [pc, #16]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    23bc:	2300      	movs	r3, #0
    23be:	220a      	movs	r2, #10
    23c0:	f008 fb34 	bl	aa2c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    23c4:	4801      	ldr	r0, [pc, #4]	; (23cc <LEDDebug(LEDStruct&)+0x5a8>)
    23c6:	f008 fb21 	bl	aa0c <Print::println()>
    23ca:	e5e1      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
    23cc:	1fff8764 	.word	0x1fff8764
    23d0:	0000ca98 	.word	0x0000ca98
    23d4:	0000caa4 	.word	0x0000caa4
    23d8:	0000c9bc 	.word	0x0000c9bc
    23dc:	0000cac0 	.word	0x0000cac0
    23e0:	0000cad0 	.word	0x0000cad0
    23e4:	0000cb00 	.word	0x0000cb00
    23e8:	0000cb10 	.word	0x0000cb10
    23ec:	0000cb24 	.word	0x0000cb24
    23f0:	0000cb34 	.word	0x0000cb34
    23f4:	0000cb48 	.word	0x0000cb48
    23f8:	0000cb5c 	.word	0x0000cb5c
    23fc:	0000cc08 	.word	0x0000cc08
    2400:	0000cc1c 	.word	0x0000cc1c
    2404:	0000cc2c 	.word	0x0000cc2c
    2408:	0000cc3c 	.word	0x0000cc3c
    240c:	0000cc4c 	.word	0x0000cc4c
    2410:	0000cc5c 	.word	0x0000cc5c
    2414:	0000cc6c 	.word	0x0000cc6c
    2418:	0000cc7c 	.word	0x0000cc7c
    241c:	0000cc8c 	.word	0x0000cc8c
    2420:	0000cc9c 	.word	0x0000cc9c
    2424:	0000ccb0 	.word	0x0000ccb0
    2428:	0000ccc0 	.word	0x0000ccc0
    242c:	0000ccd0 	.word	0x0000ccd0
    2430:	0000cce0 	.word	0x0000cce0
    2434:	0000ccf0 	.word	0x0000ccf0
    2438:	0000cd00 	.word	0x0000cd00
    243c:	0000cb6c 	.word	0x0000cb6c
    2440:	0000cb80 	.word	0x0000cb80
    2444:	0000cb98 	.word	0x0000cb98
    2448:	0000cbac 	.word	0x0000cbac
    244c:	0000cbb4 	.word	0x0000cbb4
    2450:	0000cbbc 	.word	0x0000cbbc
    2454:	0000cbc8 	.word	0x0000cbc8
    2458:	0000cbdc 	.word	0x0000cbdc
    245c:	0000cbf0 	.word	0x0000cbf0
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
			break;

		case SHOOTING_POLE:
			Serial.println("=====SHOOTING POLE=====");
    2460:	4964      	ldr	r1, [pc, #400]	; (25f4 <LEDDebug(LEDStruct&)+0x7d0>)
    2462:	4865      	ldr	r0, [pc, #404]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2464:	f7fe f9ba 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2468:	4964      	ldr	r1, [pc, #400]	; (25fc <LEDDebug(LEDStruct&)+0x7d8>)
    246a:	4863      	ldr	r0, [pc, #396]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    246c:	f7fe f9a8 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2470:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2474:	4860      	ldr	r0, [pc, #384]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2476:	f008 fb19 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    247a:	485f      	ldr	r0, [pc, #380]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    247c:	f008 fac6 	bl	aa0c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2480:	495f      	ldr	r1, [pc, #380]	; (2600 <LEDDebug(LEDStruct&)+0x7dc>)
    2482:	485d      	ldr	r0, [pc, #372]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2484:	f7fe f99c 	bl	7c0 <Print::write(char const*)>
			Serial.print("strip_range:     ");
			Serial.println(leds.strip_range);
			Serial.print("pole_diff:       ");
			Serial.println(leds.pole_diff);
    2488:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    248c:	485a      	ldr	r0, [pc, #360]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    248e:	f7fe f9b7 	bl	800 <Print::println(unsigned char)>
    2492:	495c      	ldr	r1, [pc, #368]	; (2604 <LEDDebug(LEDStruct&)+0x7e0>)
    2494:	4858      	ldr	r0, [pc, #352]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2496:	f7fe f993 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_beat:     ");
			Serial.println(leds.juggle_beat);
    249a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    249e:	4856      	ldr	r0, [pc, #344]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24a0:	f7fe f9ae 	bl	800 <Print::println(unsigned char)>
    24a4:	4958      	ldr	r1, [pc, #352]	; (2608 <LEDDebug(LEDStruct&)+0x7e4>)
    24a6:	4854      	ldr	r0, [pc, #336]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24a8:	f7fe f98a 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_diff:     ");
			Serial.println(leds.juggle_diff);
    24ac:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    24b0:	4851      	ldr	r0, [pc, #324]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24b2:	f7fe f9a5 	bl	800 <Print::println(unsigned char)>
    24b6:	4955      	ldr	r1, [pc, #340]	; (260c <LEDDebug(LEDStruct&)+0x7e8>)
    24b8:	484f      	ldr	r0, [pc, #316]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24ba:	f7fe f981 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_fade:     ");
			Serial.println(leds.juggle_fade);
    24be:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    24c2:	484d      	ldr	r0, [pc, #308]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24c4:	f7fe f99c 	bl	800 <Print::println(unsigned char)>
			break;
    24c8:	e562      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>

		case NOISE:
			Serial.println("=====NOISE=====");
    24ca:	4951      	ldr	r1, [pc, #324]	; (2610 <LEDDebug(LEDStruct&)+0x7ec>)
    24cc:	484a      	ldr	r0, [pc, #296]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24ce:	f7fe f985 	bl	7dc <Print::println(char const*)>
    24d2:	4950      	ldr	r1, [pc, #320]	; (2614 <LEDDebug(LEDStruct&)+0x7f0>)
    24d4:	4848      	ldr	r0, [pc, #288]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24d6:	f7fe f973 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24da:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    24de:	4846      	ldr	r0, [pc, #280]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24e0:	f008 fae4 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    24e4:	4844      	ldr	r0, [pc, #272]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24e6:	f008 fa91 	bl	aa0c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ea:	494b      	ldr	r1, [pc, #300]	; (2618 <LEDDebug(LEDStruct&)+0x7f4>)
    24ec:	4842      	ldr	r0, [pc, #264]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24ee:	f7fe f967 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24f2:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    24f6:	4840      	ldr	r0, [pc, #256]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24f8:	f008 fad8 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    24fc:	483e      	ldr	r0, [pc, #248]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    24fe:	f008 fa85 	bl	aa0c <Print::println()>
    2502:	e545      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			Serial.print("noise_dist:    ");
			Serial.println(leds.noise_dist);
			break;

		case BOUNCE:
			Serial.println("=====BOUNCE=====");
    2504:	4945      	ldr	r1, [pc, #276]	; (261c <LEDDebug(LEDStruct&)+0x7f8>)
    2506:	483c      	ldr	r0, [pc, #240]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2508:	f7fe f968 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    250c:	4944      	ldr	r1, [pc, #272]	; (2620 <LEDDebug(LEDStruct&)+0x7fc>)
    250e:	483a      	ldr	r0, [pc, #232]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2510:	f7fe f956 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_fade:       ");
			Serial.println(leds.juggle_fade);
    2514:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2518:	4837      	ldr	r0, [pc, #220]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    251a:	f7fe f971 	bl	800 <Print::println(unsigned char)>
    251e:	4941      	ldr	r1, [pc, #260]	; (2624 <LEDDebug(LEDStruct&)+0x800>)
    2520:	4835      	ldr	r0, [pc, #212]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2522:	f7fe f94d 	bl	7c0 <Print::write(char const*)>
			Serial.print("bounce_length:     ");
			Serial.println(leds.bounce_length);
    2526:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    252a:	4833      	ldr	r0, [pc, #204]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    252c:	f7fe f968 	bl	800 <Print::println(unsigned char)>
    2530:	493d      	ldr	r1, [pc, #244]	; (2628 <LEDDebug(LEDStruct&)+0x804>)
    2532:	4831      	ldr	r0, [pc, #196]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2534:	f7fe f944 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_beat:       ");
			Serial.println(leds.juggle_beat);
    2538:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    253c:	482e      	ldr	r0, [pc, #184]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    253e:	f7fe f95f 	bl	800 <Print::println(unsigned char)>
    2542:	493a      	ldr	r1, [pc, #232]	; (262c <LEDDebug(LEDStruct&)+0x808>)
    2544:	482c      	ldr	r0, [pc, #176]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2546:	f7fe f93b 	bl	7c0 <Print::write(char const*)>
			Serial.print("rainbow_diff:      ");
			Serial.println(leds.rainbow_diff);
    254a:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    254e:	482a      	ldr	r0, [pc, #168]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2550:	f7fe f956 	bl	800 <Print::println(unsigned char)>
    2554:	4936      	ldr	r1, [pc, #216]	; (2630 <LEDDebug(LEDStruct&)+0x80c>)
    2556:	4828      	ldr	r0, [pc, #160]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2558:	f7fe f932 	bl	7c0 <Print::write(char const*)>
			Serial.print("bounce_start_beat: ");
			Serial.println(leds.bounce_start_beat);
    255c:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    2560:	4825      	ldr	r0, [pc, #148]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2562:	f7fe f94d 	bl	800 <Print::println(unsigned char)>
    2566:	4933      	ldr	r1, [pc, #204]	; (2634 <LEDDebug(LEDStruct&)+0x810>)
    2568:	4823      	ldr	r0, [pc, #140]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    256a:	f7fe f929 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    256e:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    2572:	4821      	ldr	r0, [pc, #132]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2574:	f008 fa9a 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2578:	481f      	ldr	r0, [pc, #124]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    257a:	f008 fa47 	bl	aa0c <Print::println()>
    257e:	e507      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
			Serial.print("number of balls: ");
			Serial.println(leds.number_of_balls);
			break;

		default:
			Serial.println("");
    2580:	492d      	ldr	r1, [pc, #180]	; (2638 <LEDDebug(LEDStruct&)+0x814>)
    2582:	481d      	ldr	r0, [pc, #116]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2584:	f7fe f92a 	bl	7dc <Print::println(char const*)>
			Serial.println("===MODE TYPE ERROR===");
    2588:	492c      	ldr	r1, [pc, #176]	; (263c <LEDDebug(LEDStruct&)+0x818>)
    258a:	481b      	ldr	r0, [pc, #108]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    258c:	f7fe f926 	bl	7dc <Print::println(char const*)>
			Serial.println("");
    2590:	4929      	ldr	r1, [pc, #164]	; (2638 <LEDDebug(LEDStruct&)+0x814>)
    2592:	4819      	ldr	r0, [pc, #100]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    2594:	f7fe f922 	bl	7dc <Print::println(char const*)>
			break;
    2598:	e4fa      	b.n	1f90 <LEDDebug(LEDStruct&)+0x16c>
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    259a:	4929      	ldr	r1, [pc, #164]	; (2640 <LEDDebug(LEDStruct&)+0x81c>)
    259c:	4816      	ldr	r0, [pc, #88]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    259e:	f7fe f91d 	bl	7dc <Print::println(char const*)>
    25a2:	e45e      	b.n	1e62 <LEDDebug(LEDStruct&)+0x3e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    25a4:	4927      	ldr	r1, [pc, #156]	; (2644 <LEDDebug(LEDStruct&)+0x820>)
    25a6:	4814      	ldr	r0, [pc, #80]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25a8:	f7fe f918 	bl	7dc <Print::println(char const*)>
    25ac:	e459      	b.n	1e62 <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    25ae:	4926      	ldr	r1, [pc, #152]	; (2648 <LEDDebug(LEDStruct&)+0x824>)
    25b0:	4811      	ldr	r0, [pc, #68]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25b2:	f7fe f913 	bl	7dc <Print::println(char const*)>
    25b6:	e55a      	b.n	206e <LEDDebug(LEDStruct&)+0x24a>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25b8:	4924      	ldr	r1, [pc, #144]	; (264c <LEDDebug(LEDStruct&)+0x828>)
    25ba:	480f      	ldr	r0, [pc, #60]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25bc:	f7fe f900 	bl	7c0 <Print::write(char const*)>
    25c0:	e5c2      	b.n	2148 <LEDDebug(LEDStruct&)+0x324>
    25c2:	4923      	ldr	r1, [pc, #140]	; (2650 <LEDDebug(LEDStruct&)+0x82c>)
    25c4:	480c      	ldr	r0, [pc, #48]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25c6:	f7fe f8fb 	bl	7c0 <Print::write(char const*)>
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
    25ca:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    25ce:	480a      	ldr	r0, [pc, #40]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25d0:	f7fe f916 	bl	800 <Print::println(unsigned char)>
    25d4:	491f      	ldr	r1, [pc, #124]	; (2654 <LEDDebug(LEDStruct&)+0x830>)
    25d6:	4808      	ldr	r0, [pc, #32]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25d8:	f7fe f8f2 	bl	7c0 <Print::write(char const*)>
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
    25dc:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    25e0:	4805      	ldr	r0, [pc, #20]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25e2:	f7fe f90d 	bl	800 <Print::println(unsigned char)>
    25e6:	e5ca      	b.n	217e <LEDDebug(LEDStruct&)+0x35a>
    25e8:	491b      	ldr	r1, [pc, #108]	; (2658 <LEDDebug(LEDStruct&)+0x834>)
    25ea:	4803      	ldr	r0, [pc, #12]	; (25f8 <LEDDebug(LEDStruct&)+0x7d4>)
    25ec:	f7fe f8e8 	bl	7c0 <Print::write(char const*)>
    25f0:	e5a5      	b.n	213e <LEDDebug(LEDStruct&)+0x31a>
    25f2:	bf00      	nop
    25f4:	0000cd10 	.word	0x0000cd10
    25f8:	1fff8764 	.word	0x1fff8764
    25fc:	0000cd28 	.word	0x0000cd28
    2600:	0000cd3c 	.word	0x0000cd3c
    2604:	0000cd50 	.word	0x0000cd50
    2608:	0000cd64 	.word	0x0000cd64
    260c:	0000cd78 	.word	0x0000cd78
    2610:	0000cd8c 	.word	0x0000cd8c
    2614:	0000cd9c 	.word	0x0000cd9c
    2618:	0000cdac 	.word	0x0000cdac
    261c:	0000cdbc 	.word	0x0000cdbc
    2620:	0000cdd0 	.word	0x0000cdd0
    2624:	0000cde4 	.word	0x0000cde4
    2628:	0000cdf8 	.word	0x0000cdf8
    262c:	0000ce0c 	.word	0x0000ce0c
    2630:	0000ce20 	.word	0x0000ce20
    2634:	0000ce34 	.word	0x0000ce34
    2638:	0000cef4 	.word	0x0000cef4
    263c:	0000ce80 	.word	0x0000ce80
    2640:	0000c90c 	.word	0x0000c90c
    2644:	0000c914 	.word	0x0000c914
    2648:	0000ca5c 	.word	0x0000ca5c
    264c:	0000cab8 	.word	0x0000cab8
    2650:	0000cae0 	.word	0x0000cae0
    2654:	0000caf0 	.word	0x0000caf0
    2658:	0000cab0 	.word	0x0000cab0

0000265c <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2660:	b08d      	sub	sp, #52	; 0x34
    2662:	2120      	movs	r1, #32
    2664:	4605      	mov	r5, r0
    2666:	9009      	str	r0, [sp, #36]	; 0x24
    2668:	483f      	ldr	r0, [pc, #252]	; (2768 <change_palette(LEDStruct&) [clone .part.12]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    266a:	4c40      	ldr	r4, [pc, #256]	; (276c <change_palette(LEDStruct&) [clone .part.12]+0x110>)
    266c:	f007 ffca 	bl	a604 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2670:	483f      	ldr	r0, [pc, #252]	; (2770 <change_palette(LEDStruct&) [clone .part.12]+0x114>)
    2672:	f008 f9cb 	bl	aa0c <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2676:	483f      	ldr	r0, [pc, #252]	; (2774 <change_palette(LEDStruct&) [clone .part.12]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    2678:	4a3f      	ldr	r2, [pc, #252]	; (2778 <change_palette(LEDStruct&) [clone .part.12]+0x11c>)
    267a:	8803      	ldrh	r3, [r0, #0]
    267c:	7811      	ldrb	r1, [r2, #0]
    267e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2682:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2686:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    268a:	3319      	adds	r3, #25
    268c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    268e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2692:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2694:	fb12 f201 	smulbb	r2, r2, r1
    2698:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    269a:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    269c:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    26a0:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    26a4:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    26a6:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    26aa:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    26ac:	3701      	adds	r7, #1
        } while ( u.index != 255);
    26ae:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    26b0:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    26b2:	d1f8      	bne.n	26a6 <change_palette(LEDStruct&) [clone .part.12]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    26b4:	f8d8 3000 	ldr.w	r3, [r8]
    26b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    26ba:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    26bc:	ea4f 6913 	mov.w	r9, r3, lsr #24
    26c0:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    26c4:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    26c8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    26cc:	f04f 33ff 	mov.w	r3, #4294967295
    26d0:	9207      	str	r2, [sp, #28]
    26d2:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    26d4:	2400      	movs	r4, #0
    26d6:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    26d8:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    26dc:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    26de:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    26e2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    26e6:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    26ea:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    26ec:	b2f9      	uxtb	r1, r7
    26ee:	f3c5 6507 	ubfx	r5, r5, #24, #8
    26f2:	9104      	str	r1, [sp, #16]
    26f4:	b2e9      	uxtb	r1, r5
    26f6:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    26f8:	fa5f f18c 	uxtb.w	r1, ip
    26fc:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    26fe:	9908      	ldr	r1, [sp, #32]
    2700:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2702:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2704:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2708:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    270c:	d80c      	bhi.n	2728 <change_palette(LEDStruct&) [clone .part.12]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    270e:	9906      	ldr	r1, [sp, #24]
    2710:	458c      	cmp	ip, r1
    2712:	dc07      	bgt.n	2724 <change_palette(LEDStruct&) [clone .part.12]+0xc8>
    2714:	290f      	cmp	r1, #15
    2716:	d005      	beq.n	2724 <change_palette(LEDStruct&) [clone .part.12]+0xc8>
                    istart8 = lastSlotUsed + 1;
    2718:	3101      	adds	r1, #1
    271a:	b2c9      	uxtb	r1, r1
    271c:	428b      	cmp	r3, r1
    271e:	9103      	str	r1, [sp, #12]
    2720:	bf38      	it	cc
    2722:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2724:	b259      	sxtb	r1, r3
    2726:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2728:	a90b      	add	r1, sp, #44	; 0x2c
    272a:	9100      	str	r1, [sp, #0]
    272c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    272e:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2732:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2736:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    273a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    273e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    2742:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    2746:	f005 febb 	bl	84c0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    274a:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    274c:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    2750:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2754:	46ca      	mov	sl, r9
    2756:	d1bf      	bne.n	26d8 <change_palette(LEDStruct&) [clone .part.12]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2758:	9b09      	ldr	r3, [sp, #36]	; 0x24
    275a:	f893 0228 	ldrb.w	r0, [r3, #552]	; 0x228
    275e:	f7ff f853 	bl	1808 <print_palette(unsigned char)>
	}
}
    2762:	b00d      	add	sp, #52	; 0x34
    2764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2768:	0000ce98 	.word	0x0000ce98
    276c:	0000d910 	.word	0x0000d910
    2770:	1fff8764 	.word	0x1fff8764
    2774:	1fff875a 	.word	0x1fff875a
    2778:	1fff874c 	.word	0x1fff874c

0000277c <juggle(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2780:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2784:	b091      	sub	sp, #68	; 0x44
    2786:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2788:	2b00      	cmp	r3, #0
    278a:	f000 80f3 	beq.w	2974 <juggle(LEDStruct&)+0x1f8>
    278e:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    2792:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    2796:	b113      	cbz	r3, 279e <juggle(LEDStruct&)+0x22>
    2798:	2300      	movs	r3, #0
    279a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    279e:	2196      	movs	r1, #150	; 0x96
    27a0:	4620      	mov	r0, r4
    27a2:	f005 ff1f 	bl	85e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    27a6:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    27aa:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    27ae:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    27b2:	2900      	cmp	r1, #0
    27b4:	f040 8178 	bne.w	2aa8 <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    27b8:	2f00      	cmp	r7, #0
    27ba:	f000 82b8 	beq.w	2d2e <juggle(LEDStruct&)+0x5b2>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    27be:	2b00      	cmp	r3, #0
    27c0:	f000 8388 	beq.w	2ed4 <juggle(LEDStruct&)+0x758>
    27c4:	48c4      	ldr	r0, [pc, #784]	; (2ad8 <juggle(LEDStruct&)+0x35c>)
    27c6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    27ca:	f8df 9314 	ldr.w	r9, [pc, #788]	; 2ae0 <juggle(LEDStruct&)+0x364>
    27ce:	f8df 8314 	ldr.w	r8, [pc, #788]	; 2ae4 <juggle(LEDStruct&)+0x368>
    27d2:	9002      	str	r0, [sp, #8]
    27d4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    27d8:	460f      	mov	r7, r1
    27da:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    27de:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    27e2:	9503      	str	r5, [sp, #12]
    27e4:	e05e      	b.n	28a4 <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    27e6:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    27ea:	443b      	add	r3, r7
    27ec:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    27ee:	f8d9 1000 	ldr.w	r1, [r9]
    27f2:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    27f4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    27f6:	9904      	ldr	r1, [sp, #16]
    27f8:	bf98      	it	ls
    27fa:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    27fc:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2800:	bf98      	it	ls
    2802:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2804:	fb00 f101 	mul.w	r1, r0, r1
    2808:	fb03 f301 	mul.w	r3, r3, r1
    280c:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    280e:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2810:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2814:	d503      	bpl.n	281e <juggle(LEDStruct&)+0xa2>
    2816:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    281a:	3107      	adds	r1, #7
    281c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    281e:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2820:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2822:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2826:	f818 6000 	ldrb.w	r6, [r8, r0]
    282a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    282e:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2832:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2834:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2836:	bf48      	it	mi
    2838:	4249      	negmi	r1, r1
    283a:	b20e      	sxth	r6, r1
    283c:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2840:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2844:	9100      	str	r1, [sp, #0]
    2846:	4650      	mov	r0, sl
    2848:	4659      	mov	r1, fp
    284a:	f005 ff2b 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    284e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2852:	2296      	movs	r2, #150	; 0x96
    2854:	b29b      	uxth	r3, r3
    2856:	fb02 f303 	mul.w	r3, r2, r3
    285a:	0c1b      	lsrs	r3, r3, #16
    285c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2860:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2862:	5ce2      	ldrb	r2, [r4, r3]
    2864:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2868:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    286c:	54e2      	strb	r2, [r4, r3]
    286e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2872:	784a      	ldrb	r2, [r1, #1]
    2874:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2878:	704a      	strb	r2, [r1, #1]
    287a:	788b      	ldrb	r3, [r1, #2]
    287c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2880:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2884:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2886:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    288a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    288e:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2892:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2894:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2896:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2898:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    289a:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    289c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    28a0:	f240 8318 	bls.w	2ed4 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    28a4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    28a8:	2900      	cmp	r1, #0
    28aa:	d19c      	bne.n	27e6 <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    28ac:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    28b0:	443b      	add	r3, r7
    28b2:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28b4:	f8d9 1000 	ldr.w	r1, [r9]
    28b8:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    28ba:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    28bc:	9905      	ldr	r1, [sp, #20]
    28be:	bf98      	it	ls
    28c0:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    28c2:	f44f 708c 	mov.w	r0, #280	; 0x118
    28c6:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    28ca:	bf98      	it	ls
    28cc:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    28ce:	fb03 f301 	mul.w	r3, r3, r1
    28d2:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    28d4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    28d6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    28da:	d503      	bpl.n	28e4 <juggle(LEDStruct&)+0x168>
    28dc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    28e0:	3107      	adds	r1, #7
    28e2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    28e4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28e6:	9d02      	ldr	r5, [sp, #8]
    28e8:	f818 6000 	ldrb.w	r6, [r8, r0]
    28ec:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    28f0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    28f4:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    28f8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28fa:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    28fc:	bf48      	it	mi
    28fe:	4249      	negmi	r1, r1
    2900:	b20e      	sxth	r6, r1
    2902:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2906:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    290a:	9100      	str	r1, [sp, #0]
    290c:	4650      	mov	r0, sl
    290e:	4659      	mov	r1, fp
    2910:	f005 fec8 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2914:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2918:	b29b      	uxth	r3, r3
    291a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    291e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2922:	0c1b      	lsrs	r3, r3, #16
    2924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2928:	18e1      	adds	r1, r4, r3
    292a:	5ce2      	ldrb	r2, [r4, r3]
    292c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2930:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2934:	54e2      	strb	r2, [r4, r3]
    2936:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    293a:	784a      	ldrb	r2, [r1, #1]
    293c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2940:	704a      	strb	r2, [r1, #1]
    2942:	788b      	ldrb	r3, [r1, #2]
    2944:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2948:	fa83 f352 	uqadd8	r3, r3, r2
    294c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    294e:	708b      	strb	r3, [r1, #2]
    2950:	4622      	mov	r2, r4
    2952:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2954:	7819      	ldrb	r1, [r3, #0]
    2956:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    295a:	7859      	ldrb	r1, [r3, #1]
    295c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2960:	7899      	ldrb	r1, [r3, #2]
    2962:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2966:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    2968:	429d      	cmp	r5, r3
    296a:	f1a2 0203 	sub.w	r2, r2, #3
    296e:	d1f1      	bne.n	2954 <juggle(LEDStruct&)+0x1d8>
    2970:	9503      	str	r5, [sp, #12]
    2972:	e788      	b.n	2886 <juggle(LEDStruct&)+0x10a>
    2974:	4d59      	ldr	r5, [pc, #356]	; (2adc <juggle(LEDStruct&)+0x360>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2976:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    297a:	882b      	ldrh	r3, [r5, #0]
    297c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2980:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2984:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2988:	3119      	adds	r1, #25
    298a:	b289      	uxth	r1, r1
    298c:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    2990:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2994:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2998:	3019      	adds	r0, #25
    299a:	b280      	uxth	r0, r0
    299c:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    29a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    29a4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    29a8:	3319      	adds	r3, #25
    29aa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    29ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    29b2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    29b6:	3219      	adds	r2, #25
    29b8:	b292      	uxth	r2, r2
    29ba:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    29be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    29c2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    29c6:	3619      	adds	r6, #25
    29c8:	b2b6      	uxth	r6, r6
    29ca:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    29ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    29d2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    29d6:	3319      	adds	r3, #25
    29d8:	b29b      	uxth	r3, r3
    29da:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    29de:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    29e2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    29e6:	f10e 0e19 	add.w	lr, lr, #25
    29ea:	fa1f fe8e 	uxth.w	lr, lr
    29ee:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    29f2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    29f6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    29fa:	3719      	adds	r7, #25
    29fc:	b2bf      	uxth	r7, r7
    29fe:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a02:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2a06:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a0a:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a0e:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a10:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a18:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a1c:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    2a20:	b2f2      	uxtb	r2, r6
    2a22:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a26:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a2e:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    2a32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a36:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a38:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2a3c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a40:	ea4f 18ec 	mov.w	r8, ip, asr #7
    2a44:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    2a48:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a4c:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2a50:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2a54:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a58:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2a5c:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2a60:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2a64:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2a68:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    2a6c:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2a70:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2a74:	b2d2      	uxtb	r2, r2

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2a76:	f3c7 13c0 	ubfx	r3, r7, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2a7a:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2a7e:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2a82:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2a84:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2a88:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2a8c:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2a90:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2a94:	802e      	strh	r6, [r5, #0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2a96:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2a9a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2a9e:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2aa2:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    2aa6:	e676      	b.n	2796 <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    2aa8:	2f00      	cmp	r7, #0
    2aaa:	f000 80a6 	beq.w	2bfa <juggle(LEDStruct&)+0x47e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2aae:	2b00      	cmp	r3, #0
    2ab0:	f000 8210 	beq.w	2ed4 <juggle(LEDStruct&)+0x758>
    2ab4:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <juggle(LEDStruct&)+0x35c>)
    2ab6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2aba:	f8df 9024 	ldr.w	r9, [pc, #36]	; 2ae0 <juggle(LEDStruct&)+0x364>
    2abe:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2ae4 <juggle(LEDStruct&)+0x368>
    2ac2:	9302      	str	r3, [sp, #8]
    2ac4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2ac8:	2700      	movs	r7, #0
    2aca:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2ace:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2ad2:	9503      	str	r5, [sp, #12]
    2ad4:	e06d      	b.n	2bb2 <juggle(LEDStruct&)+0x436>
    2ad6:	bf00      	nop
    2ad8:	0000cf9c 	.word	0x0000cf9c
    2adc:	1fff875a 	.word	0x1fff875a
    2ae0:	1fffa058 	.word	0x1fffa058
    2ae4:	0000dab4 	.word	0x0000dab4
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2ae8:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2aec:	2b00      	cmp	r3, #0
    2aee:	f000 82c6 	beq.w	307e <juggle(LEDStruct&)+0x902>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2af2:	f8d9 3000 	ldr.w	r3, [r9]
    2af6:	9308      	str	r3, [sp, #32]
	return ret;
    2af8:	9908      	ldr	r1, [sp, #32]
    2afa:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2b02:	fb00 1117 	mls	r1, r0, r7, r1
    2b06:	021b      	lsls	r3, r3, #8
    2b08:	f44f 708c 	mov.w	r0, #280	; 0x118
    2b0c:	fb00 f303 	mul.w	r3, r0, r3
    2b10:	fb03 f301 	mul.w	r3, r3, r1
    2b14:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2b18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b1c:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2b1e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2b22:	d503      	bpl.n	2b2c <juggle(LEDStruct&)+0x3b0>
    2b24:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2b28:	3107      	adds	r1, #7
    2b2a:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b2c:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2b2e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b30:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2b34:	f818 6000 	ldrb.w	r6, [r8, r0]
    2b38:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2b3c:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2b40:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2b42:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2b44:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2b48:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2b4c:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2b4e:	bf48      	it	mi
    2b50:	4276      	negmi	r6, r6
    2b52:	4659      	mov	r1, fp
    2b54:	4650      	mov	r0, sl
    2b56:	b236      	sxth	r6, r6
    2b58:	f005 fda4 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2b5c:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2b60:	b29a      	uxth	r2, r3
    2b62:	2396      	movs	r3, #150	; 0x96
    2b64:	fb03 f302 	mul.w	r3, r3, r2
    2b68:	0c1b      	lsrs	r3, r3, #16
    2b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2b6e:	18e1      	adds	r1, r4, r3
    2b70:	5ce2      	ldrb	r2, [r4, r3]
    2b72:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2b76:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2b7a:	54e2      	strb	r2, [r4, r3]
    2b7c:	784a      	ldrb	r2, [r1, #1]
    2b7e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2b82:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2b86:	704a      	strb	r2, [r1, #1]
    2b88:	788b      	ldrb	r3, [r1, #2]
    2b8a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2b8e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2b92:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2b94:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2b98:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2b9c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2ba0:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2ba2:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2ba4:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2ba6:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2ba8:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2baa:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2bae:	f240 8191 	bls.w	2ed4 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    2bb2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	d196      	bne.n	2ae8 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2bba:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2bbe:	2b00      	cmp	r3, #0
    2bc0:	f000 8192 	beq.w	2ee8 <juggle(LEDStruct&)+0x76c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bc4:	f8d9 3000 	ldr.w	r3, [r9]
    2bc8:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2bca:	990a      	ldr	r1, [sp, #40]	; 0x28
    2bcc:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2bd4:	fb00 1117 	mls	r1, r0, r7, r1
    2bd8:	021b      	lsls	r3, r3, #8
    2bda:	f44f 708c 	mov.w	r0, #280	; 0x118
    2bde:	fb00 f303 	mul.w	r3, r0, r3
    2be2:	fb03 f301 	mul.w	r3, r3, r1
    2be6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2bea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2bee:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bf0:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2bf2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bf6:	d599      	bpl.n	2b2c <juggle(LEDStruct&)+0x3b0>
    2bf8:	e794      	b.n	2b24 <juggle(LEDStruct&)+0x3a8>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	f000 816a 	beq.w	2ed4 <juggle(LEDStruct&)+0x758>
    2c00:	49b6      	ldr	r1, [pc, #728]	; (2edc <juggle(LEDStruct&)+0x760>)
    2c02:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2c06:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2ee0 <juggle(LEDStruct&)+0x764>
    2c0a:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 2ee4 <juggle(LEDStruct&)+0x768>
    2c0e:	9102      	str	r1, [sp, #8]
    2c10:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2c14:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2c18:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    2c1c:	9503      	str	r5, [sp, #12]
    2c1e:	e063      	b.n	2ce8 <juggle(LEDStruct&)+0x56c>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2c20:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2c24:	2900      	cmp	r1, #0
    2c26:	f000 828f 	beq.w	3148 <juggle(LEDStruct&)+0x9cc>
    2c2a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2c2e:	443b      	add	r3, r7
    2c30:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c32:	f8d9 1000 	ldr.w	r1, [r9]
    2c36:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2c38:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2c3a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c3c:	bf9c      	itt	ls
    2c3e:	021b      	lslls	r3, r3, #8
    2c40:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2c42:	fb0a f101 	mul.w	r1, sl, r1
    2c46:	fb03 f301 	mul.w	r3, r3, r1
    2c4a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2c4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2c52:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2c54:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c58:	d503      	bpl.n	2c62 <juggle(LEDStruct&)+0x4e6>
    2c5a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2c5e:	3107      	adds	r1, #7
    2c60:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c62:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2c64:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c66:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2c6a:	f818 6000 	ldrb.w	r6, [r8, r0]
    2c6e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2c72:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2c76:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2c78:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2c7a:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2c7e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2c82:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2c84:	bf48      	it	mi
    2c86:	4276      	negmi	r6, r6
    2c88:	4659      	mov	r1, fp
    2c8a:	a80b      	add	r0, sp, #44	; 0x2c
    2c8c:	b236      	sxth	r6, r6
    2c8e:	f005 fd09 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2c92:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2c96:	2296      	movs	r2, #150	; 0x96
    2c98:	b29b      	uxth	r3, r3
    2c9a:	fb02 f303 	mul.w	r3, r2, r3
    2c9e:	0c1b      	lsrs	r3, r3, #16
    2ca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2ca4:	18e1      	adds	r1, r4, r3
    2ca6:	5ce2      	ldrb	r2, [r4, r3]
    2ca8:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2cac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2cb0:	54e2      	strb	r2, [r4, r3]
    2cb2:	784a      	ldrb	r2, [r1, #1]
    2cb4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2cb8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2cbc:	704a      	strb	r2, [r1, #1]
    2cbe:	788b      	ldrb	r3, [r1, #2]
    2cc0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2cc4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2cc8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2cca:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2cce:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2cd2:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2cd6:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2cd8:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2cda:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2cdc:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2cde:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2ce0:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2ce4:	f240 80f6 	bls.w	2ed4 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    2ce8:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2cec:	2900      	cmp	r1, #0
    2cee:	d197      	bne.n	2c20 <juggle(LEDStruct&)+0x4a4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2cf0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2cf4:	2900      	cmp	r1, #0
    2cf6:	f000 815d 	beq.w	2fb4 <juggle(LEDStruct&)+0x838>
    2cfa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2cfe:	443b      	add	r3, r7
    2d00:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d02:	f8d9 1000 	ldr.w	r1, [r9]
    2d06:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2d08:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2d0a:	990e      	ldr	r1, [sp, #56]	; 0x38
    2d0c:	bf9c      	itt	ls
    2d0e:	021b      	lslls	r3, r3, #8
    2d10:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2d12:	fb0a f101 	mul.w	r1, sl, r1
    2d16:	fb03 f301 	mul.w	r3, r3, r1
    2d1a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2d1e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2d22:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d24:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2d26:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d2a:	d59a      	bpl.n	2c62 <juggle(LEDStruct&)+0x4e6>
    2d2c:	e795      	b.n	2c5a <juggle(LEDStruct&)+0x4de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2d2e:	2b00      	cmp	r3, #0
    2d30:	f000 80d0 	beq.w	2ed4 <juggle(LEDStruct&)+0x758>
    2d34:	4b69      	ldr	r3, [pc, #420]	; (2edc <juggle(LEDStruct&)+0x760>)
    2d36:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2d3a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2ee0 <juggle(LEDStruct&)+0x764>
    2d3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2ee4 <juggle(LEDStruct&)+0x768>
    2d42:	9302      	str	r3, [sp, #8]
    2d44:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2d48:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2d4c:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2d50:	9503      	str	r5, [sp, #12]
    2d52:	e05a      	b.n	2e0a <juggle(LEDStruct&)+0x68e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d54:	f8d9 3000 	ldr.w	r3, [r9]
    2d58:	9306      	str	r3, [sp, #24]
	return ret;
    2d5a:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2d5c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2d60:	f44f 708c 	mov.w	r0, #280	; 0x118
    2d64:	0209      	lsls	r1, r1, #8
    2d66:	fb00 f303 	mul.w	r3, r0, r3
    2d6a:	fb03 f301 	mul.w	r3, r3, r1
    2d6e:	0379      	lsls	r1, r7, #13
    2d70:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2d74:	b299      	uxth	r1, r3
    2d76:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2d78:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2d7c:	d503      	bpl.n	2d86 <juggle(LEDStruct&)+0x60a>
    2d7e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2d82:	3307      	adds	r3, #7
    2d84:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d86:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2d88:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d8a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2d8e:	f818 6000 	ldrb.w	r6, [r8, r0]
    2d92:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2d96:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    2d9a:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d9c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2d9e:	bf48      	it	mi
    2da0:	425b      	negmi	r3, r3
    2da2:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2da6:	b21e      	sxth	r6, r3
    2da8:	4650      	mov	r0, sl
    2daa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2dae:	9100      	str	r1, [sp, #0]
    2db0:	4659      	mov	r1, fp
    2db2:	f005 fc77 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2db6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2dba:	2296      	movs	r2, #150	; 0x96
    2dbc:	b29b      	uxth	r3, r3
    2dbe:	fb02 f303 	mul.w	r3, r2, r3
    2dc2:	0c1b      	lsrs	r3, r3, #16
    2dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2dc8:	18e1      	adds	r1, r4, r3
    2dca:	5ce2      	ldrb	r2, [r4, r3]
    2dcc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2dd0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2dd4:	54e2      	strb	r2, [r4, r3]
    2dd6:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2dda:	784a      	ldrb	r2, [r1, #1]
    2ddc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2de0:	704a      	strb	r2, [r1, #1]
    2de2:	788b      	ldrb	r3, [r1, #2]
    2de4:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2de8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2dec:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2dee:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2df2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2df6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2dfa:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2dfc:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2dfe:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2e00:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2e02:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2e04:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2e08:	d964      	bls.n	2ed4 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2e0a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d1a0      	bne.n	2d54 <juggle(LEDStruct&)+0x5d8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e12:	f8d9 3000 	ldr.w	r3, [r9]
    2e16:	9307      	str	r3, [sp, #28]
	return ret;
    2e18:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2e1a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2e1e:	f44f 708c 	mov.w	r0, #280	; 0x118
    2e22:	fb00 f303 	mul.w	r3, r0, r3
    2e26:	0209      	lsls	r1, r1, #8
    2e28:	fb03 f301 	mul.w	r3, r3, r1
    2e2c:	0379      	lsls	r1, r7, #13
    2e2e:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2e32:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2e34:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2e36:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2e3a:	d503      	bpl.n	2e44 <juggle(LEDStruct&)+0x6c8>
    2e3c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2e40:	3307      	adds	r3, #7
    2e42:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2e44:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2e46:	9d02      	ldr	r5, [sp, #8]
    2e48:	f818 6000 	ldrb.w	r6, [r8, r0]
    2e4c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2e50:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2e54:	fb06 0303 	mla	r3, r6, r3, r0
    2e58:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2e5a:	040e      	lsls	r6, r1, #16
    2e5c:	bf48      	it	mi
    2e5e:	425b      	negmi	r3, r3
    2e60:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2e64:	b21e      	sxth	r6, r3
    2e66:	4650      	mov	r0, sl
    2e68:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2e6c:	9100      	str	r1, [sp, #0]
    2e6e:	4659      	mov	r1, fp
    2e70:	f005 fc18 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e74:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2e78:	b29b      	uxth	r3, r3
    2e7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2e7e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2e82:	0c1b      	lsrs	r3, r3, #16
    2e84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e88:	18e1      	adds	r1, r4, r3
    2e8a:	5ce2      	ldrb	r2, [r4, r3]
    2e8c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2e90:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2e94:	54e2      	strb	r2, [r4, r3]
    2e96:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2e9a:	784a      	ldrb	r2, [r1, #1]
    2e9c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2ea0:	704a      	strb	r2, [r1, #1]
    2ea2:	788b      	ldrb	r3, [r1, #2]
    2ea4:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2ea8:	fa83 f352 	uqadd8	r3, r3, r2
    2eac:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2eae:	708b      	strb	r3, [r1, #2]
    2eb0:	4622      	mov	r2, r4
    2eb2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2eb4:	7819      	ldrb	r1, [r3, #0]
    2eb6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2eba:	7859      	ldrb	r1, [r3, #1]
    2ebc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2ec0:	7899      	ldrb	r1, [r3, #2]
    2ec2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2ec6:	3303      	adds	r3, #3
    2ec8:	42ab      	cmp	r3, r5
    2eca:	f1a2 0203 	sub.w	r2, r2, #3
    2ece:	d1f1      	bne.n	2eb4 <juggle(LEDStruct&)+0x738>
    2ed0:	9503      	str	r5, [sp, #12]
    2ed2:	e78c      	b.n	2dee <juggle(LEDStruct&)+0x672>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    2ed4:	b011      	add	sp, #68	; 0x44
    2ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2eda:	bf00      	nop
    2edc:	0000cf9c 	.word	0x0000cf9c
    2ee0:	1fffa058 	.word	0x1fffa058
    2ee4:	0000dab4 	.word	0x0000dab4
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ee8:	f8d9 3000 	ldr.w	r3, [r9]
    2eec:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2eee:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    2ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2ef4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2ef8:	fb00 3317 	mls	r3, r0, r7, r3
    2efc:	0209      	lsls	r1, r1, #8
    2efe:	f44f 708c 	mov.w	r0, #280	; 0x118
    2f02:	fb00 f101 	mul.w	r1, r0, r1
    2f06:	fb03 f301 	mul.w	r3, r3, r1
    2f0a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2f0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2f12:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f14:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2f16:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2f1a:	d503      	bpl.n	2f24 <juggle(LEDStruct&)+0x7a8>
    2f1c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2f20:	3107      	adds	r1, #7
    2f22:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2f24:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f26:	9d02      	ldr	r5, [sp, #8]
    2f28:	f818 6000 	ldrb.w	r6, [r8, r0]
    2f2c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2f30:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2f34:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2f38:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2f3a:	b2b6      	uxth	r6, r6
    2f3c:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2f40:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2f44:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2f46:	bf48      	it	mi
    2f48:	4276      	negmi	r6, r6
    2f4a:	4659      	mov	r1, fp
    2f4c:	4650      	mov	r0, sl
    2f4e:	b236      	sxth	r6, r6
    2f50:	f005 fba8 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2f54:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2f58:	b29b      	uxth	r3, r3
    2f5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f5e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2f62:	0c1b      	lsrs	r3, r3, #16
    2f64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f68:	18e1      	adds	r1, r4, r3
    2f6a:	5ce2      	ldrb	r2, [r4, r3]
    2f6c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2f70:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2f74:	54e2      	strb	r2, [r4, r3]
    2f76:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2f7a:	784a      	ldrb	r2, [r1, #1]
    2f7c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2f80:	704a      	strb	r2, [r1, #1]
    2f82:	788b      	ldrb	r3, [r1, #2]
    2f84:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2f88:	fa83 f352 	uqadd8	r3, r3, r2
    2f8c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2f8e:	708b      	strb	r3, [r1, #2]
    2f90:	4622      	mov	r2, r4
    2f92:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f94:	7819      	ldrb	r1, [r3, #0]
    2f96:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2f9a:	7859      	ldrb	r1, [r3, #1]
    2f9c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2fa0:	7899      	ldrb	r1, [r3, #2]
    2fa2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2fa6:	3303      	adds	r3, #3
    2fa8:	42ab      	cmp	r3, r5
    2faa:	f1a2 0203 	sub.w	r2, r2, #3
    2fae:	d1f1      	bne.n	2f94 <juggle(LEDStruct&)+0x818>
    2fb0:	9503      	str	r5, [sp, #12]
    2fb2:	e5ef      	b.n	2b94 <juggle(LEDStruct&)+0x418>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2fb4:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2fb8:	443b      	add	r3, r7
    2fba:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fbc:	f8d9 1000 	ldr.w	r1, [r9]
    2fc0:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2fc2:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2fc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2fc6:	bf9c      	itt	ls
    2fc8:	021b      	lslls	r3, r3, #8
    2fca:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2fcc:	fb0a f101 	mul.w	r1, sl, r1
    2fd0:	fb03 f301 	mul.w	r3, r3, r1
    2fd4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2fd8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2fdc:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fde:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2fe0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fe4:	d503      	bpl.n	2fee <juggle(LEDStruct&)+0x872>
    2fe6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2fea:	3107      	adds	r1, #7
    2fec:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2fee:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ff0:	9d02      	ldr	r5, [sp, #8]
    2ff2:	f818 6000 	ldrb.w	r6, [r8, r0]
    2ff6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2ffa:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2ffe:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3002:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3004:	b2b6      	uxth	r6, r6
    3006:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    300a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    300e:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3010:	bf48      	it	mi
    3012:	4276      	negmi	r6, r6
    3014:	4659      	mov	r1, fp
    3016:	a80b      	add	r0, sp, #44	; 0x2c
    3018:	b236      	sxth	r6, r6
    301a:	f005 fb43 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    301e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3022:	b29b      	uxth	r3, r3
    3024:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3028:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    302c:	0c1b      	lsrs	r3, r3, #16
    302e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3032:	18e1      	adds	r1, r4, r3
    3034:	5ce2      	ldrb	r2, [r4, r3]
    3036:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    303a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    303e:	54e2      	strb	r2, [r4, r3]
    3040:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3044:	784a      	ldrb	r2, [r1, #1]
    3046:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    304a:	704a      	strb	r2, [r1, #1]
    304c:	788b      	ldrb	r3, [r1, #2]
    304e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3052:	fa83 f352 	uqadd8	r3, r3, r2
    3056:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    3058:	708b      	strb	r3, [r1, #2]
    305a:	4622      	mov	r2, r4
    305c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    305e:	7819      	ldrb	r1, [r3, #0]
    3060:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3064:	7859      	ldrb	r1, [r3, #1]
    3066:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    306a:	7899      	ldrb	r1, [r3, #2]
    306c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3070:	3303      	adds	r3, #3
    3072:	42ab      	cmp	r3, r5
    3074:	f1a2 0203 	sub.w	r2, r2, #3
    3078:	d1f1      	bne.n	305e <juggle(LEDStruct&)+0x8e2>
    307a:	9503      	str	r5, [sp, #12]
    307c:	e625      	b.n	2cca <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    307e:	f8d9 3000 	ldr.w	r3, [r9]
    3082:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3084:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3086:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    308a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    308e:	fb00 1117 	mls	r1, r0, r7, r1
    3092:	021b      	lsls	r3, r3, #8
    3094:	f44f 708c 	mov.w	r0, #280	; 0x118
    3098:	fb00 f303 	mul.w	r3, r0, r3
    309c:	fb03 f301 	mul.w	r3, r3, r1
    30a0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    30a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    30a8:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    30aa:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    30ae:	d503      	bpl.n	30b8 <juggle(LEDStruct&)+0x93c>
    30b0:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    30b4:	3107      	adds	r1, #7
    30b6:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    30b8:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30ba:	9d02      	ldr	r5, [sp, #8]
    30bc:	f818 6000 	ldrb.w	r6, [r8, r0]
    30c0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    30c4:	f3c1 0146 	ubfx	r1, r1, #1, #7
    30c8:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    30cc:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30ce:	b2b6      	uxth	r6, r6
    30d0:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    30d4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    30d8:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    30da:	bf48      	it	mi
    30dc:	4276      	negmi	r6, r6
    30de:	4659      	mov	r1, fp
    30e0:	4650      	mov	r0, sl
    30e2:	b236      	sxth	r6, r6
    30e4:	f005 fade 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    30e8:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    30ec:	b29b      	uxth	r3, r3
    30ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30f2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    30f6:	0c1b      	lsrs	r3, r3, #16
    30f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30fc:	18e1      	adds	r1, r4, r3
    30fe:	5ce2      	ldrb	r2, [r4, r3]
    3100:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3104:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3108:	54e2      	strb	r2, [r4, r3]
    310a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    310e:	784a      	ldrb	r2, [r1, #1]
    3110:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3114:	704a      	strb	r2, [r1, #1]
    3116:	788b      	ldrb	r3, [r1, #2]
    3118:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    311c:	fa83 f352 	uqadd8	r3, r3, r2
    3120:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    3122:	708b      	strb	r3, [r1, #2]
    3124:	4622      	mov	r2, r4
    3126:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3128:	7819      	ldrb	r1, [r3, #0]
    312a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    312e:	7859      	ldrb	r1, [r3, #1]
    3130:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3134:	7899      	ldrb	r1, [r3, #2]
    3136:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    313a:	3303      	adds	r3, #3
    313c:	429d      	cmp	r5, r3
    313e:	f1a2 0203 	sub.w	r2, r2, #3
    3142:	d1f1      	bne.n	3128 <juggle(LEDStruct&)+0x9ac>
    3144:	9503      	str	r5, [sp, #12]
    3146:	e525      	b.n	2b94 <juggle(LEDStruct&)+0x418>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3148:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    314c:	443b      	add	r3, r7
    314e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3150:	f8d9 1000 	ldr.w	r1, [r9]
    3154:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3156:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3158:	990d      	ldr	r1, [sp, #52]	; 0x34
    315a:	bf9c      	itt	ls
    315c:	021b      	lslls	r3, r3, #8
    315e:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3160:	fb0a f101 	mul.w	r1, sl, r1
    3164:	fb03 f301 	mul.w	r3, r3, r1
    3168:	f3c3 430e 	ubfx	r3, r3, #16, #15
    316c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3170:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3172:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3176:	d503      	bpl.n	3180 <juggle(LEDStruct&)+0xa04>
    3178:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    317c:	3107      	adds	r1, #7
    317e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3180:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3182:	9d02      	ldr	r5, [sp, #8]
    3184:	f818 6000 	ldrb.w	r6, [r8, r0]
    3188:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    318c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3190:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3194:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3196:	b2b6      	uxth	r6, r6
    3198:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    319c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    31a0:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    31a2:	bf48      	it	mi
    31a4:	4276      	negmi	r6, r6
    31a6:	4659      	mov	r1, fp
    31a8:	a80b      	add	r0, sp, #44	; 0x2c
    31aa:	b236      	sxth	r6, r6
    31ac:	f005 fa7a 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    31b0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    31b4:	b29b      	uxth	r3, r3
    31b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    31ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    31be:	0c1b      	lsrs	r3, r3, #16
    31c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31c4:	18e1      	adds	r1, r4, r3
    31c6:	5ce2      	ldrb	r2, [r4, r3]
    31c8:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    31cc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31d0:	54e2      	strb	r2, [r4, r3]
    31d2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    31d6:	784a      	ldrb	r2, [r1, #1]
    31d8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31dc:	704a      	strb	r2, [r1, #1]
    31de:	788b      	ldrb	r3, [r1, #2]
    31e0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    31e4:	fa83 f352 	uqadd8	r3, r3, r2
    31e8:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    31ea:	708b      	strb	r3, [r1, #2]
    31ec:	4622      	mov	r2, r4
    31ee:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31f0:	7819      	ldrb	r1, [r3, #0]
    31f2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    31f6:	7859      	ldrb	r1, [r3, #1]
    31f8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    31fc:	7899      	ldrb	r1, [r3, #2]
    31fe:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3202:	3303      	adds	r3, #3
    3204:	42ab      	cmp	r3, r5
    3206:	f1a2 0203 	sub.w	r2, r2, #3
    320a:	d1f1      	bne.n	31f0 <juggle(LEDStruct&)+0xa74>
    320c:	9503      	str	r5, [sp, #12]
    320e:	e55c      	b.n	2cca <juggle(LEDStruct&)+0x54e>

00003210 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3210:	4b17      	ldr	r3, [pc, #92]	; (3270 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    3212:	4a18      	ldr	r2, [pc, #96]	; (3274 <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    3214:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    3216:	2100      	movs	r1, #0
    3218:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    321a:	2b03      	cmp	r3, #3
    321c:	d80a      	bhi.n	3234 <rainbow_update(LEDStruct&)+0x24>
    321e:	e8df f003 	tbb	[pc, r3]
    3222:	0217      	.short	0x0217
    3224:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    3226:	4b14      	ldr	r3, [pc, #80]	; (3278 <rainbow_update(LEDStruct&)+0x68>)
    3228:	881b      	ldrh	r3, [r3, #0]
    322a:	3300      	adds	r3, #0
    322c:	bf18      	it	ne
    322e:	2301      	movne	r3, #1
    3230:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    3234:	f7fe bdf6 	b.w	1e24 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    3238:	4b0f      	ldr	r3, [pc, #60]	; (3278 <rainbow_update(LEDStruct&)+0x68>)
    323a:	881b      	ldrh	r3, [r3, #0]
    323c:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    3240:	f7fe bdf0 	b.w	1e24 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    3244:	4b0c      	ldr	r3, [pc, #48]	; (3278 <rainbow_update(LEDStruct&)+0x68>)
    3246:	881b      	ldrh	r3, [r3, #0]
    3248:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    324c:	f7fe bdea 	b.w	1e24 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    3250:	4b09      	ldr	r3, [pc, #36]	; (3278 <rainbow_update(LEDStruct&)+0x68>)
    3252:	881b      	ldrh	r3, [r3, #0]
    3254:	2b00      	cmp	r3, #0
    3256:	bf14      	ite	ne
    3258:	2301      	movne	r3, #1
    325a:	2300      	moveq	r3, #0
    325c:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3260:	bf14      	ite	ne
    3262:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    3264:	234b      	moveq	r3, #75	; 0x4b
    3266:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    326a:	f7fe bddb 	b.w	1e24 <LEDDebug(LEDStruct&)>
    326e:	bf00      	nop
    3270:	1fff95d0 	.word	0x1fff95d0
    3274:	1fff95c1 	.word	0x1fff95c1
    3278:	1fff95c8 	.word	0x1fff95c8

0000327c <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    327c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    3280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3284:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3286:	2b00      	cmp	r3, #0
    3288:	d073      	beq.n	3372 <rainbow_march(LEDStruct&)+0xf6>
	if (keyboard_update) { rainbow_update(leds); }
    328a:	4b5a      	ldr	r3, [pc, #360]	; (33f4 <rainbow_march(LEDStruct&)+0x178>)
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b00      	cmp	r3, #0
    3290:	d16b      	bne.n	336a <rainbow_march(LEDStruct&)+0xee>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3292:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3296:	bb43      	cbnz	r3, 32ea <rainbow_march(LEDStruct&)+0x6e>
    3298:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    329c:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    32a0:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    32a2:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    32a6:	b2d2      	uxtb	r2, r2
    32a8:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    32ac:	bb4b      	cbnz	r3, 3302 <rainbow_march(LEDStruct&)+0x86>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    32ae:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    32b2:	2b00      	cmp	r3, #0
    32b4:	d151      	bne.n	335a <rainbow_march(LEDStruct&)+0xde>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    32b6:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    32ba:	214b      	movs	r1, #75	; 0x4b
    32bc:	4620      	mov	r0, r4
    32be:	f005 f8df 	bl	8480 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    32c2:	4620      	mov	r0, r4
    32c4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    32c8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32ca:	7802      	ldrb	r2, [r0, #0]
    32cc:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    32d0:	7842      	ldrb	r2, [r0, #1]
    32d2:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    32d6:	7882      	ldrb	r2, [r0, #2]
    32d8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    32dc:	3003      	adds	r0, #3
    32de:	4288      	cmp	r0, r1
    32e0:	f1a3 0303 	sub.w	r3, r3, #3
    32e4:	d1f1      	bne.n	32ca <rainbow_march(LEDStruct&)+0x4e>
    32e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    32ea:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    32ee:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    32f2:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    32f4:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    32f8:	b2d2      	uxtb	r2, r2
    32fa:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    32fe:	2b00      	cmp	r3, #0
    3300:	d0d5      	beq.n	32ae <rainbow_march(LEDStruct&)+0x32>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    3302:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    3306:	2125      	movs	r1, #37	; 0x25
    3308:	4620      	mov	r0, r4
    330a:	f005 f8b9 	bl	8480 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    330e:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    3312:	4623      	mov	r3, r4
    3314:	4621      	mov	r1, r4
    3316:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3318:	7810      	ldrb	r0, [r2, #0]
    331a:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    331e:	7850      	ldrb	r0, [r2, #1]
    3320:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    3324:	7890      	ldrb	r0, [r2, #2]
    3326:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    332a:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    332c:	42aa      	cmp	r2, r5
    332e:	f1a1 0103 	sub.w	r1, r1, #3
    3332:	d1f1      	bne.n	3318 <rainbow_march(LEDStruct&)+0x9c>
    3334:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3338:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    333a:	7802      	ldrb	r2, [r0, #0]
    333c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3340:	7842      	ldrb	r2, [r0, #1]
    3342:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3346:	7882      	ldrb	r2, [r0, #2]
    3348:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    334c:	3003      	adds	r0, #3
    334e:	4288      	cmp	r0, r1
    3350:	f1a3 0303 	sub.w	r3, r3, #3
    3354:	d1f1      	bne.n	333a <rainbow_march(LEDStruct&)+0xbe>
    3356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    335a:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    335e:	4620      	mov	r0, r4
    3360:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    3362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    3366:	f005 b88b 	b.w	8480 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    336a:	4620      	mov	r0, r4
    336c:	f7ff ff50 	bl	3210 <rainbow_update(LEDStruct&)>
    3370:	e78f      	b.n	3292 <rainbow_march(LEDStruct&)+0x16>
    3372:	4921      	ldr	r1, [pc, #132]	; (33f8 <rainbow_march(LEDStruct&)+0x17c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3374:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    3378:	880b      	ldrh	r3, [r1, #0]
    337a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    337e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3382:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3386:	3319      	adds	r3, #25
    3388:	b29b      	uxth	r3, r3
    338a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    338e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3392:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3396:	3219      	adds	r2, #25
    3398:	b292      	uxth	r2, r2
    339a:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    339e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    33a2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    33a6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    33aa:	eb02 2212 	add.w	r2, r2, r2, lsr #8

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    33ae:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    33b0:	3519      	adds	r5, #25
    leds.rainbow_rot    = rr;
    33b2:	b2d2      	uxtb	r2, r2
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    33b4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    33b8:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    33ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    33be:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    33c0:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    33c4:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    33c6:	1212      	asrs	r2, r2, #8
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    33c8:	2701      	movs	r7, #1
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    33ca:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    33ce:	3201      	adds	r2, #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    33d0:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    33d4:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    33d6:	f880 61c4 	strb.w	r6, [r0, #452]	; 0x1c4

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    33da:	f880 2277 	strb.w	r2, [r0, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    33de:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    33e2:	f880 727a 	strb.w	r7, [r0, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    33e6:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    33ea:	800d      	strh	r5, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    33ec:	f7fe fd1a 	bl	1e24 <LEDDebug(LEDStruct&)>
    33f0:	e74b      	b.n	328a <rainbow_march(LEDStruct&)+0xe>
    33f2:	bf00      	nop
    33f4:	1fff95c1 	.word	0x1fff95c1
    33f8:	1fff875a 	.word	0x1fff875a

000033fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    33fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    33fe:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    3402:	f89d 6014 	ldrb.w	r6, [sp, #20]
    3406:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    340a:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    340c:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    340e:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3410:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    3412:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    3416:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    341a:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    341e:	d940      	bls.n	34a2 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    3420:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    3422:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    3426:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    342a:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    342e:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    3432:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    3436:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    343a:	2a00      	cmp	r2, #0
    343c:	d13f      	bne.n	34be <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    343e:	234b      	movs	r3, #75	; 0x4b
    3440:	f880 2316 	strb.w	r2, [r0, #790]	; 0x316
    3444:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315

	if (!leds.fire_sync) {
    3448:	bb51      	cbnz	r1, 34a0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    344a:	4c20      	ldr	r4, [pc, #128]	; (34cc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    344c:	8823      	ldrh	r3, [r4, #0]
    344e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3452:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3456:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    345a:	3319      	adds	r3, #25
    345c:	b29b      	uxth	r3, r3
    345e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3462:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3466:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    346a:	3219      	adds	r2, #25
    346c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    346e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3472:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    3476:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    3478:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    347a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    347e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3482:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    3484:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3486:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    348a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    348e:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    3492:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3496:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    349a:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    349c:	f880 127e 	strb.w	r1, [r0, #638]	; 0x27e
    34a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    34a2:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    34a6:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    34aa:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    34ae:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    34b2:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    34b6:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    34ba:	2a00      	cmp	r2, #0
    34bc:	d0c2      	beq.n	3444 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    34be:	2325      	movs	r3, #37	; 0x25
    34c0:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    34c4:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    34c8:	e7be      	b.n	3448 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    34ca:	bf00      	nop
    34cc:	1fff875a 	.word	0x1fff875a

000034d0 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    34d0:	4b19      	ldr	r3, [pc, #100]	; (3538 <fire_update(LEDStruct&)+0x68>)
	}
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    34d2:	4a1a      	ldr	r2, [pc, #104]	; (353c <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    34d4:	781b      	ldrb	r3, [r3, #0]
	}
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    34d6:	2100      	movs	r1, #0
    34d8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    34da:	2b05      	cmp	r3, #5
    34dc:	d808      	bhi.n	34f0 <fire_update(LEDStruct&)+0x20>
    34de:	e8df f003 	tbb	[pc, r3]
    34e2:	150f      	.short	0x150f
    34e4:	0924031b 	.word	0x0924031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
    34e8:	4b15      	ldr	r3, [pc, #84]	; (3540 <fire_update(LEDStruct&)+0x70>)
    34ea:	881b      	ldrh	r3, [r3, #0]
    34ec:	f880 331a 	strb.w	r3, [r0, #794]	; 0x31a
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    34f0:	f7fe bc98 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
    34f4:	4b12      	ldr	r3, [pc, #72]	; (3540 <fire_update(LEDStruct&)+0x70>)
    34f6:	881b      	ldrh	r3, [r3, #0]
    34f8:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		default:	break;
	}
	LEDDebug(leds);
    34fc:	f7fe bc92 	b.w	1e24 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    3500:	4b0f      	ldr	r3, [pc, #60]	; (3540 <fire_update(LEDStruct&)+0x70>)
    3502:	881b      	ldrh	r3, [r3, #0]
    3504:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3508:	f7fe bc8c 	b.w	1e24 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    350c:	4b0c      	ldr	r3, [pc, #48]	; (3540 <fire_update(LEDStruct&)+0x70>)
    350e:	881b      	ldrh	r3, [r3, #0]
    3510:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3514:	f7fe bc86 	b.w	1e24 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
    3518:	4b09      	ldr	r3, [pc, #36]	; (3540 <fire_update(LEDStruct&)+0x70>)
    351a:	881b      	ldrh	r3, [r3, #0]
    351c:	3300      	adds	r3, #0
    351e:	bf18      	it	ne
    3520:	2301      	movne	r3, #1
    3522:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3526:	f7fe bc7d 	b.w	1e24 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
    352a:	4b05      	ldr	r3, [pc, #20]	; (3540 <fire_update(LEDStruct&)+0x70>)
    352c:	881b      	ldrh	r3, [r3, #0]
    352e:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3532:	f7fe bc77 	b.w	1e24 <LEDDebug(LEDStruct&)>
    3536:	bf00      	nop
    3538:	1fff95d0 	.word	0x1fff95d0
    353c:	1fff95c1 	.word	0x1fff95c1
    3540:	1fff95c8 	.word	0x1fff95c8

00003544 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    3544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3548:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    354c:	4dd0      	ldr	r5, [pc, #832]	; (3890 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    354e:	b086      	sub	sp, #24
    3550:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3552:	2b00      	cmp	r3, #0
    3554:	f000 8229 	beq.w	39aa <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    3558:	4bce      	ldr	r3, [pc, #824]	; (3894 <fire(LEDStruct&)+0x350>)
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	2b00      	cmp	r3, #0
    355e:	f040 8220 	bne.w	39a2 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3562:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3566:	2b00      	cmp	r3, #0
    3568:	f000 82d1 	beq.w	3b0e <fire(LEDStruct&)+0x5ca>
    356c:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3570:	882a      	ldrh	r2, [r5, #0]
    3572:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3576:	004f      	lsls	r7, r1, #1
    3578:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
    357c:	fb97 f7f3 	sdiv	r7, r7, r3
    3580:	3702      	adds	r7, #2
    3582:	b2ff      	uxtb	r7, r7
    3584:	44a6      	add	lr, r4
    3586:	f204 267e 	addw	r6, r4, #638	; 0x27e
    358a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    358e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3592:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3596:	3219      	adds	r2, #25
    3598:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    359a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    359e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    35a2:	b2c9      	uxtb	r1, r1
    35a4:	fb11 f107 	smulbb	r1, r1, r7
    35a8:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    35ac:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    35b0:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    35b2:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    35b4:	d1e9      	bne.n	358a <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    35b6:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    35ba:	802a      	strh	r2, [r5, #0]
    35bc:	2e00      	cmp	r6, #0
    35be:	f000 80f5 	beq.w	37ac <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    35c2:	f1a3 0e03 	sub.w	lr, r3, #3
    35c6:	f1be 0f01 	cmp.w	lr, #1
    35ca:	f04f 0c01 	mov.w	ip, #1
    35ce:	dd1a      	ble.n	3606 <fire(LEDStruct&)+0xc2>
    35d0:	f203 207b 	addw	r0, r3, #635	; 0x27b
    35d4:	f203 277d 	addw	r7, r3, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    35d8:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 3898 <fire(LEDStruct&)+0x354>
    35dc:	4420      	add	r0, r4
    35de:	4427      	add	r7, r4
    35e0:	f204 287f 	addw	r8, r4, #639	; 0x27f
    35e4:	7801      	ldrb	r1, [r0, #0]
    35e6:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    35ea:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    35ee:	fb89 a601 	smull	sl, r6, r9, r1
    35f2:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    35f6:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    35f8:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    35fc:	d1f2      	bne.n	35e4 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    35fe:	f1bc 0f00 	cmp.w	ip, #0
    3602:	f000 8102 	beq.w	380a <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3606:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    360a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    360e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3612:	3219      	adds	r2, #25
    3614:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    3616:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    361a:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    361e:	802a      	strh	r2, [r5, #0]
    3620:	b2c9      	uxtb	r1, r1
    3622:	428e      	cmp	r6, r1
    3624:	489a      	ldr	r0, [pc, #616]	; (3890 <fire(LEDStruct&)+0x34c>)
    3626:	d926      	bls.n	3676 <fire(LEDStruct&)+0x132>
    3628:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    362c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3630:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3634:	3219      	adds	r2, #25
    3636:	b292      	uxth	r2, r2
    3638:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    363c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3640:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3644:	3619      	adds	r6, #25
    3646:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3648:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    364c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3650:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3652:	b2d2      	uxtb	r2, r2
    3654:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    3658:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    365c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3660:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    3664:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3666:	8006      	strh	r6, [r0, #0]
    3668:	3960      	subs	r1, #96	; 0x60
    366a:	f892 027f 	ldrb.w	r0, [r2, #639]	; 0x27f
    366e:	fa80 f051 	uqadd8	r0, r0, r1
    3672:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}

	if (!leds.fire_sync) {
    3676:	f1bc 0f00 	cmp.w	ip, #0
    367a:	d112      	bne.n	36a2 <fire(LEDStruct&)+0x15e>
    367c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    367e:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3682:	4983      	ldr	r1, [pc, #524]	; (3890 <fire(LEDStruct&)+0x34c>)
    3684:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3688:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    368c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3690:	3219      	adds	r2, #25
    3692:	b292      	uxth	r2, r2
    3694:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3698:	b2c0      	uxtb	r0, r0
    369a:	4286      	cmp	r6, r0
    369c:	802a      	strh	r2, [r5, #0]
    369e:	f200 80cd 	bhi.w	383c <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    36a2:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    36a6:	2a00      	cmp	r2, #0
    36a8:	d15f      	bne.n	376a <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    36aa:	2b00      	cmp	r3, #0
    36ac:	f000 8226 	beq.w	3afc <fire(LEDStruct&)+0x5b8>
    36b0:	f204 277e 	addw	r7, r4, #638	; 0x27e
    36b4:	4690      	mov	r8, r2
    36b6:	46b9      	mov	r9, r7
    36b8:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    36ba:	3b01      	subs	r3, #1
    36bc:	ebc8 0503 	rsb	r5, r8, r3
    36c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    36c4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    36c8:	4630      	mov	r0, r6
    36ca:	f004 ffc9 	bl	8660 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36ce:	f89d 3014 	ldrb.w	r3, [sp, #20]
    36d2:	5563      	strb	r3, [r4, r5]
    36d4:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    36d6:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    36da:	f89d 2015 	ldrb.w	r2, [sp, #21]
    36de:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    36e0:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    36e2:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    36e6:	f108 0801 	add.w	r8, r8, #1
    36ea:	4543      	cmp	r3, r8
    36ec:	dce5      	bgt.n	36ba <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    36ee:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    36f2:	b30a      	cbz	r2, 3738 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    36f4:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    36f8:	2a00      	cmp	r2, #0
    36fa:	f040 81bf 	bne.w	3a7c <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    36fe:	4690      	mov	r8, r2
    3700:	2b00      	cmp	r3, #0
    3702:	f000 81fe 	beq.w	3b02 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    3706:	eb08 0503 	add.w	r5, r8, r3
    370a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    370e:	4630      	mov	r0, r6
    3710:	f004 ffa6 	bl	8660 <HeatColor(unsigned char)>
    3714:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3718:	f89d 2014 	ldrb.w	r2, [sp, #20]
    371c:	54e2      	strb	r2, [r4, r3]
    371e:	4423      	add	r3, r4
        g = rhs.g;
    3720:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    3724:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3728:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    372a:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    372c:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3730:	f108 0801 	add.w	r8, r8, #1
    3734:	4543      	cmp	r3, r8
    3736:	dce6      	bgt.n	3706 <fire(LEDStruct&)+0x1c2>
    3738:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    373c:	2a00      	cmp	r2, #0
    373e:	f000 80ad 	beq.w	389c <fire(LEDStruct&)+0x358>
    3742:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3746:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3748:	781a      	ldrb	r2, [r3, #0]
    374a:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    374e:	785a      	ldrb	r2, [r3, #1]
    3750:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3754:	789a      	ldrb	r2, [r3, #2]
    3756:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    375a:	3303      	adds	r3, #3
    375c:	4299      	cmp	r1, r3
    375e:	f1a4 0403 	sub.w	r4, r4, #3
    3762:	d1f1      	bne.n	3748 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3764:	b006      	add	sp, #24
    3766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    376a:	2b00      	cmp	r3, #0
    376c:	f000 80ea 	beq.w	3944 <fire(LEDStruct&)+0x400>
    3770:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3774:	46b9      	mov	r9, r7
    3776:	4625      	mov	r5, r4
    3778:	f04f 0800 	mov.w	r8, #0
    377c:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    377e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3782:	4630      	mov	r0, r6
    3784:	f004 ff6c 	bl	8660 <HeatColor(unsigned char)>
    3788:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    378c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3790:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3794:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    3796:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3798:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    379a:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    379e:	f108 0801 	add.w	r8, r8, #1
    37a2:	4543      	cmp	r3, r8
    37a4:	f105 0503 	add.w	r5, r5, #3
    37a8:	dce9      	bgt.n	377e <fire(LEDStruct&)+0x23a>
    37aa:	e7a0      	b.n	36ee <fire(LEDStruct&)+0x1aa>
    37ac:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    37b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    37b4:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    37b8:	fb9e fef3 	sdiv	lr, lr, r3
    37bc:	f10e 0e02 	add.w	lr, lr, #2
    37c0:	fa5f fe8e 	uxtb.w	lr, lr
    37c4:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    37c8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    37cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    37d0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    37d4:	3219      	adds	r2, #25
    37d6:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    37d8:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    37dc:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    37e0:	b2c9      	uxtb	r1, r1
    37e2:	fb11 f10e 	smulbb	r1, r1, lr
    37e6:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    37ea:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    37ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    37f0:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    37f2:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    37f4:	dbe8      	blt.n	37c8 <fire(LEDStruct&)+0x284>
    37f6:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    37f8:	f1a3 0e03 	sub.w	lr, r3, #3
    37fc:	f1be 0f01 	cmp.w	lr, #1
    3800:	f04f 0c00 	mov.w	ip, #0
    3804:	f73f aee4 	bgt.w	35d0 <fire(LEDStruct&)+0x8c>
    3808:	e6fd      	b.n	3606 <fire(LEDStruct&)+0xc2>
    380a:	f203 26c6 	addw	r6, r3, #710	; 0x2c6
    380e:	f503 7732 	add.w	r7, r3, #712	; 0x2c8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3812:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3898 <fire(LEDStruct&)+0x354>
    3816:	4426      	add	r6, r4
    3818:	4427      	add	r7, r4
    381a:	7831      	ldrb	r1, [r6, #0]
    381c:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3820:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3824:	fb88 9001 	smull	r9, r0, r8, r1
    3828:	f10e 3eff 	add.w	lr, lr, #4294967295
    382c:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3830:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3834:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3838:	d1ef      	bne.n	381a <fire(LEDStruct&)+0x2d6>
    383a:	e6e4      	b.n	3606 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    383c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3840:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3844:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3848:	3219      	adds	r2, #25
    384a:	b292      	uxth	r2, r2
    384c:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3850:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3854:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3858:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    385a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    385e:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3860:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3862:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3866:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    386a:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    386c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3870:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3874:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3878:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    387c:	800d      	strh	r5, [r1, #0]
    387e:	1201      	asrs	r1, r0, #8
    3880:	3960      	subs	r1, #96	; 0x60
    3882:	4630      	mov	r0, r6
    3884:	fa80 f051 	uqadd8	r0, r0, r1
    3888:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
    388c:	e709      	b.n	36a2 <fire(LEDStruct&)+0x15e>
    388e:	bf00      	nop
    3890:	1fff875a 	.word	0x1fff875a
    3894:	1fff95c1 	.word	0x1fff95c1
    3898:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    389c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    38a0:	2a00      	cmp	r2, #0
    38a2:	d15a      	bne.n	395a <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    38a4:	2b00      	cmp	r3, #0
    38a6:	f43f af5d 	beq.w	3764 <fire(LEDStruct&)+0x220>
    38aa:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    38ae:	46b9      	mov	r9, r7
    38b0:	f04f 0800 	mov.w	r8, #0
    38b4:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    38b6:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    38ba:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    38be:	354b      	adds	r5, #75	; 0x4b
    38c0:	4445      	add	r5, r8
    38c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    38c6:	4630      	mov	r0, r6
    38c8:	f004 feca 	bl	8660 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    38d0:	5563      	strb	r3, [r4, r5]
    38d2:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    38d4:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    38d8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    38dc:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    38de:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    38e0:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    38e4:	f108 0801 	add.w	r8, r8, #1
    38e8:	4543      	cmp	r3, r8
    38ea:	dce4      	bgt.n	38b6 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    38ec:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    38f0:	2a00      	cmp	r2, #0
    38f2:	f43f af37 	beq.w	3764 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    38f6:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    38fa:	2a00      	cmp	r2, #0
    38fc:	f000 80dd 	beq.w	3aba <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    3900:	2b00      	cmp	r3, #0
    3902:	f43f af2f 	beq.w	3764 <fire(LEDStruct&)+0x220>
    3906:	4625      	mov	r5, r4
    3908:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    390c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3910:	4630      	mov	r0, r6
    3912:	f004 fea5 	bl	8660 <HeatColor(unsigned char)>
    3916:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    391a:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    391e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3922:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    3926:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    392a:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    392e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3932:	f108 0801 	add.w	r8, r8, #1
    3936:	4543      	cmp	r3, r8
    3938:	f105 0503 	add.w	r5, r5, #3
    393c:	dce6      	bgt.n	390c <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    393e:	b006      	add	sp, #24
    3940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3944:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3948:	2b00      	cmp	r3, #0
    394a:	f040 80da 	bne.w	3b02 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    394e:	f1bc 0f00 	cmp.w	ip, #0
    3952:	f47f aef6 	bne.w	3742 <fire(LEDStruct&)+0x1fe>
    3956:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    395a:	2b00      	cmp	r3, #0
    395c:	f43f af02 	beq.w	3764 <fire(LEDStruct&)+0x220>
    3960:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3964:	46b9      	mov	r9, r7
    3966:	4625      	mov	r5, r4
    3968:	f04f 0800 	mov.w	r8, #0
    396c:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    396e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3972:	4630      	mov	r0, r6
    3974:	f004 fe74 	bl	8660 <HeatColor(unsigned char)>
    3978:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    397c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3980:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3984:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    3988:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    398c:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3990:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3994:	f108 0801 	add.w	r8, r8, #1
    3998:	4543      	cmp	r3, r8
    399a:	f1a5 0503 	sub.w	r5, r5, #3
    399e:	dce6      	bgt.n	396e <fire(LEDStruct&)+0x42a>
    39a0:	e7a4      	b.n	38ec <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    39a2:	4620      	mov	r0, r4
    39a4:	f7ff fd94 	bl	34d0 <fire_update(LEDStruct&)>
    39a8:	e5db      	b.n	3562 <fire(LEDStruct&)+0x1e>
    39aa:	882b      	ldrh	r3, [r5, #0]
    39ac:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    39b4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    39b8:	3119      	adds	r1, #25
    39ba:	b289      	uxth	r1, r1
    39bc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    39c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    39c4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    39c8:	3219      	adds	r2, #25
    39ca:	b292      	uxth	r2, r2
    39cc:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    39d0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    39d4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    39d8:	f10e 0e19 	add.w	lr, lr, #25
    39dc:	fa1f fe8e 	uxth.w	lr, lr
    39e0:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    39e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    39e8:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    39ec:	3619      	adds	r6, #25
    39ee:	b2b6      	uxth	r6, r6
    39f0:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    39f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    39f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39fc:	3319      	adds	r3, #25
    39fe:	b29b      	uxth	r3, r3
    3a00:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3a04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a08:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3a0c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a10:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a14:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3a18:	b2f6      	uxtb	r6, r6
    3a1a:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a1e:	3719      	adds	r7, #25
    3a20:	b2db      	uxtb	r3, r3
    3a22:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3a26:	b2bf      	uxth	r7, r7
    3a28:	11b6      	asrs	r6, r6, #6
    3a2a:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3a2e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3a32:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3a36:	119b      	asrs	r3, r3, #6
    3a38:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a3c:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3a40:	333c      	adds	r3, #60	; 0x3c
    3a42:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3a46:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3a4a:	fa5f f883 	uxtb.w	r8, r3
    3a4e:	fa5f fc8c 	uxtb.w	ip, ip
    3a52:	3601      	adds	r6, #1
    3a54:	f10e 0314 	add.w	r3, lr, #20
    3a58:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3a5c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3a60:	f8cd c000 	str.w	ip, [sp]
    3a64:	f8cd 8004 	str.w	r8, [sp, #4]
    3a68:	9602      	str	r6, [sp, #8]
    3a6a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3a6e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3a72:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a74:	802f      	strh	r7, [r5, #0]
    3a76:	f7ff fcc1 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3a7a:	e56d      	b.n	3558 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d040      	beq.n	3b02 <fire(LEDStruct&)+0x5be>
    3a80:	4625      	mov	r5, r4
    3a82:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    3a86:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3a8a:	4630      	mov	r0, r6
    3a8c:	f004 fde8 	bl	8660 <HeatColor(unsigned char)>
    3a90:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a94:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3a98:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a9c:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    3aa0:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    3aa4:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3aa8:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3aac:	f108 0801 	add.w	r8, r8, #1
    3ab0:	4543      	cmp	r3, r8
    3ab2:	f1a5 0503 	sub.w	r5, r5, #3
    3ab6:	dce6      	bgt.n	3a86 <fire(LEDStruct&)+0x542>
    3ab8:	e63e      	b.n	3738 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3aba:	4690      	mov	r8, r2
    3abc:	2b00      	cmp	r3, #0
    3abe:	f43f ae51 	beq.w	3764 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3ac2:	334b      	adds	r3, #75	; 0x4b
    3ac4:	ebc8 0503 	rsb	r5, r8, r3
    3ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3acc:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3ad0:	4630      	mov	r0, r6
    3ad2:	f004 fdc5 	bl	8660 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ad6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3ada:	5563      	strb	r3, [r4, r5]
    3adc:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3ade:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3ae2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3ae6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3ae8:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3aea:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3aee:	f108 0801 	add.w	r8, r8, #1
    3af2:	4543      	cmp	r3, r8
    3af4:	dce5      	bgt.n	3ac2 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3af6:	b006      	add	sp, #24
    3af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3afc:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3b00:	b163      	cbz	r3, 3b1c <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3b02:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    3b06:	2b00      	cmp	r3, #0
    3b08:	f47f ae1b 	bne.w	3742 <fire(LEDStruct&)+0x1fe>
    3b0c:	e62a      	b.n	3764 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3b0e:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3b12:	b10a      	cbz	r2, 3b18 <fire(LEDStruct&)+0x5d4>
    3b14:	882a      	ldrh	r2, [r5, #0]
    3b16:	e554      	b.n	35c2 <fire(LEDStruct&)+0x7e>
    3b18:	882a      	ldrh	r2, [r5, #0]
    3b1a:	e66d      	b.n	37f8 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3b1c:	f1bc 0f00 	cmp.w	ip, #0
    3b20:	f47f ae0f 	bne.w	3742 <fire(LEDStruct&)+0x1fe>
    3b24:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3b28:	e6bc      	b.n	38a4 <fire(LEDStruct&)+0x360>
    3b2a:	bf00      	nop

00003b2c <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    3b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3b30:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3b34:	4dd0      	ldr	r5, [pc, #832]	; (3e78 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    3b36:	b087      	sub	sp, #28
    3b38:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	f000 81da 	beq.w	3ef4 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    3b40:	4bce      	ldr	r3, [pc, #824]	; (3e7c <torch(LEDStruct&)+0x350>)
    3b42:	781b      	ldrb	r3, [r3, #0]
    3b44:	2b00      	cmp	r3, #0
    3b46:	f040 8242 	bne.w	3fce <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3b4a:	f894 c315 	ldrb.w	ip, [r4, #789]	; 0x315
    3b4e:	4663      	mov	r3, ip
    3b50:	f1bc 0f00 	cmp.w	ip, #0
    3b54:	f000 823f 	beq.w	3fd6 <torch(LEDStruct&)+0x4aa>
    3b58:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3b5c:	882a      	ldrh	r2, [r5, #0]
    3b5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3b62:	004f      	lsls	r7, r1, #1
    3b64:	f20c 2e7e 	addw	lr, ip, #638	; 0x27e
    3b68:	fb97 f7fc 	sdiv	r7, r7, ip
    3b6c:	3702      	adds	r7, #2
    3b6e:	b2ff      	uxtb	r7, r7
    3b70:	44a6      	add	lr, r4
    3b72:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3b76:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3b7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3b7e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3b82:	3219      	adds	r2, #25
    3b84:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3b86:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3b8a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3b8e:	b2c9      	uxtb	r1, r1
    3b90:	fb11 f107 	smulbb	r1, r1, r7
    3b94:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3b98:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3b9c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3b9e:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3ba0:	d1e9      	bne.n	3b76 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3ba2:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3ba6:	802a      	strh	r2, [r5, #0]
    3ba8:	2e00      	cmp	r6, #0
    3baa:	f000 816b 	beq.w	3e84 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3bae:	f1ac 0703 	sub.w	r7, ip, #3
    3bb2:	2f01      	cmp	r7, #1
    3bb4:	f04f 0901 	mov.w	r9, #1
    3bb8:	dd1a      	ble.n	3bf0 <torch(LEDStruct&)+0xc4>
    3bba:	f20c 207b 	addw	r0, ip, #635	; 0x27b
    3bbe:	f20c 267d 	addw	r6, ip, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3bc2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 3e80 <torch(LEDStruct&)+0x354>
    3bc6:	4420      	add	r0, r4
    3bc8:	4426      	add	r6, r4
    3bca:	f204 2e7f 	addw	lr, r4, #639	; 0x27f
    3bce:	7801      	ldrb	r1, [r0, #0]
    3bd0:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    3bd4:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    3bd8:	fb88 ba01 	smull	fp, sl, r8, r1
    3bdc:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3be0:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3be2:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3be6:	d1f2      	bne.n	3bce <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    3be8:	f1b9 0f00 	cmp.w	r9, #0
    3bec:	f000 812c 	beq.w	3e48 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3bf0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3bf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3bf8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3bfc:	3219      	adds	r2, #25
    3bfe:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    3c00:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3c04:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3c08:	802a      	strh	r2, [r5, #0]
    3c0a:	b2c0      	uxtb	r0, r0
    3c0c:	4286      	cmp	r6, r0
    3c0e:	499a      	ldr	r1, [pc, #616]	; (3e78 <torch(LEDStruct&)+0x34c>)
    3c10:	d928      	bls.n	3c64 <torch(LEDStruct&)+0x138>
    3c12:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3c16:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3c1a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c1e:	3219      	adds	r2, #25
    3c20:	b292      	uxth	r2, r2
    3c22:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3c26:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3c2a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3c2e:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c30:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c34:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c36:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c38:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3c3c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3c40:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    3c42:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3c46:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c4a:	800e      	strh	r6, [r1, #0]
    3c4c:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    3c50:	f892 627f 	ldrb.w	r6, [r2, #639]	; 0x27f
    3c54:	1200      	asrs	r0, r0, #8
    3c56:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    3c5a:	4630      	mov	r0, r6
    3c5c:	fa80 f051 	uqadd8	r0, r0, r1
    3c60:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}
	if (!leds.fire_sync) {
    3c64:	f1b9 0f00 	cmp.w	r9, #0
    3c68:	d112      	bne.n	3c90 <torch(LEDStruct&)+0x164>
    3c6a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3c6c:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3c70:	4981      	ldr	r1, [pc, #516]	; (3e78 <torch(LEDStruct&)+0x34c>)
    3c72:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3c76:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3c7a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c7e:	3219      	adds	r2, #25
    3c80:	b292      	uxth	r2, r2
    3c82:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3c86:	b2c0      	uxtb	r0, r0
    3c88:	4286      	cmp	r6, r0
    3c8a:	802a      	strh	r2, [r5, #0]
    3c8c:	f200 80af 	bhi.w	3dee <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3c90:	f1bc 0f00 	cmp.w	ip, #0
    3c94:	f000 81a4 	beq.w	3fe0 <torch(LEDStruct&)+0x4b4>
    3c98:	f204 277e 	addw	r7, r4, #638	; 0x27e
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c9c:	2600      	movs	r6, #0
    3c9e:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    3ca2:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    3ca6:	199d      	adds	r5, r3, r6
    3ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3cac:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3cb0:	4648      	mov	r0, r9
    3cb2:	f004 fcd5 	bl	8660 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cb6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3cba:	5563      	strb	r3, [r4, r5]
    3cbc:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3cbe:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3cc2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3cc6:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3cc8:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3cca:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3cce:	3601      	adds	r6, #1
    3cd0:	42b3      	cmp	r3, r6
    3cd2:	dce6      	bgt.n	3ca2 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3cd4:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3cd8:	2e00      	cmp	r6, #0
    3cda:	d175      	bne.n	3dc8 <torch(LEDStruct&)+0x29c>
    3cdc:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	f000 8183 	beq.w	3fec <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3ce6:	334a      	adds	r3, #74	; 0x4a
    3ce8:	1b9d      	subs	r5, r3, r6
    3cea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3cee:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3cf2:	4648      	mov	r0, r9
    3cf4:	f004 fcb4 	bl	8660 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3cf8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3cfc:	5563      	strb	r3, [r4, r5]
    3cfe:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3d00:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3d04:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3d08:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3d0a:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3d0c:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d10:	3601      	adds	r6, #1
    3d12:	42b3      	cmp	r3, r6
    3d14:	dce7      	bgt.n	3ce6 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3d16:	2b4b      	cmp	r3, #75	; 0x4b
    3d18:	d047      	beq.n	3daa <torch(LEDStruct&)+0x27e>
    3d1a:	f10d 0914 	add.w	r9, sp, #20
    3d1e:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3d22:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3d24:	4626      	mov	r6, r4
    3d26:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3d28:	f04f 0a01 	mov.w	sl, #1
    3d2c:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    3d30:	f8cd a000 	str.w	sl, [sp]
    3d34:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    3d38:	fb98 f3f3 	sdiv	r3, r8, r3
    3d3c:	441a      	add	r2, r3
    3d3e:	b2d2      	uxtb	r2, r2
    3d40:	23ff      	movs	r3, #255	; 0xff
    3d42:	4659      	mov	r1, fp
    3d44:	4648      	mov	r0, r9
    3d46:	f004 fcad 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d4a:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3d4e:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3d52:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d56:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    3d58:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    3d5a:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3d5c:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    3d60:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    3d64:	fb98 f8f2 	sdiv	r8, r8, r2
    3d68:	eb08 0203 	add.w	r2, r8, r3
    3d6c:	b2d2      	uxtb	r2, r2
    3d6e:	23ff      	movs	r3, #255	; 0xff
    3d70:	4659      	mov	r1, fp
    3d72:	f8cd a000 	str.w	sl, [sp]
    3d76:	4648      	mov	r0, r9
    3d78:	f004 fc94 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3d7c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3d80:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d84:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3d88:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d8c:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    3d90:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3d94:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d98:	3501      	adds	r5, #1
    3d9a:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    3d9e:	42aa      	cmp	r2, r5
    3da0:	f106 0603 	add.w	r6, r6, #3
    3da4:	f1a7 0703 	sub.w	r7, r7, #3
    3da8:	dcc0      	bgt.n	3d2c <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3daa:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3dae:	2b00      	cmp	r3, #0
    3db0:	f040 8096 	bne.w	3ee0 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    3db4:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    3db8:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    3dbc:	1a9b      	subs	r3, r3, r2
    3dbe:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
}
    3dc2:	b007      	add	sp, #28
    3dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3dc8:	4621      	mov	r1, r4
    3dca:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3dce:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3dd0:	7810      	ldrb	r0, [r2, #0]
    3dd2:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    3dd6:	7850      	ldrb	r0, [r2, #1]
    3dd8:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    3ddc:	7890      	ldrb	r0, [r2, #2]
    3dde:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    3de2:	3203      	adds	r2, #3
    3de4:	4295      	cmp	r5, r2
    3de6:	f1a1 0103 	sub.w	r1, r1, #3
    3dea:	d1f1      	bne.n	3dd0 <torch(LEDStruct&)+0x2a4>
    3dec:	e793      	b.n	3d16 <torch(LEDStruct&)+0x1ea>
    3dee:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3df2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3df6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3dfa:	3219      	adds	r2, #25
    3dfc:	b292      	uxth	r2, r2
    3dfe:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3e02:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3e06:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3e0a:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e0c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e10:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3e12:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e14:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3e18:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3e1c:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3e1e:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3e22:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3e26:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3e2a:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e2e:	800d      	strh	r5, [r1, #0]
    3e30:	1201      	asrs	r1, r0, #8
    3e32:	3960      	subs	r1, #96	; 0x60
    3e34:	4630      	mov	r0, r6
    3e36:	fa80 f051 	uqadd8	r0, r0, r1
    3e3a:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3e3e:	f1bc 0f00 	cmp.w	ip, #0
    3e42:	f47f af29 	bne.w	3c98 <torch(LEDStruct&)+0x16c>
    3e46:	e0cf      	b.n	3fe8 <torch(LEDStruct&)+0x4bc>
    3e48:	f20c 26c6 	addw	r6, ip, #710	; 0x2c6
    3e4c:	f50c 7e32 	add.w	lr, ip, #712	; 0x2c8
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3e50:	f8df 802c 	ldr.w	r8, [pc, #44]	; 3e80 <torch(LEDStruct&)+0x354>
    3e54:	4426      	add	r6, r4
    3e56:	44a6      	add	lr, r4
    3e58:	7831      	ldrb	r1, [r6, #0]
    3e5a:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3e5e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3e62:	fb88 a001 	smull	sl, r0, r8, r1
    3e66:	3f01      	subs	r7, #1
    3e68:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3e6c:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3e6e:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3e72:	d1f1      	bne.n	3e58 <torch(LEDStruct&)+0x32c>
    3e74:	e6bc      	b.n	3bf0 <torch(LEDStruct&)+0xc4>
    3e76:	bf00      	nop
    3e78:	1fff875a 	.word	0x1fff875a
    3e7c:	1fff95c1 	.word	0x1fff95c1
    3e80:	55555556 	.word	0x55555556
    3e84:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3e88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3e8c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3e90:	fb9e fefc 	sdiv	lr, lr, ip
    3e94:	f10e 0e02 	add.w	lr, lr, #2
    3e98:	fa5f fe8e 	uxtb.w	lr, lr
    3e9c:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3ea0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3ea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3ea8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3eac:	3219      	adds	r2, #25
    3eae:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3eb0:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3eb4:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3eb8:	b2c9      	uxtb	r1, r1
    3eba:	fb11 f10e 	smulbb	r1, r1, lr
    3ebe:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3ec2:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3ec4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3ec8:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3eca:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3ecc:	dbe8      	blt.n	3ea0 <torch(LEDStruct&)+0x374>
    3ece:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3ed0:	f1ac 0703 	sub.w	r7, ip, #3
    3ed4:	2f01      	cmp	r7, #1
    3ed6:	f04f 0900 	mov.w	r9, #0
    3eda:	f73f ae6e 	bgt.w	3bba <torch(LEDStruct&)+0x8e>
    3ede:	e687      	b.n	3bf0 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3ee0:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    3ee4:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    3ee8:	4413      	add	r3, r2
    3eea:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
	else			   { leds.torch_index -= leds.torch_diff; }
}
    3eee:	b007      	add	sp, #28
    3ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ef4:	882b      	ldrh	r3, [r5, #0]
    3ef6:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3efa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3efe:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3f02:	3119      	adds	r1, #25
    3f04:	b289      	uxth	r1, r1
    3f06:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3f0a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3f0e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f12:	3219      	adds	r2, #25
    3f14:	b292      	uxth	r2, r2
    3f16:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3f1a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3f1e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3f22:	f10e 0e19 	add.w	lr, lr, #25
    3f26:	fa1f fe8e 	uxth.w	lr, lr
    3f2a:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3f2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3f32:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3f36:	3619      	adds	r6, #25
    3f38:	b2b6      	uxth	r6, r6
    3f3a:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3f3e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f42:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f46:	3319      	adds	r3, #25
    3f48:	b29b      	uxth	r3, r3
    3f4a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3f4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f52:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3f56:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f5a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f5e:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3f62:	b2f6      	uxtb	r6, r6
    3f64:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f68:	3719      	adds	r7, #25
    3f6a:	b2db      	uxtb	r3, r3
    3f6c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3f70:	b2bf      	uxth	r7, r7
    3f72:	11b6      	asrs	r6, r6, #6
    3f74:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3f78:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3f7c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3f80:	119b      	asrs	r3, r3, #6
    3f82:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f86:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3f8a:	333c      	adds	r3, #60	; 0x3c
    3f8c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3f90:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3f94:	fa5f fc8c 	uxtb.w	ip, ip
    3f98:	fa5f f883 	uxtb.w	r8, r3
    3f9c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3fa0:	f10e 0314 	add.w	r3, lr, #20
    3fa4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3fa8:	3601      	adds	r6, #1
    3faa:	f8cd c000 	str.w	ip, [sp]
    3fae:	f8cd 8004 	str.w	r8, [sp, #4]
    3fb2:	9602      	str	r6, [sp, #8]
    3fb4:	b2db      	uxtb	r3, r3
    3fb6:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3fba:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fbe:	802f      	strh	r7, [r5, #0]
    3fc0:	f7ff fa1c 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    3fc4:	4b0b      	ldr	r3, [pc, #44]	; (3ff4 <torch(LEDStruct&)+0x4c8>)
    3fc6:	781b      	ldrb	r3, [r3, #0]
    3fc8:	2b00      	cmp	r3, #0
    3fca:	f43f adbe 	beq.w	3b4a <torch(LEDStruct&)+0x1e>
    3fce:	4620      	mov	r0, r4
    3fd0:	f7ff fa7e 	bl	34d0 <fire_update(LEDStruct&)>
    3fd4:	e5b9      	b.n	3b4a <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3fd6:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3fda:	b14a      	cbz	r2, 3ff0 <torch(LEDStruct&)+0x4c4>
    3fdc:	882a      	ldrh	r2, [r5, #0]
    3fde:	e5e6      	b.n	3bae <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3fe0:	f1b9 0f00 	cmp.w	r9, #0
    3fe4:	f47f aef0 	bne.w	3dc8 <torch(LEDStruct&)+0x29c>
    3fe8:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3fec:	2300      	movs	r3, #0
    3fee:	e696      	b.n	3d1e <torch(LEDStruct&)+0x1f2>
    3ff0:	882a      	ldrh	r2, [r5, #0]
    3ff2:	e76d      	b.n	3ed0 <torch(LEDStruct&)+0x3a4>
    3ff4:	1fff95c1 	.word	0x1fff95c1

00003ff8 <confetti_update(LEDStruct&)>:
	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3ff8:	4b0e      	ldr	r3, [pc, #56]	; (4034 <confetti_update(LEDStruct&)+0x3c>)

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    3ffa:	4a0f      	ldr	r2, [pc, #60]	; (4038 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    3ffc:	781b      	ldrb	r3, [r3, #0]

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    3ffe:	2100      	movs	r1, #0
    4000:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4002:	b13b      	cbz	r3, 4014 <confetti_update(LEDStruct&)+0x1c>
    4004:	2b01      	cmp	r3, #1
    4006:	d103      	bne.n	4010 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    4008:	4b0c      	ldr	r3, [pc, #48]	; (403c <confetti_update(LEDStruct&)+0x44>)
    400a:	881b      	ldrh	r3, [r3, #0]
    400c:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    4010:	f7fd bf08 	b.w	1e24 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    4014:	4b09      	ldr	r3, [pc, #36]	; (403c <confetti_update(LEDStruct&)+0x44>)
    4016:	881b      	ldrh	r3, [r3, #0]
    4018:	2b00      	cmp	r3, #0
    401a:	bf14      	ite	ne
    401c:	2301      	movne	r3, #1
    401e:	2300      	moveq	r3, #0
    4020:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4024:	bf14      	ite	ne
    4026:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    4028:	234b      	moveq	r3, #75	; 0x4b
    402a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    402e:	f7fd bef9 	b.w	1e24 <LEDDebug(LEDStruct&)>
    4032:	bf00      	nop
    4034:	1fff95d0 	.word	0x1fff95d0
    4038:	1fff95c1 	.word	0x1fff95c1
    403c:	1fff95c8 	.word	0x1fff95c8

00004040 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    4040:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    4042:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    4046:	4e4a      	ldr	r6, [pc, #296]	; (4170 <confetti(LEDStruct&)+0x130>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    4048:	b085      	sub	sp, #20
    404a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    404c:	bb83      	cbnz	r3, 40b0 <confetti(LEDStruct&)+0x70>
    404e:	8833      	ldrh	r3, [r6, #0]
    4050:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4054:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4058:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    405c:	3319      	adds	r3, #25
    405e:	b29b      	uxth	r3, r3
    4060:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4064:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4068:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    406c:	3119      	adds	r1, #25
    406e:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4070:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4074:	b2d2      	uxtb	r2, r2
    4076:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    407a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    407e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4082:	11d2      	asrs	r2, r2, #7
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    4084:	2001      	movs	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4086:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    408a:	320a      	adds	r2, #10
	leds.mode_type = CONFETTI;
    408c:	2512      	movs	r5, #18
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    408e:	8031      	strh	r1, [r6, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    4090:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4094:	b2d2      	uxtb	r2, r2
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    4096:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    409a:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    409e:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    40a2:	2b00      	cmp	r3, #0
    40a4:	d15c      	bne.n	4160 <confetti(LEDStruct&)+0x120>
	else { leds.strip_range = ONE_SIDE; }
    40a6:	234b      	movs	r3, #75	; 0x4b
    40a8:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

	leds.confetti_fade = cf;
    40ac:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    40b0:	4b30      	ldr	r3, [pc, #192]	; (4174 <confetti(LEDStruct&)+0x134>)
    40b2:	781b      	ldrb	r3, [r3, #0]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d157      	bne.n	4168 <confetti(LEDStruct&)+0x128>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    40b8:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    40bc:	4620      	mov	r0, r4
    40be:	2196      	movs	r1, #150	; 0x96
    40c0:	f004 fa90 	bl	85e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40c4:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    40c6:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40ca:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    40ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    40d2:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    40d6:	3319      	adds	r3, #25
    40d8:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40da:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    40de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    40e2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    40e6:	3719      	adds	r7, #25
    40e8:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    40ea:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    40ee:	fb03 f305 	mul.w	r3, r3, r5
    40f2:	2101      	movs	r1, #1
    40f4:	0c1d      	lsrs	r5, r3, #16
    40f6:	9100      	str	r1, [sp, #0]
    40f8:	a803      	add	r0, sp, #12
    40fa:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    40fe:	b2d2      	uxtb	r2, r2
    4100:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4102:	8037      	strh	r7, [r6, #0]
    4104:	f004 face 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4108:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    410c:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    410e:	5ce2      	ldrb	r2, [r4, r3]
    4110:	f89d 000c 	ldrb.w	r0, [sp, #12]
    4114:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4118:	54e2      	strb	r2, [r4, r3]
    411a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    411e:	784a      	ldrb	r2, [r1, #1]
    4120:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4124:	704a      	strb	r2, [r1, #1]
    4126:	788b      	ldrb	r3, [r1, #2]
    4128:	f89d 200e 	ldrb.w	r2, [sp, #14]
    412c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4130:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    4132:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4136:	b98b      	cbnz	r3, 415c <confetti(LEDStruct&)+0x11c>
    4138:	4620      	mov	r0, r4
    413a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    413e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4140:	781a      	ldrb	r2, [r3, #0]
    4142:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4146:	785a      	ldrb	r2, [r3, #1]
    4148:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    414c:	789a      	ldrb	r2, [r3, #2]
    414e:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4152:	3303      	adds	r3, #3
    4154:	428b      	cmp	r3, r1
    4156:	f1a0 0003 	sub.w	r0, r0, #3
    415a:	d1f1      	bne.n	4140 <confetti(LEDStruct&)+0x100>
}
    415c:	b005      	add	sp, #20
    415e:	bdf0      	pop	{r4, r5, r6, r7, pc}
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4160:	2396      	movs	r3, #150	; 0x96
    4162:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    4166:	e7a1      	b.n	40ac <confetti(LEDStruct&)+0x6c>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4168:	4620      	mov	r0, r4
    416a:	f7ff ff45 	bl	3ff8 <confetti_update(LEDStruct&)>
    416e:	e7a3      	b.n	40b8 <confetti(LEDStruct&)+0x78>
    4170:	1fff875a 	.word	0x1fff875a
    4174:	1fff95c1 	.word	0x1fff95c1

00004178 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4178:	4b24      	ldr	r3, [pc, #144]	; (420c <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    417a:	4a25      	ldr	r2, [pc, #148]	; (4210 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    417c:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    417e:	2100      	movs	r1, #0
    4180:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4182:	2b09      	cmp	r3, #9
    4184:	d80a      	bhi.n	419c <one_sin_update(LEDStruct&)+0x24>
    4186:	e8df f003 	tbb	[pc, r3]
    418a:	1e10      	.short	0x1e10
    418c:	322d2823 	.word	0x322d2823
    4190:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    4194:	4b1f      	ldr	r3, [pc, #124]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    4196:	881b      	ldrh	r3, [r3, #0]
    4198:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    419c:	f7fd be42 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    41a0:	4b1c      	ldr	r3, [pc, #112]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41a2:	881b      	ldrh	r3, [r3, #0]
    41a4:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    41a8:	e7f8      	b.n	419c <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    41aa:	4b1a      	ldr	r3, [pc, #104]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41ac:	881b      	ldrh	r3, [r3, #0]
    41ae:	2b00      	cmp	r3, #0
    41b0:	bf14      	ite	ne
    41b2:	2301      	movne	r3, #1
    41b4:	2300      	moveq	r3, #0
    41b6:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    41ba:	bf14      	ite	ne
    41bc:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    41be:	234b      	moveq	r3, #75	; 0x4b
    41c0:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    41c4:	e7ea      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    41c6:	4b13      	ldr	r3, [pc, #76]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41c8:	881b      	ldrh	r3, [r3, #0]
    41ca:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    41ce:	e7e5      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    41d0:	4b10      	ldr	r3, [pc, #64]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41d2:	881b      	ldrh	r3, [r3, #0]
    41d4:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    41d8:	e7e0      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    41da:	4b0e      	ldr	r3, [pc, #56]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41dc:	881b      	ldrh	r3, [r3, #0]
    41de:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    41e2:	e7db      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    41e4:	4b0b      	ldr	r3, [pc, #44]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41e6:	881b      	ldrh	r3, [r3, #0]
    41e8:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    41ec:	e7d6      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    41ee:	4b09      	ldr	r3, [pc, #36]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41f0:	881b      	ldrh	r3, [r3, #0]
    41f2:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    41f6:	e7d1      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    41f8:	4b06      	ldr	r3, [pc, #24]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    41fa:	881b      	ldrh	r3, [r3, #0]
    41fc:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    4200:	e7cc      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    4202:	4b04      	ldr	r3, [pc, #16]	; (4214 <one_sin_update(LEDStruct&)+0x9c>)
    4204:	881b      	ldrh	r3, [r3, #0]
    4206:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    420a:	e7c7      	b.n	419c <one_sin_update(LEDStruct&)+0x24>
    420c:	1fff95d0 	.word	0x1fff95d0
    4210:	1fff95c1 	.word	0x1fff95c1
    4214:	1fff95c8 	.word	0x1fff95c8

00004218 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    421c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    4220:	b085      	sub	sp, #20
    4222:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    4224:	2b00      	cmp	r3, #0
    4226:	f040 80b0 	bne.w	438a <one_sin(LEDStruct&)+0x172>
    422a:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 44d0 <one_sin(LEDStruct&)+0x2b8>
    422e:	f8b8 3000 	ldrh.w	r3, [r8]
    4232:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4236:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    423a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    423e:	3519      	adds	r5, #25
    4240:	b2ad      	uxth	r5, r5
    4242:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    4246:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    424a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    424e:	3319      	adds	r3, #25
    4250:	b29b      	uxth	r3, r3
    4252:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    4256:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    425a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    425e:	f10e 0e19 	add.w	lr, lr, #25
    4262:	fa1f fe8e 	uxth.w	lr, lr
    4266:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    426a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    426e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4272:	3119      	adds	r1, #25
    4274:	b289      	uxth	r1, r1
    4276:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    427a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    427e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4282:	3719      	adds	r7, #25
    4284:	b2bf      	uxth	r7, r7
    4286:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    428a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    428e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4292:	3019      	adds	r0, #25
    4294:	b280      	uxth	r0, r0
    4296:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    429a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    429e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    42a2:	3619      	adds	r6, #25
    42a4:	b2b6      	uxth	r6, r6
    42a6:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    42aa:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    42ae:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    42b2:	f10c 0c19 	add.w	ip, ip, #25
    42b6:	fa1f fc8c 	uxth.w	ip, ip
    42ba:	eb0c 294c 	add.w	r9, ip, ip, lsl #9
    42be:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
    42c2:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42c6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42ca:	f109 0919 	add.w	r9, r9, #25
    42ce:	fa1f f989 	uxth.w	r9, r9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42d2:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42d4:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42d8:	b2cb      	uxtb	r3, r1
    42da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42de:	eb09 2119 	add.w	r1, r9, r9, lsr #8
    42e2:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    42e6:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42ea:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42ec:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    42f0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42f4:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    42f8:	b2c0      	uxtb	r0, r0
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    42fa:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    42fe:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4300:	f8a8 9000 	strh.w	r9, [r8]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4304:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    4308:	f04f 0801 	mov.w	r8, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    430c:	3201      	adds	r2, #1
    430e:	f3ce 1e81 	ubfx	lr, lr, #6, #2
    4312:	f3c3 1307 	ubfx	r3, r3, #4, #8
    4316:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    431a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    431e:	f3c6 1642 	ubfx	r6, r6, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4322:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4326:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.mode_type = ONE_SIN;
    432a:	f04f 0913 	mov.w	r9, #19
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    432e:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4332:	b2d2      	uxtb	r2, r2
    4334:	f10e 0e01 	add.w	lr, lr, #1
    4338:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    433c:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    433e:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4342:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4344:	f3c1 11c7 	ubfx	r1, r1, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4348:	fa5f fc8c 	uxtb.w	ip, ip
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    434c:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    4350:	f884 8229 	strb.w	r8, [r4, #553]	; 0x229
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    4354:	f884 922c 	strb.w	r9, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4358:	2d00      	cmp	r5, #0
    435a:	f040 80ae 	bne.w	44ba <one_sin(LEDStruct&)+0x2a2>
	else { leds.strip_range = ONE_SIDE; }
    435e:	254b      	movs	r5, #75	; 0x4b
    4360:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    4364:	2500      	movs	r5, #0
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    4366:	f884 233f 	strb.w	r2, [r4, #831]	; 0x33f
	leds.sin_speed		= ss;
    436a:	f884 e340 	strb.w	lr, [r4, #832]	; 0x340
	leds.sin_cutoff		= sc;
    436e:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    4372:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    4376:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    437a:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    437e:	f884 c34f 	strb.w	ip, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    4382:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
	leds.sin_start		= 0;
    4386:	f884 5345 	strb.w	r5, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    438a:	4b50      	ldr	r3, [pc, #320]	; (44cc <one_sin(LEDStruct&)+0x2b4>)
    438c:	781b      	ldrb	r3, [r3, #0]
    438e:	2b00      	cmp	r3, #0
    4390:	f040 8097 	bne.w	44c2 <one_sin(LEDStruct&)+0x2aa>

	leds.sin_start += leds.sin_inc;
    4394:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    4398:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    439c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    43a0:	440b      	add	r3, r1
    43a2:	b2db      	uxtb	r3, r3
    43a4:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    43a8:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    43ac:	2a00      	cmp	r2, #0
    43ae:	d07c      	beq.n	44aa <one_sin(LEDStruct&)+0x292>
		leds.sin_phase += leds.sin_speed;
    43b0:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    43b4:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    43b8:	4413      	add	r3, r2
    43ba:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    43be:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    43c2:	2b00      	cmp	r3, #0
    43c4:	d06e      	beq.n	44a4 <one_sin(LEDStruct&)+0x28c>
    43c6:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    43ca:	4625      	mov	r5, r4
    43cc:	1c67      	adds	r7, r4, #1
    43ce:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    43d0:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    43d4:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    43d8:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    43dc:	f894 b341 	ldrb.w	fp, [r4, #833]	; 0x341
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    43e0:	f894 e350 	ldrb.w	lr, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    43e4:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    43e8:	fa5f fa86 	uxtb.w	sl, r6
    43ec:	fb03 230a 	mla	r3, r3, sl, r2
    43f0:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    43f2:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    43f4:	bf44      	itt	mi
    43f6:	43db      	mvnmi	r3, r3
    43f8:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    43fa:	005b      	lsls	r3, r3, #1
    43fc:	b2db      	uxtb	r3, r3
    43fe:	1c5a      	adds	r2, r3, #1
    4400:	fb02 f303 	mul.w	r3, r2, r3
    4404:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4406:	fb03 f202 	mul.w	r2, r3, r2
    440a:	1212      	asrs	r2, r2, #8
    440c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4410:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    4414:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4416:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4418:	bf54      	ite	pl
    441a:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    441c:	23ff      	movmi	r3, #255	; 0xff
    441e:	f894 234f 	ldrb.w	r2, [r4, #847]	; 0x34f
    4422:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4426:	4629      	mov	r1, r5
    4428:	a803      	add	r0, sp, #12
    442a:	459b      	cmp	fp, r3
    442c:	bf34      	ite	cc
    442e:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    4432:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4436:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    443a:	f004 fb2f 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    443e:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    4442:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    4446:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    444a:	9100      	str	r1, [sp, #0]
    444c:	fb02 320a 	mla	r2, r2, sl, r3
    4450:	b2d2      	uxtb	r2, r2
    4452:	465b      	mov	r3, fp
    4454:	4649      	mov	r1, r9
    4456:	a803      	add	r0, sp, #12
    4458:	f004 f924 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    445c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    4460:	f89d 200c 	ldrb.w	r2, [sp, #12]
    4464:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4468:	f807 3c01 	strb.w	r3, [r7, #-1]
    446c:	786a      	ldrb	r2, [r5, #1]
    446e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4472:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4476:	706a      	strb	r2, [r5, #1]
    4478:	78ab      	ldrb	r3, [r5, #2]
    447a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    447e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4482:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    4484:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    4488:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    448c:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    4490:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    4492:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4494:	42b2      	cmp	r2, r6
    4496:	f105 0503 	add.w	r5, r5, #3
    449a:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    449e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    44a2:	dc97      	bgt.n	43d4 <one_sin(LEDStruct&)+0x1bc>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    44a4:	b005      	add	sp, #20
    44a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    44aa:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    44ae:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    44b2:	1a9b      	subs	r3, r3, r2
    44b4:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    44b8:	e781      	b.n	43be <one_sin(LEDStruct&)+0x1a6>
void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    44ba:	2596      	movs	r5, #150	; 0x96
    44bc:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    44c0:	e750      	b.n	4364 <one_sin(LEDStruct&)+0x14c>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    44c2:	4620      	mov	r0, r4
    44c4:	f7ff fe58 	bl	4178 <one_sin_update(LEDStruct&)>
    44c8:	e764      	b.n	4394 <one_sin(LEDStruct&)+0x17c>
    44ca:	bf00      	nop
    44cc:	1fff95c1 	.word	0x1fff95c1
    44d0:	1fff875a 	.word	0x1fff875a

000044d4 <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    44d4:	b570      	push	{r4, r5, r6, lr}
    44d6:	4604      	mov	r4, r0
    44d8:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    44da:	4d1b      	ldr	r5, [pc, #108]	; (4548 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    44dc:	2002      	movs	r0, #2
    44de:	f004 ff4b 	bl	9378 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44e2:	882b      	ldrh	r3, [r5, #0]
    44e4:	4418      	add	r0, r3
    44e6:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    44ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    44ee:	f243 6319 	movw	r3, #13849	; 0x3619
    44f2:	4418      	add	r0, r3
    44f4:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    44f6:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    44fa:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    44fe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4502:	b2d2      	uxtb	r2, r2
    4504:	4403      	add	r3, r0
    4506:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    450a:	b29b      	uxth	r3, r3
    450c:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    450e:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    4510:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    4514:	321b      	adds	r2, #27
    4516:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    451a:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    451e:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    4522:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    4526:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    452a:	4620      	mov	r0, r4
    452c:	aa01      	add	r2, sp, #4
    452e:	2196      	movs	r1, #150	; 0x96
    4530:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4532:	f88d 6004 	strb.w	r6, [sp, #4]
    4536:	f88d 6005 	strb.w	r6, [sp, #5]
    453a:	f88d 6006 	strb.w	r6, [sp, #6]
    453e:	f003 ff8f 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
}
    4542:	b002      	add	sp, #8
    4544:	bd70      	pop	{r4, r5, r6, pc}
    4546:	bf00      	nop
    4548:	1fff875a 	.word	0x1fff875a

0000454c <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    454c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    4550:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    4554:	b087      	sub	sp, #28
    4556:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    4558:	2b00      	cmp	r3, #0
    455a:	f000 8089 	beq.w	4670 <fadeup(LEDStruct&)+0x124>
    455e:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    4562:	9303      	str	r3, [sp, #12]
    4564:	4606      	mov	r6, r0
    4566:	4618      	mov	r0, r3
    4568:	4b5d      	ldr	r3, [pc, #372]	; (46e0 <fadeup(LEDStruct&)+0x194>)
    456a:	881b      	ldrh	r3, [r3, #0]
    456c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4570:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4574:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4578:	3419      	adds	r4, #25
    457a:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    457c:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4580:	b2db      	uxtb	r3, r3
    4582:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    4586:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    458a:	ea4f 2929 	mov.w	r9, r9, asr #8
    458e:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    4592:	2301      	movs	r3, #1
    4594:	fa5f f989 	uxtb.w	r9, r9
    4598:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    459c:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    45a0:	f007 fa80 	bl	baa4 <__aeabi_ui2f>
    45a4:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    45a8:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    45ac:	465b      	mov	r3, fp
    45ae:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    45b2:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    45b6:	46d3      	mov	fp, sl
    45b8:	9001      	str	r0, [sp, #4]
    45ba:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    45be:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    45c0:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45c2:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    45c6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    45ca:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    45ce:	3419      	adds	r4, #25
    45d0:	b2a4      	uxth	r4, r4
    45d2:	2373      	movs	r3, #115	; 0x73
    45d4:	fb03 f004 	mul.w	r0, r3, r4
    45d8:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    45da:	9b01      	ldr	r3, [sp, #4]
    45dc:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    45e0:	300a      	adds	r0, #10
    45e2:	b280      	uxth	r0, r0
    45e4:	f007 fa5e 	bl	baa4 <__aeabi_ui2f>
    45e8:	493e      	ldr	r1, [pc, #248]	; (46e4 <fadeup(LEDStruct&)+0x198>)
    45ea:	f007 fb67 	bl	bcbc <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45ee:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    45f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    45f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    45fa:	3319      	adds	r3, #25
    45fc:	b29b      	uxth	r3, r3
    45fe:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4602:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4606:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    460a:	3419      	adds	r4, #25
    460c:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    460e:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4612:	b2c9      	uxtb	r1, r1
    4614:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4618:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    461c:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    461e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    4622:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4624:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4628:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    462c:	b2c8      	uxtb	r0, r1
    462e:	f007 fa39 	bl	baa4 <__aeabi_ui2f>
    4632:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4634:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4636:	4a2c      	ldr	r2, [pc, #176]	; (46e8 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4638:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    463c:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    463e:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4642:	d8be      	bhi.n	45c2 <fadeup(LEDStruct&)+0x76>
    4644:	9a03      	ldr	r2, [sp, #12]
    4646:	9e02      	ldr	r6, [sp, #8]
    4648:	4f25      	ldr	r7, [pc, #148]	; (46e0 <fadeup(LEDStruct&)+0x194>)
    464a:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    464e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4652:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4656:	18f5      	adds	r5, r6, r3
    4658:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    465a:	22ff      	movs	r2, #255	; 0xff
    465c:	803c      	strh	r4, [r7, #0]
    465e:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    4660:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    4662:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4664:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    4666:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    4668:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    466a:	b007      	add	sp, #28
    466c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4670:	9d02      	ldr	r5, [sp, #8]
    4672:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4676:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    467a:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    467e:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4682:	3305      	adds	r3, #5
    4684:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4686:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    468a:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    468e:	4429      	add	r1, r5
    4690:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4692:	24ff      	movs	r4, #255	; 0xff
    4694:	f88d 3016 	strb.w	r3, [sp, #22]
    4698:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    469c:	f004 f9fe 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    46a0:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    46a4:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    46a8:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    46ac:	f88d 3014 	strb.w	r3, [sp, #20]
    46b0:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    46b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    46b8:	a805      	add	r0, sp, #20
    46ba:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    46bc:	f88d 4015 	strb.w	r4, [sp, #21]
    46c0:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    46c4:	f004 f9ea 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    46c8:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    46cc:	2bff      	cmp	r3, #255	; 0xff
    46ce:	d1cc      	bne.n	466a <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    46d0:	9a02      	ldr	r2, [sp, #8]
    46d2:	2301      	movs	r3, #1
    46d4:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    46d8:	b007      	add	sp, #28
    46da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46de:	bf00      	nop
    46e0:	1fff875a 	.word	0x1fff875a
    46e4:	42c80000 	.word	0x42c80000
    46e8:	437f0000 	.word	0x437f0000

000046ec <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    46ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    46f0:	4b65      	ldr	r3, [pc, #404]	; (4888 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    46f2:	4605      	mov	r5, r0
    46f4:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    46f6:	781a      	ldrb	r2, [r3, #0]
    46f8:	2196      	movs	r1, #150	; 0x96
    46fa:	f003 ff73 	bl	85e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    46fe:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    4702:	2600      	movs	r6, #0
    4704:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4708:	2c00      	cmp	r4, #0
    470a:	d07e      	beq.n	480a <explosion(LEDStruct&)+0x11e>
    470c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 48a0 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4710:	f04f 08ff 	mov.w	r8, #255	; 0xff
    4714:	e03b      	b.n	478e <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4716:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    471a:	4650      	mov	r0, sl
    471c:	f007 f912 	bl	b944 <__addsf3>
    4720:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4722:	2100      	movs	r1, #0
    4724:	4638      	mov	r0, r7
    4726:	f007 fbb3 	bl	be90 <__aeabi_fcmplt>
    472a:	4958      	ldr	r1, [pc, #352]	; (488c <explosion(LEDStruct&)+0x1a0>)
    472c:	2800      	cmp	r0, #0
    472e:	d168      	bne.n	4802 <explosion(LEDStruct&)+0x116>
    4730:	4638      	mov	r0, r7
    4732:	f007 fbcb 	bl	becc <__aeabi_fcmpgt>
    4736:	b100      	cbz	r0, 473a <explosion(LEDStruct&)+0x4e>
    4738:	4f54      	ldr	r7, [pc, #336]	; (488c <explosion(LEDStruct&)+0x1a0>)
    473a:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    473e:	4651      	mov	r1, sl
    4740:	f8d9 0000 	ldr.w	r0, [r9]
    4744:	f007 fa06 	bl	bb54 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4748:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    474c:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    4750:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    4754:	f007 f9fe 	bl	bb54 <__aeabi_fmul>
    4758:	4601      	mov	r1, r0
    475a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    475e:	f007 f8ef 	bl	b940 <__aeabi_fsub>
    4762:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    4766:	f007 f9f5 	bl	bb54 <__aeabi_fmul>
    476a:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    476e:	f007 fbdd 	bl	bf2c <__aeabi_f2uiz>
    4772:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    4776:	b2c0      	uxtb	r0, r0
    4778:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    477a:	f106 0601 	add.w	r6, r6, #1
    477e:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4782:	bf38      	it	cc
    4784:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4788:	b2f6      	uxtb	r6, r6
    478a:	42b3      	cmp	r3, r6
    478c:	d93b      	bls.n	4806 <explosion(LEDStruct&)+0x11a>
    478e:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    4792:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4796:	f007 fba3 	bl	bee0 <__aeabi_f2iz>
    479a:	4607      	mov	r7, r0
    479c:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    47a0:	f007 fbc4 	bl	bf2c <__aeabi_f2uiz>
    47a4:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    47a8:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    47ac:	a901      	add	r1, sp, #4
    47ae:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47b0:	f88d 3000 	strb.w	r3, [sp]
    47b4:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    47b8:	f004 f970 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    47bc:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    47c0:	1829      	adds	r1, r5, r0
    47c2:	5c2b      	ldrb	r3, [r5, r0]
    47c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    47c8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    47cc:	542b      	strb	r3, [r5, r0]
    47ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    47d2:	784a      	ldrb	r2, [r1, #1]
    47d4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    47d8:	704a      	strb	r2, [r1, #1]
    47da:	788b      	ldrb	r3, [r1, #2]
    47dc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    47e0:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    47e4:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    47e6:	708b      	strb	r3, [r1, #2]
    47e8:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    47ec:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    47f0:	2b00      	cmp	r3, #0
    47f2:	d190      	bne.n	4716 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    47f4:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    47f8:	4651      	mov	r1, sl
    47fa:	f007 f8a1 	bl	b940 <__aeabi_fsub>
    47fe:	4607      	mov	r7, r0
    4800:	e78f      	b.n	4722 <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    4802:	2700      	movs	r7, #0
    4804:	e799      	b.n	473a <explosion(LEDStruct&)+0x4e>
    4806:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    480a:	462a      	mov	r2, r5
    480c:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4810:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4812:	7819      	ldrb	r1, [r3, #0]
    4814:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4818:	7859      	ldrb	r1, [r3, #1]
    481a:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    481e:	7899      	ldrb	r1, [r3, #2]
    4820:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    4824:	3303      	adds	r3, #3
    4826:	4283      	cmp	r3, r0
    4828:	f1a2 0203 	sub.w	r2, r2, #3
    482c:	d1f1      	bne.n	4812 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    482e:	bb44      	cbnz	r4, 4882 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4830:	aa01      	add	r2, sp, #4
    4832:	2196      	movs	r1, #150	; 0x96
    4834:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    4836:	f88d 4004 	strb.w	r4, [sp, #4]
    483a:	f88d 4005 	strb.w	r4, [sp, #5]
    483e:	f88d 4006 	strb.w	r4, [sp, #6]
    4842:	f003 fe0d 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4846:	4812      	ldr	r0, [pc, #72]	; (4890 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4848:	4c12      	ldr	r4, [pc, #72]	; (4894 <explosion(LEDStruct&)+0x1a8>)
    484a:	8803      	ldrh	r3, [r0, #0]
    484c:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    484e:	4912      	ldr	r1, [pc, #72]	; (4898 <explosion(LEDStruct&)+0x1ac>)
    4850:	4a12      	ldr	r2, [pc, #72]	; (489c <explosion(LEDStruct&)+0x1b0>)
    4852:	9401      	str	r4, [sp, #4]
    4854:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4858:	8809      	ldrh	r1, [r1, #0]
    485a:	8812      	ldrh	r2, [r2, #0]
    485c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4860:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4864:	440a      	add	r2, r1
    4866:	3319      	adds	r3, #25
    4868:	b29b      	uxth	r3, r3
    486a:	b292      	uxth	r2, r2
	return ret;
    486c:	9901      	ldr	r1, [sp, #4]
    486e:	8003      	strh	r3, [r0, #0]
    4870:	fb03 f302 	mul.w	r3, r3, r2
    4874:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4878:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    487a:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    487e:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4882:	b002      	add	sp, #8
    4884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4888:	1fff8744 	.word	0x1fff8744
    488c:	42940000 	.word	0x42940000
    4890:	1fff875a 	.word	0x1fff875a
    4894:	1fffa058 	.word	0x1fffa058
    4898:	1fff874a 	.word	0x1fff874a
    489c:	1fff8746 	.word	0x1fff8746
    48a0:	1fff8754 	.word	0x1fff8754

000048a4 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    48a4:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    48a6:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    48aa:	b082      	sub	sp, #8
    48ac:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    48ae:	bb03      	cbnz	r3, 48f2 <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    48b0:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    48b2:	2115      	movs	r1, #21
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    48b4:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    48b6:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    48ba:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    48be:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    48c2:	f884 2354 	strb.w	r2, [r4, #852]	; 0x354
    48c6:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    48c8:	aa01      	add	r2, sp, #4
    48ca:	2196      	movs	r1, #150	; 0x96
    48cc:	4620      	mov	r0, r4
    48ce:	f88d 3004 	strb.w	r3, [sp, #4]
    48d2:	f88d 3005 	strb.w	r3, [sp, #5]
    48d6:	f88d 3006 	strb.w	r3, [sp, #6]
    48da:	f003 fdc1 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48de:	4a0f      	ldr	r2, [pc, #60]	; (491c <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    48e0:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    48e4:	6812      	ldr	r2, [r2, #0]
    48e6:	9201      	str	r2, [sp, #4]
	return ret;
    48e8:	9a01      	ldr	r2, [sp, #4]
    48ea:	429a      	cmp	r2, r3
    48ec:	d212      	bcs.n	4914 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    48ee:	b002      	add	sp, #8
    48f0:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    48f2:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    48f6:	2b01      	cmp	r3, #1
    48f8:	d004      	beq.n	4904 <fireworks(LEDStruct&)+0x60>
    48fa:	d207      	bcs.n	490c <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    48fc:	f7ff fe26 	bl	454c <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4900:	b002      	add	sp, #8
    4902:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4904:	f7ff fef2 	bl	46ec <explosion(LEDStruct&)>
			break;
	}
}
    4908:	b002      	add	sp, #8
    490a:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    490c:	2b02      	cmp	r3, #2
    490e:	d0da      	beq.n	48c6 <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4910:	b002      	add	sp, #8
    4912:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4914:	4620      	mov	r0, r4
    4916:	f7ff fddd 	bl	44d4 <prepare_for_explosion(LEDStruct&)>
    491a:	e7e8      	b.n	48ee <fireworks(LEDStruct&)+0x4a>
    491c:	1fffa058 	.word	0x1fffa058

00004920 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4920:	4b18      	ldr	r3, [pc, #96]	; (4984 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4922:	4a19      	ldr	r2, [pc, #100]	; (4988 <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    4924:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    4926:	2100      	movs	r1, #0
    4928:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    492a:	2b04      	cmp	r3, #4
    492c:	d80d      	bhi.n	494a <shooting_pole_update(LEDStruct&)+0x2a>
    492e:	e8df f003 	tbb	[pc, r3]
    4932:	1403      	.short	0x1403
    4934:	201a      	.short	0x201a
    4936:	0e          	.byte	0x0e
    4937:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    4938:	4b14      	ldr	r3, [pc, #80]	; (498c <shooting_pole_update(LEDStruct&)+0x6c>)
    493a:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    493c:	2b09      	cmp	r3, #9
    493e:	d91e      	bls.n	497e <shooting_pole_update(LEDStruct&)+0x5e>
    4940:	2b41      	cmp	r3, #65	; 0x41
    4942:	bfa8      	it	ge
    4944:	2341      	movge	r3, #65	; 0x41
    4946:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    494a:	f7fd ba6b 	b.w	1e24 <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    494e:	4b0f      	ldr	r3, [pc, #60]	; (498c <shooting_pole_update(LEDStruct&)+0x6c>)
    4950:	881b      	ldrh	r3, [r3, #0]
    4952:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		default:	break;
	}
	LEDDebug(leds);
    4956:	f7fd ba65 	b.w	1e24 <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    495a:	4b0c      	ldr	r3, [pc, #48]	; (498c <shooting_pole_update(LEDStruct&)+0x6c>)
    495c:	881b      	ldrh	r3, [r3, #0]
    495e:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4962:	f7fd ba5f 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    4966:	4b09      	ldr	r3, [pc, #36]	; (498c <shooting_pole_update(LEDStruct&)+0x6c>)
    4968:	881b      	ldrh	r3, [r3, #0]
    496a:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    496e:	f7fd ba59 	b.w	1e24 <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    4972:	4b06      	ldr	r3, [pc, #24]	; (498c <shooting_pole_update(LEDStruct&)+0x6c>)
    4974:	881b      	ldrh	r3, [r3, #0]
    4976:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    497a:	f7fd ba53 	b.w	1e24 <LEDDebug(LEDStruct&)>
    497e:	230a      	movs	r3, #10
    4980:	e7e1      	b.n	4946 <shooting_pole_update(LEDStruct&)+0x26>
    4982:	bf00      	nop
    4984:	1fff95d0 	.word	0x1fff95d0
    4988:	1fff95c1 	.word	0x1fff95c1
    498c:	1fff95c8 	.word	0x1fff95c8

00004990 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    4990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4994:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    4998:	b087      	sub	sp, #28
    499a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    499c:	2e00      	cmp	r6, #0
    499e:	f000 80f7 	beq.w	4b90 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    49a2:	4bbb      	ldr	r3, [pc, #748]	; (4c90 <shooting_pole(LEDStruct&)+0x300>)
    49a4:	781b      	ldrb	r3, [r3, #0]
    49a6:	2b00      	cmp	r3, #0
    49a8:	f040 815f 	bne.w	4c6a <shooting_pole(LEDStruct&)+0x2da>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    49ac:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    49b0:	f204 17c7 	addw	r7, r4, #455	; 0x1c7
    49b4:	b311      	cbz	r1, 49fc <shooting_pole(LEDStruct&)+0x6c>
    49b6:	4626      	mov	r6, r4
    49b8:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    49ba:	f04f 0801 	mov.w	r8, #1
    49be:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    49c2:	f8cd 8000 	str.w	r8, [sp]
    49c6:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    49ca:	fb92 f2f1 	sdiv	r2, r2, r1
    49ce:	441a      	add	r2, r3
    49d0:	b2d2      	uxtb	r2, r2
    49d2:	23ff      	movs	r3, #255	; 0xff
    49d4:	4639      	mov	r1, r7
    49d6:	a805      	add	r0, sp, #20
    49d8:	f003 fe64 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    49dc:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    49e0:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    49e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    49e8:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    49ea:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    49ec:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    49ee:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    49f2:	3501      	adds	r5, #1
    49f4:	42a9      	cmp	r1, r5
    49f6:	f106 0603 	add.w	r6, r6, #3
    49fa:	dce0      	bgt.n	49be <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    49fc:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4a00:	2b00      	cmp	r3, #0
    4a02:	f000 80bd 	beq.w	4b80 <shooting_pole(LEDStruct&)+0x1f0>
    4a06:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    4a0a:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    4a0e:	4413      	add	r3, r2
    4a10:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    4a14:	294a      	cmp	r1, #74	; 0x4a
    4a16:	f300 812c 	bgt.w	4c72 <shooting_pole(LEDStruct&)+0x2e2>
    4a1a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    4a1e:	18a3      	adds	r3, r4, r2
    4a20:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a24:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4a28:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a2a:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4a2c:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a30:	43c9      	mvns	r1, r1
    4a32:	b2c9      	uxtb	r1, r1
    4a34:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4a36:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a3a:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4a3e:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a42:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4a44:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4a46:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4a48:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4a4a:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4a4c:	709a      	strb	r2, [r3, #2]
    4a4e:	3303      	adds	r3, #3
    4a50:	42ab      	cmp	r3, r5
    4a52:	d1e7      	bne.n	4a24 <shooting_pole(LEDStruct&)+0x94>
    4a54:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a58:	f8df 8248 	ldr.w	r8, [pc, #584]	; 4ca4 <shooting_pole(LEDStruct&)+0x314>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4a5c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4a60:	f8d8 2000 	ldr.w	r2, [r8]
    4a64:	9205      	str	r2, [sp, #20]
	return ret;
    4a66:	9805      	ldr	r0, [sp, #20]
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4a68:	f44f 728c 	mov.w	r2, #280	; 0x118
    4a6c:	fb02 f200 	mul.w	r2, r2, r0
    4a70:	021b      	lsls	r3, r3, #8
    4a72:	fb03 f202 	mul.w	r2, r3, r2
    4a76:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4a7a:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    4a7e:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4a80:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4a82:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4a86:	d503      	bpl.n	4a90 <shooting_pole(LEDStruct&)+0x100>
    4a88:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4a8c:	3307      	adds	r3, #7
    4a8e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4a90:	0a18      	lsrs	r0, r3, #8
    4a92:	f8df e214 	ldr.w	lr, [pc, #532]	; 4ca8 <shooting_pole(LEDStruct&)+0x318>
    uint8_t  m   = slope[section];
    4a96:	4e7f      	ldr	r6, [pc, #508]	; (4c94 <shooting_pole(LEDStruct&)+0x304>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4a98:	5c36      	ldrb	r6, [r6, r0]
    4a9a:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    4a9e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    4aa2:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    4aa6:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4aa8:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    4aaa:	bf48      	it	mi
    4aac:	4276      	negmi	r6, r6
    4aae:	b236      	sxth	r6, r6
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4ab0:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    4ab4:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    4ab8:	b29b      	uxth	r3, r3
    4aba:	b2b6      	uxth	r6, r6
    4abc:	fb03 6606 	mla	r6, r3, r6, r6
    4ac0:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
    4ac4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4ac8:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4acc:	9000      	str	r0, [sp, #0]
    4ace:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    4ad2:	a804      	add	r0, sp, #16
    4ad4:	4639      	mov	r1, r7
    4ad6:	b2b6      	uxth	r6, r6
    4ad8:	f003 fde4 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4adc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4ae0:	18e1      	adds	r1, r4, r3
    4ae2:	5ce2      	ldrb	r2, [r4, r3]
    4ae4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4ae8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4aec:	54e2      	strb	r2, [r4, r3]
    4aee:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4af2:	784a      	ldrb	r2, [r1, #1]
    4af4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4af8:	704a      	strb	r2, [r1, #1]
    4afa:	788b      	ldrb	r3, [r1, #2]
    4afc:	f89d 2012 	ldrb.w	r2, [sp, #18]
    4b00:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4b04:	4f64      	ldr	r7, [pc, #400]	; (4c98 <shooting_pole(LEDStruct&)+0x308>)
        b = qadd8( b, rhs.b);
    4b06:	708b      	strb	r3, [r1, #2]
    4b08:	683b      	ldr	r3, [r7, #0]
    4b0a:	07db      	lsls	r3, r3, #31
    4b0c:	d51b      	bpl.n	4b46 <shooting_pole(LEDStruct&)+0x1b6>
    4b0e:	4e63      	ldr	r6, [pc, #396]	; (4c9c <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b10:	f8d8 3000 	ldr.w	r3, [r8]
    4b14:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4b16:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4b1a:	9b04      	ldr	r3, [sp, #16]
    4b1c:	1a5b      	subs	r3, r3, r1
    4b1e:	429a      	cmp	r2, r3
    4b20:	d921      	bls.n	4b66 <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4b22:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b24:	781a      	ldrb	r2, [r3, #0]
    4b26:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    4b2a:	785a      	ldrb	r2, [r3, #1]
    4b2c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4b30:	789a      	ldrb	r2, [r3, #2]
    4b32:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4b36:	3303      	adds	r3, #3
    4b38:	429d      	cmp	r5, r3
    4b3a:	f1a4 0403 	sub.w	r4, r4, #3
    4b3e:	d1f1      	bne.n	4b24 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    4b40:	b007      	add	sp, #28
    4b42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4b46:	4638      	mov	r0, r7
    4b48:	f004 fcc4 	bl	94d4 <__cxa_guard_acquire>
    4b4c:	2800      	cmp	r0, #0
    4b4e:	f040 8093 	bne.w	4c78 <shooting_pole(LEDStruct&)+0x2e8>
    4b52:	4e52      	ldr	r6, [pc, #328]	; (4c9c <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b54:	f8d8 3000 	ldr.w	r3, [r8]
    4b58:	9304      	str	r3, [sp, #16]
    4b5a:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4b5e:	9b04      	ldr	r3, [sp, #16]
    4b60:	1a5b      	subs	r3, r3, r1
    4b62:	4293      	cmp	r3, r2
    4b64:	d3dd      	bcc.n	4b22 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b66:	f8d8 1000 	ldr.w	r1, [r8]
    4b6a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4b6e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    4b72:	9103      	str	r1, [sp, #12]
	return ret;
    4b74:	9903      	ldr	r1, [sp, #12]
    4b76:	6031      	str	r1, [r6, #0]
    4b78:	4413      	add	r3, r2
    4b7a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    4b7e:	e7d0      	b.n	4b22 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    4b80:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4b84:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    4b88:	1a9b      	subs	r3, r3, r2
    4b8a:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    4b8e:	e741      	b.n	4a14 <shooting_pole(LEDStruct&)+0x84>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b90:	4f43      	ldr	r7, [pc, #268]	; (4ca0 <shooting_pole(LEDStruct&)+0x310>)
    4b92:	883b      	ldrh	r3, [r7, #0]
    4b94:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4b98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4b9c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ba0:	3319      	adds	r3, #25
    4ba2:	b29b      	uxth	r3, r3
    4ba4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ba8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4bac:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4bb0:	3219      	adds	r2, #25
    4bb2:	b292      	uxth	r2, r2
    4bb4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4bb8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4bbc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4bc0:	f10e 0e19 	add.w	lr, lr, #25
    4bc4:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bc8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4bcc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
    4bd0:	2146      	movs	r1, #70	; 0x46
    4bd2:	2032      	movs	r0, #50	; 0x32
    4bd4:	b2dd      	uxtb	r5, r3
    4bd6:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bda:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bde:	fa5f f982 	uxtb.w	r9, r2
    4be2:	f006 f821 	bl	ac28 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4be6:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    4be8:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    4bec:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4bf0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4bf4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4bf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4bfc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4c00:	3119      	adds	r1, #25
    4c02:	121b      	asrs	r3, r3, #8
    4c04:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c06:	fa5f f888 	uxtb.w	r8, r8
    4c0a:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    4c0e:	b2db      	uxtb	r3, r3
    4c10:	eb01 2011 	add.w	r0, r1, r1, lsr #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4c14:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4c18:	b2c0      	uxtb	r0, r0
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4c1a:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4c1e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4c22:	4b1b      	ldr	r3, [pc, #108]	; (4c90 <shooting_pole(LEDStruct&)+0x300>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    4c24:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4c28:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4c2c:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4c30:	ea4f 10e8 	mov.w	r0, r8, asr #7
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4c34:	ea4f 2e22 	mov.w	lr, r2, asr #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4c38:	122d      	asrs	r5, r5, #8
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4c3a:	f100 0232 	add.w	r2, r0, #50	; 0x32
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4c3e:	781b      	ldrb	r3, [r3, #0]
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4c40:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4c44:	1c68      	adds	r0, r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4c46:	f10e 0e01 	add.w	lr, lr, #1
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4c4a:	2501      	movs	r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    4c4c:	2216      	movs	r2, #22
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4c4e:	f884 e75e 	strb.w	lr, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c52:	8039      	strh	r1, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4c54:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4c58:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    4c5c:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    4c60:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4c64:	2b00      	cmp	r3, #0
    4c66:	f43f aea1 	beq.w	49ac <shooting_pole(LEDStruct&)+0x1c>
    4c6a:	4620      	mov	r0, r4
    4c6c:	f7ff fe58 	bl	4920 <shooting_pole_update(LEDStruct&)>
    4c70:	e69c      	b.n	49ac <shooting_pole(LEDStruct&)+0x1c>
    4c72:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    4c76:	e6ef      	b.n	4a58 <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c78:	f8d8 3000 	ldr.w	r3, [r8]
    4c7c:	4e07      	ldr	r6, [pc, #28]	; (4c9c <shooting_pole(LEDStruct&)+0x30c>)
    4c7e:	9302      	str	r3, [sp, #8]
	return ret;
    4c80:	9b02      	ldr	r3, [sp, #8]
    4c82:	6033      	str	r3, [r6, #0]
    4c84:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4c86:	4638      	mov	r0, r7
    4c88:	6073      	str	r3, [r6, #4]
    4c8a:	f004 fc29 	bl	94e0 <__cxa_guard_release>
    4c8e:	e761      	b.n	4b54 <shooting_pole(LEDStruct&)+0x1c4>
    4c90:	1fff95c1 	.word	0x1fff95c1
    4c94:	0000dab4 	.word	0x0000dab4
    4c98:	1fff95b0 	.word	0x1fff95b0
    4c9c:	1fff94cc 	.word	0x1fff94cc
    4ca0:	1fff875a 	.word	0x1fff875a
    4ca4:	1fffa058 	.word	0x1fffa058
    4ca8:	0000cf9c 	.word	0x0000cf9c

00004cac <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4cac:	4b2a      	ldr	r3, [pc, #168]	; (4d58 <two_sin_update(LEDStruct&)+0xac>)
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4cae:	4a2b      	ldr	r2, [pc, #172]	; (4d5c <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    4cb0:	781b      	ldrb	r3, [r3, #0]
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4cb2:	2100      	movs	r1, #0
    4cb4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4cb6:	2b0b      	cmp	r3, #11
    4cb8:	d80b      	bhi.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
    4cba:	e8df f003 	tbb	[pc, r3]
    4cbe:	1f11      	.short	0x1f11
    4cc0:	332e2924 	.word	0x332e2924
    4cc4:	06423d38 	.word	0x06423d38
    4cc8:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
    4cca:	4b25      	ldr	r3, [pc, #148]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4ccc:	881b      	ldrh	r3, [r3, #0]
    4cce:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.two_phase		= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    4cd2:	f7fd b8a7 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.two_phase		= (uint8_t)update_arg;	break;	//l
    4cd6:	4b22      	ldr	r3, [pc, #136]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4cd8:	881b      	ldrh	r3, [r3, #0]
    4cda:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    4cde:	e7f8      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4ce0:	4b1f      	ldr	r3, [pc, #124]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4ce2:	881b      	ldrh	r3, [r3, #0]
    4ce4:	2b00      	cmp	r3, #0
    4ce6:	bf14      	ite	ne
    4ce8:	2301      	movne	r3, #1
    4cea:	2300      	moveq	r3, #0
    4cec:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4cf0:	bf14      	ite	ne
    4cf2:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4cf4:	234b      	moveq	r3, #75	; 0x4b
    4cf6:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4cfa:	e7ea      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    4cfc:	4b18      	ldr	r3, [pc, #96]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4cfe:	881b      	ldrh	r3, [r3, #0]
    4d00:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    4d04:	e7e5      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    4d06:	4b16      	ldr	r3, [pc, #88]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d08:	881b      	ldrh	r3, [r3, #0]
    4d0a:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    4d0e:	e7e0      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    4d10:	4b13      	ldr	r3, [pc, #76]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d12:	881b      	ldrh	r3, [r3, #0]
    4d14:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    4d18:	e7db      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    4d1a:	4b11      	ldr	r3, [pc, #68]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d1c:	881b      	ldrh	r3, [r3, #0]
    4d1e:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    4d22:	e7d6      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    4d24:	4b0e      	ldr	r3, [pc, #56]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d26:	881b      	ldrh	r3, [r3, #0]
    4d28:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    4d2c:	e7d1      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    4d2e:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d30:	881b      	ldrh	r3, [r3, #0]
    4d32:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    4d36:	e7cc      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    4d38:	4b09      	ldr	r3, [pc, #36]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d3a:	881b      	ldrh	r3, [r3, #0]
    4d3c:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    4d40:	e7c7      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    4d42:	4b07      	ldr	r3, [pc, #28]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d44:	881b      	ldrh	r3, [r3, #0]
    4d46:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    4d4a:	e7c2      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
    4d4c:	4b04      	ldr	r3, [pc, #16]	; (4d60 <two_sin_update(LEDStruct&)+0xb4>)
    4d4e:	881b      	ldrh	r3, [r3, #0]
    4d50:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    4d54:	e7bd      	b.n	4cd2 <two_sin_update(LEDStruct&)+0x26>
    4d56:	bf00      	nop
    4d58:	1fff95d0 	.word	0x1fff95d0
    4d5c:	1fff95c1 	.word	0x1fff95c1
    4d60:	1fff95c8 	.word	0x1fff95c8

00004d64 <two_sin(LEDStruct&)>:
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    4d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4d68:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    4d6c:	b083      	sub	sp, #12
    4d6e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4d70:	2b00      	cmp	r3, #0
    4d72:	f040 80c4 	bne.w	4efe <two_sin(LEDStruct&)+0x19a>
    4d76:	4dd9      	ldr	r5, [pc, #868]	; (50dc <two_sin(LEDStruct&)+0x378>)
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
    4d78:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4d7c:	882b      	ldrh	r3, [r5, #0]
    4d7e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4d82:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4d86:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4d8a:	3319      	adds	r3, #25
    4d8c:	b298      	uxth	r0, r3
    4d8e:	eb00 2e40 	add.w	lr, r0, r0, lsl #9
    4d92:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    4d96:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4d9a:	f10e 0e19 	add.w	lr, lr, #25
    4d9e:	fa1f fe8e 	uxth.w	lr, lr
    4da2:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    4da6:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    4daa:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4dae:	3719      	adds	r7, #25
    4db0:	b2bf      	uxth	r7, r7
    4db2:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
    4db6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
    4dba:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4dbe:	f10c 0c19 	add.w	ip, ip, #25
    4dc2:	fa1f fc8c 	uxth.w	ip, ip
    4dc6:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    4dca:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    4dce:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4dd2:	3619      	adds	r6, #25
    4dd4:	b2b6      	uxth	r6, r6
    4dd6:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    4dda:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    4dde:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4de2:	3119      	adds	r1, #25
    4de4:	b289      	uxth	r1, r1
    4de6:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4dea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4dee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4df2:	3219      	adds	r2, #25
    4df4:	b292      	uxth	r2, r2
    4df6:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    4dfa:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    4dfe:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    4e02:	f108 0819 	add.w	r8, r8, #25
    4e06:	fa1f f888 	uxth.w	r8, r8
    4e0a:	eb08 2348 	add.w	r3, r8, r8, lsl #9
    4e0e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    4e12:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4e16:	3319      	adds	r3, #25
    4e18:	b29b      	uxth	r3, r3
    4e1a:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    4e1e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    4e22:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e26:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4e2a:	eb08 2818 	add.w	r8, r8, r8, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e2e:	f109 0919 	add.w	r9, r9, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e32:	eb02 2a12 	add.w	sl, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e36:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e3a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4e3e:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e40:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4e44:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e48:	eb00 2310 	add.w	r3, r0, r0, lsr #8
    4e4c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e50:	fa5f fb81 	uxtb.w	fp, r1
    4e54:	fa5f fc8c 	uxtb.w	ip, ip
    4e58:	fa5f f18a 	uxtb.w	r1, sl
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4e5c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e60:	eb09 2a19 	add.w	sl, r9, r9, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4e64:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    4e68:	f3c6 1081 	ubfx	r0, r6, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e6c:	f8a5 9000 	strh.w	r9, [r5]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e70:	f3c3 13c0 	ubfx	r3, r3, #7, #1

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    4e74:	f04f 0901 	mov.w	r9, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e78:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    4e7c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4e80:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    4e84:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4e88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4e8c:	f3c8 1807 	ubfx	r8, r8, #4, #8
    4e90:	f3ca 1642 	ubfx	r6, sl, #5, #3
    4e94:	f3c2 1247 	ubfx	r2, r2, #5, #8
	leds.mode_type = TWO_SIN;
    4e98:	2514      	movs	r5, #20
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    4e9a:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e9e:	fa5f fe8e 	uxtb.w	lr, lr
    4ea2:	b2ff      	uxtb	r7, r7
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ea4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4ea8:	3001      	adds	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4eaa:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    4eae:	f3c1 2107 	ubfx	r1, r1, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4eb2:	f088 0880 	eor.w	r8, r8, #128	; 0x80
    4eb6:	444e      	add	r6, r9
    4eb8:	f082 0280 	eor.w	r2, r2, #128	; 0x80

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    4ebc:	f884 922d 	strb.w	r9, [r4, #557]	; 0x22d
	leds.mode_type = TWO_SIN;
    4ec0:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4ec4:	2b00      	cmp	r3, #0
    4ec6:	f040 811c 	bne.w	5102 <two_sin(LEDStruct&)+0x39e>
	else					 { leds.strip_range = ONE_SIDE; }
    4eca:	234b      	movs	r3, #75	; 0x4b
    4ecc:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.sin_rot	= sr;
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;
	leds.two_cutoff = tc;
	leds.sin_all_freq = saf;
	leds.sin_phase  = 0;
    4ed0:	2300      	movs	r3, #0
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue	= sh;
    4ed2:	f884 e347 	strb.w	lr, [r4, #839]	; 0x347
	leds.two_hue	= th;
    4ed6:	f884 734d 	strb.w	r7, [r4, #845]	; 0x34d
	leds.sin_speed	= ss;
    4eda:	f884 c340 	strb.w	ip, [r4, #832]	; 0x340
	leds.two_speed	= ts;
    4ede:	f884 0349 	strb.w	r0, [r4, #841]	; 0x349
	leds.sin_rot	= sr;
    4ee2:	f884 b342 	strb.w	fp, [r4, #834]	; 0x342
	leds.two_rot	= tr;
    4ee6:	f884 134a 	strb.w	r1, [r4, #842]	; 0x34a
	leds.sin_cutoff = sc;
    4eea:	f884 8341 	strb.w	r8, [r4, #833]	; 0x341
	leds.two_cutoff = tc;
    4eee:	f884 234b 	strb.w	r2, [r4, #843]	; 0x34b
	leds.sin_all_freq = saf;
    4ef2:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.sin_phase  = 0;
    4ef6:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	leds.two_phase  = 0;
    4efa:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c



void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    4efe:	4b78      	ldr	r3, [pc, #480]	; (50e0 <two_sin(LEDStruct&)+0x37c>)
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	2b00      	cmp	r3, #0
    4f04:	f040 8101 	bne.w	510a <two_sin(LEDStruct&)+0x3a6>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    4f08:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4f0c:	2b00      	cmp	r3, #0
    4f0e:	f040 80e9 	bne.w	50e4 <two_sin(LEDStruct&)+0x380>
    4f12:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    4f16:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    4f1a:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    4f1e:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    4f22:	4402      	add	r2, r0
    4f24:	440b      	add	r3, r1
    4f26:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    4f2a:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4f2e:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    4f32:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4f36:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    4f3a:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4f3e:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4f42:	4494      	add	ip, r2
    4f44:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4f48:	4403      	add	r3, r0

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4f4a:	2901      	cmp	r1, #1
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4f4c:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4f50:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4f54:	f340 80bf 	ble.w	50d6 <two_sin(LEDStruct&)+0x372>
    4f58:	4626      	mov	r6, r4
    4f5a:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4f5c:	25ff      	movs	r5, #255	; 0xff
    4f5e:	e08c      	b.n	507a <two_sin(LEDStruct&)+0x316>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4f60:	2b00      	cmp	r3, #0
        in = 255 - in;
    4f62:	bfbc      	itt	lt
    4f64:	43c9      	mvnlt	r1, r1
    4f66:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4f68:	0049      	lsls	r1, r1, #1
    4f6a:	b2c9      	uxtb	r1, r1
    4f6c:	1c4b      	adds	r3, r1, #1
    4f6e:	fb03 f101 	mul.w	r1, r3, r1
    4f72:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4f74:	fb01 f303 	mul.w	r3, r1, r3
    4f78:	121b      	asrs	r3, r3, #8
    4f7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4f7e:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    4f82:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4f84:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4f86:	bf54      	ite	pl
    4f88:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4f8c:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    4f90:	ebc8 0e0e 	rsb	lr, r8, lr
    4f94:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    4f98:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    4f9c:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    4fa0:	3b80      	subs	r3, #128	; 0x80
    4fa2:	4403      	add	r3, r0
    4fa4:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4fa6:	b259      	sxtb	r1, r3
    4fa8:	2900      	cmp	r1, #0
        in = 255 - in;
    4faa:	bfba      	itte	lt
    4fac:	43da      	mvnlt	r2, r3
    4fae:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4fb0:	461a      	movge	r2, r3
    4fb2:	0052      	lsls	r2, r2, #1
    4fb4:	b2d2      	uxtb	r2, r2
    4fb6:	1c50      	adds	r0, r2, #1
    4fb8:	fb00 f202 	mul.w	r2, r0, r2
    4fbc:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4fbe:	fb02 f000 	mul.w	r0, r2, r0
    4fc2:	1200      	asrs	r0, r0, #8
    4fc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4fc8:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    4fcc:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4fce:	05d0      	lsls	r0, r2, #23
    4fd0:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4fd4:	bf54      	ite	pl
    4fd6:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4fd8:	22ff      	movmi	r2, #255	; 0xff
    4fda:	4290      	cmp	r0, r2
    4fdc:	d279      	bcs.n	50d2 <two_sin(LEDStruct&)+0x36e>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4fde:	2900      	cmp	r1, #0
        in = 255 - in;
    4fe0:	bfbc      	itt	lt
    4fe2:	43db      	mvnlt	r3, r3
    4fe4:	b2db      	uxtblt	r3, r3
    4fe6:	005a      	lsls	r2, r3, #1
    4fe8:	b2d2      	uxtb	r2, r2
    4fea:	1c53      	adds	r3, r2, #1
    4fec:	fb03 f202 	mul.w	r2, r3, r2
    4ff0:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4ff2:	fb02 f303 	mul.w	r3, r2, r3
    4ff6:	121b      	asrs	r3, r3, #8
    4ff8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4ffc:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5000:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5002:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5004:	bf54      	ite	pl
    5006:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5008:	23ff      	movmi	r3, #255	; 0xff
    500a:	1a1b      	subs	r3, r3, r0
    500c:	b2db      	uxtb	r3, r3
    500e:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5012:	4631      	mov	r1, r6
    5014:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5016:	f88d c004 	strb.w	ip, [sp, #4]
    501a:	f88d e006 	strb.w	lr, [sp, #6]
    501e:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5022:	f003 fd3b 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    5026:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    502a:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    502e:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5032:	a901      	add	r1, sp, #4
    5034:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5036:	f88d 3000 	strb.w	r3, [sp]
    503a:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    503e:	f003 fd2d 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5042:	7833      	ldrb	r3, [r6, #0]
    5044:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5048:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    504c:	7033      	strb	r3, [r6, #0]
    504e:	7872      	ldrb	r2, [r6, #1]
    5050:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5054:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5058:	7072      	strb	r2, [r6, #1]
    505a:	78b3      	ldrb	r3, [r6, #2]
    505c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5060:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5064:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
    5066:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    506a:	3701      	adds	r7, #1
    506c:	3b01      	subs	r3, #1
    506e:	42bb      	cmp	r3, r7
    5070:	f106 0603 	add.w	r6, r6, #3
    5074:	dd2f      	ble.n	50d6 <two_sin(LEDStruct&)+0x372>
    5076:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    507a:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    507e:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    5082:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    5086:	fb10 f007 	smulbb	r0, r0, r7
    508a:	b2c0      	uxtb	r0, r0
    508c:	4401      	add	r1, r0
    508e:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5090:	b24b      	sxtb	r3, r1
    5092:	2b00      	cmp	r3, #0
        in = 255 - in;
    5094:	bfba      	itte	lt
    5096:	43ca      	mvnlt	r2, r1
    5098:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    509a:	460a      	movge	r2, r1
    509c:	0052      	lsls	r2, r2, #1
    509e:	b2d2      	uxtb	r2, r2
    50a0:	f102 0e01 	add.w	lr, r2, #1
    50a4:	fb0e f202 	mul.w	r2, lr, r2
    50a8:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    50aa:	fb02 fe0e 	mul.w	lr, r2, lr
    50ae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    50b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    50b6:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    50ba:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    50bc:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    50c0:	bf0c      	ite	eq
    50c2:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    50c4:	22ff      	movne	r2, #255	; 0xff
    50c6:	4590      	cmp	r8, r2
    50c8:	f4ff af4a 	bcc.w	4f60 <two_sin(LEDStruct&)+0x1fc>
    50cc:	f04f 0e00 	mov.w	lr, #0
    50d0:	e762      	b.n	4f98 <two_sin(LEDStruct&)+0x234>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    50d2:	2300      	movs	r3, #0
    50d4:	e79b      	b.n	500e <two_sin(LEDStruct&)+0x2aa>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
}
    50d6:	b003      	add	sp, #12
    50d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50dc:	1fff875a 	.word	0x1fff875a
    50e0:	1fff95c1 	.word	0x1fff95c1
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    50e4:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    50e8:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    50ec:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    50f0:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    50f4:	1a12      	subs	r2, r2, r0
    50f6:	1a5b      	subs	r3, r3, r1
    50f8:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    50fc:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    5100:	e715      	b.n	4f2e <two_sin(LEDStruct&)+0x1ca>

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5102:	2396      	movs	r3, #150	; 0x96
    5104:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    5108:	e6e2      	b.n	4ed0 <two_sin(LEDStruct&)+0x16c>



void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    510a:	4620      	mov	r0, r4
    510c:	f7ff fdce 	bl	4cac <two_sin_update(LEDStruct&)>
    5110:	e6fa      	b.n	4f08 <two_sin(LEDStruct&)+0x1a4>
    5112:	bf00      	nop

00005114 <noise_update(LEDStruct&)>:
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5114:	4b12      	ldr	r3, [pc, #72]	; (5160 <noise_update(LEDStruct&)+0x4c>)
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    5116:	4a13      	ldr	r2, [pc, #76]	; (5164 <noise_update(LEDStruct&)+0x50>)
	switch (update_var) {
    5118:	781b      	ldrb	r3, [r3, #0]
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    511a:	2100      	movs	r1, #0
	switch (update_var) {
    511c:	2b01      	cmp	r3, #1
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    511e:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5120:	d017      	beq.n	5152 <noise_update(LEDStruct&)+0x3e>
    5122:	d307      	bcc.n	5134 <noise_update(LEDStruct&)+0x20>
    5124:	2b02      	cmp	r3, #2
    5126:	d103      	bne.n	5130 <noise_update(LEDStruct&)+0x1c>
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
    5128:	4b0f      	ldr	r3, [pc, #60]	; (5168 <noise_update(LEDStruct&)+0x54>)
    512a:	881b      	ldrh	r3, [r3, #0]
    512c:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		default:	break;
	}
	LEDDebug(leds);
    5130:	f7fc be78 	b.w	1e24 <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    5134:	4b0c      	ldr	r3, [pc, #48]	; (5168 <noise_update(LEDStruct&)+0x54>)
    5136:	881b      	ldrh	r3, [r3, #0]
    5138:	2b00      	cmp	r3, #0
    513a:	bf14      	ite	ne
    513c:	2301      	movne	r3, #1
    513e:	2300      	moveq	r3, #0
    5140:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    5144:	bf14      	ite	ne
    5146:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    5148:	234b      	moveq	r3, #75	; 0x4b
    514a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    514e:	f7fc be69 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    5152:	4b05      	ldr	r3, [pc, #20]	; (5168 <noise_update(LEDStruct&)+0x54>)
    5154:	881b      	ldrh	r3, [r3, #0]
    5156:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    515a:	f7fc be63 	b.w	1e24 <LEDDebug(LEDStruct&)>
    515e:	bf00      	nop
    5160:	1fff95d0 	.word	0x1fff95d0
    5164:	1fff95c1 	.word	0x1fff95c1
    5168:	1fff95c8 	.word	0x1fff95c8

0000516c <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    516c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    5170:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    5174:	b085      	sub	sp, #20
    5176:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    5178:	2b00      	cmp	r3, #0
    517a:	d13f      	bne.n	51fc <noise(LEDStruct&)+0x90>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    517c:	4c58      	ldr	r4, [pc, #352]	; (52e0 <noise(LEDStruct&)+0x174>)
    517e:	8823      	ldrh	r3, [r4, #0]
    5180:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5184:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5188:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    518c:	3319      	adds	r3, #25
    518e:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5190:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5194:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5198:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    519c:	3219      	adds	r2, #25
    519e:	b292      	uxth	r2, r2
    51a0:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    51a4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    51a8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    51ac:	3119      	adds	r1, #25
    51ae:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    51b0:	f64b 7068 	movw	r0, #49000	; 0xbf68
    51b4:	2646      	movs	r6, #70	; 0x46
    51b6:	fb00 f001 	mul.w	r0, r0, r1
    51ba:	fb06 f602 	mul.w	r6, r6, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    51be:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    51c2:	0c02      	lsrs	r2, r0, #16
    51c4:	0c30      	lsrs	r0, r6, #16
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    51c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    51ca:	2601      	movs	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    51cc:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
    51d0:	301e      	adds	r0, #30
	leds.mode_type = NOISE;
    51d2:	2717      	movs	r7, #23
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51d4:	8021      	strh	r1, [r4, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    51d6:	f885 31c4 	strb.w	r3, [r5, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    51da:	b292      	uxth	r2, r2
    51dc:	b281      	uxth	r1, r0
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    51de:	f885 622d 	strb.w	r6, [r5, #557]	; 0x22d
	leds.mode_type = NOISE;
	leds.use_palette = 1;
    51e2:	f885 6229 	strb.w	r6, [r5, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
    51e6:	f885 722c 	strb.w	r7, [r5, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    51ea:	2b00      	cmp	r3, #0
    51ec:	d170      	bne.n	52d0 <noise(LEDStruct&)+0x164>
	else				  	 { leds.strip_range = ONE_SIDE; }
    51ee:	234b      	movs	r3, #75	; 0x4b
    51f0:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c

	leds.noise_scale = s;
    51f4:	f8a5 1760 	strh.w	r1, [r5, #1888]	; 0x760
	leds.noise_dist = d;
    51f8:	f8a5 2762 	strh.w	r2, [r5, #1890]	; 0x762
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    51fc:	4b39      	ldr	r3, [pc, #228]	; (52e4 <noise(LEDStruct&)+0x178>)
    51fe:	781b      	ldrb	r3, [r3, #0]
    5200:	2b00      	cmp	r3, #0
    5202:	d169      	bne.n	52d8 <noise(LEDStruct&)+0x16c>

	for (int i = 0; i < leds.strip_range; i++) {
    5204:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    5208:	b37b      	cbz	r3, 526a <noise(LEDStruct&)+0xfe>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    520a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 52f0 <noise(LEDStruct&)+0x184>
    520e:	f205 18c7 	addw	r8, r5, #455	; 0x1c7
    5212:	462c      	mov	r4, r5

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    5214:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5216:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    5218:	f8b5 0760 	ldrh.w	r0, [r5, #1888]	; 0x760
    521c:	f8b5 1762 	ldrh.w	r1, [r5, #1890]	; 0x762
    5220:	fb10 f006 	smulbb	r0, r0, r6
    5224:	b280      	uxth	r0, r0
    5226:	4401      	add	r1, r0
    5228:	b289      	uxth	r1, r1
    522a:	f003 fddf 	bl	8dec <inoise8(unsigned short, unsigned short)>
    522e:	fba9 3200 	umull	r3, r2, r9, r0
    5232:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    5236:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    523a:	9700      	str	r7, [sp, #0]
    523c:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    523e:	f885 2764 	strb.w	r2, [r5, #1892]	; 0x764
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5242:	4641      	mov	r1, r8
    5244:	a803      	add	r0, sp, #12
    5246:	f003 fa2d 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    524a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    524e:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    5252:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5256:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
    5258:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    525a:	70a3      	strb	r3, [r4, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    525c:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    5260:	3601      	adds	r6, #1
    5262:	42b3      	cmp	r3, r6
    5264:	f104 0403 	add.w	r4, r4, #3
    5268:	dcd6      	bgt.n	5218 <noise(LEDStruct&)+0xac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    526a:	4b1f      	ldr	r3, [pc, #124]	; (52e8 <noise(LEDStruct&)+0x17c>)
    526c:	681b      	ldr	r3, [r3, #0]
    526e:	9303      	str	r3, [sp, #12]
	return ret;
    5270:	9803      	ldr	r0, [sp, #12]
    5272:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    5276:	fb03 f000 	mul.w	r0, r3, r0
    527a:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    527c:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    527e:	0659      	lsls	r1, r3, #25
    5280:	d521      	bpl.n	52c6 <noise(LEDStruct&)+0x15a>
        offset = (uint8_t)255 - offset;
    5282:	43db      	mvns	r3, r3
    5284:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5286:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    528a:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    528c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    5290:	110b      	asrs	r3, r1, #4
    5292:	4916      	ldr	r1, [pc, #88]	; (52ec <noise(LEDStruct&)+0x180>)
    5294:	005b      	lsls	r3, r3, #1
    5296:	18cc      	adds	r4, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5298:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    529a:	7861      	ldrb	r1, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    529c:	fb11 f202 	smulbb	r2, r1, r2
    52a0:	eb03 1322 	add.w	r3, r3, r2, asr #4
    52a4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    52a6:	0602      	lsls	r2, r0, #24
    52a8:	bf48      	it	mi
    52aa:	425b      	negmi	r3, r3
    52ac:	b25b      	sxtb	r3, r3

    y += 128;
    52ae:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    52b0:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    52b4:	f3c3 1381 	ubfx	r3, r3, #6, #2
    52b8:	3301      	adds	r3, #1
    52ba:	4413      	add	r3, r2
    52bc:	f8a5 3762 	strh.w	r3, [r5, #1890]	; 0x762
}
    52c0:	b005      	add	sp, #20
    52c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    52c6:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    52ca:	f003 020f 	and.w	r2, r3, #15
    52ce:	e7df      	b.n	5290 <noise(LEDStruct&)+0x124>
void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    52d0:	2396      	movs	r3, #150	; 0x96
    52d2:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c
    52d6:	e78d      	b.n	51f4 <noise(LEDStruct&)+0x88>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    52d8:	4628      	mov	r0, r5
    52da:	f7ff ff1b 	bl	5114 <noise_update(LEDStruct&)>
    52de:	e791      	b.n	5204 <noise(LEDStruct&)+0x98>
    52e0:	1fff875a 	.word	0x1fff875a
    52e4:	1fff95c1 	.word	0x1fff95c1
    52e8:	1fffa058 	.word	0x1fffa058
    52ec:	0000d124 	.word	0x0000d124
    52f0:	80808081 	.word	0x80808081

000052f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    52f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52f8:	4607      	mov	r7, r0
    52fa:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    52fc:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    5300:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    5304:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    5308:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    530a:	2800      	cmp	r0, #0
    530c:	d06e      	beq.n	53ec <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    530e:	085b      	lsrs	r3, r3, #1
    5310:	f103 0a14 	add.w	sl, r3, #20
    5314:	f10a 0301 	add.w	r3, sl, #1
    5318:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 53f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    531c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 53f8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    5320:	9303      	str	r3, [sp, #12]
    5322:	4614      	mov	r4, r2
    5324:	2600      	movs	r6, #0
        waveangle += 250;
    5326:	35fa      	adds	r5, #250	; 0xfa
    5328:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    532a:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    532c:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5330:	d503      	bpl.n	533a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    5332:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5336:	3307      	adds	r3, #7
    5338:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    533a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    533c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5340:	f819 0001 	ldrb.w	r0, [r9, r1]
    5344:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    5348:	fb00 3302 	mla	r3, r0, r2, r3
    534c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    534e:	0428      	lsls	r0, r5, #16
    5350:	bf48      	it	mi
    5352:	425b      	negmi	r3, r3
    5354:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    5356:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    535a:	9a03      	ldr	r2, [sp, #12]
    535c:	b29b      	uxth	r3, r3
    535e:	fb02 f303 	mul.w	r3, r2, r3
    5362:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    5366:	441c      	add	r4, r3
    5368:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    536a:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    536c:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5370:	d503      	bpl.n	537a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    5372:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5376:	3307      	adds	r3, #7
    5378:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    537a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    537c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5380:	f819 0001 	ldrb.w	r0, [r9, r1]
    5384:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    5388:	9902      	ldr	r1, [sp, #8]
    538a:	fb00 3302 	mla	r3, r0, r2, r3
    538e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5390:	0422      	lsls	r2, r4, #16
    5392:	bf48      	it	mi
    5394:	425b      	negmi	r3, r3
    5396:	b21b      	sxth	r3, r3
    5398:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    539c:	b29b      	uxth	r3, r3
    539e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    53a2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    53a6:	2301      	movs	r3, #1
    53a8:	9300      	str	r3, [sp, #0]
    53aa:	a805      	add	r0, sp, #20
    53ac:	465b      	mov	r3, fp
    53ae:	f3c2 4207 	ubfx	r2, r2, #16, #8
    53b2:	f003 f977 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    53b6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    53ba:	18b9      	adds	r1, r7, r2
    53bc:	5cbb      	ldrb	r3, [r7, r2]
    53be:	f89d 0014 	ldrb.w	r0, [sp, #20]
    53c2:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    53c6:	54bb      	strb	r3, [r7, r2]
    53c8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    53cc:	784a      	ldrb	r2, [r1, #1]
    53ce:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    53d2:	704a      	strb	r2, [r1, #1]
    53d4:	788b      	ldrb	r3, [r1, #2]
    53d6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    53da:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    53de:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    53e0:	3601      	adds	r6, #1
    53e2:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    53e6:	b2b6      	uxth	r6, r6
    53e8:	42b3      	cmp	r3, r6
    53ea:	d89c      	bhi.n	5326 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    53ec:	b007      	add	sp, #28
    53ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53f2:	bf00      	nop
    53f4:	0000dab4 	.word	0x0000dab4
    53f8:	0000cf9c 	.word	0x0000cf9c

000053fc <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    53fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5400:	4c58      	ldr	r4, [pc, #352]	; (5564 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    5402:	b083      	sub	sp, #12
    5404:	6823      	ldr	r3, [r4, #0]
    5406:	9301      	str	r3, [sp, #4]
	return ret;
    5408:	9901      	ldr	r1, [sp, #4]
    540a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    540e:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    5412:	f3c1 3147 	ubfx	r1, r1, #13, #8
    5416:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5418:	065e      	lsls	r6, r3, #25
    541a:	f140 809e 	bpl.w	555a <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    541e:	43db      	mvns	r3, r3
    5420:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5422:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    5426:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5428:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    542c:	f8df a138 	ldr.w	sl, [pc, #312]	; 5568 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    5430:	1112      	asrs	r2, r2, #4
    5432:	0052      	lsls	r2, r2, #1
    5434:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5438:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    543c:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    543e:	fb15 f303 	smulbb	r3, r5, r3
    5442:	eb02 1323 	add.w	r3, r2, r3, asr #4
    5446:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    5448:	060d      	lsls	r5, r1, #24
    544a:	bf48      	it	mi
    544c:	425b      	negmi	r3, r3
    544e:	b25b      	sxtb	r3, r3

    y += 128;
    5450:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    5452:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5454:	6822      	ldr	r2, [r4, #0]
    5456:	9200      	str	r2, [sp, #0]
    5458:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    545c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    5460:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    5462:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    5466:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    546a:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    546e:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5472:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    5476:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    547a:	0e24      	lsrs	r4, r4, #24
    547c:	2b00      	cmp	r3, #0
    547e:	d069      	beq.n	5554 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    5480:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    5484:	44a3      	add	fp, r4
    5486:	43e7      	mvns	r7, r4
    5488:	fa5f fb8b 	uxtb.w	fp, fp
    548c:	f100 0801 	add.w	r8, r0, #1
    5490:	b2ff      	uxtb	r7, r7
    5492:	e058      	b.n	5546 <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5494:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    5498:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    549a:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    549e:	1112      	asrs	r2, r2, #4
    54a0:	0052      	lsls	r2, r2, #1
    54a2:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    54a6:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    54aa:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    54ac:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    54b0:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    54b2:	fb11 f303 	smulbb	r3, r1, r3
    54b6:	eb02 1323 	add.w	r3, r2, r3, asr #4
    54ba:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    54bc:	0622      	lsls	r2, r4, #24
    54be:	7842      	ldrb	r2, [r0, #1]
    54c0:	bf48      	it	mi
    54c2:	425b      	negmi	r3, r3
    54c4:	fa0f fc8e 	sxth.w	ip, lr
    54c8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    54cc:	b25b      	sxtb	r3, r3
    54ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    54d2:	3b80      	subs	r3, #128	; 0x80
    54d4:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    54d8:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    54da:	b2db      	uxtb	r3, r3
    54dc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    54e0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    54e4:	1212      	asrs	r2, r2, #8
    54e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    54ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54ee:	4465      	add	r5, ip
    54f0:	eb02 2525 	add.w	r5, r2, r5, asr #8
    54f4:	440e      	add	r6, r1
    54f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    54fa:	eb09 2323 	add.w	r3, r9, r3, asr #8
    54fe:	eb05 2626 	add.w	r6, r5, r6, asr #8
    5502:	b2db      	uxtb	r3, r3
    5504:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    5506:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    5508:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    550a:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    550c:	42b3      	cmp	r3, r6
    550e:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    5510:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    5512:	d210      	bcs.n	5536 <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    5514:	fa81 f152 	uqadd8	r1, r1, r2
    5518:	460d      	mov	r5, r1
    551a:	fa85 f551 	uqadd8	r5, r5, r1
    551e:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5522:	f808 ec01 	strb.w	lr, [r8, #-1]
    5526:	7842      	ldrb	r2, [r0, #1]
    5528:	fa82 f251 	uqadd8	r2, r2, r1
    552c:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    552e:	7042      	strb	r2, [r0, #1]
    5530:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    5534:	7083      	strb	r3, [r0, #2]
    5536:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    5538:	455c      	cmp	r4, fp
    553a:	b2ff      	uxtb	r7, r7
    553c:	f100 0003 	add.w	r0, r0, #3
    5540:	f108 0803 	add.w	r8, r8, #3
    5544:	d006      	beq.n	5554 <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5546:	0661      	lsls	r1, r4, #25
    5548:	d4a4      	bmi.n	5494 <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    554a:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    554e:	f004 030f 	and.w	r3, r4, #15
    5552:	e7a4      	b.n	549e <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    5554:	b003      	add	sp, #12
    5556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    555a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    555e:	f003 030f 	and.w	r3, r3, #15
    5562:	e763      	b.n	542c <pacifica_add_whitecaps(LEDStruct&)+0x30>
    5564:	1fffa058 	.word	0x1fffa058
    5568:	0000d124 	.word	0x0000d124

0000556c <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    556c:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    5570:	b383      	cbz	r3, 55d4 <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    5572:	b5f0      	push	{r4, r5, r6, r7, lr}
    5574:	1e5c      	subs	r4, r3, #1
    5576:	b2a4      	uxth	r4, r4
    5578:	3401      	adds	r4, #1
    557a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    557e:	4602      	mov	r2, r0
    5580:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    5582:	2702      	movs	r7, #2
    5584:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    5586:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    5588:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    558a:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    558c:	7891      	ldrb	r1, [r2, #2]
    558e:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    5592:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    5596:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    559a:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    559e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    55a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    55a6:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    55a8:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    55aa:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    55ac:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    55b0:	2901      	cmp	r1, #1
    55b2:	bf9c      	itt	ls
    55b4:	f800 7c02 	strbls.w	r7, [r0, #-2]
    55b8:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    55ba:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    55bc:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    55be:	bf98      	it	ls
    55c0:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    55c2:	2b06      	cmp	r3, #6
    55c4:	bf98      	it	ls
    55c6:	7095      	strbls	r5, [r2, #2]
    55c8:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    55ca:	42a2      	cmp	r2, r4
    55cc:	f100 0003 	add.w	r0, r0, #3
    55d0:	d1db      	bne.n	558a <pacifica_deepen_colors(LEDStruct&)+0x1e>
    55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55d4:	4770      	bx	lr
    55d6:	bf00      	nop

000055d8 <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    55d8:	4b0a      	ldr	r3, [pc, #40]	; (5604 <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    55da:	4a0b      	ldr	r2, [pc, #44]	; (5608 <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    55dc:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    55de:	2100      	movs	r1, #0
    55e0:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    55e2:	b963      	cbnz	r3, 55fe <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    55e4:	4b09      	ldr	r3, [pc, #36]	; (560c <pacifica_update(LEDStruct&)+0x34>)
    55e6:	881b      	ldrh	r3, [r3, #0]
    55e8:	428b      	cmp	r3, r1
    55ea:	bf14      	ite	ne
    55ec:	2301      	movne	r3, #1
    55ee:	460b      	moveq	r3, r1
    55f0:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    55f4:	bf14      	ite	ne
    55f6:	2396      	movne	r3, #150	; 0x96
        else { leds.strip_range = ONE_SIDE; }
    55f8:	234b      	moveq	r3, #75	; 0x4b
    55fa:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
        break;
    default:	break;
    }
    LEDDebug(leds);
    55fe:	f7fc bc11 	b.w	1e24 <LEDDebug(LEDStruct&)>
    5602:	bf00      	nop
    5604:	1fff95d0 	.word	0x1fff95d0
    5608:	1fff95c1 	.word	0x1fff95c1
    560c:	1fff95c8 	.word	0x1fff95c8

00005610 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    5610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    5614:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    5618:	b08b      	sub	sp, #44	; 0x2c
    561a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    561c:	b9f3      	cbnz	r3, 565c <pride(LEDStruct&)+0x4c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    561e:	49ae      	ldr	r1, [pc, #696]	; (58d8 <pride(LEDStruct&)+0x2c8>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
    5620:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5624:	880b      	ldrh	r3, [r1, #0]
    5626:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    562a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    562e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5632:	3319      	adds	r3, #25
    5634:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5636:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    563a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    563e:	2501      	movs	r5, #1
	leds.mode_type = PRIDE;
    5640:	2010      	movs	r0, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5642:	800b      	strh	r3, [r1, #0]
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    5644:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    5648:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.mode_type = PRIDE;
    564c:	f884 022c 	strb.w	r0, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5650:	2a00      	cmp	r2, #0
    5652:	f000 81b1 	beq.w	59b8 <pride(LEDStruct&)+0x3a8>
    5656:	2396      	movs	r3, #150	; 0x96
    5658:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    565c:	4b9f      	ldr	r3, [pc, #636]	; (58dc <pride(LEDStruct&)+0x2cc>)
    565e:	781b      	ldrb	r3, [r3, #0]
    5660:	2b00      	cmp	r3, #0
    5662:	f040 81b1 	bne.w	59c8 <pride(LEDStruct&)+0x3b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5666:	4a9e      	ldr	r2, [pc, #632]	; (58e0 <pride(LEDStruct&)+0x2d0>)
    5668:	6813      	ldr	r3, [r2, #0]
    566a:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    566c:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    566e:	f645 7328 	movw	r3, #24360	; 0x5f28
    5672:	fb03 f000 	mul.w	r0, r3, r0
    5676:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5678:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    567a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    567e:	d503      	bpl.n	5688 <pride(LEDStruct&)+0x78>
    5680:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5684:	3307      	adds	r3, #7
    5686:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5688:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    568a:	4d96      	ldr	r5, [pc, #600]	; (58e4 <pride(LEDStruct&)+0x2d4>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    568c:	4e96      	ldr	r6, [pc, #600]	; (58e8 <pride(LEDStruct&)+0x2d8>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    568e:	f815 e001 	ldrb.w	lr, [r5, r1]
    5692:	f836 7011 	ldrh.w	r7, [r6, r1, lsl #1]
    5696:	f3c3 0146 	ubfx	r1, r3, #1, #7
    569a:	fb0e 7301 	mla	r3, lr, r1, r7

    if( theta & 0x8000 ) y = -y;
    569e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    56a0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    56a2:	bf48      	it	mi
    56a4:	425b      	negmi	r3, r3
    56a6:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56a8:	6811      	ldr	r1, [r2, #0]
    56aa:	9108      	str	r1, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    56ac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    56b0:	b29b      	uxth	r3, r3
    56b2:	ebc3 1e43 	rsb	lr, r3, r3, lsl #5
	return ret;
    56b6:	9808      	ldr	r0, [sp, #32]
    56b8:	4b8c      	ldr	r3, [pc, #560]	; (58ec <pride(LEDStruct&)+0x2dc>)
    56ba:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    56be:	fb03 f000 	mul.w	r0, r3, r0
    56c2:	0c00      	lsrs	r0, r0, #16
    56c4:	f10e 0edc 	add.w	lr, lr, #220	; 0xdc
    56c8:	fa5f fe8e 	uxtb.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    56cc:	0441      	lsls	r1, r0, #17
    56ce:	f884 e325 	strb.w	lr, [r4, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    56d2:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    56d6:	d503      	bpl.n	56e0 <pride(LEDStruct&)+0xd0>
    56d8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    56dc:	3307      	adds	r3, #7
    56de:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    56e0:	0a1f      	lsrs	r7, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    56e2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    56e6:	f815 c007 	ldrb.w	ip, [r5, r7]
    56ea:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    56ee:	fb0c 3301 	mla	r3, ip, r1, r3

    if( theta & 0x8000 ) y = -y;
    56f2:	0407      	lsls	r7, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    56f4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    56f6:	bf48      	it	mi
    56f8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    56fa:	6811      	ldr	r1, [r2, #0]
    56fc:	9107      	str	r1, [sp, #28]
    56fe:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    5700:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5704:	b29b      	uxth	r3, r3
	return ret;
    5706:	9f07      	ldr	r7, [sp, #28]
    5708:	eb03 11c3 	add.w	r1, r3, r3, lsl #7
    570c:	f64d 6308 	movw	r3, #56840	; 0xde08
    5710:	fb03 f707 	mul.w	r7, r3, r7
    5714:	0c09      	lsrs	r1, r1, #16
    5716:	0c3f      	lsrs	r7, r7, #16
    5718:	3160      	adds	r1, #96	; 0x60
    571a:	b2c9      	uxtb	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    571c:	0478      	lsls	r0, r7, #17
    571e:	f884 1322 	strb.w	r1, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5722:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5726:	d503      	bpl.n	5730 <pride(LEDStruct&)+0x120>
    5728:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    572c:	3307      	adds	r3, #7
    572e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5730:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5734:	f3c3 0046 	ubfx	r0, r3, #1, #7
    5738:	f815 800c 	ldrb.w	r8, [r5, ip]
    573c:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    5740:	fb08 3300 	mla	r3, r8, r0, r3

    if( theta & 0x8000 ) y = -y;
    5744:	043f      	lsls	r7, r7, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5746:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5748:	bf48      	it	mi
    574a:	425b      	negmi	r3, r3
    574c:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    574e:	6810      	ldr	r0, [r2, #0]
    5750:	9006      	str	r0, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5752:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5756:	b29b      	uxth	r3, r3
    5758:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
	return ret;
    575c:	9f06      	ldr	r7, [sp, #24]
    575e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5762:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    5766:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    576a:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    576c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5770:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
    5774:	b287      	uxth	r7, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5776:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    577a:	f8a4 7328 	strh.w	r7, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    577e:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5782:	d003      	beq.n	578c <pride(LEDStruct&)+0x17c>
    5784:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5788:	3307      	adds	r3, #7
    578a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    578c:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5790:	f3c3 0046 	ubfx	r0, r3, #1, #7
    5794:	f815 9008 	ldrb.w	r9, [r5, r8]
    5798:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    579c:	fb09 3300 	mla	r3, r9, r0, r3
    57a0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    57a2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    57a6:	bf18      	it	ne
    57a8:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    57aa:	6810      	ldr	r0, [r2, #0]
    57ac:	9005      	str	r0, [sp, #20]
    57ae:	b21b      	sxth	r3, r3
    57b0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    57b4:	b29b      	uxth	r3, r3
    57b6:	2026      	movs	r0, #38	; 0x26
	return ret;
    57b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    57bc:	f8b4 9320 	ldrh.w	r9, [r4, #800]	; 0x320
    57c0:	f8a4 932a 	strh.w	r9, [r4, #810]	; 0x32a
    57c4:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    57c8:	f647 3398 	movw	r3, #31640	; 0x7b98
    57cc:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    57d0:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    57d2:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    57d6:	3017      	adds	r0, #23
    57d8:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    57da:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    57de:	f884 0323 	strb.w	r0, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    57e2:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    57e6:	d003      	beq.n	57f0 <pride(LEDStruct&)+0x1e0>
    57e8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    57ec:	3307      	adds	r3, #7
    57ee:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    57f0:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
    57f8:	f815 b00a 	ldrb.w	fp, [r5, sl]
    57fc:	f836 c01a 	ldrh.w	ip, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5800:	f8b4 a31e 	ldrh.w	sl, [r4, #798]	; 0x31e
    5804:	fb0b cc03 	mla	ip, fp, r3, ip

    if( theta & 0x8000 ) y = -y;
    5808:	f418 4f00 	tst.w	r8, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    580c:	6813      	ldr	r3, [r2, #0]
    580e:	9303      	str	r3, [sp, #12]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5810:	fa1f fc8c 	uxth.w	ip, ip

    if( theta & 0x8000 ) y = -y;
    5814:	bf18      	it	ne
    5816:	f1cc 0c00 	rsbne	ip, ip, #0
	return ret;
    581a:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    581c:	6812      	ldr	r2, [r2, #0]
    581e:	9204      	str	r2, [sp, #16]
    5820:	fa0f fc8c 	sxth.w	ip, ip
    5824:	f5ac 4200 	sub.w	r2, ip, #32768	; 0x8000
    5828:	f640 38b8 	movw	r8, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    582c:	fa1f fc83 	uxth.w	ip, r3
    5830:	b292      	uxth	r2, r2
	return ret;
    5832:	f8dd b010 	ldr.w	fp, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5836:	4b2e      	ldr	r3, [pc, #184]	; (58f0 <pride(LEDStruct&)+0x2e0>)
    5838:	f8a4 c32e 	strh.w	ip, [r4, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    583c:	fb08 f202 	mul.w	r2, r8, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    5840:	ebca 0a0c 	rsb	sl, sl, ip
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5844:	f8b4 831c 	ldrh.w	r8, [r4, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    5848:	f8a4 c31e 	strh.w	ip, [r4, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    584c:	fa1f fa8a 	uxth.w	sl, sl
    5850:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5852:	fb03 f30b 	mul.w	r3, r3, fp
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5856:	fb1a 8000 	smlabb	r0, sl, r0, r8
    585a:	0c1b      	lsrs	r3, r3, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    585c:	3201      	adds	r2, #1
    585e:	fa1f f880 	uxth.w	r8, r0
    5862:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5864:	0458      	lsls	r0, r3, #17
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    5866:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    586a:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    586e:	f8a4 831c 	strh.w	r8, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5872:	f3c3 0cca 	ubfx	ip, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5876:	d505      	bpl.n	5884 <pride(LEDStruct&)+0x274>
    5878:	f5cc 6cff 	rsb	ip, ip, #2040	; 0x7f8
    587c:	f10c 0c07 	add.w	ip, ip, #7
    5880:	fa1f fc8c 	uxth.w	ip, ip

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5884:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5888:	f3cc 0046 	ubfx	r0, ip, #1, #7
    588c:	f815 c00b 	ldrb.w	ip, [r5, fp]
    5890:	f836 b01b 	ldrh.w	fp, [r6, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    5894:	f8a4 8332 	strh.w	r8, [r4, #818]	; 0x332
    5898:	fb0c bc00 	mla	ip, ip, r0, fp
    589c:	fa1f fc8c 	uxth.w	ip, ip

    if( theta & 0x8000 ) y = -y;
    58a0:	0418      	lsls	r0, r3, #16
    58a2:	bf48      	it	mi
    58a4:	f1cc 0c00 	rsbmi	ip, ip, #0
    58a8:	fa0f fc8c 	sxth.w	ip, ip

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    58ac:	f5ac 4c00 	sub.w	ip, ip, #32768	; 0x8000
    58b0:	fa1f fc8c 	uxth.w	ip, ip
    58b4:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    58b8:	0c1b      	lsrs	r3, r3, #16
    58ba:	3305      	adds	r3, #5
    58bc:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    58be:	f8b4 033c 	ldrh.w	r0, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    58c2:	fb0a 9303 	mla	r3, sl, r3, r9
    58c6:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    58ca:	2800      	cmp	r0, #0
    58cc:	d071      	beq.n	59b2 <pride(LEDStruct&)+0x3a2>
    58ce:	4638      	mov	r0, r7
    58d0:	4613      	mov	r3, r2
    58d2:	2700      	movs	r7, #0
    58d4:	e01a      	b.n	590c <pride(LEDStruct&)+0x2fc>
    58d6:	bf00      	nop
    58d8:	1fff875a 	.word	0x1fff875a
    58dc:	1fff95c1 	.word	0x1fff95c1
    58e0:	1fffa058 	.word	0x1fffa058
    58e4:	0000dab4 	.word	0x0000dab4
    58e8:	0000cf9c 	.word	0x0000cf9c
    58ec:	000174f8 	.word	0x000174f8
    58f0:	0001b580 	.word	0x0001b580
    58f4:	f8b4 932a 	ldrh.w	r9, [r4, #810]	; 0x32a
    58f8:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    58fc:	f8b4 8332 	ldrh.w	r8, [r4, #818]	; 0x332
    5900:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
    5904:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    5908:	f894 e325 	ldrb.w	lr, [r4, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
    590c:	444b      	add	r3, r9
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    590e:	4440      	add	r0, r8
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    5910:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    5912:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    5914:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5918:	0442      	lsls	r2, r0, #17
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    591a:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
		leds.hue8 = leds.hue16 / 256;
    591e:	f884 c324 	strb.w	ip, [r4, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    5922:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5926:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    592a:	d503      	bpl.n	5934 <pride(LEDStruct&)+0x324>
    592c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5930:	3307      	adds	r3, #7
    5932:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5934:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5938:	f3c3 0246 	ubfx	r2, r3, #1, #7
    593c:	f815 9008 	ldrb.w	r9, [r5, r8]
    5940:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5944:	f88d c008 	strb.w	ip, [sp, #8]
    5948:	fb09 3302 	mla	r3, r9, r2, r3
    594c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    594e:	0402      	lsls	r2, r0, #16
    5950:	bf48      	it	mi
    5952:	425b      	negmi	r3, r3
    5954:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5956:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    595a:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    595c:	fb03 f003 	mul.w	r0, r3, r3
    5960:	0c00      	lsrs	r0, r0, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    5962:	fb00 f201 	mul.w	r2, r0, r1
    5966:	43c9      	mvns	r1, r1
    5968:	eb01 4212 	add.w	r2, r1, r2, lsr #16
    596c:	b2d2      	uxtb	r2, r2
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    596e:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5972:	f8a4 0338 	strh.w	r0, [r4, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    5976:	f884 2326 	strb.w	r2, [r4, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    597a:	a901      	add	r1, sp, #4
    597c:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    597e:	f88d 200a 	strb.w	r2, [sp, #10]
    5982:	f88d e009 	strb.w	lr, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5986:	f003 f889 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    598a:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    598e:	3b01      	subs	r3, #1
    5990:	1bdb      	subs	r3, r3, r7
    5992:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    5994:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5998:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    599c:	4420      	add	r0, r4
    599e:	2240      	movs	r2, #64	; 0x40
    59a0:	a901      	add	r1, sp, #4
    59a2:	f002 fe21 	bl	85e8 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    59a6:	3701      	adds	r7, #1
    59a8:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    59ac:	b2bf      	uxth	r7, r7
    59ae:	42bb      	cmp	r3, r7
    59b0:	d8a0      	bhi.n	58f4 <pride(LEDStruct&)+0x2e4>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    59b2:	b00b      	add	sp, #44	; 0x2c
    59b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }
    59b8:	234b      	movs	r3, #75	; 0x4b
    59ba:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    59be:	4b04      	ldr	r3, [pc, #16]	; (59d0 <pride(LEDStruct&)+0x3c0>)
    59c0:	781b      	ldrb	r3, [r3, #0]
    59c2:	2b00      	cmp	r3, #0
    59c4:	f43f ae4f 	beq.w	5666 <pride(LEDStruct&)+0x56>
    59c8:	4620      	mov	r0, r4
    59ca:	f7ff fe05 	bl	55d8 <pacifica_update(LEDStruct&)>
    59ce:	e64a      	b.n	5666 <pride(LEDStruct&)+0x56>
    59d0:	1fff95c1 	.word	0x1fff95c1

000059d4 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    59d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    59d8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    59dc:	b084      	sub	sp, #16
    59de:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    59e0:	b9f3      	cbnz	r3, 5a20 <colorwave(LEDStruct&)+0x4c>
    59e2:	488a      	ldr	r0, [pc, #552]	; (5c0c <colorwave(LEDStruct&)+0x238>)
    59e4:	8803      	ldrh	r3, [r0, #0]
    59e6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    59ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    59ee:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59f2:	3319      	adds	r3, #25
    59f4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    59f6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    59fa:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    59fc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    5a00:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a02:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    5a04:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    5a08:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    5a0c:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    5a10:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5a14:	2a00      	cmp	r2, #0
    5a16:	f000 80ed 	beq.w	5bf4 <colorwave(LEDStruct&)+0x220>
    5a1a:	2396      	movs	r3, #150	; 0x96
    5a1c:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    5a20:	4b7b      	ldr	r3, [pc, #492]	; (5c10 <colorwave(LEDStruct&)+0x23c>)
    5a22:	781b      	ldrb	r3, [r3, #0]
    5a24:	2b00      	cmp	r3, #0
    5a26:	f040 80ed 	bne.w	5c04 <colorwave(LEDStruct&)+0x230>

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    5a2a:	22e0      	movs	r2, #224	; 0xe0
    5a2c:	2160      	movs	r1, #96	; 0x60
    5a2e:	f240 1055 	movw	r0, #341	; 0x155
    5a32:	f7fa fd2d 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5a36:	f44f 5220 	mov.w	r2, #10240	; 0x2800
void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    5a3a:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5a3e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    5a42:	20cb      	movs	r0, #203	; 0xcb
    5a44:	f7fa fd24 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
	leds.msmultiplier = beatsin88(147, 23, 60);
    5a48:	223c      	movs	r2, #60	; 0x3c
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5a4a:	f8a4 0328 	strh.w	r0, [r4, #808]	; 0x328
	leds.msmultiplier = beatsin88(147, 23, 60);
    5a4e:	2117      	movs	r1, #23
    5a50:	2093      	movs	r0, #147	; 0x93
    5a52:	f7fa fd1d 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>

	leds.hue16 = leds.sHue16;//gHue * 256;
    5a56:	f8b4 3320 	ldrh.w	r3, [r4, #800]	; 0x320
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    5a5a:	f884 0323 	strb.w	r0, [r4, #803]	; 0x323

	leds.hue16 = leds.sHue16;//gHue * 256;
    5a5e:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
	leds.hueinc16 = beatsin88(113, 300, 1500);
    5a62:	f240 52dc 	movw	r2, #1500	; 0x5dc
    5a66:	f44f 7196 	mov.w	r1, #300	; 0x12c
    5a6a:	2071      	movs	r0, #113	; 0x71
    5a6c:	f7fa fd10 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5a70:	4b68      	ldr	r3, [pc, #416]	; (5c14 <colorwave(LEDStruct&)+0x240>)

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5a72:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	9303      	str	r3, [sp, #12]
	return ret;
    5a7a:	9b03      	ldr	r3, [sp, #12]
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5a7c:	f894 1323 	ldrb.w	r1, [r4, #803]	; 0x323
    5a80:	f8b4 231c 	ldrh.w	r2, [r4, #796]	; 0x31c
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    5a84:	f8a4 032c 	strh.w	r0, [r4, #812]	; 0x32c

	leds.ms = millis();
    5a88:	b29b      	uxth	r3, r3
	leds.deltams = leds.ms - leds.sLastMillis;
    5a8a:	1b5d      	subs	r5, r3, r5
    5a8c:	b2ad      	uxth	r5, r5
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5a8e:	fb11 f105 	smulbb	r1, r1, r5
    5a92:	440a      	add	r2, r1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    5a94:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    5a98:	f8a4 331e 	strh.w	r3, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5a9c:	f8a4 231c 	strh.w	r2, [r4, #796]	; 0x31c
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5aa0:	2105      	movs	r1, #5
    5aa2:	2209      	movs	r2, #9

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5aa4:	f8a4 5330 	strh.w	r5, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5aa8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5aac:	f7fa fcf0 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    5ab0:	f8b4 2320 	ldrh.w	r2, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5ab4:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    5ab8:	f8b4 131c 	ldrh.w	r1, [r4, #796]	; 0x31c
    5abc:	f8a4 1332 	strh.w	r1, [r4, #818]	; 0x332

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5ac0:	fb00 2005 	mla	r0, r0, r5, r2
    5ac4:	f8a4 0320 	strh.w	r0, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5ac8:	2b00      	cmp	r3, #0
    5aca:	d07c      	beq.n	5bc6 <colorwave(LEDStruct&)+0x1f2>
    5acc:	f8df a148 	ldr.w	sl, [pc, #328]	; 5c18 <colorwave(LEDStruct&)+0x244>
    5ad0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 5c1c <colorwave(LEDStruct&)+0x248>
    5ad4:	f204 18c7 	addw	r8, r4, #455	; 0x1c7
    5ad8:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5ada:	2701      	movs	r7, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5adc:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    5ade:	f8b4 232a 	ldrh.w	r2, [r4, #810]	; 0x32a
    5ae2:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    5ae6:	4413      	add	r3, r2
    5ae8:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    5aea:	09d8      	lsrs	r0, r3, #7
			if (leds.h16_128 & 0x100) {
    5aec:	f410 7f80 	tst.w	r0, #256	; 0x100

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    5af0:	f8a4 0334 	strh.w	r0, [r4, #820]	; 0x334
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5af4:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    5af8:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5afc:	4408      	add	r0, r1
    5afe:	b280      	uxth	r0, r0
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    5b00:	ea6f 2213 	mvn.w	r2, r3, lsr #8
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    5b04:	ea4f 2e13 	mov.w	lr, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    5b08:	b2d2      	uxtb	r2, r2
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    5b0a:	bf08      	it	eq
    5b0c:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5b0e:	0441      	lsls	r1, r0, #17
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    5b10:	f884 e324 	strb.w	lr, [r4, #804]	; 0x324
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5b14:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    5b18:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5b1c:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5b20:	d503      	bpl.n	5b2a <colorwave(LEDStruct&)+0x156>
    5b22:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5b26:	3307      	adds	r3, #7
    5b28:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5b2a:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5b2e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5b32:	f81a c00e 	ldrb.w	ip, [sl, lr]
    5b36:	f839 101e 	ldrh.w	r1, [r9, lr, lsl #1]
    5b3a:	fb0c 1103 	mla	r1, ip, r3, r1
    5b3e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    5b40:	0403      	lsls	r3, r0, #16
    5b42:	bf48      	it	mi
    5b44:	4249      	negmi	r1, r1
    5b46:	b209      	sxth	r1, r1
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5b48:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    5b4c:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
    5b4e:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5b52:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5b56:	fb01 f301 	mul.w	r3, r1, r1
    5b5a:	0c19      	lsrs	r1, r3, #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    5b5c:	fb01 f300 	mul.w	r3, r1, r0
    5b60:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
    5b64:	43c0      	mvns	r0, r0
    5b66:	eb02 120e 	add.w	r2, r2, lr, lsl #4
    5b6a:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    5b6e:	b2db      	uxtb	r3, r3
    5b70:	f3c2 2207 	ubfx	r2, r2, #8, #8
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5b74:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5b78:	a802      	add	r0, sp, #8
    5b7a:	9700      	str	r7, [sp, #0]
    5b7c:	4641      	mov	r1, r8
			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    5b7e:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    5b82:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5b86:	f002 fd8d 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5b8a:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5b8e:	3b01      	subs	r3, #1
    5b90:	1b9b      	subs	r3, r3, r6
    5b92:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    5b94:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5b98:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    5b9c:	4420      	add	r0, r4
    5b9e:	2280      	movs	r2, #128	; 0x80
    5ba0:	a902      	add	r1, sp, #8
    5ba2:	3d01      	subs	r5, #1
    5ba4:	f002 fd20 	bl	85e8 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    5ba8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    5bac:	d002      	beq.n	5bb4 <colorwave(LEDStruct&)+0x1e0>
    5bae:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    5bb2:	e794      	b.n	5ade <colorwave(LEDStruct&)+0x10a>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5bb4:	3601      	adds	r6, #1
    5bb6:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5bba:	b2b6      	uxth	r6, r6
    5bbc:	42b3      	cmp	r3, r6
    5bbe:	d902      	bls.n	5bc6 <colorwave(LEDStruct&)+0x1f2>
    5bc0:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    5bc4:	e78a      	b.n	5adc <colorwave(LEDStruct&)+0x108>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    5bc6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5bca:	b983      	cbnz	r3, 5bee <colorwave(LEDStruct&)+0x21a>
    5bcc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5bd0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5bd2:	781a      	ldrb	r2, [r3, #0]
    5bd4:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5bd8:	785a      	ldrb	r2, [r3, #1]
    5bda:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5bde:	789a      	ldrb	r2, [r3, #2]
    5be0:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5be4:	3303      	adds	r3, #3
    5be6:	4299      	cmp	r1, r3
    5be8:	f1a4 0403 	sub.w	r4, r4, #3
    5bec:	d1f1      	bne.n	5bd2 <colorwave(LEDStruct&)+0x1fe>
}
    5bee:	b004      	add	sp, #16
    5bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    5bf4:	234b      	movs	r3, #75	; 0x4b
    5bf6:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    5bfa:	4b05      	ldr	r3, [pc, #20]	; (5c10 <colorwave(LEDStruct&)+0x23c>)
    5bfc:	781b      	ldrb	r3, [r3, #0]
    5bfe:	2b00      	cmp	r3, #0
    5c00:	f43f af13 	beq.w	5a2a <colorwave(LEDStruct&)+0x56>
    5c04:	4620      	mov	r0, r4
    5c06:	f7ff fce7 	bl	55d8 <pacifica_update(LEDStruct&)>
    5c0a:	e70e      	b.n	5a2a <colorwave(LEDStruct&)+0x56>
    5c0c:	1fff875a 	.word	0x1fff875a
    5c10:	1fff95c1 	.word	0x1fff95c1
    5c14:	1fffa058 	.word	0x1fffa058
    5c18:	0000dab4 	.word	0x0000dab4
    5c1c:	0000cf9c 	.word	0x0000cf9c

00005c20 <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    5c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    5c24:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    5c28:	b093      	sub	sp, #76	; 0x4c
    5c2a:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    5c2c:	b9f3      	cbnz	r3, 5c6c <pacifica(LEDStruct&)+0x4c>
    5c2e:	49c7      	ldr	r1, [pc, #796]	; (5f4c <pacifica(LEDStruct&)+0x32c>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    leds.use_palette = 0;
    5c30:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5c34:	880b      	ldrh	r3, [r1, #0]
    5c36:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5c3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5c3e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5c42:	3319      	adds	r3, #25
    5c44:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5c46:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5c4a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    5c4e:	2501      	movs	r5, #1
    leds.use_palette = 0;
    leds.mode_type = PACIFICA;
    5c50:	2011      	movs	r0, #17
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5c52:	800b      	strh	r3, [r1, #0]
    leds.use_full_range = ufr;
    5c54:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    5c58:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.use_palette = 0;
    leds.mode_type = PACIFICA;
    5c5c:	f884 022c 	strb.w	r0, [r4, #556]	; 0x22c
    leds.use_full_range = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5c60:	2a00      	cmp	r2, #0
    5c62:	f000 826b 	beq.w	613c <pacifica(LEDStruct&)+0x51c>
    5c66:	2396      	movs	r3, #150	; 0x96
    5c68:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    5c6c:	4bb8      	ldr	r3, [pc, #736]	; (5f50 <pacifica(LEDStruct&)+0x330>)
    5c6e:	781b      	ldrb	r3, [r3, #0]
    5c70:	2b00      	cmp	r3, #0
    5c72:	f040 826b 	bne.w	614c <pacifica(LEDStruct&)+0x52c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c76:	4eb7      	ldr	r6, [pc, #732]	; (5f54 <pacifica(LEDStruct&)+0x334>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    5c78:	4bb7      	ldr	r3, [pc, #732]	; (5f58 <pacifica(LEDStruct&)+0x338>)
    5c7a:	6832      	ldr	r2, [r6, #0]
    5c7c:	9204      	str	r2, [sp, #16]
	return ret;
    5c7e:	9a04      	ldr	r2, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c80:	6831      	ldr	r1, [r6, #0]
    5c82:	9111      	str	r1, [sp, #68]	; 0x44
	return ret;
    5c84:	9811      	ldr	r0, [sp, #68]	; 0x44
    5c86:	6819      	ldr	r1, [r3, #0]
    sLastms = ms;
    5c88:	601a      	str	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5c8a:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    5c8e:	fb03 f000 	mul.w	r0, r3, r0
    5c92:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5c94:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5c96:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    5c9a:	eba2 0101 	sub.w	r1, r2, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    5c9e:	d503      	bpl.n	5ca8 <pacifica(LEDStruct&)+0x88>
    5ca0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5ca4:	3307      	adds	r3, #7
    5ca6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5ca8:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    5caa:	4fac      	ldr	r7, [pc, #688]	; (5f5c <pacifica(LEDStruct&)+0x33c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5cac:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 5f78 <pacifica(LEDStruct&)+0x358>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5cb0:	f817 e002 	ldrb.w	lr, [r7, r2]
    5cb4:	f838 5012 	ldrh.w	r5, [r8, r2, lsl #1]
    5cb8:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5cbc:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    5cc0:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5cc2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5cc4:	bf48      	it	mi
    5cc6:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5cc8:	6832      	ldr	r2, [r6, #0]
    5cca:	9210      	str	r2, [sp, #64]	; 0x40
    5ccc:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5cce:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5cd2:	b29b      	uxth	r3, r3
    5cd4:	255b      	movs	r5, #91	; 0x5b
	return ret;
    5cd6:	9810      	ldr	r0, [sp, #64]	; 0x40
    5cd8:	fb05 f503 	mul.w	r5, r5, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5cdc:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    5ce0:	fb03 f000 	mul.w	r0, r3, r0
    5ce4:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5ce6:	0c2d      	lsrs	r5, r5, #16
    5ce8:	35b3      	adds	r5, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5cea:	0442      	lsls	r2, r0, #17
    5cec:	b2ad      	uxth	r5, r5
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5cee:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5cf2:	d503      	bpl.n	5cfc <pacifica(LEDStruct&)+0xdc>
    5cf4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5cf8:	3307      	adds	r3, #7
    5cfa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5cfc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5d00:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5d04:	f817 c00e 	ldrb.w	ip, [r7, lr]
    5d08:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    5d0c:	fb0c 3302 	mla	r3, ip, r2, r3
    5d10:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5d12:	0402      	lsls	r2, r0, #16
    5d14:	bf48      	it	mi
    5d16:	425b      	negmi	r3, r3
    5d18:	b21b      	sxth	r3, r3
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    5d1a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5d1e:	225b      	movs	r2, #91	; 0x5b
    5d20:	b29b      	uxth	r3, r3
    5d22:	fb02 f303 	mul.w	r3, r2, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5d26:	6832      	ldr	r2, [r6, #0]
    5d28:	920f      	str	r2, [sp, #60]	; 0x3c
    5d2a:	0c1b      	lsrs	r3, r3, #16
	return ret;
    5d2c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5d2e:	4a8c      	ldr	r2, [pc, #560]	; (5f60 <pacifica(LEDStruct&)+0x340>)
    5d30:	33b3      	adds	r3, #179	; 0xb3
    5d32:	b29b      	uxth	r3, r3
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    5d34:	fb01 f505 	mul.w	r5, r1, r5
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    5d38:	fb01 f303 	mul.w	r3, r1, r3
    5d3c:	fb02 f100 	mul.w	r1, r2, r0
    5d40:	0a1b      	lsrs	r3, r3, #8
    5d42:	0c09      	lsrs	r1, r1, #16
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    5d44:	0a2d      	lsrs	r5, r5, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    5d46:	eb05 0903 	add.w	r9, r5, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5d4a:	0448      	lsls	r0, r1, #17
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    5d4c:	9302      	str	r3, [sp, #8]
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    5d4e:	ea4f 0959 	mov.w	r9, r9, lsr #1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5d52:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5d56:	d503      	bpl.n	5d60 <pacifica(LEDStruct&)+0x140>
    5d58:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5d5c:	3307      	adds	r3, #7
    5d5e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5d60:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5d62:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5d66:	f817 e000 	ldrb.w	lr, [r7, r0]
    5d6a:	f838 3010 	ldrh.w	r3, [r8, r0, lsl #1]
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5d6e:	f8df b20c 	ldr.w	fp, [pc, #524]	; 5f7c <pacifica(LEDStruct&)+0x35c>
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5d72:	f8df a20c 	ldr.w	sl, [pc, #524]	; 5f80 <pacifica(LEDStruct&)+0x360>
    5d76:	fb0e 3302 	mla	r3, lr, r2, r3
    5d7a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5d7c:	040a      	lsls	r2, r1, #16
    5d7e:	bf4a      	itet	mi
    5d80:	425a      	negmi	r2, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5d82:	b21a      	sxthpl	r2, r3

    if( theta & 0x8000 ) y = -y;
    5d84:	b212      	sxthmi	r2, r2
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    5d86:	4b77      	ldr	r3, [pc, #476]	; (5f64 <pacifica(LEDStruct&)+0x344>)
    5d88:	9303      	str	r3, [sp, #12]
    5d8a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    5d8e:	8818      	ldrh	r0, [r3, #0]
    5d90:	f3c2 3281 	ubfx	r2, r2, #14, #2
    5d94:	320a      	adds	r2, #10
    5d96:	fb05 0002 	mla	r0, r5, r2, r0
    5d9a:	8018      	strh	r0, [r3, #0]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5d9c:	220b      	movs	r2, #11
    5d9e:	2108      	movs	r1, #8
    5da0:	f240 3009 	movw	r0, #777	; 0x309
    5da4:	f7fa fb74 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    5da8:	f8bb 2000 	ldrh.w	r2, [fp]
    5dac:	fb09 2010 	mls	r0, r9, r0, r2
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5db0:	2105      	movs	r1, #5
    5db2:	2207      	movs	r2, #7
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5db4:	f8ab 0000 	strh.w	r0, [fp]
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5db8:	f240 10f5 	movw	r0, #501	; 0x1f5
    5dbc:	f7fa fb68 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    5dc0:	f8ba 2000 	ldrh.w	r2, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5dc4:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 5f84 <pacifica(LEDStruct&)+0x364>
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5dc8:	fb05 2010 	mls	r0, r5, r0, r2
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5dcc:	2104      	movs	r1, #4
    5dce:	2206      	movs	r2, #6
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5dd0:	f8aa 0000 	strh.w	r0, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5dd4:	f240 1001 	movw	r0, #257	; 0x101
    5dd8:	f7fa fb5a 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    5ddc:	f8b9 2000 	ldrh.w	r2, [r9]
    5de0:	9b02      	ldr	r3, [sp, #8]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    5de2:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5de6:	fb03 2010 	mls	r0, r3, r0, r2
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5dea:	2202      	movs	r2, #2
    5dec:	f04f 0e06 	mov.w	lr, #6
    5df0:	f8a9 0000 	strh.w	r0, [r9]
    5df4:	250a      	movs	r5, #10
    5df6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    5dfa:	4620      	mov	r0, r4
    5dfc:	aa0e      	add	r2, sp, #56	; 0x38
    5dfe:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
    5e02:	f88d e039 	strb.w	lr, [sp, #57]	; 0x39
    5e06:	f002 fb2b 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5e0a:	6832      	ldr	r2, [r6, #0]
    5e0c:	920e      	str	r2, [sp, #56]	; 0x38

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    5e0e:	9b03      	ldr	r3, [sp, #12]
	return ret;
    5e10:	980e      	ldr	r0, [sp, #56]	; 0x38
    5e12:	881a      	ldrh	r2, [r3, #0]
    5e14:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    5e18:	fb03 f000 	mul.w	r0, r3, r0
    5e1c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5e1e:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5e20:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5e24:	d503      	bpl.n	5e2e <pacifica(LEDStruct&)+0x20e>
    5e26:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5e2a:	3307      	adds	r3, #7
    5e2c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5e2e:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5e30:	f3c3 0146 	ubfx	r1, r3, #1, #7
    5e34:	f817 e005 	ldrb.w	lr, [r7, r5]
    5e38:	f838 3015 	ldrh.w	r3, [r8, r5, lsl #1]
    5e3c:	fb0e 3301 	mla	r3, lr, r1, r3
    5e40:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5e42:	0401      	lsls	r1, r0, #16
    5e44:	bf48      	it	mi
    5e46:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5e48:	6831      	ldr	r1, [r6, #0]
    5e4a:	910d      	str	r1, [sp, #52]	; 0x34
    5e4c:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5e4e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    5e52:	980d      	ldr	r0, [sp, #52]	; 0x34
    5e54:	b29b      	uxth	r3, r3
    5e56:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    5e5a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5e5e:	fb01 f000 	mul.w	r0, r1, r0
    5e62:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    5e66:	0e00      	lsrs	r0, r0, #24
    5e68:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5e6a:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5e70:	064d      	lsls	r5, r1, #25
    5e72:	b29b      	uxth	r3, r3
    5e74:	f140 815d 	bpl.w	6132 <pacifica(LEDStruct&)+0x512>
        offset = (uint8_t)255 - offset;
    5e78:	43c9      	mvns	r1, r1
    5e7a:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5e7e:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    5e82:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5e84:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    5e88:	4d37      	ldr	r5, [pc, #220]	; (5f68 <pacifica(LEDStruct&)+0x348>)
    5e8a:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    5e8e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    5e92:	eb05 0c0e 	add.w	ip, r5, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5e96:	f815 e00e 	ldrb.w	lr, [r5, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    5e9a:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5e9e:	fb1c f101 	smulbb	r1, ip, r1
    5ea2:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    5ea6:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5ea8:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    5eaa:	bf48      	it	mi
    5eac:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5eae:	6830      	ldr	r0, [r6, #0]
    5eb0:	9008      	str	r0, [sp, #32]
    5eb2:	b249      	sxtb	r1, r1

    y += 128;
    5eb4:	3980      	subs	r1, #128	; 0x80
    5eb6:	b2c9      	uxtb	r1, r1
	return ret;
    5eb8:	f8dd e020 	ldr.w	lr, [sp, #32]
    5ebc:	482b      	ldr	r0, [pc, #172]	; (5f6c <pacifica(LEDStruct&)+0x34c>)
    5ebe:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    5ec2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    5ec6:	fb00 f00e 	mul.w	r0, r0, lr
    5eca:	1209      	asrs	r1, r1, #8
    5ecc:	0c00      	lsrs	r0, r0, #16
    5ece:	3146      	adds	r1, #70	; 0x46
    5ed0:	4240      	negs	r0, r0
    5ed2:	b2c9      	uxtb	r1, r1
    5ed4:	b280      	uxth	r0, r0
    5ed6:	9100      	str	r1, [sp, #0]
    5ed8:	9001      	str	r0, [sp, #4]
    5eda:	4925      	ldr	r1, [pc, #148]	; (5f70 <pacifica(LEDStruct&)+0x350>)
    5edc:	4620      	mov	r0, r4
    5ede:	f7ff fa09 	bl	52f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5ee2:	6833      	ldr	r3, [r6, #0]
    5ee4:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    5ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    5ee8:	f8bb 2000 	ldrh.w	r2, [fp]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5eec:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    5ef0:	fb03 f000 	mul.w	r0, r3, r0
    5ef4:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5ef6:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5ef8:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5efc:	d503      	bpl.n	5f06 <pacifica(LEDStruct&)+0x2e6>
    5efe:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5f02:	3307      	adds	r3, #7
    5f04:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5f06:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5f0a:	f3c3 0146 	ubfx	r1, r3, #1, #7
    5f0e:	f817 700e 	ldrb.w	r7, [r7, lr]
    5f12:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    5f16:	fb07 3301 	mla	r3, r7, r1, r3
    5f1a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5f1c:	0407      	lsls	r7, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f1e:	6831      	ldr	r1, [r6, #0]
    5f20:	910b      	str	r1, [sp, #44]	; 0x2c
    5f22:	bf48      	it	mi
    5f24:	425b      	negmi	r3, r3
    5f26:	b21b      	sxth	r3, r3
    5f28:	4912      	ldr	r1, [pc, #72]	; (5f74 <pacifica(LEDStruct&)+0x354>)
	return ret;
    5f2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5f2c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5f30:	b29b      	uxth	r3, r3
    5f32:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5f36:	fb01 f707 	mul.w	r7, r1, r7
    5f3a:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    5f3e:	0e3f      	lsrs	r7, r7, #24
    5f40:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5f42:	b2f9      	uxtb	r1, r7
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5f44:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    5f48:	e01e      	b.n	5f88 <pacifica(LEDStruct&)+0x368>
    5f4a:	bf00      	nop
    5f4c:	1fff875a 	.word	0x1fff875a
    5f50:	1fff95c1 	.word	0x1fff95c1
    5f54:	1fffa058 	.word	0x1fffa058
    5f58:	1fff9500 	.word	0x1fff9500
    5f5c:	0000dab4 	.word	0x0000dab4
    5f60:	000451c8 	.word	0x000451c8
    5f64:	1fff9504 	.word	0x1fff9504
    5f68:	0000d124 	.word	0x0000d124
    5f6c:	00014938 	.word	0x00014938
    5f70:	1fff9520 	.word	0x1fff9520
    5f74:	00129800 	.word	0x00129800
    5f78:	0000cf9c 	.word	0x0000cf9c
    5f7c:	1fff9506 	.word	0x1fff9506
    5f80:	1fff94ec 	.word	0x1fff94ec
    5f84:	1fff950a 	.word	0x1fff950a
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5f88:	0648      	lsls	r0, r1, #25
    5f8a:	b29b      	uxth	r3, r3
    5f8c:	f140 80cc 	bpl.w	6128 <pacifica(LEDStruct&)+0x508>
        offset = (uint8_t)255 - offset;
    5f90:	43c8      	mvns	r0, r1
    5f92:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5f94:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    5f98:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5f9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    5f9e:	1100      	asrs	r0, r0, #4
    5fa0:	0040      	lsls	r0, r0, #1
    5fa2:	eb05 0e00 	add.w	lr, r5, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5fa6:	5c28      	ldrb	r0, [r5, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    5fa8:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5fac:	fb1e f101 	smulbb	r1, lr, r1
    5fb0:	eb00 1121 	add.w	r1, r0, r1, asr #4
    5fb4:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    5fb6:	0638      	lsls	r0, r7, #24
    5fb8:	bf48      	it	mi
    5fba:	4249      	negmi	r1, r1
    5fbc:	b249      	sxtb	r1, r1

    y += 128;
    5fbe:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fc0:	6830      	ldr	r0, [r6, #0]
    5fc2:	9007      	str	r0, [sp, #28]
    5fc4:	b2c9      	uxtb	r1, r1
    5fc6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
	return ret;
    5fca:	9f07      	ldr	r7, [sp, #28]
    5fcc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5fd0:	4860      	ldr	r0, [pc, #384]	; (6154 <pacifica(LEDStruct&)+0x534>)
    5fd2:	1209      	asrs	r1, r1, #8
    5fd4:	fb00 f007 	mul.w	r0, r0, r7
    5fd8:	3128      	adds	r1, #40	; 0x28
    5fda:	b2c9      	uxtb	r1, r1
    5fdc:	0c00      	lsrs	r0, r0, #16
    5fde:	9100      	str	r1, [sp, #0]
    5fe0:	9001      	str	r0, [sp, #4]
    5fe2:	495d      	ldr	r1, [pc, #372]	; (6158 <pacifica(LEDStruct&)+0x538>)
    5fe4:	4620      	mov	r0, r4
    5fe6:	f7ff f985 	bl	52f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fea:	6833      	ldr	r3, [r6, #0]
    5fec:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    5fee:	980a      	ldr	r0, [sp, #40]	; 0x28
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    5ff0:	f8ba 2000 	ldrh.w	r2, [sl]
    5ff4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5ff8:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    5ffc:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6000:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6002:	065f      	lsls	r7, r3, #25
    6004:	f140 808b 	bpl.w	611e <pacifica(LEDStruct&)+0x4fe>
        offset = (uint8_t)255 - offset;
    6008:	43db      	mvns	r3, r3
    600a:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    600c:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6010:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6012:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6016:	1109      	asrs	r1, r1, #4
    6018:	0049      	lsls	r1, r1, #1
    601a:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    601c:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    601e:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6020:	fb17 f303 	smulbb	r3, r7, r3
    6024:	eb01 1323 	add.w	r3, r1, r3, asr #4
    6028:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    602a:	0601      	lsls	r1, r0, #24
    602c:	bf48      	it	mi
    602e:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6030:	6831      	ldr	r1, [r6, #0]
    6032:	9106      	str	r1, [sp, #24]
    6034:	b25b      	sxtb	r3, r3

    y += 128;
    6036:	3b80      	subs	r3, #128	; 0x80
	return ret;
    6038:	9806      	ldr	r0, [sp, #24]
    603a:	4948      	ldr	r1, [pc, #288]	; (615c <pacifica(LEDStruct&)+0x53c>)
    603c:	b2db      	uxtb	r3, r3
    603e:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
    6042:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    6046:	fb01 f100 	mul.w	r1, r1, r0
    604a:	121b      	asrs	r3, r3, #8
    604c:	0c09      	lsrs	r1, r1, #16
    604e:	330a      	adds	r3, #10
    6050:	4249      	negs	r1, r1
    6052:	b2db      	uxtb	r3, r3
    6054:	b289      	uxth	r1, r1
    6056:	9300      	str	r3, [sp, #0]
    6058:	9101      	str	r1, [sp, #4]
    605a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    605e:	4620      	mov	r0, r4
    6060:	493f      	ldr	r1, [pc, #252]	; (6160 <pacifica(LEDStruct&)+0x540>)
    6062:	f7ff f947 	bl	52f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6066:	6833      	ldr	r3, [r6, #0]
    6068:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    606a:	9809      	ldr	r0, [sp, #36]	; 0x24
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    606c:	f8b9 2000 	ldrh.w	r2, [r9]
    6070:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    6074:	fb03 f000 	mul.w	r0, r3, r0
    6078:	0e00      	lsrs	r0, r0, #24
    607a:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    607c:	065f      	lsls	r7, r3, #25
    607e:	d549      	bpl.n	6114 <pacifica(LEDStruct&)+0x4f4>
        offset = (uint8_t)255 - offset;
    6080:	43db      	mvns	r3, r3
    6082:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6084:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6088:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    608a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    608e:	1109      	asrs	r1, r1, #4
    6090:	0049      	lsls	r1, r1, #1
    6092:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6094:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6096:	787d      	ldrb	r5, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6098:	fb15 f303 	smulbb	r3, r5, r3
    609c:	eb01 1323 	add.w	r3, r1, r3, asr #4
    60a0:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    60a2:	0601      	lsls	r1, r0, #24
    60a4:	bf48      	it	mi
    60a6:	425b      	negmi	r3, r3
    60a8:	b25b      	sxtb	r3, r3

    y += 128;
    60aa:	3b80      	subs	r3, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60ac:	6831      	ldr	r1, [r6, #0]
    60ae:	9105      	str	r1, [sp, #20]
    60b0:	b2db      	uxtb	r3, r3
    60b2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    60b6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	return ret;
    60ba:	9d05      	ldr	r5, [sp, #20]
    60bc:	4829      	ldr	r0, [pc, #164]	; (6164 <pacifica(LEDStruct&)+0x544>)
    60be:	4928      	ldr	r1, [pc, #160]	; (6160 <pacifica(LEDStruct&)+0x540>)
    60c0:	121b      	asrs	r3, r3, #8
    60c2:	330a      	adds	r3, #10
    60c4:	fb00 f005 	mul.w	r0, r0, r5
    60c8:	b2db      	uxtb	r3, r3
    60ca:	0c00      	lsrs	r0, r0, #16
    60cc:	9300      	str	r3, [sp, #0]
    60ce:	9001      	str	r0, [sp, #4]
    60d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    60d4:	4620      	mov	r0, r4
    60d6:	f7ff f90d 	bl	52f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps(leds);
    60da:	4620      	mov	r0, r4
    60dc:	f7ff f98e 	bl	53fc <pacifica_add_whitecaps(LEDStruct&)>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors(leds);
    60e0:	4620      	mov	r0, r4
    60e2:	f7ff fa43 	bl	556c <pacifica_deepen_colors(LEDStruct&)>

    if (!leds.use_full_range) { strip_sync(leds); }
    60e6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    60ea:	b983      	cbnz	r3, 610e <pacifica(LEDStruct&)+0x4ee>
    60ec:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    60f0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    60f2:	781a      	ldrb	r2, [r3, #0]
    60f4:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    60f8:	785a      	ldrb	r2, [r3, #1]
    60fa:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    60fe:	789a      	ldrb	r2, [r3, #2]
    6100:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6104:	3303      	adds	r3, #3
    6106:	4299      	cmp	r1, r3
    6108:	f1a4 0403 	sub.w	r4, r4, #3
    610c:	d1f1      	bne.n	60f2 <pacifica(LEDStruct&)+0x4d2>
}
    610e:	b013      	add	sp, #76	; 0x4c
    6110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6114:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6118:	f003 030f 	and.w	r3, r3, #15
    611c:	e7b7      	b.n	608e <pacifica(LEDStruct&)+0x46e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    611e:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6122:	f003 030f 	and.w	r3, r3, #15
    6126:	e776      	b.n	6016 <pacifica(LEDStruct&)+0x3f6>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6128:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    612c:	f001 010f 	and.w	r1, r1, #15
    6130:	e735      	b.n	5f9e <pacifica(LEDStruct&)+0x37e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6132:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6136:	f001 010f 	and.w	r1, r1, #15
    613a:	e6a5      	b.n	5e88 <pacifica(LEDStruct&)+0x268>
    leds.mode_initialized = 1;
    leds.use_palette = 0;
    leds.mode_type = PACIFICA;
    leds.use_full_range = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
    613c:	234b      	movs	r3, #75	; 0x4b
    613e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    6142:	4b09      	ldr	r3, [pc, #36]	; (6168 <pacifica(LEDStruct&)+0x548>)
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	2b00      	cmp	r3, #0
    6148:	f43f ad95 	beq.w	5c76 <pacifica(LEDStruct&)+0x56>
    614c:	4620      	mov	r0, r4
    614e:	f7ff fa43 	bl	55d8 <pacifica_update(LEDStruct&)>
    6152:	e590      	b.n	5c76 <pacifica(LEDStruct&)+0x56>
    6154:	0001b698 	.word	0x0001b698
    6158:	1fff9550 	.word	0x1fff9550
    615c:	00022628 	.word	0x00022628
    6160:	1fff9580 	.word	0x1fff9580
    6164:	00029158 	.word	0x00029158
    6168:	1fff95c1 	.word	0x1fff95c1

0000616c <bounce_update(LEDStruct&)>:
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    616c:	4b19      	ldr	r3, [pc, #100]	; (61d4 <bounce_update(LEDStruct&)+0x68>)
	leds.bounce_rainbow = br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    616e:	4a1a      	ldr	r2, [pc, #104]	; (61d8 <bounce_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    6170:	781b      	ldrb	r3, [r3, #0]
	leds.bounce_rainbow = br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    6172:	2100      	movs	r1, #0
    6174:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    6176:	2b05      	cmp	r3, #5
    6178:	d808      	bhi.n	618c <bounce_update(LEDStruct&)+0x20>
    617a:	e8df f003 	tbb	[pc, r3]
    617e:	1812      	.short	0x1812
    6180:	0924031e 	.word	0x0924031e
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
    6184:	4b15      	ldr	r3, [pc, #84]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    6186:	881b      	ldrh	r3, [r3, #0]
    6188:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    618c:	f7fb be4a 	b.w	1e24 <LEDDebug(LEDStruct&)>
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
    6190:	4b12      	ldr	r3, [pc, #72]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    6192:	881b      	ldrh	r3, [r3, #0]
    6194:	3300      	adds	r3, #0
    6196:	bf18      	it	ne
    6198:	2301      	movne	r3, #1
    619a:	f880 3276 	strb.w	r3, [r0, #630]	; 0x276
		default:	break;
	}
	LEDDebug(leds);
    619e:	f7fb be41 	b.w	1e24 <LEDDebug(LEDStruct&)>


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
    61a2:	4b0e      	ldr	r3, [pc, #56]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    61a4:	881b      	ldrh	r3, [r3, #0]
    61a6:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    61aa:	f7fb be3b 	b.w	1e24 <LEDDebug(LEDStruct&)>

void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	break;	//b		
    61ae:	4b0b      	ldr	r3, [pc, #44]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    61b0:	881b      	ldrh	r3, [r3, #0]
    61b2:	f880 3239 	strb.w	r3, [r0, #569]	; 0x239
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    61b6:	f7fb be35 	b.w	1e24 <LEDDebug(LEDStruct&)>
void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
    61ba:	4b08      	ldr	r3, [pc, #32]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    61bc:	881b      	ldrh	r3, [r3, #0]
    61be:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    61c2:	f7fb be2f 	b.w	1e24 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
    61c6:	4b05      	ldr	r3, [pc, #20]	; (61dc <bounce_update(LEDStruct&)+0x70>)
    61c8:	881b      	ldrh	r3, [r3, #0]
    61ca:	f880 3237 	strb.w	r3, [r0, #567]	; 0x237
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    61ce:	f7fb be29 	b.w	1e24 <LEDDebug(LEDStruct&)>
    61d2:	bf00      	nop
    61d4:	1fff95d0 	.word	0x1fff95d0
    61d8:	1fff95c1 	.word	0x1fff95c1
    61dc:	1fff95c8 	.word	0x1fff95c8

000061e0 <bounce(LEDStruct&)>:
}


void bounce(LEDStruct& leds) {
    61e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    61e4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
	}
	LEDDebug(leds);
}


void bounce(LEDStruct& leds) {
    61e8:	b08b      	sub	sp, #44	; 0x2c
    61ea:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    61ec:	2a00      	cmp	r2, #0
    61ee:	f000 813f 	beq.w	6470 <bounce(LEDStruct&)+0x290>
    61f2:	f200 233a 	addw	r3, r0, #570	; 0x23a
    61f6:	9303      	str	r3, [sp, #12]
    61f8:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (keyboard_update) { bounce_update(leds); }
    61fc:	4b97      	ldr	r3, [pc, #604]	; (645c <bounce(LEDStruct&)+0x27c>)
    61fe:	781b      	ldrb	r3, [r3, #0]
    6200:	2b00      	cmp	r3, #0
    6202:	f040 8126 	bne.w	6452 <bounce(LEDStruct&)+0x272>

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    6206:	f894 3276 	ldrb.w	r3, [r4, #630]	; 0x276
    620a:	2b00      	cmp	r3, #0
    620c:	f000 80fc 	beq.w	6408 <bounce(LEDStruct&)+0x228>
    6210:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    6214:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    6218:	1c51      	adds	r1, r2, #1
    621a:	f884 1279 	strb.w	r1, [r4, #633]	; 0x279
    621e:	4620      	mov	r0, r4
    6220:	214b      	movs	r1, #75	; 0x4b
    6222:	f002 f92d 	bl	8480 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    6226:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    622a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    622e:	4f8c      	ldr	r7, [pc, #560]	; (6460 <bounce(LEDStruct&)+0x280>)
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    6230:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    6234:	9803      	ldr	r0, [sp, #12]
    6236:	2114      	movs	r1, #20
    6238:	f002 f9d4 	bl	85e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    623c:	683b      	ldr	r3, [r7, #0]
    623e:	9308      	str	r3, [sp, #32]
	return ret;
    6240:	9808      	ldr	r0, [sp, #32]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    6242:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    6246:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    624a:	f44f 738c 	mov.w	r3, #280	; 0x118
    624e:	fb03 f300 	mul.w	r3, r3, r0
    6252:	0209      	lsls	r1, r1, #8
    6254:	fb03 f101 	mul.w	r1, r3, r1
    6258:	0e09      	lsrs	r1, r1, #24
    625a:	b2c8      	uxtb	r0, r1
    625c:	3a01      	subs	r2, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    625e:	0646      	lsls	r6, r0, #25
    6260:	b2d2      	uxtb	r2, r2
    6262:	f140 80cc 	bpl.w	63fe <bounce(LEDStruct&)+0x21e>
        offset = (uint8_t)255 - offset;
    6266:	43c3      	mvns	r3, r0
    6268:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    626a:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    626e:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6274:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 6468 <bounce(LEDStruct&)+0x288>
    6278:	111b      	asrs	r3, r3, #4
    627a:	005b      	lsls	r3, r3, #1
    627c:	eb0a 0603 	add.w	r6, sl, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6280:	f81a 3003 	ldrb.w	r3, [sl, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6284:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6286:	fb16 f000 	smulbb	r0, r6, r0
    628a:	eb03 1320 	add.w	r3, r3, r0, asr #4
    if( theta & 0x80 ) y = -y;
    628e:	0609      	lsls	r1, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6290:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6292:	bf48      	it	mi
    6294:	425b      	negmi	r3, r3
    6296:	b25b      	sxtb	r3, r3
    6298:	3b80      	subs	r3, #128	; 0x80
    629a:	b2de      	uxtb	r6, r3
    629c:	fb02 6606 	mla	r6, r2, r6, r6
    62a0:	1236      	asrs	r6, r6, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    62a2:	2301      	movs	r3, #1
    62a4:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    62a8:	f884 6238 	strb.w	r6, [r4, #568]	; 0x238
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    62ac:	4649      	mov	r1, r9
    62ae:	9300      	str	r3, [sp, #0]
    62b0:	4640      	mov	r0, r8
    62b2:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    62b4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    62b8:	f002 f9f4 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    62bc:	19a3      	adds	r3, r4, r6
    62be:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    62c2:	f893 223a 	ldrb.w	r2, [r3, #570]	; 0x23a
    62c6:	fa82 f251 	uqadd8	r2, r2, r1
    62ca:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
    62ce:	f893 123b 	ldrb.w	r1, [r3, #571]	; 0x23b
    62d2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    62d6:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    62da:	f883 123b 	strb.w	r1, [r3, #571]	; 0x23b
    62de:	f893 223c 	ldrb.w	r2, [r3, #572]	; 0x23c
    62e2:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    62e6:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    62ea:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    62ee:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    62f2:	b1f3      	cbz	r3, 6332 <bounce(LEDStruct&)+0x152>
    62f4:	2600      	movs	r6, #0
    62f6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    62f8:	46b0      	mov	r8, r6
    62fa:	e001      	b.n	6300 <bounce(LEDStruct&)+0x120>
    62fc:	f201 213a 	addw	r1, r1, #570	; 0x23a
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    6300:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    6304:	4433      	add	r3, r6
    6306:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    630a:	18e2      	adds	r2, r4, r3
    630c:	f804 8003 	strb.w	r8, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    6310:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    6312:	f882 8001 	strb.w	r8, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    6316:	f882 8002 	strb.w	r8, [r2, #2]
    631a:	22ff      	movs	r2, #255	; 0xff
    631c:	f002 f964 	bl	85e8 <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    6320:	3601      	adds	r6, #1
    6322:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    6326:	b2f6      	uxtb	r6, r6
    6328:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    632c:	42b3      	cmp	r3, r6
    632e:	4421      	add	r1, r4
    6330:	d8e4      	bhi.n	62fc <bounce(LEDStruct&)+0x11c>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    6332:	f8df 8138 	ldr.w	r8, [pc, #312]	; 646c <bounce(LEDStruct&)+0x28c>
    6336:	f8d8 2000 	ldr.w	r2, [r8]
    633a:	07d6      	lsls	r6, r2, #31
    633c:	d51a      	bpl.n	6374 <bounce(LEDStruct&)+0x194>
    633e:	4e49      	ldr	r6, [pc, #292]	; (6464 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6340:	683a      	ldr	r2, [r7, #0]
    6342:	9207      	str	r2, [sp, #28]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    6344:	e896 0003 	ldmia.w	r6, {r0, r1}
	return ret;
    6348:	9a07      	ldr	r2, [sp, #28]
    634a:	1a12      	subs	r2, r2, r0
    634c:	428a      	cmp	r2, r1
    634e:	d222      	bcs.n	6396 <bounce(LEDStruct&)+0x1b6>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    6350:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6352:	781a      	ldrb	r2, [r3, #0]
    6354:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6358:	785a      	ldrb	r2, [r3, #1]
    635a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    635e:	789a      	ldrb	r2, [r3, #2]
    6360:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6364:	3303      	adds	r3, #3
    6366:	429d      	cmp	r5, r3
    6368:	f1a4 0403 	sub.w	r4, r4, #3
    636c:	d1f1      	bne.n	6352 <bounce(LEDStruct&)+0x172>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }

	strip_sync(leds);
}
    636e:	b00b      	add	sp, #44	; 0x2c
    6370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    6374:	4640      	mov	r0, r8
    6376:	f003 f8ad 	bl	94d4 <__cxa_guard_acquire>
    637a:	2800      	cmp	r0, #0
    637c:	f040 810e 	bne.w	659c <bounce(LEDStruct&)+0x3bc>
    6380:	4e38      	ldr	r6, [pc, #224]	; (6464 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6382:	683b      	ldr	r3, [r7, #0]
    6384:	9307      	str	r3, [sp, #28]
    6386:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    638a:	9b07      	ldr	r3, [sp, #28]
    638c:	1a5b      	subs	r3, r3, r1
    638e:	4293      	cmp	r3, r2
    6390:	d3de      	bcc.n	6350 <bounce(LEDStruct&)+0x170>
    6392:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6396:	683a      	ldr	r2, [r7, #0]
    6398:	9206      	str	r2, [sp, #24]
	return ret;
    639a:	9906      	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    639c:	683a      	ldr	r2, [r7, #0]
    639e:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    63a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    63a2:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
    63a6:	6031      	str	r1, [r6, #0]
    63a8:	f44f 718c 	mov.w	r1, #280	; 0x118
    63ac:	fb01 f100 	mul.w	r1, r1, r0
    63b0:	0212      	lsls	r2, r2, #8
    63b2:	fb02 f101 	mul.w	r1, r2, r1
    63b6:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    63b8:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    63ba:	0650      	lsls	r0, r2, #25
    63bc:	f100 80e6 	bmi.w	658c <bounce(LEDStruct&)+0x3ac>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    63c0:	f002 063f 	and.w	r6, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    63c4:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    63c8:	1132      	asrs	r2, r6, #4
    63ca:	0052      	lsls	r2, r2, #1
    63cc:	eb0a 0602 	add.w	r6, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    63d0:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    63d4:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    63d6:	fb16 f000 	smulbb	r0, r6, r0
    63da:	eb02 1220 	add.w	r2, r2, r0, asr #4
    63de:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    63e0:	0609      	lsls	r1, r1, #24
    63e2:	bf48      	it	mi
    63e4:	4252      	negmi	r2, r2
    63e6:	b252      	sxtb	r2, r2
    63e8:	f1c3 034a 	rsb	r3, r3, #74	; 0x4a
    63ec:	3a80      	subs	r2, #128	; 0x80
    63ee:	b2d9      	uxtb	r1, r3
    63f0:	b2d3      	uxtb	r3, r2
    63f2:	fb01 3303 	mla	r3, r1, r3, r3
    63f6:	121b      	asrs	r3, r3, #8
    63f8:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    63fc:	e7a8      	b.n	6350 <bounce(LEDStruct&)+0x170>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    63fe:	f000 033f 	and.w	r3, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6402:	f000 000f 	and.w	r0, r0, #15
    6406:	e735      	b.n	6274 <bounce(LEDStruct&)+0x94>
void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }
    6408:	f894 7279 	ldrb.w	r7, [r4, #633]	; 0x279
    640c:	f894 b278 	ldrb.w	fp, [r4, #632]	; 0x278
    6410:	1c7b      	adds	r3, r7, #1
    6412:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    6416:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    641a:	4626      	mov	r6, r4
    641c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
    6420:	f04f 0a01 	mov.w	sl, #1
    6424:	463a      	mov	r2, r7
    6426:	23ff      	movs	r3, #255	; 0xff
    6428:	4649      	mov	r1, r9
    642a:	f8cd a000 	str.w	sl, [sp]
    642e:	4640      	mov	r0, r8
    6430:	f002 f938 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6434:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
        g = rhs.g;
    6438:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
        b = rhs.b;
    643c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6440:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    6442:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    6444:	70b3      	strb	r3, [r6, #2]
    6446:	3603      	adds	r6, #3
        colorIndex += incIndex;
    6448:	445f      	add	r7, fp
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    644a:	42ae      	cmp	r6, r5
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
        colorIndex += incIndex;
    644c:	b2ff      	uxtb	r7, r7
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    644e:	d1e9      	bne.n	6424 <bounce(LEDStruct&)+0x244>
    6450:	e6ed      	b.n	622e <bounce(LEDStruct&)+0x4e>
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    6452:	4620      	mov	r0, r4
    6454:	f7ff fe8a 	bl	616c <bounce_update(LEDStruct&)>
    6458:	e6d5      	b.n	6206 <bounce(LEDStruct&)+0x26>
    645a:	bf00      	nop
    645c:	1fff95c1 	.word	0x1fff95c1
    6460:	1fffa058 	.word	0x1fffa058
    6464:	1fff94f4 	.word	0x1fff94f4
    6468:	0000d124 	.word	0x0000d124
    646c:	1fff95c4 	.word	0x1fff95c4
    6470:	f8df c144 	ldr.w	ip, [pc, #324]	; 65b8 <bounce(LEDStruct&)+0x3d8>

void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10, 21), uint8_t bsb = random8(8, 20), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 7)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
    6474:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    6478:	f8bc 3000 	ldrh.w	r3, [ip]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    647c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    6480:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    6484:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6488:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    648c:	3519      	adds	r5, #25
    648e:	b2ad      	uxth	r5, r5
    6490:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    6494:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    6498:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    649c:	3619      	adds	r6, #25
    649e:	b2b6      	uxth	r6, r6
    64a0:	eb06 2746 	add.w	r7, r6, r6, lsl #9
    64a4:	eb06 0787 	add.w	r7, r6, r7, lsl #2
    64a8:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    64ac:	3719      	adds	r7, #25
    64ae:	b2bf      	uxth	r7, r7
    64b0:	eb07 2947 	add.w	r9, r7, r7, lsl #9
    64b4:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    64b8:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    64bc:	f109 0919 	add.w	r9, r9, #25
    64c0:	fa1f f989 	uxth.w	r9, r9
    64c4:	eb09 2349 	add.w	r3, r9, r9, lsl #9
    64c8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    64cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    64d0:	3319      	adds	r3, #25
    64d2:	b29b      	uxth	r3, r3
    64d4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    64d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    64dc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    64e0:	3119      	adds	r1, #25
    64e2:	fa1f fa81 	uxth.w	sl, r1
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10, 21), uint8_t bsb = random8(8, 20), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 7)) {
	leds.mode_initialized = 1;
    64e6:	2001      	movs	r0, #1
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    64e8:	f204 213a 	addw	r1, r4, #570	; 0x23a
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10, 21), uint8_t bsb = random8(8, 20), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 7)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
    64ec:	f04f 0e18 	mov.w	lr, #24
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    64f0:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    64f4:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    64f8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    64fc:	9103      	str	r1, [sp, #12]
    64fe:	b2ff      	uxtb	r7, r7
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10, 21), uint8_t bsb = random8(8, 20), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 7)) {
	leds.mode_initialized = 1;
    6500:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    6504:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
	leds.mode_type = BOUNCE;
    6508:	f884 e22c 	strb.w	lr, [r4, #556]	; 0x22c
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    650c:	4608      	mov	r0, r1
    650e:	eb0a 2e1a 	add.w	lr, sl, sl, lsr #8
    6512:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    6516:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    651a:	2114      	movs	r1, #20
    651c:	4642      	mov	r2, r8
    651e:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    6522:	eb09 2919 	add.w	r9, r9, r9, lsr #8
    6526:	fa5f fb83 	uxtb.w	fp, r3
    652a:	b2ed      	uxtb	r5, r5
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    652c:	f8ac a000 	strh.w	sl, [ip]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6530:	fa5f f989 	uxtb.w	r9, r9
    6534:	fa5f fa8e 	uxtb.w	sl, lr
    6538:	f001 ff92 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
    653c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
    6540:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    6544:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.bounce_length = bl;
	leds.juggle_beat = jb;
	leds.rainbow_diff = rd;
    6548:	eb0a 0e4a 	add.w	lr, sl, sl, lsl #1
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
	leds.juggle_beat = jb;
    654c:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
	leds.rainbow_diff = rd;
	leds.bounce_start_beat = bsb;
    6550:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
    6554:	eb07 0343 	add.w	r3, r7, r3, lsl #1
    6558:	b2f6      	uxtb	r6, r6
	leds.juggle_beat = jb;
	leds.rainbow_diff = rd;
    655a:	ea4f 15ee 	mov.w	r5, lr, asr #7
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
	leds.juggle_beat = jb;
    655e:	1140      	asrs	r0, r0, #5
	leds.rainbow_diff = rd;
	leds.bounce_start_beat = bsb;
    6560:	1189      	asrs	r1, r1, #6
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
    6562:	1152      	asrs	r2, r2, #5
	leds.bounce_length = bl;
    6564:	121b      	asrs	r3, r3, #8
	leds.juggle_beat = jb;
	leds.rainbow_diff = rd;
    6566:	3501      	adds	r5, #1
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
	leds.juggle_beat = jb;
    6568:	3050      	adds	r0, #80	; 0x50
	leds.rainbow_diff = rd;
	leds.bounce_start_beat = bsb;
    656a:	3108      	adds	r1, #8
	leds.bounce_rainbow = br;
    656c:	09f6      	lsrs	r6, r6, #7
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
    656e:	3a4c      	subs	r2, #76	; 0x4c
	leds.bounce_length = bl;
    6570:	330a      	adds	r3, #10
	leds.juggle_beat = jb;
	leds.rainbow_diff = rd;
    6572:	f884 5278 	strb.w	r5, [r4, #632]	; 0x278
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
	leds.bounce_length = bl;
	leds.juggle_beat = jb;
    6576:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
	leds.rainbow_diff = rd;
	leds.bounce_start_beat = bsb;
    657a:	f884 1237 	strb.w	r1, [r4, #567]	; 0x237
	leds.bounce_rainbow = br;
    657e:	f884 6276 	strb.w	r6, [r4, #630]	; 0x276
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade = jf;
    6582:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.bounce_length = bl;
    6586:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    658a:	e637      	b.n	61fc <bounce(LEDStruct&)+0x1c>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    658c:	43d2      	mvns	r2, r2
    658e:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6590:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    6594:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6596:	f002 063f 	and.w	r6, r2, #63	; 0x3f
    659a:	e715      	b.n	63c8 <bounce(LEDStruct&)+0x1e8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    659c:	683b      	ldr	r3, [r7, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    659e:	4e05      	ldr	r6, [pc, #20]	; (65b4 <bounce(LEDStruct&)+0x3d4>)
    65a0:	9305      	str	r3, [sp, #20]
	return ret;
    65a2:	9b05      	ldr	r3, [sp, #20]
    65a4:	6033      	str	r3, [r6, #0]
    65a6:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    65a8:	4640      	mov	r0, r8
    65aa:	6073      	str	r3, [r6, #4]
    65ac:	f002 ff98 	bl	94e0 <__cxa_guard_release>
    65b0:	e6e7      	b.n	6382 <bounce(LEDStruct&)+0x1a2>
    65b2:	bf00      	nop
    65b4:	1fff94f4 	.word	0x1fff94f4
    65b8:	1fff875a 	.word	0x1fff875a
    65bc:	ffffffff 	.word	0xffffffff

000065c0 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>:
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(100,200), uint8_t nob = random8(1, MAX_NUMBER_OF_BALLS + 1)) {
    65c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.mode_initialized = 1;
    65c4:	2601      	movs	r6, #1
	leds.use_palette = up;
	leds.use_full_range = 0;
	leds.mode_type = BOUNCING_BALLS;
    65c6:	2519      	movs	r5, #25


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(100,200), uint8_t nob = random8(1, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized = 1;
	leds.use_palette = up;
	leds.use_full_range = 0;
    65c8:	2400      	movs	r4, #0
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(100,200), uint8_t nob = random8(1, MAX_NUMBER_OF_BALLS + 1)) {
    65ca:	b087      	sub	sp, #28
	leds.mode_initialized = 1;
	leds.use_palette = up;
    65cc:	f880 1229 	strb.w	r1, [r0, #553]	; 0x229
	leds.use_full_range = 0;
	leds.mode_type = BOUNCING_BALLS;

	leds.bouncing_fade = bf;
    65d0:	f880 2766 	strb.w	r2, [r0, #1894]	; 0x766
	leds.number_of_balls = nob;
    65d4:	f880 3767 	strb.w	r3, [r0, #1895]	; 0x767
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(100,200), uint8_t nob = random8(1, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized = 1;
    65d8:	f880 622d 	strb.w	r6, [r0, #557]	; 0x22d
	leds.use_palette = up;
	leds.use_full_range = 0;
	leds.mode_type = BOUNCING_BALLS;
    65dc:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(100,200), uint8_t nob = random8(1, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized = 1;
	leds.use_palette = up;
	leds.use_full_range = 0;
    65e0:	f880 41c4 	strb.w	r4, [r0, #452]	; 0x1c4
	leds.mode_type = BOUNCING_BALLS;

	leds.bouncing_fade = bf;
	leds.number_of_balls = nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    65e4:	2b00      	cmp	r3, #0
    65e6:	d043      	beq.n	6670 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xb0>
    65e8:	469b      	mov	fp, r3
    65ea:	4b25      	ldr	r3, [pc, #148]	; (6680 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc0>)
    65ec:	4605      	mov	r5, r0
    65ee:	681b      	ldr	r3, [r3, #0]
    65f0:	9301      	str	r3, [sp, #4]
    65f2:	4658      	mov	r0, fp
    65f4:	f004 fec8 	bl	b388 <__aeabi_ui2d>
    65f8:	4602      	mov	r2, r0
    65fa:	460b      	mov	r3, r1
    65fc:	f004 ff3a 	bl	b474 <__aeabi_dmul>
    6600:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6604:	f205 7ae4 	addw	sl, r5, #2020	; 0x7e4
    6608:	f205 7964 	addw	r9, r5, #1892	; 0x764
    660c:	f205 78c4 	addw	r8, r5, #1988	; 0x7c4
    6610:	f205 7784 	addw	r7, r5, #1924	; 0x784
    6614:	f205 76a4 	addw	r6, r5, #1956	; 0x7a4
    6618:	f605 0504 	addw	r5, r5, #2052	; 0x804
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    661c:	4b19      	ldr	r3, [pc, #100]	; (6684 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc4>)
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	9305      	str	r3, [sp, #20]
	return ret;
    6622:	9b05      	ldr	r3, [sp, #20]
		leds.bouncing_tLast[i] = millis();
    6624:	f84a 3f04 	str.w	r3, [sl, #4]!
		leds.bouncing_heights[i] = h0;
    6628:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    662c:	f849 3f04 	str.w	r3, [r9, #4]!
		leds.bouncing_pos[i] = 0;                              // Balls start on the ground
    6630:	2300      	movs	r3, #0
    6632:	f848 3f04 	str.w	r3, [r8, #4]!
		leds.bouncing_vImpact[i] = bouncing_vImpact0;                   // And "pop" up at vImpact0
    6636:	9b01      	ldr	r3, [sp, #4]
    6638:	f847 3f04 	str.w	r3, [r7, #4]!
		leds.bouncing_tCycle[i] = 0;
    663c:	2300      	movs	r3, #0
    663e:	f846 3f04 	str.w	r3, [r6, #4]!
		leds.bouncing_COR[i] = 0.90 - float(i) / pow(leds.number_of_balls, 2);
    6642:	4620      	mov	r0, r4
    6644:	f005 fa32 	bl	baac <__aeabi_i2f>
    6648:	f004 fec0 	bl	b3cc <__aeabi_f2d>
    664c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6650:	f005 f83a 	bl	b6c8 <__aeabi_ddiv>
    6654:	4602      	mov	r2, r0
    6656:	460b      	mov	r3, r1
    6658:	a107      	add	r1, pc, #28	; (adr r1, 6678 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xb8>)
    665a:	e9d1 0100 	ldrd	r0, r1, [r1]
    665e:	f004 fd55 	bl	b10c <__aeabi_dsub>
    6662:	f005 f919 	bl	b898 <__aeabi_d2f>
	leds.mode_type = BOUNCING_BALLS;

	leds.bouncing_fade = bf;
	leds.number_of_balls = nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    6666:	3401      	adds	r4, #1
    6668:	455c      	cmp	r4, fp
		leds.bouncing_tLast[i] = millis();
		leds.bouncing_heights[i] = h0;
		leds.bouncing_pos[i] = 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i] = bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i] = 0;
		leds.bouncing_COR[i] = 0.90 - float(i) / pow(leds.number_of_balls, 2);
    666a:	f845 0f04 	str.w	r0, [r5, #4]!
	leds.mode_type = BOUNCING_BALLS;

	leds.bouncing_fade = bf;
	leds.number_of_balls = nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    666e:	d1d5      	bne.n	661c <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0x5c>
		leds.bouncing_pos[i] = 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i] = bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i] = 0;
		leds.bouncing_COR[i] = 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}
    6670:	b007      	add	sp, #28
    6672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6676:	bf00      	nop
    6678:	c0000000 	.word	0xc0000000
    667c:	3feccccc 	.word	0x3feccccc
    6680:	1fff8740 	.word	0x1fff8740
    6684:	1fffa058 	.word	0x1fffa058

00006688 <bouncing_balls_update(LEDStruct&)>:

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    6688:	4b09      	ldr	r3, [pc, #36]	; (66b0 <bouncing_balls_update(LEDStruct&)+0x28>)
		leds.bouncing_COR[i] = 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    668a:	4a0a      	ldr	r2, [pc, #40]	; (66b4 <bouncing_balls_update(LEDStruct&)+0x2c>)
	switch (update_var) {
    668c:	781b      	ldrb	r3, [r3, #0]
		leds.bouncing_COR[i] = 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    668e:	2100      	movs	r1, #0
    6690:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    6692:	b13b      	cbz	r3, 66a4 <bouncing_balls_update(LEDStruct&)+0x1c>
    6694:	2b01      	cmp	r3, #1
    6696:	d103      	bne.n	66a0 <bouncing_balls_update(LEDStruct&)+0x18>
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		leds.number_of_balls = (uint8_t)update_arg;	constrain(leds.number_of_balls, 1, MAX_NUMBER_OF_BALLS); break;	//b		
    6698:	4b07      	ldr	r3, [pc, #28]	; (66b8 <bouncing_balls_update(LEDStruct&)+0x30>)
    669a:	881b      	ldrh	r3, [r3, #0]
    669c:	f880 3767 	strb.w	r3, [r0, #1895]	; 0x767
	default:	break;
	}
	LEDDebug(leds);
    66a0:	f7fb bbc0 	b.w	1e24 <LEDDebug(LEDStruct&)>
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
    66a4:	4b04      	ldr	r3, [pc, #16]	; (66b8 <bouncing_balls_update(LEDStruct&)+0x30>)
    66a6:	881b      	ldrh	r3, [r3, #0]
    66a8:	f880 3766 	strb.w	r3, [r0, #1894]	; 0x766
	case 1:		leds.number_of_balls = (uint8_t)update_arg;	constrain(leds.number_of_balls, 1, MAX_NUMBER_OF_BALLS); break;	//b		
	default:	break;
	}
	LEDDebug(leds);
    66ac:	f7fb bbba 	b.w	1e24 <LEDDebug(LEDStruct&)>
    66b0:	1fff95d0 	.word	0x1fff95d0
    66b4:	1fff95c1 	.word	0x1fff95c1
    66b8:	1fff95c8 	.word	0x1fff95c8

000066bc <bouncing_balls(LEDStruct&)>:
}

void bouncing_balls(LEDStruct& leds) {
    66bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    66c0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	default:	break;
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
    66c4:	b089      	sub	sp, #36	; 0x24
    66c6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    66c8:	2b00      	cmp	r3, #0
    66ca:	f000 80ce 	beq.w	686a <bouncing_balls(LEDStruct&)+0x1ae>
	if (keyboard_update) { bouncing_balls_update(leds); }
    66ce:	4b83      	ldr	r3, [pc, #524]	; (68dc <bouncing_balls(LEDStruct&)+0x220>)
    66d0:	781b      	ldrb	r3, [r3, #0]
    66d2:	2b00      	cmp	r3, #0
    66d4:	f040 80fe 	bne.w	68d4 <bouncing_balls(LEDStruct&)+0x218>

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    66d8:	f894 3767 	ldrb.w	r3, [r4, #1895]	; 0x767
    66dc:	2b00      	cmp	r3, #0
    66de:	f000 80c1 	beq.w	6864 <bouncing_balls(LEDStruct&)+0x1a8>
    66e2:	f04f 0800 	mov.w	r8, #0
    66e6:	f8df 9204 	ldr.w	r9, [pc, #516]	; 68ec <bouncing_balls(LEDStruct&)+0x230>
    66ea:	46c3      	mov	fp, r8
    66ec:	e032      	b.n	6754 <bouncing_balls(LEDStruct&)+0x98>
			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       

		if (leds.use_palette) {
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
    66ee:	f894 3765 	ldrb.w	r3, [r4, #1893]	; 0x765
    66f2:	f894 2767 	ldrb.w	r2, [r4, #1895]	; 0x767
    66f6:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    66fa:	9100      	str	r1, [sp, #0]
    66fc:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    6700:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    6704:	fb96 f6f2 	sdiv	r6, r6, r2
    6708:	18f2      	adds	r2, r6, r3
    670a:	b2d2      	uxtb	r2, r2
    670c:	23ff      	movs	r3, #255	; 0xff
    670e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    6712:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    6716:	a805      	add	r0, sp, #20
    6718:	f001 ffc4 	bl	86a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    671c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    6720:	55e3      	strb	r3, [r4, r7]
    6722:	4427      	add	r7, r4
        g = rhs.g;
        b = rhs.b;
    6724:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    6728:	f89d 2015 	ldrb.w	r2, [sp, #21]
    672c:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    672e:	70bb      	strb	r3, [r7, #2]
			leds.bouncing_index++;
    6730:	f894 3765 	ldrb.w	r3, [r4, #1893]	; 0x765
    6734:	3301      	adds	r3, #1
    6736:	f884 3765 	strb.w	r3, [r4, #1893]	; 0x765

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    673a:	f10b 0b01 	add.w	fp, fp, #1
    673e:	f894 3767 	ldrb.w	r3, [r4, #1895]	; 0x767
    6742:	fa5f fb8b 	uxtb.w	fp, fp
    6746:	f108 0828 	add.w	r8, r8, #40	; 0x28
    674a:	455b      	cmp	r3, fp
    674c:	fa5f f888 	uxtb.w	r8, r8
    6750:	f240 8088 	bls.w	6864 <bouncing_balls(LEDStruct&)+0x1a8>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
    6754:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    6758:	214b      	movs	r1, #75	; 0x4b
    675a:	4620      	mov	r0, r4
    675c:	fa0f f68b 	sxth.w	r6, fp
    6760:	f001 ff40 	bl	85e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    6764:	eb04 0586 	add.w	r5, r4, r6, lsl #2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6768:	f8d9 3000 	ldr.w	r3, [r9]
    676c:	9306      	str	r3, [sp, #24]
	return ret;
    676e:	9806      	ldr	r0, [sp, #24]
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    6770:	f8d5 37e8 	ldr.w	r3, [r5, #2024]	; 0x7e8
    6774:	1ac0      	subs	r0, r0, r3
    6776:	f005 f995 	bl	baa4 <__aeabi_ui2f>
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    677a:	4959      	ldr	r1, [pc, #356]	; (68e0 <bouncing_balls(LEDStruct&)+0x224>)
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    677c:	f8c5 07a8 	str.w	r0, [r5, #1960]	; 0x7a8
    6780:	4607      	mov	r7, r0
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    6782:	f005 fa9b 	bl	bcbc <__aeabi_fdiv>
    6786:	f004 fe21 	bl	b3cc <__aeabi_f2d>
    678a:	4602      	mov	r2, r0
    678c:	460b      	mov	r3, r1
    678e:	f004 fe71 	bl	b474 <__aeabi_dmul>
    6792:	2200      	movs	r2, #0
    6794:	4b53      	ldr	r3, [pc, #332]	; (68e4 <bouncing_balls(LEDStruct&)+0x228>)
    6796:	f8d5 a788 	ldr.w	sl, [r5, #1928]	; 0x788
    679a:	f004 fe6b 	bl	b474 <__aeabi_dmul>
    679e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    67a2:	4651      	mov	r1, sl
    67a4:	4638      	mov	r0, r7
    67a6:	f005 f9d5 	bl	bb54 <__aeabi_fmul>
    67aa:	494d      	ldr	r1, [pc, #308]	; (68e0 <bouncing_balls(LEDStruct&)+0x224>)
    67ac:	f005 fa86 	bl	bcbc <__aeabi_fdiv>
    67b0:	f004 fe0c 	bl	b3cc <__aeabi_f2d>
    67b4:	4602      	mov	r2, r0
    67b6:	460b      	mov	r3, r1
    67b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    67bc:	f004 fca8 	bl	b110 <__adddf3>
    67c0:	f005 f86a 	bl	b898 <__aeabi_d2f>

		if (leds.bouncing_heights[i] < 0) {
    67c4:	2100      	movs	r1, #0
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    67c6:	f8c5 0768 	str.w	r0, [r5, #1896]	; 0x768
    67ca:	4607      	mov	r7, r0

		if (leds.bouncing_heights[i] < 0) {
    67cc:	f005 fb60 	bl	be90 <__aeabi_fcmplt>
    67d0:	bb70      	cbnz	r0, 6830 <bouncing_balls(LEDStruct&)+0x174>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    67d2:	4638      	mov	r0, r7
    67d4:	4944      	ldr	r1, [pc, #272]	; (68e8 <bouncing_balls(LEDStruct&)+0x22c>)
    67d6:	f005 f9bd 	bl	bb54 <__aeabi_fmul>
    67da:	2100      	movs	r1, #0
    67dc:	4607      	mov	r7, r0
    67de:	f005 fb6b 	bl	beb8 <__aeabi_fcmpge>
    67e2:	b1e0      	cbz	r0, 681e <bouncing_balls(LEDStruct&)+0x162>
    67e4:	4638      	mov	r0, r7
    67e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    67ea:	f005 f8ab 	bl	b944 <__addsf3>
    67ee:	f005 fb77 	bl	bee0 <__aeabi_f2iz>
    67f2:	4607      	mov	r7, r0
    67f4:	f8c5 77c8 	str.w	r7, [r5, #1992]	; 0x7c8

		if (leds.use_palette) {
    67f8:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    67fc:	2b00      	cmp	r3, #0
    67fe:	f47f af76 	bne.w	66ee <bouncing_balls(LEDStruct&)+0x32>
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
			leds.bouncing_index++;
		}
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
    6802:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6806:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6808:	4421      	add	r1, r4
    680a:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    680c:	f88d 8014 	strb.w	r8, [sp, #20]
    6810:	f88d 3015 	strb.w	r3, [sp, #21]
    6814:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6818:	f002 f940 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    681c:	e78d      	b.n	673a <bouncing_balls(LEDStruct&)+0x7e>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    681e:	4638      	mov	r0, r7
    6820:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    6824:	f005 f88c 	bl	b940 <__aeabi_fsub>
    6828:	f005 fb5a 	bl	bee0 <__aeabi_f2iz>
    682c:	4607      	mov	r7, r0
    682e:	e7e1      	b.n	67f4 <bouncing_balls(LEDStruct&)+0x138>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;

		if (leds.bouncing_heights[i] < 0) {
			leds.bouncing_heights[i] = 0;                            
    6830:	2300      	movs	r3, #0
    6832:	f8c5 3768 	str.w	r3, [r5, #1896]	; 0x768
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
    6836:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
    683a:	4650      	mov	r0, sl
    683c:	f005 f98a 	bl	bb54 <__aeabi_fmul>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6840:	4b2a      	ldr	r3, [pc, #168]	; (68ec <bouncing_balls(LEDStruct&)+0x230>)
    6842:	f8c5 0788 	str.w	r0, [r5, #1928]	; 0x788
    6846:	681b      	ldr	r3, [r3, #0]
    6848:	9307      	str	r3, [sp, #28]
	return ret;
    684a:	9b07      	ldr	r3, [sp, #28]
			leds.bouncing_tLast[i] = millis();
    684c:	f8c5 37e8 	str.w	r3, [r5, #2024]	; 0x7e8

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
    6850:	4927      	ldr	r1, [pc, #156]	; (68f0 <bouncing_balls(LEDStruct&)+0x234>)
    6852:	f005 fb1d 	bl	be90 <__aeabi_fcmplt>
    6856:	b118      	cbz	r0, 6860 <bouncing_balls(LEDStruct&)+0x1a4>
    6858:	4b26      	ldr	r3, [pc, #152]	; (68f4 <bouncing_balls(LEDStruct&)+0x238>)
    685a:	681b      	ldr	r3, [r3, #0]
    685c:	f8c5 3788 	str.w	r3, [r5, #1928]	; 0x788

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    6860:	2700      	movs	r7, #0
    6862:	e7c7      	b.n	67f4 <bouncing_balls(LEDStruct&)+0x138>
		}
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
		}
	}
}
    6864:	b009      	add	sp, #36	; 0x24
    6866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    686a:	4d23      	ldr	r5, [pc, #140]	; (68f8 <bouncing_balls(LEDStruct&)+0x23c>)
    686c:	882b      	ldrh	r3, [r5, #0]
    686e:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    6872:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6876:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    687a:	3119      	adds	r1, #25
    687c:	b289      	uxth	r1, r1
    687e:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    6882:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6886:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    688a:	3319      	adds	r3, #25
    688c:	b29b      	uxth	r3, r3
    688e:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6892:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6896:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    689a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    689e:	b2db      	uxtb	r3, r3
    68a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    68a4:	3619      	adds	r6, #25
    68a6:	b2b6      	uxth	r6, r6
    68a8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    68ac:	1192      	asrs	r2, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    68ae:	eb06 2316 	add.w	r3, r6, r6, lsr #8
    68b2:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    68b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
    68ba:	3264      	adds	r2, #100	; 0x64
    68bc:	3301      	adds	r3, #1
    68be:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    68c2:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    68c4:	802e      	strh	r6, [r5, #0]
    68c6:	f7ff fe7b 	bl	65c0 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>
	if (keyboard_update) { bouncing_balls_update(leds); }
    68ca:	4b04      	ldr	r3, [pc, #16]	; (68dc <bouncing_balls(LEDStruct&)+0x220>)
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	2b00      	cmp	r3, #0
    68d0:	f43f af02 	beq.w	66d8 <bouncing_balls(LEDStruct&)+0x1c>
    68d4:	4620      	mov	r0, r4
    68d6:	f7ff fed7 	bl	6688 <bouncing_balls_update(LEDStruct&)>
    68da:	e6fd      	b.n	66d8 <bouncing_balls(LEDStruct&)+0x1c>
    68dc:	1fff95c1 	.word	0x1fff95c1
    68e0:	447a0000 	.word	0x447a0000
    68e4:	bfe00000 	.word	0xbfe00000
    68e8:	42940000 	.word	0x42940000
    68ec:	1fffa058 	.word	0x1fffa058
    68f0:	3c23d70a 	.word	0x3c23d70a
    68f4:	1fff8740 	.word	0x1fff8740
    68f8:	1fff875a 	.word	0x1fff875a

000068fc <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    68fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    68fe:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    6902:	b085      	sub	sp, #20
    6904:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    6906:	2b19      	cmp	r3, #25
    6908:	f200 845d 	bhi.w	71c6 <switch_mode(LEDStruct&)+0x8ca>
    690c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6910:	01da0258 	.word	0x01da0258
    6914:	006c015b 	.word	0x006c015b
    6918:	03d200e8 	.word	0x03d200e8
    691c:	013200ee 	.word	0x013200ee
    6920:	02ec001a 	.word	0x02ec001a
    6924:	033a0384 	.word	0x033a0384
    6928:	04180066 	.word	0x04180066
    692c:	04560138 	.word	0x04560138
    6930:	044c0451 	.word	0x044c0451
    6934:	04420447 	.word	0x04420447
    6938:	0438043d 	.word	0x0438043d
    693c:	02e202e7 	.word	0x02e202e7
    6940:	02d802dd 	.word	0x02d802dd
			break;

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    6944:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    6948:	2a00      	cmp	r2, #0
    694a:	d147      	bne.n	69dc <switch_mode(LEDStruct&)+0xe0>
    694c:	4ddc      	ldr	r5, [pc, #880]	; (6cc0 <switch_mode(LEDStruct&)+0x3c4>)
    694e:	882b      	ldrh	r3, [r5, #0]
    6950:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    6954:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6958:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    695c:	3019      	adds	r0, #25
    695e:	b280      	uxth	r0, r0
    6960:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    6964:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6968:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    696c:	3119      	adds	r1, #25
    696e:	b289      	uxth	r1, r1
    6970:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    6974:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6978:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    697c:	3319      	adds	r3, #25
    697e:	b29b      	uxth	r3, r3
    6980:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6984:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6988:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    698c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6990:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6994:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    6998:	b2c7      	uxtb	r7, r0
    699a:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    699c:	3619      	adds	r6, #25
    699e:	b2db      	uxtb	r3, r3
    69a0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    69a4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    69a8:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    69ac:	b2b6      	uxth	r6, r6
    69ae:	1188      	asrs	r0, r1, #6
    69b0:	1199      	asrs	r1, r3, #6
    69b2:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    69b6:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    69ba:	3032      	adds	r0, #50	; 0x32
    69bc:	f3c7 1781 	ubfx	r7, r7, #6, #2
    69c0:	313c      	adds	r1, #60	; 0x3c
    69c2:	121b      	asrs	r3, r3, #8
    69c4:	b2c0      	uxtb	r0, r0
    69c6:	3701      	adds	r7, #1
    69c8:	b2c9      	uxtb	r1, r1
    69ca:	3314      	adds	r3, #20
    69cc:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    69d0:	b2db      	uxtb	r3, r3
    69d2:	4611      	mov	r1, r2
    69d4:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    69d6:	802e      	strh	r6, [r5, #0]
    69d8:	f7fc fd10 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    69dc:	4620      	mov	r0, r4
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    69de:	b005      	add	sp, #20
    69e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    69e4:	f7fc bdae 	b.w	3544 <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    69e8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    69ec:	2b00      	cmp	r3, #0
    69ee:	d177      	bne.n	6ae0 <switch_mode(LEDStruct&)+0x1e4>
    69f0:	49b3      	ldr	r1, [pc, #716]	; (6cc0 <switch_mode(LEDStruct&)+0x3c4>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    69f2:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    69f6:	880b      	ldrh	r3, [r1, #0]
    69f8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    69fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6a00:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6a04:	3319      	adds	r3, #25
    6a06:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6a0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6a0e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6a12:	3319      	adds	r3, #25
    6a14:	b29b      	uxth	r3, r3
    6a16:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    6a1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a1e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6a22:	3019      	adds	r0, #25
    6a24:	b280      	uxth	r0, r0
    6a26:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    6a2a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6a2e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6a32:	3219      	adds	r2, #25
    6a34:	b292      	uxth	r2, r2
    6a36:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    6a3a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    6a3e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    6a42:	3719      	adds	r7, #25
    6a44:	b2bf      	uxth	r7, r7
    6a46:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    6a4a:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    6a4e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6a52:	3519      	adds	r5, #25
    6a54:	b2ad      	uxth	r5, r5
    6a56:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6a5a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6a5e:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6a62:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6a64:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    6a68:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    6a6c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6a70:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6a72:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6a76:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    6a78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6a7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6a80:	11f6      	asrs	r6, r6, #7
    6a82:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6a86:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    6a8a:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6a8e:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6a90:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6a94:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    6a96:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    6a98:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    6a9a:	f3c7 1742 	ubfx	r7, r7, #5, #3
    6a9e:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6aa2:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    6aa6:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6aaa:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    6aac:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    6aae:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6ab2:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6ab6:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6aba:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6abc:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    6ac0:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6ac4:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6ac8:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    6acc:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6ad0:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    6ad4:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    6ad8:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    6adc:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    6ae0:	4620      	mov	r0, r4
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6ae2:	b005      	add	sp, #20
    6ae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    6ae8:	f7fb be48 	b.w	277c <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    6aec:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    6af0:	2b00      	cmp	r3, #0
    6af2:	d13f      	bne.n	6b74 <switch_mode(LEDStruct&)+0x278>
    6af4:	4972      	ldr	r1, [pc, #456]	; (6cc0 <switch_mode(LEDStruct&)+0x3c4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    6af6:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    6afa:	880b      	ldrh	r3, [r1, #0]
    6afc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6b00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6b04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6b08:	3319      	adds	r3, #25
    6b0a:	b29b      	uxth	r3, r3
    6b0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6b10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6b14:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6b18:	3219      	adds	r2, #25
    6b1a:	b292      	uxth	r2, r2
    6b1c:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    6b20:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b24:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6b28:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b2c:	eb02 2212 	add.w	r2, r2, r2, lsr #8

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    6b30:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6b32:	3519      	adds	r5, #25
    leds.rainbow_rot    = rr;
    6b34:	b2d2      	uxtb	r2, r2
    6b36:	b2ad      	uxth	r5, r5
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    6b38:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    6b3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    6b40:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b42:	eb05 2015 	add.w	r0, r5, r5, lsr #8
    leds.rainbow_rot    = rr;
    6b46:	1212      	asrs	r2, r2, #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    6b48:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    6b4c:	2601      	movs	r6, #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    6b4e:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    6b50:	3201      	adds	r2, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    6b52:	2705      	movs	r7, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    6b54:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    6b58:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    leds.rainbow_rot    = rr;
    6b5c:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    6b60:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    6b64:	f884 627a 	strb.w	r6, [r4, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    6b68:	f884 722c 	strb.w	r7, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    6b6c:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6b6e:	800d      	strh	r5, [r1, #0]
    6b70:	f7fb f958 	bl	1e24 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    6b74:	4620      	mov	r0, r4
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6b76:	b005      	add	sp, #20
    6b78:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    6b7c:	f7fc bb7e 	b.w	327c <rainbow_march(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0, 20, 100, 90); }		// sync on  | mirror must be off
    6b80:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    6b84:	b9ca      	cbnz	r2, 6bba <switch_mode(LEDStruct&)+0x2be>
    6b86:	4e4e      	ldr	r6, [pc, #312]	; (6cc0 <switch_mode(LEDStruct&)+0x3c4>)
    6b88:	8833      	ldrh	r3, [r6, #0]
    6b8a:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    6b8e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6b92:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6b96:	3519      	adds	r5, #25
    6b98:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6b9a:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    6b9e:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6ba2:	3301      	adds	r3, #1
    6ba4:	205a      	movs	r0, #90	; 0x5a
    6ba6:	2164      	movs	r1, #100	; 0x64
    6ba8:	9302      	str	r3, [sp, #8]
    6baa:	9001      	str	r0, [sp, #4]
    6bac:	9100      	str	r1, [sp, #0]
    6bae:	2314      	movs	r3, #20
    6bb0:	2101      	movs	r1, #1
    6bb2:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6bb4:	8035      	strh	r5, [r6, #0]
    6bb6:	f7fc fc21 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    6bba:	4620      	mov	r0, r4
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6bbc:	b005      	add	sp, #20
    6bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    6bc2:	f7fc bfb3 	b.w	3b2c <torch(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    6bc6:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    6bca:	2a00      	cmp	r2, #0
    6bcc:	d188      	bne.n	6ae0 <switch_mode(LEDStruct&)+0x1e4>
    6bce:	493c      	ldr	r1, [pc, #240]	; (6cc0 <switch_mode(LEDStruct&)+0x3c4>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    6bd0:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    6bd4:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    6bd6:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    6bda:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6bde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6be2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6be6:	3319      	adds	r3, #25
    6be8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6bec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6bf0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6bf4:	3319      	adds	r3, #25
    6bf6:	b29b      	uxth	r3, r3
    6bf8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    6bfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6c00:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6c04:	3019      	adds	r0, #25
    6c06:	b280      	uxth	r0, r0
    6c08:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    6c0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6c10:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6c14:	3219      	adds	r2, #25
    6c16:	b292      	uxth	r2, r2
    6c18:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    6c1c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    6c20:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    6c24:	3719      	adds	r7, #25
    6c26:	b2bf      	uxth	r7, r7
    6c28:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    6c2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    6c30:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6c34:	3519      	adds	r5, #25
    6c36:	b2ad      	uxth	r5, r5
    6c38:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6c3c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6c40:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6c44:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6c46:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    6c4a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    6c4e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6c52:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6c54:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6c58:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    6c5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6c5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6c62:	11f6      	asrs	r6, r6, #7
    6c64:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6c68:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    6c6c:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6c70:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6c72:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6c76:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    6c78:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    6c7a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    6c7c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    6c80:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6c84:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    6c88:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6c8c:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    6c8e:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    6c90:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6c94:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6c98:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6c9c:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6c9e:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    6ca2:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6ca6:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6caa:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    6cae:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6cb2:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    6cb6:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    6cba:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    6cbe:	e70f      	b.n	6ae0 <switch_mode(LEDStruct&)+0x1e4>
    6cc0:	1fff875a 	.word	0x1fff875a
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    6cc4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    6cc8:	2a00      	cmp	r2, #0
    6cca:	f47f af09 	bne.w	6ae0 <switch_mode(LEDStruct&)+0x1e4>
    6cce:	49d1      	ldr	r1, [pc, #836]	; (7014 <switch_mode(LEDStruct&)+0x718>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    6cd0:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    6cd4:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    6cd6:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    6cda:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6cde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6ce2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6ce6:	3319      	adds	r3, #25
    6ce8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6cec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6cf0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6cf4:	3319      	adds	r3, #25
    6cf6:	b29b      	uxth	r3, r3
    6cf8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    6cfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6d00:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6d04:	3019      	adds	r0, #25
    6d06:	b280      	uxth	r0, r0
    6d08:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    6d0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    6d10:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6d14:	3219      	adds	r2, #25
    6d16:	b292      	uxth	r2, r2
    6d18:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    6d1c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    6d20:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    6d24:	3719      	adds	r7, #25
    6d26:	b2bf      	uxth	r7, r7
    6d28:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    6d2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    6d30:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6d34:	3519      	adds	r5, #25
    6d36:	b2ad      	uxth	r5, r5
    6d38:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6d3c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6d40:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_numdots 	 = jn;
    6d44:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6d46:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    6d4a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    6d4e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6d52:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6d54:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6d58:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    6d5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6d5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6d62:	11f6      	asrs	r6, r6, #7
    6d64:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6d68:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    6d6c:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6d70:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6d72:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6d76:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    6d78:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    6d7a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    6d7c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    6d80:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6d84:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    6d88:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6d8c:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    6d8e:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    6d90:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6d94:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6d98:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6d9c:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6d9e:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    6da2:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6da6:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6daa:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    6dae:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6db2:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    6db6:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    6dba:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    6dbe:	e68f      	b.n	6ae0 <switch_mode(LEDStruct&)+0x1e4>
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions -----------------------------------------------------------------------
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    6dc0:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    6dc4:	2900      	cmp	r1, #0
    6dc6:	f47f ae8b 	bne.w	6ae0 <switch_mode(LEDStruct&)+0x1e4>
    6dca:	4892      	ldr	r0, [pc, #584]	; (7014 <switch_mode(LEDStruct&)+0x718>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    6dcc:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    6dd0:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    6dd2:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    6dd6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6dda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6dde:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6de2:	3319      	adds	r3, #25
    6de4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6de8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6dec:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6df0:	3319      	adds	r3, #25
    6df2:	b29b      	uxth	r3, r3
    6df4:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    6df8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    6dfc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    6e00:	3519      	adds	r5, #25
    6e02:	b2ad      	uxth	r5, r5
    6e04:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    6e08:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    6e0c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6e10:	3219      	adds	r2, #25
    6e12:	b292      	uxth	r2, r2
    6e14:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    6e18:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    6e1c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    6e20:	3719      	adds	r7, #25
    6e22:	b2bf      	uxth	r7, r7
    6e24:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    6e28:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    6e2c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    6e30:	3619      	adds	r6, #25
    6e32:	b2b6      	uxth	r6, r6
    6e34:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    6e38:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6e3c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    6e40:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    6e44:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6e48:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6e4a:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6e4e:	b2ed      	uxtb	r5, r5
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6e50:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6e52:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6e5a:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6e5e:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    6e62:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6e66:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6e6a:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6e6e:	11aa      	asrs	r2, r5, #6
    6e70:	3208      	adds	r2, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6e72:	ea4f 1eee 	mov.w	lr, lr, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6e76:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    6e78:	f3c7 1742 	ubfx	r7, r7, #5, #3
    6e7c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    6e80:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    6e84:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    6e88:	f10e 0501 	add.w	r5, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6e8c:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    6e8e:	3701      	adds	r7, #1
	leds.juggle_index_reset  = jir;
    6e90:	f3c6 16c0 	ubfx	r6, r6, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6e94:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    6e98:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6e9c:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    6e9e:	f884 522f 	strb.w	r5, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    6ea2:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    6ea6:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6eaa:	f8a0 c000 	strh.w	ip, [r0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    6eae:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    6eb2:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6eb6:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    6eba:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    6ebe:	e60f      	b.n	6ae0 <switch_mode(LEDStruct&)+0x1e4>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6ec0:	b005      	add	sp, #20
    6ec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Bouncing Functions -----------------------------------------------------------------------
		case BOUNCING_BALLS:
			bouncing_balls(leds);
    6ec6:	f7ff bbf9 	b.w	66bc <bouncing_balls(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6eca:	b005      	add	sp, #20
    6ecc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case BOUNCING_BALLS:
			bouncing_balls(leds);
			break;

		case BOUNCE:
			bounce(leds);
    6ed0:	f7ff b986 	b.w	61e0 <bounce(LEDStruct&)>
			break;

	}
}
    6ed4:	b005      	add	sp, #20
    6ed6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Noise Functions -----------------------------------------------------------------------
		case NOISE:
			noise(leds);
    6eda:	f7fe b947 	b.w	516c <noise(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    6ede:	b005      	add	sp, #20
    6ee0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Shooting Pole -----------------------------------------------------------------------
		case SHOOTING_POLE:
			shooting_pole(leds);
    6ee4:	f7fd bd54 	b.w	4990 <shooting_pole(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    6ee8:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    6eec:	2a00      	cmp	r2, #0
    6eee:	f47f ad75 	bne.w	69dc <switch_mode(LEDStruct&)+0xe0>
    6ef2:	4d48      	ldr	r5, [pc, #288]	; (7014 <switch_mode(LEDStruct&)+0x718>)
    6ef4:	882b      	ldrh	r3, [r5, #0]
    6ef6:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    6efa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6efe:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6f02:	3019      	adds	r0, #25
    6f04:	b280      	uxth	r0, r0
    6f06:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    6f0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6f0e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    6f12:	3119      	adds	r1, #25
    6f14:	b289      	uxth	r1, r1
    6f16:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    6f1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    6f1e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6f22:	3319      	adds	r3, #25
    6f24:	b29b      	uxth	r3, r3
    6f26:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    6f2a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6f2e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    6f32:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6f36:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6f3a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    6f3e:	b2c7      	uxtb	r7, r0
    6f40:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6f42:	3619      	adds	r6, #25
    6f44:	b2db      	uxtb	r3, r3
    6f46:	b2b6      	uxth	r6, r6
    6f48:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    6f4c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    6f50:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    6f54:	1188      	asrs	r0, r1, #6
    6f56:	1199      	asrs	r1, r3, #6
    6f58:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6f5c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    6f60:	3032      	adds	r0, #50	; 0x32
    6f62:	f3c7 1781 	ubfx	r7, r7, #6, #2
    6f66:	313c      	adds	r1, #60	; 0x3c
    6f68:	121b      	asrs	r3, r3, #8
    6f6a:	b2c0      	uxtb	r0, r0
    6f6c:	3701      	adds	r7, #1
    6f6e:	b2c9      	uxtb	r1, r1
    6f70:	3314      	adds	r3, #20
    6f72:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    6f76:	b2db      	uxtb	r3, r3
    6f78:	2101      	movs	r1, #1
    6f7a:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6f7c:	802e      	strh	r6, [r5, #0]
    6f7e:	f7fc fa3d 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    6f82:	e52b      	b.n	69dc <switch_mode(LEDStruct&)+0xe0>
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    6f84:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    6f88:	2b00      	cmp	r3, #0
    6f8a:	f47f ad27 	bne.w	69dc <switch_mode(LEDStruct&)+0xe0>
    6f8e:	4d21      	ldr	r5, [pc, #132]	; (7014 <switch_mode(LEDStruct&)+0x718>)
    6f90:	882b      	ldrh	r3, [r5, #0]
    6f92:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6f96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6f9a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6f9e:	3319      	adds	r3, #25
    6fa0:	b29b      	uxth	r3, r3
    6fa2:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    6fa6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6faa:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    6fae:	3119      	adds	r1, #25
    6fb0:	b289      	uxth	r1, r1
    6fb2:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    6fb6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6fba:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6fbe:	3219      	adds	r2, #25
    6fc0:	b292      	uxth	r2, r2
    6fc2:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    6fc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6fca:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    6fce:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6fd2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6fd6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    6fda:	b2db      	uxtb	r3, r3
    6fdc:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6fde:	3619      	adds	r6, #25
    6fe0:	b2d2      	uxtb	r2, r2
    6fe2:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    6fe6:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    6fea:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    6fee:	b2b6      	uxth	r6, r6
    6ff0:	1188      	asrs	r0, r1, #6
    6ff2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    6ff6:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6ff8:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    6ffc:	3032      	adds	r0, #50	; 0x32
    6ffe:	f3c7 1781 	ubfx	r7, r7, #6, #2
    7002:	313c      	adds	r1, #60	; 0x3c
    7004:	121b      	asrs	r3, r3, #8
    7006:	b2c0      	uxtb	r0, r0
    7008:	3701      	adds	r7, #1
    700a:	b2c9      	uxtb	r1, r1
    700c:	3314      	adds	r3, #20
    700e:	2201      	movs	r2, #1
    7010:	e4dc      	b.n	69cc <switch_mode(LEDStruct&)+0xd0>
    7012:	bf00      	nop
    7014:	1fff875a 	.word	0x1fff875a
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    7018:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    701c:	2900      	cmp	r1, #0
    701e:	f47f acdd 	bne.w	69dc <switch_mode(LEDStruct&)+0xe0>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7022:	4d6a      	ldr	r5, [pc, #424]	; (71cc <switch_mode(LEDStruct&)+0x8d0>)
    7024:	882b      	ldrh	r3, [r5, #0]
    7026:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    702a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    702e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    7032:	3019      	adds	r0, #25
    7034:	b280      	uxth	r0, r0
    7036:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    703a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    703e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    7042:	3219      	adds	r2, #25
    7044:	b292      	uxth	r2, r2
    7046:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    704a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    704e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7052:	3319      	adds	r3, #25
    7054:	b29b      	uxth	r3, r3
    7056:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    705a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    705e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    7062:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7066:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    706a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    706e:	b2c7      	uxtb	r7, r0
    7070:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7072:	3619      	adds	r6, #25
    7074:	b2db      	uxtb	r3, r3
    7076:	b2b6      	uxth	r6, r6
    7078:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    707c:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    7080:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    7084:	1190      	asrs	r0, r2, #6
    7086:	119a      	asrs	r2, r3, #6
    7088:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    708c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    7090:	3032      	adds	r0, #50	; 0x32
    7092:	f3c7 1781 	ubfx	r7, r7, #6, #2
    7096:	323c      	adds	r2, #60	; 0x3c
    7098:	121b      	asrs	r3, r3, #8
    709a:	b2c0      	uxtb	r0, r0
    709c:	3701      	adds	r7, #1
    709e:	b2d2      	uxtb	r2, r2
    70a0:	3314      	adds	r3, #20
    70a2:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    70a6:	b2db      	uxtb	r3, r3
    70a8:	2201      	movs	r2, #1
    70aa:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    70ac:	802e      	strh	r6, [r5, #0]
    70ae:	f7fc f9a5 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    70b2:	e493      	b.n	69dc <switch_mode(LEDStruct&)+0xe0>
			break;


		// Rainbow March Functions -----------------------------------------------------------------------
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    70b4:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    70b8:	2a00      	cmp	r2, #0
    70ba:	f47f ad5b 	bne.w	6b74 <switch_mode(LEDStruct&)+0x278>
    70be:	4943      	ldr	r1, [pc, #268]	; (71cc <switch_mode(LEDStruct&)+0x8d0>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    70c0:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    70c4:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    70c6:	f880 227a 	strb.w	r2, [r0, #634]	; 0x27a
    70ca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    70ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    70d2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    70d6:	3319      	adds	r3, #25
    70d8:	b29b      	uxth	r3, r3
    70da:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    70de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    70e2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    70e6:	3219      	adds	r2, #25
    70e8:	b292      	uxth	r2, r2
    70ea:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    70ee:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    70f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    70f6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    70fa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    leds.rainbow_diff   = rd;
    70fe:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7100:	3519      	adds	r5, #25
    leds.rainbow_rot    = rr;
    7102:	b2d2      	uxtb	r2, r2
    7104:	b2ad      	uxth	r5, r5
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    7106:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    710a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    710e:	eb05 2015 	add.w	r0, r5, r5, lsr #8
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    7112:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    7114:	1212      	asrs	r2, r2, #8
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    7116:	3301      	adds	r3, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    7118:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    711c:	3201      	adds	r2, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    711e:	2701      	movs	r7, #1
	leds.mode_type = RAINBOW_MARCH;
    7120:	2605      	movs	r6, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    7122:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    7126:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    leds.rainbow_rot    = rr;
    712a:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    712e:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    7132:	f884 622c 	strb.w	r6, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    7136:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7138:	800d      	strh	r5, [r1, #0]
    713a:	f7fa fe73 	bl	1e24 <LEDDebug(LEDStruct&)>
    713e:	e519      	b.n	6b74 <switch_mode(LEDStruct&)+0x278>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    7140:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    7144:	2a00      	cmp	r2, #0
    7146:	f47f ad38 	bne.w	6bba <switch_mode(LEDStruct&)+0x2be>
    714a:	4e20      	ldr	r6, [pc, #128]	; (71cc <switch_mode(LEDStruct&)+0x8d0>)
    714c:	8833      	ldrh	r3, [r6, #0]
    714e:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    7152:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7156:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    715a:	3519      	adds	r5, #25
    715c:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    715e:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    7162:	f3c3 1381 	ubfx	r3, r3, #6, #2
    7166:	3301      	adds	r3, #1
    7168:	205a      	movs	r0, #90	; 0x5a
    716a:	2146      	movs	r1, #70	; 0x46
    716c:	9302      	str	r3, [sp, #8]
    716e:	9001      	str	r0, [sp, #4]
    7170:	9100      	str	r1, [sp, #0]
    7172:	2314      	movs	r3, #20
    7174:	4611      	mov	r1, r2
    7176:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7178:	8035      	strh	r5, [r6, #0]
    717a:	f7fc f93f 	bl	33fc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    717e:	e51c      	b.n	6bba <switch_mode(LEDStruct&)+0x2be>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    7180:	b005      	add	sp, #20
    7182:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Fireworks Functions -----------------------------------------------------------------------
		case FIREWORKS:
			fireworks(leds);
    7186:	f7fd bb8d 	b.w	48a4 <fireworks(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    718a:	b005      	add	sp, #20
    718c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case ONE_SIN:
			one_sin(leds);
			break;

		case TWO_SIN:
			two_sin(leds);
    7190:	f7fd bde8 	b.w	4d64 <two_sin(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    7194:	b005      	add	sp, #20
    7196:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Sin Functions -----------------------------------------------------------------------
		case ONE_SIN:
			one_sin(leds);
    719a:	f7fd b83d 	b.w	4218 <one_sin(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    719e:	b005      	add	sp, #20
    71a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Confetti Functions -----------------------------------------------------------------------
		case CONFETTI:
			confetti(leds);
    71a4:	f7fc bf4c 	b.w	4040 <confetti(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    71a8:	b005      	add	sp, #20
    71aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case PRIDE:
			pride(leds);
			break;

		case PACIFICA:
			pacifica(leds);
    71ae:	f7fe bd37 	b.w	5c20 <pacifica(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    71b2:	b005      	add	sp, #20
    71b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    71b8:	f7fe ba2a 	b.w	5610 <pride(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    71bc:	b005      	add	sp, #20
    71be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			break;


		// Colorwave, Pride, Pacifica Functions -----------------------------------------------------------------------
		case COLORWAVE:
			colorwave(leds);
    71c2:	f7fe bc07 	b.w	59d4 <colorwave(LEDStruct&)>
		case BOUNCE:
			bounce(leds);
			break;

	}
}
    71c6:	b005      	add	sp, #20
    71c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71ca:	bf00      	nop
    71cc:	1fff875a 	.word	0x1fff875a

000071d0 <change_pattern(unsigned char)>:
}



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern(uint8_t mn = 255) {
    71d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71d2:	2120      	movs	r1, #32
    71d4:	4604      	mov	r4, r0
    71d6:	4d52      	ldr	r5, [pc, #328]	; (7320 <change_pattern(unsigned char)+0x150>)
    71d8:	4852      	ldr	r0, [pc, #328]	; (7324 <change_pattern(unsigned char)+0x154>)
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    71da:	4f53      	ldr	r7, [pc, #332]	; (7328 <change_pattern(unsigned char)+0x158>)
    71dc:	4e53      	ldr	r6, [pc, #332]	; (732c <change_pattern(unsigned char)+0x15c>)
    71de:	f003 fa11 	bl	a604 <usb_serial_write>
    71e2:	4853      	ldr	r0, [pc, #332]	; (7330 <change_pattern(unsigned char)+0x160>)
    71e4:	f003 fc12 	bl	aa0c <Print::println()>
    71e8:	882b      	ldrh	r3, [r5, #0]
	transition_speed = random8(3,7);
    71ea:	4852      	ldr	r0, [pc, #328]	; (7334 <change_pattern(unsigned char)+0x164>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern(uint8_t mn = 255) {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    71ec:	4952      	ldr	r1, [pc, #328]	; (7338 <change_pattern(unsigned char)+0x168>)
    71ee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    71f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    71f6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    71fa:	3219      	adds	r2, #25
    71fc:	b292      	uxth	r2, r2
    71fe:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    7202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7206:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    720a:	3319      	adds	r3, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    720c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
    7210:	f3c2 1281 	ubfx	r2, r2, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7214:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7216:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    721a:	5cbf      	ldrb	r7, [r7, r2]
    721c:	7037      	strb	r7, [r6, #0]
	transition_speed = random8(3,7);
    721e:	f3ce 1281 	ubfx	r2, lr, #6, #2
    7222:	3203      	adds	r2, #3

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern(uint8_t mn = 255) {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    7224:	2601      	movs	r6, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3,7);
    7226:	7002      	strb	r2, [r0, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern(uint8_t mn = 255) {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    7228:	700e      	strb	r6, [r1, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3,7);
	switch (transition_type) {
    722a:	2f03      	cmp	r7, #3
    722c:	d81f      	bhi.n	726e <change_pattern(unsigned char)+0x9e>
    722e:	e8df f007 	tbb	[pc, r7]
    7232:	484c      	.short	0x484c
    7234:	0244      	.short	0x0244
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7236:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    723a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    723e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7242:	3319      	adds	r3, #25
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    7244:	4a3d      	ldr	r2, [pc, #244]	; (733c <change_pattern(unsigned char)+0x16c>)
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
    7246:	4f3e      	ldr	r7, [pc, #248]	; (7340 <change_pattern(unsigned char)+0x170>)
    7248:	4e3e      	ldr	r6, [pc, #248]	; (7344 <change_pattern(unsigned char)+0x174>)
    724a:	493f      	ldr	r1, [pc, #252]	; (7348 <change_pattern(unsigned char)+0x178>)
    724c:	b29b      	uxth	r3, r3
    724e:	eb03 2e13 	add.w	lr, r3, r3, lsr #8
    7252:	802b      	strh	r3, [r5, #0]
        s = rhs.s;
    7254:	23ff      	movs	r3, #255	; 0xff
    7256:	7053      	strb	r3, [r2, #1]
        v = rhs.v;
    7258:	7093      	strb	r3, [r2, #2]
    725a:	4610      	mov	r0, r2
    725c:	2300      	movs	r3, #0
        v = rhs.v;
    }

    inline CHSV& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        h = rhs.h;
    725e:	f882 e000 	strb.w	lr, [r2]
    7262:	2201      	movs	r2, #1
    7264:	7033      	strb	r3, [r6, #0]
    7266:	703a      	strb	r2, [r7, #0]
    7268:	f001 fc18 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    726c:	882b      	ldrh	r3, [r5, #0]
	}
	number_of_mode_changes++;
    726e:	4f37      	ldr	r7, [pc, #220]	; (734c <change_pattern(unsigned char)+0x17c>)

	// Next LED Variables
	next_leds.mode_initialized = 0;
    7270:	4937      	ldr	r1, [pc, #220]	; (7350 <change_pattern(unsigned char)+0x180>)
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
	number_of_mode_changes++;
    7272:	883a      	ldrh	r2, [r7, #0]
    7274:	482a      	ldr	r0, [pc, #168]	; (7320 <change_pattern(unsigned char)+0x150>)
    7276:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    727a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    727e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7282:	3319      	adds	r3, #25
    7284:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7286:	eb03 2613 	add.w	r6, r3, r3, lsr #8

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    728a:	f3c6 16c0 	ubfx	r6, r6, #7, #1
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
	number_of_mode_changes++;
    728e:	3201      	adds	r2, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7290:	802b      	strh	r3, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    7292:	2cff      	cmp	r4, #255	; 0xff
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    7294:	f04f 0500 	mov.w	r5, #0
	next_leds.this_dir = random8(2);
    7298:	f881 61c5 	strb.w	r6, [r1, #453]	; 0x1c5
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    729c:	f881 522d 	strb.w	r5, [r1, #557]	; 0x22d
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(),255,255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
	number_of_mode_changes++;
    72a0:	803a      	strh	r2, [r7, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    72a2:	d016      	beq.n	72d2 <change_pattern(unsigned char)+0x102>
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
    72a4:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    72a8:	4b2a      	ldr	r3, [pc, #168]	; (7354 <change_pattern(unsigned char)+0x184>)
	switch_mode(next_leds);
    72aa:	4829      	ldr	r0, [pc, #164]	; (7350 <change_pattern(unsigned char)+0x180>)
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
    72ac:	5d1b      	ldrb	r3, [r3, r4]
    72ae:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
	switch_mode(next_leds);
}
    72b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    72b6:	f7ff bb21 	b.w	68fc <switch_mode(LEDStruct&)>
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3,7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
    72ba:	4a27      	ldr	r2, [pc, #156]	; (7358 <change_pattern(unsigned char)+0x188>)
    72bc:	2100      	movs	r1, #0
    72be:	7011      	strb	r1, [r2, #0]
    72c0:	e7d5      	b.n	726e <change_pattern(unsigned char)+0x9e>
	in_transition    = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3,7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
    72c2:	4a25      	ldr	r2, [pc, #148]	; (7358 <change_pattern(unsigned char)+0x188>)
    72c4:	214a      	movs	r1, #74	; 0x4a
    72c6:	7011      	strb	r1, [r2, #0]
    72c8:	e7d1      	b.n	726e <change_pattern(unsigned char)+0x9e>
	// Transition variables
	in_transition    = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3,7);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
    72ca:	4a1e      	ldr	r2, [pc, #120]	; (7344 <change_pattern(unsigned char)+0x174>)
    72cc:	2100      	movs	r1, #0
    72ce:	7011      	strb	r1, [r2, #0]
    72d0:	e7cd      	b.n	726e <change_pattern(unsigned char)+0x9e>

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    72d2:	4a22      	ldr	r2, [pc, #136]	; (735c <change_pattern(unsigned char)+0x18c>)
    72d4:	7812      	ldrb	r2, [r2, #0]
    72d6:	b1a2      	cbz	r2, 7302 <change_pattern(unsigned char)+0x132>
    72d8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    72dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    72e0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    72e4:	3319      	adds	r3, #25
    72e6:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    72e8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    72ec:	b2d2      	uxtb	r2, r2
    72ee:	eb02 0442 	add.w	r4, r2, r2, lsl #1
    72f2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    72f6:	f3c4 14c7 	ubfx	r4, r4, #7, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    72fa:	8003      	strh	r3, [r0, #0]
    72fc:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    7300:	e7d2      	b.n	72a8 <change_pattern(unsigned char)+0xd8>
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
    7302:	f891 422a 	ldrb.w	r4, [r1, #554]	; 0x22a
    7306:	4b16      	ldr	r3, [pc, #88]	; (7360 <change_pattern(unsigned char)+0x190>)
    7308:	1c62      	adds	r2, r4, #1
    730a:	fba3 0302 	umull	r0, r3, r3, r2
    730e:	08db      	lsrs	r3, r3, #3
    7310:	241a      	movs	r4, #26
    7312:	fb04 2413 	mls	r4, r4, r3, r2
    7316:	b2e4      	uxtb	r4, r4
    7318:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    731c:	e7c4      	b.n	72a8 <change_pattern(unsigned char)+0xd8>
    731e:	bf00      	nop
    7320:	1fff875a 	.word	0x1fff875a
    7324:	0000cebc 	.word	0x0000cebc
    7328:	1fff8750 	.word	0x1fff8750
    732c:	1fff94d5 	.word	0x1fff94d5
    7330:	1fff8764 	.word	0x1fff8764
    7334:	1fff95d1 	.word	0x1fff95d1
    7338:	1fff94c0 	.word	0x1fff94c0
    733c:	1fff95dc 	.word	0x1fff95dc
    7340:	1fff94d4 	.word	0x1fff94d4
    7344:	1fff8c86 	.word	0x1fff8c86
    7348:	1fff9fd8 	.word	0x1fff9fd8
    734c:	1fff8c84 	.word	0x1fff8c84
    7350:	1fff8c88 	.word	0x1fff8c88
    7354:	1fff8724 	.word	0x1fff8724
    7358:	1fff94fc 	.word	0x1fff94fc
    735c:	1fff8748 	.word	0x1fff8748
    7360:	4ec4ec4f 	.word	0x4ec4ec4f

00007364 <read_keyboard()>:
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    7364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    7366:	4d7e      	ldr	r5, [pc, #504]	; (7560 <read_keyboard()+0x1fc>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    7368:	4f7e      	ldr	r7, [pc, #504]	; (7564 <read_keyboard()+0x200>)
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    736a:	462e      	mov	r6, r5
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    736c:	f003 f920 	bl	a5b0 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    7370:	2800      	cmp	r0, #0
    7372:	f340 8085 	ble.w	7480 <read_keyboard()+0x11c>
        virtual int read() { return usb_serial_getchar(); }
    7376:	f003 f8df 	bl	a538 <usb_serial_getchar>
		in_byte = Serial.read();
    737a:	b2c0      	uxtb	r0, r0

		if (in_byte != 10) {
    737c:	280a      	cmp	r0, #10
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    737e:	7028      	strb	r0, [r5, #0]

		if (in_byte != 10) {
    7380:	d00d      	beq.n	739e <read_keyboard()+0x3a>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7382:	2102      	movs	r1, #2
    7384:	4878      	ldr	r0, [pc, #480]	; (7568 <read_keyboard()+0x204>)
    7386:	f003 f93d 	bl	a604 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    738a:	7830      	ldrb	r0, [r6, #0]
    738c:	f003 f9be 	bl	a70c <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7390:	2101      	movs	r1, #1
    7392:	4876      	ldr	r0, [pc, #472]	; (756c <read_keyboard()+0x208>)
    7394:	f003 f936 	bl	a604 <usb_serial_write>
    7398:	4875      	ldr	r0, [pc, #468]	; (7570 <read_keyboard()+0x20c>)
    739a:	f003 fb37 	bl	aa0c <Print::println()>
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    739e:	4874      	ldr	r0, [pc, #464]	; (7570 <read_keyboard()+0x20c>)
		keyboard_update = 1;
    73a0:	4c74      	ldr	r4, [pc, #464]	; (7574 <read_keyboard()+0x210>)
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    73a2:	f003 fbef 	bl	ab84 <Stream::parseInt()>
		keyboard_update = 1;
		switch (in_byte) {
    73a6:	782b      	ldrb	r3, [r5, #0]
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    73a8:	4686      	mov	lr, r0
    73aa:	4873      	ldr	r0, [pc, #460]	; (7578 <read_keyboard()+0x214>)
    73ac:	fa1f f28e 	uxth.w	r2, lr
		keyboard_update = 1;
    73b0:	2101      	movs	r1, #1
		switch (in_byte) {
    73b2:	3b42      	subs	r3, #66	; 0x42
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    73b4:	8002      	strh	r2, [r0, #0]
		keyboard_update = 1;
    73b6:	7021      	strb	r1, [r4, #0]
		switch (in_byte) {
    73b8:	2b2a      	cmp	r3, #42	; 0x2a
    73ba:	d8d7      	bhi.n	736c <read_keyboard()+0x8>
    73bc:	a101      	add	r1, pc, #4	; (adr r1, 73c4 <read_keyboard()+0x60>)
    73be:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    73c2:	bf00      	nop
    73c4:	0000754b 	.word	0x0000754b
    73c8:	0000736d 	.word	0x0000736d
    73cc:	00007541 	.word	0x00007541
    73d0:	00007535 	.word	0x00007535
    73d4:	0000736d 	.word	0x0000736d
    73d8:	0000736d 	.word	0x0000736d
    73dc:	0000736d 	.word	0x0000736d
    73e0:	0000736d 	.word	0x0000736d
    73e4:	0000736d 	.word	0x0000736d
    73e8:	0000736d 	.word	0x0000736d
    73ec:	0000736d 	.word	0x0000736d
    73f0:	00007527 	.word	0x00007527
    73f4:	00007517 	.word	0x00007517
    73f8:	0000736d 	.word	0x0000736d
    73fc:	000074fd 	.word	0x000074fd
    7400:	000074f9 	.word	0x000074f9
    7404:	000074f5 	.word	0x000074f5
    7408:	000074e5 	.word	0x000074e5
    740c:	000074db 	.word	0x000074db
    7410:	0000736d 	.word	0x0000736d
    7414:	0000736d 	.word	0x0000736d
    7418:	0000736d 	.word	0x0000736d
    741c:	0000736d 	.word	0x0000736d
    7420:	0000736d 	.word	0x0000736d
    7424:	0000736d 	.word	0x0000736d
    7428:	0000736d 	.word	0x0000736d
    742c:	0000736d 	.word	0x0000736d
    7430:	0000736d 	.word	0x0000736d
    7434:	0000736d 	.word	0x0000736d
    7438:	0000736d 	.word	0x0000736d
    743c:	0000736d 	.word	0x0000736d
    7440:	000074d3 	.word	0x000074d3
    7444:	000074cb 	.word	0x000074cb
    7448:	000074c3 	.word	0x000074c3
    744c:	000074bb 	.word	0x000074bb
    7450:	000074b3 	.word	0x000074b3
    7454:	000074ab 	.word	0x000074ab
    7458:	000074a3 	.word	0x000074a3
    745c:	0000749b 	.word	0x0000749b
    7460:	00007493 	.word	0x00007493
    7464:	0000748b 	.word	0x0000748b
    7468:	00007483 	.word	0x00007483
    746c:	00007471 	.word	0x00007471

			// k
			case 107: update_var = 10;	break;

			// l
			case 108: update_var = 11;	break;
    7470:	4b42      	ldr	r3, [pc, #264]	; (757c <read_keyboard()+0x218>)
    7472:	220b      	movs	r2, #11
    7474:	701a      	strb	r2, [r3, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    7476:	f003 f89b 	bl	a5b0 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    747a:	2800      	cmp	r0, #0
    747c:	f73f af7b 	bgt.w	7376 <read_keyboard()+0x12>
    7480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

			// j
			case 106: update_var = 9;	break;

			// k
			case 107: update_var = 10;	break;
    7482:	4b3e      	ldr	r3, [pc, #248]	; (757c <read_keyboard()+0x218>)
    7484:	220a      	movs	r2, #10
    7486:	701a      	strb	r2, [r3, #0]
    7488:	e770      	b.n	736c <read_keyboard()+0x8>

			// i
			case 105: update_var = 8;	break;

			// j
			case 106: update_var = 9;	break;
    748a:	4b3c      	ldr	r3, [pc, #240]	; (757c <read_keyboard()+0x218>)
    748c:	2209      	movs	r2, #9
    748e:	701a      	strb	r2, [r3, #0]
    7490:	e76c      	b.n	736c <read_keyboard()+0x8>

			// h
			case 104: update_var = 7;	break;

			// i
			case 105: update_var = 8;	break;
    7492:	4b3a      	ldr	r3, [pc, #232]	; (757c <read_keyboard()+0x218>)
    7494:	2208      	movs	r2, #8
    7496:	701a      	strb	r2, [r3, #0]
    7498:	e768      	b.n	736c <read_keyboard()+0x8>

			// g
			case 103: update_var = 6;	break;

			// h
			case 104: update_var = 7;	break;
    749a:	4b38      	ldr	r3, [pc, #224]	; (757c <read_keyboard()+0x218>)
    749c:	2207      	movs	r2, #7
    749e:	701a      	strb	r2, [r3, #0]
    74a0:	e764      	b.n	736c <read_keyboard()+0x8>

			// f 
			case 102: update_var = 5;	break;

			// g
			case 103: update_var = 6;	break;
    74a2:	4b36      	ldr	r3, [pc, #216]	; (757c <read_keyboard()+0x218>)
    74a4:	2206      	movs	r2, #6
    74a6:	701a      	strb	r2, [r3, #0]
    74a8:	e760      	b.n	736c <read_keyboard()+0x8>

			// e
			case 101: update_var = 4;	break;

			// f 
			case 102: update_var = 5;	break;
    74aa:	4b34      	ldr	r3, [pc, #208]	; (757c <read_keyboard()+0x218>)
    74ac:	2205      	movs	r2, #5
    74ae:	701a      	strb	r2, [r3, #0]
    74b0:	e75c      	b.n	736c <read_keyboard()+0x8>

			// d 
			case 100: update_var = 3;	break;

			// e
			case 101: update_var = 4;	break;
    74b2:	4b32      	ldr	r3, [pc, #200]	; (757c <read_keyboard()+0x218>)
    74b4:	2204      	movs	r2, #4
    74b6:	701a      	strb	r2, [r3, #0]
    74b8:	e758      	b.n	736c <read_keyboard()+0x8>

			// c
			case 99: update_var = 2;	break;

			// d 
			case 100: update_var = 3;	break;
    74ba:	4b30      	ldr	r3, [pc, #192]	; (757c <read_keyboard()+0x218>)
    74bc:	2203      	movs	r2, #3
    74be:	701a      	strb	r2, [r3, #0]
    74c0:	e754      	b.n	736c <read_keyboard()+0x8>

			// b
			case 98: update_var = 1;	break;

			// c
			case 99: update_var = 2;	break;
    74c2:	4b2e      	ldr	r3, [pc, #184]	; (757c <read_keyboard()+0x218>)
    74c4:	2202      	movs	r2, #2
    74c6:	701a      	strb	r2, [r3, #0]
    74c8:	e750      	b.n	736c <read_keyboard()+0x8>

			// a
			case 97: update_var = 0;	break;

			// b
			case 98: update_var = 1;	break;
    74ca:	4b2c      	ldr	r3, [pc, #176]	; (757c <read_keyboard()+0x218>)
    74cc:	2201      	movs	r2, #1
    74ce:	701a      	strb	r2, [r3, #0]
    74d0:	e74c      	b.n	736c <read_keyboard()+0x8>

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; break;

			// a
			case 97: update_var = 0;	break;
    74d2:	4b2a      	ldr	r3, [pc, #168]	; (757c <read_keyboard()+0x218>)
    74d4:	2200      	movs	r2, #0
    74d6:	701a      	strb	r2, [r3, #0]
    74d8:	e748      	b.n	736c <read_keyboard()+0x8>

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; break;

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; break;
    74da:	4929      	ldr	r1, [pc, #164]	; (7580 <read_keyboard()+0x21c>)
    74dc:	2300      	movs	r3, #0
    74de:	800a      	strh	r2, [r1, #0]
    74e0:	7023      	strb	r3, [r4, #0]
    74e2:	e743      	b.n	736c <read_keyboard()+0x8>

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; break;

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; break;
    74e4:	4927      	ldr	r1, [pc, #156]	; (7584 <read_keyboard()+0x220>)

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; break;

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; break;
    74e6:	3200      	adds	r2, #0
    74e8:	bf18      	it	ne
    74ea:	2201      	movne	r2, #1
    74ec:	2300      	movs	r3, #0
    74ee:	700a      	strb	r2, [r1, #0]
    74f0:	7023      	strb	r3, [r4, #0]
    74f2:	e73b      	b.n	736c <read_keyboard()+0x8>
    74f4:	4924      	ldr	r1, [pc, #144]	; (7588 <read_keyboard()+0x224>)
    74f6:	e7f6      	b.n	74e6 <read_keyboard()+0x182>
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
				keyboard_update = 0; 
				break;

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; break;
    74f8:	4924      	ldr	r1, [pc, #144]	; (758c <read_keyboard()+0x228>)
    74fa:	e7f4      	b.n	74e6 <read_keyboard()+0x182>
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    74fc:	4b24      	ldr	r3, [pc, #144]	; (7590 <read_keyboard()+0x22c>)
    74fe:	4825      	ldr	r0, [pc, #148]	; (7594 <read_keyboard()+0x230>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    7500:	f887 e228 	strb.w	lr, [r7, #552]	; 0x228
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    7504:	fa5f f28e 	uxtb.w	r2, lr
    7508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    750c:	f7f9 fa2e 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
				keyboard_update = 0; 
    7510:	2300      	movs	r3, #0
    7512:	7023      	strb	r3, [r4, #0]
				break;
    7514:	e72a      	b.n	736c <read_keyboard()+0x8>

			// M - mode
			case 77: change_pattern((uint8_t)update_arg); keyboard_update = 0; break;

			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; break;
    7516:	3200      	adds	r2, #0
    7518:	bf18      	it	ne
    751a:	2201      	movne	r2, #1
    751c:	2300      	movs	r3, #0
    751e:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
    7522:	7023      	strb	r3, [r4, #0]
    7524:	e722      	b.n	736c <read_keyboard()+0x8>

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = update_arg; keyboard_update = 0; break;

			// M - mode
			case 77: change_pattern((uint8_t)update_arg); keyboard_update = 0; break;
    7526:	fa5f f08e 	uxtb.w	r0, lr
    752a:	f7ff fe51 	bl	71d0 <change_pattern(unsigned char)>
    752e:	2300      	movs	r3, #0
    7530:	7023      	strb	r3, [r4, #0]
    7532:	e71b      	b.n	736c <read_keyboard()+0x8>

			// D - delay
			case 68: curr_leds.delay_time = update_arg; keyboard_update = 0; break;

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = update_arg; keyboard_update = 0; break;
    7534:	4a18      	ldr	r2, [pc, #96]	; (7598 <read_keyboard()+0x234>)
    7536:	2300      	movs	r3, #0
    7538:	f882 e1c3 	strb.w	lr, [r2, #451]	; 0x1c3
    753c:	7023      	strb	r3, [r4, #0]
    753e:	e715      	b.n	736c <read_keyboard()+0x8>
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				break;

			// D - delay
			case 68: curr_leds.delay_time = update_arg; keyboard_update = 0; break;
    7540:	2300      	movs	r3, #0
    7542:	f887 e1c3 	strb.w	lr, [r7, #451]	; 0x1c3
    7546:	7023      	strb	r3, [r4, #0]
    7548:	e710      	b.n	736c <read_keyboard()+0x8>
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    754a:	4914      	ldr	r1, [pc, #80]	; (759c <read_keyboard()+0x238>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    754c:	4a14      	ldr	r2, [pc, #80]	; (75a0 <read_keyboard()+0x23c>)
    754e:	fa5f fe8e 	uxtb.w	lr, lr
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    7552:	2300      	movs	r3, #0
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    7554:	f881 e000 	strb.w	lr, [r1]
    7558:	f882 e000 	strb.w	lr, [r2]
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    755c:	7023      	strb	r3, [r4, #0]
				break;
    755e:	e705      	b.n	736c <read_keyboard()+0x8>
    7560:	1fff9508 	.word	0x1fff9508
    7564:	1fff95ec 	.word	0x1fff95ec
    7568:	0000cee0 	.word	0x0000cee0
    756c:	0000cd4c 	.word	0x0000cd4c
    7570:	1fff8764 	.word	0x1fff8764
    7574:	1fff95c1 	.word	0x1fff95c1
    7578:	1fff95c8 	.word	0x1fff95c8
    757c:	1fff95d0 	.word	0x1fff95d0
    7580:	1fff8720 	.word	0x1fff8720
    7584:	1fff8758 	.word	0x1fff8758
    7588:	1fff8748 	.word	0x1fff8748
    758c:	1fff8722 	.word	0x1fff8722
    7590:	0000d910 	.word	0x0000d910
    7594:	1fff97e3 	.word	0x1fff97e3
    7598:	1fff8c88 	.word	0x1fff8c88
    759c:	1fff9fd6 	.word	0x1fff9fd6
    75a0:	1fff9fe0 	.word	0x1fff9fe0

000075a4 <setup>:

Mode start_mode = BOUNCE;

// ================ SETUP ================

void setup() {
    75a4:	b570      	push	{r4, r5, r6, lr}
    75a6:	f640 31b8 	movw	r1, #3000	; 0xbb8
    75aa:	b082      	sub	sp, #8
    75ac:	4864      	ldr	r0, [pc, #400]	; (7740 <setup+0x19c>)
    75ae:	f001 fcf7 	bl	8fa0 <VisualMicroDebug::init(unsigned long)>
    75b2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    75b6:	4862      	ldr	r0, [pc, #392]	; (7740 <setup+0x19c>)
    75b8:	f001 fcee 	bl	8f98 <VisualMicroDebug::begin(unsigned long)>
    75bc:	2101      	movs	r1, #1
    75be:	4860      	ldr	r0, [pc, #384]	; (7740 <setup+0x19c>)
    75c0:	f001 fcc4 	bl	8f4c <VisualMicroDebug::outPacketStart(bool)>
    75c4:	b150      	cbz	r0, 75dc <setup+0x38>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    75c6:	2110      	movs	r1, #16
    75c8:	485e      	ldr	r0, [pc, #376]	; (7744 <setup+0x1a0>)
    75ca:	f003 f81b 	bl	a604 <usb_serial_write>
    75ce:	485c      	ldr	r0, [pc, #368]	; (7740 <setup+0x19c>)
    75d0:	210a      	movs	r1, #10
    75d2:	f001 fca9 	bl	8f28 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    75d6:	485a      	ldr	r0, [pc, #360]	; (7740 <setup+0x19c>)
    75d8:	f001 fcdc 	bl	8f94 <VisualMicroDebug::outPacketEnd()>
    75dc:	2201      	movs	r2, #1
    75de:	2100      	movs	r1, #0
    75e0:	4857      	ldr	r0, [pc, #348]	; (7740 <setup+0x19c>)
    75e2:	f001 fd89 	bl	90f8 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(500); Serial.println("DEBUG ON"); }
    75e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    75ea:	4857      	ldr	r0, [pc, #348]	; (7748 <setup+0x1a4>)
    75ec:	f003 fa9a 	bl	ab24 <Stream::setTimeout(unsigned long)>
    75f0:	2108      	movs	r1, #8
    75f2:	4856      	ldr	r0, [pc, #344]	; (774c <setup+0x1a8>)
    75f4:	f003 f806 	bl	a604 <usb_serial_write>
    75f8:	4853      	ldr	r0, [pc, #332]	; (7748 <setup+0x1a4>)
    75fa:	f003 fa07 	bl	aa0c <Print::println()>

	delay(1000);
    75fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7602:	f001 ffe7 	bl	95d4 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    7606:	4852      	ldr	r0, [pc, #328]	; (7750 <setup+0x1ac>)
    7608:	6803      	ldr	r3, [r0, #0]
    760a:	f013 0401 	ands.w	r4, r3, #1
    760e:	d073      	beq.n	76f8 <setup+0x154>
    7610:	2300      	movs	r3, #0
    7612:	2296      	movs	r2, #150	; 0x96
    7614:	494f      	ldr	r1, [pc, #316]	; (7754 <setup+0x1b0>)
    7616:	4850      	ldr	r0, [pc, #320]	; (7758 <setup+0x1b4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    7618:	4c50      	ldr	r4, [pc, #320]	; (775c <setup+0x1b8>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    761a:	4d51      	ldr	r5, [pc, #324]	; (7760 <setup+0x1bc>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    761c:	f001 f8ca 	bl	87b4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(max_bright);
    7620:	4b50      	ldr	r3, [pc, #320]	; (7764 <setup+0x1c0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    7622:	781b      	ldrb	r3, [r3, #0]
    7624:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    7626:	22b0      	movs	r2, #176	; 0xb0
    7628:	26ff      	movs	r6, #255	; 0xff
    762a:	23f0      	movs	r3, #240	; 0xf0
	FastLED.setCorrection(TypicalLEDStrip);
    762c:	4620      	mov	r0, r4
    762e:	a901      	add	r1, sp, #4
    7630:	f88d 2005 	strb.w	r2, [sp, #5]
    7634:	f88d 3006 	strb.w	r3, [sp, #6]
    7638:	f88d 6004 	strb.w	r6, [sp, #4]
    763c:	f001 f8fa 	bl	8834 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    7640:	f640 31b8 	movw	r1, #3000	; 0xbb8
    7644:	2005      	movs	r0, #5
    7646:	f001 fc63 	bl	8f10 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    764a:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    764e:	2002      	movs	r0, #2
    7650:	802b      	strh	r3, [r5, #0]
    7652:	f001 fe91 	bl	9378 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    7656:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    7658:	2100      	movs	r1, #0
    765a:	4403      	add	r3, r0
    765c:	4620      	mov	r0, r4
    765e:	802b      	strh	r3, [r5, #0]
    7660:	f001 f9fa 	bl	8a58 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    7664:	7821      	ldrb	r1, [r4, #0]
    7666:	4620      	mov	r0, r4
    7668:	f001 f91c 	bl	88a4 <CFastLED::show(unsigned char)>
    766c:	4620      	mov	r0, r4
    766e:	2132      	movs	r1, #50	; 0x32
    7670:	f001 f97a 	bl	8968 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    7674:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    7676:	aa01      	add	r2, sp, #4
    7678:	2196      	movs	r1, #150	; 0x96
    767a:	4836      	ldr	r0, [pc, #216]	; (7754 <setup+0x1b0>)
    767c:	f88d 6004 	strb.w	r6, [sp, #4]
    7680:	f88d 5005 	strb.w	r5, [sp, #5]
    7684:	f88d 5006 	strb.w	r5, [sp, #6]
    7688:	f000 feea 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
    768c:	4620      	mov	r0, r4
    768e:	21fa      	movs	r1, #250	; 0xfa
    7690:	f001 f96a 	bl	8968 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    7694:	aa01      	add	r2, sp, #4
    7696:	2196      	movs	r1, #150	; 0x96
    7698:	482e      	ldr	r0, [pc, #184]	; (7754 <setup+0x1b0>)
    769a:	f88d 6006 	strb.w	r6, [sp, #6]
    769e:	f88d 5004 	strb.w	r5, [sp, #4]
    76a2:	f88d 5005 	strb.w	r5, [sp, #5]
    76a6:	f000 fedb 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
    76aa:	4620      	mov	r0, r4
    76ac:	21fa      	movs	r1, #250	; 0xfa
    76ae:	f001 f95b 	bl	8968 <CFastLED::delay(unsigned long)>
    76b2:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    76b4:	aa01      	add	r2, sp, #4
    76b6:	2196      	movs	r1, #150	; 0x96
    76b8:	4826      	ldr	r0, [pc, #152]	; (7754 <setup+0x1b0>)
    76ba:	f88d 3005 	strb.w	r3, [sp, #5]
    76be:	f88d 5004 	strb.w	r5, [sp, #4]
    76c2:	f88d 5006 	strb.w	r5, [sp, #6]
    76c6:	f000 fecb 	bl	8460 <fill_solid(CRGB*, int, CRGB const&)>
    76ca:	4620      	mov	r0, r4
    76cc:	21fa      	movs	r1, #250	; 0xfa
    76ce:	f001 f94b 	bl	8968 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    76d2:	4629      	mov	r1, r5
    76d4:	4620      	mov	r0, r4
    76d6:	f001 f9bf 	bl	8a58 <CFastLED::clear(bool)>
    76da:	4620      	mov	r0, r4
    76dc:	21fa      	movs	r1, #250	; 0xfa
    76de:	f001 f943 	bl	8968 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    76e2:	f7f9 fa39 	bl	b58 <initialize()>
    76e6:	210e      	movs	r1, #14
    76e8:	481f      	ldr	r0, [pc, #124]	; (7768 <setup+0x1c4>)
    76ea:	f002 ff8b 	bl	a604 <usb_serial_write>
    76ee:	4816      	ldr	r0, [pc, #88]	; (7748 <setup+0x1a4>)
    76f0:	f003 f98c 	bl	aa0c <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    76f4:	b002      	add	sp, #8
    76f6:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    76f8:	f001 feec 	bl	94d4 <__cxa_guard_acquire>
    76fc:	2800      	cmp	r0, #0
    76fe:	d087      	beq.n	7610 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    7700:	491a      	ldr	r1, [pc, #104]	; (776c <setup+0x1c8>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    7702:	4b15      	ldr	r3, [pc, #84]	; (7758 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    7704:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    7706:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    7708:	22ff      	movs	r2, #255	; 0xff
    770a:	2501      	movs	r5, #1
    770c:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    770e:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    7710:	749d      	strb	r5, [r3, #18]
    7712:	731a      	strb	r2, [r3, #12]
    7714:	735a      	strb	r2, [r3, #13]
    7716:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    7718:	73da      	strb	r2, [r3, #15]
    771a:	741a      	strb	r2, [r3, #16]
    771c:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    771e:	b160      	cbz	r0, 773a <setup+0x196>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    7720:	4a13      	ldr	r2, [pc, #76]	; (7770 <setup+0x1cc>)
    7722:	6811      	ldr	r1, [r2, #0]
    7724:	b101      	cbz	r1, 7728 <setup+0x184>
    7726:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    7728:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    772a:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    772c:	4911      	ldr	r1, [pc, #68]	; (7774 <setup+0x1d0>)
    772e:	4808      	ldr	r0, [pc, #32]	; (7750 <setup+0x1ac>)
    7730:	619a      	str	r2, [r3, #24]
    7732:	6019      	str	r1, [r3, #0]
    7734:	f001 fed4 	bl	94e0 <__cxa_guard_release>
    7738:	e76a      	b.n	7610 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    773a:	600b      	str	r3, [r1, #0]
    773c:	e7f0      	b.n	7720 <setup+0x17c>
    773e:	bf00      	nop
    7740:	1fffa008 	.word	0x1fffa008
    7744:	0000cee4 	.word	0x0000cee4
    7748:	1fff8764 	.word	0x1fff8764
    774c:	0000cef8 	.word	0x0000cef8
    7750:	1fff8c64 	.word	0x1fff8c64
    7754:	1fff9e14 	.word	0x1fff9e14
    7758:	1fff8c68 	.word	0x1fff8c68
    775c:	1fff9fe0 	.word	0x1fff9fe0
    7760:	1fff875a 	.word	0x1fff875a
    7764:	1fff9fd6 	.word	0x1fff9fd6
    7768:	0000cf04 	.word	0x0000cf04
    776c:	1fff9ff0 	.word	0x1fff9ff0
    7770:	1fffa000 	.word	0x1fffa000
    7774:	0000c1e0 	.word	0x0000c1e0

00007778 <loop>:



// ================ LOOP ================

void loop() {
    7778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    777c:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    777e:	f004 fc6b 	bl	c058 <random>
    7782:	4a9f      	ldr	r2, [pc, #636]	; (7a00 <loop+0x288>)
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    7784:	4d9f      	ldr	r5, [pc, #636]	; (7a04 <loop+0x28c>)
    7786:	8813      	ldrh	r3, [r2, #0]
    7788:	4418      	add	r0, r3
    778a:	8010      	strh	r0, [r2, #0]
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());
	
	// Check for keyboard updates
	read_keyboard();
    778c:	f7ff fdea 	bl	7364 <read_keyboard()>

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    7790:	682b      	ldr	r3, [r5, #0]
    7792:	07db      	lsls	r3, r3, #31
    7794:	f140 81bc 	bpl.w	7b10 <loop+0x398>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7798:	4e9b      	ldr	r6, [pc, #620]	; (7a08 <loop+0x290>)
    779a:	4c9c      	ldr	r4, [pc, #624]	; (7a0c <loop+0x294>)
    779c:	6833      	ldr	r3, [r6, #0]
    779e:	9303      	str	r3, [sp, #12]
	return ret;
    77a0:	9a03      	ldr	r2, [sp, #12]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    77a2:	489b      	ldr	r0, [pc, #620]	; (7a10 <loop+0x298>)
    77a4:	8823      	ldrh	r3, [r4, #0]
    77a6:	8861      	ldrh	r1, [r4, #2]
    77a8:	fba0 0202 	umull	r0, r2, r0, r2
    77ac:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    77b0:	b29b      	uxth	r3, r3
    77b2:	4299      	cmp	r1, r3
    77b4:	d80f      	bhi.n	77d6 <loop+0x5e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77b6:	6833      	ldr	r3, [r6, #0]
    77b8:	9302      	str	r3, [sp, #8]
	return ret;
    77ba:	9b02      	ldr	r3, [sp, #8]
    77bc:	4994      	ldr	r1, [pc, #592]	; (7a10 <loop+0x298>)
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_pattern(); }
    77be:	4a95      	ldr	r2, [pc, #596]	; (7a14 <loop+0x29c>)
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
    77c0:	4895      	ldr	r0, [pc, #596]	; (7a18 <loop+0x2a0>)
		if (mode_change) { change_pattern(); }
    77c2:	7812      	ldrb	r2, [r2, #0]
    77c4:	8800      	ldrh	r0, [r0, #0]
    77c6:	8060      	strh	r0, [r4, #2]
    77c8:	fba1 1303 	umull	r1, r3, r1, r3
    77cc:	099b      	lsrs	r3, r3, #6
    77ce:	8023      	strh	r3, [r4, #0]
    77d0:	2a00      	cmp	r2, #0
    77d2:	f040 81b8 	bne.w	7b46 <loop+0x3ce>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    77d6:	4d91      	ldr	r5, [pc, #580]	; (7a1c <loop+0x2a4>)
    77d8:	682b      	ldr	r3, [r5, #0]
    77da:	07df      	lsls	r7, r3, #31
    77dc:	f140 817c 	bpl.w	7ad8 <loop+0x360>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77e0:	6833      	ldr	r3, [r6, #0]
    77e2:	4c8f      	ldr	r4, [pc, #572]	; (7a20 <loop+0x2a8>)
    77e4:	9306      	str	r3, [sp, #24]
	return ret;
    77e6:	9a06      	ldr	r2, [sp, #24]
    77e8:	4889      	ldr	r0, [pc, #548]	; (7a10 <loop+0x298>)
    77ea:	8823      	ldrh	r3, [r4, #0]
    77ec:	8861      	ldrh	r1, [r4, #2]
    77ee:	fba0 0202 	umull	r0, r2, r0, r2
    77f2:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    77f6:	b29b      	uxth	r3, r3
    77f8:	4299      	cmp	r1, r3
    77fa:	f240 8145 	bls.w	7a88 <loop+0x310>
    77fe:	4f89      	ldr	r7, [pc, #548]	; (7a24 <loop+0x2ac>)
    7800:	f8df 9274 	ldr.w	r9, [pc, #628]	; 7a78 <loop+0x300>
    7804:	f8df a23c 	ldr.w	sl, [pc, #572]	; 7a44 <loop+0x2cc>
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    7808:	4d87      	ldr	r5, [pc, #540]	; (7a28 <loop+0x2b0>)
    780a:	682b      	ldr	r3, [r5, #0]
    780c:	07dc      	lsls	r4, r3, #31
    780e:	f140 815a 	bpl.w	7ac6 <loop+0x34e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7812:	6833      	ldr	r3, [r6, #0]
    7814:	4c85      	ldr	r4, [pc, #532]	; (7a2c <loop+0x2b4>)
    7816:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7818:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    781e:	1a5b      	subs	r3, r3, r1
    7820:	4293      	cmp	r3, r2
    7822:	d30d      	bcc.n	7840 <loop+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7824:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    7826:	4982      	ldr	r1, [pc, #520]	; (7a30 <loop+0x2b8>)
    7828:	9308      	str	r3, [sp, #32]
	return ret;
    782a:	9b08      	ldr	r3, [sp, #32]
    782c:	6023      	str	r3, [r4, #0]
    782e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    7832:	2218      	movs	r2, #24
    7834:	f000 ff96 	bl	8764 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    7838:	783b      	ldrb	r3, [r7, #0]
    783a:	2b00      	cmp	r3, #0
    783c:	f040 818b 	bne.w	7b56 <loop+0x3de>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    7840:	f8df 8238 	ldr.w	r8, [pc, #568]	; 7a7c <loop+0x304>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    7844:	4d7b      	ldr	r5, [pc, #492]	; (7a34 <loop+0x2bc>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    7846:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    784a:	f8df b234 	ldr.w	fp, [pc, #564]	; 7a80 <loop+0x308>
    784e:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    7852:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
    7856:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    7858:	07d8      	lsls	r0, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    785a:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    785e:	f140 80b4 	bpl.w	79ca <loop+0x252>
    7862:	4c75      	ldr	r4, [pc, #468]	; (7a38 <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7864:	6833      	ldr	r3, [r6, #0]
    7866:	930c      	str	r3, [sp, #48]	; 0x30
    7868:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    786c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    786e:	1a1b      	subs	r3, r3, r0
    7870:	428b      	cmp	r3, r1
    7872:	f080 80bc 	bcs.w	79ee <loop+0x276>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    7876:	f8df 820c 	ldr.w	r8, [pc, #524]	; 7a84 <loop+0x30c>
    787a:	f8d8 3000 	ldr.w	r3, [r8]
    787e:	07d9      	lsls	r1, r3, #31
    7880:	d57f      	bpl.n	7982 <loop+0x20a>
    7882:	4c6e      	ldr	r4, [pc, #440]	; (7a3c <loop+0x2c4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7884:	6833      	ldr	r3, [r6, #0]
    7886:	930f      	str	r3, [sp, #60]	; 0x3c
    7888:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    788c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    788e:	1a5b      	subs	r3, r3, r1
    7890:	429a      	cmp	r2, r3
    7892:	f240 8086 	bls.w	79a2 <loop+0x22a>
			}
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
    7896:	783b      	ldrb	r3, [r7, #0]
    7898:	b123      	cbz	r3, 78a4 <loop+0x12c>
    789a:	4b69      	ldr	r3, [pc, #420]	; (7a40 <loop+0x2c8>)
    789c:	781b      	ldrb	r3, [r3, #0]
    789e:	2b00      	cmp	r3, #0
    78a0:	f000 814c 	beq.w	7b3c <loop+0x3c4>
    78a4:	4b67      	ldr	r3, [pc, #412]	; (7a44 <loop+0x2cc>)
    78a6:	4a68      	ldr	r2, [pc, #416]	; (7a48 <loop+0x2d0>)
    78a8:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    78ac:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    78ae:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    78b0:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    78b2:	7014      	strb	r4, [r2, #0]
    78b4:	3303      	adds	r3, #3
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    78b6:	429d      	cmp	r5, r3
        g = rhs.g;
    78b8:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    78ba:	7091      	strb	r1, [r2, #2]
    78bc:	f102 0203 	add.w	r2, r2, #3
    78c0:	d1f4      	bne.n	78ac <loop+0x134>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    78c2:	4d62      	ldr	r5, [pc, #392]	; (7a4c <loop+0x2d4>)
    78c4:	682b      	ldr	r3, [r5, #0]
    78c6:	07da      	lsls	r2, r3, #31
    78c8:	f140 8110 	bpl.w	7aec <loop+0x374>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78cc:	6833      	ldr	r3, [r6, #0]
    78ce:	4c60      	ldr	r4, [pc, #384]	; (7a50 <loop+0x2d8>)
    78d0:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    78d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    78d4:	484e      	ldr	r0, [pc, #312]	; (7a10 <loop+0x298>)
    78d6:	8823      	ldrh	r3, [r4, #0]
    78d8:	8861      	ldrh	r1, [r4, #2]
    78da:	fba0 0202 	umull	r0, r2, r0, r2
    78de:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    78e2:	b29b      	uxth	r3, r3
    78e4:	4299      	cmp	r1, r3
    78e6:	d826      	bhi.n	7936 <loop+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78e8:	6833      	ldr	r3, [r6, #0]
    78ea:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    78ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    78ee:	4a48      	ldr	r2, [pc, #288]	; (7a10 <loop+0x298>)
			LEDDebug(curr_leds);
    78f0:	4854      	ldr	r0, [pc, #336]	; (7a44 <loop+0x2cc>)
    78f2:	fba2 2303 	umull	r2, r3, r2, r3
    78f6:	099b      	lsrs	r3, r3, #6
    78f8:	8023      	strh	r3, [r4, #0]
    78fa:	f7fa fa93 	bl	1e24 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    78fe:	783b      	ldrb	r3, [r7, #0]
    7900:	2b00      	cmp	r3, #0
    7902:	f040 8124 	bne.w	7b4e <loop+0x3d6>
    7906:	2114      	movs	r1, #20
    7908:	4852      	ldr	r0, [pc, #328]	; (7a54 <loop+0x2dc>)
    790a:	f002 fe7b 	bl	a604 <usb_serial_write>
				LEDDebug(next_leds);
			}
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
    790e:	4b52      	ldr	r3, [pc, #328]	; (7a58 <loop+0x2e0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7910:	4852      	ldr	r0, [pc, #328]	; (7a5c <loop+0x2e4>)
    7912:	8819      	ldrh	r1, [r3, #0]
    7914:	f003 f8ca 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7918:	4850      	ldr	r0, [pc, #320]	; (7a5c <loop+0x2e4>)
    791a:	f003 f877 	bl	aa0c <Print::println()>
    791e:	2116      	movs	r1, #22
    7920:	484f      	ldr	r0, [pc, #316]	; (7a60 <loop+0x2e8>)
    7922:	f002 fe6f 	bl	a604 <usb_serial_write>
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
    7926:	4b4f      	ldr	r3, [pc, #316]	; (7a64 <loop+0x2ec>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    7928:	484c      	ldr	r0, [pc, #304]	; (7a5c <loop+0x2e4>)
    792a:	8819      	ldrh	r1, [r3, #0]
    792c:	f003 f8be 	bl	aaac <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    7930:	484a      	ldr	r0, [pc, #296]	; (7a5c <loop+0x2e4>)
    7932:	f003 f86b 	bl	aa0c <Print::println()>
		}
		EVERY_N_MINUTES(1) {
    7936:	4d4c      	ldr	r5, [pc, #304]	; (7a68 <loop+0x2f0>)
    7938:	682b      	ldr	r3, [r5, #0]
    793a:	07db      	lsls	r3, r3, #31
    793c:	f140 80df 	bpl.w	7afe <loop+0x386>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7940:	6833      	ldr	r3, [r6, #0]
    7942:	4c4a      	ldr	r4, [pc, #296]	; (7a6c <loop+0x2f4>)
    7944:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    7946:	9a15      	ldr	r2, [sp, #84]	; 0x54
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    7948:	4849      	ldr	r0, [pc, #292]	; (7a70 <loop+0x2f8>)
    794a:	8823      	ldrh	r3, [r4, #0]
    794c:	8861      	ldrh	r1, [r4, #2]
    794e:	fba0 0202 	umull	r0, r2, r0, r2
    7952:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    7956:	b29b      	uxth	r3, r3
    7958:	4299      	cmp	r1, r3
    795a:	d80b      	bhi.n	7974 <loop+0x1fc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    795c:	6833      	ldr	r3, [r6, #0]
			number_of_min_on++;
    795e:	4941      	ldr	r1, [pc, #260]	; (7a64 <loop+0x2ec>)
    7960:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    7962:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7964:	4842      	ldr	r0, [pc, #264]	; (7a70 <loop+0x2f8>)
    7966:	880a      	ldrh	r2, [r1, #0]
    7968:	fba0 0303 	umull	r0, r3, r0, r3
    796c:	0b9b      	lsrs	r3, r3, #14
    796e:	3201      	adds	r2, #1
    7970:	8023      	strh	r3, [r4, #0]
    7972:	800a      	strh	r2, [r1, #0]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    7974:	483f      	ldr	r0, [pc, #252]	; (7a74 <loop+0x2fc>)
    7976:	7801      	ldrb	r1, [r0, #0]
    7978:	f000 ff94 	bl	88a4 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    797c:	b017      	add	sp, #92	; 0x5c
    797e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    7982:	4640      	mov	r0, r8
    7984:	f001 fda6 	bl	94d4 <__cxa_guard_acquire>
    7988:	2800      	cmp	r0, #0
    798a:	f040 8122 	bne.w	7bd2 <loop+0x45a>
    798e:	4c2b      	ldr	r4, [pc, #172]	; (7a3c <loop+0x2c4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7990:	6833      	ldr	r3, [r6, #0]
    7992:	930f      	str	r3, [sp, #60]	; 0x3c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7994:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    7998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    799a:	1a5b      	subs	r3, r3, r1
    799c:	4293      	cmp	r3, r2
    799e:	f4ff af7a 	bcc.w	7896 <loop+0x11e>
		if (!keyboard_update) {
    79a2:	4b27      	ldr	r3, [pc, #156]	; (7a40 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    79a4:	6832      	ldr	r2, [r6, #0]
    79a6:	920e      	str	r2, [sp, #56]	; 0x38
    79a8:	781b      	ldrb	r3, [r3, #0]
	return ret;
    79aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    79ac:	6022      	str	r2, [r4, #0]
    79ae:	4a23      	ldr	r2, [pc, #140]	; (7a3c <loop+0x2c4>)
    79b0:	2b00      	cmp	r3, #0
    79b2:	f47f af70 	bne.w	7896 <loop+0x11e>
			if (in_transition) {
    79b6:	783b      	ldrb	r3, [r7, #0]
    79b8:	2b00      	cmp	r3, #0
    79ba:	f43f af73 	beq.w	78a4 <loop+0x12c>
    79be:	782b      	ldrb	r3, [r5, #0]
				next_timer.setPeriod(next_delay);
				switch_mode(next_leds);
    79c0:	482d      	ldr	r0, [pc, #180]	; (7a78 <loop+0x300>)
    79c2:	6053      	str	r3, [r2, #4]
    79c4:	f7fe ff9a 	bl	68fc <switch_mode(LEDStruct&)>
    79c8:	e765      	b.n	7896 <loop+0x11e>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    79ca:	4640      	mov	r0, r8
    79cc:	f001 fd82 	bl	94d4 <__cxa_guard_acquire>
    79d0:	2800      	cmp	r0, #0
    79d2:	f040 80e3 	bne.w	7b9c <loop+0x424>
    79d6:	4c18      	ldr	r4, [pc, #96]	; (7a38 <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    79d8:	6833      	ldr	r3, [r6, #0]
    79da:	930c      	str	r3, [sp, #48]	; 0x30
    79dc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    79e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    79e2:	1a5b      	subs	r3, r3, r1
    79e4:	4293      	cmp	r3, r2
    79e6:	f4ff af46 	bcc.w	7876 <loop+0xfe>
    79ea:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    79ee:	6833      	ldr	r3, [r6, #0]
    79f0:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    79f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    79f4:	4813      	ldr	r0, [pc, #76]	; (7a44 <loop+0x2cc>)
    79f6:	6062      	str	r2, [r4, #4]
    79f8:	6023      	str	r3, [r4, #0]
    79fa:	f7fe ff7f 	bl	68fc <switch_mode(LEDStruct&)>
    79fe:	e73a      	b.n	7876 <loop+0xfe>
    7a00:	1fff875a 	.word	0x1fff875a
    7a04:	1fff95cc 	.word	0x1fff95cc
    7a08:	1fffa058 	.word	0x1fffa058
    7a0c:	1fff9fdc 	.word	0x1fff9fdc
    7a10:	10624dd3 	.word	0x10624dd3
    7a14:	1fff8758 	.word	0x1fff8758
    7a18:	1fff8720 	.word	0x1fff8720
    7a1c:	1fff950c 	.word	0x1fff950c
    7a20:	1fff94e0 	.word	0x1fff94e0
    7a24:	1fff94c0 	.word	0x1fff94c0
    7a28:	1fff9510 	.word	0x1fff9510
    7a2c:	1fff94e4 	.word	0x1fff94e4
    7a30:	1fff97e3 	.word	0x1fff97e3
    7a34:	1fff951c 	.word	0x1fff951c
    7a38:	1fff94b8 	.word	0x1fff94b8
    7a3c:	1fff94b0 	.word	0x1fff94b0
    7a40:	1fff95c1 	.word	0x1fff95c1
    7a44:	1fff95ec 	.word	0x1fff95ec
    7a48:	1fff9e14 	.word	0x1fff9e14
    7a4c:	1fff9514 	.word	0x1fff9514
    7a50:	1fff95e8 	.word	0x1fff95e8
    7a54:	0000cf14 	.word	0x0000cf14
    7a58:	1fff8c84 	.word	0x1fff8c84
    7a5c:	1fff8764 	.word	0x1fff8764
    7a60:	0000cf2c 	.word	0x0000cf2c
    7a64:	1fff95c2 	.word	0x1fff95c2
    7a68:	1fff9518 	.word	0x1fff9518
    7a6c:	1fff94f0 	.word	0x1fff94f0
    7a70:	45e7b273 	.word	0x45e7b273
    7a74:	1fff9fe0 	.word	0x1fff9fe0
    7a78:	1fff8c88 	.word	0x1fff8c88
    7a7c:	1fff95e4 	.word	0x1fff95e4
    7a80:	1fff95c0 	.word	0x1fff95c0
    7a84:	1fff95e0 	.word	0x1fff95e0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a88:	6833      	ldr	r3, [r6, #0]
    7a8a:	9305      	str	r3, [sp, #20]
	return ret;
    7a8c:	9b05      	ldr	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    7a8e:	4965      	ldr	r1, [pc, #404]	; (7c24 <loop+0x4ac>)
		if (mode_change) { change_pattern(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    7a90:	4a65      	ldr	r2, [pc, #404]	; (7c28 <loop+0x4b0>)
			if (in_transition) { change_palette(next_leds); }
    7a92:	4f66      	ldr	r7, [pc, #408]	; (7c2c <loop+0x4b4>)
		if (mode_change) { change_pattern(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    7a94:	7812      	ldrb	r2, [r2, #0]
    7a96:	fba1 1303 	umull	r1, r3, r1, r3
    7a9a:	099b      	lsrs	r3, r3, #6
    7a9c:	8023      	strh	r3, [r4, #0]
    7a9e:	2a00      	cmp	r2, #0
    7aa0:	f43f aeae 	beq.w	7800 <loop+0x88>
			if (in_transition) { change_palette(next_leds); }
    7aa4:	783b      	ldrb	r3, [r7, #0]
    7aa6:	2b00      	cmp	r3, #0
    7aa8:	d15c      	bne.n	7b64 <loop+0x3ec>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    7aaa:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 7c64 <loop+0x4ec>
    7aae:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    7ab2:	2b00      	cmp	r3, #0
    7ab4:	f040 80b2 	bne.w	7c1c <loop+0x4a4>
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    7ab8:	4d5d      	ldr	r5, [pc, #372]	; (7c30 <loop+0x4b8>)
    7aba:	f8df 9194 	ldr.w	r9, [pc, #404]	; 7c50 <loop+0x4d8>
    7abe:	682b      	ldr	r3, [r5, #0]
    7ac0:	07dc      	lsls	r4, r3, #31
    7ac2:	f53f aea6 	bmi.w	7812 <loop+0x9a>
    7ac6:	4628      	mov	r0, r5
    7ac8:	f001 fd04 	bl	94d4 <__cxa_guard_acquire>
    7acc:	2800      	cmp	r0, #0
    7ace:	f040 809a 	bne.w	7c06 <loop+0x48e>
    7ad2:	4c58      	ldr	r4, [pc, #352]	; (7c34 <loop+0x4bc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ad4:	6833      	ldr	r3, [r6, #0]
    7ad6:	e69e      	b.n	7816 <loop+0x9e>
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_pattern(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    7ad8:	4628      	mov	r0, r5
    7ada:	f001 fcfb 	bl	94d4 <__cxa_guard_acquire>
    7ade:	2800      	cmp	r0, #0
    7ae0:	f040 8082 	bne.w	7be8 <loop+0x470>
    7ae4:	4c54      	ldr	r4, [pc, #336]	; (7c38 <loop+0x4c0>)
    7ae6:	6833      	ldr	r3, [r6, #0]
    7ae8:	9306      	str	r3, [sp, #24]
    7aea:	e67c      	b.n	77e6 <loop+0x6e>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    7aec:	4628      	mov	r0, r5
    7aee:	f001 fcf1 	bl	94d4 <__cxa_guard_acquire>
    7af2:	2800      	cmp	r0, #0
    7af4:	d15e      	bne.n	7bb4 <loop+0x43c>
    7af6:	4c51      	ldr	r4, [pc, #324]	; (7c3c <loop+0x4c4>)
    7af8:	6833      	ldr	r3, [r6, #0]
    7afa:	9312      	str	r3, [sp, #72]	; 0x48
    7afc:	e6e9      	b.n	78d2 <loop+0x15a>
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    7afe:	4628      	mov	r0, r5
    7b00:	f001 fce8 	bl	94d4 <__cxa_guard_acquire>
    7b04:	2800      	cmp	r0, #0
    7b06:	d13a      	bne.n	7b7e <loop+0x406>
    7b08:	4c4d      	ldr	r4, [pc, #308]	; (7c40 <loop+0x4c8>)
    7b0a:	6833      	ldr	r3, [r6, #0]
    7b0c:	9315      	str	r3, [sp, #84]	; 0x54
    7b0e:	e71a      	b.n	7946 <loop+0x1ce>
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    7b10:	4628      	mov	r0, r5
    7b12:	f001 fcdf 	bl	94d4 <__cxa_guard_acquire>
    7b16:	4e4b      	ldr	r6, [pc, #300]	; (7c44 <loop+0x4cc>)
    7b18:	2800      	cmp	r0, #0
    7b1a:	f43f ae3e 	beq.w	779a <loop+0x22>
    7b1e:	6833      	ldr	r3, [r6, #0]
    7b20:	9301      	str	r3, [sp, #4]
    7b22:	4a40      	ldr	r2, [pc, #256]	; (7c24 <loop+0x4ac>)
	return ret;
    7b24:	9b01      	ldr	r3, [sp, #4]
    7b26:	4c48      	ldr	r4, [pc, #288]	; (7c48 <loop+0x4d0>)
    7b28:	fba2 2303 	umull	r2, r3, r2, r3
    7b2c:	099b      	lsrs	r3, r3, #6
    7b2e:	2214      	movs	r2, #20
    7b30:	4628      	mov	r0, r5
    7b32:	8023      	strh	r3, [r4, #0]
    7b34:	8062      	strh	r2, [r4, #2]
    7b36:	f001 fcd3 	bl	94e0 <__cxa_guard_release>
    7b3a:	e62f      	b.n	779c <loop+0x24>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
		switch_transition(transition_type);
    7b3c:	4b43      	ldr	r3, [pc, #268]	; (7c4c <loop+0x4d4>)
    7b3e:	7818      	ldrb	r0, [r3, #0]
    7b40:	f7f9 fe54 	bl	17ec <switch_transition(TransitionType)>
    7b44:	e6bd      	b.n	78c2 <loop+0x14a>
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_pattern(); }
    7b46:	20ff      	movs	r0, #255	; 0xff
    7b48:	f7ff fb42 	bl	71d0 <change_pattern(unsigned char)>
    7b4c:	e643      	b.n	77d6 <loop+0x5e>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    7b4e:	4840      	ldr	r0, [pc, #256]	; (7c50 <loop+0x4d8>)
    7b50:	f7fa f968 	bl	1e24 <LEDDebug(LEDStruct&)>
    7b54:	e6d7      	b.n	7906 <loop+0x18e>
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    7b56:	493f      	ldr	r1, [pc, #252]	; (7c54 <loop+0x4dc>)
    7b58:	2218      	movs	r2, #24
    7b5a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    7b5e:	f000 fe01 	bl	8764 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    7b62:	e66d      	b.n	7840 <loop+0xc8>
    7b64:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7c50 <loop+0x4d8>
    7b68:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    7b6c:	2b00      	cmp	r3, #0
    7b6e:	f43f ae49 	beq.w	7804 <loop+0x8c>
    7b72:	4648      	mov	r0, r9
    7b74:	f7fa fd72 	bl	265c <change_palette(LEDStruct&) [clone .part.12]>
    7b78:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 7c64 <loop+0x4ec>
    7b7c:	e644      	b.n	7808 <loop+0x90>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b7e:	6833      	ldr	r3, [r6, #0]
    7b80:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    7b82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    7b84:	4a34      	ldr	r2, [pc, #208]	; (7c58 <loop+0x4e0>)
    7b86:	4c2e      	ldr	r4, [pc, #184]	; (7c40 <loop+0x4c8>)
    7b88:	fba2 2303 	umull	r2, r3, r2, r3
    7b8c:	0b9b      	lsrs	r3, r3, #14
    7b8e:	2201      	movs	r2, #1
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    7b90:	4628      	mov	r0, r5
    7b92:	8023      	strh	r3, [r4, #0]
    7b94:	8062      	strh	r2, [r4, #2]
    7b96:	f001 fca3 	bl	94e0 <__cxa_guard_release>
    7b9a:	e7b6      	b.n	7b0a <loop+0x392>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7b9c:	6833      	ldr	r3, [r6, #0]
    7b9e:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7ba0:	4c2e      	ldr	r4, [pc, #184]	; (7c5c <loop+0x4e4>)
	return ret;
    7ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    7ba4:	f89b 3000 	ldrb.w	r3, [fp]
    7ba8:	6022      	str	r2, [r4, #0]
    7baa:	4640      	mov	r0, r8
    7bac:	6063      	str	r3, [r4, #4]
    7bae:	f001 fc97 	bl	94e0 <__cxa_guard_release>
    7bb2:	e711      	b.n	79d8 <loop+0x260>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bb4:	6833      	ldr	r3, [r6, #0]
    7bb6:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    7bb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    7bba:	4a1a      	ldr	r2, [pc, #104]	; (7c24 <loop+0x4ac>)
    7bbc:	4c1f      	ldr	r4, [pc, #124]	; (7c3c <loop+0x4c4>)
    7bbe:	fba2 2303 	umull	r2, r3, r2, r3
    7bc2:	099b      	lsrs	r3, r3, #6
    7bc4:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    7bc6:	4628      	mov	r0, r5
    7bc8:	8023      	strh	r3, [r4, #0]
    7bca:	8062      	strh	r2, [r4, #2]
    7bcc:	f001 fc88 	bl	94e0 <__cxa_guard_release>
    7bd0:	e792      	b.n	7af8 <loop+0x380>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7bd2:	6833      	ldr	r3, [r6, #0]
    7bd4:	930d      	str	r3, [sp, #52]	; 0x34
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7bd6:	4c22      	ldr	r4, [pc, #136]	; (7c60 <loop+0x4e8>)
	return ret;
    7bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    7bda:	782b      	ldrb	r3, [r5, #0]
    7bdc:	6022      	str	r2, [r4, #0]
    7bde:	4640      	mov	r0, r8
    7be0:	6063      	str	r3, [r4, #4]
    7be2:	f001 fc7d 	bl	94e0 <__cxa_guard_release>
    7be6:	e6d3      	b.n	7990 <loop+0x218>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7be8:	6833      	ldr	r3, [r6, #0]
    7bea:	9304      	str	r3, [sp, #16]
	return ret;
    7bec:	9b04      	ldr	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    7bee:	4a0d      	ldr	r2, [pc, #52]	; (7c24 <loop+0x4ac>)
    7bf0:	4c11      	ldr	r4, [pc, #68]	; (7c38 <loop+0x4c0>)
    7bf2:	fba2 2303 	umull	r2, r3, r2, r3
    7bf6:	099b      	lsrs	r3, r3, #6
    7bf8:	221e      	movs	r2, #30
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_pattern(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    7bfa:	4628      	mov	r0, r5
    7bfc:	8023      	strh	r3, [r4, #0]
    7bfe:	8062      	strh	r2, [r4, #2]
    7c00:	f001 fc6e 	bl	94e0 <__cxa_guard_release>
    7c04:	e76f      	b.n	7ae6 <loop+0x36e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c06:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7c08:	4c0a      	ldr	r4, [pc, #40]	; (7c34 <loop+0x4bc>)
    7c0a:	9307      	str	r3, [sp, #28]
	return ret;
    7c0c:	9b07      	ldr	r3, [sp, #28]
    7c0e:	6023      	str	r3, [r4, #0]
    7c10:	2332      	movs	r3, #50	; 0x32
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    7c12:	4628      	mov	r0, r5
    7c14:	6063      	str	r3, [r4, #4]
    7c16:	f001 fc63 	bl	94e0 <__cxa_guard_release>
    7c1a:	e75b      	b.n	7ad4 <loop+0x35c>
    7c1c:	4650      	mov	r0, sl
    7c1e:	f7fa fd1d 	bl	265c <change_palette(LEDStruct&) [clone .part.12]>
    7c22:	e749      	b.n	7ab8 <loop+0x340>
    7c24:	10624dd3 	.word	0x10624dd3
    7c28:	1fff8722 	.word	0x1fff8722
    7c2c:	1fff94c0 	.word	0x1fff94c0
    7c30:	1fff9510 	.word	0x1fff9510
    7c34:	1fff94e4 	.word	0x1fff94e4
    7c38:	1fff94e0 	.word	0x1fff94e0
    7c3c:	1fff95e8 	.word	0x1fff95e8
    7c40:	1fff94f0 	.word	0x1fff94f0
    7c44:	1fffa058 	.word	0x1fffa058
    7c48:	1fff9fdc 	.word	0x1fff9fdc
    7c4c:	1fff94d5 	.word	0x1fff94d5
    7c50:	1fff8c88 	.word	0x1fff8c88
    7c54:	1fff8e7f 	.word	0x1fff8e7f
    7c58:	45e7b273 	.word	0x45e7b273
    7c5c:	1fff94b8 	.word	0x1fff94b8
    7c60:	1fff94b0 	.word	0x1fff94b0
    7c64:	1fff95ec 	.word	0x1fff95ec

00007c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    7c68:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    7c6a:	0604      	lsls	r4, r0, #24
    7c6c:	f100 8119 	bmi.w	7ea2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7c70:	4b48      	ldr	r3, [pc, #288]	; (7d94 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7c72:	4949      	ldr	r1, [pc, #292]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7c74:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7c76:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7c78:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7c7a:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7c7c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7c7e:	bf00      	nop
    7c80:	bf00      	nop
    7c82:	bf00      	nop
    7c84:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7c86:	601a      	str	r2, [r3, #0]
    7c88:	bf00      	nop
    7c8a:	bf00      	nop
    7c8c:	bf00      	nop
    7c8e:	bf00      	nop
    7c90:	0641      	lsls	r1, r0, #25
    7c92:	f140 8083 	bpl.w	7d9c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7c96:	4a40      	ldr	r2, [pc, #256]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7c98:	2102      	movs	r1, #2
    7c9a:	2304      	movs	r3, #4
    7c9c:	6011      	str	r1, [r2, #0]
    7c9e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7ca0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7ca2:	bf00      	nop
    7ca4:	bf00      	nop
    7ca6:	bf00      	nop
    7ca8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7caa:	6053      	str	r3, [r2, #4]
    7cac:	bf00      	nop
    7cae:	bf00      	nop
    7cb0:	bf00      	nop
    7cb2:	bf00      	nop
    7cb4:	0682      	lsls	r2, r0, #26
    7cb6:	f140 8084 	bpl.w	7dc2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7cba:	4a37      	ldr	r2, [pc, #220]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7cbc:	2102      	movs	r1, #2
    7cbe:	2304      	movs	r3, #4
    7cc0:	6011      	str	r1, [r2, #0]
    7cc2:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7cc4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7cc6:	bf00      	nop
    7cc8:	bf00      	nop
    7cca:	bf00      	nop
    7ccc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7cce:	6053      	str	r3, [r2, #4]
    7cd0:	bf00      	nop
    7cd2:	bf00      	nop
    7cd4:	bf00      	nop
    7cd6:	bf00      	nop
    7cd8:	06c3      	lsls	r3, r0, #27
    7cda:	f140 8085 	bpl.w	7de8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7cde:	4a2e      	ldr	r2, [pc, #184]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7ce0:	2102      	movs	r1, #2
    7ce2:	2304      	movs	r3, #4
    7ce4:	6011      	str	r1, [r2, #0]
    7ce6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7ce8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7cea:	bf00      	nop
    7cec:	bf00      	nop
    7cee:	bf00      	nop
    7cf0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7cf2:	6053      	str	r3, [r2, #4]
    7cf4:	bf00      	nop
    7cf6:	bf00      	nop
    7cf8:	bf00      	nop
    7cfa:	bf00      	nop
    7cfc:	0704      	lsls	r4, r0, #28
    7cfe:	f140 8086 	bpl.w	7e0e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d02:	4a25      	ldr	r2, [pc, #148]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7d04:	2102      	movs	r1, #2
    7d06:	2304      	movs	r3, #4
    7d08:	6011      	str	r1, [r2, #0]
    7d0a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7d0c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7d0e:	bf00      	nop
    7d10:	bf00      	nop
    7d12:	bf00      	nop
    7d14:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d16:	6053      	str	r3, [r2, #4]
    7d18:	bf00      	nop
    7d1a:	bf00      	nop
    7d1c:	bf00      	nop
    7d1e:	bf00      	nop
    7d20:	0741      	lsls	r1, r0, #29
    7d22:	f140 8087 	bpl.w	7e34 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d26:	4a1c      	ldr	r2, [pc, #112]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7d28:	2102      	movs	r1, #2
    7d2a:	2304      	movs	r3, #4
    7d2c:	6011      	str	r1, [r2, #0]
    7d2e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7d30:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7d32:	bf00      	nop
    7d34:	bf00      	nop
    7d36:	bf00      	nop
    7d38:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d3a:	6053      	str	r3, [r2, #4]
    7d3c:	bf00      	nop
    7d3e:	bf00      	nop
    7d40:	bf00      	nop
    7d42:	bf00      	nop
    7d44:	0782      	lsls	r2, r0, #30
    7d46:	f140 8088 	bpl.w	7e5a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d4a:	4a13      	ldr	r2, [pc, #76]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    7d4c:	2102      	movs	r1, #2
    7d4e:	2304      	movs	r3, #4
    7d50:	6011      	str	r1, [r2, #0]
    7d52:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7d54:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7d56:	bf00      	nop
    7d58:	bf00      	nop
    7d5a:	bf00      	nop
    7d5c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d5e:	6053      	str	r3, [r2, #4]
    7d60:	bf00      	nop
    7d62:	bf00      	nop
    7d64:	bf00      	nop
    7d66:	bf00      	nop
    7d68:	07c3      	lsls	r3, r0, #31
    7d6a:	f100 8089 	bmi.w	7e80 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    7d6e:	4b09      	ldr	r3, [pc, #36]	; (7d94 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d70:	4909      	ldr	r1, [pc, #36]	; (7d98 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d72:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d74:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d76:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d78:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7d7a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7d7c:	bf00      	nop
    7d7e:	bf00      	nop
    7d80:	bf00      	nop
    7d82:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7d84:	601a      	str	r2, [r3, #0]
    7d86:	bf00      	nop
    7d88:	bf00      	nop
    7d8a:	bf00      	nop
    7d8c:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    7d8e:	bc10      	pop	{r4}
    7d90:	4770      	bx	lr
    7d92:	bf00      	nop
    7d94:	400ff0c8 	.word	0x400ff0c8
    7d98:	400ff0c4 	.word	0x400ff0c4
    7d9c:	4b49      	ldr	r3, [pc, #292]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7d9e:	494a      	ldr	r1, [pc, #296]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7da0:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7da2:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7da4:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7da6:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7da8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7daa:	bf00      	nop
    7dac:	bf00      	nop
    7dae:	bf00      	nop
    7db0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7db2:	601a      	str	r2, [r3, #0]
    7db4:	bf00      	nop
    7db6:	bf00      	nop
    7db8:	bf00      	nop
    7dba:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    7dbc:	0682      	lsls	r2, r0, #26
    7dbe:	f53f af7c 	bmi.w	7cba <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    7dc2:	4b40      	ldr	r3, [pc, #256]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7dc4:	4940      	ldr	r1, [pc, #256]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7dc6:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7dc8:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7dca:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7dcc:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7dce:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7dd0:	bf00      	nop
    7dd2:	bf00      	nop
    7dd4:	bf00      	nop
    7dd6:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7dd8:	601a      	str	r2, [r3, #0]
    7dda:	bf00      	nop
    7ddc:	bf00      	nop
    7dde:	bf00      	nop
    7de0:	bf00      	nop
    7de2:	06c3      	lsls	r3, r0, #27
    7de4:	f53f af7b 	bmi.w	7cde <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    7de8:	4b36      	ldr	r3, [pc, #216]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7dea:	4937      	ldr	r1, [pc, #220]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7dec:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7dee:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7df0:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7df2:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7df4:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7df6:	bf00      	nop
    7df8:	bf00      	nop
    7dfa:	bf00      	nop
    7dfc:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7dfe:	601a      	str	r2, [r3, #0]
    7e00:	bf00      	nop
    7e02:	bf00      	nop
    7e04:	bf00      	nop
    7e06:	bf00      	nop
    7e08:	0704      	lsls	r4, r0, #28
    7e0a:	f53f af7a 	bmi.w	7d02 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    7e0e:	4b2d      	ldr	r3, [pc, #180]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e10:	492d      	ldr	r1, [pc, #180]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e12:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e14:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e16:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e18:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7e1a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7e1c:	bf00      	nop
    7e1e:	bf00      	nop
    7e20:	bf00      	nop
    7e22:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e24:	601a      	str	r2, [r3, #0]
    7e26:	bf00      	nop
    7e28:	bf00      	nop
    7e2a:	bf00      	nop
    7e2c:	bf00      	nop
    7e2e:	0741      	lsls	r1, r0, #29
    7e30:	f53f af79 	bmi.w	7d26 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    7e34:	4b23      	ldr	r3, [pc, #140]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e36:	4924      	ldr	r1, [pc, #144]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e38:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e3a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e3c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e3e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7e40:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7e42:	bf00      	nop
    7e44:	bf00      	nop
    7e46:	bf00      	nop
    7e48:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e4a:	601a      	str	r2, [r3, #0]
    7e4c:	bf00      	nop
    7e4e:	bf00      	nop
    7e50:	bf00      	nop
    7e52:	bf00      	nop
    7e54:	0782      	lsls	r2, r0, #30
    7e56:	f53f af78 	bmi.w	7d4a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    7e5a:	4b1a      	ldr	r3, [pc, #104]	; (7ec4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e5c:	491a      	ldr	r1, [pc, #104]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e5e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e60:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e62:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e64:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7e66:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7e68:	bf00      	nop
    7e6a:	bf00      	nop
    7e6c:	bf00      	nop
    7e6e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e70:	601a      	str	r2, [r3, #0]
    7e72:	bf00      	nop
    7e74:	bf00      	nop
    7e76:	bf00      	nop
    7e78:	bf00      	nop
    7e7a:	07c3      	lsls	r3, r0, #31
    7e7c:	f57f af77 	bpl.w	7d6e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7e80:	4a11      	ldr	r2, [pc, #68]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    7e82:	2102      	movs	r1, #2
    7e84:	2304      	movs	r3, #4
    7e86:	6011      	str	r1, [r2, #0]
    7e88:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7e8a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7e8c:	bf00      	nop
    7e8e:	bf00      	nop
    7e90:	bf00      	nop
    7e92:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7e94:	6053      	str	r3, [r2, #4]
    7e96:	bf00      	nop
    7e98:	bf00      	nop
    7e9a:	bf00      	nop
    7e9c:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    7e9e:	bc10      	pop	{r4}
    7ea0:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    7ea2:	4a09      	ldr	r2, [pc, #36]	; (7ec8 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    7ea4:	2102      	movs	r1, #2
    7ea6:	2304      	movs	r3, #4
    7ea8:	6011      	str	r1, [r2, #0]
    7eaa:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    7eac:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    7eae:	bf00      	nop
    7eb0:	bf00      	nop
    7eb2:	bf00      	nop
    7eb4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    7eb6:	6053      	str	r3, [r2, #4]
    7eb8:	bf00      	nop
    7eba:	bf00      	nop
    7ebc:	bf00      	nop
    7ebe:	bf00      	nop
    7ec0:	e6e6      	b.n	7c90 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    7ec2:	bf00      	nop
    7ec4:	400ff0c8 	.word	0x400ff0c8
    7ec8:	400ff0c4 	.word	0x400ff0c4

00007ecc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    7ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ed0:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    7ed2:	6980      	ldr	r0, [r0, #24]
    7ed4:	b081      	sub	sp, #4
    7ed6:	460c      	mov	r4, r1
    7ed8:	b150      	cbz	r0, 7ef0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    7eda:	6803      	ldr	r3, [r0, #0]
    7edc:	4a46      	ldr	r2, [pc, #280]	; (7ff8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    7ede:	681b      	ldr	r3, [r3, #0]
    7ee0:	4293      	cmp	r3, r2
    7ee2:	f040 8087 	bne.w	7ff4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    7ee6:	6842      	ldr	r2, [r0, #4]
    7ee8:	7b01      	ldrb	r1, [r0, #12]
    7eea:	7813      	ldrb	r3, [r2, #0]
    7eec:	430b      	orrs	r3, r1
    7eee:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    7ef0:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    7ef2:	7d27      	ldrb	r7, [r4, #20]
    7ef4:	f894 8013 	ldrb.w	r8, [r4, #19]
    7ef8:	f894 9012 	ldrb.w	r9, [r4, #18]
    7efc:	f7ff feb4 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f00:	2000      	movs	r0, #0
    7f02:	f7ff feb1 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f06:	2000      	movs	r0, #0
    7f08:	f7ff feae 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f0c:	2000      	movs	r0, #0
    7f0e:	f7ff feab 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    7f12:	68a3      	ldr	r3, [r4, #8]
    7f14:	2b00      	cmp	r3, #0
    7f16:	dd44      	ble.n	7fa2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    7f18:	6822      	ldr	r2, [r4, #0]
    7f1a:	f109 0901 	add.w	r9, r9, #1
    7f1e:	f108 0801 	add.w	r8, r8, #1
    7f22:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    7f24:	69a1      	ldr	r1, [r4, #24]
    7f26:	1853      	adds	r3, r2, r1
    7f28:	5c56      	ldrb	r6, [r2, r1]
    7f2a:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    7f2c:	f893 b002 	ldrb.w	fp, [r3, #2]
    7f30:	fb08 f505 	mul.w	r5, r8, r5
    7f34:	122d      	asrs	r5, r5, #8
    7f36:	fb07 fb0b 	mul.w	fp, r7, fp
    7f3a:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    7f3e:	022d      	lsls	r5, r5, #8
    7f40:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    7f42:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    7f46:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    7f48:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    7f4c:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    7f4e:	4335      	orrs	r5, r6
    7f50:	f7ff fe8a 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f54:	b2ad      	uxth	r5, r5
    7f56:	fa5f f08b 	uxtb.w	r0, fp
    7f5a:	f7ff fe85 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f5e:	0a28      	lsrs	r0, r5, #8
    7f60:	f7ff fe82 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7f64:	b2e8      	uxtb	r0, r5
    7f66:	f7ff fe7f 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    7f6a:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    7f6c:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    7f6e:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    7f70:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    7f74:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    7f76:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    7f7a:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    7f7e:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    7f80:	f994 2015 	ldrsb.w	r2, [r4, #21]
    7f84:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    7f86:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    7f8a:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    7f8e:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    7f92:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    7f94:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    7f96:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    7f98:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    7f9a:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    7f9c:	6022      	str	r2, [r4, #0]
    7f9e:	60a3      	str	r3, [r4, #8]
    7fa0:	dcc0      	bgt.n	7f24 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    7fa2:	6864      	ldr	r4, [r4, #4]
    7fa4:	2c00      	cmp	r4, #0
    7fa6:	bfb8      	it	lt
    7fa8:	341f      	addlt	r4, #31
    7faa:	1164      	asrs	r4, r4, #5
    7fac:	20ff      	movs	r0, #255	; 0xff
    7fae:	f7ff fe5b 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7fb2:	2000      	movs	r0, #0
    7fb4:	f7ff fe58 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7fb8:	2000      	movs	r0, #0
    7fba:	f7ff fe55 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7fbe:	3c01      	subs	r4, #1
    7fc0:	2000      	movs	r0, #0
    7fc2:	f7ff fe51 	bl	7c68 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    7fc6:	1c63      	adds	r3, r4, #1
    7fc8:	d1f0      	bne.n	7fac <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    7fca:	f8da 0018 	ldr.w	r0, [sl, #24]
    7fce:	b150      	cbz	r0, 7fe6 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    7fd0:	6803      	ldr	r3, [r0, #0]
    7fd2:	4a0a      	ldr	r2, [pc, #40]	; (7ffc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    7fd4:	685b      	ldr	r3, [r3, #4]
    7fd6:	4293      	cmp	r3, r2
    7fd8:	d108      	bne.n	7fec <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    7fda:	6842      	ldr	r2, [r0, #4]
    7fdc:	7b01      	ldrb	r1, [r0, #12]
    7fde:	7813      	ldrb	r3, [r2, #0]
    7fe0:	ea23 0301 	bic.w	r3, r3, r1
    7fe4:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    7fe6:	b001      	add	sp, #4
    7fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fec:	b001      	add	sp, #4
    7fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ff2:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    7ff4:	4798      	blx	r3
    7ff6:	e77b      	b.n	7ef0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    7ff8:	00000475 	.word	0x00000475
    7ffc:	00000481 	.word	0x00000481

00008000 <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    8000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    8004:	4bde      	ldr	r3, [pc, #888]	; (8380 <_GLOBAL__sub_I_ib_jul01_gp+0x380>)
    8006:	4adf      	ldr	r2, [pc, #892]	; (8384 <_GLOBAL__sub_I_ib_jul01_gp+0x384>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    8008:	48df      	ldr	r0, [pc, #892]	; (8388 <_GLOBAL__sub_I_ib_jul01_gp+0x388>)
    800a:	b09f      	sub	sp, #124	; 0x7c
    800c:	2400      	movs	r4, #0
    800e:	2501      	movs	r5, #1
    8010:	210f      	movs	r1, #15
    8012:	f04f 36ff 	mov.w	r6, #4294967295
    8016:	f883 11c3 	strb.w	r1, [r3, #451]	; 0x1c3
    801a:	f883 61c2 	strb.w	r6, [r3, #450]	; 0x1c2
    801e:	f883 51c4 	strb.w	r5, [r3, #452]	; 0x1c4
    8022:	f883 51c5 	strb.w	r5, [r3, #453]	; 0x1c5
    8026:	f883 5227 	strb.w	r5, [r3, #551]	; 0x227
    802a:	f883 5229 	strb.w	r5, [r3, #553]	; 0x229
    802e:	f883 422d 	strb.w	r4, [r3, #557]	; 0x22d
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    8032:	f04f 0305 	mov.w	r3, #5
    8036:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    803a:	f04f 0304 	mov.w	r3, #4
    803e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    8042:	f04f 0309 	mov.w	r3, #9
    8046:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    804a:	f04f 030b 	mov.w	r3, #11
    804e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    8052:	f04f 030d 	mov.w	r3, #13
    8056:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    805a:	f04f 0310 	mov.w	r3, #16
    805e:	f04f 0903 	mov.w	r9, #3
    8062:	f04f 0b02 	mov.w	fp, #2
    8066:	2707      	movs	r7, #7
    8068:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    806c:	f04f 0312 	mov.w	r3, #18
    8070:	f882 61c2 	strb.w	r6, [r2, #450]	; 0x1c2
    8074:	f882 11c3 	strb.w	r1, [r2, #451]	; 0x1c3
    8078:	f882 51c4 	strb.w	r5, [r2, #452]	; 0x1c4
    807c:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
    8080:	f882 5227 	strb.w	r5, [r2, #551]	; 0x227
    8084:	f882 5229 	strb.w	r5, [r2, #553]	; 0x229
    8088:	f882 422d 	strb.w	r4, [r2, #557]	; 0x22d
    808c:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    8090:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    8094:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    8098:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    809c:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    80a0:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    80a4:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    80a8:	f88d 9041 	strb.w	r9, [sp, #65]	; 0x41
    80ac:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
    80b0:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    80b4:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    80b8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    80bc:	f04f 0317 	mov.w	r3, #23
    80c0:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    80c4:	f04f 031c 	mov.w	r3, #28
    80c8:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    80cc:	f04f 0326 	mov.w	r3, #38	; 0x26
    80d0:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
    80d4:	f04f 0331 	mov.w	r3, #49	; 0x31
    80d8:	f88d 3066 	strb.w	r3, [sp, #102]	; 0x66
    80dc:	f04f 033b 	mov.w	r3, #59	; 0x3b
    80e0:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    80e4:	f04f 0346 	mov.w	r3, #70	; 0x46
    80e8:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
    80ec:	f04f 0355 	mov.w	r3, #85	; 0x55
    80f0:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    80f4:	f06f 0355 	mvn.w	r3, #85	; 0x55
    80f8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    80fc:	f04f 0350 	mov.w	r3, #80	; 0x50
    8100:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
    8104:	ab1d      	add	r3, sp, #116	; 0x74
    8106:	930c      	str	r3, [sp, #48]	; 0x30
    8108:	ab1c      	add	r3, sp, #112	; 0x70
    810a:	f04f 0814 	mov.w	r8, #20
    810e:	f04f 0a19 	mov.w	sl, #25
    8112:	f04f 0c4b 	mov.w	ip, #75	; 0x4b
    8116:	f04f 0e28 	mov.w	lr, #40	; 0x28
    811a:	930b      	str	r3, [sp, #44]	; 0x2c
    811c:	ae19      	add	r6, sp, #100	; 0x64
    811e:	ab1b      	add	r3, sp, #108	; 0x6c
    8120:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    8124:	f88d e074 	strb.w	lr, [sp, #116]	; 0x74
    8128:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    812c:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    8130:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    8134:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    8138:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    813c:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    8140:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    8144:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    8148:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    814c:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    8150:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    8154:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    8158:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    815c:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    8160:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    8164:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    8168:	f88d 8052 	strb.w	r8, [sp, #82]	; 0x52
    816c:	f88d 8070 	strb.w	r8, [sp, #112]	; 0x70
    8170:	f88d a05a 	strb.w	sl, [sp, #90]	; 0x5a
    8174:	930a      	str	r3, [sp, #40]	; 0x28
    8176:	9608      	str	r6, [sp, #32]
    8178:	ae18      	add	r6, sp, #96	; 0x60
    817a:	9607      	str	r6, [sp, #28]
    817c:	ae17      	add	r6, sp, #92	; 0x5c
    817e:	9606      	str	r6, [sp, #24]
    8180:	ae16      	add	r6, sp, #88	; 0x58
    8182:	9605      	str	r6, [sp, #20]
    8184:	ae15      	add	r6, sp, #84	; 0x54
    8186:	9604      	str	r6, [sp, #16]
    8188:	ae14      	add	r6, sp, #80	; 0x50
    818a:	9603      	str	r6, [sp, #12]
    818c:	ae13      	add	r6, sp, #76	; 0x4c
    818e:	9602      	str	r6, [sp, #8]
    8190:	ae12      	add	r6, sp, #72	; 0x48
    8192:	aa1a      	add	r2, sp, #104	; 0x68
    8194:	9601      	str	r6, [sp, #4]
    8196:	ae11      	add	r6, sp, #68	; 0x44
    8198:	ab10      	add	r3, sp, #64	; 0x40
    819a:	9209      	str	r2, [sp, #36]	; 0x24
    819c:	a90e      	add	r1, sp, #56	; 0x38
    819e:	aa0f      	add	r2, sp, #60	; 0x3c
    81a0:	9600      	str	r6, [sp, #0]
    81a2:	f7f8 fb39 	bl	818 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    81a6:	f04f 0305 	mov.w	r3, #5
    81aa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    81ae:	f04f 0304 	mov.w	r3, #4
    81b2:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    81b6:	f04f 0309 	mov.w	r3, #9
    81ba:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    81be:	f04f 030b 	mov.w	r3, #11
    81c2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    81c6:	f04f 030d 	mov.w	r3, #13
    81ca:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    81ce:	f04f 0310 	mov.w	r3, #16
    81d2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    81d6:	f04f 0312 	mov.w	r3, #18
    81da:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    81de:	f04f 0317 	mov.w	r3, #23
    81e2:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
    81e6:	f04f 0226 	mov.w	r2, #38	; 0x26
    81ea:	f04f 031c 	mov.w	r3, #28
    81ee:	f04f 0631 	mov.w	r6, #49	; 0x31
    81f2:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    81f6:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    81fa:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    81fe:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    8202:	f88d 9041 	strb.w	r9, [sp, #65]	; 0x41
    8206:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    820a:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
    820e:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    8212:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    8216:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    821a:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    821e:	f88d 8052 	strb.w	r8, [sp, #82]	; 0x52
    8222:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    8226:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    822a:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    822e:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    8232:	f88d a05a 	strb.w	sl, [sp, #90]	; 0x5a
    8236:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    823a:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    823e:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    8242:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    8246:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    824a:	f88d b049 	strb.w	fp, [sp, #73]	; 0x49
    824e:	f88d b04d 	strb.w	fp, [sp, #77]	; 0x4d
    8252:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    8256:	f88d 6066 	strb.w	r6, [sp, #102]	; 0x66
    825a:	f04f 063b 	mov.w	r6, #59	; 0x3b
    825e:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
    8262:	f04f 0646 	mov.w	r6, #70	; 0x46
    8266:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    826a:	ae1d      	add	r6, sp, #116	; 0x74
    826c:	960c      	str	r6, [sp, #48]	; 0x30
    826e:	ae1c      	add	r6, sp, #112	; 0x70
    8270:	960b      	str	r6, [sp, #44]	; 0x2c
    8272:	ae1b      	add	r6, sp, #108	; 0x6c
    8274:	960a      	str	r6, [sp, #40]	; 0x28
    8276:	ae1a      	add	r6, sp, #104	; 0x68
    8278:	9609      	str	r6, [sp, #36]	; 0x24
    827a:	ae19      	add	r6, sp, #100	; 0x64
    827c:	a914      	add	r1, sp, #80	; 0x50
    827e:	9608      	str	r6, [sp, #32]
    8280:	ae18      	add	r6, sp, #96	; 0x60
    8282:	9103      	str	r1, [sp, #12]
    8284:	9607      	str	r6, [sp, #28]
    8286:	a913      	add	r1, sp, #76	; 0x4c
    8288:	ae17      	add	r6, sp, #92	; 0x5c
    828a:	9102      	str	r1, [sp, #8]
    828c:	9606      	str	r6, [sp, #24]
    828e:	a912      	add	r1, sp, #72	; 0x48
    8290:	ae16      	add	r6, sp, #88	; 0x58
    8292:	9101      	str	r1, [sp, #4]
    8294:	9605      	str	r6, [sp, #20]
    8296:	a911      	add	r1, sp, #68	; 0x44
    8298:	ae15      	add	r6, sp, #84	; 0x54
    829a:	ab10      	add	r3, sp, #64	; 0x40
    829c:	aa0f      	add	r2, sp, #60	; 0x3c
    829e:	9100      	str	r1, [sp, #0]
    82a0:	255f      	movs	r5, #95	; 0x5f
    82a2:	a90e      	add	r1, sp, #56	; 0x38
    82a4:	f04f 0ebe 	mov.w	lr, #190	; 0xbe
    82a8:	9604      	str	r6, [sp, #16]
    82aa:	2752      	movs	r7, #82	; 0x52
    82ac:	f04f 060c 	mov.w	r6, #12
    82b0:	4836      	ldr	r0, [pc, #216]	; (838c <_GLOBAL__sub_I_ib_jul01_gp+0x38c>)
    82b2:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    82b6:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    82ba:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    82be:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    82c2:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    82c6:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    82ca:	f88d a074 	strb.w	sl, [sp, #116]	; 0x74
    82ce:	f88d 6070 	strb.w	r6, [sp, #112]	; 0x70
    82d2:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    82d6:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    82da:	f88d 7072 	strb.w	r7, [sp, #114]	; 0x72
    82de:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    82e2:	f7f8 fa99 	bl	818 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    82e6:	200e      	movs	r0, #14
    82e8:	f04f 0305 	mov.w	r3, #5
    82ec:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    82f0:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    82f4:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    82f8:	f04f 0309 	mov.w	r3, #9
    82fc:	f04f 0006 	mov.w	r0, #6
    8300:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    8304:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    8308:	f04f 030b 	mov.w	r3, #11
    830c:	f04f 0027 	mov.w	r0, #39	; 0x27
    8310:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    8314:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    8318:	f04f 030c 	mov.w	r3, #12
    831c:	f04f 002d 	mov.w	r0, #45	; 0x2d
    8320:	2520      	movs	r5, #32
    8322:	2640      	movs	r6, #64	; 0x40
    8324:	2708      	movs	r7, #8
    8326:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    832a:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    832e:	f04f 0a1a 	mov.w	sl, #26
    8332:	f04f 0c33 	mov.w	ip, #51	; 0x33
    8336:	f04f 0e39 	mov.w	lr, #57	; 0x39
    833a:	f04f 0310 	mov.w	r3, #16
    833e:	f04f 0050 	mov.w	r0, #80	; 0x50
    8342:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    8346:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    834a:	f88d 903d 	strb.w	r9, [sp, #61]	; 0x3d
    834e:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    8352:	f88d 8042 	strb.w	r8, [sp, #66]	; 0x42
    8356:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    835a:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    835e:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    8362:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    8366:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    836a:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    836e:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    8372:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    8376:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    837a:	f88d 8061 	strb.w	r8, [sp, #97]	; 0x61
    837e:	e007      	b.n	8390 <_GLOBAL__sub_I_ib_jul01_gp+0x390>
    8380:	1fff8c88 	.word	0x1fff8c88
    8384:	1fff95ec 	.word	0x1fff95ec
    8388:	1fff9520 	.word	0x1fff9520
    838c:	1fff9550 	.word	0x1fff9550
    8390:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    8394:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    8398:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
    839c:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    83a0:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    83a4:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
    83a8:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    83ac:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    83b0:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    83b4:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    83b8:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    83bc:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    83c0:	f04f 0410 	mov.w	r4, #16
    83c4:	f04f 0970 	mov.w	r9, #112	; 0x70
    83c8:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    83cc:	ac1d      	add	r4, sp, #116	; 0x74
    83ce:	940c      	str	r4, [sp, #48]	; 0x30
    83d0:	eb0d 0409 	add.w	r4, sp, r9
    83d4:	940b      	str	r4, [sp, #44]	; 0x2c
    83d6:	ac1b      	add	r4, sp, #108	; 0x6c
    83d8:	940a      	str	r4, [sp, #40]	; 0x28
    83da:	ac1a      	add	r4, sp, #104	; 0x68
    83dc:	2760      	movs	r7, #96	; 0x60
    83de:	a814      	add	r0, sp, #80	; 0x50
    83e0:	9409      	str	r4, [sp, #36]	; 0x24
    83e2:	ac19      	add	r4, sp, #100	; 0x64
    83e4:	9003      	str	r0, [sp, #12]
    83e6:	9408      	str	r4, [sp, #32]
    83e8:	a813      	add	r0, sp, #76	; 0x4c
    83ea:	eb0d 0407 	add.w	r4, sp, r7
    83ee:	9002      	str	r0, [sp, #8]
    83f0:	9407      	str	r4, [sp, #28]
    83f2:	a812      	add	r0, sp, #72	; 0x48
    83f4:	ac17      	add	r4, sp, #92	; 0x5c
    83f6:	9001      	str	r0, [sp, #4]
    83f8:	9406      	str	r4, [sp, #24]
    83fa:	a811      	add	r0, sp, #68	; 0x44
    83fc:	ac16      	add	r4, sp, #88	; 0x58
    83fe:	f04f 3aff 	mov.w	sl, #4294967295
    8402:	f04f 0e18 	mov.w	lr, #24
    8406:	9000      	str	r0, [sp, #0]
    8408:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    840c:	f88d a076 	strb.w	sl, [sp, #118]	; 0x76
    8410:	9405      	str	r4, [sp, #20]
    8412:	eb0d 0306 	add.w	r3, sp, r6
    8416:	aa0f      	add	r2, sp, #60	; 0x3c
    8418:	a90e      	add	r1, sp, #56	; 0x38
    841a:	f04f 0880 	mov.w	r8, #128	; 0x80
    841e:	f04f 0a1c 	mov.w	sl, #28
    8422:	ac15      	add	r4, sp, #84	; 0x54
    8424:	480d      	ldr	r0, [pc, #52]	; (845c <_GLOBAL__sub_I_ib_jul01_gp+0x45c>)
    8426:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
    842a:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    842e:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    8432:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    8436:	9404      	str	r4, [sp, #16]
    8438:	f88d e065 	strb.w	lr, [sp, #101]	; 0x65
    843c:	f88d 7066 	strb.w	r7, [sp, #102]	; 0x66
    8440:	f88d 7075 	strb.w	r7, [sp, #117]	; 0x75
    8444:	f88d 906a 	strb.w	r9, [sp, #106]	; 0x6a
    8448:	f88d 806e 	strb.w	r8, [sp, #110]	; 0x6e
    844c:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    8450:	f7f8 f9e2 	bl	818 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    8454:	b01f      	add	sp, #124	; 0x7c
    8456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    845a:	bf00      	nop
    845c:	1fff9580 	.word	0x1fff9580

00008460 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    8460:	2900      	cmp	r1, #0
    8462:	dd0b      	ble.n	847c <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    8464:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8468:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    846a:	7813      	ldrb	r3, [r2, #0]
    846c:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    846e:	7853      	ldrb	r3, [r2, #1]
    8470:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    8472:	7893      	ldrb	r3, [r2, #2]
    8474:	7083      	strb	r3, [r0, #2]
    8476:	3003      	adds	r0, #3
    8478:	4288      	cmp	r0, r1
    847a:	d1f6      	bne.n	846a <fill_solid(CRGB*, int, CRGB const&)+0xa>
    847c:	4770      	bx	lr
    847e:	bf00      	nop

00008480 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    8480:	b570      	push	{r4, r5, r6, lr}
    8482:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    8484:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    8486:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    8488:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    848a:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    848e:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    8492:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    8496:	dd10      	ble.n	84ba <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    8498:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    849c:	461e      	mov	r6, r3
    849e:	4604      	mov	r4, r0
    84a0:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    84a2:	4621      	mov	r1, r4
    84a4:	a801      	add	r0, sp, #4
    84a6:	f000 faf9 	bl	8a9c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    84aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    84ae:	3403      	adds	r4, #3
    84b0:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    84b2:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    84b4:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    84b8:	d1f3      	bne.n	84a2 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    84ba:	b002      	add	sp, #8
    84bc:	bd70      	pop	{r4, r5, r6, pc}
    84be:	bf00      	nop

000084c0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    84c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    84c4:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    84c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    84c8:	d352      	bcc.n	8570 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    84ca:	f896 e000 	ldrb.w	lr, [r6]
    84ce:	7815      	ldrb	r5, [r2, #0]
    84d0:	7877      	ldrb	r7, [r6, #1]
    84d2:	f896 8002 	ldrb.w	r8, [r6, #2]
    84d6:	7854      	ldrb	r4, [r2, #1]
    84d8:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    84dc:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    84e0:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    84e4:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    84e8:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    84ec:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    84f0:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    84f4:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    84f8:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    84fa:	b3b2      	cbz	r2, 856a <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    84fc:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    8500:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    8504:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    8508:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    850c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    8510:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    8514:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    8516:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    851a:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    851e:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    8522:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    8526:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    852a:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    852e:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    8532:	d818      	bhi.n	8566 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    8534:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    8538:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    853a:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    853c:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    853e:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    8542:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    8546:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    854a:	4475      	add	r5, lr
        g88 += gdelta87;
    854c:	4454      	add	r4, sl
        b88 += bdelta87;
    854e:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    8550:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8552:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    8556:	b2ad      	uxth	r5, r5
        g = rhs.g;
    8558:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    855c:	b2a4      	uxth	r4, r4
        b = rhs.b;
    855e:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    8562:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    8564:	d2e6      	bcs.n	8534 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    8566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    856a:	f04f 0b01 	mov.w	fp, #1
    856e:	e7c7      	b.n	8500 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    8570:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8572:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8574:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    8578:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    857a:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    857c:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    8580:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8584:	7015      	strb	r5, [r2, #0]
    8586:	4619      	mov	r1, r3
    8588:	f886 e000 	strb.w	lr, [r6]
    858c:	464b      	mov	r3, r9
        g = rhs.g;
    858e:	7054      	strb	r4, [r2, #1]
    8590:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    8592:	f882 c002 	strb.w	ip, [r2, #2]
    8596:	f886 8002 	strb.w	r8, [r6, #2]
    859a:	e79f      	b.n	84dc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

0000859c <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    859c:	b309      	cbz	r1, 85e2 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    859e:	b430      	push	{r4, r5}
    85a0:	1e4d      	subs	r5, r1, #1
    85a2:	b2ad      	uxth	r5, r5
    85a4:	43d2      	mvns	r2, r2
    85a6:	3501      	adds	r5, #1
    85a8:	b2d2      	uxtb	r2, r2
    85aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    85ae:	4405      	add	r5, r0
    85b0:	3201      	adds	r2, #1
    85b2:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    85b4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    85b8:	fb02 f303 	mul.w	r3, r2, r3
    85bc:	121b      	asrs	r3, r3, #8
    85be:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    85c2:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    85c4:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    85c6:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    85ca:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    85ce:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    85d0:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    85d2:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    85d4:	7083      	strb	r3, [r0, #2]
    85d6:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    85d8:	4285      	cmp	r5, r0
    85da:	f104 0403 	add.w	r4, r4, #3
    85de:	d1e9      	bne.n	85b4 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    85e0:	bc30      	pop	{r4, r5}
    85e2:	4770      	bx	lr

000085e4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    85e4:	f7ff bfda 	b.w	859c <fade_raw(CRGB*, unsigned short, unsigned char)>

000085e8 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    85e8:	b322      	cbz	r2, 8634 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    85ea:	2aff      	cmp	r2, #255	; 0xff
    85ec:	d023      	beq.n	8636 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    85ee:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    85f0:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    85f2:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    85f4:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    85f6:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    85f8:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    85fa:	43d2      	mvns	r2, r2
    85fc:	fb06 7605 	mla	r6, r6, r5, r7
    8600:	b2d2      	uxtb	r2, r2
    8602:	fb04 6402 	mla	r4, r4, r2, r6
    8606:	f3c4 2407 	ubfx	r4, r4, #8, #8
    860a:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    860c:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    860e:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    8610:	191f      	adds	r7, r3, r4
    8612:	fb04 7405 	mla	r4, r4, r5, r7
    8616:	fb03 4302 	mla	r3, r3, r2, r4
    861a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    861e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    8620:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    8622:	18f1      	adds	r1, r6, r3
    8624:	fb03 1505 	mla	r5, r3, r5, r1
    8628:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    862c:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    862e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8632:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    8634:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8636:	780b      	ldrb	r3, [r1, #0]
    8638:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    863a:	784b      	ldrb	r3, [r1, #1]
    863c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    863e:	788b      	ldrb	r3, [r1, #2]
    8640:	7083      	strb	r3, [r0, #2]
    8642:	4770      	bx	lr

00008644 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    8644:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8646:	780d      	ldrb	r5, [r1, #0]
    8648:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    864a:	784d      	ldrb	r5, [r1, #1]
    864c:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    864e:	7889      	ldrb	r1, [r1, #2]
    8650:	7081      	strb	r1, [r0, #2]
    8652:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    8654:	4611      	mov	r1, r2
    8656:	461a      	mov	r2, r3
    8658:	f7ff ffc6 	bl	85e8 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    865c:	4620      	mov	r0, r4
    865e:	bd38      	pop	{r3, r4, r5, pc}

00008660 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    8660:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    8664:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    8668:	3100      	adds	r1, #0
    866a:	bf18      	it	ne
    866c:	2101      	movne	r1, #1
    866e:	eb01 2123 	add.w	r1, r1, r3, asr #8
    8672:	b2c9      	uxtb	r1, r1
    8674:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    8676:	060a      	lsls	r2, r1, #24
    8678:	b2db      	uxtb	r3, r3
    867a:	d40e      	bmi.n	869a <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    867c:	f001 0140 	and.w	r1, r1, #64	; 0x40
    8680:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    8684:	b919      	cbnz	r1, 868e <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    8686:	7003      	strb	r3, [r0, #0]