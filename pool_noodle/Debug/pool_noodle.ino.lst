
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 5d 95 00 00 15 95 00 00     ... ....].......
      10:	15 95 00 00 15 95 00 00 15 95 00 00 15 95 00 00     ................
      20:	15 95 00 00 15 95 00 00 15 95 00 00 5d 95 00 00     ............]...
      30:	5d 95 00 00 15 95 00 00 89 a9 00 00 8d aa 00 00     ]...............
      40:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      50:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      60:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      70:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      80:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      90:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      a0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      b0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      c0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      d0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      e0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
      f0:	5d 95 00 00 e5 ad 00 00 5d 95 00 00 11 af 00 00     ].......].......
     100:	5d 95 00 00 3d b0 00 00 5d 95 00 00 5d 95 00 00     ]...=...]...]...
     110:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     120:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     130:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     140:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     150:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     160:	5d 95 00 00 a5 99 00 00 5d 95 00 00 5d 95 00 00     ].......]...]...
     170:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     180:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     190:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     1a0:	5d 95 00 00 5d 95 00 00 5d 95 00 00 5d 95 00 00     ]...]...]...]...
     1b0:	5d 95 00 00 5d 95 00 00 5d 95 00 00                 ]...]...]...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f009 f9c8 	bl	9564 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f009 fa1c 	bl	9710 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f009 f98d 	bl	9600 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f009 f97e 	bl	9600 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00b fe80 	bl	c00c <__libc_init_array>

	startup_late_hook();
     30c:	f009 f930 	bl	9570 <startup_late_hook>
	main();
     310:	f00a fbc4 	bl	aa9c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c44 	.word	0x1fff8c44
     33c:	0000ed88 	.word	0x0000ed88
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c44 	.word	0x1fff8c44
     348:	1fffa338 	.word	0x1fffa338
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e30a5eb 	.word	0x5e30a5eb
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c44 	.word	0x1fff8c44
     42c:	00000000 	.word	0x00000000
     430:	0000ed8c 	.word	0x0000ed8c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c48 	.word	0x1fff8c48
     460:	0000ed8c 	.word	0x0000ed8c
     464:	1fff8c44 	.word	0x1fff8c44
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>:
///           that oscillates within a given range.
///           For this function, BPM MUST BE SPECIFIED as
///           a Q8.8 fixed-point value; e.g. 120BPM must be
///           specified as 120*256 = 30720.
///           If you just want to specify "120", use beatsin16 or beatsin8.
LIB8STATIC uint16_t beatsin88( accum88 beats_per_minute_88, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4b18      	ldr	r3, [pc, #96]	; (4f4 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x64>)
     494:	b083      	sub	sp, #12
     496:	681b      	ldr	r3, [r3, #0]
     498:	9301      	str	r3, [sp, #4]
	return ret;
     49a:	9e01      	ldr	r6, [sp, #4]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
     49c:	f44f 738c 	mov.w	r3, #280	; 0x118
     4a0:	fb03 f606 	mul.w	r6, r3, r6
     4a4:	fb00 f006 	mul.w	r0, r0, r6
     4a8:	0c06      	lsrs	r6, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4aa:	0470      	lsls	r0, r6, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4ac:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4b0:	d503      	bpl.n	4ba <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x2a>
     4b2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4b6:	3307      	adds	r3, #7
     4b8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ba:	0a18      	lsrs	r0, r3, #8
     4bc:	4d0e      	ldr	r5, [pc, #56]	; (4f8 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x68>)
    uint8_t  m   = slope[section];
     4be:	4c0f      	ldr	r4, [pc, #60]	; (4fc <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x6c>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4c0:	5c24      	ldrb	r4, [r4, r0]
     4c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
     4c6:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4ca:	fb04 0405 	mla	r4, r4, r5, r0

    if( theta & 0x8000 ) y = -y;
     4ce:	0433      	lsls	r3, r6, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d0:	b2a4      	uxth	r4, r4

    if( theta & 0x8000 ) y = -y;
     4d2:	bf48      	it	mi
     4d4:	4264      	negmi	r4, r4
     4d6:	b224      	sxth	r4, r4
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    return result;
     4d8:	1a53      	subs	r3, r2, r1
     4da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4de:	b29a      	uxth	r2, r3
     4e0:	b2a3      	uxth	r3, r4
     4e2:	fb02 3303 	mla	r3, r2, r3, r3
     4e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     4ea:	b280      	uxth	r0, r0
     4ec:	b003      	add	sp, #12
     4ee:	bc70      	pop	{r4, r5, r6}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	1fffa074 	.word	0x1fffa074
     4f8:	0000d05c 	.word	0x0000d05c
     4fc:	0000dbc0 	.word	0x0000dbc0

00000500 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     500:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     502:	2101      	movs	r1, #1
     504:	4604      	mov	r4, r0
     506:	200e      	movs	r0, #14
     508:	f009 f88c 	bl	9624 <pinMode>
     50c:	2007      	movs	r0, #7
     50e:	2101      	movs	r1, #1
     510:	f009 f888 	bl	9624 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     514:	69a0      	ldr	r0, [r4, #24]
     516:	b158      	cbz	r0, 530 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     518:	6803      	ldr	r3, [r0, #0]
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     51c:	685b      	ldr	r3, [r3, #4]
     51e:	4293      	cmp	r3, r2
     520:	d107      	bne.n	532 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     522:	6842      	ldr	r2, [r0, #4]
     524:	7b01      	ldrb	r1, [r0, #12]
     526:	7813      	ldrb	r3, [r2, #0]
     528:	ea23 0301 	bic.w	r3, r3, r1
     52c:	7013      	strb	r3, [r2, #0]
     52e:	bd10      	pop	{r4, pc}
     530:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     536:	4718      	bx	r3
     538:	00000481 	.word	0x00000481

0000053c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     540:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     542:	6805      	ldr	r5, [r0, #0]
     544:	f88d 3004 	strb.w	r3, [sp, #4]
     548:	f88d 3005 	strb.w	r3, [sp, #5]
     54c:	f88d 3006 	strb.w	r3, [sp, #6]
     550:	682e      	ldr	r6, [r5, #0]
     552:	4a37      	ldr	r2, [pc, #220]	; (630 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     554:	f88d 3008 	strb.w	r3, [sp, #8]
     558:	4296      	cmp	r6, r2
     55a:	f88d 3009 	strb.w	r3, [sp, #9]
     55e:	f88d 300a 	strb.w	r3, [sp, #10]
     562:	d15f      	bne.n	624 <CLEDController::clearLeds(int)+0xe8>
     564:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     566:	9104      	str	r1, [sp, #16]
     568:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     56a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     56c:	a801      	add	r0, sp, #4
     56e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     570:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     574:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     578:	f88d 3020 	strb.w	r3, [sp, #32]
     57c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     57e:	d015      	beq.n	5ac <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     580:	f88d 301d 	strb.w	r3, [sp, #29]
     584:	f88d 301c 	strb.w	r3, [sp, #28]
     588:	f88d 301b 	strb.w	r3, [sp, #27]
     58c:	f88d 301a 	strb.w	r3, [sp, #26]
     590:	f88d 3019 	strb.w	r3, [sp, #25]
     594:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     598:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     59a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     59c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     5a2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     5a4:	a903      	add	r1, sp, #12
     5a6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5a8:	b00b      	add	sp, #44	; 0x2c
     5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     5ac:	4a21      	ldr	r2, [pc, #132]	; (634 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5ae:	7813      	ldrb	r3, [r2, #0]
     5b0:	3301      	adds	r3, #1
     5b2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     5b6:	f013 0f01 	tst.w	r3, #1
     5ba:	bf14      	ite	ne
     5bc:	2180      	movne	r1, #128	; 0x80
     5be:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     5c0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     5c2:	079a      	lsls	r2, r3, #30
     5c4:	bf44      	itt	mi
     5c6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     5ca:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     5cc:	075b      	lsls	r3, r3, #29
     5ce:	bf48      	it	mi
     5d0:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     5d4:	3110      	adds	r1, #16
     5d6:	2200      	movs	r2, #0
     5d8:	b2c9      	uxtb	r1, r1
     5da:	f10d 031b 	add.w	r3, sp, #27
     5de:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5e2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     5e6:	b1aa      	cbz	r2, 614 <CLEDController::clearLeds(int)+0xd8>
     5e8:	fb9e f2f2 	sdiv	r2, lr, r2
     5ec:	b2d2      	uxtb	r2, r2
     5ee:	1c50      	adds	r0, r2, #1
     5f0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     5f2:	fb00 1501 	mla	r5, r0, r1, r1
     5f6:	122d      	asrs	r5, r5, #8
     5f8:	7018      	strb	r0, [r3, #0]
     5fa:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     5fc:	b105      	cbz	r5, 600 <CLEDController::clearLeds(int)+0xc4>
     5fe:	3e01      	subs	r6, #1
     600:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     604:	b100      	cbz	r0, 608 <CLEDController::clearLeds(int)+0xcc>
     606:	701a      	strb	r2, [r3, #0]
     608:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     60a:	429f      	cmp	r7, r3
     60c:	d008      	beq.n	620 <CLEDController::clearLeds(int)+0xe4>
     60e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     610:	2a00      	cmp	r2, #0
     612:	d1e9      	bne.n	5e8 <CLEDController::clearLeds(int)+0xac>
     614:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     616:	f803 2c03 	strb.w	r2, [r3, #-3]
     61a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     61c:	429f      	cmp	r7, r3
     61e:	d1f6      	bne.n	60e <CLEDController::clearLeds(int)+0xd2>
     620:	6825      	ldr	r5, [r4, #0]
     622:	e7b9      	b.n	598 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     624:	460a      	mov	r2, r1
     626:	ab02      	add	r3, sp, #8
     628:	a901      	add	r1, sp, #4
     62a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     62c:	b00b      	add	sp, #44	; 0x2c
     62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     630:	000006fd 	.word	0x000006fd
     634:	1fff8c60 	.word	0x1fff8c60

00000638 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     63c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     63e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     640:	789b      	ldrb	r3, [r3, #2]
     642:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     644:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     646:	9101      	str	r1, [sp, #4]
     648:	9202      	str	r2, [sp, #8]
     64a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     64c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     650:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     658:	d017      	beq.n	68a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     65a:	2300      	movs	r3, #0
     65c:	f88d 3015 	strb.w	r3, [sp, #21]
     660:	f88d 3014 	strb.w	r3, [sp, #20]
     664:	f88d 3013 	strb.w	r3, [sp, #19]
     668:	f88d 3012 	strb.w	r3, [sp, #18]
     66c:	f88d 3011 	strb.w	r3, [sp, #17]
     670:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     674:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     676:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     678:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     67a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     67c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     680:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     682:	a901      	add	r1, sp, #4
     684:	4798      	blx	r3
  }
     686:	b009      	add	sp, #36	; 0x24
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     68a:	4a1b      	ldr	r2, [pc, #108]	; (6f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     68c:	7813      	ldrb	r3, [r2, #0]
     68e:	3301      	adds	r3, #1
     690:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     694:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     698:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     69a:	bf14      	ite	ne
     69c:	2280      	movne	r2, #128	; 0x80
     69e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6a0:	0799      	lsls	r1, r3, #30
     6a2:	bf44      	itt	mi
     6a4:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6a8:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6aa:	075b      	lsls	r3, r3, #29
     6ac:	bf48      	it	mi
     6ae:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6b2:	3210      	adds	r2, #16
     6b4:	b2d2      	uxtb	r2, r2
     6b6:	f10d 0313 	add.w	r3, sp, #19
     6ba:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6be:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6c2:	b1ac      	cbz	r4, 6f0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     6c4:	fb9e f4f4 	sdiv	r4, lr, r4
     6c8:	b2e4      	uxtb	r4, r4
     6ca:	1c61      	adds	r1, r4, #1
     6cc:	b2c9      	uxtb	r1, r1
     6ce:	fb01 2502 	mla	r5, r1, r2, r2
     6d2:	122d      	asrs	r5, r5, #8
     6d4:	7019      	strb	r1, [r3, #0]
     6d6:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6d8:	b105      	cbz	r5, 6dc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     6da:	3e01      	subs	r6, #1
     6dc:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6e0:	b101      	cbz	r1, 6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6e2:	701c      	strb	r4, [r3, #0]
     6e4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6e6:	42bb      	cmp	r3, r7
     6e8:	d0c4      	beq.n	674 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     6ea:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ec:	2c00      	cmp	r4, #0
     6ee:	d1e9      	bne.n	6c4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     6f0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6f2:	f803 4c03 	strb.w	r4, [r3, #-3]
     6f6:	e7f5      	b.n	6e4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     6f8:	1fff8c60 	.word	0x1fff8c60

000006fc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fe:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     700:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     702:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     704:	789b      	ldrb	r3, [r3, #2]
     706:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     708:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     70a:	9101      	str	r1, [sp, #4]
     70c:	9202      	str	r2, [sp, #8]
     70e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     710:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     714:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     718:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     71c:	d016      	beq.n	74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71e:	2300      	movs	r3, #0
     720:	f88d 3015 	strb.w	r3, [sp, #21]
     724:	f88d 3014 	strb.w	r3, [sp, #20]
     728:	f88d 3013 	strb.w	r3, [sp, #19]
     72c:	f88d 3012 	strb.w	r3, [sp, #18]
     730:	f88d 3011 	strb.w	r3, [sp, #17]
     734:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73a:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     73c:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73e:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     742:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     744:	a901      	add	r1, sp, #4
     746:	4790      	blx	r2
  }
     748:	b009      	add	sp, #36	; 0x24
     74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     74c:	4a1b      	ldr	r2, [pc, #108]	; (7bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74e:	7813      	ldrb	r3, [r2, #0]
     750:	3301      	adds	r3, #1
     752:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     756:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     75a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     75c:	bf14      	ite	ne
     75e:	2280      	movne	r2, #128	; 0x80
     760:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     762:	0799      	lsls	r1, r3, #30
     764:	bf44      	itt	mi
     766:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     76a:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     76c:	075b      	lsls	r3, r3, #29
     76e:	bf48      	it	mi
     770:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     774:	3210      	adds	r2, #16
     776:	b2d2      	uxtb	r2, r2
     778:	f10d 0313 	add.w	r3, sp, #19
     77c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     780:	f44f 7e80 	mov.w	lr, #256	; 0x100
     784:	b1ac      	cbz	r4, 7b2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     786:	fb9e f4f4 	sdiv	r4, lr, r4
     78a:	b2e4      	uxtb	r4, r4
     78c:	1c61      	adds	r1, r4, #1
     78e:	b2c9      	uxtb	r1, r1
     790:	fb01 2502 	mla	r5, r1, r2, r2
     794:	122d      	asrs	r5, r5, #8
     796:	7019      	strb	r1, [r3, #0]
     798:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     79a:	b105      	cbz	r5, 79e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     79c:	3e01      	subs	r6, #1
     79e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7a2:	b101      	cbz	r1, 7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a4:	701c      	strb	r4, [r3, #0]
     7a6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a8:	42bb      	cmp	r3, r7
     7aa:	d0c5      	beq.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7ac:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ae:	2c00      	cmp	r4, #0
     7b0:	d1e9      	bne.n	786 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7b2:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b4:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b8:	e7f5      	b.n	7a6 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7ba:	bf00      	nop
     7bc:	1fff8c60 	.word	0x1fff8c60

000007c0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4604      	mov	r4, r0
     7c4:	4608      	mov	r0, r1
     7c6:	460d      	mov	r5, r1
     7c8:	f00b fcba 	bl	c140 <strlen>
     7cc:	6823      	ldr	r3, [r4, #0]
     7ce:	4602      	mov	r2, r0
     7d0:	4629      	mov	r1, r5
     7d2:	4620      	mov	r0, r4
     7d4:	685b      	ldr	r3, [r3, #4]
     7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     7da:	4718      	bx	r3

000007dc <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7dc:	b538      	push	{r3, r4, r5, lr}
     7de:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7e2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     7e4:	f00b fcac 	bl	c140 <strlen>
     7e8:	6823      	ldr	r3, [r4, #0]
     7ea:	4602      	mov	r2, r0
     7ec:	4629      	mov	r1, r5
     7ee:	685b      	ldr	r3, [r3, #4]
     7f0:	4620      	mov	r0, r4
     7f2:	4798      	blx	r3
     7f4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     7f6:	4620      	mov	r0, r4
     7f8:	f00a f958 	bl	aaac <Print::println()>
     7fc:	4428      	add	r0, r5
     7fe:	bd38      	pop	{r3, r4, r5, pc}

00000800 <Print::println(unsigned char)>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     800:	b538      	push	{r3, r4, r5, lr}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     802:	220a      	movs	r2, #10
     804:	2300      	movs	r3, #0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     806:	4605      	mov	r5, r0
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     808:	f00a f960 	bl	aacc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     80c:	4604      	mov	r4, r0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     80e:	4628      	mov	r0, r5
     810:	f00a f94c 	bl	aaac <Print::println()>
     814:	4420      	add	r0, r4
     816:	bd38      	pop	{r3, r4, r5, pc}

00000818 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     81c:	780d      	ldrb	r5, [r1, #0]
     81e:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     820:	784d      	ldrb	r5, [r1, #1]
     822:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     824:	7889      	ldrb	r1, [r1, #2]
     826:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     828:	7811      	ldrb	r1, [r2, #0]
     82a:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     82c:	7851      	ldrb	r1, [r2, #1]
     82e:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     830:	7892      	ldrb	r2, [r2, #2]
     832:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     834:	781a      	ldrb	r2, [r3, #0]
     836:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     838:	785a      	ldrb	r2, [r3, #1]
     83a:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     83c:	789b      	ldrb	r3, [r3, #2]
     83e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     842:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     844:	f89a b000 	ldrb.w	fp, [sl]
     848:	f880 b009 	strb.w	fp, [r0, #9]
     84c:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     850:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     854:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     858:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     85a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     85c:	9d10      	ldr	r5, [sp, #64]	; 0x40
     85e:	9911      	ldr	r1, [sp, #68]	; 0x44
     860:	9a12      	ldr	r2, [sp, #72]	; 0x48
     862:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     864:	f89a b001 	ldrb.w	fp, [sl, #1]
     868:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     86c:	f89a a002 	ldrb.w	sl, [sl, #2]
     870:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     874:	f899 a000 	ldrb.w	sl, [r9]
     878:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     87c:	f899 a001 	ldrb.w	sl, [r9, #1]
     880:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     884:	f899 9002 	ldrb.w	r9, [r9, #2]
     888:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     88c:	f898 9000 	ldrb.w	r9, [r8]
     890:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     894:	f898 9001 	ldrb.w	r9, [r8, #1]
     898:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     89c:	f898 8002 	ldrb.w	r8, [r8, #2]
     8a0:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a4:	f89c 8000 	ldrb.w	r8, [ip]
     8a8:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     8ac:	f89c 8001 	ldrb.w	r8, [ip, #1]
     8b0:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     8b4:	f89c c002 	ldrb.w	ip, [ip, #2]
     8b8:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8bc:	f89e c000 	ldrb.w	ip, [lr]
     8c0:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     8c4:	f89e c001 	ldrb.w	ip, [lr, #1]
     8c8:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     8cc:	f89e e002 	ldrb.w	lr, [lr, #2]
     8d0:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d4:	f897 e000 	ldrb.w	lr, [r7]
     8d8:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     8dc:	f897 e001 	ldrb.w	lr, [r7, #1]
     8e0:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     8e4:	78bf      	ldrb	r7, [r7, #2]
     8e6:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8e8:	7837      	ldrb	r7, [r6, #0]
     8ea:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     8ec:	7877      	ldrb	r7, [r6, #1]
     8ee:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     8f0:	78b6      	ldrb	r6, [r6, #2]
     8f2:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8f4:	782e      	ldrb	r6, [r5, #0]
     8f6:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     8f8:	786e      	ldrb	r6, [r5, #1]
     8fa:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     8fc:	78ad      	ldrb	r5, [r5, #2]
     8fe:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     902:	780d      	ldrb	r5, [r1, #0]
     904:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     908:	784d      	ldrb	r5, [r1, #1]
     90a:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     90e:	7889      	ldrb	r1, [r1, #2]
     910:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     914:	7811      	ldrb	r1, [r2, #0]
     916:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     91a:	7851      	ldrb	r1, [r2, #1]
     91c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     920:	7892      	ldrb	r2, [r2, #2]
     922:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     926:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     928:	7812      	ldrb	r2, [r2, #0]
     92a:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     92e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     930:	7852      	ldrb	r2, [r2, #1]
     932:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     936:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     938:	7892      	ldrb	r2, [r2, #2]
     93a:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     93e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     940:	7812      	ldrb	r2, [r2, #0]
     942:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     946:	9a14      	ldr	r2, [sp, #80]	; 0x50
     948:	7852      	ldrb	r2, [r2, #1]
     94a:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     94e:	9a14      	ldr	r2, [sp, #80]	; 0x50
     950:	7892      	ldrb	r2, [r2, #2]
     952:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     956:	781a      	ldrb	r2, [r3, #0]
     958:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     95c:	785a      	ldrb	r2, [r3, #1]
     95e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     962:	789b      	ldrb	r3, [r3, #2]
     964:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000096c <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     970:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     972:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     974:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     976:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     97a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     97c:	3701      	adds	r7, #1
        } while ( u.index != 255);
     97e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     980:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     982:	d1f8      	bne.n	976 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     984:	680b      	ldr	r3, [r1, #0]
     986:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     988:	ea4f 6813 	mov.w	r8, r3, lsr #24
     98c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     990:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     994:	f04f 33ff 	mov.w	r3, #4294967295
     998:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     99a:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     99c:	9305      	str	r3, [sp, #20]
     99e:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9a0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9a4:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9a6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     9aa:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ae:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     9b2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     9b4:	b2f9      	uxtb	r1, r7
     9b6:	f3c5 6507 	ubfx	r5, r5, #24, #8
     9ba:	9103      	str	r1, [sp, #12]
     9bc:	b2e9      	uxtb	r1, r5
     9be:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     9c0:	fa5f f18c 	uxtb.w	r1, ip
     9c4:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     9c6:	9907      	ldr	r1, [sp, #28]
     9c8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9ca:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     9cc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9d0:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     9d4:	d80c      	bhi.n	9f0 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     9d6:	9905      	ldr	r1, [sp, #20]
     9d8:	458c      	cmp	ip, r1
     9da:	dc07      	bgt.n	9ec <CRGBPalette16::operator=(unsigned char const*)+0x80>
     9dc:	290f      	cmp	r1, #15
     9de:	d005      	beq.n	9ec <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     9e0:	3101      	adds	r1, #1
     9e2:	b2c9      	uxtb	r1, r1
     9e4:	428b      	cmp	r3, r1
     9e6:	9102      	str	r1, [sp, #8]
     9e8:	bf38      	it	cc
     9ea:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     9ec:	b259      	sxtb	r1, r3
     9ee:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9f0:	a909      	add	r1, sp, #36	; 0x24
     9f2:	9100      	str	r1, [sp, #0]
     9f4:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f6:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     9fa:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     9fe:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a02:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     a06:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     a0a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     a0e:	f007 fda7 	bl	8560 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a12:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     a14:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a18:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     a1c:	46d1      	mov	r9, sl
     a1e:	d1bf      	bne.n	9a0 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     a20:	9806      	ldr	r0, [sp, #24]
     a22:	b00b      	add	sp, #44	; 0x2c
     a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a28 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     a28:	4b48      	ldr	r3, [pc, #288]	; (b4c <updatePaletteIndex(LEDStruct&)+0x124>)
     a2a:	781b      	ldrb	r3, [r3, #0]
     a2c:	2b00      	cmp	r3, #0
     a2e:	f000 808b 	beq.w	b48 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a36:	b09b      	sub	sp, #108	; 0x6c
     a38:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     a3c:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     a3e:	2300      	movs	r3, #0
     a40:	4a43      	ldr	r2, [pc, #268]	; (b50 <updatePaletteIndex(LEDStruct&)+0x128>)
     a42:	9307      	str	r3, [sp, #28]
     a44:	f8df 910c 	ldr.w	r9, [pc, #268]	; b54 <updatePaletteIndex(LEDStruct&)+0x12c>
     a48:	9009      	str	r0, [sp, #36]	; 0x24
     a4a:	f200 2326 	addw	r3, r0, #550	; 0x226
     a4e:	9208      	str	r2, [sp, #32]
     a50:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a52:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a54:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a58:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a5a:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a5c:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a5e:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a60:	d1f8      	bne.n	a54 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a62:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a66:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a68:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a6c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a70:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     a72:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a76:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     a7a:	2400      	movs	r4, #0
     a7c:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a7e:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a82:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     a86:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a8a:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a8e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a90:	b2f1      	uxtb	r1, r6
     a92:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a96:	9103      	str	r1, [sp, #12]
     a98:	b2e9      	uxtb	r1, r5
     a9a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a9c:	fa5f f18c 	uxtb.w	r1, ip
     aa0:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     aa2:	9906      	ldr	r1, [sp, #24]
     aa4:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     aa6:	aa0c      	add	r2, sp, #48	; 0x30
     aa8:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     aaa:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     aae:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     ab2:	d80c      	bhi.n	ace <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     ab4:	9905      	ldr	r1, [sp, #20]
     ab6:	458c      	cmp	ip, r1
     ab8:	dc07      	bgt.n	aca <updatePaletteIndex(LEDStruct&)+0xa2>
     aba:	290f      	cmp	r1, #15
     abc:	d005      	beq.n	aca <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     abe:	3101      	adds	r1, #1
     ac0:	b2c9      	uxtb	r1, r1
     ac2:	428b      	cmp	r3, r1
     ac4:	9102      	str	r1, [sp, #8]
     ac6:	bf38      	it	cc
     ac8:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     aca:	b259      	sxtb	r1, r3
     acc:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ace:	a90d      	add	r1, sp, #52	; 0x34
     ad0:	9100      	str	r1, [sp, #0]
     ad2:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ad4:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     ad8:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     adc:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ae0:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     ae4:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     ae8:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     aec:	f007 fd38 	bl	8560 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     af0:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     af2:	46d3      	mov	fp, sl
        g = rhs.g;
     af4:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     af8:	f8dd 8010 	ldr.w	r8, [sp, #16]
     afc:	d1bf      	bne.n	a7e <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b00:	aa0e      	add	r2, sp, #56	; 0x38
     b02:	4293      	cmp	r3, r2
     b04:	d018      	beq.n	b38 <updatePaletteIndex(LEDStruct&)+0x110>
     b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b08:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     b0a:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     b0e:	e001      	b.n	b14 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     b10:	42a3      	cmp	r3, r4
     b12:	d011      	beq.n	b38 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     b14:	f812 1b01 	ldrb.w	r1, [r2], #1
     b18:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     b1c:	4288      	cmp	r0, r1
     b1e:	d0f7      	beq.n	b10 <updatePaletteIndex(LEDStruct&)+0xe8>
     b20:	4b0a      	ldr	r3, [pc, #40]	; (b4c <updatePaletteIndex(LEDStruct&)+0x124>)
     b22:	9a07      	ldr	r2, [sp, #28]
     b24:	781b      	ldrb	r3, [r3, #0]
     b26:	3201      	adds	r2, #1
     b28:	4293      	cmp	r3, r2
     b2a:	9207      	str	r2, [sp, #28]
     b2c:	dd09      	ble.n	b42 <updatePaletteIndex(LEDStruct&)+0x11a>
     b2e:	9b08      	ldr	r3, [sp, #32]
     b30:	f853 9f04 	ldr.w	r9, [r3, #4]!
     b34:	9308      	str	r3, [sp, #32]
     b36:	e78c      	b.n	a52 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b3a:	f89d 201c 	ldrb.w	r2, [sp, #28]
     b3e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     b42:	b01b      	add	sp, #108	; 0x6c
     b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b48:	4770      	bx	lr
     b4a:	bf00      	nop
     b4c:	1fff874a 	.word	0x1fff874a
     b50:	0000da04 	.word	0x0000da04
     b54:	0000e5b0 	.word	0x0000e5b0

00000b58 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     b58:	b530      	push	{r4, r5, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b5a:	4d29      	ldr	r5, [pc, #164]	; (c00 <initialize()+0xa8>)
		}
	}
}

// Initialization function
void initialize() {
     b5c:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     b5e:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     b60:	2400      	movs	r4, #0
     b62:	4628      	mov	r0, r5
     b64:	2196      	movs	r1, #150	; 0x96
     b66:	f88d 4004 	strb.w	r4, [sp, #4]
     b6a:	f88d 4005 	strb.w	r4, [sp, #5]
     b6e:	f88d 4006 	strb.w	r4, [sp, #6]
     b72:	f007 fcc5 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     b76:	4923      	ldr	r1, [pc, #140]	; (c04 <initialize()+0xac>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     b78:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     b7c:	f205 10c7 	addw	r0, r5, #455	; 0x1c7
     b80:	f7ff fef4 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     b84:	4920      	ldr	r1, [pc, #128]	; (c08 <initialize()+0xb0>)
     b86:	f205 10f7 	addw	r0, r5, #503	; 0x1f7
     b8a:	f7ff feef 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     b8e:	4628      	mov	r0, r5
     b90:	f7ff ff4a 	bl	a28 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     b94:	4b1d      	ldr	r3, [pc, #116]	; (c0c <initialize()+0xb4>)
     b96:	4a1e      	ldr	r2, [pc, #120]	; (c10 <initialize()+0xb8>)
     b98:	7818      	ldrb	r0, [r3, #0]
     b9a:	f885 022b 	strb.w	r0, [r5, #555]	; 0x22b
     b9e:	4623      	mov	r3, r4
     ba0:	e001      	b.n	ba6 <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     ba2:	2b1a      	cmp	r3, #26
     ba4:	d008      	beq.n	bb8 <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     ba6:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     baa:	4281      	cmp	r1, r0
     bac:	b2dc      	uxtb	r4, r3
     bae:	f103 0301 	add.w	r3, r3, #1
     bb2:	d1f6      	bne.n	ba2 <initialize()+0x4a>
			leds.mode_number = i;
     bb4:	f885 422a 	strb.w	r4, [r5, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     bb8:	4c16      	ldr	r4, [pc, #88]	; (c14 <initialize()+0xbc>)
     bba:	aa01      	add	r2, sp, #4
     bbc:	2300      	movs	r3, #0
     bbe:	4620      	mov	r0, r4
     bc0:	2196      	movs	r1, #150	; 0x96
     bc2:	f88d 3004 	strb.w	r3, [sp, #4]
     bc6:	f88d 3005 	strb.w	r3, [sp, #5]
     bca:	f88d 3006 	strb.w	r3, [sp, #6]
     bce:	f007 fc97 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     bd2:	2301      	movs	r3, #1
	next_leds.current_palette	= bhw3_21_gp;
     bd4:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
     bd8:	490f      	ldr	r1, [pc, #60]	; (c18 <initialize()+0xc0>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     bda:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	next_leds.current_palette	= bhw3_21_gp;
     bde:	f7ff fec5 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= bhw3_30_gp;
     be2:	490e      	ldr	r1, [pc, #56]	; (c1c <initialize()+0xc4>)
     be4:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
     be8:	f7ff fec0 	bl	96c <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     bec:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
     bf0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     bf4:	4620      	mov	r0, r4
     bf6:	f7ff ff17 	bl	a28 <updatePaletteIndex(LEDStruct&)>
}
     bfa:	b003      	add	sp, #12
     bfc:	bd30      	pop	{r4, r5, pc}
     bfe:	bf00      	nop
     c00:	1fff9608 	.word	0x1fff9608
     c04:	0000e8f4 	.word	0x0000e8f4
     c08:	0000e06c 	.word	0x0000e06c
     c0c:	1fff8743 	.word	0x1fff8743
     c10:	1fff8727 	.word	0x1fff8727
     c14:	1fff8c90 	.word	0x1fff8c90
     c18:	0000dd94 	.word	0x0000dd94
     c1c:	0000dfcc 	.word	0x0000dfcc

00000c20 <finish_transition()>:



// Transition functions

void finish_transition() {
     c20:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     c22:	4cef      	ldr	r4, [pc, #956]	; (fe0 <finish_transition()+0x3c0>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c24:	48ef      	ldr	r0, [pc, #956]	; (fe4 <finish_transition()+0x3c4>)



// Transition functions

void finish_transition() {
     c26:	b083      	sub	sp, #12
	in_transition = 0;
     c28:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c2a:	aa01      	add	r2, sp, #4
     c2c:	2196      	movs	r1, #150	; 0x96


// Transition functions

void finish_transition() {
	in_transition = 0;
     c2e:	7023      	strb	r3, [r4, #0]
     c30:	f88d 3004 	strb.w	r3, [sp, #4]
     c34:	f88d 3005 	strb.w	r3, [sp, #5]
     c38:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c3c:	f007 fc60 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
     c40:	4be9      	ldr	r3, [pc, #932]	; (fe8 <finish_transition()+0x3c8>)
     c42:	4aea      	ldr	r2, [pc, #936]	; (fec <finish_transition()+0x3cc>)
     c44:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c48:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     c4c:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     c50:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c54:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     c58:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     c5c:	f803 1c01 	strb.w	r1, [r3, #-1]
     c60:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     c62:	429d      	cmp	r5, r3
     c64:	f102 0203 	add.w	r2, r2, #3
     c68:	d1ee      	bne.n	c48 <finish_transition()+0x28>
     c6a:	48e1      	ldr	r0, [pc, #900]	; (ff0 <finish_transition()+0x3d0>)
     c6c:	4fdd      	ldr	r7, [pc, #884]	; (fe4 <finish_transition()+0x3c4>)
     c6e:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
     c72:	f890 21c5 	ldrb.w	r2, [r0, #453]	; 0x1c5
     c76:	f890 31c6 	ldrb.w	r3, [r0, #454]	; 0x1c6
     c7a:	f890 51c2 	ldrb.w	r5, [r0, #450]	; 0x1c2
     c7e:	f890 41c3 	ldrb.w	r4, [r0, #451]	; 0x1c3
     c82:	f887 11c4 	strb.w	r1, [r7, #452]	; 0x1c4
     c86:	f887 21c5 	strb.w	r2, [r7, #453]	; 0x1c5
     c8a:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
     c8e:	f887 51c2 	strb.w	r5, [r7, #450]	; 0x1c2
     c92:	f887 41c3 	strb.w	r4, [r7, #451]	; 0x1c3
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     c96:	f200 13c7 	addw	r3, r0, #455	; 0x1c7
     c9a:	f207 12c7 	addw	r2, r7, #455	; 0x1c7
     c9e:	f200 11f7 	addw	r1, r0, #503	; 0x1f7
     ca2:	681d      	ldr	r5, [r3, #0]
     ca4:	685c      	ldr	r4, [r3, #4]
     ca6:	6015      	str	r5, [r2, #0]
     ca8:	689d      	ldr	r5, [r3, #8]
     caa:	6054      	str	r4, [r2, #4]
     cac:	68dc      	ldr	r4, [r3, #12]
     cae:	60d4      	str	r4, [r2, #12]
     cb0:	3310      	adds	r3, #16
     cb2:	428b      	cmp	r3, r1
     cb4:	6095      	str	r5, [r2, #8]
     cb6:	f102 0210 	add.w	r2, r2, #16
     cba:	d1f2      	bne.n	ca2 <finish_transition()+0x82>
     cbc:	4bcd      	ldr	r3, [pc, #820]	; (ff4 <finish_transition()+0x3d4>)
     cbe:	4ace      	ldr	r2, [pc, #824]	; (ff8 <finish_transition()+0x3d8>)
     cc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
     cc4:	681d      	ldr	r5, [r3, #0]
     cc6:	685c      	ldr	r4, [r3, #4]
     cc8:	6015      	str	r5, [r2, #0]
     cca:	689d      	ldr	r5, [r3, #8]
     ccc:	6054      	str	r4, [r2, #4]
     cce:	68dc      	ldr	r4, [r3, #12]
     cd0:	60d4      	str	r4, [r2, #12]
     cd2:	3310      	adds	r3, #16
     cd4:	428b      	cmp	r3, r1
     cd6:	6095      	str	r5, [r2, #8]
     cd8:	f102 0210 	add.w	r2, r2, #16
     cdc:	d1f2      	bne.n	cc4 <finish_transition()+0xa4>
     cde:	f890 2227 	ldrb.w	r2, [r0, #551]	; 0x227
     ce2:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
     ce6:	f890 5229 	ldrb.w	r5, [r0, #553]	; 0x229
     cea:	f890 422a 	ldrb.w	r4, [r0, #554]	; 0x22a
     cee:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
     cf2:	f887 2227 	strb.w	r2, [r7, #551]	; 0x227
     cf6:	f887 3228 	strb.w	r3, [r7, #552]	; 0x228
     cfa:	f890 222c 	ldrb.w	r2, [r0, #556]	; 0x22c
     cfe:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
     d02:	f887 5229 	strb.w	r5, [r7, #553]	; 0x229
     d06:	f887 422a 	strb.w	r4, [r7, #554]	; 0x22a
     d0a:	f890 522e 	ldrb.w	r5, [r0, #558]	; 0x22e
     d0e:	f890 422f 	ldrb.w	r4, [r0, #559]	; 0x22f
     d12:	f887 122b 	strb.w	r1, [r7, #555]	; 0x22b
     d16:	f887 222c 	strb.w	r2, [r7, #556]	; 0x22c
     d1a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     d1e:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231
     d22:	f887 322d 	strb.w	r3, [r7, #557]	; 0x22d
     d26:	f890 3232 	ldrb.w	r3, [r0, #562]	; 0x232
     d2a:	f887 522e 	strb.w	r5, [r7, #558]	; 0x22e
     d2e:	f887 422f 	strb.w	r4, [r7, #559]	; 0x22f
     d32:	f890 5233 	ldrb.w	r5, [r0, #563]	; 0x233
     d36:	f890 4234 	ldrb.w	r4, [r0, #564]	; 0x234
     d3a:	f887 1230 	strb.w	r1, [r7, #560]	; 0x230
     d3e:	f887 2231 	strb.w	r2, [r7, #561]	; 0x231
     d42:	f890 1235 	ldrb.w	r1, [r0, #565]	; 0x235
     d46:	f890 2236 	ldrb.w	r2, [r0, #566]	; 0x236
     d4a:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
     d4e:	4bab      	ldr	r3, [pc, #684]	; (ffc <finish_transition()+0x3dc>)
     d50:	f887 4234 	strb.w	r4, [r7, #564]	; 0x234
     d54:	f887 1235 	strb.w	r1, [r7, #565]	; 0x235
     d58:	f887 2236 	strb.w	r2, [r7, #566]	; 0x236
     d5c:	f887 5233 	strb.w	r5, [r7, #563]	; 0x233
     d60:	4aa7      	ldr	r2, [pc, #668]	; (1000 <finish_transition()+0x3e0>)
     d62:	f890 5237 	ldrb.w	r5, [r0, #567]	; 0x237
     d66:	f890 4238 	ldrb.w	r4, [r0, #568]	; 0x238
     d6a:	f890 1239 	ldrb.w	r1, [r0, #569]	; 0x239
     d6e:	f887 5237 	strb.w	r5, [r7, #567]	; 0x237
     d72:	f103 063c 	add.w	r6, r3, #60	; 0x3c
     d76:	f887 4238 	strb.w	r4, [r7, #568]	; 0x238
     d7a:	f887 1239 	strb.w	r1, [r7, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d7e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
     d82:	f812 4c02 	ldrb.w	r4, [r2, #-2]
        b = rhs.b;
     d86:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d8a:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
     d8e:	f803 4c02 	strb.w	r4, [r3, #-2]
        b = rhs.b;
     d92:	f803 1c01 	strb.w	r1, [r3, #-1]
     d96:	3303      	adds	r3, #3
     d98:	429e      	cmp	r6, r3
     d9a:	f102 0203 	add.w	r2, r2, #3
     d9e:	d1ee      	bne.n	d7e <finish_transition()+0x15e>
     da0:	f890 2276 	ldrb.w	r2, [r0, #630]	; 0x276
     da4:	f890 4277 	ldrb.w	r4, [r0, #631]	; 0x277
     da8:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
     dac:	f887 2276 	strb.w	r2, [r7, #630]	; 0x276
     db0:	f890 2279 	ldrb.w	r2, [r0, #633]	; 0x279
     db4:	4b93      	ldr	r3, [pc, #588]	; (1004 <finish_transition()+0x3e4>)
     db6:	f887 4277 	strb.w	r4, [r7, #631]	; 0x277
     dba:	f887 1278 	strb.w	r1, [r7, #632]	; 0x278
     dbe:	f890 427a 	ldrb.w	r4, [r0, #634]	; 0x27a
     dc2:	f890 127b 	ldrb.w	r1, [r0, #635]	; 0x27b
     dc6:	f887 2279 	strb.w	r2, [r7, #633]	; 0x279
     dca:	f890 227c 	ldrb.w	r2, [r0, #636]	; 0x27c
     dce:	f887 427a 	strb.w	r4, [r7, #634]	; 0x27a
     dd2:	f887 127b 	strb.w	r1, [r7, #635]	; 0x27b
     dd6:	f890 427d 	ldrb.w	r4, [r0, #637]	; 0x27d
     dda:	f890 127e 	ldrb.w	r1, [r0, #638]	; 0x27e
     dde:	f887 227c 	strb.w	r2, [r7, #636]	; 0x27c
     de2:	4a89      	ldr	r2, [pc, #548]	; (1008 <finish_transition()+0x3e8>)
     de4:	f887 427d 	strb.w	r4, [r7, #637]	; 0x27d
     de8:	f887 127e 	strb.w	r1, [r7, #638]	; 0x27e
     dec:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     df0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     df4:	f803 1b01 	strb.w	r1, [r3], #1
     df8:	42a3      	cmp	r3, r4
     dfa:	d1f9      	bne.n	df0 <finish_transition()+0x1d0>
     dfc:	4983      	ldr	r1, [pc, #524]	; (100c <finish_transition()+0x3ec>)
     dfe:	f103 044b 	add.w	r4, r3, #75	; 0x4b
     e02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     e06:	f803 2b01 	strb.w	r2, [r3], #1
     e0a:	42a3      	cmp	r3, r4
     e0c:	4a75      	ldr	r2, [pc, #468]	; (fe4 <finish_transition()+0x3c4>)
     e0e:	d1f8      	bne.n	e02 <finish_transition()+0x1e2>
     e10:	f890 3315 	ldrb.w	r3, [r0, #789]	; 0x315
     e14:	f890 6316 	ldrb.w	r6, [r0, #790]	; 0x316
     e18:	f890 5317 	ldrb.w	r5, [r0, #791]	; 0x317
     e1c:	f890 4318 	ldrb.w	r4, [r0, #792]	; 0x318
     e20:	f890 1319 	ldrb.w	r1, [r0, #793]	; 0x319
     e24:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
     e28:	f890 331a 	ldrb.w	r3, [r0, #794]	; 0x31a
     e2c:	f882 6316 	strb.w	r6, [r2, #790]	; 0x316
     e30:	f882 5317 	strb.w	r5, [r2, #791]	; 0x317
     e34:	f8b0 631c 	ldrh.w	r6, [r0, #796]	; 0x31c
     e38:	f8b0 531e 	ldrh.w	r5, [r0, #798]	; 0x31e
     e3c:	f882 4318 	strb.w	r4, [r2, #792]	; 0x318
     e40:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
     e44:	f8b0 4320 	ldrh.w	r4, [r0, #800]	; 0x320
     e48:	f890 1322 	ldrb.w	r1, [r0, #802]	; 0x322
     e4c:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
     e50:	f890 3323 	ldrb.w	r3, [r0, #803]	; 0x323
     e54:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
     e58:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
     e5c:	f890 6324 	ldrb.w	r6, [r0, #804]	; 0x324
     e60:	f890 5325 	ldrb.w	r5, [r0, #805]	; 0x325
     e64:	f8a2 4320 	strh.w	r4, [r2, #800]	; 0x320
     e68:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
     e6c:	f890 4326 	ldrb.w	r4, [r0, #806]	; 0x326
     e70:	f890 1327 	ldrb.w	r1, [r0, #807]	; 0x327
     e74:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
     e78:	f8b0 3328 	ldrh.w	r3, [r0, #808]	; 0x328
     e7c:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
     e80:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
     e84:	f882 4326 	strb.w	r4, [r2, #806]	; 0x326
     e88:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
     e8c:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
     e90:	f8b0 332a 	ldrh.w	r3, [r0, #810]	; 0x32a
     e94:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
     e98:	f8b0 632c 	ldrh.w	r6, [r0, #812]	; 0x32c
     e9c:	f8b0 532e 	ldrh.w	r5, [r0, #814]	; 0x32e
     ea0:	f8b0 4330 	ldrh.w	r4, [r0, #816]	; 0x330
     ea4:	f8b0 1332 	ldrh.w	r1, [r0, #818]	; 0x332
     ea8:	f8b0 3334 	ldrh.w	r3, [r0, #820]	; 0x334
     eac:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
     eb0:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
     eb4:	f8b0 6336 	ldrh.w	r6, [r0, #822]	; 0x336
     eb8:	f8b0 5338 	ldrh.w	r5, [r0, #824]	; 0x338
     ebc:	f8a2 4330 	strh.w	r4, [r2, #816]	; 0x330
     ec0:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
     ec4:	f8b0 433a 	ldrh.w	r4, [r0, #826]	; 0x33a
     ec8:	f8b0 133c 	ldrh.w	r1, [r0, #828]	; 0x33c
     ecc:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
     ed0:	f890 333e 	ldrb.w	r3, [r0, #830]	; 0x33e
     ed4:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
     ed8:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
     edc:	f890 633f 	ldrb.w	r6, [r0, #831]	; 0x33f
     ee0:	f890 5340 	ldrb.w	r5, [r0, #832]	; 0x340
     ee4:	f8a2 433a 	strh.w	r4, [r2, #826]	; 0x33a
     ee8:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
     eec:	f890 4341 	ldrb.w	r4, [r0, #833]	; 0x341
     ef0:	f890 1342 	ldrb.w	r1, [r0, #834]	; 0x342
     ef4:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
     ef8:	f890 3343 	ldrb.w	r3, [r0, #835]	; 0x343
     efc:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
     f00:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
     f04:	f882 4341 	strb.w	r4, [r2, #833]	; 0x341
     f08:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
     f0c:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
     f10:	f890 3344 	ldrb.w	r3, [r0, #836]	; 0x344
     f14:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
     f18:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
     f1c:	f890 5346 	ldrb.w	r5, [r0, #838]	; 0x346
     f20:	f890 4347 	ldrb.w	r4, [r0, #839]	; 0x347
     f24:	f890 1348 	ldrb.w	r1, [r0, #840]	; 0x348
     f28:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
     f2c:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
     f30:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
     f34:	f890 634a 	ldrb.w	r6, [r0, #842]	; 0x34a
     f38:	f890 534b 	ldrb.w	r5, [r0, #843]	; 0x34b
     f3c:	f882 4347 	strb.w	r4, [r2, #839]	; 0x347
     f40:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
     f44:	f890 434c 	ldrb.w	r4, [r0, #844]	; 0x34c
     f48:	f890 134d 	ldrb.w	r1, [r0, #845]	; 0x34d
     f4c:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
     f50:	f890 334e 	ldrb.w	r3, [r0, #846]	; 0x34e
     f54:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
     f58:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
     f5c:	f882 434c 	strb.w	r4, [r2, #844]	; 0x34c
     f60:	f890 5350 	ldrb.w	r5, [r0, #848]	; 0x350
     f64:	f890 4351 	ldrb.w	r4, [r0, #849]	; 0x351
     f68:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
     f6c:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
     f70:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
     f74:	f890 3353 	ldrb.w	r3, [r0, #851]	; 0x353
     f78:	f890 634f 	ldrb.w	r6, [r0, #847]	; 0x34f
     f7c:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
     f80:	f882 4351 	strb.w	r4, [r2, #849]	; 0x351
     f84:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
     f88:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
     f8c:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
     f90:	491f      	ldr	r1, [pc, #124]	; (1010 <finish_transition()+0x3f0>)
     f92:	f890 6354 	ldrb.w	r6, [r0, #852]	; 0x354
     f96:	f890 335d 	ldrb.w	r3, [r0, #861]	; 0x35d
     f9a:	f8d0 5358 	ldr.w	r5, [r0, #856]	; 0x358
     f9e:	f890 435c 	ldrb.w	r4, [r0, #860]	; 0x35c
     fa2:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
     fa6:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
     faa:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
     fae:	f882 435c 	strb.w	r4, [r2, #860]	; 0x35c
     fb2:	f502 7358 	add.w	r3, r2, #864	; 0x360
     fb6:	f502 628a 	add.w	r2, r2, #1104	; 0x450
     fba:	f851 4f04 	ldr.w	r4, [r1, #4]!
     fbe:	f843 4b04 	str.w	r4, [r3], #4
     fc2:	4293      	cmp	r3, r2
     fc4:	d1f9      	bne.n	fba <finish_transition()+0x39a>
     fc6:	4a13      	ldr	r2, [pc, #76]	; (1014 <finish_transition()+0x3f4>)
     fc8:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
     fcc:	f852 1f04 	ldr.w	r1, [r2, #4]!
     fd0:	f843 1b04 	str.w	r1, [r3], #4
     fd4:	42a3      	cmp	r3, r4
     fd6:	d1f9      	bne.n	fcc <finish_transition()+0x3ac>
     fd8:	4a0f      	ldr	r2, [pc, #60]	; (1018 <finish_transition()+0x3f8>)
     fda:	f103 043c 	add.w	r4, r3, #60	; 0x3c
     fde:	e01d      	b.n	101c <finish_transition()+0x3fc>
     fe0:	1fff94c8 	.word	0x1fff94c8
     fe4:	1fff9608 	.word	0x1fff9608
     fe8:	1fff960b 	.word	0x1fff960b
     fec:	1fff8c93 	.word	0x1fff8c93
     ff0:	1fff8c90 	.word	0x1fff8c90
     ff4:	1fff8e87 	.word	0x1fff8e87
     ff8:	1fff97ff 	.word	0x1fff97ff
     ffc:	1fff9845 	.word	0x1fff9845
    1000:	1fff8ecd 	.word	0x1fff8ecd
    1004:	1fff9887 	.word	0x1fff9887
    1008:	1fff8f0e 	.word	0x1fff8f0e
    100c:	1fff8f59 	.word	0x1fff8f59
    1010:	1fff8fec 	.word	0x1fff8fec
    1014:	1fff90dc 	.word	0x1fff90dc
    1018:	1fff91cf 	.word	0x1fff91cf
    101c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1020:	f803 1b01 	strb.w	r1, [r3], #1
    1024:	42a3      	cmp	r3, r4
    1026:	d1f9      	bne.n	101c <finish_transition()+0x3fc>
    1028:	4a3f      	ldr	r2, [pc, #252]	; (1128 <finish_transition()+0x508>)
    102a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    102e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1032:	f843 1b04 	str.w	r1, [r3], #4
    1036:	42a3      	cmp	r3, r4
    1038:	d1f9      	bne.n	102e <finish_transition()+0x40e>
    103a:	4a3c      	ldr	r2, [pc, #240]	; (112c <finish_transition()+0x50c>)
    103c:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
    1040:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1044:	f843 1b04 	str.w	r1, [r3], #4
    1048:	42a3      	cmp	r3, r4
    104a:	4939      	ldr	r1, [pc, #228]	; (1130 <finish_transition()+0x510>)
    104c:	d1f8      	bne.n	1040 <finish_transition()+0x420>
    104e:	f890 575c 	ldrb.w	r5, [r0, #1884]	; 0x75c
    1052:	f890 475d 	ldrb.w	r4, [r0, #1885]	; 0x75d
    1056:	f890 375e 	ldrb.w	r3, [r0, #1886]	; 0x75e
    105a:	f8b0 2760 	ldrh.w	r2, [r0, #1888]	; 0x760
    105e:	f881 575c 	strb.w	r5, [r1, #1884]	; 0x75c
    1062:	f881 475d 	strb.w	r4, [r1, #1885]	; 0x75d
    1066:	f881 375e 	strb.w	r3, [r1, #1886]	; 0x75e
    106a:	f8a1 2760 	strh.w	r2, [r1, #1888]	; 0x760
    106e:	f890 3767 	ldrb.w	r3, [r0, #1895]	; 0x767
    1072:	f8b0 7762 	ldrh.w	r7, [r0, #1890]	; 0x762
    1076:	f890 6764 	ldrb.w	r6, [r0, #1892]	; 0x764
    107a:	f890 5765 	ldrb.w	r5, [r0, #1893]	; 0x765
    107e:	f890 4766 	ldrb.w	r4, [r0, #1894]	; 0x766
    1082:	4a2c      	ldr	r2, [pc, #176]	; (1134 <finish_transition()+0x514>)
    1084:	f881 3767 	strb.w	r3, [r1, #1895]	; 0x767
    1088:	f8a1 7762 	strh.w	r7, [r1, #1890]	; 0x762
    108c:	f881 6764 	strb.w	r6, [r1, #1892]	; 0x764
    1090:	f881 5765 	strb.w	r5, [r1, #1893]	; 0x765
    1094:	f881 4766 	strb.w	r4, [r1, #1894]	; 0x766
    1098:	f501 63ed 	add.w	r3, r1, #1896	; 0x768
    109c:	f501 61f1 	add.w	r1, r1, #1928	; 0x788
    10a0:	f852 0f04 	ldr.w	r0, [r2, #4]!
    10a4:	f843 0b04 	str.w	r0, [r3], #4
    10a8:	428b      	cmp	r3, r1
    10aa:	d1f9      	bne.n	10a0 <finish_transition()+0x480>
    10ac:	4a22      	ldr	r2, [pc, #136]	; (1138 <finish_transition()+0x518>)
    10ae:	f103 0020 	add.w	r0, r3, #32
    10b2:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10b6:	f843 1b04 	str.w	r1, [r3], #4
    10ba:	4283      	cmp	r3, r0
    10bc:	d1f9      	bne.n	10b2 <finish_transition()+0x492>
    10be:	4a1f      	ldr	r2, [pc, #124]	; (113c <finish_transition()+0x51c>)
    10c0:	f103 0020 	add.w	r0, r3, #32
    10c4:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10c8:	f843 1b04 	str.w	r1, [r3], #4
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f9      	bne.n	10c4 <finish_transition()+0x4a4>
    10d0:	4a1b      	ldr	r2, [pc, #108]	; (1140 <finish_transition()+0x520>)
    10d2:	f103 0020 	add.w	r0, r3, #32
    10d6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10da:	f843 1b04 	str.w	r1, [r3], #4
    10de:	4283      	cmp	r3, r0
    10e0:	d1f9      	bne.n	10d6 <finish_transition()+0x4b6>
    10e2:	4a18      	ldr	r2, [pc, #96]	; (1144 <finish_transition()+0x524>)
    10e4:	f103 0020 	add.w	r0, r3, #32
    10e8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10ec:	f843 1b04 	str.w	r1, [r3], #4
    10f0:	4283      	cmp	r3, r0
    10f2:	d1f9      	bne.n	10e8 <finish_transition()+0x4c8>
    10f4:	4a14      	ldr	r2, [pc, #80]	; (1148 <finish_transition()+0x528>)
    10f6:	f103 0020 	add.w	r0, r3, #32
    10fa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    10fe:	f843 1b04 	str.w	r1, [r3], #4
    1102:	4283      	cmp	r3, r0
    1104:	4c0a      	ldr	r4, [pc, #40]	; (1130 <finish_transition()+0x510>)
    1106:	d1f8      	bne.n	10fa <finish_transition()+0x4da>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1108:	2500      	movs	r5, #0
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    110a:	aa01      	add	r2, sp, #4
    110c:	2196      	movs	r1, #150	; 0x96
    110e:	480f      	ldr	r0, [pc, #60]	; (114c <finish_transition()+0x52c>)
    1110:	f88d 5004 	strb.w	r5, [sp, #4]
    1114:	f88d 5005 	strb.w	r5, [sp, #5]
    1118:	f88d 5006 	strb.w	r5, [sp, #6]
    111c:	f007 f9f0 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    1120:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
}
    1124:	b003      	add	sp, #12
    1126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1128:	1fff9208 	.word	0x1fff9208
    112c:	1fff92f8 	.word	0x1fff92f8
    1130:	1fff9608 	.word	0x1fff9608
    1134:	1fff93f4 	.word	0x1fff93f4
    1138:	1fff9414 	.word	0x1fff9414
    113c:	1fff9434 	.word	0x1fff9434
    1140:	1fff9454 	.word	0x1fff9454
    1144:	1fff9474 	.word	0x1fff9474
    1148:	1fff9494 	.word	0x1fff9494
    114c:	1fff8c90 	.word	0x1fff8c90

00001150 <blending()>:

void blending() {
    1150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1154:	4d2f      	ldr	r5, [pc, #188]	; (1214 <blending()+0xc4>)
    1156:	4e30      	ldr	r6, [pc, #192]	; (1218 <blending()+0xc8>)
    1158:	4c30      	ldr	r4, [pc, #192]	; (121c <blending()+0xcc>)
    115a:	4f31      	ldr	r7, [pc, #196]	; (1220 <blending()+0xd0>)
    115c:	b085      	sub	sp, #20
    115e:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    1162:	4632      	mov	r2, r6
    1164:	4629      	mov	r1, r5
    1166:	783b      	ldrb	r3, [r7, #0]
    1168:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1220 <blending()+0xd0>
    116c:	a803      	add	r0, sp, #12
    116e:	3503      	adds	r5, #3
    1170:	f007 fab8 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1174:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1178:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    117c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1180:	7021      	strb	r1, [r4, #0]
    1182:	4545      	cmp	r5, r8
        g = rhs.g;
    1184:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1186:	70a3      	strb	r3, [r4, #2]
    1188:	f106 0603 	add.w	r6, r6, #3
    118c:	f104 0403 	add.w	r4, r4, #3
    1190:	d1e7      	bne.n	1162 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1192:	4e24      	ldr	r6, [pc, #144]	; (1224 <blending()+0xd4>)
    1194:	6833      	ldr	r3, [r6, #0]
    1196:	07db      	lsls	r3, r3, #31
    1198:	d51f      	bpl.n	11da <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    119a:	4d23      	ldr	r5, [pc, #140]	; (1228 <blending()+0xd8>)
    119c:	4c23      	ldr	r4, [pc, #140]	; (122c <blending()+0xdc>)
    119e:	682b      	ldr	r3, [r5, #0]
    11a0:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    11a2:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    11a6:	9b03      	ldr	r3, [sp, #12]
    11a8:	1a5b      	subs	r3, r3, r1
    11aa:	4293      	cmp	r3, r2
    11ac:	d30c      	bcc.n	11c8 <blending()+0x78>
    11ae:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11b0:	682a      	ldr	r2, [r5, #0]
    11b2:	9202      	str	r2, [sp, #8]
    11b4:	3301      	adds	r3, #1
	return ret;
    11b6:	9a02      	ldr	r2, [sp, #8]
    11b8:	6022      	str	r2, [r4, #0]
    11ba:	b2db      	uxtb	r3, r3
    11bc:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    11be:	2bff      	cmp	r3, #255	; 0xff
    11c0:	d006      	beq.n	11d0 <blending()+0x80>
		finish_transition();
	}
}
    11c2:	b005      	add	sp, #20
    11c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    11c8:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    11cc:	2bff      	cmp	r3, #255	; 0xff
    11ce:	d1f8      	bne.n	11c2 <blending()+0x72>
		finish_transition();
    11d0:	f7ff fd26 	bl	c20 <finish_transition()>
	}
}
    11d4:	b005      	add	sp, #20
    11d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    11da:	4630      	mov	r0, r6
    11dc:	f008 f9ca 	bl	9574 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11e0:	4d11      	ldr	r5, [pc, #68]	; (1228 <blending()+0xd8>)
    11e2:	b950      	cbnz	r0, 11fa <blending()+0xaa>
    11e4:	4c11      	ldr	r4, [pc, #68]	; (122c <blending()+0xdc>)
    11e6:	682b      	ldr	r3, [r5, #0]
    11e8:	9303      	str	r3, [sp, #12]
    11ea:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    11ee:	9b03      	ldr	r3, [sp, #12]
    11f0:	1a5b      	subs	r3, r3, r1
    11f2:	4293      	cmp	r3, r2
    11f4:	d2db      	bcs.n	11ae <blending()+0x5e>
    11f6:	783b      	ldrb	r3, [r7, #0]
    11f8:	e7e1      	b.n	11be <blending()+0x6e>
    11fa:	4b0d      	ldr	r3, [pc, #52]	; (1230 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    11fc:	682a      	ldr	r2, [r5, #0]
    11fe:	781b      	ldrb	r3, [r3, #0]
    1200:	4c0a      	ldr	r4, [pc, #40]	; (122c <blending()+0xdc>)
    1202:	9201      	str	r2, [sp, #4]
	return ret;
    1204:	9a01      	ldr	r2, [sp, #4]
    1206:	6022      	str	r2, [r4, #0]
    1208:	009b      	lsls	r3, r3, #2
    120a:	4630      	mov	r0, r6
    120c:	6063      	str	r3, [r4, #4]
    120e:	f008 f9b7 	bl	9580 <__cxa_guard_release>
    1212:	e7e8      	b.n	11e6 <blending()+0x96>
    1214:	1fff9608 	.word	0x1fff9608
    1218:	1fff8c90 	.word	0x1fff8c90
    121c:	1fff9e30 	.word	0x1fff9e30
    1220:	1fff8c8a 	.word	0x1fff8c8a
    1224:	1fff95b4 	.word	0x1fff95b4
    1228:	1fffa074 	.word	0x1fffa074
    122c:	1fff94d4 	.word	0x1fff94d4
    1230:	1fff95e8 	.word	0x1fff95e8

00001234 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1238:	4e8b      	ldr	r6, [pc, #556]	; (1468 <wipedown()+0x234>)
    123a:	f896 c000 	ldrb.w	ip, [r6]
    123e:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1242:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1244:	2b00      	cmp	r3, #0
    1246:	f000 810d 	beq.w	1464 <wipedown()+0x230>
    124a:	f103 38ff 	add.w	r8, r3, #4294967295
    124e:	fa1f f888 	uxth.w	r8, r8
    1252:	4986      	ldr	r1, [pc, #536]	; (146c <wipedown()+0x238>)
    1254:	4a86      	ldr	r2, [pc, #536]	; (1470 <wipedown()+0x23c>)
    1256:	f108 0801 	add.w	r8, r8, #1
    125a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    125e:	4490      	add	r8, r2
    1260:	460d      	mov	r5, r1
    1262:	4608      	mov	r0, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1264:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1268:	7857      	ldrb	r7, [r2, #1]
        b = rhs.b;
    126a:	7894      	ldrb	r4, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    126c:	f880 e000 	strb.w	lr, [r0]
    1270:	3203      	adds	r2, #3
    1272:	4542      	cmp	r2, r8
        g = rhs.g;
    1274:	7047      	strb	r7, [r0, #1]
        b = rhs.b;
    1276:	7084      	strb	r4, [r0, #2]
    1278:	f1a1 0103 	sub.w	r1, r1, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    127c:	f881 e1c2 	strb.w	lr, [r1, #450]	; 0x1c2
        g = rhs.g;
    1280:	f881 71c3 	strb.w	r7, [r1, #451]	; 0x1c3
        b = rhs.b;
    1284:	f881 41c4 	strb.w	r4, [r1, #452]	; 0x1c4
    1288:	f100 0003 	add.w	r0, r0, #3
    128c:	d1ea      	bne.n	1264 <wipedown()+0x30>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    128e:	2b4a      	cmp	r3, #74	; 0x4a
    1290:	d81e      	bhi.n	12d0 <wipedown()+0x9c>
    1292:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 1484 <wipedown()+0x250>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1296:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
    129a:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    129e:	eb09 0401 	add.w	r4, r9, r1
    12a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    12a6:	3301      	adds	r3, #1
    12a8:	eb05 0801 	add.w	r8, r5, r1
    12ac:	18a8      	adds	r0, r5, r2
    12ae:	b29b      	uxth	r3, r3
        g = rhs.g;
    12b0:	7867      	ldrb	r7, [r4, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b2:	f819 e001 	ldrb.w	lr, [r9, r1]
        g = rhs.g;
        b = rhs.b;
    12b6:	78a4      	ldrb	r4, [r4, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12b8:	f805 e001 	strb.w	lr, [r5, r1]
    12bc:	2b4b      	cmp	r3, #75	; 0x4b
        g = rhs.g;
    12be:	f888 7001 	strb.w	r7, [r8, #1]
        b = rhs.b;
    12c2:	f888 4002 	strb.w	r4, [r8, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12c6:	f805 e002 	strb.w	lr, [r5, r2]
        g = rhs.g;
    12ca:	7047      	strb	r7, [r0, #1]
        b = rhs.b;
    12cc:	7084      	strb	r4, [r0, #2]
    12ce:	d1e2      	bne.n	1296 <wipedown()+0x62>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    12d0:	f10c 3aff 	add.w	sl, ip, #4294967295
    12d4:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    12d8:	2480      	movs	r4, #128	; 0x80
    12da:	eb05 0b0a 	add.w	fp, r5, sl
    12de:	4659      	mov	r1, fp
    12e0:	4623      	mov	r3, r4
    12e2:	a803      	add	r0, sp, #12
    12e4:	aa02      	add	r2, sp, #8
    12e6:	2700      	movs	r7, #0
    12e8:	f88d 4009 	strb.w	r4, [sp, #9]
    12ec:	f88d 400a 	strb.w	r4, [sp, #10]
    12f0:	f88d 7008 	strb.w	r7, [sp, #8]
    12f4:	f007 f9f6 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    12f8:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    12fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    1300:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1304:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1308:	f805 300a 	strb.w	r3, [r5, sl]
    130c:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    1310:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1314:	eb05 0908 	add.w	r9, r5, r8
    1318:	4649      	mov	r1, r9
    131a:	4623      	mov	r3, r4
        g = rhs.g;
    131c:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    1320:	f88b 0002 	strb.w	r0, [fp, #2]
    1324:	aa02      	add	r2, sp, #8
    1326:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1328:	f88d 7008 	strb.w	r7, [sp, #8]
    132c:	f88d 4009 	strb.w	r4, [sp, #9]
    1330:	f88d 400a 	strb.w	r4, [sp, #10]
    1334:	f007 f9d6 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    1338:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    133a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    133e:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1342:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    1346:	f89d 000d 	ldrb.w	r0, [sp, #13]
    134a:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    134e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1352:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1356:	f89d 300e 	ldrb.w	r3, [sp, #14]
    135a:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    135e:	eb05 0e0c 	add.w	lr, r5, ip
    1362:	1868      	adds	r0, r5, r1
    1364:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    1366:	2a4a      	cmp	r2, #74	; 0x4a
    1368:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    136c:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 146c <wipedown()+0x238>
        g = (colorcode >>  8) & 0xFF;
    1370:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1374:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1378:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1468 <wipedown()+0x234>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    137c:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    137e:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1380:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    1382:	d831      	bhi.n	13e8 <wipedown()+0x1b4>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos--; }		// 1000 / 75
    1384:	4f3b      	ldr	r7, [pc, #236]	; (1474 <wipedown()+0x240>)
    1386:	683b      	ldr	r3, [r7, #0]
    1388:	07db      	lsls	r3, r3, #31
    138a:	d517      	bpl.n	13bc <wipedown()+0x188>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    138c:	4d3a      	ldr	r5, [pc, #232]	; (1478 <wipedown()+0x244>)
    138e:	4c3b      	ldr	r4, [pc, #236]	; (147c <wipedown()+0x248>)
    1390:	682b      	ldr	r3, [r5, #0]
    1392:	9303      	str	r3, [sp, #12]
    1394:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1398:	9b03      	ldr	r3, [sp, #12]
    139a:	1a5b      	subs	r3, r3, r1
    139c:	4293      	cmp	r3, r2
    139e:	7833      	ldrb	r3, [r6, #0]
    13a0:	d306      	bcc.n	13b0 <wipedown()+0x17c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13a2:	682a      	ldr	r2, [r5, #0]
    13a4:	9202      	str	r2, [sp, #8]
    13a6:	3b01      	subs	r3, #1
	return ret;
    13a8:	9a02      	ldr	r2, [sp, #8]
    13aa:	6022      	str	r2, [r4, #0]
    13ac:	b2db      	uxtb	r3, r3
    13ae:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    13b0:	b90b      	cbnz	r3, 13b6 <wipedown()+0x182>
		finish_transition();
    13b2:	f7ff fc35 	bl	c20 <finish_transition()>
	}
}
    13b6:	b005      	add	sp, #20
    13b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos--; }		// 1000 / 75
    13bc:	4638      	mov	r0, r7
    13be:	f008 f8d9 	bl	9574 <__cxa_guard_acquire>
    13c2:	2800      	cmp	r0, #0
    13c4:	d0e2      	beq.n	138c <wipedown()+0x158>
    13c6:	4b2e      	ldr	r3, [pc, #184]	; (1480 <wipedown()+0x24c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    13c8:	4d2b      	ldr	r5, [pc, #172]	; (1478 <wipedown()+0x244>)
    13ca:	781b      	ldrb	r3, [r3, #0]
    13cc:	682a      	ldr	r2, [r5, #0]
    13ce:	9201      	str	r2, [sp, #4]
    13d0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    13d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    13d8:	4c28      	ldr	r4, [pc, #160]	; (147c <wipedown()+0x248>)
	return ret;
    13da:	9a01      	ldr	r2, [sp, #4]
    13dc:	4638      	mov	r0, r7
    13de:	e884 000c 	stmia.w	r4, {r2, r3}
    13e2:	f008 f8cd 	bl	9580 <__cxa_guard_release>
    13e6:	e7d3      	b.n	1390 <wipedown()+0x15c>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    13e8:	1c55      	adds	r5, r2, #1
    13ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    13ee:	eb08 0a05 	add.w	sl, r8, r5
    13f2:	4651      	mov	r1, sl
    13f4:	4623      	mov	r3, r4
    13f6:	aa02      	add	r2, sp, #8
    13f8:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    13fa:	f88d 7008 	strb.w	r7, [sp, #8]
    13fe:	f88d 4009 	strb.w	r4, [sp, #9]
    1402:	f88d 400a 	strb.w	r4, [sp, #10]
    1406:	f007 f96d 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    140a:	f899 3000 	ldrb.w	r3, [r9]
    140e:	f88d 7008 	strb.w	r7, [sp, #8]
    1412:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    1416:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    141a:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    141e:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1422:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    1426:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    142a:	f808 c005 	strb.w	ip, [r8, r5]
    142e:	aa02      	add	r2, sp, #8
    1430:	4623      	mov	r3, r4
    1432:	4649      	mov	r1, r9
    1434:	a803      	add	r0, sp, #12
        g = rhs.g;
    1436:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    143a:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    143e:	f88d 4009 	strb.w	r4, [sp, #9]
    1442:	f88d 400a 	strb.w	r4, [sp, #10]
    1446:	f007 f94d 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    144a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    144e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1452:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1456:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    145a:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    145e:	f889 3002 	strb.w	r3, [r9, #2]
    1462:	e78f      	b.n	1384 <wipedown()+0x150>
    1464:	4d01      	ldr	r5, [pc, #4]	; (146c <wipedown()+0x238>)
    1466:	e714      	b.n	1292 <wipedown()+0x5e>
    1468:	1fff9500 	.word	0x1fff9500
    146c:	1fff9e30 	.word	0x1fff9e30
    1470:	1fff9608 	.word	0x1fff9608
    1474:	1fff95bc 	.word	0x1fff95bc
    1478:	1fffa074 	.word	0x1fffa074
    147c:	1fff94e8 	.word	0x1fff94e8
    1480:	1fff95e8 	.word	0x1fff95e8
    1484:	1fff8c90 	.word	0x1fff8c90

00001488 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    148c:	4b9b      	ldr	r3, [pc, #620]	; (16fc <wipeup()+0x274>)
    148e:	781d      	ldrb	r5, [r3, #0]
    1490:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1492:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1494:	2b00      	cmp	r3, #0
    1496:	f000 811d 	beq.w	16d4 <wipeup()+0x24c>
    149a:	f103 38ff 	add.w	r8, r3, #4294967295
    149e:	fa1f f888 	uxth.w	r8, r8
    14a2:	4997      	ldr	r1, [pc, #604]	; (1700 <wipeup()+0x278>)
    14a4:	4a97      	ldr	r2, [pc, #604]	; (1704 <wipeup()+0x27c>)
    14a6:	f108 0801 	add.w	r8, r8, #1
    14aa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    14ae:	4490      	add	r8, r2
    14b0:	460c      	mov	r4, r1
    14b2:	4608      	mov	r0, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14b4:	f892 c000 	ldrb.w	ip, [r2]
        g = rhs.g;
    14b8:	f892 e001 	ldrb.w	lr, [r2, #1]
        b = rhs.b;
    14bc:	7896      	ldrb	r6, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14be:	f880 c000 	strb.w	ip, [r0]
    14c2:	3203      	adds	r2, #3
    14c4:	4542      	cmp	r2, r8
        g = rhs.g;
    14c6:	f880 e001 	strb.w	lr, [r0, #1]
        b = rhs.b;
    14ca:	7086      	strb	r6, [r0, #2]
    14cc:	f1a1 0103 	sub.w	r1, r1, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14d0:	f881 c1c2 	strb.w	ip, [r1, #450]	; 0x1c2
        g = rhs.g;
    14d4:	f881 e1c3 	strb.w	lr, [r1, #451]	; 0x1c3
        b = rhs.b;
    14d8:	f881 61c4 	strb.w	r6, [r1, #452]	; 0x1c4
    14dc:	f100 0003 	add.w	r0, r0, #3
    14e0:	d1e8      	bne.n	14b4 <wipeup()+0x2c>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    14e2:	2b4a      	cmp	r3, #74	; 0x4a
    14e4:	d820      	bhi.n	1528 <wipeup()+0xa0>
    14e6:	f8df 9230 	ldr.w	r9, [pc, #560]	; 1718 <wipeup()+0x290>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    14ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
    14ee:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    14f2:	eb09 0601 	add.w	r6, r9, r1
    14f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    14fa:	3301      	adds	r3, #1
    14fc:	eb04 0801 	add.w	r8, r4, r1
    1500:	18a0      	adds	r0, r4, r2
    1502:	b29b      	uxth	r3, r3
        g = rhs.g;
    1504:	f896 e001 	ldrb.w	lr, [r6, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1508:	f819 c001 	ldrb.w	ip, [r9, r1]
        g = rhs.g;
        b = rhs.b;
    150c:	78b6      	ldrb	r6, [r6, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    150e:	f804 c001 	strb.w	ip, [r4, r1]
    1512:	2b4b      	cmp	r3, #75	; 0x4b
        g = rhs.g;
    1514:	f888 e001 	strb.w	lr, [r8, #1]
        b = rhs.b;
    1518:	f888 6002 	strb.w	r6, [r8, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    151c:	f804 c002 	strb.w	ip, [r4, r2]
        g = rhs.g;
    1520:	f880 e001 	strb.w	lr, [r0, #1]
        b = rhs.b;
    1524:	7086      	strb	r6, [r0, #2]
    1526:	d1e0      	bne.n	14ea <wipeup()+0x62>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
    1528:	2d00      	cmp	r5, #0
    152a:	f040 808f 	bne.w	164c <wipeup()+0x1c4>
    152e:	f10d 0a0c 	add.w	sl, sp, #12
    1532:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    1536:	4b71      	ldr	r3, [pc, #452]	; (16fc <wipeup()+0x274>)
    1538:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    153a:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    153e:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1542:	1c5a      	adds	r2, r3, #1
    1544:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1548:	eb04 0e03 	add.w	lr, r4, r3
    154c:	1825      	adds	r5, r4, r0
    154e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1552:	2680      	movs	r6, #128	; 0x80
    1554:	eb04 0902 	add.w	r9, r4, r2
    1558:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    155a:	22ff      	movs	r2, #255	; 0xff
    155c:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    155e:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1562:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1566:	f88e 2002 	strb.w	r2, [lr, #2]
    156a:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    156c:	5422      	strb	r2, [r4, r0]
    156e:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1570:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1572:	70aa      	strb	r2, [r5, #2]
    1574:	4650      	mov	r0, sl
    1576:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1578:	f88d 6009 	strb.w	r6, [sp, #9]
    157c:	f88d 600a 	strb.w	r6, [sp, #10]
    1580:	f88d 8008 	strb.w	r8, [sp, #8]
    1584:	f007 f8ae 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1588:	4b5c      	ldr	r3, [pc, #368]	; (16fc <wipeup()+0x274>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    158a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    158e:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1590:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1594:	f88d 8008 	strb.w	r8, [sp, #8]
    1598:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    159c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    15a0:	eb04 0805 	add.w	r8, r4, r5
    15a4:	4633      	mov	r3, r6
    15a6:	f88d 6009 	strb.w	r6, [sp, #9]
    15aa:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    15ae:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15b2:	55e1      	strb	r1, [r4, r7]
    15b4:	465a      	mov	r2, fp
    15b6:	4650      	mov	r0, sl
    15b8:	4641      	mov	r1, r8
        g = rhs.g;
    15ba:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    15be:	f889 6002 	strb.w	r6, [r9, #2]
    15c2:	f007 f88f 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    15c6:	4b50      	ldr	r3, [pc, #320]	; (1708 <wipeup()+0x280>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    15cc:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    15ce:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    15d2:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d6:	5560      	strb	r0, [r4, r5]
    15d8:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos] = CRGB::White;
    15da:	4848      	ldr	r0, [pc, #288]	; (16fc <wipeup()+0x274>)
        g = rhs.g;
    15dc:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    15e0:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    15e4:	d520      	bpl.n	1628 <wipeup()+0x1a0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15e6:	4d49      	ldr	r5, [pc, #292]	; (170c <wipeup()+0x284>)
    15e8:	4c49      	ldr	r4, [pc, #292]	; (1710 <wipeup()+0x288>)
    15ea:	682b      	ldr	r3, [r5, #0]
    15ec:	9303      	str	r3, [sp, #12]
    15ee:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15f2:	9b03      	ldr	r3, [sp, #12]
    15f4:	1a5b      	subs	r3, r3, r1
    15f6:	4293      	cmp	r3, r2
    15f8:	d30e      	bcc.n	1618 <wipeup()+0x190>
    15fa:	4b40      	ldr	r3, [pc, #256]	; (16fc <wipeup()+0x274>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15fc:	682a      	ldr	r2, [r5, #0]
    15fe:	781b      	ldrb	r3, [r3, #0]
    1600:	9202      	str	r2, [sp, #8]
	return ret;
    1602:	9a02      	ldr	r2, [sp, #8]
    1604:	6022      	str	r2, [r4, #0]
    1606:	3301      	adds	r3, #1
    1608:	4a3c      	ldr	r2, [pc, #240]	; (16fc <wipeup()+0x274>)
    160a:	b2db      	uxtb	r3, r3
    160c:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    160e:	2b4a      	cmp	r3, #74	; 0x4a
    1610:	d005      	beq.n	161e <wipeup()+0x196>
		finish_transition();
	}
}
    1612:	b005      	add	sp, #20
    1614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1618:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    161a:	2b4a      	cmp	r3, #74	; 0x4a
    161c:	d1f9      	bne.n	1612 <wipeup()+0x18a>
		finish_transition();
    161e:	f7ff faff 	bl	c20 <finish_transition()>
	}
}
    1622:	b005      	add	sp, #20
    1624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    1628:	4837      	ldr	r0, [pc, #220]	; (1708 <wipeup()+0x280>)
    162a:	f007 ffa3 	bl	9574 <__cxa_guard_acquire>
    162e:	2800      	cmp	r0, #0
    1630:	d152      	bne.n	16d8 <wipeup()+0x250>
    1632:	4d36      	ldr	r5, [pc, #216]	; (170c <wipeup()+0x284>)
    1634:	4c36      	ldr	r4, [pc, #216]	; (1710 <wipeup()+0x288>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1636:	682b      	ldr	r3, [r5, #0]
    1638:	9303      	str	r3, [sp, #12]
    163a:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    163e:	9b03      	ldr	r3, [sp, #12]
    1640:	1a5b      	subs	r3, r3, r1
    1642:	4293      	cmp	r3, r2
    1644:	d2d9      	bcs.n	15fa <wipeup()+0x172>
    1646:	4b2d      	ldr	r3, [pc, #180]	; (16fc <wipeup()+0x274>)
    1648:	781b      	ldrb	r3, [r3, #0]
    164a:	e7e0      	b.n	160e <wipeup()+0x186>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    164c:	3d01      	subs	r5, #1
    164e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1652:	2680      	movs	r6, #128	; 0x80
    1654:	eb04 0905 	add.w	r9, r4, r5
    1658:	f10d 0a0c 	add.w	sl, sp, #12
    165c:	f10d 0b08 	add.w	fp, sp, #8
    1660:	f04f 0800 	mov.w	r8, #0
    1664:	4649      	mov	r1, r9
    1666:	4633      	mov	r3, r6
    1668:	4650      	mov	r0, sl
    166a:	465a      	mov	r2, fp
    166c:	f88d 8008 	strb.w	r8, [sp, #8]
    1670:	f88d 6009 	strb.w	r6, [sp, #9]
    1674:	f88d 600a 	strb.w	r6, [sp, #10]
    1678:	f007 f834 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    167c:	4b1f      	ldr	r3, [pc, #124]	; (16fc <wipeup()+0x274>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    167e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1682:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1684:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1688:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    168c:	f88d 8008 	strb.w	r8, [sp, #8]
    1690:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1698:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    169c:	5562      	strb	r2, [r4, r5]
    169e:	461f      	mov	r7, r3
    16a0:	4641      	mov	r1, r8
    16a2:	4633      	mov	r3, r6
    16a4:	465a      	mov	r2, fp
    16a6:	4650      	mov	r0, sl
        g = rhs.g;
    16a8:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    16ac:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    16b0:	f88d 6009 	strb.w	r6, [sp, #9]
    16b4:	f88d 600a 	strb.w	r6, [sp, #10]
    16b8:	f007 f814 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16bc:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    16c0:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    16c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16c8:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    16ca:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    16ce:	f888 3002 	strb.w	r3, [r8, #2]
    16d2:	e730      	b.n	1536 <wipeup()+0xae>
    16d4:	4c0a      	ldr	r4, [pc, #40]	; (1700 <wipeup()+0x278>)
    16d6:	e706      	b.n	14e6 <wipeup()+0x5e>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 13) { wipe_pos++; }
    16d8:	4b0e      	ldr	r3, [pc, #56]	; (1714 <wipeup()+0x28c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    16da:	4d0c      	ldr	r5, [pc, #48]	; (170c <wipeup()+0x284>)
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	682a      	ldr	r2, [r5, #0]
    16e0:	9201      	str	r2, [sp, #4]
    16e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    16e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    16ea:	4c09      	ldr	r4, [pc, #36]	; (1710 <wipeup()+0x288>)
	return ret;
    16ec:	9a01      	ldr	r2, [sp, #4]
    16ee:	4806      	ldr	r0, [pc, #24]	; (1708 <wipeup()+0x280>)
    16f0:	e884 000c 	stmia.w	r4, {r2, r3}
    16f4:	f007 ff44 	bl	9580 <__cxa_guard_release>
    16f8:	e79d      	b.n	1636 <wipeup()+0x1ae>
    16fa:	bf00      	nop
    16fc:	1fff9500 	.word	0x1fff9500
    1700:	1fff9e30 	.word	0x1fff9e30
    1704:	1fff8c90 	.word	0x1fff8c90
    1708:	1fff95c8 	.word	0x1fff95c8
    170c:	1fffa074 	.word	0x1fffa074
    1710:	1fff95ec 	.word	0x1fff95ec
    1714:	1fff95e8 	.word	0x1fff95e8
    1718:	1fff9608 	.word	0x1fff9608

0000171c <colorfade()>:
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (color_up) {
    1720:	f8df 9160 	ldr.w	r9, [pc, #352]	; 1884 <colorfade()+0x168>
    1724:	f899 3000 	ldrb.w	r3, [r9]
	if (wipe_pos == ONE_SIDE - 1) {
		finish_transition();
	}
}

void colorfade() {
    1728:	b087      	sub	sp, #28
	if (color_up) {
    172a:	2b00      	cmp	r3, #0
    172c:	d034      	beq.n	1798 <colorfade()+0x7c>
    172e:	4d4a      	ldr	r5, [pc, #296]	; (1858 <colorfade()+0x13c>)
    1730:	4c4a      	ldr	r4, [pc, #296]	; (185c <colorfade()+0x140>)
    1732:	4e4b      	ldr	r6, [pc, #300]	; (1860 <colorfade()+0x144>)
    1734:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
    1738:	af05      	add	r7, sp, #20
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
    173a:	4629      	mov	r1, r5
    173c:	7833      	ldrb	r3, [r6, #0]
    173e:	4a49      	ldr	r2, [pc, #292]	; (1864 <colorfade()+0x148>)
    1740:	4638      	mov	r0, r7
    1742:	3503      	adds	r5, #3
    1744:	f006 ffce 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1748:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    174c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    1750:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1754:	7021      	strb	r1, [r4, #0]
	}
}

void colorfade() {
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    1756:	4545      	cmp	r5, r8
        g = rhs.g;
    1758:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    175a:	70a3      	strb	r3, [r4, #2]
    175c:	f104 0403 	add.w	r4, r4, #3
    1760:	d1eb      	bne.n	173a <colorfade()+0x1e>
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
    1762:	4f41      	ldr	r7, [pc, #260]	; (1868 <colorfade()+0x14c>)
    1764:	683b      	ldr	r3, [r7, #0]
    1766:	07da      	lsls	r2, r3, #31
    1768:	d55f      	bpl.n	182a <colorfade()+0x10e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    176a:	4c40      	ldr	r4, [pc, #256]	; (186c <colorfade()+0x150>)
    176c:	4d40      	ldr	r5, [pc, #256]	; (1870 <colorfade()+0x154>)
    176e:	6823      	ldr	r3, [r4, #0]
    1770:	9302      	str	r3, [sp, #8]
    1772:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    1776:	9b02      	ldr	r3, [sp, #8]
    1778:	1a5b      	subs	r3, r3, r1
    177a:	4293      	cmp	r3, r2
    177c:	d309      	bcc.n	1792 <colorfade()+0x76>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    177e:	6822      	ldr	r2, [r4, #0]
    1780:	7833      	ldrb	r3, [r6, #0]
    1782:	9201      	str	r2, [sp, #4]
	return ret;
    1784:	9a01      	ldr	r2, [sp, #4]
    1786:	602a      	str	r2, [r5, #0]
    1788:	2bff      	cmp	r3, #255	; 0xff
    178a:	f103 0201 	add.w	r2, r3, #1
    178e:	7032      	strb	r2, [r6, #0]
    1790:	d05e      	beq.n	1850 <colorfade()+0x134>
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
	}
}
    1792:	b007      	add	sp, #28
    1794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1798:	4d36      	ldr	r5, [pc, #216]	; (1874 <colorfade()+0x158>)
    179a:	4c30      	ldr	r4, [pc, #192]	; (185c <colorfade()+0x140>)
    179c:	4e30      	ldr	r6, [pc, #192]	; (1860 <colorfade()+0x144>)
    179e:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
    17a2:	af05      	add	r7, sp, #20
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
    17a4:	4629      	mov	r1, r5
    17a6:	7833      	ldrb	r3, [r6, #0]
    17a8:	4a2e      	ldr	r2, [pc, #184]	; (1864 <colorfade()+0x148>)
    17aa:	4638      	mov	r0, r7
    17ac:	3503      	adds	r5, #3
    17ae:	f006 ff99 	bl	86e4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    17b6:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    17ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17be:	7021      	strb	r1, [r4, #0]
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    17c0:	4545      	cmp	r5, r8
        g = rhs.g;
    17c2:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    17c4:	70a3      	strb	r3, [r4, #2]
    17c6:	f104 0403 	add.w	r4, r4, #3
    17ca:	d1eb      	bne.n	17a4 <colorfade()+0x88>
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
    17cc:	4f2a      	ldr	r7, [pc, #168]	; (1878 <colorfade()+0x15c>)
    17ce:	683b      	ldr	r3, [r7, #0]
    17d0:	07db      	lsls	r3, r3, #31
    17d2:	d517      	bpl.n	1804 <colorfade()+0xe8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17d4:	4c25      	ldr	r4, [pc, #148]	; (186c <colorfade()+0x150>)
    17d6:	4d29      	ldr	r5, [pc, #164]	; (187c <colorfade()+0x160>)
    17d8:	6823      	ldr	r3, [r4, #0]
    17da:	9305      	str	r3, [sp, #20]
    17dc:	e895 0006 	ldmia.w	r5, {r1, r2}
	return ret;
    17e0:	9b05      	ldr	r3, [sp, #20]
    17e2:	1a5b      	subs	r3, r3, r1
    17e4:	4293      	cmp	r3, r2
    17e6:	d3d4      	bcc.n	1792 <colorfade()+0x76>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    17e8:	6822      	ldr	r2, [r4, #0]
    17ea:	7833      	ldrb	r3, [r6, #0]
    17ec:	9204      	str	r2, [sp, #16]
	return ret;
    17ee:	9a04      	ldr	r2, [sp, #16]
    17f0:	602a      	str	r2, [r5, #0]
    17f2:	1e5a      	subs	r2, r3, #1
    17f4:	7032      	strb	r2, [r6, #0]
    17f6:	2b00      	cmp	r3, #0
    17f8:	d1cb      	bne.n	1792 <colorfade()+0x76>
    17fa:	f7ff fa11 	bl	c20 <finish_transition()>
	}
}
    17fe:	b007      	add	sp, #28
    1800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(next_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
    1804:	4638      	mov	r0, r7
    1806:	f007 feb5 	bl	9574 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    180a:	4c18      	ldr	r4, [pc, #96]	; (186c <colorfade()+0x150>)
    180c:	2800      	cmp	r0, #0
    180e:	d0e2      	beq.n	17d6 <colorfade()+0xba>
    1810:	4b1b      	ldr	r3, [pc, #108]	; (1880 <colorfade()+0x164>)
    1812:	6822      	ldr	r2, [r4, #0]
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	4d19      	ldr	r5, [pc, #100]	; (187c <colorfade()+0x160>)
    1818:	9203      	str	r2, [sp, #12]
	return ret;
    181a:	9a03      	ldr	r2, [sp, #12]
    181c:	602a      	str	r2, [r5, #0]
    181e:	009b      	lsls	r3, r3, #2
    1820:	4638      	mov	r0, r7
    1822:	606b      	str	r3, [r5, #4]
    1824:	f007 feac 	bl	9580 <__cxa_guard_release>
    1828:	e7d6      	b.n	17d8 <colorfade()+0xbc>
void colorfade() {
	if (color_up) {
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
			master_leds[i] = blend(curr_leds.led_data[i], colorfade_rgb, transition_ratio);
		}
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 255) { color_up = 0; }	}
    182a:	4638      	mov	r0, r7
    182c:	f007 fea2 	bl	9574 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1830:	4c0e      	ldr	r4, [pc, #56]	; (186c <colorfade()+0x150>)
    1832:	2800      	cmp	r0, #0
    1834:	d09a      	beq.n	176c <colorfade()+0x50>
    1836:	4b12      	ldr	r3, [pc, #72]	; (1880 <colorfade()+0x164>)
    1838:	6822      	ldr	r2, [r4, #0]
    183a:	781b      	ldrb	r3, [r3, #0]
    183c:	4d0c      	ldr	r5, [pc, #48]	; (1870 <colorfade()+0x154>)
    183e:	9200      	str	r2, [sp, #0]
	return ret;
    1840:	9a00      	ldr	r2, [sp, #0]
    1842:	602a      	str	r2, [r5, #0]
    1844:	009b      	lsls	r3, r3, #2
    1846:	4638      	mov	r0, r7
    1848:	606b      	str	r3, [r5, #4]
    184a:	f007 fe99 	bl	9580 <__cxa_guard_release>
    184e:	e78e      	b.n	176e <colorfade()+0x52>
    1850:	2300      	movs	r3, #0
    1852:	f889 3000 	strb.w	r3, [r9]
    1856:	e79c      	b.n	1792 <colorfade()+0x76>
    1858:	1fff9608 	.word	0x1fff9608
    185c:	1fff9e30 	.word	0x1fff9e30
    1860:	1fff8c8a 	.word	0x1fff8c8a
    1864:	1fff9ff4 	.word	0x1fff9ff4
    1868:	1fff95dc 	.word	0x1fff95dc
    186c:	1fffa074 	.word	0x1fffa074
    1870:	1fff95d0 	.word	0x1fff95d0
    1874:	1fff8c90 	.word	0x1fff8c90
    1878:	1fff95f4 	.word	0x1fff95f4
    187c:	1fff95c0 	.word	0x1fff95c0
    1880:	1fff95e8 	.word	0x1fff95e8
    1884:	1fff94e4 	.word	0x1fff94e4

00001888 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio-- == 0) { finish_transition(); } }
	}
}

void switch_transition(TransitionType tt) {
	switch (tt) {
    1888:	2803      	cmp	r0, #3
    188a:	d803      	bhi.n	1894 <switch_transition(TransitionType)+0xc>
    188c:	e8df f000 	tbb	[pc, r0]
    1890:	08040602 	.word	0x08040602
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1894:	f7ff bc5c 	b.w	1150 <blending()>

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1898:	f7ff bdf6 	b.w	1488 <wipeup()>
}

void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    189c:	f7ff bcca 	b.w	1234 <wipedown()>
		case WIPEUP:	wipeup();		break;
		case COLORFADE: colorfade();	break;
    18a0:	f7ff bf3c 	b.w	171c <colorfade()>

000018a4 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    18a4:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    18a6:	2101      	movs	r1, #1
    18a8:	4604      	mov	r4, r0
    18aa:	4894      	ldr	r0, [pc, #592]	; (1afc <print_palette(unsigned char)+0x258>)
    18ac:	f008 fefa 	bl	a6a4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    18b0:	4621      	mov	r1, r4
    18b2:	2300      	movs	r3, #0
    18b4:	220a      	movs	r2, #10
    18b6:	4892      	ldr	r0, [pc, #584]	; (1b00 <print_palette(unsigned char)+0x25c>)
    18b8:	f009 f908 	bl	aacc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18bc:	2102      	movs	r1, #2
    18be:	4891      	ldr	r0, [pc, #580]	; (1b04 <print_palette(unsigned char)+0x260>)
    18c0:	f008 fef0 	bl	a6a4 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    18c4:	2c5c      	cmp	r4, #92	; 0x5c
    18c6:	f200 8281 	bhi.w	1dcc <print_palette(unsigned char)+0x528>
    18ca:	e8df f014 	tbh	[pc, r4, lsl #1]
    18ce:	027a      	.short	0x027a
    18d0:	02700275 	.word	0x02700275
    18d4:	0266026b 	.word	0x0266026b
    18d8:	025c0261 	.word	0x025c0261
    18dc:	02520257 	.word	0x02520257
    18e0:	0248024d 	.word	0x0248024d
    18e4:	023e0243 	.word	0x023e0243
    18e8:	02340239 	.word	0x02340239
    18ec:	022a022f 	.word	0x022a022f
    18f0:	02200225 	.word	0x02200225
    18f4:	0216021b 	.word	0x0216021b
    18f8:	020c0211 	.word	0x020c0211
    18fc:	02020207 	.word	0x02020207
    1900:	01f801fd 	.word	0x01f801fd
    1904:	01ee01f3 	.word	0x01ee01f3
    1908:	01e401e9 	.word	0x01e401e9
    190c:	01da01df 	.word	0x01da01df
    1910:	01d001d5 	.word	0x01d001d5
    1914:	01c601cb 	.word	0x01c601cb
    1918:	01bc01c1 	.word	0x01bc01c1
    191c:	01b201b7 	.word	0x01b201b7
    1920:	01a801ad 	.word	0x01a801ad
    1924:	019e01a3 	.word	0x019e01a3
    1928:	01940199 	.word	0x01940199
    192c:	018a018f 	.word	0x018a018f
    1930:	01800185 	.word	0x01800185
    1934:	0176017b 	.word	0x0176017b
    1938:	016c0171 	.word	0x016c0171
    193c:	01110167 	.word	0x01110167
    1940:	0107010c 	.word	0x0107010c
    1944:	00fd0102 	.word	0x00fd0102
    1948:	00f300f8 	.word	0x00f300f8
    194c:	00e900ee 	.word	0x00e900ee
    1950:	00df00e4 	.word	0x00df00e4
    1954:	00d500da 	.word	0x00d500da
    1958:	00cb00d0 	.word	0x00cb00d0
    195c:	00c100c6 	.word	0x00c100c6
    1960:	00b700bc 	.word	0x00b700bc
    1964:	00ad00b2 	.word	0x00ad00b2
    1968:	00a300a8 	.word	0x00a300a8
    196c:	0099009e 	.word	0x0099009e
    1970:	008f0094 	.word	0x008f0094
    1974:	0085008a 	.word	0x0085008a
    1978:	007b0080 	.word	0x007b0080
    197c:	00710076 	.word	0x00710076
    1980:	0067006c 	.word	0x0067006c
    1984:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    1988:	495f      	ldr	r1, [pc, #380]	; (1b08 <print_palette(unsigned char)+0x264>)
    198a:	485d      	ldr	r0, [pc, #372]	; (1b00 <print_palette(unsigned char)+0x25c>)
    198c:	f7fe ff26 	bl	7dc <Print::println(char const*)>
		break;
    1990:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    1992:	495e      	ldr	r1, [pc, #376]	; (1b0c <print_palette(unsigned char)+0x268>)
    1994:	485a      	ldr	r0, [pc, #360]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1996:	f7fe ff21 	bl	7dc <Print::println(char const*)>
		break;
    199a:	bd10      	pop	{r4, pc}
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    199c:	495c      	ldr	r1, [pc, #368]	; (1b10 <print_palette(unsigned char)+0x26c>)
    199e:	4858      	ldr	r0, [pc, #352]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19a0:	f7fe ff1c 	bl	7dc <Print::println(char const*)>
		break;
    19a4:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    19a6:	495b      	ldr	r1, [pc, #364]	; (1b14 <print_palette(unsigned char)+0x270>)
    19a8:	4855      	ldr	r0, [pc, #340]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19aa:	f7fe ff17 	bl	7dc <Print::println(char const*)>
		break;
    19ae:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    19b0:	4959      	ldr	r1, [pc, #356]	; (1b18 <print_palette(unsigned char)+0x274>)
    19b2:	4853      	ldr	r0, [pc, #332]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19b4:	f7fe ff12 	bl	7dc <Print::println(char const*)>
		break;
    19b8:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    19ba:	4958      	ldr	r1, [pc, #352]	; (1b1c <print_palette(unsigned char)+0x278>)
    19bc:	4850      	ldr	r0, [pc, #320]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19be:	f7fe ff0d 	bl	7dc <Print::println(char const*)>
		break;
    19c2:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    19c4:	4956      	ldr	r1, [pc, #344]	; (1b20 <print_palette(unsigned char)+0x27c>)
    19c6:	484e      	ldr	r0, [pc, #312]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19c8:	f7fe ff08 	bl	7dc <Print::println(char const*)>
		break;
    19cc:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    19ce:	4955      	ldr	r1, [pc, #340]	; (1b24 <print_palette(unsigned char)+0x280>)
    19d0:	484b      	ldr	r0, [pc, #300]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19d2:	f7fe ff03 	bl	7dc <Print::println(char const*)>
		break;
    19d6:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    19d8:	4953      	ldr	r1, [pc, #332]	; (1b28 <print_palette(unsigned char)+0x284>)
    19da:	4849      	ldr	r0, [pc, #292]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19dc:	f7fe fefe 	bl	7dc <Print::println(char const*)>
		break;
    19e0:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    19e2:	4952      	ldr	r1, [pc, #328]	; (1b2c <print_palette(unsigned char)+0x288>)
    19e4:	4846      	ldr	r0, [pc, #280]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19e6:	f7fe fef9 	bl	7dc <Print::println(char const*)>
		break;
    19ea:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    19ec:	4950      	ldr	r1, [pc, #320]	; (1b30 <print_palette(unsigned char)+0x28c>)
    19ee:	4844      	ldr	r0, [pc, #272]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19f0:	f7fe fef4 	bl	7dc <Print::println(char const*)>
		break;
    19f4:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    19f6:	494f      	ldr	r1, [pc, #316]	; (1b34 <print_palette(unsigned char)+0x290>)
    19f8:	4841      	ldr	r0, [pc, #260]	; (1b00 <print_palette(unsigned char)+0x25c>)
    19fa:	f7fe feef 	bl	7dc <Print::println(char const*)>
		break;
    19fe:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    1a00:	494d      	ldr	r1, [pc, #308]	; (1b38 <print_palette(unsigned char)+0x294>)
    1a02:	483f      	ldr	r0, [pc, #252]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a04:	f7fe feea 	bl	7dc <Print::println(char const*)>
		break;
    1a08:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    1a0a:	494c      	ldr	r1, [pc, #304]	; (1b3c <print_palette(unsigned char)+0x298>)
    1a0c:	483c      	ldr	r0, [pc, #240]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a0e:	f7fe fee5 	bl	7dc <Print::println(char const*)>
		break;
    1a12:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    1a14:	494a      	ldr	r1, [pc, #296]	; (1b40 <print_palette(unsigned char)+0x29c>)
    1a16:	483a      	ldr	r0, [pc, #232]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a18:	f7fe fee0 	bl	7dc <Print::println(char const*)>
		break;
    1a1c:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    1a1e:	4949      	ldr	r1, [pc, #292]	; (1b44 <print_palette(unsigned char)+0x2a0>)
    1a20:	4837      	ldr	r0, [pc, #220]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a22:	f7fe fedb 	bl	7dc <Print::println(char const*)>
		break;
    1a26:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    1a28:	4947      	ldr	r1, [pc, #284]	; (1b48 <print_palette(unsigned char)+0x2a4>)
    1a2a:	4835      	ldr	r0, [pc, #212]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a2c:	f7fe fed6 	bl	7dc <Print::println(char const*)>
		break;
    1a30:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    1a32:	4946      	ldr	r1, [pc, #280]	; (1b4c <print_palette(unsigned char)+0x2a8>)
    1a34:	4832      	ldr	r0, [pc, #200]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a36:	f7fe fed1 	bl	7dc <Print::println(char const*)>
		break;
    1a3a:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    1a3c:	4944      	ldr	r1, [pc, #272]	; (1b50 <print_palette(unsigned char)+0x2ac>)
    1a3e:	4830      	ldr	r0, [pc, #192]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a40:	f7fe fecc 	bl	7dc <Print::println(char const*)>
		break;
    1a44:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    1a46:	4943      	ldr	r1, [pc, #268]	; (1b54 <print_palette(unsigned char)+0x2b0>)
    1a48:	482d      	ldr	r0, [pc, #180]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a4a:	f7fe fec7 	bl	7dc <Print::println(char const*)>
		break;
    1a4e:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    1a50:	4941      	ldr	r1, [pc, #260]	; (1b58 <print_palette(unsigned char)+0x2b4>)
    1a52:	482b      	ldr	r0, [pc, #172]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a54:	f7fe fec2 	bl	7dc <Print::println(char const*)>
		break;
    1a58:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    1a5a:	4940      	ldr	r1, [pc, #256]	; (1b5c <print_palette(unsigned char)+0x2b8>)
    1a5c:	4828      	ldr	r0, [pc, #160]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a5e:	f7fe febd 	bl	7dc <Print::println(char const*)>
		break;
    1a62:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    1a64:	493e      	ldr	r1, [pc, #248]	; (1b60 <print_palette(unsigned char)+0x2bc>)
    1a66:	4826      	ldr	r0, [pc, #152]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a68:	f7fe feb8 	bl	7dc <Print::println(char const*)>
		break;
    1a6c:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    1a6e:	493d      	ldr	r1, [pc, #244]	; (1b64 <print_palette(unsigned char)+0x2c0>)
    1a70:	4823      	ldr	r0, [pc, #140]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a72:	f7fe feb3 	bl	7dc <Print::println(char const*)>
		break;
    1a76:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    1a78:	493b      	ldr	r1, [pc, #236]	; (1b68 <print_palette(unsigned char)+0x2c4>)
    1a7a:	4821      	ldr	r0, [pc, #132]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a7c:	f7fe feae 	bl	7dc <Print::println(char const*)>
		break;
    1a80:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    1a82:	493a      	ldr	r1, [pc, #232]	; (1b6c <print_palette(unsigned char)+0x2c8>)
    1a84:	481e      	ldr	r0, [pc, #120]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a86:	f7fe fea9 	bl	7dc <Print::println(char const*)>
		break;
    1a8a:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    1a8c:	4938      	ldr	r1, [pc, #224]	; (1b70 <print_palette(unsigned char)+0x2cc>)
    1a8e:	481c      	ldr	r0, [pc, #112]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a90:	f7fe fea4 	bl	7dc <Print::println(char const*)>
		break;
    1a94:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    1a96:	4937      	ldr	r1, [pc, #220]	; (1b74 <print_palette(unsigned char)+0x2d0>)
    1a98:	4819      	ldr	r0, [pc, #100]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1a9a:	f7fe fe9f 	bl	7dc <Print::println(char const*)>
		break;
    1a9e:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1aa0:	4935      	ldr	r1, [pc, #212]	; (1b78 <print_palette(unsigned char)+0x2d4>)
    1aa2:	4817      	ldr	r0, [pc, #92]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1aa4:	f7fe fe9a 	bl	7dc <Print::println(char const*)>
		break;
    1aa8:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    1aaa:	4934      	ldr	r1, [pc, #208]	; (1b7c <print_palette(unsigned char)+0x2d8>)
    1aac:	4814      	ldr	r0, [pc, #80]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1aae:	f7fe fe95 	bl	7dc <Print::println(char const*)>
		break;
    1ab2:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1ab4:	4932      	ldr	r1, [pc, #200]	; (1b80 <print_palette(unsigned char)+0x2dc>)
    1ab6:	4812      	ldr	r0, [pc, #72]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1ab8:	f7fe fe90 	bl	7dc <Print::println(char const*)>
		break;
    1abc:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    1abe:	4931      	ldr	r1, [pc, #196]	; (1b84 <print_palette(unsigned char)+0x2e0>)
    1ac0:	480f      	ldr	r0, [pc, #60]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1ac2:	f7fe fe8b 	bl	7dc <Print::println(char const*)>
		break;
    1ac6:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    1ac8:	492f      	ldr	r1, [pc, #188]	; (1b88 <print_palette(unsigned char)+0x2e4>)
    1aca:	480d      	ldr	r0, [pc, #52]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1acc:	f7fe fe86 	bl	7dc <Print::println(char const*)>
		break;
    1ad0:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    1ad2:	492e      	ldr	r1, [pc, #184]	; (1b8c <print_palette(unsigned char)+0x2e8>)
    1ad4:	480a      	ldr	r0, [pc, #40]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1ad6:	f7fe fe81 	bl	7dc <Print::println(char const*)>
		break;
    1ada:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    1adc:	492c      	ldr	r1, [pc, #176]	; (1b90 <print_palette(unsigned char)+0x2ec>)
    1ade:	4808      	ldr	r0, [pc, #32]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1ae0:	f7fe fe7c 	bl	7dc <Print::println(char const*)>
		break;
    1ae4:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    1ae6:	492b      	ldr	r1, [pc, #172]	; (1b94 <print_palette(unsigned char)+0x2f0>)
    1ae8:	4805      	ldr	r0, [pc, #20]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1aea:	f7fe fe77 	bl	7dc <Print::println(char const*)>
		break;
    1aee:	bd10      	pop	{r4, pc}
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    1af0:	4929      	ldr	r1, [pc, #164]	; (1b98 <print_palette(unsigned char)+0x2f4>)
    1af2:	4803      	ldr	r0, [pc, #12]	; (1b00 <print_palette(unsigned char)+0x25c>)
    1af4:	f7fe fe72 	bl	7dc <Print::println(char const*)>
		break;
    1af8:	bd10      	pop	{r4, pc}
    1afa:	bf00      	nop
    1afc:	0000c3cc 	.word	0x0000c3cc
    1b00:	1fff8760 	.word	0x1fff8760
    1b04:	0000c3d0 	.word	0x0000c3d0
    1b08:	0000c964 	.word	0x0000c964
    1b0c:	0000c958 	.word	0x0000c958
    1b10:	0000c948 	.word	0x0000c948
    1b14:	0000c938 	.word	0x0000c938
    1b18:	0000c924 	.word	0x0000c924
    1b1c:	0000c90c 	.word	0x0000c90c
    1b20:	0000c8f4 	.word	0x0000c8f4
    1b24:	0000c8e4 	.word	0x0000c8e4
    1b28:	0000c8cc 	.word	0x0000c8cc
    1b2c:	0000c8c0 	.word	0x0000c8c0
    1b30:	0000c8b4 	.word	0x0000c8b4
    1b34:	0000c89c 	.word	0x0000c89c
    1b38:	0000c890 	.word	0x0000c890
    1b3c:	0000c884 	.word	0x0000c884
    1b40:	0000c878 	.word	0x0000c878
    1b44:	0000c86c 	.word	0x0000c86c
    1b48:	0000c85c 	.word	0x0000c85c
    1b4c:	0000c850 	.word	0x0000c850
    1b50:	0000c83c 	.word	0x0000c83c
    1b54:	0000c830 	.word	0x0000c830
    1b58:	0000c820 	.word	0x0000c820
    1b5c:	0000c814 	.word	0x0000c814
    1b60:	0000c808 	.word	0x0000c808
    1b64:	0000c800 	.word	0x0000c800
    1b68:	0000c7ec 	.word	0x0000c7ec
    1b6c:	0000c7dc 	.word	0x0000c7dc
    1b70:	0000c7c8 	.word	0x0000c7c8
    1b74:	0000c7bc 	.word	0x0000c7bc
    1b78:	0000c7b0 	.word	0x0000c7b0
    1b7c:	0000c7a4 	.word	0x0000c7a4
    1b80:	0000c794 	.word	0x0000c794
    1b84:	0000c780 	.word	0x0000c780
    1b88:	0000c774 	.word	0x0000c774
    1b8c:	0000c764 	.word	0x0000c764
    1b90:	0000c758 	.word	0x0000c758
    1b94:	0000c748 	.word	0x0000c748
    1b98:	0000c73c 	.word	0x0000c73c
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1b9c:	498e      	ldr	r1, [pc, #568]	; (1dd8 <print_palette(unsigned char)+0x534>)
    1b9e:	488f      	ldr	r0, [pc, #572]	; (1ddc <print_palette(unsigned char)+0x538>)
    1ba0:	f7fe fe1c 	bl	7dc <Print::println(char const*)>
		break;
    1ba4:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    1ba6:	498e      	ldr	r1, [pc, #568]	; (1de0 <print_palette(unsigned char)+0x53c>)
    1ba8:	488c      	ldr	r0, [pc, #560]	; (1ddc <print_palette(unsigned char)+0x538>)
    1baa:	f7fe fe17 	bl	7dc <Print::println(char const*)>
		break;
    1bae:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1bb0:	498c      	ldr	r1, [pc, #560]	; (1de4 <print_palette(unsigned char)+0x540>)
    1bb2:	488a      	ldr	r0, [pc, #552]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bb4:	f7fe fe12 	bl	7dc <Print::println(char const*)>
		break;
    1bb8:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    1bba:	498b      	ldr	r1, [pc, #556]	; (1de8 <print_palette(unsigned char)+0x544>)
    1bbc:	4887      	ldr	r0, [pc, #540]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bbe:	f7fe fe0d 	bl	7dc <Print::println(char const*)>
		break;
    1bc2:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    1bc4:	4989      	ldr	r1, [pc, #548]	; (1dec <print_palette(unsigned char)+0x548>)
    1bc6:	4885      	ldr	r0, [pc, #532]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bc8:	f7fe fe08 	bl	7dc <Print::println(char const*)>
		break;
    1bcc:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    1bce:	4988      	ldr	r1, [pc, #544]	; (1df0 <print_palette(unsigned char)+0x54c>)
    1bd0:	4882      	ldr	r0, [pc, #520]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bd2:	f7fe fe03 	bl	7dc <Print::println(char const*)>
		break;
    1bd6:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    1bd8:	4986      	ldr	r1, [pc, #536]	; (1df4 <print_palette(unsigned char)+0x550>)
    1bda:	4880      	ldr	r0, [pc, #512]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bdc:	f7fe fdfe 	bl	7dc <Print::println(char const*)>
		break;
    1be0:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    1be2:	4985      	ldr	r1, [pc, #532]	; (1df8 <print_palette(unsigned char)+0x554>)
    1be4:	487d      	ldr	r0, [pc, #500]	; (1ddc <print_palette(unsigned char)+0x538>)
    1be6:	f7fe fdf9 	bl	7dc <Print::println(char const*)>
		break;
    1bea:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    1bec:	4983      	ldr	r1, [pc, #524]	; (1dfc <print_palette(unsigned char)+0x558>)
    1bee:	487b      	ldr	r0, [pc, #492]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bf0:	f7fe fdf4 	bl	7dc <Print::println(char const*)>
		break;
    1bf4:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    1bf6:	4982      	ldr	r1, [pc, #520]	; (1e00 <print_palette(unsigned char)+0x55c>)
    1bf8:	4878      	ldr	r0, [pc, #480]	; (1ddc <print_palette(unsigned char)+0x538>)
    1bfa:	f7fe fdef 	bl	7dc <Print::println(char const*)>
		break;
    1bfe:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    1c00:	4980      	ldr	r1, [pc, #512]	; (1e04 <print_palette(unsigned char)+0x560>)
    1c02:	4876      	ldr	r0, [pc, #472]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c04:	f7fe fdea 	bl	7dc <Print::println(char const*)>
		break;
    1c08:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    1c0a:	497f      	ldr	r1, [pc, #508]	; (1e08 <print_palette(unsigned char)+0x564>)
    1c0c:	4873      	ldr	r0, [pc, #460]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c0e:	f7fe fde5 	bl	7dc <Print::println(char const*)>
		break;
    1c12:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    1c14:	497d      	ldr	r1, [pc, #500]	; (1e0c <print_palette(unsigned char)+0x568>)
    1c16:	4871      	ldr	r0, [pc, #452]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c18:	f7fe fde0 	bl	7dc <Print::println(char const*)>
		break;
    1c1c:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1c1e:	497c      	ldr	r1, [pc, #496]	; (1e10 <print_palette(unsigned char)+0x56c>)
    1c20:	486e      	ldr	r0, [pc, #440]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c22:	f7fe fddb 	bl	7dc <Print::println(char const*)>
		break;
    1c26:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    1c28:	497a      	ldr	r1, [pc, #488]	; (1e14 <print_palette(unsigned char)+0x570>)
    1c2a:	486c      	ldr	r0, [pc, #432]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c2c:	f7fe fdd6 	bl	7dc <Print::println(char const*)>
		break;
    1c30:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    1c32:	4979      	ldr	r1, [pc, #484]	; (1e18 <print_palette(unsigned char)+0x574>)
    1c34:	4869      	ldr	r0, [pc, #420]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c36:	f7fe fdd1 	bl	7dc <Print::println(char const*)>
		break;
    1c3a:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    1c3c:	4977      	ldr	r1, [pc, #476]	; (1e1c <print_palette(unsigned char)+0x578>)
    1c3e:	4867      	ldr	r0, [pc, #412]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c40:	f7fe fdcc 	bl	7dc <Print::println(char const*)>
		break;
    1c44:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    1c46:	4976      	ldr	r1, [pc, #472]	; (1e20 <print_palette(unsigned char)+0x57c>)
    1c48:	4864      	ldr	r0, [pc, #400]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c4a:	f7fe fdc7 	bl	7dc <Print::println(char const*)>
		break;
    1c4e:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    1c50:	4974      	ldr	r1, [pc, #464]	; (1e24 <print_palette(unsigned char)+0x580>)
    1c52:	4862      	ldr	r0, [pc, #392]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c54:	f7fe fdc2 	bl	7dc <Print::println(char const*)>
		break;
    1c58:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    1c5a:	4973      	ldr	r1, [pc, #460]	; (1e28 <print_palette(unsigned char)+0x584>)
    1c5c:	485f      	ldr	r0, [pc, #380]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c5e:	f7fe fdbd 	bl	7dc <Print::println(char const*)>
		break;
    1c62:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    1c64:	4971      	ldr	r1, [pc, #452]	; (1e2c <print_palette(unsigned char)+0x588>)
    1c66:	485d      	ldr	r0, [pc, #372]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c68:	f7fe fdb8 	bl	7dc <Print::println(char const*)>
		break;
    1c6c:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    1c6e:	4970      	ldr	r1, [pc, #448]	; (1e30 <print_palette(unsigned char)+0x58c>)
    1c70:	485a      	ldr	r0, [pc, #360]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c72:	f7fe fdb3 	bl	7dc <Print::println(char const*)>
		break;
    1c76:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    1c78:	496e      	ldr	r1, [pc, #440]	; (1e34 <print_palette(unsigned char)+0x590>)
    1c7a:	4858      	ldr	r0, [pc, #352]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c7c:	f7fe fdae 	bl	7dc <Print::println(char const*)>
		break;
    1c80:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    1c82:	496d      	ldr	r1, [pc, #436]	; (1e38 <print_palette(unsigned char)+0x594>)
    1c84:	4855      	ldr	r0, [pc, #340]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c86:	f7fe fda9 	bl	7dc <Print::println(char const*)>
		break;
    1c8a:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    1c8c:	496b      	ldr	r1, [pc, #428]	; (1e3c <print_palette(unsigned char)+0x598>)
    1c8e:	4853      	ldr	r0, [pc, #332]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c90:	f7fe fda4 	bl	7dc <Print::println(char const*)>
		break;
    1c94:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    1c96:	496a      	ldr	r1, [pc, #424]	; (1e40 <print_palette(unsigned char)+0x59c>)
    1c98:	4850      	ldr	r0, [pc, #320]	; (1ddc <print_palette(unsigned char)+0x538>)
    1c9a:	f7fe fd9f 	bl	7dc <Print::println(char const*)>
		break;
    1c9e:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1ca0:	4968      	ldr	r1, [pc, #416]	; (1e44 <print_palette(unsigned char)+0x5a0>)
    1ca2:	484e      	ldr	r0, [pc, #312]	; (1ddc <print_palette(unsigned char)+0x538>)
    1ca4:	f7fe fd9a 	bl	7dc <Print::println(char const*)>
		break;
    1ca8:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    1caa:	4967      	ldr	r1, [pc, #412]	; (1e48 <print_palette(unsigned char)+0x5a4>)
    1cac:	484b      	ldr	r0, [pc, #300]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cae:	f7fe fd95 	bl	7dc <Print::println(char const*)>
		break;
    1cb2:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    1cb4:	4965      	ldr	r1, [pc, #404]	; (1e4c <print_palette(unsigned char)+0x5a8>)
    1cb6:	4849      	ldr	r0, [pc, #292]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cb8:	f7fe fd90 	bl	7dc <Print::println(char const*)>
		break;
    1cbc:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    1cbe:	4964      	ldr	r1, [pc, #400]	; (1e50 <print_palette(unsigned char)+0x5ac>)
    1cc0:	4846      	ldr	r0, [pc, #280]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cc2:	f7fe fd8b 	bl	7dc <Print::println(char const*)>
		break;
    1cc6:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    1cc8:	4962      	ldr	r1, [pc, #392]	; (1e54 <print_palette(unsigned char)+0x5b0>)
    1cca:	4844      	ldr	r0, [pc, #272]	; (1ddc <print_palette(unsigned char)+0x538>)
    1ccc:	f7fe fd86 	bl	7dc <Print::println(char const*)>
		break;
    1cd0:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    1cd2:	4961      	ldr	r1, [pc, #388]	; (1e58 <print_palette(unsigned char)+0x5b4>)
    1cd4:	4841      	ldr	r0, [pc, #260]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cd6:	f7fe fd81 	bl	7dc <Print::println(char const*)>
		break;
    1cda:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    1cdc:	495f      	ldr	r1, [pc, #380]	; (1e5c <print_palette(unsigned char)+0x5b8>)
    1cde:	483f      	ldr	r0, [pc, #252]	; (1ddc <print_palette(unsigned char)+0x538>)
    1ce0:	f7fe fd7c 	bl	7dc <Print::println(char const*)>
		break;
    1ce4:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    1ce6:	495e      	ldr	r1, [pc, #376]	; (1e60 <print_palette(unsigned char)+0x5bc>)
    1ce8:	483c      	ldr	r0, [pc, #240]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cea:	f7fe fd77 	bl	7dc <Print::println(char const*)>
		break;
    1cee:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    1cf0:	495c      	ldr	r1, [pc, #368]	; (1e64 <print_palette(unsigned char)+0x5c0>)
    1cf2:	483a      	ldr	r0, [pc, #232]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cf4:	f7fe fd72 	bl	7dc <Print::println(char const*)>
		break;
    1cf8:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    1cfa:	495b      	ldr	r1, [pc, #364]	; (1e68 <print_palette(unsigned char)+0x5c4>)
    1cfc:	4837      	ldr	r0, [pc, #220]	; (1ddc <print_palette(unsigned char)+0x538>)
    1cfe:	f7fe fd6d 	bl	7dc <Print::println(char const*)>
		break;
    1d02:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    1d04:	4959      	ldr	r1, [pc, #356]	; (1e6c <print_palette(unsigned char)+0x5c8>)
    1d06:	4835      	ldr	r0, [pc, #212]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d08:	f7fe fd68 	bl	7dc <Print::println(char const*)>
		break;
    1d0c:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    1d0e:	4958      	ldr	r1, [pc, #352]	; (1e70 <print_palette(unsigned char)+0x5cc>)
    1d10:	4832      	ldr	r0, [pc, #200]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d12:	f7fe fd63 	bl	7dc <Print::println(char const*)>
		break;
    1d16:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    1d18:	4956      	ldr	r1, [pc, #344]	; (1e74 <print_palette(unsigned char)+0x5d0>)
    1d1a:	4830      	ldr	r0, [pc, #192]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d1c:	f7fe fd5e 	bl	7dc <Print::println(char const*)>
		break;
    1d20:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    1d22:	4955      	ldr	r1, [pc, #340]	; (1e78 <print_palette(unsigned char)+0x5d4>)
    1d24:	482d      	ldr	r0, [pc, #180]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d26:	f7fe fd59 	bl	7dc <Print::println(char const*)>
		break;
    1d2a:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    1d2c:	4953      	ldr	r1, [pc, #332]	; (1e7c <print_palette(unsigned char)+0x5d8>)
    1d2e:	482b      	ldr	r0, [pc, #172]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d30:	f7fe fd54 	bl	7dc <Print::println(char const*)>
		break;
    1d34:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    1d36:	4952      	ldr	r1, [pc, #328]	; (1e80 <print_palette(unsigned char)+0x5dc>)
    1d38:	4828      	ldr	r0, [pc, #160]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d3a:	f7fe fd4f 	bl	7dc <Print::println(char const*)>
		break;
    1d3e:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    1d40:	4950      	ldr	r1, [pc, #320]	; (1e84 <print_palette(unsigned char)+0x5e0>)
    1d42:	4826      	ldr	r0, [pc, #152]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d44:	f7fe fd4a 	bl	7dc <Print::println(char const*)>
		break;
    1d48:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    1d4a:	494f      	ldr	r1, [pc, #316]	; (1e88 <print_palette(unsigned char)+0x5e4>)
    1d4c:	4823      	ldr	r0, [pc, #140]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d4e:	f7fe fd45 	bl	7dc <Print::println(char const*)>
		break;
    1d52:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    1d54:	494d      	ldr	r1, [pc, #308]	; (1e8c <print_palette(unsigned char)+0x5e8>)
    1d56:	4821      	ldr	r0, [pc, #132]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d58:	f7fe fd40 	bl	7dc <Print::println(char const*)>
		break;
    1d5c:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    1d5e:	494c      	ldr	r1, [pc, #304]	; (1e90 <print_palette(unsigned char)+0x5ec>)
    1d60:	481e      	ldr	r0, [pc, #120]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d62:	f7fe fd3b 	bl	7dc <Print::println(char const*)>
		break;
    1d66:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    1d68:	494a      	ldr	r1, [pc, #296]	; (1e94 <print_palette(unsigned char)+0x5f0>)
    1d6a:	481c      	ldr	r0, [pc, #112]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d6c:	f7fe fd36 	bl	7dc <Print::println(char const*)>
		break;
    1d70:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    1d72:	4949      	ldr	r1, [pc, #292]	; (1e98 <print_palette(unsigned char)+0x5f4>)
    1d74:	4819      	ldr	r0, [pc, #100]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d76:	f7fe fd31 	bl	7dc <Print::println(char const*)>
		break;
    1d7a:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    1d7c:	4947      	ldr	r1, [pc, #284]	; (1e9c <print_palette(unsigned char)+0x5f8>)
    1d7e:	4817      	ldr	r0, [pc, #92]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d80:	f7fe fd2c 	bl	7dc <Print::println(char const*)>
		break;
    1d84:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    1d86:	4946      	ldr	r1, [pc, #280]	; (1ea0 <print_palette(unsigned char)+0x5fc>)
    1d88:	4814      	ldr	r0, [pc, #80]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d8a:	f7fe fd27 	bl	7dc <Print::println(char const*)>
		break;
    1d8e:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1d90:	4944      	ldr	r1, [pc, #272]	; (1ea4 <print_palette(unsigned char)+0x600>)
    1d92:	4812      	ldr	r0, [pc, #72]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d94:	f7fe fd22 	bl	7dc <Print::println(char const*)>
		break;
    1d98:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    1d9a:	4943      	ldr	r1, [pc, #268]	; (1ea8 <print_palette(unsigned char)+0x604>)
    1d9c:	480f      	ldr	r0, [pc, #60]	; (1ddc <print_palette(unsigned char)+0x538>)
    1d9e:	f7fe fd1d 	bl	7dc <Print::println(char const*)>
		break;
    1da2:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    1da4:	4941      	ldr	r1, [pc, #260]	; (1eac <print_palette(unsigned char)+0x608>)
    1da6:	480d      	ldr	r0, [pc, #52]	; (1ddc <print_palette(unsigned char)+0x538>)
    1da8:	f7fe fd18 	bl	7dc <Print::println(char const*)>
		break;
    1dac:	bd10      	pop	{r4, pc}
	case 1:
		Serial.println("rgi_15_gp");
		break;

	case 2:
		Serial.println("Analogous_1_gp");
    1dae:	4940      	ldr	r1, [pc, #256]	; (1eb0 <print_palette(unsigned char)+0x60c>)
    1db0:	480a      	ldr	r0, [pc, #40]	; (1ddc <print_palette(unsigned char)+0x538>)
    1db2:	f7fe fd13 	bl	7dc <Print::println(char const*)>
		break;
    1db6:	bd10      	pop	{r4, pc}
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    1db8:	493e      	ldr	r1, [pc, #248]	; (1eb4 <print_palette(unsigned char)+0x610>)
    1dba:	4808      	ldr	r0, [pc, #32]	; (1ddc <print_palette(unsigned char)+0x538>)
    1dbc:	f7fe fd0e 	bl	7dc <Print::println(char const*)>
		break;
    1dc0:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    1dc2:	493d      	ldr	r1, [pc, #244]	; (1eb8 <print_palette(unsigned char)+0x614>)
    1dc4:	4805      	ldr	r0, [pc, #20]	; (1ddc <print_palette(unsigned char)+0x538>)
    1dc6:	f7fe fd09 	bl	7dc <Print::println(char const*)>
		break;
    1dca:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    1dcc:	493b      	ldr	r1, [pc, #236]	; (1ebc <print_palette(unsigned char)+0x618>)
    1dce:	4803      	ldr	r0, [pc, #12]	; (1ddc <print_palette(unsigned char)+0x538>)
    1dd0:	f7fe fd04 	bl	7dc <Print::println(char const*)>
    1dd4:	bd10      	pop	{r4, pc}
    1dd6:	bf00      	nop
    1dd8:	0000c728 	.word	0x0000c728
    1ddc:	1fff8760 	.word	0x1fff8760
    1de0:	0000c718 	.word	0x0000c718
    1de4:	0000c70c 	.word	0x0000c70c
    1de8:	0000c700 	.word	0x0000c700
    1dec:	0000c6f4 	.word	0x0000c6f4
    1df0:	0000c6e0 	.word	0x0000c6e0
    1df4:	0000c6d4 	.word	0x0000c6d4
    1df8:	0000c6c8 	.word	0x0000c6c8
    1dfc:	0000c6bc 	.word	0x0000c6bc
    1e00:	0000c6a4 	.word	0x0000c6a4
    1e04:	0000c69c 	.word	0x0000c69c
    1e08:	0000c734 	.word	0x0000c734
    1e0c:	0000c690 	.word	0x0000c690
    1e10:	0000c684 	.word	0x0000c684
    1e14:	0000c670 	.word	0x0000c670
    1e18:	0000c65c 	.word	0x0000c65c
    1e1c:	0000c64c 	.word	0x0000c64c
    1e20:	0000c640 	.word	0x0000c640
    1e24:	0000c634 	.word	0x0000c634
    1e28:	0000c628 	.word	0x0000c628
    1e2c:	0000c61c 	.word	0x0000c61c
    1e30:	0000c610 	.word	0x0000c610
    1e34:	0000c604 	.word	0x0000c604
    1e38:	0000c5f8 	.word	0x0000c5f8
    1e3c:	0000c5ec 	.word	0x0000c5ec
    1e40:	0000c5e0 	.word	0x0000c5e0
    1e44:	0000c5d4 	.word	0x0000c5d4
    1e48:	0000c5c8 	.word	0x0000c5c8
    1e4c:	0000c5b8 	.word	0x0000c5b8
    1e50:	0000c5a4 	.word	0x0000c5a4
    1e54:	0000c588 	.word	0x0000c588
    1e58:	0000c570 	.word	0x0000c570
    1e5c:	0000c554 	.word	0x0000c554
    1e60:	0000c544 	.word	0x0000c544
    1e64:	0000c534 	.word	0x0000c534
    1e68:	0000c520 	.word	0x0000c520
    1e6c:	0000c510 	.word	0x0000c510
    1e70:	0000c508 	.word	0x0000c508
    1e74:	0000c500 	.word	0x0000c500
    1e78:	0000c4e8 	.word	0x0000c4e8
    1e7c:	0000c4d8 	.word	0x0000c4d8
    1e80:	0000c4d0 	.word	0x0000c4d0
    1e84:	0000c4c0 	.word	0x0000c4c0
    1e88:	0000c4b0 	.word	0x0000c4b0
    1e8c:	0000c4a0 	.word	0x0000c4a0
    1e90:	0000c48c 	.word	0x0000c48c
    1e94:	0000c478 	.word	0x0000c478
    1e98:	0000c464 	.word	0x0000c464
    1e9c:	0000c44c 	.word	0x0000c44c
    1ea0:	0000c434 	.word	0x0000c434
    1ea4:	0000c424 	.word	0x0000c424
    1ea8:	0000c410 	.word	0x0000c410
    1eac:	0000c3fc 	.word	0x0000c3fc
    1eb0:	0000c3ec 	.word	0x0000c3ec
    1eb4:	0000c3e0 	.word	0x0000c3e0
    1eb8:	0000c3d4 	.word	0x0000c3d4
    1ebc:	0000c97c 	.word	0x0000c97c

00001ec0 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    1ec0:	b510      	push	{r4, lr}
    1ec2:	2100      	movs	r1, #0
    1ec4:	4604      	mov	r4, r0
    1ec6:	48a0      	ldr	r0, [pc, #640]	; (2148 <LEDDebug(LEDStruct&)+0x288>)
    1ec8:	f008 fbec 	bl	a6a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1ecc:	489f      	ldr	r0, [pc, #636]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1ece:	f008 fded 	bl	aaac <Print::println()>
    1ed2:	2132      	movs	r1, #50	; 0x32
    1ed4:	489e      	ldr	r0, [pc, #632]	; (2150 <LEDDebug(LEDStruct&)+0x290>)
    1ed6:	f008 fbe5 	bl	a6a4 <usb_serial_write>
    1eda:	489c      	ldr	r0, [pc, #624]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1edc:	f008 fde6 	bl	aaac <Print::println()>
    1ee0:	2112      	movs	r1, #18
    1ee2:	489c      	ldr	r0, [pc, #624]	; (2154 <LEDDebug(LEDStruct&)+0x294>)
    1ee4:	f008 fbde 	bl	a6a4 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    1ee8:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    1eec:	2b00      	cmp	r3, #0
    1eee:	f000 8082 	beq.w	1ff6 <LEDDebug(LEDStruct&)+0x136>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1ef2:	2b01      	cmp	r3, #1
    1ef4:	f000 83a1 	beq.w	263a <LEDDebug(LEDStruct&)+0x77a>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1ef8:	2b02      	cmp	r3, #2
    1efa:	f000 83a3 	beq.w	2644 <LEDDebug(LEDStruct&)+0x784>
    1efe:	2112      	movs	r1, #18
    1f00:	4895      	ldr	r0, [pc, #596]	; (2158 <LEDDebug(LEDStruct&)+0x298>)
    1f02:	f008 fbcf 	bl	a6a4 <usb_serial_write>

	// Print Standard Variables
	Serial.print("Brightness:       ");
	Serial.println(max_bright);
    1f06:	4b95      	ldr	r3, [pc, #596]	; (215c <LEDDebug(LEDStruct&)+0x29c>)
    1f08:	4890      	ldr	r0, [pc, #576]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f0a:	7819      	ldrb	r1, [r3, #0]
    1f0c:	f7fe fc78 	bl	800 <Print::println(unsigned char)>
    1f10:	2112      	movs	r1, #18
    1f12:	4893      	ldr	r0, [pc, #588]	; (2160 <LEDDebug(LEDStruct&)+0x2a0>)
    1f14:	f008 fbc6 	bl	a6a4 <usb_serial_write>
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
    1f18:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1f1c:	488b      	ldr	r0, [pc, #556]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f1e:	f7fe fc6f 	bl	800 <Print::println(unsigned char)>
    1f22:	2112      	movs	r1, #18
    1f24:	488f      	ldr	r0, [pc, #572]	; (2164 <LEDDebug(LEDStruct&)+0x2a4>)
    1f26:	f008 fbbd 	bl	a6a4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1f2a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    1f2e:	4887      	ldr	r0, [pc, #540]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f30:	f008 fe0c 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1f34:	4885      	ldr	r0, [pc, #532]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f36:	f008 fdb9 	bl	aaac <Print::println()>
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1f3a:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    1f3e:	2b00      	cmp	r3, #0
    1f40:	d154      	bne.n	1fec <LEDDebug(LEDStruct&)+0x12c>
    1f42:	2112      	movs	r1, #18
    1f44:	4888      	ldr	r0, [pc, #544]	; (2168 <LEDDebug(LEDStruct&)+0x2a8>)
    1f46:	f008 fbad 	bl	a6a4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1f4a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    1f4e:	487f      	ldr	r0, [pc, #508]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f50:	f008 fdfc 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1f54:	487d      	ldr	r0, [pc, #500]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f56:	f008 fda9 	bl	aaac <Print::println()>
    1f5a:	2112      	movs	r1, #18
    1f5c:	4883      	ldr	r0, [pc, #524]	; (216c <LEDDebug(LEDStruct&)+0x2ac>)
    1f5e:	f008 fba1 	bl	a6a4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1f62:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    1f66:	4879      	ldr	r0, [pc, #484]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f68:	f008 fdf0 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1f6c:	4877      	ldr	r0, [pc, #476]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f6e:	f008 fd9d 	bl	aaac <Print::println()>
    1f72:	2112      	movs	r1, #18
    1f74:	487e      	ldr	r0, [pc, #504]	; (2170 <LEDDebug(LEDStruct&)+0x2b0>)
    1f76:	f008 fb95 	bl	a6a4 <usb_serial_write>
	Serial.print("use_full_range:   ");
	Serial.println(leds.use_full_range);
	Serial.print("this_dir:         ");
	Serial.println(leds.this_dir);
	Serial.print("mode_number:      ");
	Serial.println(leds.mode_number);
    1f7a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    1f7e:	4873      	ldr	r0, [pc, #460]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f80:	f7fe fc3e 	bl	800 <Print::println(unsigned char)>
    1f84:	2112      	movs	r1, #18
    1f86:	487b      	ldr	r0, [pc, #492]	; (2174 <LEDDebug(LEDStruct&)+0x2b4>)
    1f88:	f008 fb8c 	bl	a6a4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1f8c:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1f90:	486e      	ldr	r0, [pc, #440]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f92:	f008 fddb 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1f96:	486d      	ldr	r0, [pc, #436]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1f98:	f008 fd88 	bl	aaac <Print::println()>
    1f9c:	2119      	movs	r1, #25
    1f9e:	4876      	ldr	r0, [pc, #472]	; (2178 <LEDDebug(LEDStruct&)+0x2b8>)
    1fa0:	f008 fb80 	bl	a6a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1fa4:	4869      	ldr	r0, [pc, #420]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    1fa6:	f008 fd81 	bl	aaac <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    1faa:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    1fae:	2b19      	cmp	r3, #25
    1fb0:	f200 8336 	bhi.w	2620 <LEDDebug(LEDStruct&)+0x760>
    1fb4:	e8df f013 	tbh	[pc, r3, lsl #1]
    1fb8:	0334004d 	.word	0x0334004d
    1fbc:	03340334 	.word	0x03340334
    1fc0:	00a30334 	.word	0x00a30334
    1fc4:	03340334 	.word	0x03340334
    1fc8:	03340104 	.word	0x03340104
    1fcc:	03340334 	.word	0x03340334
    1fd0:	03340334 	.word	0x03340334
    1fd4:	01430334 	.word	0x01430334
    1fd8:	014d0148 	.word	0x014d0148
    1fdc:	01600152 	.word	0x01600152
    1fe0:	021501ad 	.word	0x021501ad
    1fe4:	02d902a4 	.word	0x02d902a4
    1fe8:	002702f6 	.word	0x002702f6
	Serial.println(max_bright);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1fec:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    1ff0:	f7ff fc58 	bl	18a4 <print_palette(unsigned char)>
    1ff4:	e7a5      	b.n	1f42 <LEDDebug(LEDStruct&)+0x82>
    1ff6:	2107      	movs	r1, #7
    1ff8:	4860      	ldr	r0, [pc, #384]	; (217c <LEDDebug(LEDStruct&)+0x2bc>)
    1ffa:	f008 fb53 	bl	a6a4 <usb_serial_write>
    1ffe:	4853      	ldr	r0, [pc, #332]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2000:	f008 fd54 	bl	aaac <Print::println()>
    2004:	e77b      	b.n	1efe <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("bounce_rainbow:    ");
			Serial.println(leds.bounce_rainbow);
			break;

		case BOUNCING_BALLS:
			Serial.println("=====BOUNCING BALLS=====");
    2006:	495e      	ldr	r1, [pc, #376]	; (2180 <LEDDebug(LEDStruct&)+0x2c0>)
    2008:	4850      	ldr	r0, [pc, #320]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    200a:	f7fe fbe7 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    200e:	495d      	ldr	r1, [pc, #372]	; (2184 <LEDDebug(LEDStruct&)+0x2c4>)
    2010:	484e      	ldr	r0, [pc, #312]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2012:	f7fe fbd5 	bl	7c0 <Print::write(char const*)>
			Serial.print("fade:\t\t");
			Serial.println(leds.bouncing_fade);
    2016:	f894 1766 	ldrb.w	r1, [r4, #1894]	; 0x766
    201a:	484c      	ldr	r0, [pc, #304]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    201c:	f7fe fbf0 	bl	800 <Print::println(unsigned char)>
    2020:	4959      	ldr	r1, [pc, #356]	; (2188 <LEDDebug(LEDStruct&)+0x2c8>)
    2022:	484a      	ldr	r0, [pc, #296]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2024:	f7fe fbcc 	bl	7c0 <Print::write(char const*)>
			Serial.print("number of balls: ");
			Serial.println(leds.number_of_balls);
    2028:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    202c:	4847      	ldr	r0, [pc, #284]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    202e:	f7fe fbe7 	bl	800 <Print::println(unsigned char)>
    2032:	2119      	movs	r1, #25
    2034:	4850      	ldr	r0, [pc, #320]	; (2178 <LEDDebug(LEDStruct&)+0x2b8>)
    2036:	f008 fb35 	bl	a6a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    203a:	4844      	ldr	r0, [pc, #272]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    203c:	f008 fd36 	bl	aaac <Print::println()>
    2040:	2100      	movs	r1, #0
    2042:	4841      	ldr	r0, [pc, #260]	; (2148 <LEDDebug(LEDStruct&)+0x288>)
    2044:	f008 fb2e 	bl	a6a4 <usb_serial_write>
    2048:	4840      	ldr	r0, [pc, #256]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    204a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    204e:	f008 bd2d 	b.w	aaac <Print::println()>
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("===JUGGLE VARIABLES===");
    2052:	494e      	ldr	r1, [pc, #312]	; (218c <LEDDebug(LEDStruct&)+0x2cc>)
    2054:	483d      	ldr	r0, [pc, #244]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2056:	f7fe fbc1 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    205a:	494d      	ldr	r1, [pc, #308]	; (2190 <LEDDebug(LEDStruct&)+0x2d0>)
    205c:	483b      	ldr	r0, [pc, #236]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    205e:	f7fe fbaf 	bl	7c0 <Print::write(char const*)>
			Serial.print("index:         ");
			Serial.println(leds.juggle_index);
    2062:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2066:	4839      	ldr	r0, [pc, #228]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2068:	f7fe fbca 	bl	800 <Print::println(unsigned char)>
    206c:	4949      	ldr	r1, [pc, #292]	; (2194 <LEDDebug(LEDStruct&)+0x2d4>)
    206e:	4837      	ldr	r0, [pc, #220]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2070:	f7fe fba6 	bl	7c0 <Print::write(char const*)>
			Serial.print("numdots:       ");
			Serial.println(leds.juggle_numdots);
    2074:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2078:	4834      	ldr	r0, [pc, #208]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    207a:	f7fe fbc1 	bl	800 <Print::println(unsigned char)>
    207e:	4946      	ldr	r1, [pc, #280]	; (2198 <LEDDebug(LEDStruct&)+0x2d8>)
    2080:	4832      	ldr	r0, [pc, #200]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2082:	f7fe fb9d 	bl	7c0 <Print::write(char const*)>
			Serial.print("beat:          ");
			Serial.println(leds.juggle_beat);
    2086:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    208a:	4830      	ldr	r0, [pc, #192]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    208c:	f7fe fbb8 	bl	800 <Print::println(unsigned char)>
    2090:	4942      	ldr	r1, [pc, #264]	; (219c <LEDDebug(LEDStruct&)+0x2dc>)
    2092:	482e      	ldr	r0, [pc, #184]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2094:	f7fe fb94 	bl	7c0 <Print::write(char const*)>
			Serial.print("fade:          ");
			Serial.println(leds.juggle_fade);
    2098:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    209c:	482b      	ldr	r0, [pc, #172]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    209e:	f7fe fbaf 	bl	800 <Print::println(unsigned char)>
    20a2:	493f      	ldr	r1, [pc, #252]	; (21a0 <LEDDebug(LEDStruct&)+0x2e0>)
    20a4:	4829      	ldr	r0, [pc, #164]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20a6:	f7fe fb8b 	bl	7c0 <Print::write(char const*)>
			Serial.print("diff:          ");
			Serial.println(leds.juggle_diff);
    20aa:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    20ae:	4827      	ldr	r0, [pc, #156]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20b0:	f7fe fba6 	bl	800 <Print::println(unsigned char)>
    20b4:	493b      	ldr	r1, [pc, #236]	; (21a4 <LEDDebug(LEDStruct&)+0x2e4>)
    20b6:	4825      	ldr	r0, [pc, #148]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20b8:	f7fe fb82 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    20bc:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    20c0:	4822      	ldr	r0, [pc, #136]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20c2:	f008 fd43 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    20c6:	4821      	ldr	r0, [pc, #132]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20c8:	f008 fcf0 	bl	aaac <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    20cc:	4936      	ldr	r1, [pc, #216]	; (21a8 <LEDDebug(LEDStruct&)+0x2e8>)
    20ce:	481f      	ldr	r0, [pc, #124]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20d0:	f7fe fb76 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    20d4:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    20d8:	481c      	ldr	r0, [pc, #112]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20da:	f008 fd37 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    20de:	481b      	ldr	r0, [pc, #108]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20e0:	f008 fce4 	bl	aaac <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    20e4:	4931      	ldr	r1, [pc, #196]	; (21ac <LEDDebug(LEDStruct&)+0x2ec>)
    20e6:	4819      	ldr	r0, [pc, #100]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20e8:	f7fe fb6a 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    20ec:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    20f0:	4816      	ldr	r0, [pc, #88]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20f2:	f008 fd2b 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    20f6:	4815      	ldr	r0, [pc, #84]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    20f8:	f008 fcd8 	bl	aaac <Print::println()>
    20fc:	e799      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    20fe:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    2102:	2b00      	cmp	r3, #0
    2104:	f000 82a3 	beq.w	264e <LEDDebug(LEDStruct&)+0x78e>
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
    2108:	4929      	ldr	r1, [pc, #164]	; (21b0 <LEDDebug(LEDStruct&)+0x2f0>)
    210a:	4810      	ldr	r0, [pc, #64]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    210c:	f7fe fb66 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2110:	4928      	ldr	r1, [pc, #160]	; (21b4 <LEDDebug(LEDStruct&)+0x2f4>)
    2112:	480e      	ldr	r0, [pc, #56]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2114:	f7fe fb54 	bl	7c0 <Print::write(char const*)>
			Serial.print("index:     ");
			Serial.println(leds.rainbow_index);
    2118:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    211c:	480b      	ldr	r0, [pc, #44]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    211e:	f7fe fb6f 	bl	800 <Print::println(unsigned char)>
    2122:	4925      	ldr	r1, [pc, #148]	; (21b8 <LEDDebug(LEDStruct&)+0x2f8>)
    2124:	4809      	ldr	r0, [pc, #36]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2126:	f7fe fb4b 	bl	7c0 <Print::write(char const*)>
			Serial.print("diff:      ");
			Serial.println(leds.rainbow_diff);
    212a:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    212e:	4807      	ldr	r0, [pc, #28]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2130:	f7fe fb66 	bl	800 <Print::println(unsigned char)>
    2134:	4921      	ldr	r1, [pc, #132]	; (21bc <LEDDebug(LEDStruct&)+0x2fc>)
    2136:	4805      	ldr	r0, [pc, #20]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2138:	f7fe fb42 	bl	7c0 <Print::write(char const*)>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
    213c:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2140:	4802      	ldr	r0, [pc, #8]	; (214c <LEDDebug(LEDStruct&)+0x28c>)
    2142:	f7fe fb5d 	bl	800 <Print::println(unsigned char)>
			break;
    2146:	e774      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
    2148:	0000cfcc 	.word	0x0000cfcc
    214c:	1fff8760 	.word	0x1fff8760
    2150:	0000c994 	.word	0x0000c994
    2154:	0000c9c8 	.word	0x0000c9c8
    2158:	0000c9f4 	.word	0x0000c9f4
    215c:	1fff8727 	.word	0x1fff8727
    2160:	0000ca08 	.word	0x0000ca08
    2164:	0000ca1c 	.word	0x0000ca1c
    2168:	0000ca30 	.word	0x0000ca30
    216c:	0000ca44 	.word	0x0000ca44
    2170:	0000ca58 	.word	0x0000ca58
    2174:	0000ca6c 	.word	0x0000ca6c
    2178:	0000ca80 	.word	0x0000ca80
    217c:	0000c9dc 	.word	0x0000c9dc
    2180:	0000cf20 	.word	0x0000cf20
    2184:	0000cf3c 	.word	0x0000cf3c
    2188:	0000cf44 	.word	0x0000cf44
    218c:	0000ca9c 	.word	0x0000ca9c
    2190:	0000cab4 	.word	0x0000cab4
    2194:	0000cac4 	.word	0x0000cac4
    2198:	0000cad4 	.word	0x0000cad4
    219c:	0000cae4 	.word	0x0000cae4
    21a0:	0000caf4 	.word	0x0000caf4
    21a4:	0000cb04 	.word	0x0000cb04
    21a8:	0000cb14 	.word	0x0000cb14
    21ac:	0000cb24 	.word	0x0000cb24
    21b0:	0000cb48 	.word	0x0000cb48
    21b4:	0000cb64 	.word	0x0000cb64
    21b8:	0000ceec 	.word	0x0000ceec
    21bc:	0000cd28 	.word	0x0000cd28

		case FIRE:
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { Serial.print("=====TORCH"); }
    21c0:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    21c4:	48a9      	ldr	r0, [pc, #676]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    21c6:	3b0d      	subs	r3, #13
    21c8:	2b01      	cmp	r3, #1
    21ca:	bf94      	ite	ls
    21cc:	49a8      	ldrls	r1, [pc, #672]	; (2470 <LEDDebug(LEDStruct&)+0x5b0>)
    21ce:	49a9      	ldrhi	r1, [pc, #676]	; (2474 <LEDDebug(LEDStruct&)+0x5b4>)
    21d0:	f7fe faf6 	bl	7c0 <Print::write(char const*)>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    21d4:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    21d8:	2b00      	cmp	r3, #0
    21da:	f040 8255 	bne.w	2688 <LEDDebug(LEDStruct&)+0x7c8>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    21de:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    21e2:	2b00      	cmp	r3, #0
    21e4:	f040 8238 	bne.w	2658 <LEDDebug(LEDStruct&)+0x798>
			Serial.println("=====");
    21e8:	49a3      	ldr	r1, [pc, #652]	; (2478 <LEDDebug(LEDStruct&)+0x5b8>)
    21ea:	48a0      	ldr	r0, [pc, #640]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    21ec:	f7fe faf6 	bl	7dc <Print::println(char const*)>
    21f0:	49a2      	ldr	r1, [pc, #648]	; (247c <LEDDebug(LEDStruct&)+0x5bc>)
    21f2:	489e      	ldr	r0, [pc, #632]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    21f4:	f7fe fae4 	bl	7c0 <Print::write(char const*)>
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
    21f8:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    21fc:	489b      	ldr	r0, [pc, #620]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    21fe:	f7fe faff 	bl	800 <Print::println(unsigned char)>
    2202:	499f      	ldr	r1, [pc, #636]	; (2480 <LEDDebug(LEDStruct&)+0x5c0>)
    2204:	4899      	ldr	r0, [pc, #612]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2206:	f7fe fadb 	bl	7c0 <Print::write(char const*)>
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
    220a:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    220e:	4897      	ldr	r0, [pc, #604]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2210:	f7fe faf6 	bl	800 <Print::println(unsigned char)>
			if (!leds.fire_sync) {
    2214:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    2218:	2b00      	cmp	r3, #0
    221a:	f000 8222 	beq.w	2662 <LEDDebug(LEDStruct&)+0x7a2>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    221e:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    2222:	3b0d      	subs	r3, #13
    2224:	2b01      	cmp	r3, #1
    2226:	f63f af04 	bhi.w	2032 <LEDDebug(LEDStruct&)+0x172>
    222a:	4996      	ldr	r1, [pc, #600]	; (2484 <LEDDebug(LEDStruct&)+0x5c4>)
    222c:	488f      	ldr	r0, [pc, #572]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    222e:	f7fe fac7 	bl	7c0 <Print::write(char const*)>
				Serial.print("torch_diff:  ");
				Serial.println(leds.torch_diff);
    2232:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    2236:	488d      	ldr	r0, [pc, #564]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2238:	f7fe fae2 	bl	800 <Print::println(unsigned char)>
    223c:	e6f9      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			}
			break;
		
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
    223e:	4992      	ldr	r1, [pc, #584]	; (2488 <LEDDebug(LEDStruct&)+0x5c8>)
    2240:	488a      	ldr	r0, [pc, #552]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2242:	f7fe facb 	bl	7dc <Print::println(char const*)>
			break;
    2246:	e6f4      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>

		case PRIDE:
			Serial.println("=====PRIDE=====");
    2248:	4990      	ldr	r1, [pc, #576]	; (248c <LEDDebug(LEDStruct&)+0x5cc>)
    224a:	4888      	ldr	r0, [pc, #544]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    224c:	f7fe fac6 	bl	7dc <Print::println(char const*)>
			break;
    2250:	e6ef      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>

		case PACIFICA:
			Serial.println("=====PACIFCIA=====");
    2252:	498f      	ldr	r1, [pc, #572]	; (2490 <LEDDebug(LEDStruct&)+0x5d0>)
    2254:	4885      	ldr	r0, [pc, #532]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2256:	f7fe fac1 	bl	7dc <Print::println(char const*)>
			break;
    225a:	e6ea      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>

		case CONFETTI:
			Serial.println("=====CONFETTI=====");
    225c:	498d      	ldr	r1, [pc, #564]	; (2494 <LEDDebug(LEDStruct&)+0x5d4>)
    225e:	4883      	ldr	r0, [pc, #524]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2260:	f7fe fabc 	bl	7dc <Print::println(char const*)>
    2264:	498c      	ldr	r1, [pc, #560]	; (2498 <LEDDebug(LEDStruct&)+0x5d8>)
    2266:	4881      	ldr	r0, [pc, #516]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2268:	f7fe faaa 	bl	7c0 <Print::write(char const*)>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
    226c:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2270:	487e      	ldr	r0, [pc, #504]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2272:	f7fe fac5 	bl	800 <Print::println(unsigned char)>
			break;
    2276:	e6dc      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			Serial.print("Next explosion time: ");
			Serial.println(leds.next_explosion_time);
			break;

		case ONE_SIN:
			Serial.println("=====ONE_SIN=====");
    2278:	4988      	ldr	r1, [pc, #544]	; (249c <LEDDebug(LEDStruct&)+0x5dc>)
    227a:	487c      	ldr	r0, [pc, #496]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    227c:	f7fe faae 	bl	7dc <Print::println(char const*)>
    2280:	4987      	ldr	r1, [pc, #540]	; (24a0 <LEDDebug(LEDStruct&)+0x5e0>)
    2282:	487a      	ldr	r0, [pc, #488]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2284:	f7fe fa9c 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_inc:       ");
			Serial.println(leds.sin_inc);
    2288:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    228c:	4877      	ldr	r0, [pc, #476]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    228e:	f7fe fab7 	bl	800 <Print::println(unsigned char)>
    2292:	4984      	ldr	r1, [pc, #528]	; (24a4 <LEDDebug(LEDStruct&)+0x5e4>)
    2294:	4875      	ldr	r0, [pc, #468]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2296:	f7fe fa93 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    229a:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    229e:	4873      	ldr	r0, [pc, #460]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22a0:	f7fe faae 	bl	800 <Print::println(unsigned char)>
    22a4:	4980      	ldr	r1, [pc, #512]	; (24a8 <LEDDebug(LEDStruct&)+0x5e8>)
    22a6:	4871      	ldr	r0, [pc, #452]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22a8:	f7fe fa8a 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    22ac:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    22b0:	486e      	ldr	r0, [pc, #440]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22b2:	f7fe faa5 	bl	800 <Print::println(unsigned char)>
    22b6:	497d      	ldr	r1, [pc, #500]	; (24ac <LEDDebug(LEDStruct&)+0x5ec>)
    22b8:	486c      	ldr	r0, [pc, #432]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22ba:	f7fe fa81 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    22be:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    22c2:	486a      	ldr	r0, [pc, #424]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22c4:	f7fe fa9c 	bl	800 <Print::println(unsigned char)>
    22c8:	4979      	ldr	r1, [pc, #484]	; (24b0 <LEDDebug(LEDStruct&)+0x5f0>)
    22ca:	4868      	ldr	r0, [pc, #416]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22cc:	f7fe fa78 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    22d0:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    22d4:	4865      	ldr	r0, [pc, #404]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22d6:	f7fe fa93 	bl	800 <Print::println(unsigned char)>
    22da:	4976      	ldr	r1, [pc, #472]	; (24b4 <LEDDebug(LEDStruct&)+0x5f4>)
    22dc:	4863      	ldr	r0, [pc, #396]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22de:	f7fe fa6f 	bl	7c0 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    22e2:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    22e6:	4861      	ldr	r0, [pc, #388]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22e8:	f7fe fa8a 	bl	800 <Print::println(unsigned char)>
    22ec:	4972      	ldr	r1, [pc, #456]	; (24b8 <LEDDebug(LEDStruct&)+0x5f8>)
    22ee:	485f      	ldr	r0, [pc, #380]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22f0:	f7fe fa66 	bl	7c0 <Print::write(char const*)>
			Serial.print("bg_clr:        ");
			Serial.println(leds.bg_clr);
    22f4:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    22f8:	485c      	ldr	r0, [pc, #368]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    22fa:	f7fe fa81 	bl	800 <Print::println(unsigned char)>
    22fe:	496f      	ldr	r1, [pc, #444]	; (24bc <LEDDebug(LEDStruct&)+0x5fc>)
    2300:	485a      	ldr	r0, [pc, #360]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2302:	f7fe fa5d 	bl	7c0 <Print::write(char const*)>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
    2306:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    230a:	4858      	ldr	r0, [pc, #352]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    230c:	f7fe fa78 	bl	800 <Print::println(unsigned char)>
			break;
    2310:	e68f      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>

		case TWO_SIN:
			Serial.println("=====TWO_SIN=====");
    2312:	496b      	ldr	r1, [pc, #428]	; (24c0 <LEDDebug(LEDStruct&)+0x600>)
    2314:	4855      	ldr	r0, [pc, #340]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2316:	f7fe fa61 	bl	7dc <Print::println(char const*)>
    231a:	496a      	ldr	r1, [pc, #424]	; (24c4 <LEDDebug(LEDStruct&)+0x604>)
    231c:	4853      	ldr	r0, [pc, #332]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    231e:	f7fe fa4f 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_hue:       ");
			Serial.println(leds.sin_inc);
    2322:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2326:	4851      	ldr	r0, [pc, #324]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2328:	f7fe fa6a 	bl	800 <Print::println(unsigned char)>
    232c:	495d      	ldr	r1, [pc, #372]	; (24a4 <LEDDebug(LEDStruct&)+0x5e4>)
    232e:	484f      	ldr	r0, [pc, #316]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2330:	f7fe fa46 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    2334:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2338:	484c      	ldr	r0, [pc, #304]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    233a:	f7fe fa61 	bl	800 <Print::println(unsigned char)>
    233e:	495a      	ldr	r1, [pc, #360]	; (24a8 <LEDDebug(LEDStruct&)+0x5e8>)
    2340:	484a      	ldr	r0, [pc, #296]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2342:	f7fe fa3d 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    2346:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    234a:	4848      	ldr	r0, [pc, #288]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    234c:	f7fe fa58 	bl	800 <Print::println(unsigned char)>
    2350:	4956      	ldr	r1, [pc, #344]	; (24ac <LEDDebug(LEDStruct&)+0x5ec>)
    2352:	4846      	ldr	r0, [pc, #280]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2354:	f7fe fa34 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    2358:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    235c:	4843      	ldr	r0, [pc, #268]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    235e:	f7fe fa4f 	bl	800 <Print::println(unsigned char)>
    2362:	4953      	ldr	r1, [pc, #332]	; (24b0 <LEDDebug(LEDStruct&)+0x5f0>)
    2364:	4841      	ldr	r0, [pc, #260]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2366:	f7fe fa2b 	bl	7c0 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    236a:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    236e:	483f      	ldr	r0, [pc, #252]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2370:	f7fe fa46 	bl	800 <Print::println(unsigned char)>
    2374:	4954      	ldr	r1, [pc, #336]	; (24c8 <LEDDebug(LEDStruct&)+0x608>)
    2376:	483d      	ldr	r0, [pc, #244]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2378:	f7fe fa22 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_hue:       ");
			Serial.println(leds.two_hue);
    237c:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2380:	483a      	ldr	r0, [pc, #232]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2382:	f7fe fa3d 	bl	800 <Print::println(unsigned char)>
    2386:	4951      	ldr	r1, [pc, #324]	; (24cc <LEDDebug(LEDStruct&)+0x60c>)
    2388:	4838      	ldr	r0, [pc, #224]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    238a:	f7fe fa19 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_speed:     ");
			Serial.println(leds.two_speed);
    238e:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2392:	4836      	ldr	r0, [pc, #216]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2394:	f7fe fa34 	bl	800 <Print::println(unsigned char)>
    2398:	494d      	ldr	r1, [pc, #308]	; (24d0 <LEDDebug(LEDStruct&)+0x610>)
    239a:	4834      	ldr	r0, [pc, #208]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    239c:	f7fe fa10 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_cutoff:    ");
			Serial.println(leds.two_cutoff);
    23a0:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    23a4:	4831      	ldr	r0, [pc, #196]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23a6:	f7fe fa2b 	bl	800 <Print::println(unsigned char)>
    23aa:	494a      	ldr	r1, [pc, #296]	; (24d4 <LEDDebug(LEDStruct&)+0x614>)
    23ac:	482f      	ldr	r0, [pc, #188]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23ae:	f7fe fa07 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_rot:       ");
			Serial.println(leds.two_rot);
    23b2:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    23b6:	482d      	ldr	r0, [pc, #180]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23b8:	f7fe fa22 	bl	800 <Print::println(unsigned char)>
    23bc:	4946      	ldr	r1, [pc, #280]	; (24d8 <LEDDebug(LEDStruct&)+0x618>)
    23be:	482b      	ldr	r0, [pc, #172]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23c0:	f7fe f9fe 	bl	7c0 <Print::write(char const*)>
			Serial.print("two_phase:     ");
			Serial.println(leds.two_phase);
    23c4:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    23c8:	4828      	ldr	r0, [pc, #160]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23ca:	f7fe fa19 	bl	800 <Print::println(unsigned char)>
    23ce:	4939      	ldr	r1, [pc, #228]	; (24b4 <LEDDebug(LEDStruct&)+0x5f4>)
    23d0:	4826      	ldr	r0, [pc, #152]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23d2:	f7fe f9f5 	bl	7c0 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    23d6:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    23da:	4824      	ldr	r0, [pc, #144]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23dc:	f7fe fa10 	bl	800 <Print::println(unsigned char)>
			break;
    23e0:	e627      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
			break;

		case FIREWORKS:
			Serial.println("=====FIREWORKS=====");
    23e2:	493e      	ldr	r1, [pc, #248]	; (24dc <LEDDebug(LEDStruct&)+0x61c>)
    23e4:	4821      	ldr	r0, [pc, #132]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23e6:	f7fe f9f9 	bl	7dc <Print::println(char const*)>
    23ea:	493d      	ldr	r1, [pc, #244]	; (24e0 <LEDDebug(LEDStruct&)+0x620>)
    23ec:	481f      	ldr	r0, [pc, #124]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23ee:	f7fe f9e7 	bl	7c0 <Print::write(char const*)>
			Serial.print("firework_position:   ");
			Serial.println(leds.firework_position);
    23f2:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    23f6:	481d      	ldr	r0, [pc, #116]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    23f8:	f7fe fa02 	bl	800 <Print::println(unsigned char)>
    23fc:	4939      	ldr	r1, [pc, #228]	; (24e4 <LEDDebug(LEDStruct&)+0x624>)
    23fe:	481b      	ldr	r0, [pc, #108]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2400:	f7fe f9de 	bl	7c0 <Print::write(char const*)>
			Serial.print("Current Stage:  ");
			switch (leds.current_stage) {
    2404:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2408:	2b01      	cmp	r3, #1
    240a:	d00a      	beq.n	2422 <LEDDebug(LEDStruct&)+0x562>
    240c:	d305      	bcc.n	241a <LEDDebug(LEDStruct&)+0x55a>
    240e:	2b02      	cmp	r3, #2
    2410:	d10b      	bne.n	242a <LEDDebug(LEDStruct&)+0x56a>
			case WAITING: Serial.println("WAITING");
    2412:	4935      	ldr	r1, [pc, #212]	; (24e8 <LEDDebug(LEDStruct&)+0x628>)
    2414:	4815      	ldr	r0, [pc, #84]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2416:	f7fe f9e1 	bl	7dc <Print::println(char const*)>
			case FADEUP: Serial.println("FADEUP");
    241a:	4934      	ldr	r1, [pc, #208]	; (24ec <LEDDebug(LEDStruct&)+0x62c>)
    241c:	4813      	ldr	r0, [pc, #76]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    241e:	f7fe f9dd 	bl	7dc <Print::println(char const*)>
			case EXPLOSION: Serial.println("EXPLOSION");
    2422:	4933      	ldr	r1, [pc, #204]	; (24f0 <LEDDebug(LEDStruct&)+0x630>)
    2424:	4811      	ldr	r0, [pc, #68]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2426:	f7fe f9d9 	bl	7dc <Print::println(char const*)>
    242a:	4932      	ldr	r1, [pc, #200]	; (24f4 <LEDDebug(LEDStruct&)+0x634>)
    242c:	480f      	ldr	r0, [pc, #60]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    242e:	f7fe f9c7 	bl	7c0 <Print::write(char const*)>
			}
			Serial.print("Number of sparks:  ");
			Serial.println(leds.number_of_sparks);
    2432:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2436:	480d      	ldr	r0, [pc, #52]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2438:	f7fe f9e2 	bl	800 <Print::println(unsigned char)>
    243c:	492e      	ldr	r1, [pc, #184]	; (24f8 <LEDDebug(LEDStruct&)+0x638>)
    243e:	480b      	ldr	r0, [pc, #44]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2440:	f7fe f9be 	bl	7c0 <Print::write(char const*)>
			Serial.print("Brightest spark:   ");
			Serial.println(leds.brightest_spark);
    2444:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2448:	4808      	ldr	r0, [pc, #32]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    244a:	f7fe f9d9 	bl	800 <Print::println(unsigned char)>
    244e:	492b      	ldr	r1, [pc, #172]	; (24fc <LEDDebug(LEDStruct&)+0x63c>)
    2450:	4806      	ldr	r0, [pc, #24]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2452:	f7fe f9b5 	bl	7c0 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2456:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    245a:	4804      	ldr	r0, [pc, #16]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    245c:	2300      	movs	r3, #0
    245e:	220a      	movs	r2, #10
    2460:	f008 fb34 	bl	aacc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2464:	4801      	ldr	r0, [pc, #4]	; (246c <LEDDebug(LEDStruct&)+0x5ac>)
    2466:	f008 fb21 	bl	aaac <Print::println()>
    246a:	e5e2      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
    246c:	1fff8760 	.word	0x1fff8760
    2470:	0000cb70 	.word	0x0000cb70
    2474:	0000cb7c 	.word	0x0000cb7c
    2478:	0000ca94 	.word	0x0000ca94
    247c:	0000cb98 	.word	0x0000cb98
    2480:	0000cba8 	.word	0x0000cba8
    2484:	0000cbd8 	.word	0x0000cbd8
    2488:	0000cbe8 	.word	0x0000cbe8
    248c:	0000cbfc 	.word	0x0000cbfc
    2490:	0000cc0c 	.word	0x0000cc0c
    2494:	0000cc20 	.word	0x0000cc20
    2498:	0000cc34 	.word	0x0000cc34
    249c:	0000cce0 	.word	0x0000cce0
    24a0:	0000ccf4 	.word	0x0000ccf4
    24a4:	0000cd04 	.word	0x0000cd04
    24a8:	0000cd14 	.word	0x0000cd14
    24ac:	0000cd24 	.word	0x0000cd24
    24b0:	0000cd34 	.word	0x0000cd34
    24b4:	0000cd44 	.word	0x0000cd44
    24b8:	0000cd54 	.word	0x0000cd54
    24bc:	0000cd64 	.word	0x0000cd64
    24c0:	0000cd74 	.word	0x0000cd74
    24c4:	0000cd88 	.word	0x0000cd88
    24c8:	0000cd98 	.word	0x0000cd98
    24cc:	0000cda8 	.word	0x0000cda8
    24d0:	0000cdb8 	.word	0x0000cdb8
    24d4:	0000cdc8 	.word	0x0000cdc8
    24d8:	0000cdd8 	.word	0x0000cdd8
    24dc:	0000cc44 	.word	0x0000cc44
    24e0:	0000cc58 	.word	0x0000cc58
    24e4:	0000cc70 	.word	0x0000cc70
    24e8:	0000cc84 	.word	0x0000cc84
    24ec:	0000cc8c 	.word	0x0000cc8c
    24f0:	0000cc94 	.word	0x0000cc94
    24f4:	0000cca0 	.word	0x0000cca0
    24f8:	0000ccb4 	.word	0x0000ccb4
    24fc:	0000ccc8 	.word	0x0000ccc8
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
			break;

		case SHOOTING_POLE:
			Serial.println("=====SHOOTING POLE=====");
    2500:	4964      	ldr	r1, [pc, #400]	; (2694 <LEDDebug(LEDStruct&)+0x7d4>)
    2502:	4865      	ldr	r0, [pc, #404]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2504:	f7fe f96a 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2508:	4964      	ldr	r1, [pc, #400]	; (269c <LEDDebug(LEDStruct&)+0x7dc>)
    250a:	4863      	ldr	r0, [pc, #396]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    250c:	f7fe f958 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2510:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2514:	4860      	ldr	r0, [pc, #384]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2516:	f008 fb19 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    251a:	485f      	ldr	r0, [pc, #380]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    251c:	f008 fac6 	bl	aaac <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2520:	495f      	ldr	r1, [pc, #380]	; (26a0 <LEDDebug(LEDStruct&)+0x7e0>)
    2522:	485d      	ldr	r0, [pc, #372]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2524:	f7fe f94c 	bl	7c0 <Print::write(char const*)>
			Serial.print("strip_range:     ");
			Serial.println(leds.strip_range);
			Serial.print("pole_diff:       ");
			Serial.println(leds.pole_diff);
    2528:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    252c:	485a      	ldr	r0, [pc, #360]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    252e:	f7fe f967 	bl	800 <Print::println(unsigned char)>
    2532:	495c      	ldr	r1, [pc, #368]	; (26a4 <LEDDebug(LEDStruct&)+0x7e4>)
    2534:	4858      	ldr	r0, [pc, #352]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2536:	f7fe f943 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_beat:     ");
			Serial.println(leds.juggle_beat);
    253a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    253e:	4856      	ldr	r0, [pc, #344]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2540:	f7fe f95e 	bl	800 <Print::println(unsigned char)>
    2544:	4958      	ldr	r1, [pc, #352]	; (26a8 <LEDDebug(LEDStruct&)+0x7e8>)
    2546:	4854      	ldr	r0, [pc, #336]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2548:	f7fe f93a 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_diff:     ");
			Serial.println(leds.juggle_diff);
    254c:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2550:	4851      	ldr	r0, [pc, #324]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2552:	f7fe f955 	bl	800 <Print::println(unsigned char)>
    2556:	4955      	ldr	r1, [pc, #340]	; (26ac <LEDDebug(LEDStruct&)+0x7ec>)
    2558:	484f      	ldr	r0, [pc, #316]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    255a:	f7fe f931 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_fade:     ");
			Serial.println(leds.juggle_fade);
    255e:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2562:	484d      	ldr	r0, [pc, #308]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2564:	f7fe f94c 	bl	800 <Print::println(unsigned char)>
			break;
    2568:	e563      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>

		case NOISE:
			Serial.println("=====NOISE=====");
    256a:	4951      	ldr	r1, [pc, #324]	; (26b0 <LEDDebug(LEDStruct&)+0x7f0>)
    256c:	484a      	ldr	r0, [pc, #296]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    256e:	f7fe f935 	bl	7dc <Print::println(char const*)>
    2572:	4950      	ldr	r1, [pc, #320]	; (26b4 <LEDDebug(LEDStruct&)+0x7f4>)
    2574:	4848      	ldr	r0, [pc, #288]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2576:	f7fe f923 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    257a:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    257e:	4846      	ldr	r0, [pc, #280]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2580:	f008 fae4 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2584:	4844      	ldr	r0, [pc, #272]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2586:	f008 fa91 	bl	aaac <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    258a:	494b      	ldr	r1, [pc, #300]	; (26b8 <LEDDebug(LEDStruct&)+0x7f8>)
    258c:	4842      	ldr	r0, [pc, #264]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    258e:	f7fe f917 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2592:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2596:	4840      	ldr	r0, [pc, #256]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2598:	f008 fad8 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    259c:	483e      	ldr	r0, [pc, #248]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    259e:	f008 fa85 	bl	aaac <Print::println()>
    25a2:	e546      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			Serial.print("noise_dist:    ");
			Serial.println(leds.noise_dist);
			break;

		case BOUNCE:
			Serial.println("=====BOUNCE=====");
    25a4:	4945      	ldr	r1, [pc, #276]	; (26bc <LEDDebug(LEDStruct&)+0x7fc>)
    25a6:	483c      	ldr	r0, [pc, #240]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25a8:	f7fe f918 	bl	7dc <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ac:	4944      	ldr	r1, [pc, #272]	; (26c0 <LEDDebug(LEDStruct&)+0x800>)
    25ae:	483a      	ldr	r0, [pc, #232]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25b0:	f7fe f906 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_fade:       ");
			Serial.println(leds.juggle_fade);
    25b4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    25b8:	4837      	ldr	r0, [pc, #220]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25ba:	f7fe f921 	bl	800 <Print::println(unsigned char)>
    25be:	4941      	ldr	r1, [pc, #260]	; (26c4 <LEDDebug(LEDStruct&)+0x804>)
    25c0:	4835      	ldr	r0, [pc, #212]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25c2:	f7fe f8fd 	bl	7c0 <Print::write(char const*)>
			Serial.print("bounce_length:     ");
			Serial.println(leds.bounce_length);
    25c6:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    25ca:	4833      	ldr	r0, [pc, #204]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25cc:	f7fe f918 	bl	800 <Print::println(unsigned char)>
    25d0:	493d      	ldr	r1, [pc, #244]	; (26c8 <LEDDebug(LEDStruct&)+0x808>)
    25d2:	4831      	ldr	r0, [pc, #196]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25d4:	f7fe f8f4 	bl	7c0 <Print::write(char const*)>
			Serial.print("juggle_beat:       ");
			Serial.println(leds.juggle_beat);
    25d8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    25dc:	482e      	ldr	r0, [pc, #184]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25de:	f7fe f90f 	bl	800 <Print::println(unsigned char)>
    25e2:	493a      	ldr	r1, [pc, #232]	; (26cc <LEDDebug(LEDStruct&)+0x80c>)
    25e4:	482c      	ldr	r0, [pc, #176]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25e6:	f7fe f8eb 	bl	7c0 <Print::write(char const*)>
			Serial.print("rainbow_diff:      ");
			Serial.println(leds.rainbow_diff);
    25ea:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25ee:	482a      	ldr	r0, [pc, #168]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25f0:	f7fe f906 	bl	800 <Print::println(unsigned char)>
    25f4:	4936      	ldr	r1, [pc, #216]	; (26d0 <LEDDebug(LEDStruct&)+0x810>)
    25f6:	4828      	ldr	r0, [pc, #160]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    25f8:	f7fe f8e2 	bl	7c0 <Print::write(char const*)>
			Serial.print("bounce_start_beat: ");
			Serial.println(leds.bounce_start_beat);
    25fc:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    2600:	4825      	ldr	r0, [pc, #148]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2602:	f7fe f8fd 	bl	800 <Print::println(unsigned char)>
    2606:	4933      	ldr	r1, [pc, #204]	; (26d4 <LEDDebug(LEDStruct&)+0x814>)
    2608:	4823      	ldr	r0, [pc, #140]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    260a:	f7fe f8d9 	bl	7c0 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    260e:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    2612:	4821      	ldr	r0, [pc, #132]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2614:	f008 fa9a 	bl	ab4c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    2618:	481f      	ldr	r0, [pc, #124]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    261a:	f008 fa47 	bl	aaac <Print::println()>
    261e:	e508      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
			Serial.print("number of balls: ");
			Serial.println(leds.number_of_balls);
			break;

		default:
			Serial.println("");
    2620:	492d      	ldr	r1, [pc, #180]	; (26d8 <LEDDebug(LEDStruct&)+0x818>)
    2622:	481d      	ldr	r0, [pc, #116]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2624:	f7fe f8da 	bl	7dc <Print::println(char const*)>
			Serial.println("===MODE TYPE ERROR===");
    2628:	492c      	ldr	r1, [pc, #176]	; (26dc <LEDDebug(LEDStruct&)+0x81c>)
    262a:	481b      	ldr	r0, [pc, #108]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    262c:	f7fe f8d6 	bl	7dc <Print::println(char const*)>
			Serial.println("");
    2630:	4929      	ldr	r1, [pc, #164]	; (26d8 <LEDDebug(LEDStruct&)+0x818>)
    2632:	4819      	ldr	r0, [pc, #100]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2634:	f7fe f8d2 	bl	7dc <Print::println(char const*)>
			break;
    2638:	e4fb      	b.n	2032 <LEDDebug(LEDStruct&)+0x172>
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    263a:	4929      	ldr	r1, [pc, #164]	; (26e0 <LEDDebug(LEDStruct&)+0x820>)
    263c:	4816      	ldr	r0, [pc, #88]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    263e:	f7fe f8cd 	bl	7dc <Print::println(char const*)>
    2642:	e45c      	b.n	1efe <LEDDebug(LEDStruct&)+0x3e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    2644:	4927      	ldr	r1, [pc, #156]	; (26e4 <LEDDebug(LEDStruct&)+0x824>)
    2646:	4814      	ldr	r0, [pc, #80]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2648:	f7fe f8c8 	bl	7dc <Print::println(char const*)>
    264c:	e457      	b.n	1efe <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    264e:	4926      	ldr	r1, [pc, #152]	; (26e8 <LEDDebug(LEDStruct&)+0x828>)
    2650:	4811      	ldr	r0, [pc, #68]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2652:	f7fe f8c3 	bl	7dc <Print::println(char const*)>
    2656:	e55b      	b.n	2110 <LEDDebug(LEDStruct&)+0x250>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2658:	4924      	ldr	r1, [pc, #144]	; (26ec <LEDDebug(LEDStruct&)+0x82c>)
    265a:	480f      	ldr	r0, [pc, #60]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    265c:	f7fe f8b0 	bl	7c0 <Print::write(char const*)>
    2660:	e5c2      	b.n	21e8 <LEDDebug(LEDStruct&)+0x328>
    2662:	4923      	ldr	r1, [pc, #140]	; (26f0 <LEDDebug(LEDStruct&)+0x830>)
    2664:	480c      	ldr	r0, [pc, #48]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2666:	f7fe f8ab 	bl	7c0 <Print::write(char const*)>
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
    266a:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    266e:	480a      	ldr	r0, [pc, #40]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2670:	f7fe f8c6 	bl	800 <Print::println(unsigned char)>
    2674:	491f      	ldr	r1, [pc, #124]	; (26f4 <LEDDebug(LEDStruct&)+0x834>)
    2676:	4808      	ldr	r0, [pc, #32]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2678:	f7fe f8a2 	bl	7c0 <Print::write(char const*)>
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
    267c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2680:	4805      	ldr	r0, [pc, #20]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    2682:	f7fe f8bd 	bl	800 <Print::println(unsigned char)>
    2686:	e5ca      	b.n	221e <LEDDebug(LEDStruct&)+0x35e>
    2688:	491b      	ldr	r1, [pc, #108]	; (26f8 <LEDDebug(LEDStruct&)+0x838>)
    268a:	4803      	ldr	r0, [pc, #12]	; (2698 <LEDDebug(LEDStruct&)+0x7d8>)
    268c:	f7fe f898 	bl	7c0 <Print::write(char const*)>
    2690:	e5a5      	b.n	21de <LEDDebug(LEDStruct&)+0x31e>
    2692:	bf00      	nop
    2694:	0000cde8 	.word	0x0000cde8
    2698:	1fff8760 	.word	0x1fff8760
    269c:	0000ce00 	.word	0x0000ce00
    26a0:	0000ce14 	.word	0x0000ce14
    26a4:	0000ce28 	.word	0x0000ce28
    26a8:	0000ce3c 	.word	0x0000ce3c
    26ac:	0000ce50 	.word	0x0000ce50
    26b0:	0000ce64 	.word	0x0000ce64
    26b4:	0000ce74 	.word	0x0000ce74
    26b8:	0000ce84 	.word	0x0000ce84
    26bc:	0000ce94 	.word	0x0000ce94
    26c0:	0000cea8 	.word	0x0000cea8
    26c4:	0000cebc 	.word	0x0000cebc
    26c8:	0000ced0 	.word	0x0000ced0
    26cc:	0000cee4 	.word	0x0000cee4
    26d0:	0000cef8 	.word	0x0000cef8
    26d4:	0000cf0c 	.word	0x0000cf0c
    26d8:	0000cfcc 	.word	0x0000cfcc
    26dc:	0000cf58 	.word	0x0000cf58
    26e0:	0000c9e4 	.word	0x0000c9e4
    26e4:	0000c9ec 	.word	0x0000c9ec
    26e8:	0000cb34 	.word	0x0000cb34
    26ec:	0000cb90 	.word	0x0000cb90
    26f0:	0000cbb8 	.word	0x0000cbb8
    26f4:	0000cbc8 	.word	0x0000cbc8
    26f8:	0000cb88 	.word	0x0000cb88

000026fc <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    26fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2700:	b08d      	sub	sp, #52	; 0x34
    2702:	2120      	movs	r1, #32
    2704:	4605      	mov	r5, r0
    2706:	9009      	str	r0, [sp, #36]	; 0x24
    2708:	483f      	ldr	r0, [pc, #252]	; (2808 <change_palette(LEDStruct&) [clone .part.11]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    270a:	4c40      	ldr	r4, [pc, #256]	; (280c <change_palette(LEDStruct&) [clone .part.11]+0x110>)
    270c:	f007 ffca 	bl	a6a4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2710:	483f      	ldr	r0, [pc, #252]	; (2810 <change_palette(LEDStruct&) [clone .part.11]+0x114>)
    2712:	f008 f9cb 	bl	aaac <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2716:	483f      	ldr	r0, [pc, #252]	; (2814 <change_palette(LEDStruct&) [clone .part.11]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    2718:	4a3f      	ldr	r2, [pc, #252]	; (2818 <change_palette(LEDStruct&) [clone .part.11]+0x11c>)
    271a:	8803      	ldrh	r3, [r0, #0]
    271c:	7811      	ldrb	r1, [r2, #0]
    271e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2722:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2726:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    272a:	3319      	adds	r3, #25
    272c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    272e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2732:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2734:	fb12 f201 	smulbb	r2, r2, r1
    2738:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    273a:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    273c:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    2740:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2744:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2746:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    274a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    274c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    274e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2750:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2752:	d1f8      	bne.n	2746 <change_palette(LEDStruct&) [clone .part.11]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2754:	f8d8 3000 	ldr.w	r3, [r8]
    2758:	9a09      	ldr	r2, [sp, #36]	; 0x24
    275a:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    275c:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2760:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    2764:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2768:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    276c:	f04f 33ff 	mov.w	r3, #4294967295
    2770:	9207      	str	r2, [sp, #28]
    2772:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2774:	2400      	movs	r4, #0
    2776:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2778:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    277c:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    277e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2782:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2786:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    278a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    278c:	b2f9      	uxtb	r1, r7
    278e:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2792:	9104      	str	r1, [sp, #16]
    2794:	b2e9      	uxtb	r1, r5
    2796:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2798:	fa5f f18c 	uxtb.w	r1, ip
    279c:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    279e:	9908      	ldr	r1, [sp, #32]
    27a0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    27a2:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    27a4:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    27a8:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    27ac:	d80c      	bhi.n	27c8 <change_palette(LEDStruct&) [clone .part.11]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    27ae:	9906      	ldr	r1, [sp, #24]
    27b0:	458c      	cmp	ip, r1
    27b2:	dc07      	bgt.n	27c4 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
    27b4:	290f      	cmp	r1, #15
    27b6:	d005      	beq.n	27c4 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
                    istart8 = lastSlotUsed + 1;
    27b8:	3101      	adds	r1, #1
    27ba:	b2c9      	uxtb	r1, r1
    27bc:	428b      	cmp	r3, r1
    27be:	9103      	str	r1, [sp, #12]
    27c0:	bf38      	it	cc
    27c2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    27c4:	b259      	sxtb	r1, r3
    27c6:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    27c8:	a90b      	add	r1, sp, #44	; 0x2c
    27ca:	9100      	str	r1, [sp, #0]
    27cc:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27ce:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    27d2:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    27d6:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27da:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    27de:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    27e2:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    27e6:	f005 febb 	bl	8560 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    27ea:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27ec:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    27f0:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    27f4:	46ca      	mov	sl, r9
    27f6:	d1bf      	bne.n	2778 <change_palette(LEDStruct&) [clone .part.11]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    27f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27fa:	f893 0228 	ldrb.w	r0, [r3, #552]	; 0x228
    27fe:	f7ff f851 	bl	18a4 <print_palette(unsigned char)>
	}
}
    2802:	b00d      	add	sp, #52	; 0x34
    2804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2808:	0000cf70 	.word	0x0000cf70
    280c:	0000da04 	.word	0x0000da04
    2810:	1fff8760 	.word	0x1fff8760
    2814:	1fff8756 	.word	0x1fff8756
    2818:	1fff874a 	.word	0x1fff874a

0000281c <juggle(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2820:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2824:	b091      	sub	sp, #68	; 0x44
    2826:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2828:	2b00      	cmp	r3, #0
    282a:	f000 80f3 	beq.w	2a14 <juggle(LEDStruct&)+0x1f8>
    282e:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    2832:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    2836:	b113      	cbz	r3, 283e <juggle(LEDStruct&)+0x22>
    2838:	2300      	movs	r3, #0
    283a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    283e:	2196      	movs	r1, #150	; 0x96
    2840:	4620      	mov	r0, r4
    2842:	f005 ff1f 	bl	8684 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2846:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    284a:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    284e:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    2852:	2900      	cmp	r1, #0
    2854:	f040 8178 	bne.w	2b48 <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    2858:	2f00      	cmp	r7, #0
    285a:	f000 82b8 	beq.w	2dce <juggle(LEDStruct&)+0x5b2>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    285e:	2b00      	cmp	r3, #0
    2860:	f000 8388 	beq.w	2f74 <juggle(LEDStruct&)+0x758>
    2864:	48c4      	ldr	r0, [pc, #784]	; (2b78 <juggle(LEDStruct&)+0x35c>)
    2866:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    286a:	f8df 9314 	ldr.w	r9, [pc, #788]	; 2b80 <juggle(LEDStruct&)+0x364>
    286e:	f8df 8314 	ldr.w	r8, [pc, #788]	; 2b84 <juggle(LEDStruct&)+0x368>
    2872:	9002      	str	r0, [sp, #8]
    2874:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2878:	460f      	mov	r7, r1
    287a:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    287e:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2882:	9503      	str	r5, [sp, #12]
    2884:	e05e      	b.n	2944 <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2886:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    288a:	443b      	add	r3, r7
    288c:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    288e:	f8d9 1000 	ldr.w	r1, [r9]
    2892:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2894:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2896:	9904      	ldr	r1, [sp, #16]
    2898:	bf98      	it	ls
    289a:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    289c:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    28a0:	bf98      	it	ls
    28a2:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    28a4:	fb00 f101 	mul.w	r1, r0, r1
    28a8:	fb03 f301 	mul.w	r3, r3, r1
    28ac:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    28ae:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    28b0:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    28b4:	d503      	bpl.n	28be <juggle(LEDStruct&)+0xa2>
    28b6:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    28ba:	3107      	adds	r1, #7
    28bc:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28be:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    28c0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28c2:	f3c1 0146 	ubfx	r1, r1, #1, #7
    28c6:	f818 6000 	ldrb.w	r6, [r8, r0]
    28ca:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    28ce:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    28d2:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28d4:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    28d6:	bf48      	it	mi
    28d8:	4249      	negmi	r1, r1
    28da:	b20e      	sxth	r6, r1
    28dc:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    28e0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    28e4:	9100      	str	r1, [sp, #0]
    28e6:	4650      	mov	r0, sl
    28e8:	4659      	mov	r1, fp
    28ea:	f005 ff2b 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    28ee:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    28f2:	2296      	movs	r2, #150	; 0x96
    28f4:	b29b      	uxth	r3, r3
    28f6:	fb02 f303 	mul.w	r3, r2, r3
    28fa:	0c1b      	lsrs	r3, r3, #16
    28fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2900:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    2902:	5ce2      	ldrb	r2, [r4, r3]
    2904:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2908:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    290c:	54e2      	strb	r2, [r4, r3]
    290e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2912:	784a      	ldrb	r2, [r1, #1]
    2914:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2918:	704a      	strb	r2, [r1, #1]
    291a:	788b      	ldrb	r3, [r1, #2]
    291c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2920:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2924:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2926:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    292a:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    292e:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2932:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2934:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2936:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2938:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    293a:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    293c:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2940:	f240 8318 	bls.w	2f74 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2944:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2948:	2900      	cmp	r1, #0
    294a:	d19c      	bne.n	2886 <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    294c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2950:	443b      	add	r3, r7
    2952:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2954:	f8d9 1000 	ldr.w	r1, [r9]
    2958:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    295a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    295c:	9905      	ldr	r1, [sp, #20]
    295e:	bf98      	it	ls
    2960:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2962:	f44f 708c 	mov.w	r0, #280	; 0x118
    2966:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    296a:	bf98      	it	ls
    296c:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    296e:	fb03 f301 	mul.w	r3, r3, r1
    2972:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2974:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2976:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    297a:	d503      	bpl.n	2984 <juggle(LEDStruct&)+0x168>
    297c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2980:	3107      	adds	r1, #7
    2982:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2984:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2986:	9d02      	ldr	r5, [sp, #8]
    2988:	f818 6000 	ldrb.w	r6, [r8, r0]
    298c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2990:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2994:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2998:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    299a:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    299c:	bf48      	it	mi
    299e:	4249      	negmi	r1, r1
    29a0:	b20e      	sxth	r6, r1
    29a2:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    29a6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    29aa:	9100      	str	r1, [sp, #0]
    29ac:	4650      	mov	r0, sl
    29ae:	4659      	mov	r1, fp
    29b0:	f005 fec8 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    29b4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    29b8:	b29b      	uxth	r3, r3
    29ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    29c2:	0c1b      	lsrs	r3, r3, #16
    29c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    29c8:	18e1      	adds	r1, r4, r3
    29ca:	5ce2      	ldrb	r2, [r4, r3]
    29cc:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    29d0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    29d4:	54e2      	strb	r2, [r4, r3]
    29d6:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    29da:	784a      	ldrb	r2, [r1, #1]
    29dc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    29e0:	704a      	strb	r2, [r1, #1]
    29e2:	788b      	ldrb	r3, [r1, #2]
    29e4:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    29e8:	fa83 f352 	uqadd8	r3, r3, r2
    29ec:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    29ee:	708b      	strb	r3, [r1, #2]
    29f0:	4622      	mov	r2, r4
    29f2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    29f4:	7819      	ldrb	r1, [r3, #0]
    29f6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    29fa:	7859      	ldrb	r1, [r3, #1]
    29fc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2a00:	7899      	ldrb	r1, [r3, #2]
    2a02:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2a06:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    2a08:	429d      	cmp	r5, r3
    2a0a:	f1a2 0203 	sub.w	r2, r2, #3
    2a0e:	d1f1      	bne.n	29f4 <juggle(LEDStruct&)+0x1d8>
    2a10:	9503      	str	r5, [sp, #12]
    2a12:	e788      	b.n	2926 <juggle(LEDStruct&)+0x10a>
    2a14:	4d59      	ldr	r5, [pc, #356]	; (2b7c <juggle(LEDStruct&)+0x360>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2a16:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    2a1a:	882b      	ldrh	r3, [r5, #0]
    2a1c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2a20:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2a24:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2a28:	3119      	adds	r1, #25
    2a2a:	b289      	uxth	r1, r1
    2a2c:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    2a30:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2a34:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2a38:	3019      	adds	r0, #25
    2a3a:	b280      	uxth	r0, r0
    2a3c:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    2a40:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2a44:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a48:	3319      	adds	r3, #25
    2a4a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2a4e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2a52:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2a56:	3219      	adds	r2, #25
    2a58:	b292      	uxth	r2, r2
    2a5a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2a5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2a62:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2a66:	3619      	adds	r6, #25
    2a68:	b2b6      	uxth	r6, r6
    2a6a:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    2a6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2a72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2a76:	3319      	adds	r3, #25
    2a78:	b29b      	uxth	r3, r3
    2a7a:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    2a7e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    2a82:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2a86:	f10e 0e19 	add.w	lr, lr, #25
    2a8a:	fa1f fe8e 	uxth.w	lr, lr
    2a8e:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    2a92:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    2a96:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2a9a:	3719      	adds	r7, #25
    2a9c:	b2bf      	uxth	r7, r7
    2a9e:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2aa2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2aa6:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2aaa:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2aae:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2ab0:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ab8:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2abc:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    2ac0:	b2f2      	uxtb	r2, r6
    2ac2:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2ac6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2aca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2ace:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    2ad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2ad6:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2ad8:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2adc:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2ae0:	ea4f 18ec 	mov.w	r8, ip, asr #7
    2ae4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    2ae8:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2aec:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2af0:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2af4:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2af8:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2afc:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2b00:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2b04:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2b08:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    2b0c:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2b10:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2b14:	b2d2      	uxtb	r2, r2

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2b16:	f3c7 13c0 	ubfx	r3, r7, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2b1a:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2b1e:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2b22:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2b24:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    2b28:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2b2c:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    2b30:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2b34:	802e      	strh	r6, [r5, #0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2b36:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2b3a:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2b3e:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2b42:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    2b46:	e676      	b.n	2836 <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    2b48:	2f00      	cmp	r7, #0
    2b4a:	f000 80a6 	beq.w	2c9a <juggle(LEDStruct&)+0x47e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2b4e:	2b00      	cmp	r3, #0
    2b50:	f000 8210 	beq.w	2f74 <juggle(LEDStruct&)+0x758>
    2b54:	4b08      	ldr	r3, [pc, #32]	; (2b78 <juggle(LEDStruct&)+0x35c>)
    2b56:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2b5a:	f8df 9024 	ldr.w	r9, [pc, #36]	; 2b80 <juggle(LEDStruct&)+0x364>
    2b5e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2b84 <juggle(LEDStruct&)+0x368>
    2b62:	9302      	str	r3, [sp, #8]
    2b64:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2b68:	2700      	movs	r7, #0
    2b6a:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2b6e:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2b72:	9503      	str	r5, [sp, #12]
    2b74:	e06d      	b.n	2c52 <juggle(LEDStruct&)+0x436>
    2b76:	bf00      	nop
    2b78:	0000d05c 	.word	0x0000d05c
    2b7c:	1fff8756 	.word	0x1fff8756
    2b80:	1fffa074 	.word	0x1fffa074
    2b84:	0000dbc0 	.word	0x0000dbc0
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2b88:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2b8c:	2b00      	cmp	r3, #0
    2b8e:	f000 82c6 	beq.w	311e <juggle(LEDStruct&)+0x902>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2b92:	f8d9 3000 	ldr.w	r3, [r9]
    2b96:	9308      	str	r3, [sp, #32]
	return ret;
    2b98:	9908      	ldr	r1, [sp, #32]
    2b9a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2ba2:	fb00 1117 	mls	r1, r0, r7, r1
    2ba6:	021b      	lsls	r3, r3, #8
    2ba8:	f44f 708c 	mov.w	r0, #280	; 0x118
    2bac:	fb00 f303 	mul.w	r3, r0, r3
    2bb0:	fb03 f301 	mul.w	r3, r3, r1
    2bb4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2bb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bbc:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2bbe:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2bc2:	d503      	bpl.n	2bcc <juggle(LEDStruct&)+0x3b0>
    2bc4:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2bc8:	3107      	adds	r1, #7
    2bca:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2bcc:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2bce:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2bd0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2bd4:	f818 6000 	ldrb.w	r6, [r8, r0]
    2bd8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2bdc:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2be0:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2be2:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2be4:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2be8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2bec:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2bee:	bf48      	it	mi
    2bf0:	4276      	negmi	r6, r6
    2bf2:	4659      	mov	r1, fp
    2bf4:	4650      	mov	r0, sl
    2bf6:	b236      	sxth	r6, r6
    2bf8:	f005 fda4 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2bfc:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2c00:	b29a      	uxth	r2, r3
    2c02:	2396      	movs	r3, #150	; 0x96
    2c04:	fb03 f302 	mul.w	r3, r3, r2
    2c08:	0c1b      	lsrs	r3, r3, #16
    2c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2c0e:	18e1      	adds	r1, r4, r3
    2c10:	5ce2      	ldrb	r2, [r4, r3]
    2c12:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2c16:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2c1a:	54e2      	strb	r2, [r4, r3]
    2c1c:	784a      	ldrb	r2, [r1, #1]
    2c1e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2c22:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2c26:	704a      	strb	r2, [r1, #1]
    2c28:	788b      	ldrb	r3, [r1, #2]
    2c2a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2c2e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2c32:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2c34:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2c38:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2c3c:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2c40:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2c42:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2c44:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2c46:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2c48:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2c4a:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2c4e:	f240 8191 	bls.w	2f74 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    2c52:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2c56:	2b00      	cmp	r3, #0
    2c58:	d196      	bne.n	2b88 <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2c5a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2c5e:	2b00      	cmp	r3, #0
    2c60:	f000 8192 	beq.w	2f88 <juggle(LEDStruct&)+0x76c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c64:	f8d9 3000 	ldr.w	r3, [r9]
    2c68:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2c6a:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c6c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2c74:	fb00 1117 	mls	r1, r0, r7, r1
    2c78:	021b      	lsls	r3, r3, #8
    2c7a:	f44f 708c 	mov.w	r0, #280	; 0x118
    2c7e:	fb00 f303 	mul.w	r3, r0, r3
    2c82:	fb03 f301 	mul.w	r3, r3, r1
    2c86:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2c8a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2c8e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c90:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2c92:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2c96:	d599      	bpl.n	2bcc <juggle(LEDStruct&)+0x3b0>
    2c98:	e794      	b.n	2bc4 <juggle(LEDStruct&)+0x3a8>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2c9a:	2b00      	cmp	r3, #0
    2c9c:	f000 816a 	beq.w	2f74 <juggle(LEDStruct&)+0x758>
    2ca0:	49b6      	ldr	r1, [pc, #728]	; (2f7c <juggle(LEDStruct&)+0x760>)
    2ca2:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2ca6:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2f80 <juggle(LEDStruct&)+0x764>
    2caa:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 2f84 <juggle(LEDStruct&)+0x768>
    2cae:	9102      	str	r1, [sp, #8]
    2cb0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2cb4:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2cb8:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    2cbc:	9503      	str	r5, [sp, #12]
    2cbe:	e063      	b.n	2d88 <juggle(LEDStruct&)+0x56c>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2cc0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2cc4:	2900      	cmp	r1, #0
    2cc6:	f000 828f 	beq.w	31e8 <juggle(LEDStruct&)+0x9cc>
    2cca:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2cce:	443b      	add	r3, r7
    2cd0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2cd2:	f8d9 1000 	ldr.w	r1, [r9]
    2cd6:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2cd8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2cda:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cdc:	bf9c      	itt	ls
    2cde:	021b      	lslls	r3, r3, #8
    2ce0:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2ce2:	fb0a f101 	mul.w	r1, sl, r1
    2ce6:	fb03 f301 	mul.w	r3, r3, r1
    2cea:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2cee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2cf2:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2cf4:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2cf8:	d503      	bpl.n	2d02 <juggle(LEDStruct&)+0x4e6>
    2cfa:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2cfe:	3107      	adds	r1, #7
    2d00:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d02:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2d04:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d06:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2d0a:	f818 6000 	ldrb.w	r6, [r8, r0]
    2d0e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2d12:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2d16:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2d18:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2d1a:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2d1e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2d22:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2d24:	bf48      	it	mi
    2d26:	4276      	negmi	r6, r6
    2d28:	4659      	mov	r1, fp
    2d2a:	a80b      	add	r0, sp, #44	; 0x2c
    2d2c:	b236      	sxth	r6, r6
    2d2e:	f005 fd09 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2d32:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2d36:	2296      	movs	r2, #150	; 0x96
    2d38:	b29b      	uxth	r3, r3
    2d3a:	fb02 f303 	mul.w	r3, r2, r3
    2d3e:	0c1b      	lsrs	r3, r3, #16
    2d40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d44:	18e1      	adds	r1, r4, r3
    2d46:	5ce2      	ldrb	r2, [r4, r3]
    2d48:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2d4c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2d50:	54e2      	strb	r2, [r4, r3]
    2d52:	784a      	ldrb	r2, [r1, #1]
    2d54:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2d58:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2d5c:	704a      	strb	r2, [r1, #1]
    2d5e:	788b      	ldrb	r3, [r1, #2]
    2d60:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2d64:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2d68:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2d6a:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2d6e:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2d72:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    2d76:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2d78:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2d7a:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2d7c:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2d7e:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2d80:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2d84:	f240 80f6 	bls.w	2f74 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    2d88:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2d8c:	2900      	cmp	r1, #0
    2d8e:	d197      	bne.n	2cc0 <juggle(LEDStruct&)+0x4a4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2d90:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2d94:	2900      	cmp	r1, #0
    2d96:	f000 815d 	beq.w	3054 <juggle(LEDStruct&)+0x838>
    2d9a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2d9e:	443b      	add	r3, r7
    2da0:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2da2:	f8d9 1000 	ldr.w	r1, [r9]
    2da6:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2da8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2daa:	990e      	ldr	r1, [sp, #56]	; 0x38
    2dac:	bf9c      	itt	ls
    2dae:	021b      	lslls	r3, r3, #8
    2db0:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2db2:	fb0a f101 	mul.w	r1, sl, r1
    2db6:	fb03 f301 	mul.w	r3, r3, r1
    2dba:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2dbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2dc2:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2dc4:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2dc6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2dca:	d59a      	bpl.n	2d02 <juggle(LEDStruct&)+0x4e6>
    2dcc:	e795      	b.n	2cfa <juggle(LEDStruct&)+0x4de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2dce:	2b00      	cmp	r3, #0
    2dd0:	f000 80d0 	beq.w	2f74 <juggle(LEDStruct&)+0x758>
    2dd4:	4b69      	ldr	r3, [pc, #420]	; (2f7c <juggle(LEDStruct&)+0x760>)
    2dd6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2dda:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2f80 <juggle(LEDStruct&)+0x764>
    2dde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2f84 <juggle(LEDStruct&)+0x768>
    2de2:	9302      	str	r3, [sp, #8]
    2de4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2de8:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2dec:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2df0:	9503      	str	r5, [sp, #12]
    2df2:	e05a      	b.n	2eaa <juggle(LEDStruct&)+0x68e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2df4:	f8d9 3000 	ldr.w	r3, [r9]
    2df8:	9306      	str	r3, [sp, #24]
	return ret;
    2dfa:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2dfc:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    2e00:	f44f 708c 	mov.w	r0, #280	; 0x118
    2e04:	0209      	lsls	r1, r1, #8
    2e06:	fb00 f303 	mul.w	r3, r0, r3
    2e0a:	fb03 f301 	mul.w	r3, r3, r1
    2e0e:	0379      	lsls	r1, r7, #13
    2e10:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2e14:	b299      	uxth	r1, r3
    2e16:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2e18:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2e1c:	d503      	bpl.n	2e26 <juggle(LEDStruct&)+0x60a>
    2e1e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2e22:	3307      	adds	r3, #7
    2e24:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2e26:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2e28:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2e2a:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2e2e:	f818 6000 	ldrb.w	r6, [r8, r0]
    2e32:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2e36:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    2e3a:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2e3c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2e3e:	bf48      	it	mi
    2e40:	425b      	negmi	r3, r3
    2e42:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2e46:	b21e      	sxth	r6, r3
    2e48:	4650      	mov	r0, sl
    2e4a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2e4e:	9100      	str	r1, [sp, #0]
    2e50:	4659      	mov	r1, fp
    2e52:	f005 fc77 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2e56:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2e5a:	2296      	movs	r2, #150	; 0x96
    2e5c:	b29b      	uxth	r3, r3
    2e5e:	fb02 f303 	mul.w	r3, r2, r3
    2e62:	0c1b      	lsrs	r3, r3, #16
    2e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e68:	18e1      	adds	r1, r4, r3
    2e6a:	5ce2      	ldrb	r2, [r4, r3]
    2e6c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2e70:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2e74:	54e2      	strb	r2, [r4, r3]
    2e76:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2e7a:	784a      	ldrb	r2, [r1, #1]
    2e7c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2e80:	704a      	strb	r2, [r1, #1]
    2e82:	788b      	ldrb	r3, [r1, #2]
    2e84:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2e88:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2e8c:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2e8e:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2e92:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2e96:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    2e9a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2e9c:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2e9e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2ea0:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2ea2:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2ea4:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2ea8:	d964      	bls.n	2f74 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2eaa:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d1a0      	bne.n	2df4 <juggle(LEDStruct&)+0x5d8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2eb2:	f8d9 3000 	ldr.w	r3, [r9]
    2eb6:	9307      	str	r3, [sp, #28]
	return ret;
    2eb8:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2eba:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2ebe:	f44f 708c 	mov.w	r0, #280	; 0x118
    2ec2:	fb00 f303 	mul.w	r3, r0, r3
    2ec6:	0209      	lsls	r1, r1, #8
    2ec8:	fb03 f301 	mul.w	r3, r3, r1
    2ecc:	0379      	lsls	r1, r7, #13
    2ece:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2ed2:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2ed4:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2ed6:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2eda:	d503      	bpl.n	2ee4 <juggle(LEDStruct&)+0x6c8>
    2edc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2ee0:	3307      	adds	r3, #7
    2ee2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2ee4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2ee6:	9d02      	ldr	r5, [sp, #8]
    2ee8:	f818 6000 	ldrb.w	r6, [r8, r0]
    2eec:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2ef0:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2ef4:	fb06 0303 	mla	r3, r6, r3, r0
    2ef8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    2efa:	040e      	lsls	r6, r1, #16
    2efc:	bf48      	it	mi
    2efe:	425b      	negmi	r3, r3
    2f00:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2f04:	b21e      	sxth	r6, r3
    2f06:	4650      	mov	r0, sl
    2f08:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2f0c:	9100      	str	r1, [sp, #0]
    2f0e:	4659      	mov	r1, fp
    2f10:	f005 fc18 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2f14:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2f18:	b29b      	uxth	r3, r3
    2f1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2f1e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2f22:	0c1b      	lsrs	r3, r3, #16
    2f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f28:	18e1      	adds	r1, r4, r3
    2f2a:	5ce2      	ldrb	r2, [r4, r3]
    2f2c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2f30:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2f34:	54e2      	strb	r2, [r4, r3]
    2f36:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2f3a:	784a      	ldrb	r2, [r1, #1]
    2f3c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2f40:	704a      	strb	r2, [r1, #1]
    2f42:	788b      	ldrb	r3, [r1, #2]
    2f44:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2f48:	fa83 f352 	uqadd8	r3, r3, r2
    2f4c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2f4e:	708b      	strb	r3, [r1, #2]
    2f50:	4622      	mov	r2, r4
    2f52:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2f54:	7819      	ldrb	r1, [r3, #0]
    2f56:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2f5a:	7859      	ldrb	r1, [r3, #1]
    2f5c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2f60:	7899      	ldrb	r1, [r3, #2]
    2f62:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2f66:	3303      	adds	r3, #3
    2f68:	42ab      	cmp	r3, r5
    2f6a:	f1a2 0203 	sub.w	r2, r2, #3
    2f6e:	d1f1      	bne.n	2f54 <juggle(LEDStruct&)+0x738>
    2f70:	9503      	str	r5, [sp, #12]
    2f72:	e78c      	b.n	2e8e <juggle(LEDStruct&)+0x672>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    2f74:	b011      	add	sp, #68	; 0x44
    2f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2f7a:	bf00      	nop
    2f7c:	0000d05c 	.word	0x0000d05c
    2f80:	1fffa074 	.word	0x1fffa074
    2f84:	0000dbc0 	.word	0x0000dbc0
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f88:	f8d9 3000 	ldr.w	r3, [r9]
    2f8c:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2f8e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    2f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2f98:	fb00 3317 	mls	r3, r0, r7, r3
    2f9c:	0209      	lsls	r1, r1, #8
    2f9e:	f44f 708c 	mov.w	r0, #280	; 0x118
    2fa2:	fb00 f101 	mul.w	r1, r0, r1
    2fa6:	fb03 f301 	mul.w	r3, r3, r1
    2faa:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2fae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2fb2:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fb4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2fb6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2fba:	d503      	bpl.n	2fc4 <juggle(LEDStruct&)+0x7a8>
    2fbc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2fc0:	3107      	adds	r1, #7
    2fc2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2fc4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2fc6:	9d02      	ldr	r5, [sp, #8]
    2fc8:	f818 6000 	ldrb.w	r6, [r8, r0]
    2fcc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2fd0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2fd4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2fd8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2fda:	b2b6      	uxth	r6, r6
    2fdc:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2fe0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2fe4:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2fe6:	bf48      	it	mi
    2fe8:	4276      	negmi	r6, r6
    2fea:	4659      	mov	r1, fp
    2fec:	4650      	mov	r0, sl
    2fee:	b236      	sxth	r6, r6
    2ff0:	f005 fba8 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2ff4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2ff8:	b29b      	uxth	r3, r3
    2ffa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2ffe:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3002:	0c1b      	lsrs	r3, r3, #16
    3004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3008:	18e1      	adds	r1, r4, r3
    300a:	5ce2      	ldrb	r2, [r4, r3]
    300c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3010:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3014:	54e2      	strb	r2, [r4, r3]
    3016:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    301a:	784a      	ldrb	r2, [r1, #1]
    301c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3020:	704a      	strb	r2, [r1, #1]
    3022:	788b      	ldrb	r3, [r1, #2]
    3024:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    3028:	fa83 f352 	uqadd8	r3, r3, r2
    302c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    302e:	708b      	strb	r3, [r1, #2]
    3030:	4622      	mov	r2, r4
    3032:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3034:	7819      	ldrb	r1, [r3, #0]
    3036:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    303a:	7859      	ldrb	r1, [r3, #1]
    303c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3040:	7899      	ldrb	r1, [r3, #2]
    3042:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3046:	3303      	adds	r3, #3
    3048:	42ab      	cmp	r3, r5
    304a:	f1a2 0203 	sub.w	r2, r2, #3
    304e:	d1f1      	bne.n	3034 <juggle(LEDStruct&)+0x818>
    3050:	9503      	str	r5, [sp, #12]
    3052:	e5ef      	b.n	2c34 <juggle(LEDStruct&)+0x418>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3054:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3058:	443b      	add	r3, r7
    305a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    305c:	f8d9 1000 	ldr.w	r1, [r9]
    3060:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3062:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3064:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3066:	bf9c      	itt	ls
    3068:	021b      	lslls	r3, r3, #8
    306a:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    306c:	fb0a f101 	mul.w	r1, sl, r1
    3070:	fb03 f301 	mul.w	r3, r3, r1
    3074:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3078:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    307c:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    307e:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3080:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3084:	d503      	bpl.n	308e <juggle(LEDStruct&)+0x872>
    3086:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    308a:	3107      	adds	r1, #7
    308c:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    308e:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3090:	9d02      	ldr	r5, [sp, #8]
    3092:	f818 6000 	ldrb.w	r6, [r8, r0]
    3096:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    309a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    309e:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    30a2:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30a4:	b2b6      	uxth	r6, r6
    30a6:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    30aa:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    30ae:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    30b0:	bf48      	it	mi
    30b2:	4276      	negmi	r6, r6
    30b4:	4659      	mov	r1, fp
    30b6:	a80b      	add	r0, sp, #44	; 0x2c
    30b8:	b236      	sxth	r6, r6
    30ba:	f005 fb43 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    30be:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    30c2:	b29b      	uxth	r3, r3
    30c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    30c8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    30cc:	0c1b      	lsrs	r3, r3, #16
    30ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30d2:	18e1      	adds	r1, r4, r3
    30d4:	5ce2      	ldrb	r2, [r4, r3]
    30d6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    30da:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    30de:	54e2      	strb	r2, [r4, r3]
    30e0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    30e4:	784a      	ldrb	r2, [r1, #1]
    30e6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    30ea:	704a      	strb	r2, [r1, #1]
    30ec:	788b      	ldrb	r3, [r1, #2]
    30ee:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    30f2:	fa83 f352 	uqadd8	r3, r3, r2
    30f6:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    30f8:	708b      	strb	r3, [r1, #2]
    30fa:	4622      	mov	r2, r4
    30fc:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    30fe:	7819      	ldrb	r1, [r3, #0]
    3100:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3104:	7859      	ldrb	r1, [r3, #1]
    3106:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    310a:	7899      	ldrb	r1, [r3, #2]
    310c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3110:	3303      	adds	r3, #3
    3112:	42ab      	cmp	r3, r5
    3114:	f1a2 0203 	sub.w	r2, r2, #3
    3118:	d1f1      	bne.n	30fe <juggle(LEDStruct&)+0x8e2>
    311a:	9503      	str	r5, [sp, #12]
    311c:	e625      	b.n	2d6a <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    311e:	f8d9 3000 	ldr.w	r3, [r9]
    3122:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    3124:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3126:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    312a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    312e:	fb00 1117 	mls	r1, r0, r7, r1
    3132:	021b      	lsls	r3, r3, #8
    3134:	f44f 708c 	mov.w	r0, #280	; 0x118
    3138:	fb00 f303 	mul.w	r3, r0, r3
    313c:	fb03 f301 	mul.w	r3, r3, r1
    3140:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3144:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3148:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    314a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    314e:	d503      	bpl.n	3158 <juggle(LEDStruct&)+0x93c>
    3150:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3154:	3107      	adds	r1, #7
    3156:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3158:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    315a:	9d02      	ldr	r5, [sp, #8]
    315c:	f818 6000 	ldrb.w	r6, [r8, r0]
    3160:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3164:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3168:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    316c:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    316e:	b2b6      	uxth	r6, r6
    3170:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    3174:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3178:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    317a:	bf48      	it	mi
    317c:	4276      	negmi	r6, r6
    317e:	4659      	mov	r1, fp
    3180:	4650      	mov	r0, sl
    3182:	b236      	sxth	r6, r6
    3184:	f005 fade 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3188:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    318c:	b29b      	uxth	r3, r3
    318e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3192:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3196:	0c1b      	lsrs	r3, r3, #16
    3198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    319c:	18e1      	adds	r1, r4, r3
    319e:	5ce2      	ldrb	r2, [r4, r3]
    31a0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    31a4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31a8:	54e2      	strb	r2, [r4, r3]
    31aa:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    31ae:	784a      	ldrb	r2, [r1, #1]
    31b0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31b4:	704a      	strb	r2, [r1, #1]
    31b6:	788b      	ldrb	r3, [r1, #2]
    31b8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    31bc:	fa83 f352 	uqadd8	r3, r3, r2
    31c0:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    31c2:	708b      	strb	r3, [r1, #2]
    31c4:	4622      	mov	r2, r4
    31c6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31c8:	7819      	ldrb	r1, [r3, #0]
    31ca:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    31ce:	7859      	ldrb	r1, [r3, #1]
    31d0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    31d4:	7899      	ldrb	r1, [r3, #2]
    31d6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    31da:	3303      	adds	r3, #3
    31dc:	429d      	cmp	r5, r3
    31de:	f1a2 0203 	sub.w	r2, r2, #3
    31e2:	d1f1      	bne.n	31c8 <juggle(LEDStruct&)+0x9ac>
    31e4:	9503      	str	r5, [sp, #12]
    31e6:	e525      	b.n	2c34 <juggle(LEDStruct&)+0x418>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    31e8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    31ec:	443b      	add	r3, r7
    31ee:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31f0:	f8d9 1000 	ldr.w	r1, [r9]
    31f4:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    31f6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    31f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    31fa:	bf9c      	itt	ls
    31fc:	021b      	lslls	r3, r3, #8
    31fe:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3200:	fb0a f101 	mul.w	r1, sl, r1
    3204:	fb03 f301 	mul.w	r3, r3, r1
    3208:	f3c3 430e 	ubfx	r3, r3, #16, #15
    320c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3210:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3212:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3216:	d503      	bpl.n	3220 <juggle(LEDStruct&)+0xa04>
    3218:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    321c:	3107      	adds	r1, #7
    321e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3220:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3222:	9d02      	ldr	r5, [sp, #8]
    3224:	f818 6000 	ldrb.w	r6, [r8, r0]
    3228:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    322c:	f3c1 0146 	ubfx	r1, r1, #1, #7
    3230:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3234:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3236:	b2b6      	uxth	r6, r6
    3238:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    323c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3240:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3242:	bf48      	it	mi
    3244:	4276      	negmi	r6, r6
    3246:	4659      	mov	r1, fp
    3248:	a80b      	add	r0, sp, #44	; 0x2c
    324a:	b236      	sxth	r6, r6
    324c:	f005 fa7a 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3250:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3254:	b29b      	uxth	r3, r3
    3256:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    325a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    325e:	0c1b      	lsrs	r3, r3, #16
    3260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3264:	18e1      	adds	r1, r4, r3
    3266:	5ce2      	ldrb	r2, [r4, r3]
    3268:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    326c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3270:	54e2      	strb	r2, [r4, r3]
    3272:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3276:	784a      	ldrb	r2, [r1, #1]
    3278:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    327c:	704a      	strb	r2, [r1, #1]
    327e:	788b      	ldrb	r3, [r1, #2]
    3280:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3284:	fa83 f352 	uqadd8	r3, r3, r2
    3288:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    328a:	708b      	strb	r3, [r1, #2]
    328c:	4622      	mov	r2, r4
    328e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3290:	7819      	ldrb	r1, [r3, #0]
    3292:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3296:	7859      	ldrb	r1, [r3, #1]
    3298:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    329c:	7899      	ldrb	r1, [r3, #2]
    329e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    32a2:	3303      	adds	r3, #3
    32a4:	42ab      	cmp	r3, r5
    32a6:	f1a2 0203 	sub.w	r2, r2, #3
    32aa:	d1f1      	bne.n	3290 <juggle(LEDStruct&)+0xa74>
    32ac:	9503      	str	r5, [sp, #12]
    32ae:	e55c      	b.n	2d6a <juggle(LEDStruct&)+0x54e>

000032b0 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    32b0:	4b17      	ldr	r3, [pc, #92]	; (3310 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    32b2:	4a18      	ldr	r2, [pc, #96]	; (3314 <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    32b4:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    32b6:	2100      	movs	r1, #0
    32b8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    32ba:	2b03      	cmp	r3, #3
    32bc:	d80a      	bhi.n	32d4 <rainbow_update(LEDStruct&)+0x24>
    32be:	e8df f003 	tbb	[pc, r3]
    32c2:	0217      	.short	0x0217
    32c4:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    32c6:	4b14      	ldr	r3, [pc, #80]	; (3318 <rainbow_update(LEDStruct&)+0x68>)
    32c8:	881b      	ldrh	r3, [r3, #0]
    32ca:	3300      	adds	r3, #0
    32cc:	bf18      	it	ne
    32ce:	2301      	movne	r3, #1
    32d0:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    32d4:	f7fe bdf4 	b.w	1ec0 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    32d8:	4b0f      	ldr	r3, [pc, #60]	; (3318 <rainbow_update(LEDStruct&)+0x68>)
    32da:	881b      	ldrh	r3, [r3, #0]
    32dc:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    32e0:	f7fe bdee 	b.w	1ec0 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    32e4:	4b0c      	ldr	r3, [pc, #48]	; (3318 <rainbow_update(LEDStruct&)+0x68>)
    32e6:	881b      	ldrh	r3, [r3, #0]
    32e8:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    32ec:	f7fe bde8 	b.w	1ec0 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    32f0:	4b09      	ldr	r3, [pc, #36]	; (3318 <rainbow_update(LEDStruct&)+0x68>)
    32f2:	881b      	ldrh	r3, [r3, #0]
    32f4:	2b00      	cmp	r3, #0
    32f6:	bf14      	ite	ne
    32f8:	2301      	movne	r3, #1
    32fa:	2300      	moveq	r3, #0
    32fc:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3300:	bf14      	ite	ne
    3302:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    3304:	234b      	moveq	r3, #75	; 0x4b
    3306:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    330a:	f7fe bdd9 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    330e:	bf00      	nop
    3310:	1fff95e2 	.word	0x1fff95e2
    3314:	1fff95d8 	.word	0x1fff95d8
    3318:	1fff95e0 	.word	0x1fff95e0

0000331c <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    331c:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    3320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3324:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    3326:	2b00      	cmp	r3, #0
    3328:	d073      	beq.n	3412 <rainbow_march(LEDStruct&)+0xf6>
	if (keyboard_update) { rainbow_update(leds); }
    332a:	4b5a      	ldr	r3, [pc, #360]	; (3494 <rainbow_march(LEDStruct&)+0x178>)
    332c:	781b      	ldrb	r3, [r3, #0]
    332e:	2b00      	cmp	r3, #0
    3330:	d16b      	bne.n	340a <rainbow_march(LEDStruct&)+0xee>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3332:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3336:	bb43      	cbnz	r3, 338a <rainbow_march(LEDStruct&)+0x6e>
    3338:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    333c:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    3340:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3342:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3346:	b2d2      	uxtb	r2, r2
    3348:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    334c:	bb4b      	cbnz	r3, 33a2 <rainbow_march(LEDStruct&)+0x86>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    334e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3352:	2b00      	cmp	r3, #0
    3354:	d151      	bne.n	33fa <rainbow_march(LEDStruct&)+0xde>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    3356:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    335a:	214b      	movs	r1, #75	; 0x4b
    335c:	4620      	mov	r0, r4
    335e:	f005 f8df 	bl	8520 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    3362:	4620      	mov	r0, r4
    3364:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3368:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    336a:	7802      	ldrb	r2, [r0, #0]
    336c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3370:	7842      	ldrb	r2, [r0, #1]
    3372:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3376:	7882      	ldrb	r2, [r0, #2]
    3378:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    337c:	3003      	adds	r0, #3
    337e:	4288      	cmp	r0, r1
    3380:	f1a3 0303 	sub.w	r3, r3, #3
    3384:	d1f1      	bne.n	336a <rainbow_march(LEDStruct&)+0x4e>
    3386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    338a:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    338e:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    3392:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    3394:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    3398:	b2d2      	uxtb	r2, r2
    339a:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    339e:	2b00      	cmp	r3, #0
    33a0:	d0d5      	beq.n	334e <rainbow_march(LEDStruct&)+0x32>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    33a2:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    33a6:	2125      	movs	r1, #37	; 0x25
    33a8:	4620      	mov	r0, r4
    33aa:	f005 f8b9 	bl	8520 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    33ae:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    33b2:	4623      	mov	r3, r4
    33b4:	4621      	mov	r1, r4
    33b6:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33b8:	7810      	ldrb	r0, [r2, #0]
    33ba:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    33be:	7850      	ldrb	r0, [r2, #1]
    33c0:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    33c4:	7890      	ldrb	r0, [r2, #2]
    33c6:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    33ca:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    33cc:	42aa      	cmp	r2, r5
    33ce:	f1a1 0103 	sub.w	r1, r1, #3
    33d2:	d1f1      	bne.n	33b8 <rainbow_march(LEDStruct&)+0x9c>
    33d4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    33d8:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33da:	7802      	ldrb	r2, [r0, #0]
    33dc:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    33e0:	7842      	ldrb	r2, [r0, #1]
    33e2:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    33e6:	7882      	ldrb	r2, [r0, #2]
    33e8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    33ec:	3003      	adds	r0, #3
    33ee:	4288      	cmp	r0, r1
    33f0:	f1a3 0303 	sub.w	r3, r3, #3
    33f4:	d1f1      	bne.n	33da <rainbow_march(LEDStruct&)+0xbe>
    33f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    33fa:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    33fe:	4620      	mov	r0, r4
    3400:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    3402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    3406:	f005 b88b 	b.w	8520 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    340a:	4620      	mov	r0, r4
    340c:	f7ff ff50 	bl	32b0 <rainbow_update(LEDStruct&)>
    3410:	e78f      	b.n	3332 <rainbow_march(LEDStruct&)+0x16>
    3412:	4921      	ldr	r1, [pc, #132]	; (3498 <rainbow_march(LEDStruct&)+0x17c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    3414:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    3418:	880b      	ldrh	r3, [r1, #0]
    341a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    341e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3422:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3426:	3319      	adds	r3, #25
    3428:	b29b      	uxth	r3, r3
    342a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    342e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3432:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3436:	3219      	adds	r2, #25
    3438:	b292      	uxth	r2, r2
    343a:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    343e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3442:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3446:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    344a:	eb02 2212 	add.w	r2, r2, r2, lsr #8

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    344e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3450:	3519      	adds	r5, #25
    leds.rainbow_rot    = rr;
    3452:	b2d2      	uxtb	r2, r2
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3454:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3458:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    345a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    345e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3460:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    3464:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    3466:	1212      	asrs	r2, r2, #8
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    3468:	2701      	movs	r7, #1
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    346a:	f3c6 16c0 	ubfx	r6, r6, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    346e:	3201      	adds	r2, #1
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    3470:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    3474:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    3476:	f880 61c4 	strb.w	r6, [r0, #452]	; 0x1c4

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    347a:	f880 2277 	strb.w	r2, [r0, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    347e:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    3482:	f880 727a 	strb.w	r7, [r0, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    3486:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    348a:	800d      	strh	r5, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    348c:	f7fe fd18 	bl	1ec0 <LEDDebug(LEDStruct&)>
    3490:	e74b      	b.n	332a <rainbow_march(LEDStruct&)+0xe>
    3492:	bf00      	nop
    3494:	1fff95d8 	.word	0x1fff95d8
    3498:	1fff8756 	.word	0x1fff8756

0000349c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    349c:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    349e:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    34a2:	f89d 6014 	ldrb.w	r6, [sp, #20]
    34a6:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    34aa:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    34ac:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    34ae:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    34b0:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    34b2:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    34b6:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    34ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    34be:	d940      	bls.n	3542 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    34c0:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    34c2:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    34c6:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    34ca:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    34ce:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    34d2:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    34d6:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    34da:	2a00      	cmp	r2, #0
    34dc:	d13f      	bne.n	355e <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    34de:	234b      	movs	r3, #75	; 0x4b
    34e0:	f880 2316 	strb.w	r2, [r0, #790]	; 0x316
    34e4:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315

	if (!leds.fire_sync) {
    34e8:	bb51      	cbnz	r1, 3540 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    34ea:	4c20      	ldr	r4, [pc, #128]	; (356c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    34ec:	8823      	ldrh	r3, [r4, #0]
    34ee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    34f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    34f6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    34fa:	3319      	adds	r3, #25
    34fc:	b29b      	uxth	r3, r3
    34fe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3502:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3506:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    350a:	3219      	adds	r2, #25
    350c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    350e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3512:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    3516:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    3518:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    351a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    351e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3522:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    3524:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3526:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    352a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    352e:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    3532:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3536:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    353a:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    353c:	f880 127e 	strb.w	r1, [r0, #638]	; 0x27e
    3540:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3542:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3546:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    354a:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    354e:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    3552:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    3556:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    355a:	2a00      	cmp	r2, #0
    355c:	d0c2      	beq.n	34e4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    355e:	2325      	movs	r3, #37	; 0x25
    3560:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    3564:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    3568:	e7be      	b.n	34e8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    356a:	bf00      	nop
    356c:	1fff8756 	.word	0x1fff8756

00003570 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    3570:	4b19      	ldr	r3, [pc, #100]	; (35d8 <fire_update(LEDStruct&)+0x68>)
	}
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    3572:	4a1a      	ldr	r2, [pc, #104]	; (35dc <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    3574:	781b      	ldrb	r3, [r3, #0]
	}
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    3576:	2100      	movs	r1, #0
    3578:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    357a:	2b05      	cmp	r3, #5
    357c:	d808      	bhi.n	3590 <fire_update(LEDStruct&)+0x20>
    357e:	e8df f003 	tbb	[pc, r3]
    3582:	150f      	.short	0x150f
    3584:	0924031b 	.word	0x0924031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
    3588:	4b15      	ldr	r3, [pc, #84]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    358a:	881b      	ldrh	r3, [r3, #0]
    358c:	f880 331a 	strb.w	r3, [r0, #794]	; 0x31a
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    3590:	f7fe bc96 	b.w	1ec0 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
    3594:	4b12      	ldr	r3, [pc, #72]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    3596:	881b      	ldrh	r3, [r3, #0]
    3598:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		default:	break;
	}
	LEDDebug(leds);
    359c:	f7fe bc90 	b.w	1ec0 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    35a0:	4b0f      	ldr	r3, [pc, #60]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    35a2:	881b      	ldrh	r3, [r3, #0]
    35a4:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    35a8:	f7fe bc8a 	b.w	1ec0 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    35ac:	4b0c      	ldr	r3, [pc, #48]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    35ae:	881b      	ldrh	r3, [r3, #0]
    35b0:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    35b4:	f7fe bc84 	b.w	1ec0 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
    35b8:	4b09      	ldr	r3, [pc, #36]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    35ba:	881b      	ldrh	r3, [r3, #0]
    35bc:	3300      	adds	r3, #0
    35be:	bf18      	it	ne
    35c0:	2301      	movne	r3, #1
    35c2:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    35c6:	f7fe bc7b 	b.w	1ec0 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sync		= (bool)update_arg;		break;	//c
		case 3:		leds.torch_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//e
    35ca:	4b05      	ldr	r3, [pc, #20]	; (35e0 <fire_update(LEDStruct&)+0x70>)
    35cc:	881b      	ldrh	r3, [r3, #0]
    35ce:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 5:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    35d2:	f7fe bc75 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    35d6:	bf00      	nop
    35d8:	1fff95e2 	.word	0x1fff95e2
    35dc:	1fff95d8 	.word	0x1fff95d8
    35e0:	1fff95e0 	.word	0x1fff95e0

000035e4 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    35e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    35e8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    35ec:	4dd0      	ldr	r5, [pc, #832]	; (3930 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    35ee:	b086      	sub	sp, #24
    35f0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    35f2:	2b00      	cmp	r3, #0
    35f4:	f000 8229 	beq.w	3a4a <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    35f8:	4bce      	ldr	r3, [pc, #824]	; (3934 <fire(LEDStruct&)+0x350>)
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	2b00      	cmp	r3, #0
    35fe:	f040 8220 	bne.w	3a42 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3602:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3606:	2b00      	cmp	r3, #0
    3608:	f000 82d1 	beq.w	3bae <fire(LEDStruct&)+0x5ca>
    360c:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3610:	882a      	ldrh	r2, [r5, #0]
    3612:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3616:	004f      	lsls	r7, r1, #1
    3618:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
    361c:	fb97 f7f3 	sdiv	r7, r7, r3
    3620:	3702      	adds	r7, #2
    3622:	b2ff      	uxtb	r7, r7
    3624:	44a6      	add	lr, r4
    3626:	f204 267e 	addw	r6, r4, #638	; 0x27e
    362a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    362e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3632:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3636:	3219      	adds	r2, #25
    3638:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    363a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    363e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3642:	b2c9      	uxtb	r1, r1
    3644:	fb11 f107 	smulbb	r1, r1, r7
    3648:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    364c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3650:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3652:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3654:	d1e9      	bne.n	362a <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3656:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    365a:	802a      	strh	r2, [r5, #0]
    365c:	2e00      	cmp	r6, #0
    365e:	f000 80f5 	beq.w	384c <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3662:	f1a3 0e03 	sub.w	lr, r3, #3
    3666:	f1be 0f01 	cmp.w	lr, #1
    366a:	f04f 0c01 	mov.w	ip, #1
    366e:	dd1a      	ble.n	36a6 <fire(LEDStruct&)+0xc2>
    3670:	f203 207b 	addw	r0, r3, #635	; 0x27b
    3674:	f203 277d 	addw	r7, r3, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3678:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 3938 <fire(LEDStruct&)+0x354>
    367c:	4420      	add	r0, r4
    367e:	4427      	add	r7, r4
    3680:	f204 287f 	addw	r8, r4, #639	; 0x27f
    3684:	7801      	ldrb	r1, [r0, #0]
    3686:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    368a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    368e:	fb89 a601 	smull	sl, r6, r9, r1
    3692:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3696:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3698:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    369c:	d1f2      	bne.n	3684 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    369e:	f1bc 0f00 	cmp.w	ip, #0
    36a2:	f000 8102 	beq.w	38aa <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36a6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    36aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    36ae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    36b2:	3219      	adds	r2, #25
    36b4:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    36b6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    36ba:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    36be:	802a      	strh	r2, [r5, #0]
    36c0:	b2c9      	uxtb	r1, r1
    36c2:	428e      	cmp	r6, r1
    36c4:	489a      	ldr	r0, [pc, #616]	; (3930 <fire(LEDStruct&)+0x34c>)
    36c6:	d926      	bls.n	3716 <fire(LEDStruct&)+0x132>
    36c8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    36cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    36d0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    36d4:	3219      	adds	r2, #25
    36d6:	b292      	uxth	r2, r2
    36d8:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    36dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    36e0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    36e4:	3619      	adds	r6, #25
    36e6:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    36e8:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    36ec:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    36f0:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    36f2:	b2d2      	uxtb	r2, r2
    36f4:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    36f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    36fc:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3700:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    3704:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3706:	8006      	strh	r6, [r0, #0]
    3708:	3960      	subs	r1, #96	; 0x60
    370a:	f892 027f 	ldrb.w	r0, [r2, #639]	; 0x27f
    370e:	fa80 f051 	uqadd8	r0, r0, r1
    3712:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}

	if (!leds.fire_sync) {
    3716:	f1bc 0f00 	cmp.w	ip, #0
    371a:	d112      	bne.n	3742 <fire(LEDStruct&)+0x15e>
    371c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    371e:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3722:	4983      	ldr	r1, [pc, #524]	; (3930 <fire(LEDStruct&)+0x34c>)
    3724:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3728:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    372c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3730:	3219      	adds	r2, #25
    3732:	b292      	uxth	r2, r2
    3734:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3738:	b2c0      	uxtb	r0, r0
    373a:	4286      	cmp	r6, r0
    373c:	802a      	strh	r2, [r5, #0]
    373e:	f200 80cd 	bhi.w	38dc <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    3742:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3746:	2a00      	cmp	r2, #0
    3748:	d15f      	bne.n	380a <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    374a:	2b00      	cmp	r3, #0
    374c:	f000 8226 	beq.w	3b9c <fire(LEDStruct&)+0x5b8>
    3750:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3754:	4690      	mov	r8, r2
    3756:	46b9      	mov	r9, r7
    3758:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    375a:	3b01      	subs	r3, #1
    375c:	ebc8 0503 	rsb	r5, r8, r3
    3760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3764:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3768:	4630      	mov	r0, r6
    376a:	f004 ffc9 	bl	8700 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    376e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3772:	5563      	strb	r3, [r4, r5]
    3774:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3776:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    377a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    377e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3780:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3782:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3786:	f108 0801 	add.w	r8, r8, #1
    378a:	4543      	cmp	r3, r8
    378c:	dce5      	bgt.n	375a <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    378e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3792:	b30a      	cbz	r2, 37d8 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    3794:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3798:	2a00      	cmp	r2, #0
    379a:	f040 81bf 	bne.w	3b1c <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    379e:	4690      	mov	r8, r2
    37a0:	2b00      	cmp	r3, #0
    37a2:	f000 81fe 	beq.w	3ba2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    37a6:	eb08 0503 	add.w	r5, r8, r3
    37aa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    37ae:	4630      	mov	r0, r6
    37b0:	f004 ffa6 	bl	8700 <HeatColor(unsigned char)>
    37b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37b8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    37bc:	54e2      	strb	r2, [r4, r3]
    37be:	4423      	add	r3, r4
        g = rhs.g;
    37c0:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    37c4:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    37c8:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    37ca:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    37cc:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    37d0:	f108 0801 	add.w	r8, r8, #1
    37d4:	4543      	cmp	r3, r8
    37d6:	dce6      	bgt.n	37a6 <fire(LEDStruct&)+0x1c2>
    37d8:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    37dc:	2a00      	cmp	r2, #0
    37de:	f000 80ad 	beq.w	393c <fire(LEDStruct&)+0x358>
    37e2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    37e6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37e8:	781a      	ldrb	r2, [r3, #0]
    37ea:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    37ee:	785a      	ldrb	r2, [r3, #1]
    37f0:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    37f4:	789a      	ldrb	r2, [r3, #2]
    37f6:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    37fa:	3303      	adds	r3, #3
    37fc:	4299      	cmp	r1, r3
    37fe:	f1a4 0403 	sub.w	r4, r4, #3
    3802:	d1f1      	bne.n	37e8 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3804:	b006      	add	sp, #24
    3806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    380a:	2b00      	cmp	r3, #0
    380c:	f000 80ea 	beq.w	39e4 <fire(LEDStruct&)+0x400>
    3810:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3814:	46b9      	mov	r9, r7
    3816:	4625      	mov	r5, r4
    3818:	f04f 0800 	mov.w	r8, #0
    381c:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    381e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3822:	4630      	mov	r0, r6
    3824:	f004 ff6c 	bl	8700 <HeatColor(unsigned char)>
    3828:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    382c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3830:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3834:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    3836:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3838:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    383a:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    383e:	f108 0801 	add.w	r8, r8, #1
    3842:	4543      	cmp	r3, r8
    3844:	f105 0503 	add.w	r5, r5, #3
    3848:	dce9      	bgt.n	381e <fire(LEDStruct&)+0x23a>
    384a:	e7a0      	b.n	378e <fire(LEDStruct&)+0x1aa>
    384c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3850:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3854:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3858:	fb9e fef3 	sdiv	lr, lr, r3
    385c:	f10e 0e02 	add.w	lr, lr, #2
    3860:	fa5f fe8e 	uxtb.w	lr, lr
    3864:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3868:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    386c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3870:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3874:	3219      	adds	r2, #25
    3876:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3878:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    387c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3880:	b2c9      	uxtb	r1, r1
    3882:	fb11 f10e 	smulbb	r1, r1, lr
    3886:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    388a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    388c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3890:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3892:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3894:	dbe8      	blt.n	3868 <fire(LEDStruct&)+0x284>
    3896:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3898:	f1a3 0e03 	sub.w	lr, r3, #3
    389c:	f1be 0f01 	cmp.w	lr, #1
    38a0:	f04f 0c00 	mov.w	ip, #0
    38a4:	f73f aee4 	bgt.w	3670 <fire(LEDStruct&)+0x8c>
    38a8:	e6fd      	b.n	36a6 <fire(LEDStruct&)+0xc2>
    38aa:	f203 26c6 	addw	r6, r3, #710	; 0x2c6
    38ae:	f503 7732 	add.w	r7, r3, #712	; 0x2c8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    38b2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 3938 <fire(LEDStruct&)+0x354>
    38b6:	4426      	add	r6, r4
    38b8:	4427      	add	r7, r4
    38ba:	7831      	ldrb	r1, [r6, #0]
    38bc:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    38c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    38c4:	fb88 9001 	smull	r9, r0, r8, r1
    38c8:	f10e 3eff 	add.w	lr, lr, #4294967295
    38cc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    38d0:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    38d4:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    38d8:	d1ef      	bne.n	38ba <fire(LEDStruct&)+0x2d6>
    38da:	e6e4      	b.n	36a6 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38dc:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    38e0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    38e4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    38e8:	3219      	adds	r2, #25
    38ea:	b292      	uxth	r2, r2
    38ec:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    38f0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    38f4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    38f8:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38fa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38fe:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3900:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3902:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3906:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    390a:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    390c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3910:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3914:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3918:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    391c:	800d      	strh	r5, [r1, #0]
    391e:	1201      	asrs	r1, r0, #8
    3920:	3960      	subs	r1, #96	; 0x60
    3922:	4630      	mov	r0, r6
    3924:	fa80 f051 	uqadd8	r0, r0, r1
    3928:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
    392c:	e709      	b.n	3742 <fire(LEDStruct&)+0x15e>
    392e:	bf00      	nop
    3930:	1fff8756 	.word	0x1fff8756
    3934:	1fff95d8 	.word	0x1fff95d8
    3938:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    393c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3940:	2a00      	cmp	r2, #0
    3942:	d15a      	bne.n	39fa <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3944:	2b00      	cmp	r3, #0
    3946:	f43f af5d 	beq.w	3804 <fire(LEDStruct&)+0x220>
    394a:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    394e:	46b9      	mov	r9, r7
    3950:	f04f 0800 	mov.w	r8, #0
    3954:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    3956:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    395a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    395e:	354b      	adds	r5, #75	; 0x4b
    3960:	4445      	add	r5, r8
    3962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3966:	4630      	mov	r0, r6
    3968:	f004 feca 	bl	8700 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    396c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3970:	5563      	strb	r3, [r4, r5]
    3972:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3974:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3978:	f89d 2015 	ldrb.w	r2, [sp, #21]
    397c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    397e:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3980:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3984:	f108 0801 	add.w	r8, r8, #1
    3988:	4543      	cmp	r3, r8
    398a:	dce4      	bgt.n	3956 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    398c:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3990:	2a00      	cmp	r2, #0
    3992:	f43f af37 	beq.w	3804 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    3996:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    399a:	2a00      	cmp	r2, #0
    399c:	f000 80dd 	beq.w	3b5a <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    39a0:	2b00      	cmp	r3, #0
    39a2:	f43f af2f 	beq.w	3804 <fire(LEDStruct&)+0x220>
    39a6:	4625      	mov	r5, r4
    39a8:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    39ac:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    39b0:	4630      	mov	r0, r6
    39b2:	f004 fea5 	bl	8700 <HeatColor(unsigned char)>
    39b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39ba:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    39be:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    39c2:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    39c6:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    39ca:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    39ce:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    39d2:	f108 0801 	add.w	r8, r8, #1
    39d6:	4543      	cmp	r3, r8
    39d8:	f105 0503 	add.w	r5, r5, #3
    39dc:	dce6      	bgt.n	39ac <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    39de:	b006      	add	sp, #24
    39e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    39e4:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    39e8:	2b00      	cmp	r3, #0
    39ea:	f040 80da 	bne.w	3ba2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    39ee:	f1bc 0f00 	cmp.w	ip, #0
    39f2:	f47f aef6 	bne.w	37e2 <fire(LEDStruct&)+0x1fe>
    39f6:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    39fa:	2b00      	cmp	r3, #0
    39fc:	f43f af02 	beq.w	3804 <fire(LEDStruct&)+0x220>
    3a00:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3a04:	46b9      	mov	r9, r7
    3a06:	4625      	mov	r5, r4
    3a08:	f04f 0800 	mov.w	r8, #0
    3a0c:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    3a0e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    3a12:	4630      	mov	r0, r6
    3a14:	f004 fe74 	bl	8700 <HeatColor(unsigned char)>
    3a18:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a1c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3a20:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a24:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    3a28:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    3a2c:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3a30:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3a34:	f108 0801 	add.w	r8, r8, #1
    3a38:	4543      	cmp	r3, r8
    3a3a:	f1a5 0503 	sub.w	r5, r5, #3
    3a3e:	dce6      	bgt.n	3a0e <fire(LEDStruct&)+0x42a>
    3a40:	e7a4      	b.n	398c <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    3a42:	4620      	mov	r0, r4
    3a44:	f7ff fd94 	bl	3570 <fire_update(LEDStruct&)>
    3a48:	e5db      	b.n	3602 <fire(LEDStruct&)+0x1e>
    3a4a:	882b      	ldrh	r3, [r5, #0]
    3a4c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3a50:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3a54:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3a58:	3119      	adds	r1, #25
    3a5a:	b289      	uxth	r1, r1
    3a5c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3a60:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3a64:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a68:	3219      	adds	r2, #25
    3a6a:	b292      	uxth	r2, r2
    3a6c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3a70:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3a74:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3a78:	f10e 0e19 	add.w	lr, lr, #25
    3a7c:	fa1f fe8e 	uxth.w	lr, lr
    3a80:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3a84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3a88:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3a8c:	3619      	adds	r6, #25
    3a8e:	b2b6      	uxth	r6, r6
    3a90:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3a94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3a98:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a9c:	3319      	adds	r3, #25
    3a9e:	b29b      	uxth	r3, r3
    3aa0:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3aa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3aa8:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3aac:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ab0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ab4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3ab8:	b2f6      	uxtb	r6, r6
    3aba:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3abe:	3719      	adds	r7, #25
    3ac0:	b2db      	uxtb	r3, r3
    3ac2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3ac6:	b2bf      	uxth	r7, r7
    3ac8:	11b6      	asrs	r6, r6, #6
    3aca:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3ace:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3ad2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3ad6:	119b      	asrs	r3, r3, #6
    3ad8:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3adc:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3ae0:	333c      	adds	r3, #60	; 0x3c
    3ae2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3ae6:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3aea:	fa5f f883 	uxtb.w	r8, r3
    3aee:	fa5f fc8c 	uxtb.w	ip, ip
    3af2:	3601      	adds	r6, #1
    3af4:	f10e 0314 	add.w	r3, lr, #20
    3af8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3afc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3b00:	f8cd c000 	str.w	ip, [sp]
    3b04:	f8cd 8004 	str.w	r8, [sp, #4]
    3b08:	9602      	str	r6, [sp, #8]
    3b0a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3b0e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3b12:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3b14:	802f      	strh	r7, [r5, #0]
    3b16:	f7ff fcc1 	bl	349c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3b1a:	e56d      	b.n	35f8 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d040      	beq.n	3ba2 <fire(LEDStruct&)+0x5be>
    3b20:	4625      	mov	r5, r4
    3b22:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    3b26:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3b2a:	4630      	mov	r0, r6
    3b2c:	f004 fde8 	bl	8700 <HeatColor(unsigned char)>
    3b30:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b34:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3b38:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b3c:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    3b40:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    3b44:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3b48:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3b4c:	f108 0801 	add.w	r8, r8, #1
    3b50:	4543      	cmp	r3, r8
    3b52:	f1a5 0503 	sub.w	r5, r5, #3
    3b56:	dce6      	bgt.n	3b26 <fire(LEDStruct&)+0x542>
    3b58:	e63e      	b.n	37d8 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3b5a:	4690      	mov	r8, r2
    3b5c:	2b00      	cmp	r3, #0
    3b5e:	f43f ae51 	beq.w	3804 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3b62:	334b      	adds	r3, #75	; 0x4b
    3b64:	ebc8 0503 	rsb	r5, r8, r3
    3b68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3b6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3b70:	4630      	mov	r0, r6
    3b72:	f004 fdc5 	bl	8700 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b76:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3b7a:	5563      	strb	r3, [r4, r5]
    3b7c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3b7e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3b82:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3b86:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3b88:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    3b8a:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3b8e:	f108 0801 	add.w	r8, r8, #1
    3b92:	4543      	cmp	r3, r8
    3b94:	dce5      	bgt.n	3b62 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3b96:	b006      	add	sp, #24
    3b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3b9c:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3ba0:	b163      	cbz	r3, 3bbc <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3ba2:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    3ba6:	2b00      	cmp	r3, #0
    3ba8:	f47f ae1b 	bne.w	37e2 <fire(LEDStruct&)+0x1fe>
    3bac:	e62a      	b.n	3804 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3bae:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3bb2:	b10a      	cbz	r2, 3bb8 <fire(LEDStruct&)+0x5d4>
    3bb4:	882a      	ldrh	r2, [r5, #0]
    3bb6:	e554      	b.n	3662 <fire(LEDStruct&)+0x7e>
    3bb8:	882a      	ldrh	r2, [r5, #0]
    3bba:	e66d      	b.n	3898 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3bbc:	f1bc 0f00 	cmp.w	ip, #0
    3bc0:	f47f ae0f 	bne.w	37e2 <fire(LEDStruct&)+0x1fe>
    3bc4:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3bc8:	e6bc      	b.n	3944 <fire(LEDStruct&)+0x360>
    3bca:	bf00      	nop

00003bcc <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    3bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3bd0:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3bd4:	4dd0      	ldr	r5, [pc, #832]	; (3f18 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    3bd6:	b087      	sub	sp, #28
    3bd8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    3bda:	2b00      	cmp	r3, #0
    3bdc:	f000 81da 	beq.w	3f94 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    3be0:	4bce      	ldr	r3, [pc, #824]	; (3f1c <torch(LEDStruct&)+0x350>)
    3be2:	781b      	ldrb	r3, [r3, #0]
    3be4:	2b00      	cmp	r3, #0
    3be6:	f040 8242 	bne.w	406e <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3bea:	f894 c315 	ldrb.w	ip, [r4, #789]	; 0x315
    3bee:	4663      	mov	r3, ip
    3bf0:	f1bc 0f00 	cmp.w	ip, #0
    3bf4:	f000 823f 	beq.w	4076 <torch(LEDStruct&)+0x4aa>
    3bf8:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3bfc:	882a      	ldrh	r2, [r5, #0]
    3bfe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3c02:	004f      	lsls	r7, r1, #1
    3c04:	f20c 2e7e 	addw	lr, ip, #638	; 0x27e
    3c08:	fb97 f7fc 	sdiv	r7, r7, ip
    3c0c:	3702      	adds	r7, #2
    3c0e:	b2ff      	uxtb	r7, r7
    3c10:	44a6      	add	lr, r4
    3c12:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3c16:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3c1a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3c1e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c22:	3219      	adds	r2, #25
    3c24:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c26:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3c2a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3c2e:	b2c9      	uxtb	r1, r1
    3c30:	fb11 f107 	smulbb	r1, r1, r7
    3c34:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3c38:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3c3c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    3c3e:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3c40:	d1e9      	bne.n	3c16 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3c42:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3c46:	802a      	strh	r2, [r5, #0]
    3c48:	2e00      	cmp	r6, #0
    3c4a:	f000 816b 	beq.w	3f24 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c4e:	f1ac 0703 	sub.w	r7, ip, #3
    3c52:	2f01      	cmp	r7, #1
    3c54:	f04f 0901 	mov.w	r9, #1
    3c58:	dd1a      	ble.n	3c90 <torch(LEDStruct&)+0xc4>
    3c5a:	f20c 207b 	addw	r0, ip, #635	; 0x27b
    3c5e:	f20c 267d 	addw	r6, ip, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3c62:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 3f20 <torch(LEDStruct&)+0x354>
    3c66:	4420      	add	r0, r4
    3c68:	4426      	add	r6, r4
    3c6a:	f204 2e7f 	addw	lr, r4, #639	; 0x27f
    3c6e:	7801      	ldrb	r1, [r0, #0]
    3c70:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    3c74:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    3c78:	fb88 ba01 	smull	fp, sl, r8, r1
    3c7c:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c80:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    3c82:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3c86:	d1f2      	bne.n	3c6e <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    3c88:	f1b9 0f00 	cmp.w	r9, #0
    3c8c:	f000 812c 	beq.w	3ee8 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c90:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3c94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3c98:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c9c:	3219      	adds	r2, #25
    3c9e:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    3ca0:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3ca4:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3ca8:	802a      	strh	r2, [r5, #0]
    3caa:	b2c0      	uxtb	r0, r0
    3cac:	4286      	cmp	r6, r0
    3cae:	499a      	ldr	r1, [pc, #616]	; (3f18 <torch(LEDStruct&)+0x34c>)
    3cb0:	d928      	bls.n	3d04 <torch(LEDStruct&)+0x138>
    3cb2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3cb6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3cba:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3cbe:	3219      	adds	r2, #25
    3cc0:	b292      	uxth	r2, r2
    3cc2:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3cc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3cca:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3cce:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cd0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cd4:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cd6:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cd8:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cdc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3ce0:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    3ce2:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3ce6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cea:	800e      	strh	r6, [r1, #0]
    3cec:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    3cf0:	f892 627f 	ldrb.w	r6, [r2, #639]	; 0x27f
    3cf4:	1200      	asrs	r0, r0, #8
    3cf6:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    3cfa:	4630      	mov	r0, r6
    3cfc:	fa80 f051 	uqadd8	r0, r0, r1
    3d00:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}
	if (!leds.fire_sync) {
    3d04:	f1b9 0f00 	cmp.w	r9, #0
    3d08:	d112      	bne.n	3d30 <torch(LEDStruct&)+0x164>
    3d0a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3d0c:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    3d10:	4981      	ldr	r1, [pc, #516]	; (3f18 <torch(LEDStruct&)+0x34c>)
    3d12:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3d16:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3d1a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3d1e:	3219      	adds	r2, #25
    3d20:	b292      	uxth	r2, r2
    3d22:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3d26:	b2c0      	uxtb	r0, r0
    3d28:	4286      	cmp	r6, r0
    3d2a:	802a      	strh	r2, [r5, #0]
    3d2c:	f200 80af 	bhi.w	3e8e <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3d30:	f1bc 0f00 	cmp.w	ip, #0
    3d34:	f000 81a4 	beq.w	4080 <torch(LEDStruct&)+0x4b4>
    3d38:	f204 277e 	addw	r7, r4, #638	; 0x27e
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3d3c:	2600      	movs	r6, #0
    3d3e:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    3d42:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    3d46:	199d      	adds	r5, r3, r6
    3d48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3d4c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3d50:	4648      	mov	r0, r9
    3d52:	f004 fcd5 	bl	8700 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d56:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3d5a:	5563      	strb	r3, [r4, r5]
    3d5c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3d5e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3d62:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3d66:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3d68:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3d6a:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3d6e:	3601      	adds	r6, #1
    3d70:	42b3      	cmp	r3, r6
    3d72:	dce6      	bgt.n	3d42 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3d74:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    3d78:	2e00      	cmp	r6, #0
    3d7a:	d175      	bne.n	3e68 <torch(LEDStruct&)+0x29c>
    3d7c:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3d80:	2b00      	cmp	r3, #0
    3d82:	f000 8183 	beq.w	408c <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    3d86:	334a      	adds	r3, #74	; 0x4a
    3d88:	1b9d      	subs	r5, r3, r6
    3d8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3d8e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3d92:	4648      	mov	r0, r9
    3d94:	f004 fcb4 	bl	8700 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3d98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3d9c:	5563      	strb	r3, [r4, r5]
    3d9e:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    3da0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3da4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3da8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3daa:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3dac:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3db0:	3601      	adds	r6, #1
    3db2:	42b3      	cmp	r3, r6
    3db4:	dce7      	bgt.n	3d86 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3db6:	2b4b      	cmp	r3, #75	; 0x4b
    3db8:	d047      	beq.n	3e4a <torch(LEDStruct&)+0x27e>
    3dba:	f10d 0914 	add.w	r9, sp, #20
    3dbe:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    3dc2:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3dc4:	4626      	mov	r6, r4
    3dc6:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3dc8:	f04f 0a01 	mov.w	sl, #1
    3dcc:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    3dd0:	f8cd a000 	str.w	sl, [sp]
    3dd4:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    3dd8:	fb98 f3f3 	sdiv	r3, r8, r3
    3ddc:	441a      	add	r2, r3
    3dde:	b2d2      	uxtb	r2, r2
    3de0:	23ff      	movs	r3, #255	; 0xff
    3de2:	4659      	mov	r1, fp
    3de4:	4648      	mov	r0, r9
    3de6:	f004 fcad 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3dea:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3dee:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3df2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3df6:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    3df8:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    3dfa:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3dfc:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    3e00:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    3e04:	fb98 f8f2 	sdiv	r8, r8, r2
    3e08:	eb08 0203 	add.w	r2, r8, r3
    3e0c:	b2d2      	uxtb	r2, r2
    3e0e:	23ff      	movs	r3, #255	; 0xff
    3e10:	4659      	mov	r1, fp
    3e12:	f8cd a000 	str.w	sl, [sp]
    3e16:	4648      	mov	r0, r9
    3e18:	f004 fc94 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3e1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    3e20:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e24:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3e28:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e2c:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    3e30:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3e34:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3e38:	3501      	adds	r5, #1
    3e3a:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    3e3e:	42aa      	cmp	r2, r5
    3e40:	f106 0603 	add.w	r6, r6, #3
    3e44:	f1a7 0703 	sub.w	r7, r7, #3
    3e48:	dcc0      	bgt.n	3dcc <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3e4a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    3e4e:	2b00      	cmp	r3, #0
    3e50:	f040 8096 	bne.w	3f80 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    3e54:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    3e58:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    3e5c:	1a9b      	subs	r3, r3, r2
    3e5e:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
}
    3e62:	b007      	add	sp, #28
    3e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e68:	4621      	mov	r1, r4
    3e6a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3e6e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e70:	7810      	ldrb	r0, [r2, #0]
    3e72:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    3e76:	7850      	ldrb	r0, [r2, #1]
    3e78:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    3e7c:	7890      	ldrb	r0, [r2, #2]
    3e7e:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    3e82:	3203      	adds	r2, #3
    3e84:	4295      	cmp	r5, r2
    3e86:	f1a1 0103 	sub.w	r1, r1, #3
    3e8a:	d1f1      	bne.n	3e70 <torch(LEDStruct&)+0x2a4>
    3e8c:	e793      	b.n	3db6 <torch(LEDStruct&)+0x1ea>
    3e8e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3e92:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3e96:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3e9a:	3219      	adds	r2, #25
    3e9c:	b292      	uxth	r2, r2
    3e9e:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3ea2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3ea6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3eaa:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3eac:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3eb0:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3eb2:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3eb4:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3eb8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3ebc:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3ebe:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3ec2:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3ec6:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3eca:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ece:	800d      	strh	r5, [r1, #0]
    3ed0:	1201      	asrs	r1, r0, #8
    3ed2:	3960      	subs	r1, #96	; 0x60
    3ed4:	4630      	mov	r0, r6
    3ed6:	fa80 f051 	uqadd8	r0, r0, r1
    3eda:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3ede:	f1bc 0f00 	cmp.w	ip, #0
    3ee2:	f47f af29 	bne.w	3d38 <torch(LEDStruct&)+0x16c>
    3ee6:	e0cf      	b.n	4088 <torch(LEDStruct&)+0x4bc>
    3ee8:	f20c 26c6 	addw	r6, ip, #710	; 0x2c6
    3eec:	f50c 7e32 	add.w	lr, ip, #712	; 0x2c8
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3ef0:	f8df 802c 	ldr.w	r8, [pc, #44]	; 3f20 <torch(LEDStruct&)+0x354>
    3ef4:	4426      	add	r6, r4
    3ef6:	44a6      	add	lr, r4
    3ef8:	7831      	ldrb	r1, [r6, #0]
    3efa:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3efe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    3f02:	fb88 a001 	smull	sl, r0, r8, r1
    3f06:	3f01      	subs	r7, #1
    3f08:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3f0c:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3f0e:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3f12:	d1f1      	bne.n	3ef8 <torch(LEDStruct&)+0x32c>
    3f14:	e6bc      	b.n	3c90 <torch(LEDStruct&)+0xc4>
    3f16:	bf00      	nop
    3f18:	1fff8756 	.word	0x1fff8756
    3f1c:	1fff95d8 	.word	0x1fff95d8
    3f20:	55555556 	.word	0x55555556
    3f24:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3f28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3f2c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3f30:	fb9e fefc 	sdiv	lr, lr, ip
    3f34:	f10e 0e02 	add.w	lr, lr, #2
    3f38:	fa5f fe8e 	uxtb.w	lr, lr
    3f3c:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    3f40:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3f44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3f48:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3f4c:	3219      	adds	r2, #25
    3f4e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f50:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3f54:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3f58:	b2c9      	uxtb	r1, r1
    3f5a:	fb11 f10e 	smulbb	r1, r1, lr
    3f5e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3f62:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3f64:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3f68:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3f6a:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3f6c:	dbe8      	blt.n	3f40 <torch(LEDStruct&)+0x374>
    3f6e:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3f70:	f1ac 0703 	sub.w	r7, ip, #3
    3f74:	2f01      	cmp	r7, #1
    3f76:	f04f 0900 	mov.w	r9, #0
    3f7a:	f73f ae6e 	bgt.w	3c5a <torch(LEDStruct&)+0x8e>
    3f7e:	e687      	b.n	3c90 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    3f80:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    3f84:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    3f88:	4413      	add	r3, r2
    3f8a:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
	else			   { leds.torch_index -= leds.torch_diff; }
}
    3f8e:	b007      	add	sp, #28
    3f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f94:	882b      	ldrh	r3, [r5, #0]
    3f96:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3f9a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3f9e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3fa2:	3119      	adds	r1, #25
    3fa4:	b289      	uxth	r1, r1
    3fa6:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3faa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3fae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3fb2:	3219      	adds	r2, #25
    3fb4:	b292      	uxth	r2, r2
    3fb6:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3fba:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3fbe:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3fc2:	f10e 0e19 	add.w	lr, lr, #25
    3fc6:	fa1f fe8e 	uxth.w	lr, lr
    3fca:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3fce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3fd2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3fd6:	3619      	adds	r6, #25
    3fd8:	b2b6      	uxth	r6, r6
    3fda:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3fde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3fe2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3fe6:	3319      	adds	r3, #25
    3fe8:	b29b      	uxth	r3, r3
    3fea:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3fee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ff2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3ff6:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ffa:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3ffe:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4002:	b2f6      	uxtb	r6, r6
    4004:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4008:	3719      	adds	r7, #25
    400a:	b2db      	uxtb	r3, r3
    400c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4010:	b2bf      	uxth	r7, r7
    4012:	11b6      	asrs	r6, r6, #6
    4014:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4018:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    401c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4020:	119b      	asrs	r3, r3, #6
    4022:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4026:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    402a:	333c      	adds	r3, #60	; 0x3c
    402c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4030:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4034:	fa5f fc8c 	uxtb.w	ip, ip
    4038:	fa5f f883 	uxtb.w	r8, r3
    403c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4040:	f10e 0314 	add.w	r3, lr, #20
    4044:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4048:	3601      	adds	r6, #1
    404a:	f8cd c000 	str.w	ip, [sp]
    404e:	f8cd 8004 	str.w	r8, [sp, #4]
    4052:	9602      	str	r6, [sp, #8]
    4054:	b2db      	uxtb	r3, r3
    4056:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    405a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    405e:	802f      	strh	r7, [r5, #0]
    4060:	f7ff fa1c 	bl	349c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    4064:	4b0b      	ldr	r3, [pc, #44]	; (4094 <torch(LEDStruct&)+0x4c8>)
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	2b00      	cmp	r3, #0
    406a:	f43f adbe 	beq.w	3bea <torch(LEDStruct&)+0x1e>
    406e:	4620      	mov	r0, r4
    4070:	f7ff fa7e 	bl	3570 <fire_update(LEDStruct&)>
    4074:	e5b9      	b.n	3bea <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4076:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    407a:	b14a      	cbz	r2, 4090 <torch(LEDStruct&)+0x4c4>
    407c:	882a      	ldrh	r2, [r5, #0]
    407e:	e5e6      	b.n	3c4e <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4080:	f1b9 0f00 	cmp.w	r9, #0
    4084:	f47f aef0 	bne.w	3e68 <torch(LEDStruct&)+0x29c>
    4088:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    408c:	2300      	movs	r3, #0
    408e:	e696      	b.n	3dbe <torch(LEDStruct&)+0x1f2>
    4090:	882a      	ldrh	r2, [r5, #0]
    4092:	e76d      	b.n	3f70 <torch(LEDStruct&)+0x3a4>
    4094:	1fff95d8 	.word	0x1fff95d8

00004098 <confetti_update(LEDStruct&)>:
	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4098:	4b0e      	ldr	r3, [pc, #56]	; (40d4 <confetti_update(LEDStruct&)+0x3c>)

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    409a:	4a0f      	ldr	r2, [pc, #60]	; (40d8 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    409c:	781b      	ldrb	r3, [r3, #0]

	leds.confetti_fade = cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    409e:	2100      	movs	r1, #0
    40a0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    40a2:	b13b      	cbz	r3, 40b4 <confetti_update(LEDStruct&)+0x1c>
    40a4:	2b01      	cmp	r3, #1
    40a6:	d103      	bne.n	40b0 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    40a8:	4b0c      	ldr	r3, [pc, #48]	; (40dc <confetti_update(LEDStruct&)+0x44>)
    40aa:	881b      	ldrh	r3, [r3, #0]
    40ac:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    40b0:	f7fd bf06 	b.w	1ec0 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    40b4:	4b09      	ldr	r3, [pc, #36]	; (40dc <confetti_update(LEDStruct&)+0x44>)
    40b6:	881b      	ldrh	r3, [r3, #0]
    40b8:	2b00      	cmp	r3, #0
    40ba:	bf14      	ite	ne
    40bc:	2301      	movne	r3, #1
    40be:	2300      	moveq	r3, #0
    40c0:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    40c4:	bf14      	ite	ne
    40c6:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    40c8:	234b      	moveq	r3, #75	; 0x4b
    40ca:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    40ce:	f7fd bef7 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    40d2:	bf00      	nop
    40d4:	1fff95e2 	.word	0x1fff95e2
    40d8:	1fff95d8 	.word	0x1fff95d8
    40dc:	1fff95e0 	.word	0x1fff95e0

000040e0 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    40e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    40e2:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    40e6:	4e4a      	ldr	r6, [pc, #296]	; (4210 <confetti(LEDStruct&)+0x130>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    40e8:	b085      	sub	sp, #20
    40ea:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    40ec:	bb83      	cbnz	r3, 4150 <confetti(LEDStruct&)+0x70>
    40ee:	8833      	ldrh	r3, [r6, #0]
    40f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    40f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    40f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    40fc:	3319      	adds	r3, #25
    40fe:	b29b      	uxth	r3, r3
    4100:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4104:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4108:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    410c:	3119      	adds	r1, #25
    410e:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4110:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4114:	b2d2      	uxtb	r2, r2
    4116:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    411a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    411e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4122:	11d2      	asrs	r2, r2, #7
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    4124:	2001      	movs	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4126:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    412a:	320a      	adds	r2, #10
	leds.mode_type = CONFETTI;
    412c:	2512      	movs	r5, #18
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    412e:	8031      	strh	r1, [r6, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    4130:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4134:	b2d2      	uxtb	r2, r2
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    4136:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    413a:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    413e:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4142:	2b00      	cmp	r3, #0
    4144:	d15c      	bne.n	4200 <confetti(LEDStruct&)+0x120>
	else { leds.strip_range = ONE_SIDE; }
    4146:	234b      	movs	r3, #75	; 0x4b
    4148:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

	leds.confetti_fade = cf;
    414c:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4150:	4b30      	ldr	r3, [pc, #192]	; (4214 <confetti(LEDStruct&)+0x134>)
    4152:	781b      	ldrb	r3, [r3, #0]
    4154:	2b00      	cmp	r3, #0
    4156:	d157      	bne.n	4208 <confetti(LEDStruct&)+0x128>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    4158:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    415c:	4620      	mov	r0, r4
    415e:	2196      	movs	r1, #150	; 0x96
    4160:	f004 fa90 	bl	8684 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4164:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    4166:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    416a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    416e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    4172:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    4176:	3319      	adds	r3, #25
    4178:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    417a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    417e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    4182:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4186:	3719      	adds	r7, #25
    4188:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    418a:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    418e:	fb03 f305 	mul.w	r3, r3, r5
    4192:	2101      	movs	r1, #1
    4194:	0c1d      	lsrs	r5, r3, #16
    4196:	9100      	str	r1, [sp, #0]
    4198:	a803      	add	r0, sp, #12
    419a:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    419e:	b2d2      	uxtb	r2, r2
    41a0:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41a2:	8037      	strh	r7, [r6, #0]
    41a4:	f004 face 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    41a8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    41ac:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    41ae:	5ce2      	ldrb	r2, [r4, r3]
    41b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    41b4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    41b8:	54e2      	strb	r2, [r4, r3]
    41ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
    41be:	784a      	ldrb	r2, [r1, #1]
    41c0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    41c4:	704a      	strb	r2, [r1, #1]
    41c6:	788b      	ldrb	r3, [r1, #2]
    41c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    41cc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41d0:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    41d2:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    41d6:	b98b      	cbnz	r3, 41fc <confetti(LEDStruct&)+0x11c>
    41d8:	4620      	mov	r0, r4
    41da:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    41de:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    41e0:	781a      	ldrb	r2, [r3, #0]
    41e2:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    41e6:	785a      	ldrb	r2, [r3, #1]
    41e8:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    41ec:	789a      	ldrb	r2, [r3, #2]
    41ee:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    41f2:	3303      	adds	r3, #3
    41f4:	428b      	cmp	r3, r1
    41f6:	f1a0 0003 	sub.w	r0, r0, #3
    41fa:	d1f1      	bne.n	41e0 <confetti(LEDStruct&)+0x100>
}
    41fc:	b005      	add	sp, #20
    41fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4200:	2396      	movs	r3, #150	; 0x96
    4202:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    4206:	e7a1      	b.n	414c <confetti(LEDStruct&)+0x6c>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    4208:	4620      	mov	r0, r4
    420a:	f7ff ff45 	bl	4098 <confetti_update(LEDStruct&)>
    420e:	e7a3      	b.n	4158 <confetti(LEDStruct&)+0x78>
    4210:	1fff8756 	.word	0x1fff8756
    4214:	1fff95d8 	.word	0x1fff95d8

00004218 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4218:	4b24      	ldr	r3, [pc, #144]	; (42ac <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    421a:	4a25      	ldr	r2, [pc, #148]	; (42b0 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    421c:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    421e:	2100      	movs	r1, #0
    4220:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4222:	2b09      	cmp	r3, #9
    4224:	d80a      	bhi.n	423c <one_sin_update(LEDStruct&)+0x24>
    4226:	e8df f003 	tbb	[pc, r3]
    422a:	1e10      	.short	0x1e10
    422c:	322d2823 	.word	0x322d2823
    4230:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    4234:	4b1f      	ldr	r3, [pc, #124]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    423c:	f7fd be40 	b.w	1ec0 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    4240:	4b1c      	ldr	r3, [pc, #112]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4242:	881b      	ldrh	r3, [r3, #0]
    4244:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    4248:	e7f8      	b.n	423c <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    424a:	4b1a      	ldr	r3, [pc, #104]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    424c:	881b      	ldrh	r3, [r3, #0]
    424e:	2b00      	cmp	r3, #0
    4250:	bf14      	ite	ne
    4252:	2301      	movne	r3, #1
    4254:	2300      	moveq	r3, #0
    4256:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    425a:	bf14      	ite	ne
    425c:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    425e:	234b      	moveq	r3, #75	; 0x4b
    4260:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4264:	e7ea      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    4266:	4b13      	ldr	r3, [pc, #76]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4268:	881b      	ldrh	r3, [r3, #0]
    426a:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    426e:	e7e5      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    4270:	4b10      	ldr	r3, [pc, #64]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4272:	881b      	ldrh	r3, [r3, #0]
    4274:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    4278:	e7e0      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    427a:	4b0e      	ldr	r3, [pc, #56]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    427c:	881b      	ldrh	r3, [r3, #0]
    427e:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    4282:	e7db      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    4284:	4b0b      	ldr	r3, [pc, #44]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4286:	881b      	ldrh	r3, [r3, #0]
    4288:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    428c:	e7d6      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    428e:	4b09      	ldr	r3, [pc, #36]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    4290:	881b      	ldrh	r3, [r3, #0]
    4292:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    4296:	e7d1      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    4298:	4b06      	ldr	r3, [pc, #24]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    429a:	881b      	ldrh	r3, [r3, #0]
    429c:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    42a0:	e7cc      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    42a2:	4b04      	ldr	r3, [pc, #16]	; (42b4 <one_sin_update(LEDStruct&)+0x9c>)
    42a4:	881b      	ldrh	r3, [r3, #0]
    42a6:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    42aa:	e7c7      	b.n	423c <one_sin_update(LEDStruct&)+0x24>
    42ac:	1fff95e2 	.word	0x1fff95e2
    42b0:	1fff95d8 	.word	0x1fff95d8
    42b4:	1fff95e0 	.word	0x1fff95e0

000042b8 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    42b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    42bc:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    42c0:	b085      	sub	sp, #20
    42c2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    42c4:	2b00      	cmp	r3, #0
    42c6:	f040 80b0 	bne.w	442a <one_sin(LEDStruct&)+0x172>
    42ca:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 4570 <one_sin(LEDStruct&)+0x2b8>
    42ce:	f8b8 3000 	ldrh.w	r3, [r8]
    42d2:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    42d6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    42da:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    42de:	3519      	adds	r5, #25
    42e0:	b2ad      	uxth	r5, r5
    42e2:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    42e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    42ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    42ee:	3319      	adds	r3, #25
    42f0:	b29b      	uxth	r3, r3
    42f2:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    42f6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    42fa:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    42fe:	f10e 0e19 	add.w	lr, lr, #25
    4302:	fa1f fe8e 	uxth.w	lr, lr
    4306:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    430a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    430e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4312:	3119      	adds	r1, #25
    4314:	b289      	uxth	r1, r1
    4316:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    431a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    431e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4322:	3719      	adds	r7, #25
    4324:	b2bf      	uxth	r7, r7
    4326:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    432a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    432e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    4332:	3019      	adds	r0, #25
    4334:	b280      	uxth	r0, r0
    4336:	eb00 2640 	add.w	r6, r0, r0, lsl #9
    433a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
    433e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4342:	3619      	adds	r6, #25
    4344:	b2b6      	uxth	r6, r6
    4346:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    434a:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    434e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4352:	f10c 0c19 	add.w	ip, ip, #25
    4356:	fa1f fc8c 	uxth.w	ip, ip
    435a:	eb0c 294c 	add.w	r9, ip, ip, lsl #9
    435e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
    4362:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4366:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    436a:	f109 0919 	add.w	r9, r9, #25
    436e:	fa1f f989 	uxth.w	r9, r9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4372:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4374:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4378:	b2cb      	uxtb	r3, r1
    437a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    437e:	eb09 2119 	add.w	r1, r9, r9, lsr #8
    4382:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    4386:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    438a:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    438c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4390:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4394:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4398:	b2c0      	uxtb	r0, r0
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    439a:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    439e:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43a0:	f8a8 9000 	strh.w	r9, [r8]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    43a4:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    43a8:	f04f 0801 	mov.w	r8, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43ac:	3201      	adds	r2, #1
    43ae:	f3ce 1e81 	ubfx	lr, lr, #6, #2
    43b2:	f3c3 1307 	ubfx	r3, r3, #4, #8
    43b6:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    43ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43be:	f3c6 1642 	ubfx	r6, r6, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    43c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43c6:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.mode_type = ONE_SIN;
    43ca:	f04f 0913 	mov.w	r9, #19
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    43ce:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43d2:	b2d2      	uxtb	r2, r2
    43d4:	f10e 0e01 	add.w	lr, lr, #1
    43d8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    43dc:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    43de:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    43e2:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    43e4:	f3c1 11c7 	ubfx	r1, r1, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43e8:	fa5f fc8c 	uxtb.w	ip, ip
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    43ec:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    43f0:	f884 8229 	strb.w	r8, [r4, #553]	; 0x229
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    43f4:	f884 922c 	strb.w	r9, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    43f8:	2d00      	cmp	r5, #0
    43fa:	f040 80ae 	bne.w	455a <one_sin(LEDStruct&)+0x2a2>
	else { leds.strip_range = ONE_SIDE; }
    43fe:	254b      	movs	r5, #75	; 0x4b
    4400:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    4404:	2500      	movs	r5, #0
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    4406:	f884 233f 	strb.w	r2, [r4, #831]	; 0x33f
	leds.sin_speed		= ss;
    440a:	f884 e340 	strb.w	lr, [r4, #832]	; 0x340
	leds.sin_cutoff		= sc;
    440e:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    4412:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    4416:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    441a:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    441e:	f884 c34f 	strb.w	ip, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    4422:	f884 1350 	strb.w	r1, [r4, #848]	; 0x350
	leds.sin_start		= 0;
    4426:	f884 5345 	strb.w	r5, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    442a:	4b50      	ldr	r3, [pc, #320]	; (456c <one_sin(LEDStruct&)+0x2b4>)
    442c:	781b      	ldrb	r3, [r3, #0]
    442e:	2b00      	cmp	r3, #0
    4430:	f040 8097 	bne.w	4562 <one_sin(LEDStruct&)+0x2aa>

	leds.sin_start += leds.sin_inc;
    4434:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    4438:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    443c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    4440:	440b      	add	r3, r1
    4442:	b2db      	uxtb	r3, r3
    4444:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    4448:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    444c:	2a00      	cmp	r2, #0
    444e:	d07c      	beq.n	454a <one_sin(LEDStruct&)+0x292>
		leds.sin_phase += leds.sin_speed;
    4450:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    4454:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    4458:	4413      	add	r3, r2
    445a:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    445e:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    4462:	2b00      	cmp	r3, #0
    4464:	d06e      	beq.n	4544 <one_sin(LEDStruct&)+0x28c>
    4466:	f204 19c7 	addw	r9, r4, #455	; 0x1c7
    446a:	4625      	mov	r5, r4
    446c:	1c67      	adds	r7, r4, #1
    446e:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4470:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    4474:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    4478:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    447c:	f894 b341 	ldrb.w	fp, [r4, #833]	; 0x341
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    4480:	f894 e350 	ldrb.w	lr, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4484:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    4488:	fa5f fa86 	uxtb.w	sl, r6
    448c:	fb03 230a 	mla	r3, r3, sl, r2
    4490:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4492:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    4494:	bf44      	itt	mi
    4496:	43db      	mvnmi	r3, r3
    4498:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    449a:	005b      	lsls	r3, r3, #1
    449c:	b2db      	uxtb	r3, r3
    449e:	1c5a      	adds	r2, r3, #1
    44a0:	fb02 f303 	mul.w	r3, r2, r3
    44a4:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    44a6:	fb03 f202 	mul.w	r2, r3, r2
    44aa:	1212      	asrs	r2, r2, #8
    44ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    44b0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    44b4:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    44b6:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    44b8:	bf54      	ite	pl
    44ba:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    44bc:	23ff      	movmi	r3, #255	; 0xff
    44be:	f894 234f 	ldrb.w	r2, [r4, #847]	; 0x34f
    44c2:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    44c6:	4629      	mov	r1, r5
    44c8:	a803      	add	r0, sp, #12
    44ca:	459b      	cmp	fp, r3
    44cc:	bf34      	ite	cc
    44ce:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    44d2:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    44d6:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    44da:	f004 fb2f 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    44de:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    44e2:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    44e6:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    44ea:	9100      	str	r1, [sp, #0]
    44ec:	fb02 320a 	mla	r2, r2, sl, r3
    44f0:	b2d2      	uxtb	r2, r2
    44f2:	465b      	mov	r3, fp
    44f4:	4649      	mov	r1, r9
    44f6:	a803      	add	r0, sp, #12
    44f8:	f004 f924 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    44fc:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    4500:	f89d 200c 	ldrb.w	r2, [sp, #12]
    4504:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4508:	f807 3c01 	strb.w	r3, [r7, #-1]
    450c:	786a      	ldrb	r2, [r5, #1]
    450e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4512:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4516:	706a      	strb	r2, [r5, #1]
    4518:	78ab      	ldrb	r3, [r5, #2]
    451a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    451e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4522:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    4524:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    4528:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    452c:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    4530:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    4532:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4534:	42b2      	cmp	r2, r6
    4536:	f105 0503 	add.w	r5, r5, #3
    453a:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    453e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    4542:	dc97      	bgt.n	4474 <one_sin(LEDStruct&)+0x1bc>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    4544:	b005      	add	sp, #20
    4546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    454a:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    454e:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    4552:	1a9b      	subs	r3, r3, r2
    4554:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    4558:	e781      	b.n	445e <one_sin(LEDStruct&)+0x1a6>
void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    455a:	2596      	movs	r5, #150	; 0x96
    455c:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    4560:	e750      	b.n	4404 <one_sin(LEDStruct&)+0x14c>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    4562:	4620      	mov	r0, r4
    4564:	f7ff fe58 	bl	4218 <one_sin_update(LEDStruct&)>
    4568:	e764      	b.n	4434 <one_sin(LEDStruct&)+0x17c>
    456a:	bf00      	nop
    456c:	1fff95d8 	.word	0x1fff95d8
    4570:	1fff8756 	.word	0x1fff8756

00004574 <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    4574:	b570      	push	{r4, r5, r6, lr}
    4576:	4604      	mov	r4, r0
    4578:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    457a:	4d1b      	ldr	r5, [pc, #108]	; (45e8 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    457c:	2002      	movs	r0, #2
    457e:	f004 ff4b 	bl	9418 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4582:	882b      	ldrh	r3, [r5, #0]
    4584:	4418      	add	r0, r3
    4586:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    458a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    458e:	f243 6319 	movw	r3, #13849	; 0x3619
    4592:	4418      	add	r0, r3
    4594:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4596:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    459a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    459e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    45a2:	b2d2      	uxtb	r2, r2
    45a4:	4403      	add	r3, r0
    45a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    45aa:	b29b      	uxth	r3, r3
    45ac:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    45ae:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    45b0:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    45b4:	321b      	adds	r2, #27
    45b6:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    45ba:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    45be:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    45c2:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    45c6:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    45ca:	4620      	mov	r0, r4
    45cc:	aa01      	add	r2, sp, #4
    45ce:	2196      	movs	r1, #150	; 0x96
    45d0:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    45d2:	f88d 6004 	strb.w	r6, [sp, #4]
    45d6:	f88d 6005 	strb.w	r6, [sp, #5]
    45da:	f88d 6006 	strb.w	r6, [sp, #6]
    45de:	f003 ff8f 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
}
    45e2:	b002      	add	sp, #8
    45e4:	bd70      	pop	{r4, r5, r6, pc}
    45e6:	bf00      	nop
    45e8:	1fff8756 	.word	0x1fff8756

000045ec <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    45ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    45f0:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    45f4:	b087      	sub	sp, #28
    45f6:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    45f8:	2b00      	cmp	r3, #0
    45fa:	f000 8089 	beq.w	4710 <fadeup(LEDStruct&)+0x124>
    45fe:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    4602:	9303      	str	r3, [sp, #12]
    4604:	4606      	mov	r6, r0
    4606:	4618      	mov	r0, r3
    4608:	4b5d      	ldr	r3, [pc, #372]	; (4780 <fadeup(LEDStruct&)+0x194>)
    460a:	881b      	ldrh	r3, [r3, #0]
    460c:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    4610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4614:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4618:	3419      	adds	r4, #25
    461a:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    461c:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4620:	b2db      	uxtb	r3, r3
    4622:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    4626:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    462a:	ea4f 2929 	mov.w	r9, r9, asr #8
    462e:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    4632:	2301      	movs	r3, #1
    4634:	fa5f f989 	uxtb.w	r9, r9
    4638:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    463c:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    4640:	f007 fa80 	bl	bb44 <__aeabi_ui2f>
    4644:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    4648:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    464c:	465b      	mov	r3, fp
    464e:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    4652:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    4656:	46d3      	mov	fp, sl
    4658:	9001      	str	r0, [sp, #4]
    465a:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    465e:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4660:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4662:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4666:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    466a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    466e:	3419      	adds	r4, #25
    4670:	b2a4      	uxth	r4, r4
    4672:	2373      	movs	r3, #115	; 0x73
    4674:	fb03 f004 	mul.w	r0, r3, r4
    4678:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    467a:	9b01      	ldr	r3, [sp, #4]
    467c:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4680:	300a      	adds	r0, #10
    4682:	b280      	uxth	r0, r0
    4684:	f007 fa5e 	bl	bb44 <__aeabi_ui2f>
    4688:	493e      	ldr	r1, [pc, #248]	; (4784 <fadeup(LEDStruct&)+0x198>)
    468a:	f007 fb67 	bl	bd5c <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    468e:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    4692:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    4696:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    469a:	3319      	adds	r3, #25
    469c:	b29b      	uxth	r3, r3
    469e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    46a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    46a6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    46aa:	3419      	adds	r4, #25
    46ac:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46ae:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    46b2:	b2c9      	uxtb	r1, r1
    46b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    46b8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    46bc:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    46be:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    46c2:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    46c4:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    46c8:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    46cc:	b2c8      	uxtb	r0, r1
    46ce:	f007 fa39 	bl	bb44 <__aeabi_ui2f>
    46d2:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    46d4:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    46d6:	4a2c      	ldr	r2, [pc, #176]	; (4788 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    46d8:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    46dc:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    46de:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    46e2:	d8be      	bhi.n	4662 <fadeup(LEDStruct&)+0x76>
    46e4:	9a03      	ldr	r2, [sp, #12]
    46e6:	9e02      	ldr	r6, [sp, #8]
    46e8:	4f25      	ldr	r7, [pc, #148]	; (4780 <fadeup(LEDStruct&)+0x194>)
    46ea:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    46ee:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    46f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    46f6:	18f5      	adds	r5, r6, r3
    46f8:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    46fa:	22ff      	movs	r2, #255	; 0xff
    46fc:	803c      	strh	r4, [r7, #0]
    46fe:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    4700:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    4702:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    4704:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    4706:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    4708:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    470a:	b007      	add	sp, #28
    470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4710:	9d02      	ldr	r5, [sp, #8]
    4712:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4716:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    471a:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    471e:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    4722:	3305      	adds	r3, #5
    4724:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4726:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    472a:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    472e:	4429      	add	r1, r5
    4730:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4732:	24ff      	movs	r4, #255	; 0xff
    4734:	f88d 3016 	strb.w	r3, [sp, #22]
    4738:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    473c:	f004 f9fe 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    4740:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4744:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4748:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    474c:	f88d 3014 	strb.w	r3, [sp, #20]
    4750:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    4754:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4758:	a805      	add	r0, sp, #20
    475a:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    475c:	f88d 4015 	strb.w	r4, [sp, #21]
    4760:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4764:	f004 f9ea 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4768:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    476c:	2bff      	cmp	r3, #255	; 0xff
    476e:	d1cc      	bne.n	470a <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    4770:	9a02      	ldr	r2, [sp, #8]
    4772:	2301      	movs	r3, #1
    4774:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    4778:	b007      	add	sp, #28
    477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    477e:	bf00      	nop
    4780:	1fff8756 	.word	0x1fff8756
    4784:	42c80000 	.word	0x42c80000
    4788:	437f0000 	.word	0x437f0000

0000478c <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4790:	4b65      	ldr	r3, [pc, #404]	; (4928 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    4792:	4605      	mov	r5, r0
    4794:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4796:	781a      	ldrb	r2, [r3, #0]
    4798:	2196      	movs	r1, #150	; 0x96
    479a:	f003 ff73 	bl	8684 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    479e:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    47a2:	2600      	movs	r6, #0
    47a4:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    47a8:	2c00      	cmp	r4, #0
    47aa:	d07e      	beq.n	48aa <explosion(LEDStruct&)+0x11e>
    47ac:	f8df 9190 	ldr.w	r9, [pc, #400]	; 4940 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47b0:	f04f 08ff 	mov.w	r8, #255	; 0xff
    47b4:	e03b      	b.n	482e <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    47b6:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    47ba:	4650      	mov	r0, sl
    47bc:	f007 f912 	bl	b9e4 <__addsf3>
    47c0:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    47c2:	2100      	movs	r1, #0
    47c4:	4638      	mov	r0, r7
    47c6:	f007 fbb3 	bl	bf30 <__aeabi_fcmplt>
    47ca:	4958      	ldr	r1, [pc, #352]	; (492c <explosion(LEDStruct&)+0x1a0>)
    47cc:	2800      	cmp	r0, #0
    47ce:	d168      	bne.n	48a2 <explosion(LEDStruct&)+0x116>
    47d0:	4638      	mov	r0, r7
    47d2:	f007 fbcb 	bl	bf6c <__aeabi_fcmpgt>
    47d6:	b100      	cbz	r0, 47da <explosion(LEDStruct&)+0x4e>
    47d8:	4f54      	ldr	r7, [pc, #336]	; (492c <explosion(LEDStruct&)+0x1a0>)
    47da:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    47de:	4651      	mov	r1, sl
    47e0:	f8d9 0000 	ldr.w	r0, [r9]
    47e4:	f007 fa06 	bl	bbf4 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    47e8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    47ec:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    47f0:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    47f4:	f007 f9fe 	bl	bbf4 <__aeabi_fmul>
    47f8:	4601      	mov	r1, r0
    47fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    47fe:	f007 f8ef 	bl	b9e0 <__aeabi_fsub>
    4802:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    4806:	f007 f9f5 	bl	bbf4 <__aeabi_fmul>
    480a:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    480e:	f007 fbdd 	bl	bfcc <__aeabi_f2uiz>
    4812:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    4816:	b2c0      	uxtb	r0, r0
    4818:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    481a:	f106 0601 	add.w	r6, r6, #1
    481e:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    4822:	bf38      	it	cc
    4824:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4828:	b2f6      	uxtb	r6, r6
    482a:	42b3      	cmp	r3, r6
    482c:	d93b      	bls.n	48a6 <explosion(LEDStruct&)+0x11a>
    482e:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    4832:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4836:	f007 fba3 	bl	bf80 <__aeabi_f2iz>
    483a:	4607      	mov	r7, r0
    483c:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    4840:	f007 fbc4 	bl	bfcc <__aeabi_f2uiz>
    4844:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4848:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    484c:	a901      	add	r1, sp, #4
    484e:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4850:	f88d 3000 	strb.w	r3, [sp]
    4854:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4858:	f004 f970 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    485c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    4860:	1829      	adds	r1, r5, r0
    4862:	5c2b      	ldrb	r3, [r5, r0]
    4864:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4868:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    486c:	542b      	strb	r3, [r5, r0]
    486e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4872:	784a      	ldrb	r2, [r1, #1]
    4874:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4878:	704a      	strb	r2, [r1, #1]
    487a:	788b      	ldrb	r3, [r1, #2]
    487c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4880:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    4884:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    4886:	708b      	strb	r3, [r1, #2]
    4888:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    488c:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    4890:	2b00      	cmp	r3, #0
    4892:	d190      	bne.n	47b6 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    4894:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4898:	4651      	mov	r1, sl
    489a:	f007 f8a1 	bl	b9e0 <__aeabi_fsub>
    489e:	4607      	mov	r7, r0
    48a0:	e78f      	b.n	47c2 <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    48a2:	2700      	movs	r7, #0
    48a4:	e799      	b.n	47da <explosion(LEDStruct&)+0x4e>
    48a6:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    48aa:	462a      	mov	r2, r5
    48ac:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    48b0:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48b2:	7819      	ldrb	r1, [r3, #0]
    48b4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    48b8:	7859      	ldrb	r1, [r3, #1]
    48ba:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    48be:	7899      	ldrb	r1, [r3, #2]
    48c0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    48c4:	3303      	adds	r3, #3
    48c6:	4283      	cmp	r3, r0
    48c8:	f1a2 0203 	sub.w	r2, r2, #3
    48cc:	d1f1      	bne.n	48b2 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    48ce:	bb44      	cbnz	r4, 4922 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    48d0:	aa01      	add	r2, sp, #4
    48d2:	2196      	movs	r1, #150	; 0x96
    48d4:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    48d6:	f88d 4004 	strb.w	r4, [sp, #4]
    48da:	f88d 4005 	strb.w	r4, [sp, #5]
    48de:	f88d 4006 	strb.w	r4, [sp, #6]
    48e2:	f003 fe0d 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    48e6:	4812      	ldr	r0, [pc, #72]	; (4930 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    48e8:	4c12      	ldr	r4, [pc, #72]	; (4934 <explosion(LEDStruct&)+0x1a8>)
    48ea:	8803      	ldrh	r3, [r0, #0]
    48ec:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    48ee:	4912      	ldr	r1, [pc, #72]	; (4938 <explosion(LEDStruct&)+0x1ac>)
    48f0:	4a12      	ldr	r2, [pc, #72]	; (493c <explosion(LEDStruct&)+0x1b0>)
    48f2:	9401      	str	r4, [sp, #4]
    48f4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    48f8:	8809      	ldrh	r1, [r1, #0]
    48fa:	8812      	ldrh	r2, [r2, #0]
    48fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4900:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4904:	440a      	add	r2, r1
    4906:	3319      	adds	r3, #25
    4908:	b29b      	uxth	r3, r3
    490a:	b292      	uxth	r2, r2
	return ret;
    490c:	9901      	ldr	r1, [sp, #4]
    490e:	8003      	strh	r3, [r0, #0]
    4910:	fb03 f302 	mul.w	r3, r3, r2
    4914:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    4918:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    491a:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    491e:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    4922:	b002      	add	sp, #8
    4924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4928:	1fff8742 	.word	0x1fff8742
    492c:	42940000 	.word	0x42940000
    4930:	1fff8756 	.word	0x1fff8756
    4934:	1fffa074 	.word	0x1fffa074
    4938:	1fff8748 	.word	0x1fff8748
    493c:	1fff8744 	.word	0x1fff8744
    4940:	1fff8750 	.word	0x1fff8750

00004944 <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    4944:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4946:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    494a:	b082      	sub	sp, #8
    494c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    494e:	bb03      	cbnz	r3, 4992 <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4950:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    4952:	2115      	movs	r1, #21
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4954:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4956:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    495a:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    495e:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4962:	f884 2354 	strb.w	r2, [r4, #852]	; 0x354
    4966:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4968:	aa01      	add	r2, sp, #4
    496a:	2196      	movs	r1, #150	; 0x96
    496c:	4620      	mov	r0, r4
    496e:	f88d 3004 	strb.w	r3, [sp, #4]
    4972:	f88d 3005 	strb.w	r3, [sp, #5]
    4976:	f88d 3006 	strb.w	r3, [sp, #6]
    497a:	f003 fdc1 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    497e:	4a0f      	ldr	r2, [pc, #60]	; (49bc <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    4980:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    4984:	6812      	ldr	r2, [r2, #0]
    4986:	9201      	str	r2, [sp, #4]
	return ret;
    4988:	9a01      	ldr	r2, [sp, #4]
    498a:	429a      	cmp	r2, r3
    498c:	d212      	bcs.n	49b4 <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    498e:	b002      	add	sp, #8
    4990:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4992:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    4996:	2b01      	cmp	r3, #1
    4998:	d004      	beq.n	49a4 <fireworks(LEDStruct&)+0x60>
    499a:	d207      	bcs.n	49ac <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    499c:	f7ff fe26 	bl	45ec <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    49a0:	b002      	add	sp, #8
    49a2:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    49a4:	f7ff fef2 	bl	478c <explosion(LEDStruct&)>
			break;
	}
}
    49a8:	b002      	add	sp, #8
    49aa:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    49ac:	2b02      	cmp	r3, #2
    49ae:	d0da      	beq.n	4966 <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    49b0:	b002      	add	sp, #8
    49b2:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    49b4:	4620      	mov	r0, r4
    49b6:	f7ff fddd 	bl	4574 <prepare_for_explosion(LEDStruct&)>
    49ba:	e7e8      	b.n	498e <fireworks(LEDStruct&)+0x4a>
    49bc:	1fffa074 	.word	0x1fffa074

000049c0 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    49c0:	4b18      	ldr	r3, [pc, #96]	; (4a24 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    49c2:	4a19      	ldr	r2, [pc, #100]	; (4a28 <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    49c4:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    49c6:	2100      	movs	r1, #0
    49c8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    49ca:	2b04      	cmp	r3, #4
    49cc:	d80d      	bhi.n	49ea <shooting_pole_update(LEDStruct&)+0x2a>
    49ce:	e8df f003 	tbb	[pc, r3]
    49d2:	1403      	.short	0x1403
    49d4:	201a      	.short	0x201a
    49d6:	0e          	.byte	0x0e
    49d7:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    49d8:	4b14      	ldr	r3, [pc, #80]	; (4a2c <shooting_pole_update(LEDStruct&)+0x6c>)
    49da:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    49dc:	2b09      	cmp	r3, #9
    49de:	d91e      	bls.n	4a1e <shooting_pole_update(LEDStruct&)+0x5e>
    49e0:	2b41      	cmp	r3, #65	; 0x41
    49e2:	bfa8      	it	ge
    49e4:	2341      	movge	r3, #65	; 0x41
    49e6:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    49ea:	f7fd ba69 	b.w	1ec0 <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    49ee:	4b0f      	ldr	r3, [pc, #60]	; (4a2c <shooting_pole_update(LEDStruct&)+0x6c>)
    49f0:	881b      	ldrh	r3, [r3, #0]
    49f2:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		default:	break;
	}
	LEDDebug(leds);
    49f6:	f7fd ba63 	b.w	1ec0 <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    49fa:	4b0c      	ldr	r3, [pc, #48]	; (4a2c <shooting_pole_update(LEDStruct&)+0x6c>)
    49fc:	881b      	ldrh	r3, [r3, #0]
    49fe:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4a02:	f7fd ba5d 	b.w	1ec0 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    4a06:	4b09      	ldr	r3, [pc, #36]	; (4a2c <shooting_pole_update(LEDStruct&)+0x6c>)
    4a08:	881b      	ldrh	r3, [r3, #0]
    4a0a:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4a0e:	f7fd ba57 	b.w	1ec0 <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    4a12:	4b06      	ldr	r3, [pc, #24]	; (4a2c <shooting_pole_update(LEDStruct&)+0x6c>)
    4a14:	881b      	ldrh	r3, [r3, #0]
    4a16:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    4a1a:	f7fd ba51 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    4a1e:	230a      	movs	r3, #10
    4a20:	e7e1      	b.n	49e6 <shooting_pole_update(LEDStruct&)+0x26>
    4a22:	bf00      	nop
    4a24:	1fff95e2 	.word	0x1fff95e2
    4a28:	1fff95d8 	.word	0x1fff95d8
    4a2c:	1fff95e0 	.word	0x1fff95e0

00004a30 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    4a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4a34:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    4a38:	b087      	sub	sp, #28
    4a3a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4a3c:	2e00      	cmp	r6, #0
    4a3e:	f000 80f7 	beq.w	4c30 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    4a42:	4bbb      	ldr	r3, [pc, #748]	; (4d30 <shooting_pole(LEDStruct&)+0x300>)
    4a44:	781b      	ldrb	r3, [r3, #0]
    4a46:	2b00      	cmp	r3, #0
    4a48:	f040 815f 	bne.w	4d0a <shooting_pole(LEDStruct&)+0x2da>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4a4c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4a50:	f204 17c7 	addw	r7, r4, #455	; 0x1c7
    4a54:	b311      	cbz	r1, 4a9c <shooting_pole(LEDStruct&)+0x6c>
    4a56:	4626      	mov	r6, r4
    4a58:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    4a5a:	f04f 0801 	mov.w	r8, #1
    4a5e:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4a62:	f8cd 8000 	str.w	r8, [sp]
    4a66:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    4a6a:	fb92 f2f1 	sdiv	r2, r2, r1
    4a6e:	441a      	add	r2, r3
    4a70:	b2d2      	uxtb	r2, r2
    4a72:	23ff      	movs	r3, #255	; 0xff
    4a74:	4639      	mov	r1, r7
    4a76:	a805      	add	r0, sp, #20
    4a78:	f003 fe64 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a7c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a80:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4a84:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a88:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4a8a:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4a8c:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4a8e:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    4a92:	3501      	adds	r5, #1
    4a94:	42a9      	cmp	r1, r5
    4a96:	f106 0603 	add.w	r6, r6, #3
    4a9a:	dce0      	bgt.n	4a5e <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    4a9c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4aa0:	2b00      	cmp	r3, #0
    4aa2:	f000 80bd 	beq.w	4c20 <shooting_pole(LEDStruct&)+0x1f0>
    4aa6:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    4aaa:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    4aae:	4413      	add	r3, r2
    4ab0:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    4ab4:	294a      	cmp	r1, #74	; 0x4a
    4ab6:	f300 812c 	bgt.w	4d12 <shooting_pole(LEDStruct&)+0x2e2>
    4aba:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    4abe:	18a3      	adds	r3, r4, r2
    4ac0:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4ac4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4ac8:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4aca:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4acc:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4ad0:	43c9      	mvns	r1, r1
    4ad2:	b2c9      	uxtb	r1, r1
    4ad4:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4ad6:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4ada:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4ade:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4ae2:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4ae4:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4ae6:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4ae8:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4aea:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4aec:	709a      	strb	r2, [r3, #2]
    4aee:	3303      	adds	r3, #3
    4af0:	42ab      	cmp	r3, r5
    4af2:	d1e7      	bne.n	4ac4 <shooting_pole(LEDStruct&)+0x94>
    4af4:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4af8:	f8df 8248 	ldr.w	r8, [pc, #584]	; 4d44 <shooting_pole(LEDStruct&)+0x314>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4afc:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4b00:	f8d8 2000 	ldr.w	r2, [r8]
    4b04:	9205      	str	r2, [sp, #20]
	return ret;
    4b06:	9805      	ldr	r0, [sp, #20]
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4b08:	f44f 728c 	mov.w	r2, #280	; 0x118
    4b0c:	fb02 f200 	mul.w	r2, r2, r0
    4b10:	021b      	lsls	r3, r3, #8
    4b12:	fb03 f202 	mul.w	r2, r3, r2
    4b16:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4b1a:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    4b1e:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4b20:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4b22:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4b26:	d503      	bpl.n	4b30 <shooting_pole(LEDStruct&)+0x100>
    4b28:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4b2c:	3307      	adds	r3, #7
    4b2e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4b30:	0a18      	lsrs	r0, r3, #8
    4b32:	f8df e214 	ldr.w	lr, [pc, #532]	; 4d48 <shooting_pole(LEDStruct&)+0x318>
    uint8_t  m   = slope[section];
    4b36:	4e7f      	ldr	r6, [pc, #508]	; (4d34 <shooting_pole(LEDStruct&)+0x304>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4b38:	5c36      	ldrb	r6, [r6, r0]
    4b3a:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    4b3e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    4b42:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    4b46:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4b48:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    4b4a:	bf48      	it	mi
    4b4c:	4276      	negmi	r6, r6
    4b4e:	b236      	sxth	r6, r6
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4b50:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    4b54:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    4b58:	b29b      	uxth	r3, r3
    4b5a:	b2b6      	uxth	r6, r6
    4b5c:	fb03 6606 	mla	r6, r3, r6, r6
    4b60:	f894 0227 	ldrb.w	r0, [r4, #551]	; 0x227
    4b64:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4b68:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4b6c:	9000      	str	r0, [sp, #0]
    4b6e:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    4b72:	a804      	add	r0, sp, #16
    4b74:	4639      	mov	r1, r7
    4b76:	b2b6      	uxth	r6, r6
    4b78:	f003 fde4 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4b7c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    4b80:	18e1      	adds	r1, r4, r3
    4b82:	5ce2      	ldrb	r2, [r4, r3]
    4b84:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4b88:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4b8c:	54e2      	strb	r2, [r4, r3]
    4b8e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4b92:	784a      	ldrb	r2, [r1, #1]
    4b94:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4b98:	704a      	strb	r2, [r1, #1]
    4b9a:	788b      	ldrb	r3, [r1, #2]
    4b9c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    4ba0:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4ba4:	4f64      	ldr	r7, [pc, #400]	; (4d38 <shooting_pole(LEDStruct&)+0x308>)
        b = qadd8( b, rhs.b);
    4ba6:	708b      	strb	r3, [r1, #2]
    4ba8:	683b      	ldr	r3, [r7, #0]
    4baa:	07db      	lsls	r3, r3, #31
    4bac:	d51b      	bpl.n	4be6 <shooting_pole(LEDStruct&)+0x1b6>
    4bae:	4e63      	ldr	r6, [pc, #396]	; (4d3c <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bb0:	f8d8 3000 	ldr.w	r3, [r8]
    4bb4:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4bb6:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4bba:	9b04      	ldr	r3, [sp, #16]
    4bbc:	1a5b      	subs	r3, r3, r1
    4bbe:	429a      	cmp	r2, r3
    4bc0:	d921      	bls.n	4c06 <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4bc2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4bc4:	781a      	ldrb	r2, [r3, #0]
    4bc6:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    4bca:	785a      	ldrb	r2, [r3, #1]
    4bcc:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4bd0:	789a      	ldrb	r2, [r3, #2]
    4bd2:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4bd6:	3303      	adds	r3, #3
    4bd8:	429d      	cmp	r5, r3
    4bda:	f1a4 0403 	sub.w	r4, r4, #3
    4bde:	d1f1      	bne.n	4bc4 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    4be0:	b007      	add	sp, #28
    4be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4be6:	4638      	mov	r0, r7
    4be8:	f004 fcc4 	bl	9574 <__cxa_guard_acquire>
    4bec:	2800      	cmp	r0, #0
    4bee:	f040 8093 	bne.w	4d18 <shooting_pole(LEDStruct&)+0x2e8>
    4bf2:	4e52      	ldr	r6, [pc, #328]	; (4d3c <shooting_pole(LEDStruct&)+0x30c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bf4:	f8d8 3000 	ldr.w	r3, [r8]
    4bf8:	9304      	str	r3, [sp, #16]
    4bfa:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    4bfe:	9b04      	ldr	r3, [sp, #16]
    4c00:	1a5b      	subs	r3, r3, r1
    4c02:	4293      	cmp	r3, r2
    4c04:	d3dd      	bcc.n	4bc2 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c06:	f8d8 1000 	ldr.w	r1, [r8]
    4c0a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4c0e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    4c12:	9103      	str	r1, [sp, #12]
	return ret;
    4c14:	9903      	ldr	r1, [sp, #12]
    4c16:	6031      	str	r1, [r6, #0]
    4c18:	4413      	add	r3, r2
    4c1a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    4c1e:	e7d0      	b.n	4bc2 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    4c20:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4c24:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    4c28:	1a9b      	subs	r3, r3, r2
    4c2a:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    4c2e:	e741      	b.n	4ab4 <shooting_pole(LEDStruct&)+0x84>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c30:	4f43      	ldr	r7, [pc, #268]	; (4d40 <shooting_pole(LEDStruct&)+0x310>)
    4c32:	883b      	ldrh	r3, [r7, #0]
    4c34:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c3c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c40:	3319      	adds	r3, #25
    4c42:	b29b      	uxth	r3, r3
    4c44:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4c4c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c50:	3219      	adds	r2, #25
    4c52:	b292      	uxth	r2, r2
    4c54:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4c58:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4c5c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4c60:	f10e 0e19 	add.w	lr, lr, #25
    4c64:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c68:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4c6c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
    4c70:	2146      	movs	r1, #70	; 0x46
    4c72:	2032      	movs	r0, #50	; 0x32
    4c74:	b2dd      	uxtb	r5, r3
    4c76:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c7a:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c7e:	fa5f f982 	uxtb.w	r9, r2
    4c82:	f006 f821 	bl	acc8 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c86:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    4c88:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    4c8c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4c90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4c94:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4c98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    4c9c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4ca0:	3119      	adds	r1, #25
    4ca2:	121b      	asrs	r3, r3, #8
    4ca4:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ca6:	fa5f f888 	uxtb.w	r8, r8
    4caa:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    4cae:	b2db      	uxtb	r3, r3
    4cb0:	eb01 2011 	add.w	r0, r1, r1, lsr #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cb4:	eb08 0888 	add.w	r8, r8, r8, lsl #2
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4cb8:	b2c0      	uxtb	r0, r0
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cba:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4cbe:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4cc2:	4b1b      	ldr	r3, [pc, #108]	; (4d30 <shooting_pole(LEDStruct&)+0x300>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    4cc4:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4cc8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4ccc:	ebc0 05c0 	rsb	r5, r0, r0, lsl #3
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cd0:	ea4f 10e8 	mov.w	r0, r8, asr #7
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4cd4:	ea4f 2e22 	mov.w	lr, r2, asr #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4cd8:	122d      	asrs	r5, r5, #8
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cda:	f100 0232 	add.w	r2, r0, #50	; 0x32
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4cde:	781b      	ldrb	r3, [r3, #0]
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4ce0:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4ce4:	1c68      	adds	r0, r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4ce6:	f10e 0e01 	add.w	lr, lr, #1
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4cea:	2501      	movs	r5, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    4cec:	2216      	movs	r2, #22
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4cee:	f884 e75e 	strb.w	lr, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cf2:	8039      	strh	r1, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4cf4:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(50, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4cf8:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    4cfc:	f884 5229 	strb.w	r5, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    4d00:	f884 222c 	strb.w	r2, [r4, #556]	; 0x22c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    4d04:	2b00      	cmp	r3, #0
    4d06:	f43f aea1 	beq.w	4a4c <shooting_pole(LEDStruct&)+0x1c>
    4d0a:	4620      	mov	r0, r4
    4d0c:	f7ff fe58 	bl	49c0 <shooting_pole_update(LEDStruct&)>
    4d10:	e69c      	b.n	4a4c <shooting_pole(LEDStruct&)+0x1c>
    4d12:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    4d16:	e6ef      	b.n	4af8 <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d18:	f8d8 3000 	ldr.w	r3, [r8]
    4d1c:	4e07      	ldr	r6, [pc, #28]	; (4d3c <shooting_pole(LEDStruct&)+0x30c>)
    4d1e:	9302      	str	r3, [sp, #8]
	return ret;
    4d20:	9b02      	ldr	r3, [sp, #8]
    4d22:	6033      	str	r3, [r6, #0]
    4d24:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4d26:	4638      	mov	r0, r7
    4d28:	6073      	str	r3, [r6, #4]
    4d2a:	f004 fc29 	bl	9580 <__cxa_guard_release>
    4d2e:	e761      	b.n	4bf4 <shooting_pole(LEDStruct&)+0x1c4>
    4d30:	1fff95d8 	.word	0x1fff95d8
    4d34:	0000dbc0 	.word	0x0000dbc0
    4d38:	1fff8c8c 	.word	0x1fff8c8c
    4d3c:	1fff94dc 	.word	0x1fff94dc
    4d40:	1fff8756 	.word	0x1fff8756
    4d44:	1fffa074 	.word	0x1fffa074
    4d48:	0000d05c 	.word	0x0000d05c

00004d4c <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4d4c:	4b2a      	ldr	r3, [pc, #168]	; (4df8 <two_sin_update(LEDStruct&)+0xac>)
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4d4e:	4a2b      	ldr	r2, [pc, #172]	; (4dfc <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    4d50:	781b      	ldrb	r3, [r3, #0]
	leds.two_phase  = 0;
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    4d52:	2100      	movs	r1, #0
    4d54:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4d56:	2b0b      	cmp	r3, #11
    4d58:	d80b      	bhi.n	4d72 <two_sin_update(LEDStruct&)+0x26>
    4d5a:	e8df f003 	tbb	[pc, r3]
    4d5e:	1f11      	.short	0x1f11
    4d60:	332e2924 	.word	0x332e2924
    4d64:	06423d38 	.word	0x06423d38
    4d68:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
    4d6a:	4b25      	ldr	r3, [pc, #148]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4d6c:	881b      	ldrh	r3, [r3, #0]
    4d6e:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.two_phase		= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    4d72:	f7fd b8a5 	b.w	1ec0 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.two_phase		= (uint8_t)update_arg;	break;	//l
    4d76:	4b22      	ldr	r3, [pc, #136]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4d78:	881b      	ldrh	r3, [r3, #0]
    4d7a:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    4d7e:	e7f8      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4d80:	4b1f      	ldr	r3, [pc, #124]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4d82:	881b      	ldrh	r3, [r3, #0]
    4d84:	2b00      	cmp	r3, #0
    4d86:	bf14      	ite	ne
    4d88:	2301      	movne	r3, #1
    4d8a:	2300      	moveq	r3, #0
    4d8c:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4d90:	bf14      	ite	ne
    4d92:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4d94:	234b      	moveq	r3, #75	; 0x4b
    4d96:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4d9a:	e7ea      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    4d9c:	4b18      	ldr	r3, [pc, #96]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4d9e:	881b      	ldrh	r3, [r3, #0]
    4da0:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    4da4:	e7e5      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    4da6:	4b16      	ldr	r3, [pc, #88]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4da8:	881b      	ldrh	r3, [r3, #0]
    4daa:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    4dae:	e7e0      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    4db0:	4b13      	ldr	r3, [pc, #76]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4db2:	881b      	ldrh	r3, [r3, #0]
    4db4:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    4db8:	e7db      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    4dba:	4b11      	ldr	r3, [pc, #68]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4dbc:	881b      	ldrh	r3, [r3, #0]
    4dbe:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    4dc2:	e7d6      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    4dc4:	4b0e      	ldr	r3, [pc, #56]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4dc6:	881b      	ldrh	r3, [r3, #0]
    4dc8:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    4dcc:	e7d1      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    4dce:	4b0c      	ldr	r3, [pc, #48]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4dd0:	881b      	ldrh	r3, [r3, #0]
    4dd2:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    4dd6:	e7cc      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    4dd8:	4b09      	ldr	r3, [pc, #36]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4dda:	881b      	ldrh	r3, [r3, #0]
    4ddc:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    4de0:	e7c7      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    4de2:	4b07      	ldr	r3, [pc, #28]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4de4:	881b      	ldrh	r3, [r3, #0]
    4de6:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    4dea:	e7c2      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//j
		case 10:	leds.sin_phase		= (uint8_t)update_arg;	break;	//k
    4dec:	4b04      	ldr	r3, [pc, #16]	; (4e00 <two_sin_update(LEDStruct&)+0xb4>)
    4dee:	881b      	ldrh	r3, [r3, #0]
    4df0:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    4df4:	e7bd      	b.n	4d72 <two_sin_update(LEDStruct&)+0x26>
    4df6:	bf00      	nop
    4df8:	1fff95e2 	.word	0x1fff95e2
    4dfc:	1fff95d8 	.word	0x1fff95d8
    4e00:	1fff95e0 	.word	0x1fff95e0

00004e04 <two_sin(LEDStruct&)>:
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    4e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4e08:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}



void two_sin(LEDStruct& leds) {
    4e0c:	b083      	sub	sp, #12
    4e0e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4e10:	2b00      	cmp	r3, #0
    4e12:	f040 80c4 	bne.w	4f9e <two_sin(LEDStruct&)+0x19a>
    4e16:	4dd9      	ldr	r5, [pc, #868]	; (517c <two_sin(LEDStruct&)+0x378>)
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
    4e18:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4e1c:	882b      	ldrh	r3, [r5, #0]
    4e1e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4e22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4e26:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4e2a:	3319      	adds	r3, #25
    4e2c:	b298      	uxth	r0, r3
    4e2e:	eb00 2e40 	add.w	lr, r0, r0, lsl #9
    4e32:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    4e36:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4e3a:	f10e 0e19 	add.w	lr, lr, #25
    4e3e:	fa1f fe8e 	uxth.w	lr, lr
    4e42:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    4e46:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    4e4a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4e4e:	3719      	adds	r7, #25
    4e50:	b2bf      	uxth	r7, r7
    4e52:	eb07 2c47 	add.w	ip, r7, r7, lsl #9
    4e56:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
    4e5a:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4e5e:	f10c 0c19 	add.w	ip, ip, #25
    4e62:	fa1f fc8c 	uxth.w	ip, ip
    4e66:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    4e6a:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    4e6e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4e72:	3619      	adds	r6, #25
    4e74:	b2b6      	uxth	r6, r6
    4e76:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    4e7a:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    4e7e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4e82:	3119      	adds	r1, #25
    4e84:	b289      	uxth	r1, r1
    4e86:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4e8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4e8e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e92:	3219      	adds	r2, #25
    4e94:	b292      	uxth	r2, r2
    4e96:	eb02 2842 	add.w	r8, r2, r2, lsl #9
    4e9a:	eb02 0888 	add.w	r8, r2, r8, lsl #2
    4e9e:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    4ea2:	f108 0819 	add.w	r8, r8, #25
    4ea6:	fa1f f888 	uxth.w	r8, r8
    4eaa:	eb08 2348 	add.w	r3, r8, r8, lsl #9
    4eae:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    4eb2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4eb6:	3319      	adds	r3, #25
    4eb8:	b29b      	uxth	r3, r3
    4eba:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    4ebe:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    4ec2:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ec6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4eca:	eb08 2818 	add.w	r8, r8, r8, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ece:	f109 0919 	add.w	r9, r9, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ed2:	eb02 2a12 	add.w	sl, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ed6:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4eda:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4ede:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ee0:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4ee4:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ee8:	eb00 2310 	add.w	r3, r0, r0, lsr #8
    4eec:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ef0:	fa5f fb81 	uxtb.w	fp, r1
    4ef4:	fa5f fc8c 	uxtb.w	ip, ip
    4ef8:	fa5f f18a 	uxtb.w	r1, sl
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4efc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f00:	eb09 2a19 	add.w	sl, r9, r9, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4f04:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
    4f08:	f3c6 1081 	ubfx	r0, r6, #6, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f0c:	f8a5 9000 	strh.w	r9, [r5]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4f10:	f3c3 13c0 	ubfx	r3, r3, #7, #1

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    4f14:	f04f 0901 	mov.w	r9, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f18:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    4f1c:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4f20:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    4f24:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    4f28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4f2c:	f3c8 1807 	ubfx	r8, r8, #4, #8
    4f30:	f3ca 1642 	ubfx	r6, sl, #5, #3
    4f34:	f3c2 1247 	ubfx	r2, r2, #5, #8
	leds.mode_type = TWO_SIN;
    4f38:	2514      	movs	r5, #20
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    4f3a:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f3e:	fa5f fe8e 	uxtb.w	lr, lr
    4f42:	b2ff      	uxtb	r7, r7
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4f44:	f3cc 2c07 	ubfx	ip, ip, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4f48:	3001      	adds	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4f4a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
    4f4e:	f3c1 2107 	ubfx	r1, r1, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4f52:	f088 0880 	eor.w	r8, r8, #128	; 0x80
    4f56:	444e      	add	r6, r9
    4f58:	f082 0280 	eor.w	r2, r2, #128	; 0x80

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    4f5c:	f884 922d 	strb.w	r9, [r4, #557]	; 0x22d
	leds.mode_type = TWO_SIN;
    4f60:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4f64:	2b00      	cmp	r3, #0
    4f66:	f040 811c 	bne.w	51a2 <two_sin(LEDStruct&)+0x39e>
	else					 { leds.strip_range = ONE_SIDE; }
    4f6a:	234b      	movs	r3, #75	; 0x4b
    4f6c:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.sin_rot	= sr;
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;
	leds.two_cutoff = tc;
	leds.sin_all_freq = saf;
	leds.sin_phase  = 0;
    4f70:	2300      	movs	r3, #0
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue	= sh;
    4f72:	f884 e347 	strb.w	lr, [r4, #839]	; 0x347
	leds.two_hue	= th;
    4f76:	f884 734d 	strb.w	r7, [r4, #845]	; 0x34d
	leds.sin_speed	= ss;
    4f7a:	f884 c340 	strb.w	ip, [r4, #832]	; 0x340
	leds.two_speed	= ts;
    4f7e:	f884 0349 	strb.w	r0, [r4, #841]	; 0x349
	leds.sin_rot	= sr;
    4f82:	f884 b342 	strb.w	fp, [r4, #834]	; 0x342
	leds.two_rot	= tr;
    4f86:	f884 134a 	strb.w	r1, [r4, #842]	; 0x34a
	leds.sin_cutoff = sc;
    4f8a:	f884 8341 	strb.w	r8, [r4, #833]	; 0x341
	leds.two_cutoff = tc;
    4f8e:	f884 234b 	strb.w	r2, [r4, #843]	; 0x34b
	leds.sin_all_freq = saf;
    4f92:	f884 6343 	strb.w	r6, [r4, #835]	; 0x343
	leds.sin_phase  = 0;
    4f96:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	leds.two_phase  = 0;
    4f9a:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c



void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    4f9e:	4b78      	ldr	r3, [pc, #480]	; (5180 <two_sin(LEDStruct&)+0x37c>)
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	f040 8101 	bne.w	51aa <two_sin(LEDStruct&)+0x3a6>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    4fa8:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4fac:	2b00      	cmp	r3, #0
    4fae:	f040 80e9 	bne.w	5184 <two_sin(LEDStruct&)+0x380>
    4fb2:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    4fb6:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    4fba:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    4fbe:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    4fc2:	4402      	add	r2, r0
    4fc4:	440b      	add	r3, r1
    4fc6:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    4fca:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4fce:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    4fd2:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4fd6:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    4fda:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4fde:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4fe2:	4494      	add	ip, r2
    4fe4:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4fe8:	4403      	add	r3, r0

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4fea:	2901      	cmp	r1, #1
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4fec:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4ff0:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4ff4:	f340 80bf 	ble.w	5176 <two_sin(LEDStruct&)+0x372>
    4ff8:	4626      	mov	r6, r4
    4ffa:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4ffc:	25ff      	movs	r5, #255	; 0xff
    4ffe:	e08c      	b.n	511a <two_sin(LEDStruct&)+0x316>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5000:	2b00      	cmp	r3, #0
        in = 255 - in;
    5002:	bfbc      	itt	lt
    5004:	43c9      	mvnlt	r1, r1
    5006:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5008:	0049      	lsls	r1, r1, #1
    500a:	b2c9      	uxtb	r1, r1
    500c:	1c4b      	adds	r3, r1, #1
    500e:	fb03 f101 	mul.w	r1, r3, r1
    5012:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5014:	fb01 f303 	mul.w	r3, r1, r3
    5018:	121b      	asrs	r3, r3, #8
    501a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    501e:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    5022:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5024:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5026:	bf54      	ite	pl
    5028:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    502c:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    5030:	ebc8 0e0e 	rsb	lr, r8, lr
    5034:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5038:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    503c:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5040:	3b80      	subs	r3, #128	; 0x80
    5042:	4403      	add	r3, r0
    5044:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5046:	b259      	sxtb	r1, r3
    5048:	2900      	cmp	r1, #0
        in = 255 - in;
    504a:	bfba      	itte	lt
    504c:	43da      	mvnlt	r2, r3
    504e:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5050:	461a      	movge	r2, r3
    5052:	0052      	lsls	r2, r2, #1
    5054:	b2d2      	uxtb	r2, r2
    5056:	1c50      	adds	r0, r2, #1
    5058:	fb00 f202 	mul.w	r2, r0, r2
    505c:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    505e:	fb02 f000 	mul.w	r0, r2, r0
    5062:	1200      	asrs	r0, r0, #8
    5064:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5068:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    506c:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    506e:	05d0      	lsls	r0, r2, #23
    5070:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5074:	bf54      	ite	pl
    5076:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5078:	22ff      	movmi	r2, #255	; 0xff
    507a:	4290      	cmp	r0, r2
    507c:	d279      	bcs.n	5172 <two_sin(LEDStruct&)+0x36e>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    507e:	2900      	cmp	r1, #0
        in = 255 - in;
    5080:	bfbc      	itt	lt
    5082:	43db      	mvnlt	r3, r3
    5084:	b2db      	uxtblt	r3, r3
    5086:	005a      	lsls	r2, r3, #1
    5088:	b2d2      	uxtb	r2, r2
    508a:	1c53      	adds	r3, r2, #1
    508c:	fb03 f202 	mul.w	r2, r3, r2
    5090:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5092:	fb02 f303 	mul.w	r3, r2, r3
    5096:	121b      	asrs	r3, r3, #8
    5098:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    509c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    50a0:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    50a2:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    50a4:	bf54      	ite	pl
    50a6:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    50a8:	23ff      	movmi	r3, #255	; 0xff
    50aa:	1a1b      	subs	r3, r3, r0
    50ac:	b2db      	uxtb	r3, r3
    50ae:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    50b2:	4631      	mov	r1, r6
    50b4:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    50b6:	f88d c004 	strb.w	ip, [sp, #4]
    50ba:	f88d e006 	strb.w	lr, [sp, #6]
    50be:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    50c2:	f003 fd3b 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    50c6:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    50ca:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    50ce:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    50d2:	a901      	add	r1, sp, #4
    50d4:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    50d6:	f88d 3000 	strb.w	r3, [sp]
    50da:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    50de:	f003 fd2d 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    50e2:	7833      	ldrb	r3, [r6, #0]
    50e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    50e8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    50ec:	7033      	strb	r3, [r6, #0]
    50ee:	7872      	ldrb	r2, [r6, #1]
    50f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    50f4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    50f8:	7072      	strb	r2, [r6, #1]
    50fa:	78b3      	ldrb	r3, [r6, #2]
    50fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5100:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5104:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
    5106:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    510a:	3701      	adds	r7, #1
    510c:	3b01      	subs	r3, #1
    510e:	42bb      	cmp	r3, r7
    5110:	f106 0603 	add.w	r6, r6, #3
    5114:	dd2f      	ble.n	5176 <two_sin(LEDStruct&)+0x372>
    5116:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    511a:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    511e:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    5122:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    5126:	fb10 f007 	smulbb	r0, r0, r7
    512a:	b2c0      	uxtb	r0, r0
    512c:	4401      	add	r1, r0
    512e:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5130:	b24b      	sxtb	r3, r1
    5132:	2b00      	cmp	r3, #0
        in = 255 - in;
    5134:	bfba      	itte	lt
    5136:	43ca      	mvnlt	r2, r1
    5138:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    513a:	460a      	movge	r2, r1
    513c:	0052      	lsls	r2, r2, #1
    513e:	b2d2      	uxtb	r2, r2
    5140:	f102 0e01 	add.w	lr, r2, #1
    5144:	fb0e f202 	mul.w	r2, lr, r2
    5148:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    514a:	fb02 fe0e 	mul.w	lr, r2, lr
    514e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5156:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    515a:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    515c:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5160:	bf0c      	ite	eq
    5162:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5164:	22ff      	movne	r2, #255	; 0xff
    5166:	4590      	cmp	r8, r2
    5168:	f4ff af4a 	bcc.w	5000 <two_sin(LEDStruct&)+0x1fc>
    516c:	f04f 0e00 	mov.w	lr, #0
    5170:	e762      	b.n	5038 <two_sin(LEDStruct&)+0x234>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    5172:	2300      	movs	r3, #0
    5174:	e79b      	b.n	50ae <two_sin(LEDStruct&)+0x2aa>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
}
    5176:	b003      	add	sp, #12
    5178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    517c:	1fff8756 	.word	0x1fff8756
    5180:	1fff95d8 	.word	0x1fff95d8
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    5184:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5188:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    518c:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    5190:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    5194:	1a12      	subs	r2, r2, r0
    5196:	1a5b      	subs	r3, r3, r1
    5198:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    519c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    51a0:	e715      	b.n	4fce <two_sin(LEDStruct&)+0x1ca>

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    51a2:	2396      	movs	r3, #150	; 0x96
    51a4:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    51a8:	e6e2      	b.n	4f70 <two_sin(LEDStruct&)+0x16c>



void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    51aa:	4620      	mov	r0, r4
    51ac:	f7ff fdce 	bl	4d4c <two_sin_update(LEDStruct&)>
    51b0:	e6fa      	b.n	4fa8 <two_sin(LEDStruct&)+0x1a4>
    51b2:	bf00      	nop

000051b4 <noise_update(LEDStruct&)>:
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    51b4:	4b12      	ldr	r3, [pc, #72]	; (5200 <noise_update(LEDStruct&)+0x4c>)
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    51b6:	4a13      	ldr	r2, [pc, #76]	; (5204 <noise_update(LEDStruct&)+0x50>)
	switch (update_var) {
    51b8:	781b      	ldrb	r3, [r3, #0]
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    51ba:	2100      	movs	r1, #0
	switch (update_var) {
    51bc:	2b01      	cmp	r3, #1
	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    51be:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    51c0:	d017      	beq.n	51f2 <noise_update(LEDStruct&)+0x3e>
    51c2:	d307      	bcc.n	51d4 <noise_update(LEDStruct&)+0x20>
    51c4:	2b02      	cmp	r3, #2
    51c6:	d103      	bne.n	51d0 <noise_update(LEDStruct&)+0x1c>
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
    51c8:	4b0f      	ldr	r3, [pc, #60]	; (5208 <noise_update(LEDStruct&)+0x54>)
    51ca:	881b      	ldrh	r3, [r3, #0]
    51cc:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		default:	break;
	}
	LEDDebug(leds);
    51d0:	f7fc be76 	b.w	1ec0 <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    51d4:	4b0c      	ldr	r3, [pc, #48]	; (5208 <noise_update(LEDStruct&)+0x54>)
    51d6:	881b      	ldrh	r3, [r3, #0]
    51d8:	2b00      	cmp	r3, #0
    51da:	bf14      	ite	ne
    51dc:	2301      	movne	r3, #1
    51de:	2300      	moveq	r3, #0
    51e0:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    51e4:	bf14      	ite	ne
    51e6:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    51e8:	234b      	moveq	r3, #75	; 0x4b
    51ea:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    51ee:	f7fc be67 	b.w	1ec0 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    51f2:	4b05      	ldr	r3, [pc, #20]	; (5208 <noise_update(LEDStruct&)+0x54>)
    51f4:	881b      	ldrh	r3, [r3, #0]
    51f6:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_dist		= (uint16_t)update_arg;	break;	//c
		default:	break;
	}
	LEDDebug(leds);
    51fa:	f7fc be61 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    51fe:	bf00      	nop
    5200:	1fff95e2 	.word	0x1fff95e2
    5204:	1fff95d8 	.word	0x1fff95d8
    5208:	1fff95e0 	.word	0x1fff95e0

0000520c <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    520c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    5210:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    5214:	b085      	sub	sp, #20
    5216:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    5218:	2b00      	cmp	r3, #0
    521a:	d13f      	bne.n	529c <noise(LEDStruct&)+0x90>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    521c:	4c58      	ldr	r4, [pc, #352]	; (5380 <noise(LEDStruct&)+0x174>)
    521e:	8823      	ldrh	r3, [r4, #0]
    5220:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5224:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5228:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    522c:	3319      	adds	r3, #25
    522e:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5230:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5234:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5238:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    523c:	3219      	adds	r2, #25
    523e:	b292      	uxth	r2, r2
    5240:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    5244:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5248:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    524c:	3119      	adds	r1, #25
    524e:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5250:	f64b 7068 	movw	r0, #49000	; 0xbf68
    5254:	2646      	movs	r6, #70	; 0x46
    5256:	fb00 f001 	mul.w	r0, r0, r1
    525a:	fb06 f602 	mul.w	r6, r6, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    525e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5262:	0c02      	lsrs	r2, r0, #16
    5264:	0c30      	lsrs	r0, r6, #16
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5266:	f3c3 13c0 	ubfx	r3, r3, #7, #1
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    526a:	2601      	movs	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    526c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
    5270:	301e      	adds	r0, #30
	leds.mode_type = NOISE;
    5272:	2717      	movs	r7, #23
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5274:	8021      	strh	r1, [r4, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    5276:	f885 31c4 	strb.w	r3, [r5, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    527a:	b292      	uxth	r2, r2
    527c:	b281      	uxth	r1, r0
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    527e:	f885 622d 	strb.w	r6, [r5, #557]	; 0x22d
	leds.mode_type = NOISE;
	leds.use_palette = 1;
    5282:	f885 6229 	strb.w	r6, [r5, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
    5286:	f885 722c 	strb.w	r7, [r5, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    528a:	2b00      	cmp	r3, #0
    528c:	d170      	bne.n	5370 <noise(LEDStruct&)+0x164>
	else				  	 { leds.strip_range = ONE_SIDE; }
    528e:	234b      	movs	r3, #75	; 0x4b
    5290:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c

	leds.noise_scale = s;
    5294:	f8a5 1760 	strh.w	r1, [r5, #1888]	; 0x760
	leds.noise_dist = d;
    5298:	f8a5 2762 	strh.w	r2, [r5, #1890]	; 0x762
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    529c:	4b39      	ldr	r3, [pc, #228]	; (5384 <noise(LEDStruct&)+0x178>)
    529e:	781b      	ldrb	r3, [r3, #0]
    52a0:	2b00      	cmp	r3, #0
    52a2:	d169      	bne.n	5378 <noise(LEDStruct&)+0x16c>

	for (int i = 0; i < leds.strip_range; i++) {
    52a4:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    52a8:	b37b      	cbz	r3, 530a <noise(LEDStruct&)+0xfe>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    52aa:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 5390 <noise(LEDStruct&)+0x184>
    52ae:	f205 18c7 	addw	r8, r5, #455	; 0x1c7
    52b2:	462c      	mov	r4, r5

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    52b4:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    52b6:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    52b8:	f8b5 0760 	ldrh.w	r0, [r5, #1888]	; 0x760
    52bc:	f8b5 1762 	ldrh.w	r1, [r5, #1890]	; 0x762
    52c0:	fb10 f006 	smulbb	r0, r0, r6
    52c4:	b280      	uxth	r0, r0
    52c6:	4401      	add	r1, r0
    52c8:	b289      	uxth	r1, r1
    52ca:	f003 fddf 	bl	8e8c <inoise8(unsigned short, unsigned short)>
    52ce:	fba9 3200 	umull	r3, r2, r9, r0
    52d2:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    52d6:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    52da:	9700      	str	r7, [sp, #0]
    52dc:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    52de:	f885 2764 	strb.w	r2, [r5, #1892]	; 0x764
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    52e2:	4641      	mov	r1, r8
    52e4:	a803      	add	r0, sp, #12
    52e6:	f003 fa2d 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    52ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    52ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    52f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    52f6:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
    52f8:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    52fa:	70a3      	strb	r3, [r4, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    52fc:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    5300:	3601      	adds	r6, #1
    5302:	42b3      	cmp	r3, r6
    5304:	f104 0403 	add.w	r4, r4, #3
    5308:	dcd6      	bgt.n	52b8 <noise(LEDStruct&)+0xac>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    530a:	4b1f      	ldr	r3, [pc, #124]	; (5388 <noise(LEDStruct&)+0x17c>)
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	9303      	str	r3, [sp, #12]
	return ret;
    5310:	9803      	ldr	r0, [sp, #12]
    5312:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    5316:	fb03 f000 	mul.w	r0, r3, r0
    531a:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    531c:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    531e:	0659      	lsls	r1, r3, #25
    5320:	d521      	bpl.n	5366 <noise(LEDStruct&)+0x15a>
        offset = (uint8_t)255 - offset;
    5322:	43db      	mvns	r3, r3
    5324:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5326:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    532a:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    532c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    5330:	110b      	asrs	r3, r1, #4
    5332:	4916      	ldr	r1, [pc, #88]	; (538c <noise(LEDStruct&)+0x180>)
    5334:	005b      	lsls	r3, r3, #1
    5336:	18cc      	adds	r4, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5338:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    533a:	7861      	ldrb	r1, [r4, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    533c:	fb11 f202 	smulbb	r2, r1, r2
    5340:	eb03 1322 	add.w	r3, r3, r2, asr #4
    5344:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    5346:	0602      	lsls	r2, r0, #24
    5348:	bf48      	it	mi
    534a:	425b      	negmi	r3, r3
    534c:	b25b      	sxtb	r3, r3

    y += 128;
    534e:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    5350:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    5354:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5358:	3301      	adds	r3, #1
    535a:	4413      	add	r3, r2
    535c:	f8a5 3762 	strh.w	r3, [r5, #1890]	; 0x762
}
    5360:	b005      	add	sp, #20
    5362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5366:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    536a:	f003 020f 	and.w	r2, r3, #15
    536e:	e7df      	b.n	5330 <noise(LEDStruct&)+0x124>
void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5370:	2396      	movs	r3, #150	; 0x96
    5372:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c
    5376:	e78d      	b.n	5294 <noise(LEDStruct&)+0x88>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    5378:	4628      	mov	r0, r5
    537a:	f7ff ff1b 	bl	51b4 <noise_update(LEDStruct&)>
    537e:	e791      	b.n	52a4 <noise(LEDStruct&)+0x98>
    5380:	1fff8756 	.word	0x1fff8756
    5384:	1fff95d8 	.word	0x1fff95d8
    5388:	1fffa074 	.word	0x1fffa074
    538c:	0000d1e4 	.word	0x0000d1e4
    5390:	80808081 	.word	0x80808081

00005394 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    5394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5398:	4607      	mov	r7, r0
    539a:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    539c:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    53a0:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    53a4:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    53a8:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    53aa:	2800      	cmp	r0, #0
    53ac:	d06e      	beq.n	548c <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    53ae:	085b      	lsrs	r3, r3, #1
    53b0:	f103 0a14 	add.w	sl, r3, #20
    53b4:	f10a 0301 	add.w	r3, sl, #1
    53b8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 5494 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    53bc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5498 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    53c0:	9303      	str	r3, [sp, #12]
    53c2:	4614      	mov	r4, r2
    53c4:	2600      	movs	r6, #0
        waveangle += 250;
    53c6:	35fa      	adds	r5, #250	; 0xfa
    53c8:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    53ca:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    53cc:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    53d0:	d503      	bpl.n	53da <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    53d2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    53d6:	3307      	adds	r3, #7
    53d8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    53da:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    53dc:	f3c3 0246 	ubfx	r2, r3, #1, #7
    53e0:	f819 0001 	ldrb.w	r0, [r9, r1]
    53e4:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    53e8:	fb00 3302 	mla	r3, r0, r2, r3
    53ec:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    53ee:	0428      	lsls	r0, r5, #16
    53f0:	bf48      	it	mi
    53f2:	425b      	negmi	r3, r3
    53f4:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    53f6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    53fa:	9a03      	ldr	r2, [sp, #12]
    53fc:	b29b      	uxth	r3, r3
    53fe:	fb02 f303 	mul.w	r3, r2, r3
    5402:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    5406:	441c      	add	r4, r3
    5408:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    540a:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    540c:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5410:	d503      	bpl.n	541a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    5412:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5416:	3307      	adds	r3, #7
    5418:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    541a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    541c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5420:	f819 0001 	ldrb.w	r0, [r9, r1]
    5424:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    5428:	9902      	ldr	r1, [sp, #8]
    542a:	fb00 3302 	mla	r3, r0, r2, r3
    542e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5430:	0422      	lsls	r2, r4, #16
    5432:	bf48      	it	mi
    5434:	425b      	negmi	r3, r3
    5436:	b21b      	sxth	r3, r3
    5438:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    543c:	b29b      	uxth	r3, r3
    543e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    5442:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    5446:	2301      	movs	r3, #1
    5448:	9300      	str	r3, [sp, #0]
    544a:	a805      	add	r0, sp, #20
    544c:	465b      	mov	r3, fp
    544e:	f3c2 4207 	ubfx	r2, r2, #16, #8
    5452:	f003 f977 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5456:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    545a:	18b9      	adds	r1, r7, r2
    545c:	5cbb      	ldrb	r3, [r7, r2]
    545e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    5462:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5466:	54bb      	strb	r3, [r7, r2]
    5468:	f89d 3015 	ldrb.w	r3, [sp, #21]
    546c:	784a      	ldrb	r2, [r1, #1]
    546e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5472:	704a      	strb	r2, [r1, #1]
    5474:	788b      	ldrb	r3, [r1, #2]
    5476:	f89d 2016 	ldrb.w	r2, [sp, #22]
    547a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    547e:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    5480:	3601      	adds	r6, #1
    5482:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    5486:	b2b6      	uxth	r6, r6
    5488:	42b3      	cmp	r3, r6
    548a:	d89c      	bhi.n	53c6 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    548c:	b007      	add	sp, #28
    548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5492:	bf00      	nop
    5494:	0000dbc0 	.word	0x0000dbc0
    5498:	0000d05c 	.word	0x0000d05c

0000549c <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54a0:	4c58      	ldr	r4, [pc, #352]	; (5604 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    54a2:	b083      	sub	sp, #12
    54a4:	6823      	ldr	r3, [r4, #0]
    54a6:	9301      	str	r3, [sp, #4]
	return ret;
    54a8:	9901      	ldr	r1, [sp, #4]
    54aa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    54ae:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    54b2:	f3c1 3147 	ubfx	r1, r1, #13, #8
    54b6:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    54b8:	065e      	lsls	r6, r3, #25
    54ba:	f140 809e 	bpl.w	55fa <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    54be:	43db      	mvns	r3, r3
    54c0:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    54c2:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    54c6:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    54c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    54cc:	f8df a138 	ldr.w	sl, [pc, #312]	; 5608 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    54d0:	1112      	asrs	r2, r2, #4
    54d2:	0052      	lsls	r2, r2, #1
    54d4:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    54d8:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    54dc:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    54de:	fb15 f303 	smulbb	r3, r5, r3
    54e2:	eb02 1323 	add.w	r3, r2, r3, asr #4
    54e6:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    54e8:	060d      	lsls	r5, r1, #24
    54ea:	bf48      	it	mi
    54ec:	425b      	negmi	r3, r3
    54ee:	b25b      	sxtb	r3, r3

    y += 128;
    54f0:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    54f2:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    54f4:	6822      	ldr	r2, [r4, #0]
    54f6:	9200      	str	r2, [sp, #0]
    54f8:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    54fc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    5500:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    5502:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    5506:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    550a:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    550e:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5512:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    5516:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    551a:	0e24      	lsrs	r4, r4, #24
    551c:	2b00      	cmp	r3, #0
    551e:	d069      	beq.n	55f4 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    5520:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    5524:	44a3      	add	fp, r4
    5526:	43e7      	mvns	r7, r4
    5528:	fa5f fb8b 	uxtb.w	fp, fp
    552c:	f100 0801 	add.w	r8, r0, #1
    5530:	b2ff      	uxtb	r7, r7
    5532:	e058      	b.n	55e6 <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5534:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    5538:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    553a:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    553e:	1112      	asrs	r2, r2, #4
    5540:	0052      	lsls	r2, r2, #1
    5542:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5546:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    554a:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    554c:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    5550:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5552:	fb11 f303 	smulbb	r3, r1, r3
    5556:	eb02 1323 	add.w	r3, r2, r3, asr #4
    555a:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    555c:	0622      	lsls	r2, r4, #24
    555e:	7842      	ldrb	r2, [r0, #1]
    5560:	bf48      	it	mi
    5562:	425b      	negmi	r3, r3
    5564:	fa0f fc8e 	sxth.w	ip, lr
    5568:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    556c:	b25b      	sxtb	r3, r3
    556e:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    5572:	3b80      	subs	r3, #128	; 0x80
    5574:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    5578:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    557a:	b2db      	uxtb	r3, r3
    557c:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    5580:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    5584:	1212      	asrs	r2, r2, #8
    5586:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    558a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    558e:	4465      	add	r5, ip
    5590:	eb02 2525 	add.w	r5, r2, r5, asr #8
    5594:	440e      	add	r6, r1
    5596:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    559a:	eb09 2323 	add.w	r3, r9, r3, asr #8
    559e:	eb05 2626 	add.w	r6, r5, r6, asr #8
    55a2:	b2db      	uxtb	r3, r3
    55a4:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    55a6:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    55a8:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    55aa:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    55ac:	42b3      	cmp	r3, r6
    55ae:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    55b0:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    55b2:	d210      	bcs.n	55d6 <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    55b4:	fa81 f152 	uqadd8	r1, r1, r2
    55b8:	460d      	mov	r5, r1
    55ba:	fa85 f551 	uqadd8	r5, r5, r1
    55be:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    55c2:	f808 ec01 	strb.w	lr, [r8, #-1]
    55c6:	7842      	ldrb	r2, [r0, #1]
    55c8:	fa82 f251 	uqadd8	r2, r2, r1
    55cc:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    55ce:	7042      	strb	r2, [r0, #1]
    55d0:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    55d4:	7083      	strb	r3, [r0, #2]
    55d6:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    55d8:	455c      	cmp	r4, fp
    55da:	b2ff      	uxtb	r7, r7
    55dc:	f100 0003 	add.w	r0, r0, #3
    55e0:	f108 0803 	add.w	r8, r8, #3
    55e4:	d006      	beq.n	55f4 <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    55e6:	0661      	lsls	r1, r4, #25
    55e8:	d4a4      	bmi.n	5534 <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    55ea:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    55ee:	f004 030f 	and.w	r3, r4, #15
    55f2:	e7a4      	b.n	553e <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    55f4:	b003      	add	sp, #12
    55f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    55fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    55fe:	f003 030f 	and.w	r3, r3, #15
    5602:	e763      	b.n	54cc <pacifica_add_whitecaps(LEDStruct&)+0x30>
    5604:	1fffa074 	.word	0x1fffa074
    5608:	0000d1e4 	.word	0x0000d1e4

0000560c <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    560c:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    5610:	b383      	cbz	r3, 5674 <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    5612:	b5f0      	push	{r4, r5, r6, r7, lr}
    5614:	1e5c      	subs	r4, r3, #1
    5616:	b2a4      	uxth	r4, r4
    5618:	3401      	adds	r4, #1
    561a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    561e:	4602      	mov	r2, r0
    5620:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    5622:	2702      	movs	r7, #2
    5624:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    5626:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    5628:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    562a:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    562c:	7891      	ldrb	r1, [r2, #2]
    562e:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    5632:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    5636:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    563a:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    563e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    5642:	f3c3 2307 	ubfx	r3, r3, #8, #8
    5646:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    5648:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    564a:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    564c:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    5650:	2901      	cmp	r1, #1
    5652:	bf9c      	itt	ls
    5654:	f800 7c02 	strbls.w	r7, [r0, #-2]
    5658:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    565a:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    565c:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    565e:	bf98      	it	ls
    5660:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    5662:	2b06      	cmp	r3, #6
    5664:	bf98      	it	ls
    5666:	7095      	strbls	r5, [r2, #2]
    5668:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    566a:	42a2      	cmp	r2, r4
    566c:	f100 0003 	add.w	r0, r0, #3
    5670:	d1db      	bne.n	562a <pacifica_deepen_colors(LEDStruct&)+0x1e>
    5672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5674:	4770      	bx	lr
    5676:	bf00      	nop

00005678 <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    5678:	4b0a      	ldr	r3, [pc, #40]	; (56a4 <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    567a:	4a0b      	ldr	r2, [pc, #44]	; (56a8 <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    567c:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    567e:	2100      	movs	r1, #0
    5680:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    5682:	b963      	cbnz	r3, 569e <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    5684:	4b09      	ldr	r3, [pc, #36]	; (56ac <pacifica_update(LEDStruct&)+0x34>)
    5686:	881b      	ldrh	r3, [r3, #0]
    5688:	428b      	cmp	r3, r1
    568a:	bf14      	ite	ne
    568c:	2301      	movne	r3, #1
    568e:	460b      	moveq	r3, r1
    5690:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5694:	bf14      	ite	ne
    5696:	2396      	movne	r3, #150	; 0x96
        else { leds.strip_range = ONE_SIDE; }
    5698:	234b      	moveq	r3, #75	; 0x4b
    569a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
        break;
    default:	break;
    }
    LEDDebug(leds);
    569e:	f7fc bc0f 	b.w	1ec0 <LEDDebug(LEDStruct&)>
    56a2:	bf00      	nop
    56a4:	1fff95e2 	.word	0x1fff95e2
    56a8:	1fff95d8 	.word	0x1fff95d8
    56ac:	1fff95e0 	.word	0x1fff95e0

000056b0 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    56b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    56b4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    56b8:	b08b      	sub	sp, #44	; 0x2c
    56ba:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    56bc:	b9f3      	cbnz	r3, 56fc <pride(LEDStruct&)+0x4c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56be:	49ae      	ldr	r1, [pc, #696]	; (5978 <pride(LEDStruct&)+0x2c8>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
    56c0:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    56c4:	880b      	ldrh	r3, [r1, #0]
    56c6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    56ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    56ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    56d2:	3319      	adds	r3, #25
    56d4:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56d6:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    56da:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    56de:	2501      	movs	r5, #1
	leds.mode_type = PRIDE;
    56e0:	2010      	movs	r0, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56e2:	800b      	strh	r3, [r1, #0]
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    56e4:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    56e8:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.mode_type = PRIDE;
    56ec:	f884 022c 	strb.w	r0, [r4, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    56f0:	2a00      	cmp	r2, #0
    56f2:	f000 81b1 	beq.w	5a58 <pride(LEDStruct&)+0x3a8>
    56f6:	2396      	movs	r3, #150	; 0x96
    56f8:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    56fc:	4b9f      	ldr	r3, [pc, #636]	; (597c <pride(LEDStruct&)+0x2cc>)
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	2b00      	cmp	r3, #0
    5702:	f040 81b1 	bne.w	5a68 <pride(LEDStruct&)+0x3b8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5706:	4a9e      	ldr	r2, [pc, #632]	; (5980 <pride(LEDStruct&)+0x2d0>)
    5708:	6813      	ldr	r3, [r2, #0]
    570a:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    570c:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    570e:	f645 7328 	movw	r3, #24360	; 0x5f28
    5712:	fb03 f000 	mul.w	r0, r3, r0
    5716:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5718:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    571a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    571e:	d503      	bpl.n	5728 <pride(LEDStruct&)+0x78>
    5720:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5724:	3307      	adds	r3, #7
    5726:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5728:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    572a:	4d96      	ldr	r5, [pc, #600]	; (5984 <pride(LEDStruct&)+0x2d4>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    572c:	4e96      	ldr	r6, [pc, #600]	; (5988 <pride(LEDStruct&)+0x2d8>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    572e:	f815 e001 	ldrb.w	lr, [r5, r1]
    5732:	f836 7011 	ldrh.w	r7, [r6, r1, lsl #1]
    5736:	f3c3 0146 	ubfx	r1, r3, #1, #7
    573a:	fb0e 7301 	mla	r3, lr, r1, r7

    if( theta & 0x8000 ) y = -y;
    573e:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5740:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5742:	bf48      	it	mi
    5744:	425b      	negmi	r3, r3
    5746:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5748:	6811      	ldr	r1, [r2, #0]
    574a:	9108      	str	r1, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    574c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5750:	b29b      	uxth	r3, r3
    5752:	ebc3 1e43 	rsb	lr, r3, r3, lsl #5
	return ret;
    5756:	9808      	ldr	r0, [sp, #32]
    5758:	4b8c      	ldr	r3, [pc, #560]	; (598c <pride(LEDStruct&)+0x2dc>)
    575a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    575e:	fb03 f000 	mul.w	r0, r3, r0
    5762:	0c00      	lsrs	r0, r0, #16
    5764:	f10e 0edc 	add.w	lr, lr, #220	; 0xdc
    5768:	fa5f fe8e 	uxtb.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    576c:	0441      	lsls	r1, r0, #17
    576e:	f884 e325 	strb.w	lr, [r4, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5772:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5776:	d503      	bpl.n	5780 <pride(LEDStruct&)+0xd0>
    5778:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    577c:	3307      	adds	r3, #7
    577e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5780:	0a1f      	lsrs	r7, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5782:	f3c3 0146 	ubfx	r1, r3, #1, #7
    5786:	f815 c007 	ldrb.w	ip, [r5, r7]
    578a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    578e:	fb0c 3301 	mla	r3, ip, r1, r3

    if( theta & 0x8000 ) y = -y;
    5792:	0407      	lsls	r7, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5794:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5796:	bf48      	it	mi
    5798:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    579a:	6811      	ldr	r1, [r2, #0]
    579c:	9107      	str	r1, [sp, #28]
    579e:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    57a0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    57a4:	b29b      	uxth	r3, r3
	return ret;
    57a6:	9f07      	ldr	r7, [sp, #28]
    57a8:	eb03 11c3 	add.w	r1, r3, r3, lsl #7
    57ac:	f64d 6308 	movw	r3, #56840	; 0xde08
    57b0:	fb03 f707 	mul.w	r7, r3, r7
    57b4:	0c09      	lsrs	r1, r1, #16
    57b6:	0c3f      	lsrs	r7, r7, #16
    57b8:	3160      	adds	r1, #96	; 0x60
    57ba:	b2c9      	uxtb	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    57bc:	0478      	lsls	r0, r7, #17
    57be:	f884 1322 	strb.w	r1, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    57c2:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    57c6:	d503      	bpl.n	57d0 <pride(LEDStruct&)+0x120>
    57c8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    57cc:	3307      	adds	r3, #7
    57ce:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    57d0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57d4:	f3c3 0046 	ubfx	r0, r3, #1, #7
    57d8:	f815 800c 	ldrb.w	r8, [r5, ip]
    57dc:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    57e0:	fb08 3300 	mla	r3, r8, r0, r3

    if( theta & 0x8000 ) y = -y;
    57e4:	043f      	lsls	r7, r7, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    57e6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    57e8:	bf48      	it	mi
    57ea:	425b      	negmi	r3, r3
    57ec:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    57ee:	6810      	ldr	r0, [r2, #0]
    57f0:	9006      	str	r0, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    57f2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    57f6:	b29b      	uxth	r3, r3
    57f8:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
	return ret;
    57fc:	9f06      	ldr	r7, [sp, #24]
    57fe:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5802:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    5806:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    580a:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    580c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5810:	f500 50c8 	add.w	r0, r0, #6400	; 0x1900
    5814:	b287      	uxth	r7, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5816:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    581a:	f8a4 7328 	strh.w	r7, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    581e:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5822:	d003      	beq.n	582c <pride(LEDStruct&)+0x17c>
    5824:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5828:	3307      	adds	r3, #7
    582a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    582c:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5830:	f3c3 0046 	ubfx	r0, r3, #1, #7
    5834:	f815 9008 	ldrb.w	r9, [r5, r8]
    5838:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    583c:	fb09 3300 	mla	r3, r9, r0, r3
    5840:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5842:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    5846:	bf18      	it	ne
    5848:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    584a:	6810      	ldr	r0, [r2, #0]
    584c:	9005      	str	r0, [sp, #20]
    584e:	b21b      	sxth	r3, r3
    5850:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5854:	b29b      	uxth	r3, r3
    5856:	2026      	movs	r0, #38	; 0x26
	return ret;
    5858:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    585c:	f8b4 9320 	ldrh.w	r9, [r4, #800]	; 0x320
    5860:	f8a4 932a 	strh.w	r9, [r4, #810]	; 0x32a
    5864:	fb00 f003 	mul.w	r0, r0, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5868:	f647 3398 	movw	r3, #31640	; 0x7b98
    586c:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5870:	0c00      	lsrs	r0, r0, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5872:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5876:	3017      	adds	r0, #23
    5878:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    587a:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    587e:	f884 0323 	strb.w	r0, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5882:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5886:	d003      	beq.n	5890 <pride(LEDStruct&)+0x1e0>
    5888:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    588c:	3307      	adds	r3, #7
    588e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5890:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5894:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5898:	f815 b00a 	ldrb.w	fp, [r5, sl]
    589c:	f836 c01a 	ldrh.w	ip, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    58a0:	f8b4 a31e 	ldrh.w	sl, [r4, #798]	; 0x31e
    58a4:	fb0b cc03 	mla	ip, fp, r3, ip

    if( theta & 0x8000 ) y = -y;
    58a8:	f418 4f00 	tst.w	r8, #32768	; 0x8000
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    58ac:	6813      	ldr	r3, [r2, #0]
    58ae:	9303      	str	r3, [sp, #12]
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    58b0:	fa1f fc8c 	uxth.w	ip, ip

    if( theta & 0x8000 ) y = -y;
    58b4:	bf18      	it	ne
    58b6:	f1cc 0c00 	rsbne	ip, ip, #0
	return ret;
    58ba:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    58bc:	6812      	ldr	r2, [r2, #0]
    58be:	9204      	str	r2, [sp, #16]
    58c0:	fa0f fc8c 	sxth.w	ip, ip
    58c4:	f5ac 4200 	sub.w	r2, ip, #32768	; 0x8000
    58c8:	f640 38b8 	movw	r8, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    58cc:	fa1f fc83 	uxth.w	ip, r3
    58d0:	b292      	uxth	r2, r2
	return ret;
    58d2:	f8dd b010 	ldr.w	fp, [sp, #16]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    58d6:	4b2e      	ldr	r3, [pc, #184]	; (5990 <pride(LEDStruct&)+0x2e0>)
    58d8:	f8a4 c32e 	strh.w	ip, [r4, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    58dc:	fb08 f202 	mul.w	r2, r8, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    58e0:	ebca 0a0c 	rsb	sl, sl, ip
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    58e4:	f8b4 831c 	ldrh.w	r8, [r4, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    58e8:	f8a4 c31e 	strh.w	ip, [r4, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    58ec:	fa1f fa8a 	uxth.w	sl, sl
    58f0:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    58f2:	fb03 f30b 	mul.w	r3, r3, fp
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    58f6:	fb1a 8000 	smlabb	r0, sl, r0, r8
    58fa:	0c1b      	lsrs	r3, r3, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    58fc:	3201      	adds	r2, #1
    58fe:	fa1f f880 	uxth.w	r8, r0
    5902:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5904:	0458      	lsls	r0, r3, #17
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    5906:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    590a:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    590e:	f8a4 831c 	strh.w	r8, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5912:	f3c3 0cca 	ubfx	ip, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5916:	d505      	bpl.n	5924 <pride(LEDStruct&)+0x274>
    5918:	f5cc 6cff 	rsb	ip, ip, #2040	; 0x7f8
    591c:	f10c 0c07 	add.w	ip, ip, #7
    5920:	fa1f fc8c 	uxth.w	ip, ip

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5924:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5928:	f3cc 0046 	ubfx	r0, ip, #1, #7
    592c:	f815 c00b 	ldrb.w	ip, [r5, fp]
    5930:	f836 b01b 	ldrh.w	fp, [r6, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    5934:	f8a4 8332 	strh.w	r8, [r4, #818]	; 0x332
    5938:	fb0c bc00 	mla	ip, ip, r0, fp
    593c:	fa1f fc8c 	uxth.w	ip, ip

    if( theta & 0x8000 ) y = -y;
    5940:	0418      	lsls	r0, r3, #16
    5942:	bf48      	it	mi
    5944:	f1cc 0c00 	rsbmi	ip, ip, #0
    5948:	fa0f fc8c 	sxth.w	ip, ip

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    594c:	f5ac 4c00 	sub.w	ip, ip, #32768	; 0x8000
    5950:	fa1f fc8c 	uxth.w	ip, ip
    5954:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
    5958:	0c1b      	lsrs	r3, r3, #16
    595a:	3305      	adds	r3, #5
    595c:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    595e:	f8b4 033c 	ldrh.w	r0, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5962:	fb0a 9303 	mla	r3, sl, r3, r9
    5966:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    596a:	2800      	cmp	r0, #0
    596c:	d071      	beq.n	5a52 <pride(LEDStruct&)+0x3a2>
    596e:	4638      	mov	r0, r7
    5970:	4613      	mov	r3, r2
    5972:	2700      	movs	r7, #0
    5974:	e01a      	b.n	59ac <pride(LEDStruct&)+0x2fc>
    5976:	bf00      	nop
    5978:	1fff8756 	.word	0x1fff8756
    597c:	1fff95d8 	.word	0x1fff95d8
    5980:	1fffa074 	.word	0x1fffa074
    5984:	0000dbc0 	.word	0x0000dbc0
    5988:	0000d05c 	.word	0x0000d05c
    598c:	000174f8 	.word	0x000174f8
    5990:	0001b580 	.word	0x0001b580
    5994:	f8b4 932a 	ldrh.w	r9, [r4, #810]	; 0x32a
    5998:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    599c:	f8b4 8332 	ldrh.w	r8, [r4, #818]	; 0x332
    59a0:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
    59a4:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    59a8:	f894 e325 	ldrb.w	lr, [r4, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
    59ac:	444b      	add	r3, r9
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    59ae:	4440      	add	r0, r8
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    59b0:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    59b2:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    59b4:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    59b8:	0442      	lsls	r2, r0, #17
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    59ba:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
		leds.hue8 = leds.hue16 / 256;
    59be:	f884 c324 	strb.w	ip, [r4, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    59c2:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    59c6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    59ca:	d503      	bpl.n	59d4 <pride(LEDStruct&)+0x324>
    59cc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    59d0:	3307      	adds	r3, #7
    59d2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    59d4:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    59d8:	f3c3 0246 	ubfx	r2, r3, #1, #7
    59dc:	f815 9008 	ldrb.w	r9, [r5, r8]
    59e0:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    59e4:	f88d c008 	strb.w	ip, [sp, #8]
    59e8:	fb09 3302 	mla	r3, r9, r2, r3
    59ec:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    59ee:	0402      	lsls	r2, r0, #16
    59f0:	bf48      	it	mi
    59f2:	425b      	negmi	r3, r3
    59f4:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    59f6:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    59fa:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    59fc:	fb03 f003 	mul.w	r0, r3, r3
    5a00:	0c00      	lsrs	r0, r0, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    5a02:	fb00 f201 	mul.w	r2, r0, r1
    5a06:	43c9      	mvns	r1, r1
    5a08:	eb01 4212 	add.w	r2, r1, r2, lsr #16
    5a0c:	b2d2      	uxtb	r2, r2
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5a0e:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5a12:	f8a4 0338 	strh.w	r0, [r4, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    5a16:	f884 2326 	strb.w	r2, [r4, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5a1a:	a901      	add	r1, sp, #4
    5a1c:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5a1e:	f88d 200a 	strb.w	r2, [sp, #10]
    5a22:	f88d e009 	strb.w	lr, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5a26:	f003 f889 	bl	8b3c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5a2a:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5a2e:	3b01      	subs	r3, #1
    5a30:	1bdb      	subs	r3, r3, r7
    5a32:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    5a34:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5a38:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    5a3c:	4420      	add	r0, r4
    5a3e:	2240      	movs	r2, #64	; 0x40
    5a40:	a901      	add	r1, sp, #4
    5a42:	f002 fe21 	bl	8688 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5a46:	3701      	adds	r7, #1
    5a48:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5a4c:	b2bf      	uxth	r7, r7
    5a4e:	42bb      	cmp	r3, r7
    5a50:	d8a0      	bhi.n	5994 <pride(LEDStruct&)+0x2e4>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    5a52:	b00b      	add	sp, #44	; 0x2c
    5a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }
    5a58:	234b      	movs	r3, #75	; 0x4b
    5a5a:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    5a5e:	4b04      	ldr	r3, [pc, #16]	; (5a70 <pride(LEDStruct&)+0x3c0>)
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	2b00      	cmp	r3, #0
    5a64:	f43f ae4f 	beq.w	5706 <pride(LEDStruct&)+0x56>
    5a68:	4620      	mov	r0, r4
    5a6a:	f7ff fe05 	bl	5678 <pacifica_update(LEDStruct&)>
    5a6e:	e64a      	b.n	5706 <pride(LEDStruct&)+0x56>
    5a70:	1fff95d8 	.word	0x1fff95d8

00005a74 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    5a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    5a78:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    5a7c:	b086      	sub	sp, #24
    5a7e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    5a80:	b9f3      	cbnz	r3, 5ac0 <colorwave(LEDStruct&)+0x4c>
    5a82:	4899      	ldr	r0, [pc, #612]	; (5ce8 <colorwave(LEDStruct&)+0x274>)
    5a84:	8803      	ldrh	r3, [r0, #0]
    5a86:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5a8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5a8e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5a92:	3319      	adds	r3, #25
    5a94:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a96:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    5a9a:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a9c:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    5aa0:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5aa2:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    5aa4:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    5aa8:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    5aac:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    5ab0:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5ab4:	2a00      	cmp	r2, #0
    5ab6:	f000 810b 	beq.w	5cd0 <colorwave(LEDStruct&)+0x25c>
    5aba:	2396      	movs	r3, #150	; 0x96
    5abc:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    5ac0:	4b8a      	ldr	r3, [pc, #552]	; (5cec <colorwave(LEDStruct&)+0x278>)
    5ac2:	781b      	ldrb	r3, [r3, #0]
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	f040 810b 	bne.w	5ce0 <colorwave(LEDStruct&)+0x26c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5aca:	4d89      	ldr	r5, [pc, #548]	; (5cf0 <colorwave(LEDStruct&)+0x27c>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5acc:	4b89      	ldr	r3, [pc, #548]	; (5cf4 <colorwave(LEDStruct&)+0x280>)
    5ace:	682a      	ldr	r2, [r5, #0]
    5ad0:	9205      	str	r2, [sp, #20]
	return ret;
    5ad2:	9905      	ldr	r1, [sp, #20]
    5ad4:	fb03 f101 	mul.w	r1, r3, r1
    5ad8:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5ada:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5adc:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5ae0:	d503      	bpl.n	5aea <colorwave(LEDStruct&)+0x76>
    5ae2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5ae6:	3307      	adds	r3, #7
    5ae8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5aea:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    5aec:	4f82      	ldr	r7, [pc, #520]	; (5cf8 <colorwave(LEDStruct&)+0x284>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5aee:	f8df 820c 	ldr.w	r8, [pc, #524]	; 5cfc <colorwave(LEDStruct&)+0x288>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5af2:	5cbe      	ldrb	r6, [r7, r2]
    5af4:	f838 0012 	ldrh.w	r0, [r8, r2, lsl #1]
    5af8:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5afc:	fb06 0302 	mla	r3, r6, r2, r0
    5b00:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5b02:	0408      	lsls	r0, r1, #16
    5b04:	bf48      	it	mi
    5b06:	425b      	negmi	r3, r3
    5b08:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    5b0a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5b0e:	b29b      	uxth	r3, r3
    5b10:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    5b14:	0c1b      	lsrs	r3, r3, #16
    5b16:	3360      	adds	r3, #96	; 0x60
    5b18:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5b1c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5b20:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    5b24:	20cb      	movs	r0, #203	; 0xcb
    5b26:	f7fa fcb3 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
	leds.msmultiplier = beatsin88(147, 23, 60);
    5b2a:	223c      	movs	r2, #60	; 0x3c
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    5b2c:	f8a4 0328 	strh.w	r0, [r4, #808]	; 0x328
	leds.msmultiplier = beatsin88(147, 23, 60);
    5b30:	2117      	movs	r1, #23
    5b32:	2093      	movs	r0, #147	; 0x93
    5b34:	f7fa fcac 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>

	leds.hue16 = leds.sHue16;//gHue * 256;
    5b38:	f8b4 3320 	ldrh.w	r3, [r4, #800]	; 0x320
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    5b3c:	f884 0323 	strb.w	r0, [r4, #803]	; 0x323

	leds.hue16 = leds.sHue16;//gHue * 256;
    5b40:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
	leds.hueinc16 = beatsin88(113, 300, 1500);
    5b44:	f240 52dc 	movw	r2, #1500	; 0x5dc
    5b48:	f44f 7196 	mov.w	r1, #300	; 0x12c
    5b4c:	2071      	movs	r0, #113	; 0x71
    5b4e:	f7fa fc9f 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5b52:	682b      	ldr	r3, [r5, #0]
    5b54:	9304      	str	r3, [sp, #16]
	return ret;
    5b56:	9b04      	ldr	r3, [sp, #16]

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5b58:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5b5c:	f894 2323 	ldrb.w	r2, [r4, #803]	; 0x323
    5b60:	f8b4 131c 	ldrh.w	r1, [r4, #796]	; 0x31c
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    5b64:	f8a4 032c 	strh.w	r0, [r4, #812]	; 0x32c

	leds.ms = millis();
    5b68:	b29b      	uxth	r3, r3
	leds.deltams = leds.ms - leds.sLastMillis;
    5b6a:	1b5d      	subs	r5, r3, r5
    5b6c:	b2ad      	uxth	r5, r5
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5b6e:	fb12 f205 	smulbb	r2, r2, r5
    5b72:	440a      	add	r2, r1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    5b74:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    5b78:	f8a4 331e 	strh.w	r3, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    5b7c:	f8a4 231c 	strh.w	r2, [r4, #796]	; 0x31c
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5b80:	2105      	movs	r1, #5
    5b82:	2209      	movs	r2, #9

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    5b84:	f8a4 5330 	strh.w	r5, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5b88:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5b8c:	f7fa fc80 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    5b90:	f8b4 2320 	ldrh.w	r2, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5b94:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    5b98:	f8b4 131c 	ldrh.w	r1, [r4, #796]	; 0x31c
    5b9c:	f8a4 1332 	strh.w	r1, [r4, #818]	; 0x332

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    5ba0:	fb00 2005 	mla	r0, r0, r5, r2
    5ba4:	f8a4 0320 	strh.w	r0, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5ba8:	2b00      	cmp	r3, #0
    5baa:	d07a      	beq.n	5ca2 <colorwave(LEDStruct&)+0x22e>
    5bac:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    5bb0:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5bb2:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5bb6:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    5bb8:	f8b4 232a 	ldrh.w	r2, [r4, #810]	; 0x32a
    5bbc:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    5bc0:	4413      	add	r3, r2
    5bc2:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    5bc4:	09d8      	lsrs	r0, r3, #7
			if (leds.h16_128 & 0x100) {
    5bc6:	f410 7f80 	tst.w	r0, #256	; 0x100

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    5bca:	f8a4 0334 	strh.w	r0, [r4, #820]	; 0x334
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5bce:	f8b4 0328 	ldrh.w	r0, [r4, #808]	; 0x328
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    5bd2:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5bd6:	4408      	add	r0, r1
    5bd8:	b280      	uxth	r0, r0
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    5bda:	ea6f 2213 	mvn.w	r2, r3, lsr #8
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    5bde:	ea4f 2e13 	mov.w	lr, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    5be2:	b2d2      	uxtb	r2, r2
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    5be4:	bf08      	it	eq
    5be6:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5be8:	0441      	lsls	r1, r0, #17
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    5bea:	f884 e324 	strb.w	lr, [r4, #804]	; 0x324
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    5bee:	f8a4 0332 	strh.w	r0, [r4, #818]	; 0x332
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    5bf2:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5bf6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5bfa:	d503      	bpl.n	5c04 <colorwave(LEDStruct&)+0x190>
    5bfc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5c00:	3307      	adds	r3, #7
    5c02:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5c04:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5c08:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5c0c:	f817 c00e 	ldrb.w	ip, [r7, lr]
    5c10:	f838 101e 	ldrh.w	r1, [r8, lr, lsl #1]
    5c14:	fb0c 1103 	mla	r1, ip, r3, r1
    5c18:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    5c1a:	0403      	lsls	r3, r0, #16
    5c1c:	bf48      	it	mi
    5c1e:	4249      	negmi	r1, r1
    5c20:	b209      	sxth	r1, r1
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5c22:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    5c26:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
    5c28:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    5c2c:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5c30:	fb01 f301 	mul.w	r3, r1, r1
    5c34:	0c19      	lsrs	r1, r3, #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    5c36:	fb01 f300 	mul.w	r3, r1, r0
    5c3a:	ebc2 1e02 	rsb	lr, r2, r2, lsl #4
    5c3e:	43c0      	mvns	r0, r0
    5c40:	eb02 120e 	add.w	r2, r2, lr, lsl #4
    5c44:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    5c48:	b2db      	uxtb	r3, r3
    5c4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    5c4e:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5c52:	a803      	add	r0, sp, #12
    5c54:	f8cd 9000 	str.w	r9, [sp]
    5c58:	4651      	mov	r1, sl
			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    5c5a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    5c5e:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    5c62:	f002 fd6f 	bl	8744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5c66:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5c6a:	3b01      	subs	r3, #1
    5c6c:	1b9b      	subs	r3, r3, r6
    5c6e:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    5c70:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    5c74:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    5c78:	4420      	add	r0, r4
    5c7a:	2280      	movs	r2, #128	; 0x80
    5c7c:	a903      	add	r1, sp, #12
    5c7e:	3d01      	subs	r5, #1
    5c80:	f002 fd02 	bl	8688 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    5c84:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    5c88:	d002      	beq.n	5c90 <colorwave(LEDStruct&)+0x21c>
    5c8a:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    5c8e:	e793      	b.n	5bb8 <colorwave(LEDStruct&)+0x144>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    5c90:	3601      	adds	r6, #1
    5c92:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5c96:	b2b6      	uxth	r6, r6
    5c98:	42b3      	cmp	r3, r6
    5c9a:	d902      	bls.n	5ca2 <colorwave(LEDStruct&)+0x22e>
    5c9c:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    5ca0:	e789      	b.n	5bb6 <colorwave(LEDStruct&)+0x142>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    5ca2:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5ca6:	b983      	cbnz	r3, 5cca <colorwave(LEDStruct&)+0x256>
    5ca8:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5cac:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5cae:	781a      	ldrb	r2, [r3, #0]
    5cb0:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5cb4:	785a      	ldrb	r2, [r3, #1]
    5cb6:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5cba:	789a      	ldrb	r2, [r3, #2]
    5cbc:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5cc0:	3303      	adds	r3, #3
    5cc2:	4299      	cmp	r1, r3
    5cc4:	f1a4 0403 	sub.w	r4, r4, #3
    5cc8:	d1f1      	bne.n	5cae <colorwave(LEDStruct&)+0x23a>
}
    5cca:	b006      	add	sp, #24
    5ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    5cd0:	234b      	movs	r3, #75	; 0x4b
    5cd2:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    5cd6:	4b05      	ldr	r3, [pc, #20]	; (5cec <colorwave(LEDStruct&)+0x278>)
    5cd8:	781b      	ldrb	r3, [r3, #0]
    5cda:	2b00      	cmp	r3, #0
    5cdc:	f43f aef5 	beq.w	5aca <colorwave(LEDStruct&)+0x56>
    5ce0:	4620      	mov	r0, r4
    5ce2:	f7ff fcc9 	bl	5678 <pacifica_update(LEDStruct&)>
    5ce6:	e6f0      	b.n	5aca <colorwave(LEDStruct&)+0x56>
    5ce8:	1fff8756 	.word	0x1fff8756
    5cec:	1fff95d8 	.word	0x1fff95d8
    5cf0:	1fffa074 	.word	0x1fffa074
    5cf4:	000174f8 	.word	0x000174f8
    5cf8:	0000dbc0 	.word	0x0000dbc0
    5cfc:	0000d05c 	.word	0x0000d05c

00005d00 <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    5d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    5d04:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    5d08:	b093      	sub	sp, #76	; 0x4c
    5d0a:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    5d0c:	b9f3      	cbnz	r3, 5d4c <pacifica(LEDStruct&)+0x4c>
    5d0e:	49bd      	ldr	r1, [pc, #756]	; (6004 <pacifica(LEDStruct&)+0x304>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    leds.use_palette = 0;
    5d10:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5d14:	880b      	ldrh	r3, [r1, #0]
    5d16:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5d1a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5d1e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5d22:	3319      	adds	r3, #25
    5d24:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d26:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5d2a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    5d2e:	2501      	movs	r5, #1
    leds.use_palette = 0;
    leds.mode_type = PACIFICA;
    5d30:	2011      	movs	r0, #17
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d32:	800b      	strh	r3, [r1, #0]
    leds.use_full_range = ufr;
    5d34:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    5d38:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.use_palette = 0;
    leds.mode_type = PACIFICA;
    5d3c:	f884 022c 	strb.w	r0, [r4, #556]	; 0x22c
    leds.use_full_range = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5d40:	2a00      	cmp	r2, #0
    5d42:	f000 824a 	beq.w	61da <pacifica(LEDStruct&)+0x4da>
    5d46:	2396      	movs	r3, #150	; 0x96
    5d48:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    5d4c:	4bae      	ldr	r3, [pc, #696]	; (6008 <pacifica(LEDStruct&)+0x308>)
    5d4e:	781b      	ldrb	r3, [r3, #0]
    5d50:	2b00      	cmp	r3, #0
    5d52:	f040 824a 	bne.w	61ea <pacifica(LEDStruct&)+0x4ea>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5d56:	4ead      	ldr	r6, [pc, #692]	; (600c <pacifica(LEDStruct&)+0x30c>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    5d58:	4bad      	ldr	r3, [pc, #692]	; (6010 <pacifica(LEDStruct&)+0x310>)
    5d5a:	6832      	ldr	r2, [r6, #0]
    5d5c:	9205      	str	r2, [sp, #20]
	return ret;
    5d5e:	9a05      	ldr	r2, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5d60:	6831      	ldr	r1, [r6, #0]
    5d62:	9111      	str	r1, [sp, #68]	; 0x44
	return ret;
    5d64:	9811      	ldr	r0, [sp, #68]	; 0x44
    5d66:	6819      	ldr	r1, [r3, #0]
    sLastms = ms;
    5d68:	601a      	str	r2, [r3, #0]
    5d6a:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    5d6e:	fb03 f000 	mul.w	r0, r3, r0
    5d72:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5d74:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5d76:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    5d7a:	eba2 0101 	sub.w	r1, r2, r1
    if( theta & 0x4000 ) offset = 2047 - offset;
    5d7e:	d503      	bpl.n	5d88 <pacifica(LEDStruct&)+0x88>
    5d80:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5d84:	3307      	adds	r3, #7
    5d86:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5d88:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    5d8a:	4fa2      	ldr	r7, [pc, #648]	; (6014 <pacifica(LEDStruct&)+0x314>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5d8c:	f8df 829c 	ldr.w	r8, [pc, #668]	; 602c <pacifica(LEDStruct&)+0x32c>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5d90:	f817 e002 	ldrb.w	lr, [r7, r2]
    5d94:	f838 5012 	ldrh.w	r5, [r8, r2, lsl #1]
    5d98:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5d9c:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    5da0:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5da2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5da4:	bf48      	it	mi
    5da6:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5da8:	6832      	ldr	r2, [r6, #0]
    5daa:	9210      	str	r2, [sp, #64]	; 0x40
    5dac:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5dae:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5db2:	b29b      	uxth	r3, r3
    5db4:	255b      	movs	r5, #91	; 0x5b
	return ret;
    5db6:	9810      	ldr	r0, [sp, #64]	; 0x40
    5db8:	fb05 f503 	mul.w	r5, r5, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5dbc:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    5dc0:	fb03 f000 	mul.w	r0, r3, r0
    5dc4:	0c00      	lsrs	r0, r0, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5dc6:	0c2d      	lsrs	r5, r5, #16
    5dc8:	35b3      	adds	r5, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5dca:	0442      	lsls	r2, r0, #17
    5dcc:	b2ad      	uxth	r5, r5
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5dce:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5dd2:	d503      	bpl.n	5ddc <pacifica(LEDStruct&)+0xdc>
    5dd4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5dd8:	3307      	adds	r3, #7
    5dda:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5ddc:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5de0:	f3c3 0246 	ubfx	r2, r3, #1, #7
    5de4:	f817 c00e 	ldrb.w	ip, [r7, lr]
    5de8:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5dec:	f8df b240 	ldr.w	fp, [pc, #576]	; 6030 <pacifica(LEDStruct&)+0x330>
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5df0:	f8df a240 	ldr.w	sl, [pc, #576]	; 6034 <pacifica(LEDStruct&)+0x334>
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5df4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 6038 <pacifica(LEDStruct&)+0x338>
    5df8:	fb0c 3302 	mla	r3, ip, r2, r3
    5dfc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5dfe:	0402      	lsls	r2, r0, #16
    5e00:	bf48      	it	mi
    5e02:	425b      	negmi	r3, r3
    5e04:	b21b      	sxth	r3, r3
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    5e06:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5e0a:	225b      	movs	r2, #91	; 0x5b
    5e0c:	b29b      	uxth	r3, r3
    5e0e:	fb02 f303 	mul.w	r3, r2, r3
    5e12:	0c1b      	lsrs	r3, r3, #16
    5e14:	33b3      	adds	r3, #179	; 0xb3
    5e16:	b29b      	uxth	r3, r3
    5e18:	fb01 f303 	mul.w	r3, r1, r3
    5e1c:	0a1b      	lsrs	r3, r3, #8
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    5e1e:	fb01 f505 	mul.w	r5, r1, r5
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    5e22:	220d      	movs	r2, #13
    5e24:	210a      	movs	r1, #10
    5e26:	f240 30f3 	movw	r0, #1011	; 0x3f3
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    5e2a:	9303      	str	r3, [sp, #12]
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    5e2c:	f7fa fb30 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    5e30:	4979      	ldr	r1, [pc, #484]	; (6018 <pacifica(LEDStruct&)+0x318>)
    5e32:	880b      	ldrh	r3, [r1, #0]
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    5e34:	0a2d      	lsrs	r5, r5, #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    5e36:	fb05 3000 	mla	r0, r5, r0, r3
    5e3a:	4b77      	ldr	r3, [pc, #476]	; (6018 <pacifica(LEDStruct&)+0x318>)
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5e3c:	220b      	movs	r2, #11
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    5e3e:	8018      	strh	r0, [r3, #0]
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5e40:	2108      	movs	r1, #8
    5e42:	f240 3009 	movw	r0, #777	; 0x309
    5e46:	f7fa fb23 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    5e4a:	9b03      	ldr	r3, [sp, #12]
    5e4c:	f8bb 2000 	ldrh.w	r2, [fp]
    5e50:	18eb      	adds	r3, r5, r3
    5e52:	085b      	lsrs	r3, r3, #1
    5e54:	fb00 2013 	mls	r0, r0, r3, r2
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5e58:	2105      	movs	r1, #5
    5e5a:	2207      	movs	r2, #7
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    5e5c:	f8ab 0000 	strh.w	r0, [fp]
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5e60:	f240 10f5 	movw	r0, #501	; 0x1f5
    5e64:	f7fa fb14 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    5e68:	f8ba 3000 	ldrh.w	r3, [sl]
    5e6c:	fb05 3010 	mls	r0, r5, r0, r3
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5e70:	2206      	movs	r2, #6
    5e72:	2104      	movs	r1, #4
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    5e74:	f8aa 0000 	strh.w	r0, [sl]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5e78:	f240 1001 	movw	r0, #257	; 0x101
    5e7c:	f7fa fb08 	bl	490 <beatsin88(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    5e80:	f8b9 3000 	ldrh.w	r3, [r9]
    5e84:	9a03      	ldr	r2, [sp, #12]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    5e86:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    5e8a:	fb02 3010 	mls	r0, r2, r0, r3
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    5e8e:	2202      	movs	r2, #2
    5e90:	230a      	movs	r3, #10
    5e92:	2506      	movs	r5, #6
    5e94:	f8a9 0000 	strh.w	r0, [r9]
    5e98:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    5e9c:	4620      	mov	r0, r4
    5e9e:	aa0f      	add	r2, sp, #60	; 0x3c
    5ea0:	f88d 503d 	strb.w	r5, [sp, #61]	; 0x3d
    5ea4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    5ea8:	f002 fb2a 	bl	8500 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5eac:	6833      	ldr	r3, [r6, #0]
    5eae:	930f      	str	r3, [sp, #60]	; 0x3c

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    5eb0:	4b59      	ldr	r3, [pc, #356]	; (6018 <pacifica(LEDStruct&)+0x318>)
	return ret;
    5eb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    5eb4:	881a      	ldrh	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5eb6:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    5eba:	fb03 f000 	mul.w	r0, r3, r0
    5ebe:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5ec0:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5ec2:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5ec6:	d503      	bpl.n	5ed0 <pacifica(LEDStruct&)+0x1d0>
    5ec8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5ecc:	3307      	adds	r3, #7
    5ece:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5ed0:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5ed2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    5ed6:	f817 e005 	ldrb.w	lr, [r7, r5]
    5eda:	f838 3015 	ldrh.w	r3, [r8, r5, lsl #1]
    5ede:	fb0e 3301 	mla	r3, lr, r1, r3
    5ee2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5ee4:	0401      	lsls	r1, r0, #16
    5ee6:	bf48      	it	mi
    5ee8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5eea:	6831      	ldr	r1, [r6, #0]
    5eec:	910e      	str	r1, [sp, #56]	; 0x38
    5eee:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5ef0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    5ef4:	980e      	ldr	r0, [sp, #56]	; 0x38
    5ef6:	b29b      	uxth	r3, r3
    5ef8:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    5efc:	eb03 0543 	add.w	r5, r3, r3, lsl #1
    5f00:	fb01 f000 	mul.w	r0, r1, r0
    5f04:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    5f08:	0e00      	lsrs	r0, r0, #24
    5f0a:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5f0c:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5f12:	064d      	lsls	r5, r1, #25
    5f14:	b29b      	uxth	r3, r3
    5f16:	f140 815b 	bpl.w	61d0 <pacifica(LEDStruct&)+0x4d0>
        offset = (uint8_t)255 - offset;
    5f1a:	43c9      	mvns	r1, r1
    5f1c:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5f20:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    5f24:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5f26:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    5f2a:	4d3c      	ldr	r5, [pc, #240]	; (601c <pacifica(LEDStruct&)+0x31c>)
    5f2c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    5f30:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    5f34:	eb05 0c0e 	add.w	ip, r5, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5f38:	f815 e00e 	ldrb.w	lr, [r5, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    5f3c:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5f40:	fb1c f101 	smulbb	r1, ip, r1
    5f44:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    5f48:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    5f4a:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    5f4c:	bf48      	it	mi
    5f4e:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f50:	6830      	ldr	r0, [r6, #0]
    5f52:	9009      	str	r0, [sp, #36]	; 0x24
    5f54:	b249      	sxtb	r1, r1

    y += 128;
    5f56:	3980      	subs	r1, #128	; 0x80
    5f58:	b2c9      	uxtb	r1, r1
	return ret;
    5f5a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    5f5e:	4830      	ldr	r0, [pc, #192]	; (6020 <pacifica(LEDStruct&)+0x320>)
    5f60:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    5f64:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    5f68:	fb00 f00e 	mul.w	r0, r0, lr
    5f6c:	1209      	asrs	r1, r1, #8
    5f6e:	0c00      	lsrs	r0, r0, #16
    5f70:	3146      	adds	r1, #70	; 0x46
    5f72:	4240      	negs	r0, r0
    5f74:	b2c9      	uxtb	r1, r1
    5f76:	b280      	uxth	r0, r0
    5f78:	9100      	str	r1, [sp, #0]
    5f7a:	9001      	str	r0, [sp, #4]
    5f7c:	4929      	ldr	r1, [pc, #164]	; (6024 <pacifica(LEDStruct&)+0x324>)
    5f7e:	4620      	mov	r0, r4
    5f80:	f7ff fa08 	bl	5394 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f84:	6833      	ldr	r3, [r6, #0]
    5f86:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    5f88:	980d      	ldr	r0, [sp, #52]	; 0x34
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    5f8a:	f8bb 2000 	ldrh.w	r2, [fp]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    5f8e:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    5f92:	fb03 f000 	mul.w	r0, r3, r0
    5f96:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5f98:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5f9a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5f9e:	d503      	bpl.n	5fa8 <pacifica(LEDStruct&)+0x2a8>
    5fa0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5fa4:	3307      	adds	r3, #7
    5fa6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5fa8:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5fac:	f3c3 0146 	ubfx	r1, r3, #1, #7
    5fb0:	f817 700e 	ldrb.w	r7, [r7, lr]
    5fb4:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    5fb8:	fb07 3301 	mla	r3, r7, r1, r3
    5fbc:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    5fbe:	0407      	lsls	r7, r0, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fc0:	6831      	ldr	r1, [r6, #0]
    5fc2:	910c      	str	r1, [sp, #48]	; 0x30
    5fc4:	bf48      	it	mi
    5fc6:	425b      	negmi	r3, r3
    5fc8:	b21b      	sxth	r3, r3
    5fca:	4917      	ldr	r1, [pc, #92]	; (6028 <pacifica(LEDStruct&)+0x328>)
	return ret;
    5fcc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5fce:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    5fd2:	b29b      	uxth	r3, r3
    5fd4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    5fd8:	fb01 f707 	mul.w	r7, r1, r7
    5fdc:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    5fe0:	0e3f      	lsrs	r7, r7, #24
    5fe2:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    5fe4:	b2f9      	uxtb	r1, r7
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    5fe6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    5fea:	0648      	lsls	r0, r1, #25
    5fec:	b29b      	uxth	r3, r3
    5fee:	f140 80ea 	bpl.w	61c6 <pacifica(LEDStruct&)+0x4c6>
        offset = (uint8_t)255 - offset;
    5ff2:	43c8      	mvns	r0, r1
    5ff4:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5ff6:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    5ffa:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5ffc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    6000:	e01c      	b.n	603c <pacifica(LEDStruct&)+0x33c>
    6002:	bf00      	nop
    6004:	1fff8756 	.word	0x1fff8756
    6008:	1fff95d8 	.word	0x1fff95d8
    600c:	1fffa074 	.word	0x1fffa074
    6010:	1fff9508 	.word	0x1fff9508
    6014:	0000dbc0 	.word	0x0000dbc0
    6018:	1fff950c 	.word	0x1fff950c
    601c:	0000d1e4 	.word	0x0000d1e4
    6020:	00014938 	.word	0x00014938
    6024:	1fff9524 	.word	0x1fff9524
    6028:	00129800 	.word	0x00129800
    602c:	0000d05c 	.word	0x0000d05c
    6030:	1fff950e 	.word	0x1fff950e
    6034:	1fff94f0 	.word	0x1fff94f0
    6038:	1fff9512 	.word	0x1fff9512
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    603c:	1100      	asrs	r0, r0, #4
    603e:	0040      	lsls	r0, r0, #1
    6040:	eb05 0e00 	add.w	lr, r5, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6044:	5c28      	ldrb	r0, [r5, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6046:	f89e e001 	ldrb.w	lr, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    604a:	fb1e f101 	smulbb	r1, lr, r1
    604e:	eb00 1121 	add.w	r1, r0, r1, asr #4
    6052:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    6054:	0638      	lsls	r0, r7, #24
    6056:	bf48      	it	mi
    6058:	4249      	negmi	r1, r1
    605a:	b249      	sxtb	r1, r1

    y += 128;
    605c:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    605e:	6830      	ldr	r0, [r6, #0]
    6060:	9008      	str	r0, [sp, #32]
    6062:	b2c9      	uxtb	r1, r1
    6064:	eb01 0081 	add.w	r0, r1, r1, lsl #2
	return ret;
    6068:	9f08      	ldr	r7, [sp, #32]
    606a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    606e:	4861      	ldr	r0, [pc, #388]	; (61f4 <pacifica(LEDStruct&)+0x4f4>)
    6070:	1209      	asrs	r1, r1, #8
    6072:	fb00 f007 	mul.w	r0, r0, r7
    6076:	3128      	adds	r1, #40	; 0x28
    6078:	b2c9      	uxtb	r1, r1
    607a:	0c00      	lsrs	r0, r0, #16
    607c:	9100      	str	r1, [sp, #0]
    607e:	9001      	str	r0, [sp, #4]
    6080:	495d      	ldr	r1, [pc, #372]	; (61f8 <pacifica(LEDStruct&)+0x4f8>)
    6082:	4620      	mov	r0, r4
    6084:	f7ff f986 	bl	5394 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6088:	6833      	ldr	r3, [r6, #0]
    608a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    608c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    608e:	f8ba 2000 	ldrh.w	r2, [sl]
    6092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6096:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    609a:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    609e:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    60a0:	065f      	lsls	r7, r3, #25
    60a2:	f140 808b 	bpl.w	61bc <pacifica(LEDStruct&)+0x4bc>
        offset = (uint8_t)255 - offset;
    60a6:	43db      	mvns	r3, r3
    60a8:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    60aa:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    60ae:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    60b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    60b4:	1109      	asrs	r1, r1, #4
    60b6:	0049      	lsls	r1, r1, #1
    60b8:	186f      	adds	r7, r5, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    60ba:	5c69      	ldrb	r1, [r5, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    60bc:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    60be:	fb17 f303 	smulbb	r3, r7, r3
    60c2:	eb01 1323 	add.w	r3, r1, r3, asr #4
    60c6:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    60c8:	0601      	lsls	r1, r0, #24
    60ca:	bf48      	it	mi
    60cc:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60ce:	6831      	ldr	r1, [r6, #0]
    60d0:	9107      	str	r1, [sp, #28]
    60d2:	b25b      	sxtb	r3, r3

    y += 128;
    60d4:	3b80      	subs	r3, #128	; 0x80
	return ret;
    60d6:	9807      	ldr	r0, [sp, #28]
    60d8:	4948      	ldr	r1, [pc, #288]	; (61fc <pacifica(LEDStruct&)+0x4fc>)
    60da:	b2db      	uxtb	r3, r3
    60dc:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
    60e0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    60e4:	fb01 f100 	mul.w	r1, r1, r0
    60e8:	121b      	asrs	r3, r3, #8
    60ea:	0c09      	lsrs	r1, r1, #16
    60ec:	330a      	adds	r3, #10
    60ee:	4249      	negs	r1, r1
    60f0:	b2db      	uxtb	r3, r3
    60f2:	b289      	uxth	r1, r1
    60f4:	9300      	str	r3, [sp, #0]
    60f6:	9101      	str	r1, [sp, #4]
    60f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    60fc:	4620      	mov	r0, r4
    60fe:	4940      	ldr	r1, [pc, #256]	; (6200 <pacifica(LEDStruct&)+0x500>)
    6100:	f7ff f948 	bl	5394 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6104:	6833      	ldr	r3, [r6, #0]
    6106:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    6108:	980a      	ldr	r0, [sp, #40]	; 0x28
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    610a:	f8b9 2000 	ldrh.w	r2, [r9]
    610e:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    6112:	fb03 f000 	mul.w	r0, r3, r0
    6116:	0e00      	lsrs	r0, r0, #24
    6118:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    611a:	065f      	lsls	r7, r3, #25
    611c:	d549      	bpl.n	61b2 <pacifica(LEDStruct&)+0x4b2>
        offset = (uint8_t)255 - offset;
    611e:	43db      	mvns	r3, r3
    6120:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6122:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6126:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta 