
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 4d b1 00 00 05 b1 00 00     ... ....M.......
      10:	05 b1 00 00 05 b1 00 00 05 b1 00 00 05 b1 00 00     ................
      20:	05 b1 00 00 05 b1 00 00 05 b1 00 00 4d b1 00 00     ............M...
      30:	4d b1 00 00 05 b1 00 00 79 c5 00 00 7d c6 00 00     M.......y...}...
      40:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      50:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      60:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      70:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      80:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      90:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      a0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      b0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      c0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      d0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      e0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
      f0:	4d b1 00 00 d5 c9 00 00 4d b1 00 00 01 cb 00 00     M.......M.......
     100:	4d b1 00 00 2d cc 00 00 4d b1 00 00 4d b1 00 00     M...-...M...M...
     110:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     120:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     130:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     140:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     150:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     160:	4d b1 00 00 95 b5 00 00 4d b1 00 00 4d b1 00 00     M.......M...M...
     170:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     180:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     190:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     1a0:	4d b1 00 00 4d b1 00 00 4d b1 00 00 4d b1 00 00     M...M...M...M...
     1b0:	4d b1 00 00 4d b1 00 00 4d b1 00 00                 M...M...M...

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00a ffc0 	bl	b154 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b f814 	bl	b300 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00a ff85 	bl	b1f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00a ff76 	bl	b1f0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00d fc78 	bl	dbfc <__libc_init_array>

	startup_late_hook();
     30c:	f00a ff28 	bl	b160 <startup_late_hook>
	main();
     310:	f00c f9bc 	bl	c68c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	00010f4c 	.word	0x00010f4c
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fffabb0 	.word	0x1fffabb0
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3c54d1 	.word	0x5e3c54d1
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	00010f50 	.word	0x00010f50

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	00010f50 	.word	0x00010f50
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     490:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     492:	4c1d      	ldr	r4, [pc, #116]	; (508 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x78>)
     494:	b083      	sub	sp, #12
     496:	6824      	ldr	r4, [r4, #0]
     498:	9401      	str	r4, [sp, #4]
	return ret;
     49a:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     49c:	28ff      	cmp	r0, #255	; 0xff
     49e:	bf98      	it	ls
     4a0:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4a2:	f44f 748c 	mov.w	r4, #280	; 0x118
     4a6:	eba5 0303 	sub.w	r3, r5, r3
     4aa:	fb04 f303 	mul.w	r3, r4, r3
     4ae:	bf98      	it	ls
     4b0:	b280      	uxthls	r0, r0
     4b2:	fb00 f003 	mul.w	r0, r0, r3
     4b6:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4ba:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4be:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4c0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4c4:	d503      	bpl.n	4ce <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x3e>
     4c6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ca:	3307      	adds	r3, #7
     4cc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4ce:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4d0:	4e0e      	ldr	r6, [pc, #56]	; (50c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4d2:	4c0f      	ldr	r4, [pc, #60]	; (510 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4d4:	5d76      	ldrb	r6, [r6, r5]
     4d6:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4da:	f3c3 0546 	ubfx	r5, r3, #1, #7
     4de:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     4e2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4e4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     4e6:	bf4a      	itet	mi
     4e8:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4ea:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     4ec:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     4ee:	1a52      	subs	r2, r2, r1
     4f0:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     4f4:	b292      	uxth	r2, r2
     4f6:	b2a3      	uxth	r3, r4
     4f8:	fb02 3303 	mla	r3, r2, r3, r3
     4fc:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     500:	b280      	uxth	r0, r0
     502:	b003      	add	sp, #12
     504:	bc70      	pop	{r4, r5, r6}
     506:	4770      	bx	lr
     508:	1fffa8ec 	.word	0x1fffa8ec
     50c:	0000fd4c 	.word	0x0000fd4c
     510:	0000f5bc 	.word	0x0000f5bc

00000514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     514:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     516:	4c1e      	ldr	r4, [pc, #120]	; (590 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x7c>)
     518:	b083      	sub	sp, #12
     51a:	6824      	ldr	r4, [r4, #0]
     51c:	9401      	str	r4, [sp, #4]
	return ret;
     51e:	9d01      	ldr	r5, [sp, #4]
     520:	28ff      	cmp	r0, #255	; 0xff
     522:	bf98      	it	ls
     524:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     526:	f44f 748c 	mov.w	r4, #280	; 0x118
     52a:	eba5 0303 	sub.w	r3, r5, r3
     52e:	fb04 f303 	mul.w	r3, r4, r3
     532:	bf98      	it	ls
     534:	b280      	uxthls	r0, r0
     536:	fb00 f003 	mul.w	r0, r0, r3
     53a:	f3c0 400e 	ubfx	r0, r0, #16, #15
     53e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     542:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     544:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     546:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     54a:	d503      	bpl.n	554 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x40>
     54c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     550:	3307      	adds	r3, #7
     552:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     554:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     556:	4e0f      	ldr	r6, [pc, #60]	; (594 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     558:	4c0f      	ldr	r4, [pc, #60]	; (598 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     55a:	5d76      	ldrb	r6, [r6, r5]
     55c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     560:	f3c3 0546 	ubfx	r5, r3, #1, #7
     564:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     568:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     56a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     56c:	bf4a      	itet	mi
     56e:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     570:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     572:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     574:	1a52      	subs	r2, r2, r1
     576:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     57a:	b292      	uxth	r2, r2
     57c:	b2a3      	uxth	r3, r4
     57e:	fb02 3303 	mla	r3, r2, r3, r3
     582:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     586:	b280      	uxth	r0, r0
     588:	b003      	add	sp, #12
     58a:	bc70      	pop	{r4, r5, r6}
     58c:	4770      	bx	lr
     58e:	bf00      	nop
     590:	1fffa8ec 	.word	0x1fffa8ec
     594:	0000fd4c 	.word	0x0000fd4c
     598:	0000f5bc 	.word	0x0000f5bc

0000059c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     59c:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     59e:	2101      	movs	r1, #1
     5a0:	4604      	mov	r4, r0
     5a2:	200e      	movs	r0, #14
     5a4:	f00a fe36 	bl	b214 <pinMode>
     5a8:	2007      	movs	r0, #7
     5aa:	2101      	movs	r1, #1
     5ac:	f00a fe32 	bl	b214 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     5b0:	69a0      	ldr	r0, [r4, #24]
     5b2:	b158      	cbz	r0, 5cc <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     5b4:	6803      	ldr	r3, [r0, #0]
     5b6:	4a07      	ldr	r2, [pc, #28]	; (5d4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     5b8:	685b      	ldr	r3, [r3, #4]
     5ba:	4293      	cmp	r3, r2
     5bc:	d107      	bne.n	5ce <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     5be:	6842      	ldr	r2, [r0, #4]
     5c0:	7b01      	ldrb	r1, [r0, #12]
     5c2:	7813      	ldrb	r3, [r2, #0]
     5c4:	ea23 0301 	bic.w	r3, r3, r1
     5c8:	7013      	strb	r3, [r2, #0]
     5ca:	bd10      	pop	{r4, pc}
     5cc:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     5d2:	4718      	bx	r3
     5d4:	00000481 	.word	0x00000481

000005d8 <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5da:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     5dc:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5de:	6805      	ldr	r5, [r0, #0]
     5e0:	f88d 3004 	strb.w	r3, [sp, #4]
     5e4:	f88d 3005 	strb.w	r3, [sp, #5]
     5e8:	f88d 3006 	strb.w	r3, [sp, #6]
     5ec:	682e      	ldr	r6, [r5, #0]
     5ee:	4a37      	ldr	r2, [pc, #220]	; (6cc <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     5f0:	f88d 3008 	strb.w	r3, [sp, #8]
     5f4:	4296      	cmp	r6, r2
     5f6:	f88d 3009 	strb.w	r3, [sp, #9]
     5fa:	f88d 300a 	strb.w	r3, [sp, #10]
     5fe:	d15f      	bne.n	6c0 <CLEDController::clearLeds(int)+0xe8>
     600:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     602:	9104      	str	r1, [sp, #16]
     604:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     606:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     608:	a801      	add	r0, sp, #4
     60a:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     60c:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     610:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     614:	f88d 3020 	strb.w	r3, [sp, #32]
     618:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     61a:	d015      	beq.n	648 <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     61c:	f88d 301d 	strb.w	r3, [sp, #29]
     620:	f88d 301c 	strb.w	r3, [sp, #28]
     624:	f88d 301b 	strb.w	r3, [sp, #27]
     628:	f88d 301a 	strb.w	r3, [sp, #26]
     62c:	f88d 3019 	strb.w	r3, [sp, #25]
     630:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     634:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     636:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     638:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     63c:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     63e:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     640:	a903      	add	r1, sp, #12
     642:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     644:	b00b      	add	sp, #44	; 0x2c
     646:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     648:	4a21      	ldr	r2, [pc, #132]	; (6d0 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     64a:	7813      	ldrb	r3, [r2, #0]
     64c:	3301      	adds	r3, #1
     64e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     652:	f013 0f01 	tst.w	r3, #1
     656:	bf14      	ite	ne
     658:	2180      	movne	r1, #128	; 0x80
     65a:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     65c:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     65e:	079a      	lsls	r2, r3, #30
     660:	bf44      	itt	mi
     662:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     666:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     668:	075b      	lsls	r3, r3, #29
     66a:	bf48      	it	mi
     66c:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     670:	3110      	adds	r1, #16
     672:	2200      	movs	r2, #0
     674:	b2c9      	uxtb	r1, r1
     676:	f10d 031b 	add.w	r3, sp, #27
     67a:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     682:	b1aa      	cbz	r2, 6b0 <CLEDController::clearLeds(int)+0xd8>
     684:	fb9e f2f2 	sdiv	r2, lr, r2
     688:	b2d2      	uxtb	r2, r2
     68a:	1c50      	adds	r0, r2, #1
     68c:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     68e:	fb00 1501 	mla	r5, r0, r1, r1
     692:	122d      	asrs	r5, r5, #8
     694:	7018      	strb	r0, [r3, #0]
     696:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     698:	b105      	cbz	r5, 69c <CLEDController::clearLeds(int)+0xc4>
     69a:	3e01      	subs	r6, #1
     69c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6a0:	b100      	cbz	r0, 6a4 <CLEDController::clearLeds(int)+0xcc>
     6a2:	701a      	strb	r2, [r3, #0]
     6a4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6a6:	429f      	cmp	r7, r3
     6a8:	d008      	beq.n	6bc <CLEDController::clearLeds(int)+0xe4>
     6aa:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6ac:	2a00      	cmp	r2, #0
     6ae:	d1e9      	bne.n	684 <CLEDController::clearLeds(int)+0xac>
     6b0:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6b2:	f803 2c03 	strb.w	r2, [r3, #-3]
     6b6:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6b8:	429f      	cmp	r7, r3
     6ba:	d1f6      	bne.n	6aa <CLEDController::clearLeds(int)+0xd2>
     6bc:	6825      	ldr	r5, [r4, #0]
     6be:	e7b9      	b.n	634 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     6c0:	460a      	mov	r2, r1
     6c2:	ab02      	add	r3, sp, #8
     6c4:	a901      	add	r1, sp, #4
     6c6:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6c8:	b00b      	add	sp, #44	; 0x2c
     6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6cc:	00000799 	.word	0x00000799
     6d0:	1fff8c88 	.word	0x1fff8c88

000006d4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6d6:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6d8:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6da:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     6dc:	789b      	ldrb	r3, [r3, #2]
     6de:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6e0:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     6e2:	9101      	str	r1, [sp, #4]
     6e4:	9202      	str	r2, [sp, #8]
     6e6:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6e8:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6ec:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6f0:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6f4:	d017      	beq.n	726 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6f6:	2300      	movs	r3, #0
     6f8:	f88d 3015 	strb.w	r3, [sp, #21]
     6fc:	f88d 3014 	strb.w	r3, [sp, #20]
     700:	f88d 3013 	strb.w	r3, [sp, #19]
     704:	f88d 3012 	strb.w	r3, [sp, #18]
     708:	f88d 3011 	strb.w	r3, [sp, #17]
     70c:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     710:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     712:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     714:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     716:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     718:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     71c:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     71e:	a901      	add	r1, sp, #4
     720:	4798      	blx	r3
  }
     722:	b009      	add	sp, #36	; 0x24
     724:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     726:	4a1b      	ldr	r2, [pc, #108]	; (794 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     728:	7813      	ldrb	r3, [r2, #0]
     72a:	3301      	adds	r3, #1
     72c:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     730:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     734:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     736:	bf14      	ite	ne
     738:	2280      	movne	r2, #128	; 0x80
     73a:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     73c:	0799      	lsls	r1, r3, #30
     73e:	bf44      	itt	mi
     740:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     744:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     746:	075b      	lsls	r3, r3, #29
     748:	bf48      	it	mi
     74a:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     74e:	3210      	adds	r2, #16
     750:	b2d2      	uxtb	r2, r2
     752:	f10d 0313 	add.w	r3, sp, #19
     756:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     75a:	f44f 7e80 	mov.w	lr, #256	; 0x100
     75e:	b1ac      	cbz	r4, 78c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     760:	fb9e f4f4 	sdiv	r4, lr, r4
     764:	b2e4      	uxtb	r4, r4
     766:	1c61      	adds	r1, r4, #1
     768:	b2c9      	uxtb	r1, r1
     76a:	fb01 2502 	mla	r5, r1, r2, r2
     76e:	122d      	asrs	r5, r5, #8
     770:	7019      	strb	r1, [r3, #0]
     772:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     774:	b105      	cbz	r5, 778 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     776:	3e01      	subs	r6, #1
     778:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     77c:	b101      	cbz	r1, 780 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     77e:	701c      	strb	r4, [r3, #0]
     780:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     782:	42bb      	cmp	r3, r7
     784:	d0c4      	beq.n	710 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     786:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     788:	2c00      	cmp	r4, #0
     78a:	d1e9      	bne.n	760 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     78c:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     78e:	f803 4c03 	strb.w	r4, [r3, #-3]
     792:	e7f5      	b.n	780 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     794:	1fff8c88 	.word	0x1fff8c88

00000798 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     798:	b5f0      	push	{r4, r5, r6, r7, lr}
     79a:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     79c:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     79e:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7a0:	789b      	ldrb	r3, [r3, #2]
     7a2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7a4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     7a6:	9101      	str	r1, [sp, #4]
     7a8:	9202      	str	r2, [sp, #8]
     7aa:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7ac:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     7b0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     7b4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7b8:	d016      	beq.n	7e8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7ba:	2300      	movs	r3, #0
     7bc:	f88d 3015 	strb.w	r3, [sp, #21]
     7c0:	f88d 3014 	strb.w	r3, [sp, #20]
     7c4:	f88d 3013 	strb.w	r3, [sp, #19]
     7c8:	f88d 3012 	strb.w	r3, [sp, #18]
     7cc:	f88d 3011 	strb.w	r3, [sp, #17]
     7d0:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7d4:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7d6:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7d8:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7da:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7de:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7e0:	a901      	add	r1, sp, #4
     7e2:	4790      	blx	r2
  }
     7e4:	b009      	add	sp, #36	; 0x24
     7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     7e8:	4a1b      	ldr	r2, [pc, #108]	; (858 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7ea:	7813      	ldrb	r3, [r2, #0]
     7ec:	3301      	adds	r3, #1
     7ee:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7f2:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     7f6:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     7f8:	bf14      	ite	ne
     7fa:	2280      	movne	r2, #128	; 0x80
     7fc:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     7fe:	0799      	lsls	r1, r3, #30
     800:	bf44      	itt	mi
     802:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     806:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     808:	075b      	lsls	r3, r3, #29
     80a:	bf48      	it	mi
     80c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     810:	3210      	adds	r2, #16
     812:	b2d2      	uxtb	r2, r2
     814:	f10d 0313 	add.w	r3, sp, #19
     818:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     81c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     820:	b1ac      	cbz	r4, 84e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     822:	fb9e f4f4 	sdiv	r4, lr, r4
     826:	b2e4      	uxtb	r4, r4
     828:	1c61      	adds	r1, r4, #1
     82a:	b2c9      	uxtb	r1, r1
     82c:	fb01 2502 	mla	r5, r1, r2, r2
     830:	122d      	asrs	r5, r5, #8
     832:	7019      	strb	r1, [r3, #0]
     834:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     836:	b105      	cbz	r5, 83a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     838:	3e01      	subs	r6, #1
     83a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     83e:	b101      	cbz	r1, 842 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     840:	701c      	strb	r4, [r3, #0]
     842:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     844:	42bb      	cmp	r3, r7
     846:	d0c5      	beq.n	7d4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     848:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     84a:	2c00      	cmp	r4, #0
     84c:	d1e9      	bne.n	822 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     84e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     850:	f803 4c03 	strb.w	r4, [r3, #-3]
     854:	e7f5      	b.n	842 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     856:	bf00      	nop
     858:	1fff8c88 	.word	0x1fff8c88

0000085c <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     85c:	b570      	push	{r4, r5, r6, lr}
     85e:	4604      	mov	r4, r0
     860:	4608      	mov	r0, r1
     862:	460d      	mov	r5, r1
     864:	f00d fa6c 	bl	dd40 <strlen>
     868:	6823      	ldr	r3, [r4, #0]
     86a:	4602      	mov	r2, r0
     86c:	4629      	mov	r1, r5
     86e:	4620      	mov	r0, r4
     870:	685b      	ldr	r3, [r3, #4]
     872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     876:	4718      	bx	r3

00000878 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     878:	b538      	push	{r3, r4, r5, lr}
     87a:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     87c:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     87e:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     880:	f00d fa5e 	bl	dd40 <strlen>
     884:	6823      	ldr	r3, [r4, #0]
     886:	4602      	mov	r2, r0
     888:	4629      	mov	r1, r5
     88a:	685b      	ldr	r3, [r3, #4]
     88c:	4620      	mov	r0, r4
     88e:	4798      	blx	r3
     890:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     892:	4620      	mov	r0, r4
     894:	f00b ff02 	bl	c69c <Print::println()>
     898:	4428      	add	r0, r5
     89a:	bd38      	pop	{r3, r4, r5, pc}

0000089c <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8a0:	780d      	ldrb	r5, [r1, #0]
     8a2:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     8a4:	784d      	ldrb	r5, [r1, #1]
     8a6:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     8a8:	7889      	ldrb	r1, [r1, #2]
     8aa:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ac:	7811      	ldrb	r1, [r2, #0]
     8ae:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     8b0:	7851      	ldrb	r1, [r2, #1]
     8b2:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     8b4:	7892      	ldrb	r2, [r2, #2]
     8b6:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8b8:	781a      	ldrb	r2, [r3, #0]
     8ba:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     8bc:	785a      	ldrb	r2, [r3, #1]
     8be:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     8c0:	789b      	ldrb	r3, [r3, #2]
     8c2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     8c6:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c8:	f89a b000 	ldrb.w	fp, [sl]
     8cc:	f880 b009 	strb.w	fp, [r0, #9]
     8d0:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     8d4:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     8d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     8dc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     8de:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     8e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
     8e2:	9911      	ldr	r1, [sp, #68]	; 0x44
     8e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
     8e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     8e8:	f89a b001 	ldrb.w	fp, [sl, #1]
     8ec:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     8f0:	f89a a002 	ldrb.w	sl, [sl, #2]
     8f4:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8f8:	f899 a000 	ldrb.w	sl, [r9]
     8fc:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     900:	f899 a001 	ldrb.w	sl, [r9, #1]
     904:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     908:	f899 9002 	ldrb.w	r9, [r9, #2]
     90c:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     910:	f898 9000 	ldrb.w	r9, [r8]
     914:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     918:	f898 9001 	ldrb.w	r9, [r8, #1]
     91c:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     920:	f898 8002 	ldrb.w	r8, [r8, #2]
     924:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     928:	f89c 8000 	ldrb.w	r8, [ip]
     92c:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     930:	f89c 8001 	ldrb.w	r8, [ip, #1]
     934:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     938:	f89c c002 	ldrb.w	ip, [ip, #2]
     93c:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     940:	f89e c000 	ldrb.w	ip, [lr]
     944:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     948:	f89e c001 	ldrb.w	ip, [lr, #1]
     94c:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     950:	f89e e002 	ldrb.w	lr, [lr, #2]
     954:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     958:	f897 e000 	ldrb.w	lr, [r7]
     95c:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     960:	f897 e001 	ldrb.w	lr, [r7, #1]
     964:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     968:	78bf      	ldrb	r7, [r7, #2]
     96a:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     96c:	7837      	ldrb	r7, [r6, #0]
     96e:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     970:	7877      	ldrb	r7, [r6, #1]
     972:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     974:	78b6      	ldrb	r6, [r6, #2]
     976:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     978:	782e      	ldrb	r6, [r5, #0]
     97a:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     97c:	786e      	ldrb	r6, [r5, #1]
     97e:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     980:	78ad      	ldrb	r5, [r5, #2]
     982:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     986:	780d      	ldrb	r5, [r1, #0]
     988:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     98c:	784d      	ldrb	r5, [r1, #1]
     98e:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     992:	7889      	ldrb	r1, [r1, #2]
     994:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     998:	7811      	ldrb	r1, [r2, #0]
     99a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     99e:	7851      	ldrb	r1, [r2, #1]
     9a0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     9a4:	7892      	ldrb	r2, [r2, #2]
     9a6:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9ac:	7812      	ldrb	r2, [r2, #0]
     9ae:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     9b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9b4:	7852      	ldrb	r2, [r2, #1]
     9b6:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     9ba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9bc:	7892      	ldrb	r2, [r2, #2]
     9be:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9c4:	7812      	ldrb	r2, [r2, #0]
     9c6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     9ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9cc:	7852      	ldrb	r2, [r2, #1]
     9ce:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     9d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9d4:	7892      	ldrb	r2, [r2, #2]
     9d6:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9da:	781a      	ldrb	r2, [r3, #0]
     9dc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     9e0:	785a      	ldrb	r2, [r3, #1]
     9e2:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     9e6:	789b      	ldrb	r3, [r3, #2]
     9e8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000009f0 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9f4:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     9f6:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     9f8:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     9fa:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     9fe:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a00:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a02:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a04:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a06:	d1f8      	bne.n	9fa <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a08:	680b      	ldr	r3, [r1, #0]
     a0a:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     a0c:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a10:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a14:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a18:	f04f 33ff 	mov.w	r3, #4294967295
     a1c:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a1e:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a20:	9305      	str	r3, [sp, #20]
     a22:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a24:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a28:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a2a:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     a2e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a32:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a36:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a38:	b2f9      	uxtb	r1, r7
     a3a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a3e:	9103      	str	r1, [sp, #12]
     a40:	b2e9      	uxtb	r1, r5
     a42:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a44:	fa5f f18c 	uxtb.w	r1, ip
     a48:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a4a:	9907      	ldr	r1, [sp, #28]
     a4c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a4e:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a50:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a54:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a58:	d80c      	bhi.n	a74 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a5a:	9905      	ldr	r1, [sp, #20]
     a5c:	458c      	cmp	ip, r1
     a5e:	dc07      	bgt.n	a70 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     a60:	290f      	cmp	r1, #15
     a62:	d005      	beq.n	a70 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     a64:	3101      	adds	r1, #1
     a66:	b2c9      	uxtb	r1, r1
     a68:	428b      	cmp	r3, r1
     a6a:	9102      	str	r1, [sp, #8]
     a6c:	bf38      	it	cc
     a6e:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a70:	b259      	sxtb	r1, r3
     a72:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a74:	a909      	add	r1, sp, #36	; 0x24
     a76:	9100      	str	r1, [sp, #0]
     a78:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a7a:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     a7e:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     a82:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a86:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     a8a:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     a8e:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     a92:	f009 fb5b 	bl	a14c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a96:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     a98:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9c:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     aa0:	46d1      	mov	r9, sl
     aa2:	d1bf      	bne.n	a24 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     aa4:	9806      	ldr	r0, [sp, #24]
     aa6:	b00b      	add	sp, #44	; 0x2c
     aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000aac <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     aac:	4b48      	ldr	r3, [pc, #288]	; (bd0 <updatePaletteIndex(LEDStruct&)+0x124>)
     aae:	781b      	ldrb	r3, [r3, #0]
     ab0:	2b00      	cmp	r3, #0
     ab2:	f000 808b 	beq.w	bcc <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aba:	b09b      	sub	sp, #108	; 0x6c
     abc:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     ac0:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     ac2:	2300      	movs	r3, #0
     ac4:	4a43      	ldr	r2, [pc, #268]	; (bd4 <updatePaletteIndex(LEDStruct&)+0x128>)
     ac6:	9307      	str	r3, [sp, #28]
     ac8:	f8df 910c 	ldr.w	r9, [pc, #268]	; bd8 <updatePaletteIndex(LEDStruct&)+0x12c>
     acc:	9009      	str	r0, [sp, #36]	; 0x24
     ace:	f200 2327 	addw	r3, r0, #551	; 0x227
     ad2:	9208      	str	r2, [sp, #32]
     ad4:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     ad6:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     ad8:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     adc:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ade:	3701      	adds	r7, #1
        } while ( u.index != 255);
     ae0:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ae2:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     ae4:	d1f8      	bne.n	ad8 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     ae6:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     aea:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     aec:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     af0:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     af4:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     af6:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     afa:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     afe:	2400      	movs	r4, #0
     b00:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b02:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b06:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b0a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b0e:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b12:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b14:	b2f1      	uxtb	r1, r6
     b16:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b1a:	9103      	str	r1, [sp, #12]
     b1c:	b2e9      	uxtb	r1, r5
     b1e:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b20:	fa5f f18c 	uxtb.w	r1, ip
     b24:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b26:	9906      	ldr	r1, [sp, #24]
     b28:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b2a:	aa0c      	add	r2, sp, #48	; 0x30
     b2c:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b2e:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b32:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b36:	d80c      	bhi.n	b52 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b38:	9905      	ldr	r1, [sp, #20]
     b3a:	458c      	cmp	ip, r1
     b3c:	dc07      	bgt.n	b4e <updatePaletteIndex(LEDStruct&)+0xa2>
     b3e:	290f      	cmp	r1, #15
     b40:	d005      	beq.n	b4e <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     b42:	3101      	adds	r1, #1
     b44:	b2c9      	uxtb	r1, r1
     b46:	428b      	cmp	r3, r1
     b48:	9102      	str	r1, [sp, #8]
     b4a:	bf38      	it	cc
     b4c:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b4e:	b259      	sxtb	r1, r3
     b50:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b52:	a90d      	add	r1, sp, #52	; 0x34
     b54:	9100      	str	r1, [sp, #0]
     b56:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b58:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     b5c:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     b60:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b64:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     b68:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     b6c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     b70:	f009 faec 	bl	a14c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b74:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b76:	46d3      	mov	fp, sl
        g = rhs.g;
     b78:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     b7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     b80:	d1bf      	bne.n	b02 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     b84:	aa0e      	add	r2, sp, #56	; 0x38
     b86:	4293      	cmp	r3, r2
     b88:	d018      	beq.n	bbc <updatePaletteIndex(LEDStruct&)+0x110>
     b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
     b8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     b8e:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     b92:	e001      	b.n	b98 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     b94:	42a3      	cmp	r3, r4
     b96:	d011      	beq.n	bbc <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     b98:	f812 1b01 	ldrb.w	r1, [r2], #1
     b9c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     ba0:	4288      	cmp	r0, r1
     ba2:	d0f7      	beq.n	b94 <updatePaletteIndex(LEDStruct&)+0xe8>
     ba4:	4b0a      	ldr	r3, [pc, #40]	; (bd0 <updatePaletteIndex(LEDStruct&)+0x124>)
     ba6:	9a07      	ldr	r2, [sp, #28]
     ba8:	781b      	ldrb	r3, [r3, #0]
     baa:	3201      	adds	r2, #1
     bac:	4293      	cmp	r3, r2
     bae:	9207      	str	r2, [sp, #28]
     bb0:	dd09      	ble.n	bc6 <updatePaletteIndex(LEDStruct&)+0x11a>
     bb2:	9b08      	ldr	r3, [sp, #32]
     bb4:	f853 9f04 	ldr.w	r9, [r3, #4]!
     bb8:	9308      	str	r3, [sp, #32]
     bba:	e78c      	b.n	ad6 <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bbe:	f89d 201c 	ldrb.w	r2, [sp, #28]
     bc2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     bc6:	b01b      	add	sp, #108	; 0x6c
     bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bcc:	4770      	bx	lr
     bce:	bf00      	nop
     bd0:	1fff8750 	.word	0x1fff8750
     bd4:	0000fb8c 	.word	0x0000fb8c
     bd8:	00010718 	.word	0x00010718

00000bdc <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     bde:	4d35      	ldr	r5, [pc, #212]	; (cb4 <initialize()+0xd8>)
		}
	}
}

// Initialization function
void initialize() {
     be0:	b083      	sub	sp, #12
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     be2:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     be4:	2400      	movs	r4, #0
     be6:	4628      	mov	r0, r5
     be8:	2196      	movs	r1, #150	; 0x96
     bea:	f88d 4004 	strb.w	r4, [sp, #4]
     bee:	f88d 4005 	strb.w	r4, [sp, #5]
     bf2:	f88d 4006 	strb.w	r4, [sp, #6]
     bf6:	f009 fa79 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     bfa:	492f      	ldr	r1, [pc, #188]	; (cb8 <initialize()+0xdc>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     bfc:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     c00:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     c04:	f7ff fef4 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     c08:	492c      	ldr	r1, [pc, #176]	; (cbc <initialize()+0xe0>)
     c0a:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     c0e:	f7ff feef 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     c12:	4628      	mov	r0, r5
     c14:	f7ff ff4a 	bl	aac <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     c18:	4b29      	ldr	r3, [pc, #164]	; (cc0 <initialize()+0xe4>)
     c1a:	4a2a      	ldr	r2, [pc, #168]	; (cc4 <initialize()+0xe8>)
     c1c:	7818      	ldrb	r0, [r3, #0]
     c1e:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     c22:	4623      	mov	r3, r4
     c24:	e001      	b.n	c2a <initialize()+0x4e>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     c26:	2b1e      	cmp	r3, #30
     c28:	d008      	beq.n	c3c <initialize()+0x60>
		if (leds.mode_name == ModeList[i]) {
     c2a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     c2e:	4281      	cmp	r1, r0
     c30:	b2dc      	uxtb	r4, r3
     c32:	f103 0301 	add.w	r3, r3, #1
     c36:	d1f6      	bne.n	c26 <initialize()+0x4a>
			leds.mode_number = i;
     c38:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     c3c:	4e22      	ldr	r6, [pc, #136]	; (cc8 <initialize()+0xec>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     c3e:	4f23      	ldr	r7, [pc, #140]	; (ccc <initialize()+0xf0>)
     c40:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     c42:	aa01      	add	r2, sp, #4
     c44:	4630      	mov	r0, r6
     c46:	2196      	movs	r1, #150	; 0x96
     c48:	f88d 4004 	strb.w	r4, [sp, #4]
     c4c:	f88d 4005 	strb.w	r4, [sp, #5]
     c50:	f88d 4006 	strb.w	r4, [sp, #6]
     c54:	f009 fa4a 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     c58:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     c5a:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     c5e:	491c      	ldr	r1, [pc, #112]	; (cd0 <initialize()+0xf4>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     c60:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     c64:	f7ff fec4 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     c68:	491a      	ldr	r1, [pc, #104]	; (cd4 <initialize()+0xf8>)
     c6a:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     c6e:	f7ff febf 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     c72:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     c76:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     c7a:	4630      	mov	r0, r6
     c7c:	f7ff ff16 	bl	aac <updatePaletteIndex(LEDStruct&)>

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     c80:	aa01      	add	r2, sp, #4
     c82:	4638      	mov	r0, r7
     c84:	2196      	movs	r1, #150	; 0x96
     c86:	f88d 4004 	strb.w	r4, [sp, #4]
     c8a:	f88d 4005 	strb.w	r4, [sp, #5]
     c8e:	f88d 4006 	strb.w	r4, [sp, #6]
     c92:	f009 fa2b 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
	over_leds.array_type		= OVERLAY;
     c96:	2302      	movs	r3, #2
	over_leds.current_palette	= cequal_gp;
     c98:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     c9c:	490e      	ldr	r1, [pc, #56]	; (cd8 <initialize()+0xfc>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
	over_leds.array_type		= OVERLAY;
     c9e:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	over_leds.current_palette	= cequal_gp;
     ca2:	f7ff fea5 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
	over_leds.target_palette	= cequal_gp;
     ca6:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     caa:	490b      	ldr	r1, [pc, #44]	; (cd8 <initialize()+0xfc>)
     cac:	f7ff fea0 	bl	9f0 <CRGBPalette16::operator=(unsigned char const*)>
}
     cb0:	b003      	add	sp, #12
     cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cb4:	1fff9e6c 	.word	0x1fff9e6c
     cb8:	00010b54 	.word	0x00010b54
     cbc:	000101f0 	.word	0x000101f0
     cc0:	1fff8749 	.word	0x1fff8749
     cc4:	1fff8723 	.word	0x1fff8723
     cc8:	1fff8cb0 	.word	0x1fff8cb0
     ccc:	1fff9608 	.word	0x1fff9608
     cd0:	000108f4 	.word	0x000108f4
     cd4:	0000fb4c 	.word	0x0000fb4c
     cd8:	000109b4 	.word	0x000109b4

00000cdc <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     cdc:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     cde:	2112      	movs	r1, #18
     ce0:	b082      	sub	sp, #8
     ce2:	482e      	ldr	r0, [pc, #184]	; (d9c <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ce4:	4c2e      	ldr	r4, [pc, #184]	; (da0 <global_debug()+0xc4>)
     ce6:	f00b fad5 	bl	c294 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     cea:	4b2e      	ldr	r3, [pc, #184]	; (da4 <global_debug()+0xc8>)
     cec:	4620      	mov	r0, r4
     cee:	7819      	ldrb	r1, [r3, #0]
     cf0:	f00b fd24 	bl	c73c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     cf4:	4620      	mov	r0, r4
     cf6:	f00b fcd1 	bl	c69c <Print::println()>
     cfa:	2111      	movs	r1, #17
     cfc:	482a      	ldr	r0, [pc, #168]	; (da8 <global_debug()+0xcc>)
     cfe:	f00b fac9 	bl	c294 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     d02:	4b2a      	ldr	r3, [pc, #168]	; (dac <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d04:	4620      	mov	r0, r4
     d06:	7819      	ldrb	r1, [r3, #0]
     d08:	f00b fd18 	bl	c73c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d0c:	4620      	mov	r0, r4
     d0e:	f00b fcc5 	bl	c69c <Print::println()>
     d12:	2115      	movs	r1, #21
     d14:	4826      	ldr	r0, [pc, #152]	; (db0 <global_debug()+0xd4>)
     d16:	f00b fabd 	bl	c294 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     d1a:	4b26      	ldr	r3, [pc, #152]	; (db4 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d1c:	4620      	mov	r0, r4
     d1e:	7819      	ldrb	r1, [r3, #0]
     d20:	f00b fd0c 	bl	c73c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d24:	4620      	mov	r0, r4
     d26:	f00b fcb9 	bl	c69c <Print::println()>
     d2a:	2114      	movs	r1, #20
     d2c:	4822      	ldr	r0, [pc, #136]	; (db8 <global_debug()+0xdc>)
     d2e:	f00b fab1 	bl	c294 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     d32:	4b22      	ldr	r3, [pc, #136]	; (dbc <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d34:	4620      	mov	r0, r4
     d36:	8819      	ldrh	r1, [r3, #0]
     d38:	f00b fd00 	bl	c73c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     d3c:	4620      	mov	r0, r4
     d3e:	f00b fcad 	bl	c69c <Print::println()>
     d42:	210f      	movs	r1, #15
     d44:	481e      	ldr	r0, [pc, #120]	; (dc0 <global_debug()+0xe4>)
     d46:	f00b faa5 	bl	c294 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     d4a:	4b1e      	ldr	r3, [pc, #120]	; (dc4 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     d4c:	4620      	mov	r0, r4
     d4e:	8819      	ldrh	r1, [r3, #0]
     d50:	f00b fcf4 	bl	c73c <Print::print(long)>
     d54:	2102      	movs	r1, #2
     d56:	481c      	ldr	r0, [pc, #112]	; (dc8 <global_debug()+0xec>)
     d58:	f00b fa9c 	bl	c294 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     d5c:	4b1b      	ldr	r3, [pc, #108]	; (dcc <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     d5e:	220a      	movs	r2, #10
     d60:	7819      	ldrb	r1, [r3, #0]
     d62:	4620      	mov	r0, r4
     d64:	2300      	movs	r3, #0
     d66:	f00b fca9 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     d6a:	2101      	movs	r1, #1
     d6c:	4818      	ldr	r0, [pc, #96]	; (dd0 <global_debug()+0xf4>)
     d6e:	f00b fa91 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     d72:	4620      	mov	r0, r4
     d74:	f00b fc92 	bl	c69c <Print::println()>
     d78:	210e      	movs	r1, #14
     d7a:	4816      	ldr	r0, [pc, #88]	; (dd4 <global_debug()+0xf8>)
     d7c:	f00b fa8a 	bl	c294 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     d80:	4b15      	ldr	r3, [pc, #84]	; (dd8 <global_debug()+0xfc>)
     d82:	681b      	ldr	r3, [r3, #0]
     d84:	9301      	str	r3, [sp, #4]
	return ret;
     d86:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     d88:	2300      	movs	r3, #0
     d8a:	220a      	movs	r2, #10
     d8c:	4620      	mov	r0, r4
     d8e:	f00b fc95 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     d92:	4620      	mov	r0, r4
     d94:	f00b fc82 	bl	c69c <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     d98:	b002      	add	sp, #8
     d9a:	bd10      	pop	{r4, pc}
     d9c:	0000df74 	.word	0x0000df74
     da0:	1fff878c 	.word	0x1fff878c
     da4:	1fff8783 	.word	0x1fff8783
     da8:	0000df88 	.word	0x0000df88
     dac:	1fff874a 	.word	0x1fff874a
     db0:	0000df9c 	.word	0x0000df9c
     db4:	1fff8722 	.word	0x1fff8722
     db8:	0000dfb4 	.word	0x0000dfb4
     dbc:	1fff8cac 	.word	0x1fff8cac
     dc0:	0000dfcc 	.word	0x0000dfcc
     dc4:	1fff9604 	.word	0x1fff9604
     dc8:	0000dfdc 	.word	0x0000dfdc
     dcc:	1fff955d 	.word	0x1fff955d
     dd0:	0000dfe0 	.word	0x0000dfe0
     dd4:	0000dfe4 	.word	0x0000dfe4
     dd8:	1fffa8ec 	.word	0x1fffa8ec

00000ddc <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     ddc:	491e      	ldr	r1, [pc, #120]	; (e58 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     dde:	481f      	ldr	r0, [pc, #124]	; (e5c <begin_transition()+0x80>)
     de0:	880b      	ldrh	r3, [r1, #0]
     de2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     de6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     dea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     dee:	3319      	adds	r3, #25
     df0:	b29b      	uxth	r3, r3
     df2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     df6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     dfa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     dfe:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e02:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e04:	b2db      	uxtb	r3, r3
     e06:	b292      	uxth	r2, r2
     e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     e0c:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e0e:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     e10:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     e14:	4e12      	ldr	r6, [pc, #72]	; (e60 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     e16:	4d13      	ldr	r5, [pc, #76]	; (e64 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e18:	5cf3      	ldrb	r3, [r6, r3]
     e1a:	4c13      	ldr	r4, [pc, #76]	; (e68 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     e1c:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     e1e:	b2ff      	uxtb	r7, r7
     e20:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     e24:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     e26:	123f      	asrs	r7, r7, #8
     e28:	3703      	adds	r7, #3
	switch (transition_type) {
     e2a:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     e2c:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     e2e:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     e30:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     e32:	d00c      	beq.n	e4e <begin_transition()+0x72>
     e34:	d306      	bcc.n	e44 <begin_transition()+0x68>
     e36:	2b02      	cmp	r3, #2
     e38:	d102      	bne.n	e40 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     e3a:	4b0c      	ldr	r3, [pc, #48]	; (e6c <begin_transition()+0x90>)
     e3c:	2200      	movs	r2, #0
     e3e:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     e40:	bcf0      	pop	{r4, r5, r6, r7}
     e42:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <begin_transition()+0x94>)
     e46:	2200      	movs	r2, #0
     e48:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     e4a:	bcf0      	pop	{r4, r5, r6, r7}
     e4c:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     e4e:	4b07      	ldr	r3, [pc, #28]	; (e6c <begin_transition()+0x90>)
     e50:	224a      	movs	r2, #74	; 0x4a
     e52:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     e54:	bcf0      	pop	{r4, r5, r6, r7}
     e56:	4770      	bx	lr
     e58:	1fff8784 	.word	0x1fff8784
     e5c:	1fff9500 	.word	0x1fff9500
     e60:	1fff8754 	.word	0x1fff8754
     e64:	1fff9e55 	.word	0x1fff9e55
     e68:	1fff9514 	.word	0x1fff9514
     e6c:	1fff953c 	.word	0x1fff953c
     e70:	1fff8cae 	.word	0x1fff8cae

00000e74 <finish_transition()>:

void finish_transition() {
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     e76:	4cec      	ldr	r4, [pc, #944]	; (1228 <finish_transition()+0x3b4>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     e78:	48ec      	ldr	r0, [pc, #944]	; (122c <finish_transition()+0x3b8>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
     e7a:	b083      	sub	sp, #12
	in_transition = 0;
     e7c:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     e7e:	aa01      	add	r2, sp, #4
     e80:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
     e82:	7023      	strb	r3, [r4, #0]
     e84:	f88d 3004 	strb.w	r3, [sp, #4]
     e88:	f88d 3005 	strb.w	r3, [sp, #5]
     e8c:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     e90:	f009 f92c 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
     e94:	4be6      	ldr	r3, [pc, #920]	; (1230 <finish_transition()+0x3bc>)
     e96:	4ae7      	ldr	r2, [pc, #924]	; (1234 <finish_transition()+0x3c0>)
     e98:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     e9c:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     ea0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     ea4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ea8:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     eac:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     eb0:	f803 1c01 	strb.w	r1, [r3, #-1]
     eb4:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     eb6:	429d      	cmp	r5, r3
     eb8:	f102 0203 	add.w	r2, r2, #3
     ebc:	d1ee      	bne.n	e9c <finish_transition()+0x28>
     ebe:	4cde      	ldr	r4, [pc, #888]	; (1238 <finish_transition()+0x3c4>)
     ec0:	4eda      	ldr	r6, [pc, #872]	; (122c <finish_transition()+0x3b8>)
     ec2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
     ec6:	f886 31c2 	strb.w	r3, [r6, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     eca:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
     ece:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     ed0:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
     ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     ed6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     eda:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     ede:	f894 e1c3 	ldrb.w	lr, [r4, #451]	; 0x1c3
     ee2:	f894 71c4 	ldrb.w	r7, [r4, #452]	; 0x1c4
     ee6:	f886 e1c3 	strb.w	lr, [r6, #451]	; 0x1c3
     eea:	f886 71c4 	strb.w	r7, [r6, #452]	; 0x1c4
     eee:	f894 e1c5 	ldrb.w	lr, [r4, #453]	; 0x1c5
     ef2:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
     ef6:	f886 e1c5 	strb.w	lr, [r6, #453]	; 0x1c5
     efa:	f886 71c6 	strb.w	r7, [r6, #454]	; 0x1c6
     efe:	f894 e1c7 	ldrb.w	lr, [r4, #455]	; 0x1c7
     f02:	f886 e1c7 	strb.w	lr, [r6, #455]	; 0x1c7
     f06:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
     f0a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     f0e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f10:	f506 75fc 	add.w	r5, r6, #504	; 0x1f8
     f14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f16:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
     f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     f1a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
     f1e:	f894 e229 	ldrb.w	lr, [r4, #553]	; 0x229
     f22:	f894 c228 	ldrb.w	ip, [r4, #552]	; 0x228
     f26:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
     f2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
     f2e:	f886 e229 	strb.w	lr, [r6, #553]	; 0x229
     f32:	f886 c228 	strb.w	ip, [r6, #552]	; 0x228
     f36:	f886 722a 	strb.w	r7, [r6, #554]	; 0x22a
     f3a:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
     f3e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
     f42:	f894 e22d 	ldrb.w	lr, [r4, #557]	; 0x22d
     f46:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
     f4a:	f894 522f 	ldrb.w	r5, [r4, #559]	; 0x22f
     f4e:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
     f52:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
     f56:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b
     f5a:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c
     f5e:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
     f62:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
     f66:	f886 e22d 	strb.w	lr, [r6, #557]	; 0x22d
     f6a:	f886 722e 	strb.w	r7, [r6, #558]	; 0x22e
     f6e:	f894 e234 	ldrb.w	lr, [r4, #564]	; 0x234
     f72:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
     f76:	f886 522f 	strb.w	r5, [r6, #559]	; 0x22f
     f7a:	f886 0230 	strb.w	r0, [r6, #560]	; 0x230
     f7e:	f894 5236 	ldrb.w	r5, [r4, #566]	; 0x236
     f82:	f894 0237 	ldrb.w	r0, [r4, #567]	; 0x237
     f86:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
     f8a:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
     f8e:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
     f92:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
     f96:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
     f9a:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
     f9e:	f886 7235 	strb.w	r7, [r6, #565]	; 0x235
     fa2:	f886 2239 	strb.w	r2, [r6, #569]	; 0x239
     fa6:	f886 323a 	strb.w	r3, [r6, #570]	; 0x23a
     faa:	f886 e234 	strb.w	lr, [r6, #564]	; 0x234
     fae:	f886 5236 	strb.w	r5, [r6, #566]	; 0x236
     fb2:	f886 0237 	strb.w	r0, [r6, #567]	; 0x237
     fb6:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
     fba:	f206 233e 	addw	r3, r6, #574	; 0x23e
     fbe:	f204 223e 	addw	r2, r4, #574	; 0x23e
     fc2:	f206 277a 	addw	r7, r6, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fc6:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
     fca:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     fce:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fd2:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
     fd6:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     fda:	f803 1c01 	strb.w	r1, [r3, #-1]
     fde:	3303      	adds	r3, #3
     fe0:	429f      	cmp	r7, r3
     fe2:	f102 0203 	add.w	r2, r2, #3
     fe6:	d1ee      	bne.n	fc6 <finish_transition()+0x152>
     fe8:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
     fec:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
     ff0:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
     ff4:	f886 2277 	strb.w	r2, [r6, #631]	; 0x277
     ff8:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
     ffc:	4b8f      	ldr	r3, [pc, #572]	; (123c <finish_transition()+0x3c8>)
     ffe:	f886 0278 	strb.w	r0, [r6, #632]	; 0x278
    1002:	f886 1279 	strb.w	r1, [r6, #633]	; 0x279
    1006:	f894 027b 	ldrb.w	r0, [r4, #635]	; 0x27b
    100a:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    100e:	f886 227a 	strb.w	r2, [r6, #634]	; 0x27a
    1012:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    1016:	f886 027b 	strb.w	r0, [r6, #635]	; 0x27b
    101a:	f886 127c 	strb.w	r1, [r6, #636]	; 0x27c
    101e:	f894 027e 	ldrb.w	r0, [r4, #638]	; 0x27e
    1022:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    1026:	f886 227d 	strb.w	r2, [r6, #637]	; 0x27d
    102a:	4a85      	ldr	r2, [pc, #532]	; (1240 <finish_transition()+0x3cc>)
    102c:	f886 027e 	strb.w	r0, [r6, #638]	; 0x27e
    1030:	f886 127f 	strb.w	r1, [r6, #639]	; 0x27f
    1034:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    1038:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    103c:	f803 1b01 	strb.w	r1, [r3], #1
    1040:	4283      	cmp	r3, r0
    1042:	d1f9      	bne.n	1038 <finish_transition()+0x1c4>
    1044:	497f      	ldr	r1, [pc, #508]	; (1244 <finish_transition()+0x3d0>)
    1046:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    104a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    104e:	f803 2b01 	strb.w	r2, [r3], #1
    1052:	4283      	cmp	r3, r0
    1054:	4a75      	ldr	r2, [pc, #468]	; (122c <finish_transition()+0x3b8>)
    1056:	d1f8      	bne.n	104a <finish_transition()+0x1d6>
    1058:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    105c:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    1060:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    1064:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    1068:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    106c:	f882 3316 	strb.w	r3, [r2, #790]	; 0x316
    1070:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    1074:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
    1078:	f882 5318 	strb.w	r5, [r2, #792]	; 0x318
    107c:	f8b4 631c 	ldrh.w	r6, [r4, #796]	; 0x31c
    1080:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    1084:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    1088:	f882 131a 	strb.w	r1, [r2, #794]	; 0x31a
    108c:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    1090:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    1094:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
    1098:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
    109c:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
    10a0:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
    10a4:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
    10a8:	f894 5325 	ldrb.w	r5, [r4, #805]	; 0x325
    10ac:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
    10b0:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    10b4:	f894 0326 	ldrb.w	r0, [r4, #806]	; 0x326
    10b8:	f894 1327 	ldrb.w	r1, [r4, #807]	; 0x327
    10bc:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    10c0:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    10c4:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    10c8:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    10cc:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
    10d0:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    10d4:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    10d8:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    10dc:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    10e0:	f8b4 632c 	ldrh.w	r6, [r4, #812]	; 0x32c
    10e4:	f8b4 532e 	ldrh.w	r5, [r4, #814]	; 0x32e
    10e8:	f8b4 0330 	ldrh.w	r0, [r4, #816]	; 0x330
    10ec:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    10f0:	f8b4 3334 	ldrh.w	r3, [r4, #820]	; 0x334
    10f4:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    10f8:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    10fc:	f8b4 6336 	ldrh.w	r6, [r4, #822]	; 0x336
    1100:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
    1104:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
    1108:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    110c:	f8b4 033a 	ldrh.w	r0, [r4, #826]	; 0x33a
    1110:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    1114:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    1118:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    111c:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    1120:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    1124:	f894 633f 	ldrb.w	r6, [r4, #831]	; 0x33f
    1128:	f894 5340 	ldrb.w	r5, [r4, #832]	; 0x340
    112c:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
    1130:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    1134:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341
    1138:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    113c:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    1140:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    1144:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    1148:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    114c:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
    1150:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    1154:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    1158:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    115c:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    1160:	f894 6345 	ldrb.w	r6, [r4, #837]	; 0x345
    1164:	f894 5346 	ldrb.w	r5, [r4, #838]	; 0x346
    1168:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
    116c:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    1170:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    1174:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    1178:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    117c:	f894 634a 	ldrb.w	r6, [r4, #842]	; 0x34a
    1180:	f894 534b 	ldrb.w	r5, [r4, #843]	; 0x34b
    1184:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
    1188:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    118c:	f894 034c 	ldrb.w	r0, [r4, #844]	; 0x34c
    1190:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    1194:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    1198:	f894 334e 	ldrb.w	r3, [r4, #846]	; 0x34e
    119c:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    11a0:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    11a4:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
    11a8:	f894 5350 	ldrb.w	r5, [r4, #848]	; 0x350
    11ac:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
    11b0:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    11b4:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    11b8:	f894 1352 	ldrb.w	r1, [r4, #850]	; 0x352
    11bc:	f894 3353 	ldrb.w	r3, [r4, #851]	; 0x353
    11c0:	f894 634f 	ldrb.w	r6, [r4, #847]	; 0x34f
    11c4:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    11c8:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
    11cc:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    11d0:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    11d4:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    11d8:	491b      	ldr	r1, [pc, #108]	; (1248 <finish_transition()+0x3d4>)
    11da:	f894 6354 	ldrb.w	r6, [r4, #852]	; 0x354
    11de:	f894 335d 	ldrb.w	r3, [r4, #861]	; 0x35d
    11e2:	f8d4 5358 	ldr.w	r5, [r4, #856]	; 0x358
    11e6:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
    11ea:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    11ee:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    11f2:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    11f6:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
    11fa:	f502 7358 	add.w	r3, r2, #864	; 0x360
    11fe:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    1202:	f851 0f04 	ldr.w	r0, [r1, #4]!
    1206:	f843 0b04 	str.w	r0, [r3], #4
    120a:	4293      	cmp	r3, r2
    120c:	d1f9      	bne.n	1202 <finish_transition()+0x38e>
    120e:	4a0f      	ldr	r2, [pc, #60]	; (124c <finish_transition()+0x3d8>)
    1210:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1214:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1218:	f843 1b04 	str.w	r1, [r3], #4
    121c:	4283      	cmp	r3, r0
    121e:	d1f9      	bne.n	1214 <finish_transition()+0x3a0>
    1220:	4a0b      	ldr	r2, [pc, #44]	; (1250 <finish_transition()+0x3dc>)
    1222:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    1226:	e015      	b.n	1254 <finish_transition()+0x3e0>
    1228:	1fff9500 	.word	0x1fff9500
    122c:	1fff9e6c 	.word	0x1fff9e6c
    1230:	1fff9e6f 	.word	0x1fff9e6f
    1234:	1fff8cb3 	.word	0x1fff8cb3
    1238:	1fff8cb0 	.word	0x1fff8cb0
    123c:	1fffa0ec 	.word	0x1fffa0ec
    1240:	1fff8f2f 	.word	0x1fff8f2f
    1244:	1fff8f7a 	.word	0x1fff8f7a
    1248:	1fff900c 	.word	0x1fff900c
    124c:	1fff90fc 	.word	0x1fff90fc
    1250:	1fff91ef 	.word	0x1fff91ef
    1254:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1258:	f803 1b01 	strb.w	r1, [r3], #1
    125c:	4283      	cmp	r3, r0
    125e:	d1f9      	bne.n	1254 <finish_transition()+0x3e0>
    1260:	4a5a      	ldr	r2, [pc, #360]	; (13cc <finish_transition()+0x558>)
    1262:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1266:	f852 1f04 	ldr.w	r1, [r2, #4]!
    126a:	f843 1b04 	str.w	r1, [r3], #4
    126e:	4283      	cmp	r3, r0
    1270:	d1f9      	bne.n	1266 <finish_transition()+0x3f2>
    1272:	4a57      	ldr	r2, [pc, #348]	; (13d0 <finish_transition()+0x55c>)
    1274:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1278:	f852 1f04 	ldr.w	r1, [r2, #4]!
    127c:	f843 1b04 	str.w	r1, [r3], #4
    1280:	4283      	cmp	r3, r0
    1282:	4954      	ldr	r1, [pc, #336]	; (13d4 <finish_transition()+0x560>)
    1284:	d1f8      	bne.n	1278 <finish_transition()+0x404>
    1286:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    128a:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    128e:	f894 675e 	ldrb.w	r6, [r4, #1886]	; 0x75e
    1292:	f8b4 5760 	ldrh.w	r5, [r4, #1888]	; 0x760
    1296:	f8b4 0762 	ldrh.w	r0, [r4, #1890]	; 0x762
    129a:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    129e:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    12a2:	f8b4 3764 	ldrh.w	r3, [r4, #1892]	; 0x764
    12a6:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    12aa:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    12ae:	f8a1 5760 	strh.w	r5, [r1, #1888]	; 0x760
    12b2:	f8a1 0762 	strh.w	r0, [r1, #1890]	; 0x762
    12b6:	f8a1 3764 	strh.w	r3, [r1, #1892]	; 0x764
    12ba:	f881 2766 	strb.w	r2, [r1, #1894]	; 0x766
    12be:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    12c2:	f894 6767 	ldrb.w	r6, [r4, #1895]	; 0x767
    12c6:	f894 5768 	ldrb.w	r5, [r4, #1896]	; 0x768
    12ca:	f894 0769 	ldrb.w	r0, [r4, #1897]	; 0x769
    12ce:	4a42      	ldr	r2, [pc, #264]	; (13d8 <finish_transition()+0x564>)
    12d0:	f881 376a 	strb.w	r3, [r1, #1898]	; 0x76a
    12d4:	f881 6767 	strb.w	r6, [r1, #1895]	; 0x767
    12d8:	f881 5768 	strb.w	r5, [r1, #1896]	; 0x768
    12dc:	f881 0769 	strb.w	r0, [r1, #1897]	; 0x769
    12e0:	f201 736c 	addw	r3, r1, #1900	; 0x76c
    12e4:	f201 718c 	addw	r1, r1, #1932	; 0x78c
    12e8:	f852 0f04 	ldr.w	r0, [r2, #4]!
    12ec:	f843 0b04 	str.w	r0, [r3], #4
    12f0:	428b      	cmp	r3, r1
    12f2:	d1f9      	bne.n	12e8 <finish_transition()+0x474>
    12f4:	4a39      	ldr	r2, [pc, #228]	; (13dc <finish_transition()+0x568>)
    12f6:	f103 0020 	add.w	r0, r3, #32
    12fa:	f852 1f04 	ldr.w	r1, [r2, #4]!
    12fe:	f843 1b04 	str.w	r1, [r3], #4
    1302:	4283      	cmp	r3, r0
    1304:	d1f9      	bne.n	12fa <finish_transition()+0x486>
    1306:	4a36      	ldr	r2, [pc, #216]	; (13e0 <finish_transition()+0x56c>)
    1308:	f103 0020 	add.w	r0, r3, #32
    130c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1310:	f843 1b04 	str.w	r1, [r3], #4
    1314:	4283      	cmp	r3, r0
    1316:	d1f9      	bne.n	130c <finish_transition()+0x498>
    1318:	4a32      	ldr	r2, [pc, #200]	; (13e4 <finish_transition()+0x570>)
    131a:	f103 0020 	add.w	r0, r3, #32
    131e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1322:	f843 1b04 	str.w	r1, [r3], #4
    1326:	4283      	cmp	r3, r0
    1328:	d1f9      	bne.n	131e <finish_transition()+0x4aa>
    132a:	4a2f      	ldr	r2, [pc, #188]	; (13e8 <finish_transition()+0x574>)
    132c:	f103 0020 	add.w	r0, r3, #32
    1330:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1334:	f843 1b04 	str.w	r1, [r3], #4
    1338:	4283      	cmp	r3, r0
    133a:	d1f9      	bne.n	1330 <finish_transition()+0x4bc>
    133c:	4a2b      	ldr	r2, [pc, #172]	; (13ec <finish_transition()+0x578>)
    133e:	f103 0020 	add.w	r0, r3, #32
    1342:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1346:	f843 1b04 	str.w	r1, [r3], #4
    134a:	4283      	cmp	r3, r0
    134c:	4d21      	ldr	r5, [pc, #132]	; (13d4 <finish_transition()+0x560>)
    134e:	d1f8      	bne.n	1342 <finish_transition()+0x4ce>
    1350:	f8b4 082c 	ldrh.w	r0, [r4, #2092]	; 0x82c
    1354:	f894 382e 	ldrb.w	r3, [r4, #2094]	; 0x82e
    1358:	f8d4 2834 	ldr.w	r2, [r4, #2100]	; 0x834
    135c:	f8d4 1838 	ldr.w	r1, [r4, #2104]	; 0x838
    1360:	f8a5 082c 	strh.w	r0, [r5, #2092]	; 0x82c
    1364:	f894 083c 	ldrb.w	r0, [r4, #2108]	; 0x83c
    1368:	f8b4 7830 	ldrh.w	r7, [r4, #2096]	; 0x830
    136c:	f894 683d 	ldrb.w	r6, [r4, #2109]	; 0x83d
    1370:	f885 382e 	strb.w	r3, [r5, #2094]	; 0x82e
    1374:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
    1378:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    137c:	f8c5 1838 	str.w	r1, [r5, #2104]	; 0x838
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1380:	2400      	movs	r4, #0
    1382:	f885 083c 	strb.w	r0, [r5, #2108]	; 0x83c
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1386:	aa01      	add	r2, sp, #4
    1388:	2196      	movs	r1, #150	; 0x96
    138a:	4819      	ldr	r0, [pc, #100]	; (13f0 <finish_transition()+0x57c>)
    138c:	f885 383e 	strb.w	r3, [r5, #2110]	; 0x83e
    1390:	f8a5 7830 	strh.w	r7, [r5, #2096]	; 0x830
    1394:	f885 683d 	strb.w	r6, [r5, #2109]	; 0x83d
    1398:	f88d 4004 	strb.w	r4, [sp, #4]
    139c:	f88d 4005 	strb.w	r4, [sp, #5]
    13a0:	f88d 4006 	strb.w	r4, [sp, #6]
    13a4:	f008 fea2 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    13a8:	4b12      	ldr	r3, [pc, #72]	; (13f4 <finish_transition()+0x580>)
void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
    13aa:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    13ae:	781b      	ldrb	r3, [r3, #0]
    13b0:	b953      	cbnz	r3, 13c8 <finish_transition()+0x554>
    13b2:	aa01      	add	r2, sp, #4
    13b4:	2196      	movs	r1, #150	; 0x96
    13b6:	4810      	ldr	r0, [pc, #64]	; (13f8 <finish_transition()+0x584>)
    13b8:	f88d 3004 	strb.w	r3, [sp, #4]
    13bc:	f88d 3005 	strb.w	r3, [sp, #5]
    13c0:	f88d 3006 	strb.w	r3, [sp, #6]
    13c4:	f008 fe92 	bl	a0ec <fill_solid(CRGB*, int, CRGB const&)>
}
    13c8:	b003      	add	sp, #12
    13ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13cc:	1fff9228 	.word	0x1fff9228
    13d0:	1fff9318 	.word	0x1fff9318
    13d4:	1fff9e6c 	.word	0x1fff9e6c
    13d8:	1fff9418 	.word	0x1fff9418
    13dc:	1fff9438 	.word	0x1fff9438
    13e0:	1fff9458 	.word	0x1fff9458
    13e4:	1fff9478 	.word	0x1fff9478
    13e8:	1fff9498 	.word	0x1fff9498
    13ec:	1fff94b8 	.word	0x1fff94b8
    13f0:	1fff8cb0 	.word	0x1fff8cb0
    13f4:	1fff9602 	.word	0x1fff9602
    13f8:	1fff9608 	.word	0x1fff9608

000013fc <blending()>:

void blending() {
    13fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1400:	4d2f      	ldr	r5, [pc, #188]	; (14c0 <blending()+0xc4>)
    1402:	4e30      	ldr	r6, [pc, #192]	; (14c4 <blending()+0xc8>)
    1404:	4c30      	ldr	r4, [pc, #192]	; (14c8 <blending()+0xcc>)
    1406:	4f31      	ldr	r7, [pc, #196]	; (14cc <blending()+0xd0>)
    1408:	b085      	sub	sp, #20
    140a:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    140e:	4632      	mov	r2, r6
    1410:	4629      	mov	r1, r5
    1412:	783b      	ldrb	r3, [r7, #0]
    1414:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 14cc <blending()+0xd0>
    1418:	a803      	add	r0, sp, #12
    141a:	3503      	adds	r5, #3
    141c:	f008 ff58 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1420:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1424:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1428:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    142c:	7021      	strb	r1, [r4, #0]
    142e:	4545      	cmp	r5, r8
        g = rhs.g;
    1430:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1432:	70a3      	strb	r3, [r4, #2]
    1434:	f106 0603 	add.w	r6, r6, #3
    1438:	f104 0403 	add.w	r4, r4, #3
    143c:	d1e7      	bne.n	140e <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    143e:	4e24      	ldr	r6, [pc, #144]	; (14d0 <blending()+0xd4>)
    1440:	6833      	ldr	r3, [r6, #0]
    1442:	07db      	lsls	r3, r3, #31
    1444:	d51f      	bpl.n	1486 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1446:	4d23      	ldr	r5, [pc, #140]	; (14d4 <blending()+0xd8>)
    1448:	4c23      	ldr	r4, [pc, #140]	; (14d8 <blending()+0xdc>)
    144a:	682b      	ldr	r3, [r5, #0]
    144c:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    144e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1452:	9b03      	ldr	r3, [sp, #12]
    1454:	1a5b      	subs	r3, r3, r1
    1456:	4293      	cmp	r3, r2
    1458:	d30c      	bcc.n	1474 <blending()+0x78>
    145a:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    145c:	682a      	ldr	r2, [r5, #0]
    145e:	9202      	str	r2, [sp, #8]
    1460:	3301      	adds	r3, #1
	return ret;
    1462:	9a02      	ldr	r2, [sp, #8]
    1464:	6022      	str	r2, [r4, #0]
    1466:	b2db      	uxtb	r3, r3
    1468:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    146a:	2bff      	cmp	r3, #255	; 0xff
    146c:	d006      	beq.n	147c <blending()+0x80>
		finish_transition();
	}
}
    146e:	b005      	add	sp, #20
    1470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1474:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1478:	2bff      	cmp	r3, #255	; 0xff
    147a:	d1f8      	bne.n	146e <blending()+0x72>
		finish_transition();
    147c:	f7ff fcfa 	bl	e74 <finish_transition()>
	}
}
    1480:	b005      	add	sp, #20
    1482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1486:	4630      	mov	r0, r6
    1488:	f009 fe6c 	bl	b164 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    148c:	4d11      	ldr	r5, [pc, #68]	; (14d4 <blending()+0xd8>)
    148e:	b950      	cbnz	r0, 14a6 <blending()+0xaa>
    1490:	4c11      	ldr	r4, [pc, #68]	; (14d8 <blending()+0xdc>)
    1492:	682b      	ldr	r3, [r5, #0]
    1494:	9303      	str	r3, [sp, #12]
    1496:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    149a:	9b03      	ldr	r3, [sp, #12]
    149c:	1a5b      	subs	r3, r3, r1
    149e:	4293      	cmp	r3, r2
    14a0:	d2db      	bcs.n	145a <blending()+0x5e>
    14a2:	783b      	ldrb	r3, [r7, #0]
    14a4:	e7e1      	b.n	146a <blending()+0x6e>
    14a6:	4b0d      	ldr	r3, [pc, #52]	; (14dc <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    14a8:	682a      	ldr	r2, [r5, #0]
    14aa:	781b      	ldrb	r3, [r3, #0]
    14ac:	4c0a      	ldr	r4, [pc, #40]	; (14d8 <blending()+0xdc>)
    14ae:	9201      	str	r2, [sp, #4]
	return ret;
    14b0:	9a01      	ldr	r2, [sp, #4]
    14b2:	6022      	str	r2, [r4, #0]
    14b4:	009b      	lsls	r3, r3, #2
    14b6:	4630      	mov	r0, r6
    14b8:	6063      	str	r3, [r4, #4]
    14ba:	f009 fe59 	bl	b170 <__cxa_guard_release>
    14be:	e7e8      	b.n	1492 <blending()+0x96>
    14c0:	1fff9e6c 	.word	0x1fff9e6c
    14c4:	1fff8cb0 	.word	0x1fff8cb0
    14c8:	1fffa6ac 	.word	0x1fffa6ac
    14cc:	1fff8cae 	.word	0x1fff8cae
    14d0:	1fff95f4 	.word	0x1fff95f4
    14d4:	1fffa8ec 	.word	0x1fffa8ec
    14d8:	1fff9504 	.word	0x1fff9504
    14dc:	1fff9e55 	.word	0x1fff9e55

000014e0 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    14e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    14e4:	4e94      	ldr	r6, [pc, #592]	; (1738 <wipedown()+0x258>)
    14e6:	f896 c000 	ldrb.w	ip, [r6]
    14ea:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    14ee:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    14f0:	2b00      	cmp	r3, #0
    14f2:	f000 811e 	beq.w	1732 <wipedown()+0x252>
    14f6:	f103 3bff 	add.w	fp, r3, #4294967295
    14fa:	fa1f fb8b 	uxth.w	fp, fp
    14fe:	488f      	ldr	r0, [pc, #572]	; (173c <wipedown()+0x25c>)
    1500:	498f      	ldr	r1, [pc, #572]	; (1740 <wipedown()+0x260>)
    1502:	f10b 0b01 	add.w	fp, fp, #1
    1506:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    150a:	4483      	add	fp, r0
    150c:	4602      	mov	r2, r0
    150e:	460d      	mov	r5, r1
    1510:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1512:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    1514:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1518:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    151c:	7027      	strb	r7, [r4, #0]
    151e:	3203      	adds	r2, #3
    1520:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1524:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    1528:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    152c:	f884 a001 	strb.w	sl, [r4, #1]
    1530:	455a      	cmp	r2, fp
        b = rhs.b;
    1532:	f884 9002 	strb.w	r9, [r4, #2]
    1536:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    153a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    153e:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    1542:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    1546:	f104 0403 	add.w	r4, r4, #3
    154a:	f1a1 0103 	sub.w	r1, r1, #3
    154e:	d1e0      	bne.n	1512 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1550:	2b4a      	cmp	r3, #74	; 0x4a
    1552:	d827      	bhi.n	15a4 <wipedown()+0xc4>
    1554:	487b      	ldr	r0, [pc, #492]	; (1744 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    1556:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    155a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    155e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1562:	eb00 0801 	add.w	r8, r0, r1
    1566:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    156a:	3301      	adds	r3, #1
    156c:	186f      	adds	r7, r5, r1
    156e:	f810 b001 	ldrb.w	fp, [r0, r1]
    1572:	f805 b001 	strb.w	fp, [r5, r1]
    1576:	18ac      	adds	r4, r5, r2
    1578:	b29b      	uxth	r3, r3
        g = rhs.g;
    157a:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    157e:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1582:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1586:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    158a:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    158e:	f887 a001 	strb.w	sl, [r7, #1]
    1592:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1594:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1598:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    159c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    15a0:	70a1      	strb	r1, [r4, #2]
    15a2:	d1d8      	bne.n	1556 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    15a4:	f10c 3aff 	add.w	sl, ip, #4294967295
    15a8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15ac:	2480      	movs	r4, #128	; 0x80
    15ae:	eb05 0b0a 	add.w	fp, r5, sl
    15b2:	4659      	mov	r1, fp
    15b4:	4623      	mov	r3, r4
    15b6:	a803      	add	r0, sp, #12
    15b8:	aa02      	add	r2, sp, #8
    15ba:	2700      	movs	r7, #0
    15bc:	f88d 4009 	strb.w	r4, [sp, #9]
    15c0:	f88d 400a 	strb.w	r4, [sp, #10]
    15c4:	f88d 7008 	strb.w	r7, [sp, #8]
    15c8:	f008 fe82 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    15cc:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    15d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15d8:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15dc:	f805 300a 	strb.w	r3, [r5, sl]
    15e0:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    15e4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    15e8:	eb05 0908 	add.w	r9, r5, r8
    15ec:	4649      	mov	r1, r9
    15ee:	4623      	mov	r3, r4
        g = rhs.g;
    15f0:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    15f4:	f88b 0002 	strb.w	r0, [fp, #2]
    15f8:	aa02      	add	r2, sp, #8
    15fa:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    15fc:	f88d 7008 	strb.w	r7, [sp, #8]
    1600:	f88d 4009 	strb.w	r4, [sp, #9]
    1604:	f88d 400a 	strb.w	r4, [sp, #10]
    1608:	f008 fe62 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    160c:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    160e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1612:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1616:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    161a:	f89d 000d 	ldrb.w	r0, [sp, #13]
    161e:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1622:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    1626:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    162a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    162e:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1632:	eb05 0e0c 	add.w	lr, r5, ip
    1636:	1868      	adds	r0, r5, r1
    1638:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    163a:	2a4a      	cmp	r2, #74	; 0x4a
    163c:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1640:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1740 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    1644:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1648:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    164c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1738 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1650:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    1652:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1654:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    1656:	d82e      	bhi.n	16b6 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1658:	4f3b      	ldr	r7, [pc, #236]	; (1748 <wipedown()+0x268>)
    165a:	683b      	ldr	r3, [r7, #0]
    165c:	07db      	lsls	r3, r3, #31
    165e:	d517      	bpl.n	1690 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1660:	4d3a      	ldr	r5, [pc, #232]	; (174c <wipedown()+0x26c>)
    1662:	4c3b      	ldr	r4, [pc, #236]	; (1750 <wipedown()+0x270>)
    1664:	682b      	ldr	r3, [r5, #0]
    1666:	9303      	str	r3, [sp, #12]
    1668:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    166c:	9b03      	ldr	r3, [sp, #12]
    166e:	1a5b      	subs	r3, r3, r1
    1670:	4293      	cmp	r3, r2
    1672:	7833      	ldrb	r3, [r6, #0]
    1674:	d306      	bcc.n	1684 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1676:	682a      	ldr	r2, [r5, #0]
    1678:	9202      	str	r2, [sp, #8]
    167a:	3b01      	subs	r3, #1
	return ret;
    167c:	9a02      	ldr	r2, [sp, #8]
    167e:	6022      	str	r2, [r4, #0]
    1680:	b2db      	uxtb	r3, r3
    1682:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1684:	b90b      	cbnz	r3, 168a <wipedown()+0x1aa>
		finish_transition();
    1686:	f7ff fbf5 	bl	e74 <finish_transition()>
	}
}
    168a:	b005      	add	sp, #20
    168c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1690:	4638      	mov	r0, r7
    1692:	f009 fd67 	bl	b164 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1696:	4d2d      	ldr	r5, [pc, #180]	; (174c <wipedown()+0x26c>)
    1698:	2800      	cmp	r0, #0
    169a:	d0e2      	beq.n	1662 <wipedown()+0x182>
    169c:	4b2d      	ldr	r3, [pc, #180]	; (1754 <wipedown()+0x274>)
    169e:	682a      	ldr	r2, [r5, #0]
    16a0:	781b      	ldrb	r3, [r3, #0]
    16a2:	4c2b      	ldr	r4, [pc, #172]	; (1750 <wipedown()+0x270>)
    16a4:	9201      	str	r2, [sp, #4]
	return ret;
    16a6:	9a01      	ldr	r2, [sp, #4]
    16a8:	6022      	str	r2, [r4, #0]
    16aa:	009b      	lsls	r3, r3, #2
    16ac:	4638      	mov	r0, r7
    16ae:	6063      	str	r3, [r4, #4]
    16b0:	f009 fd5e 	bl	b170 <__cxa_guard_release>
    16b4:	e7d6      	b.n	1664 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    16b6:	1c55      	adds	r5, r2, #1
    16b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    16bc:	eb08 0a05 	add.w	sl, r8, r5
    16c0:	4651      	mov	r1, sl
    16c2:	4623      	mov	r3, r4
    16c4:	aa02      	add	r2, sp, #8
    16c6:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    16c8:	f88d 7008 	strb.w	r7, [sp, #8]
    16cc:	f88d 4009 	strb.w	r4, [sp, #9]
    16d0:	f88d 400a 	strb.w	r4, [sp, #10]
    16d4:	f008 fdfc 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    16d8:	f899 3000 	ldrb.w	r3, [r9]
    16dc:	f88d 7008 	strb.w	r7, [sp, #8]
    16e0:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    16e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    16e8:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ec:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    16f0:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    16f4:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16f8:	f808 c005 	strb.w	ip, [r8, r5]
    16fc:	aa02      	add	r2, sp, #8
    16fe:	4623      	mov	r3, r4
    1700:	4649      	mov	r1, r9
    1702:	a803      	add	r0, sp, #12
        g = rhs.g;
    1704:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    1708:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    170c:	f88d 4009 	strb.w	r4, [sp, #9]
    1710:	f88d 400a 	strb.w	r4, [sp, #10]
    1714:	f008 fddc 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1718:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    171c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1720:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1724:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    1728:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    172c:	f889 3002 	strb.w	r3, [r9, #2]
    1730:	e792      	b.n	1658 <wipedown()+0x178>
    1732:	4d03      	ldr	r5, [pc, #12]	; (1740 <wipedown()+0x260>)
    1734:	e70e      	b.n	1554 <wipedown()+0x74>
    1736:	bf00      	nop
    1738:	1fff953c 	.word	0x1fff953c
    173c:	1fff9e6c 	.word	0x1fff9e6c
    1740:	1fffa6ac 	.word	0x1fffa6ac
    1744:	1fff8cb0 	.word	0x1fff8cb0
    1748:	1fff95f8 	.word	0x1fff95f8
    174c:	1fffa8ec 	.word	0x1fffa8ec
    1750:	1fff9518 	.word	0x1fff9518
    1754:	1fff9e55 	.word	0x1fff9e55

00001758 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    175c:	4ba2      	ldr	r3, [pc, #648]	; (19e8 <wipeup()+0x290>)
    175e:	781d      	ldrb	r5, [r3, #0]
    1760:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1762:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1764:	2b00      	cmp	r3, #0
    1766:	f000 8130 	beq.w	19ca <wipeup()+0x272>
    176a:	f103 3bff 	add.w	fp, r3, #4294967295
    176e:	fa1f fb8b 	uxth.w	fp, fp
    1772:	489e      	ldr	r0, [pc, #632]	; (19ec <wipeup()+0x294>)
    1774:	499e      	ldr	r1, [pc, #632]	; (19f0 <wipeup()+0x298>)
    1776:	f10b 0b01 	add.w	fp, fp, #1
    177a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    177e:	4483      	add	fp, r0
    1780:	4602      	mov	r2, r0
    1782:	460c      	mov	r4, r1
    1784:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1786:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    178a:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    178e:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1792:	f886 e000 	strb.w	lr, [r6]
    1796:	3203      	adds	r2, #3
    1798:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    179c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    17a0:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    17a4:	f886 a001 	strb.w	sl, [r6, #1]
    17a8:	455a      	cmp	r2, fp
        b = rhs.b;
    17aa:	f886 9002 	strb.w	r9, [r6, #2]
    17ae:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    17b6:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    17ba:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    17be:	f106 0603 	add.w	r6, r6, #3
    17c2:	f1a1 0103 	sub.w	r1, r1, #3
    17c6:	d1de      	bne.n	1786 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    17c8:	2b4a      	cmp	r3, #74	; 0x4a
    17ca:	d828      	bhi.n	181e <wipeup()+0xc6>
    17cc:	4889      	ldr	r0, [pc, #548]	; (19f4 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    17ce:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    17d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    17da:	eb00 0801 	add.w	r8, r0, r1
    17de:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    17e2:	3301      	adds	r3, #1
    17e4:	eb04 0e01 	add.w	lr, r4, r1
    17e8:	f810 b001 	ldrb.w	fp, [r0, r1]
    17ec:	f804 b001 	strb.w	fp, [r4, r1]
    17f0:	18a6      	adds	r6, r4, r2
    17f2:	b29b      	uxth	r3, r3
        g = rhs.g;
    17f4:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    17f8:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    17fc:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1800:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1804:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1808:	f88e a001 	strb.w	sl, [lr, #1]
    180c:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    180e:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1812:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    1816:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    181a:	70b1      	strb	r1, [r6, #2]
    181c:	d1d7      	bne.n	17ce <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    181e:	2d00      	cmp	r5, #0
    1820:	f040 808f 	bne.w	1942 <wipeup()+0x1ea>
    1824:	f10d 0a0c 	add.w	sl, sp, #12
    1828:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    182c:	4b6e      	ldr	r3, [pc, #440]	; (19e8 <wipeup()+0x290>)
    182e:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1830:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1834:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1838:	1c5a      	adds	r2, r3, #1
    183a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    183e:	eb04 0e03 	add.w	lr, r4, r3
    1842:	1825      	adds	r5, r4, r0
    1844:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1848:	2680      	movs	r6, #128	; 0x80
    184a:	eb04 0902 	add.w	r9, r4, r2
    184e:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1850:	22ff      	movs	r2, #255	; 0xff
    1852:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1854:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1858:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    185c:	f88e 2002 	strb.w	r2, [lr, #2]
    1860:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1862:	5422      	strb	r2, [r4, r0]
    1864:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1866:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1868:	70aa      	strb	r2, [r5, #2]
    186a:	4650      	mov	r0, sl
    186c:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    186e:	f88d 6009 	strb.w	r6, [sp, #9]
    1872:	f88d 600a 	strb.w	r6, [sp, #10]
    1876:	f88d 8008 	strb.w	r8, [sp, #8]
    187a:	f008 fd29 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    187e:	4b5a      	ldr	r3, [pc, #360]	; (19e8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1880:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1884:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1886:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    188a:	f88d 8008 	strb.w	r8, [sp, #8]
    188e:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1896:	eb04 0805 	add.w	r8, r4, r5
    189a:	4633      	mov	r3, r6
    189c:	f88d 6009 	strb.w	r6, [sp, #9]
    18a0:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    18a4:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18a8:	55e1      	strb	r1, [r4, r7]
    18aa:	465a      	mov	r2, fp
    18ac:	4650      	mov	r0, sl
    18ae:	4641      	mov	r1, r8
        g = rhs.g;
    18b0:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    18b4:	f889 6002 	strb.w	r6, [r9, #2]
    18b8:	f008 fd0a 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    18bc:	4b4e      	ldr	r3, [pc, #312]	; (19f8 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18be:	f89d 000c 	ldrb.w	r0, [sp, #12]
    18c2:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    18c4:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    18c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18cc:	5560      	strb	r0, [r4, r5]
    18ce:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    18d0:	4845      	ldr	r0, [pc, #276]	; (19e8 <wipeup()+0x290>)
        g = rhs.g;
    18d2:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    18d6:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    18da:	d520      	bpl.n	191e <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18dc:	4d47      	ldr	r5, [pc, #284]	; (19fc <wipeup()+0x2a4>)
    18de:	4c48      	ldr	r4, [pc, #288]	; (1a00 <wipeup()+0x2a8>)
    18e0:	682b      	ldr	r3, [r5, #0]
    18e2:	9303      	str	r3, [sp, #12]
    18e4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    18e8:	9b03      	ldr	r3, [sp, #12]
    18ea:	1a5b      	subs	r3, r3, r1
    18ec:	4293      	cmp	r3, r2
    18ee:	d30e      	bcc.n	190e <wipeup()+0x1b6>
    18f0:	4b3d      	ldr	r3, [pc, #244]	; (19e8 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18f2:	682a      	ldr	r2, [r5, #0]
    18f4:	781b      	ldrb	r3, [r3, #0]
    18f6:	9202      	str	r2, [sp, #8]
	return ret;
    18f8:	9a02      	ldr	r2, [sp, #8]
    18fa:	6022      	str	r2, [r4, #0]
    18fc:	3301      	adds	r3, #1
    18fe:	4a3a      	ldr	r2, [pc, #232]	; (19e8 <wipeup()+0x290>)
    1900:	b2db      	uxtb	r3, r3
    1902:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1904:	2b4a      	cmp	r3, #74	; 0x4a
    1906:	d005      	beq.n	1914 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1908:	b005      	add	sp, #20
    190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    190e:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1910:	2b4a      	cmp	r3, #74	; 0x4a
    1912:	d1f9      	bne.n	1908 <wipeup()+0x1b0>
		finish_transition();
    1914:	f7ff faae 	bl	e74 <finish_transition()>
	}
}
    1918:	b005      	add	sp, #20
    191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    191e:	4836      	ldr	r0, [pc, #216]	; (19f8 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1920:	4d36      	ldr	r5, [pc, #216]	; (19fc <wipeup()+0x2a4>)
    1922:	f009 fc1f 	bl	b164 <__cxa_guard_acquire>
    1926:	2800      	cmp	r0, #0
    1928:	d151      	bne.n	19ce <wipeup()+0x276>
    192a:	4c35      	ldr	r4, [pc, #212]	; (1a00 <wipeup()+0x2a8>)
    192c:	682b      	ldr	r3, [r5, #0]
    192e:	9303      	str	r3, [sp, #12]
    1930:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1934:	9b03      	ldr	r3, [sp, #12]
    1936:	1a5b      	subs	r3, r3, r1
    1938:	4293      	cmp	r3, r2
    193a:	d2d9      	bcs.n	18f0 <wipeup()+0x198>
    193c:	4b2a      	ldr	r3, [pc, #168]	; (19e8 <wipeup()+0x290>)
    193e:	781b      	ldrb	r3, [r3, #0]
    1940:	e7e0      	b.n	1904 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1942:	3d01      	subs	r5, #1
    1944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1948:	2680      	movs	r6, #128	; 0x80
    194a:	eb04 0905 	add.w	r9, r4, r5
    194e:	f10d 0a0c 	add.w	sl, sp, #12
    1952:	f10d 0b08 	add.w	fp, sp, #8
    1956:	f04f 0800 	mov.w	r8, #0
    195a:	4649      	mov	r1, r9
    195c:	4633      	mov	r3, r6
    195e:	4650      	mov	r0, sl
    1960:	465a      	mov	r2, fp
    1962:	f88d 8008 	strb.w	r8, [sp, #8]
    1966:	f88d 6009 	strb.w	r6, [sp, #9]
    196a:	f88d 600a 	strb.w	r6, [sp, #10]
    196e:	f008 fcaf 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1972:	4b1d      	ldr	r3, [pc, #116]	; (19e8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1974:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1978:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    197a:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    197e:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1982:	f88d 8008 	strb.w	r8, [sp, #8]
    1986:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    198a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    198e:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1992:	5562      	strb	r2, [r4, r5]
    1994:	461f      	mov	r7, r3
    1996:	4641      	mov	r1, r8
    1998:	4633      	mov	r3, r6
    199a:	465a      	mov	r2, fp
    199c:	4650      	mov	r0, sl
        g = rhs.g;
    199e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    19a2:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19a6:	f88d 6009 	strb.w	r6, [sp, #9]
    19aa:	f88d 600a 	strb.w	r6, [sp, #10]
    19ae:	f008 fc8f 	bl	a2d0 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19b2:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    19b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    19ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19be:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    19c0:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    19c4:	f888 3002 	strb.w	r3, [r8, #2]
    19c8:	e730      	b.n	182c <wipeup()+0xd4>
    19ca:	4c09      	ldr	r4, [pc, #36]	; (19f0 <wipeup()+0x298>)
    19cc:	e6fe      	b.n	17cc <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    19ce:	4b0d      	ldr	r3, [pc, #52]	; (1a04 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    19d0:	682a      	ldr	r2, [r5, #0]
    19d2:	781b      	ldrb	r3, [r3, #0]
    19d4:	4c0a      	ldr	r4, [pc, #40]	; (1a00 <wipeup()+0x2a8>)
    19d6:	9201      	str	r2, [sp, #4]
	return ret;
    19d8:	9a01      	ldr	r2, [sp, #4]
    19da:	6022      	str	r2, [r4, #0]
    19dc:	009b      	lsls	r3, r3, #2
    19de:	4806      	ldr	r0, [pc, #24]	; (19f8 <wipeup()+0x2a0>)
    19e0:	6063      	str	r3, [r4, #4]
    19e2:	f009 fbc5 	bl	b170 <__cxa_guard_release>
    19e6:	e7a1      	b.n	192c <wipeup()+0x1d4>
    19e8:	1fff953c 	.word	0x1fff953c
    19ec:	1fff8cb0 	.word	0x1fff8cb0
    19f0:	1fffa6ac 	.word	0x1fffa6ac
    19f4:	1fff9e6c 	.word	0x1fff9e6c
    19f8:	1fff95fc 	.word	0x1fff95fc
    19fc:	1fffa8ec 	.word	0x1fffa8ec
    1a00:	1fff9e58 	.word	0x1fff9e58
    1a04:	1fff9e55 	.word	0x1fff9e55

00001a08 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1a08:	2801      	cmp	r0, #1
    1a0a:	d006      	beq.n	1a1a <switch_transition(TransitionType)+0x12>
    1a0c:	d303      	bcc.n	1a16 <switch_transition(TransitionType)+0xe>
    1a0e:	2802      	cmp	r0, #2
    1a10:	d101      	bne.n	1a16 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1a12:	f7ff bea1 	b.w	1758 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1a16:	f7ff bcf1 	b.w	13fc <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1a1a:	f7ff bd61 	b.w	14e0 <wipedown()>
    1a1e:	bf00      	nop

00001a20 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1a20:	b510      	push	{r4, lr}
    1a22:	2110      	movs	r1, #16
    1a24:	4604      	mov	r4, r0
    1a26:	4894      	ldr	r0, [pc, #592]	; (1c78 <print_palette(unsigned char)+0x258>)
    1a28:	f00a fc34 	bl	c294 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a2c:	4621      	mov	r1, r4
    1a2e:	2300      	movs	r3, #0
    1a30:	220a      	movs	r2, #10
    1a32:	4892      	ldr	r0, [pc, #584]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1a34:	f00a fe42 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1a38:	2102      	movs	r1, #2
    1a3a:	4891      	ldr	r0, [pc, #580]	; (1c80 <print_palette(unsigned char)+0x260>)
    1a3c:	f00a fc2a 	bl	c294 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1a40:	2c5c      	cmp	r4, #92	; 0x5c
    1a42:	f200 8281 	bhi.w	1f48 <print_palette(unsigned char)+0x528>
    1a46:	e8df f014 	tbh	[pc, r4, lsl #1]
    1a4a:	027a      	.short	0x027a
    1a4c:	02700275 	.word	0x02700275
    1a50:	0266026b 	.word	0x0266026b
    1a54:	025c0261 	.word	0x025c0261
    1a58:	02520257 	.word	0x02520257
    1a5c:	0248024d 	.word	0x0248024d
    1a60:	023e0243 	.word	0x023e0243
    1a64:	02340239 	.word	0x02340239
    1a68:	022a022f 	.word	0x022a022f
    1a6c:	02200225 	.word	0x02200225
    1a70:	0216021b 	.word	0x0216021b
    1a74:	020c0211 	.word	0x020c0211
    1a78:	02020207 	.word	0x02020207
    1a7c:	01f801fd 	.word	0x01f801fd
    1a80:	01ee01f3 	.word	0x01ee01f3
    1a84:	01e401e9 	.word	0x01e401e9
    1a88:	01da01df 	.word	0x01da01df
    1a8c:	01d001d5 	.word	0x01d001d5
    1a90:	01c601cb 	.word	0x01c601cb
    1a94:	01bc01c1 	.word	0x01bc01c1
    1a98:	01b201b7 	.word	0x01b201b7
    1a9c:	01a801ad 	.word	0x01a801ad
    1aa0:	019e01a3 	.word	0x019e01a3
    1aa4:	01940199 	.word	0x01940199
    1aa8:	018a018f 	.word	0x018a018f
    1aac:	01800185 	.word	0x01800185
    1ab0:	0176017b 	.word	0x0176017b
    1ab4:	016c0171 	.word	0x016c0171
    1ab8:	01110167 	.word	0x01110167
    1abc:	0107010c 	.word	0x0107010c
    1ac0:	00fd0102 	.word	0x00fd0102
    1ac4:	00f300f8 	.word	0x00f300f8
    1ac8:	00e900ee 	.word	0x00e900ee
    1acc:	00df00e4 	.word	0x00df00e4
    1ad0:	00d500da 	.word	0x00d500da
    1ad4:	00cb00d0 	.word	0x00cb00d0
    1ad8:	00c100c6 	.word	0x00c100c6
    1adc:	00b700bc 	.word	0x00b700bc
    1ae0:	00ad00b2 	.word	0x00ad00b2
    1ae4:	00a300a8 	.word	0x00a300a8
    1ae8:	0099009e 	.word	0x0099009e
    1aec:	008f0094 	.word	0x008f0094
    1af0:	0085008a 	.word	0x0085008a
    1af4:	007b0080 	.word	0x007b0080
    1af8:	00710076 	.word	0x00710076
    1afc:	0067006c 	.word	0x0067006c
    1b00:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1b04:	495f      	ldr	r1, [pc, #380]	; (1c84 <print_palette(unsigned char)+0x264>)
    1b06:	485d      	ldr	r0, [pc, #372]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b08:	f7fe feb6 	bl	878 <Print::println(char const*)>
    1b0c:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1b0e:	495e      	ldr	r1, [pc, #376]	; (1c88 <print_palette(unsigned char)+0x268>)
    1b10:	485a      	ldr	r0, [pc, #360]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b12:	f7fe feb1 	bl	878 <Print::println(char const*)>
    1b16:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1b18:	495c      	ldr	r1, [pc, #368]	; (1c8c <print_palette(unsigned char)+0x26c>)
    1b1a:	4858      	ldr	r0, [pc, #352]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b1c:	f7fe feac 	bl	878 <Print::println(char const*)>
    1b20:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1b22:	495b      	ldr	r1, [pc, #364]	; (1c90 <print_palette(unsigned char)+0x270>)
    1b24:	4855      	ldr	r0, [pc, #340]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b26:	f7fe fea7 	bl	878 <Print::println(char const*)>
    1b2a:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1b2c:	4959      	ldr	r1, [pc, #356]	; (1c94 <print_palette(unsigned char)+0x274>)
    1b2e:	4853      	ldr	r0, [pc, #332]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b30:	f7fe fea2 	bl	878 <Print::println(char const*)>
    1b34:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1b36:	4958      	ldr	r1, [pc, #352]	; (1c98 <print_palette(unsigned char)+0x278>)
    1b38:	4850      	ldr	r0, [pc, #320]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b3a:	f7fe fe9d 	bl	878 <Print::println(char const*)>
    1b3e:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1b40:	4956      	ldr	r1, [pc, #344]	; (1c9c <print_palette(unsigned char)+0x27c>)
    1b42:	484e      	ldr	r0, [pc, #312]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b44:	f7fe fe98 	bl	878 <Print::println(char const*)>
    1b48:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1b4a:	4955      	ldr	r1, [pc, #340]	; (1ca0 <print_palette(unsigned char)+0x280>)
    1b4c:	484b      	ldr	r0, [pc, #300]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b4e:	f7fe fe93 	bl	878 <Print::println(char const*)>
    1b52:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1b54:	4953      	ldr	r1, [pc, #332]	; (1ca4 <print_palette(unsigned char)+0x284>)
    1b56:	4849      	ldr	r0, [pc, #292]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b58:	f7fe fe8e 	bl	878 <Print::println(char const*)>
    1b5c:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1b5e:	4952      	ldr	r1, [pc, #328]	; (1ca8 <print_palette(unsigned char)+0x288>)
    1b60:	4846      	ldr	r0, [pc, #280]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b62:	f7fe fe89 	bl	878 <Print::println(char const*)>
    1b66:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1b68:	4950      	ldr	r1, [pc, #320]	; (1cac <print_palette(unsigned char)+0x28c>)
    1b6a:	4844      	ldr	r0, [pc, #272]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b6c:	f7fe fe84 	bl	878 <Print::println(char const*)>
    1b70:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1b72:	494f      	ldr	r1, [pc, #316]	; (1cb0 <print_palette(unsigned char)+0x290>)
    1b74:	4841      	ldr	r0, [pc, #260]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b76:	f7fe fe7f 	bl	878 <Print::println(char const*)>
    1b7a:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1b7c:	494d      	ldr	r1, [pc, #308]	; (1cb4 <print_palette(unsigned char)+0x294>)
    1b7e:	483f      	ldr	r0, [pc, #252]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b80:	f7fe fe7a 	bl	878 <Print::println(char const*)>
    1b84:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1b86:	494c      	ldr	r1, [pc, #304]	; (1cb8 <print_palette(unsigned char)+0x298>)
    1b88:	483c      	ldr	r0, [pc, #240]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b8a:	f7fe fe75 	bl	878 <Print::println(char const*)>
    1b8e:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1b90:	494a      	ldr	r1, [pc, #296]	; (1cbc <print_palette(unsigned char)+0x29c>)
    1b92:	483a      	ldr	r0, [pc, #232]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b94:	f7fe fe70 	bl	878 <Print::println(char const*)>
    1b98:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1b9a:	4949      	ldr	r1, [pc, #292]	; (1cc0 <print_palette(unsigned char)+0x2a0>)
    1b9c:	4837      	ldr	r0, [pc, #220]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1b9e:	f7fe fe6b 	bl	878 <Print::println(char const*)>
    1ba2:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1ba4:	4947      	ldr	r1, [pc, #284]	; (1cc4 <print_palette(unsigned char)+0x2a4>)
    1ba6:	4835      	ldr	r0, [pc, #212]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1ba8:	f7fe fe66 	bl	878 <Print::println(char const*)>
    1bac:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1bae:	4946      	ldr	r1, [pc, #280]	; (1cc8 <print_palette(unsigned char)+0x2a8>)
    1bb0:	4832      	ldr	r0, [pc, #200]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bb2:	f7fe fe61 	bl	878 <Print::println(char const*)>
    1bb6:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1bb8:	4944      	ldr	r1, [pc, #272]	; (1ccc <print_palette(unsigned char)+0x2ac>)
    1bba:	4830      	ldr	r0, [pc, #192]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bbc:	f7fe fe5c 	bl	878 <Print::println(char const*)>
    1bc0:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1bc2:	4943      	ldr	r1, [pc, #268]	; (1cd0 <print_palette(unsigned char)+0x2b0>)
    1bc4:	482d      	ldr	r0, [pc, #180]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bc6:	f7fe fe57 	bl	878 <Print::println(char const*)>
    1bca:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1bcc:	4941      	ldr	r1, [pc, #260]	; (1cd4 <print_palette(unsigned char)+0x2b4>)
    1bce:	482b      	ldr	r0, [pc, #172]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bd0:	f7fe fe52 	bl	878 <Print::println(char const*)>
    1bd4:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1bd6:	4940      	ldr	r1, [pc, #256]	; (1cd8 <print_palette(unsigned char)+0x2b8>)
    1bd8:	4828      	ldr	r0, [pc, #160]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bda:	f7fe fe4d 	bl	878 <Print::println(char const*)>
    1bde:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1be0:	493e      	ldr	r1, [pc, #248]	; (1cdc <print_palette(unsigned char)+0x2bc>)
    1be2:	4826      	ldr	r0, [pc, #152]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1be4:	f7fe fe48 	bl	878 <Print::println(char const*)>
    1be8:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1bea:	493d      	ldr	r1, [pc, #244]	; (1ce0 <print_palette(unsigned char)+0x2c0>)
    1bec:	4823      	ldr	r0, [pc, #140]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bee:	f7fe fe43 	bl	878 <Print::println(char const*)>
    1bf2:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1bf4:	493b      	ldr	r1, [pc, #236]	; (1ce4 <print_palette(unsigned char)+0x2c4>)
    1bf6:	4821      	ldr	r0, [pc, #132]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1bf8:	f7fe fe3e 	bl	878 <Print::println(char const*)>
    1bfc:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1bfe:	493a      	ldr	r1, [pc, #232]	; (1ce8 <print_palette(unsigned char)+0x2c8>)
    1c00:	481e      	ldr	r0, [pc, #120]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c02:	f7fe fe39 	bl	878 <Print::println(char const*)>
    1c06:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1c08:	4938      	ldr	r1, [pc, #224]	; (1cec <print_palette(unsigned char)+0x2cc>)
    1c0a:	481c      	ldr	r0, [pc, #112]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c0c:	f7fe fe34 	bl	878 <Print::println(char const*)>
    1c10:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1c12:	4937      	ldr	r1, [pc, #220]	; (1cf0 <print_palette(unsigned char)+0x2d0>)
    1c14:	4819      	ldr	r0, [pc, #100]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c16:	f7fe fe2f 	bl	878 <Print::println(char const*)>
    1c1a:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1c1c:	4935      	ldr	r1, [pc, #212]	; (1cf4 <print_palette(unsigned char)+0x2d4>)
    1c1e:	4817      	ldr	r0, [pc, #92]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c20:	f7fe fe2a 	bl	878 <Print::println(char const*)>
    1c24:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1c26:	4934      	ldr	r1, [pc, #208]	; (1cf8 <print_palette(unsigned char)+0x2d8>)
    1c28:	4814      	ldr	r0, [pc, #80]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c2a:	f7fe fe25 	bl	878 <Print::println(char const*)>
    1c2e:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1c30:	4932      	ldr	r1, [pc, #200]	; (1cfc <print_palette(unsigned char)+0x2dc>)
    1c32:	4812      	ldr	r0, [pc, #72]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c34:	f7fe fe20 	bl	878 <Print::println(char const*)>
    1c38:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1c3a:	4931      	ldr	r1, [pc, #196]	; (1d00 <print_palette(unsigned char)+0x2e0>)
    1c3c:	480f      	ldr	r0, [pc, #60]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c3e:	f7fe fe1b 	bl	878 <Print::println(char const*)>
    1c42:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1c44:	492f      	ldr	r1, [pc, #188]	; (1d04 <print_palette(unsigned char)+0x2e4>)
    1c46:	480d      	ldr	r0, [pc, #52]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c48:	f7fe fe16 	bl	878 <Print::println(char const*)>
    1c4c:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1c4e:	492e      	ldr	r1, [pc, #184]	; (1d08 <print_palette(unsigned char)+0x2e8>)
    1c50:	480a      	ldr	r0, [pc, #40]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c52:	f7fe fe11 	bl	878 <Print::println(char const*)>
    1c56:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1c58:	492c      	ldr	r1, [pc, #176]	; (1d0c <print_palette(unsigned char)+0x2ec>)
    1c5a:	4808      	ldr	r0, [pc, #32]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c5c:	f7fe fe0c 	bl	878 <Print::println(char const*)>
    1c60:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1c62:	492b      	ldr	r1, [pc, #172]	; (1d10 <print_palette(unsigned char)+0x2f0>)
    1c64:	4805      	ldr	r0, [pc, #20]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c66:	f7fe fe07 	bl	878 <Print::println(char const*)>
    1c6a:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1c6c:	4929      	ldr	r1, [pc, #164]	; (1d14 <print_palette(unsigned char)+0x2f4>)
    1c6e:	4803      	ldr	r0, [pc, #12]	; (1c7c <print_palette(unsigned char)+0x25c>)
    1c70:	f7fe fe02 	bl	878 <Print::println(char const*)>
    1c74:	bd10      	pop	{r4, pc}
    1c76:	bf00      	nop
    1c78:	0000dff4 	.word	0x0000dff4
    1c7c:	1fff878c 	.word	0x1fff878c
    1c80:	0000e008 	.word	0x0000e008
    1c84:	0000e59c 	.word	0x0000e59c
    1c88:	0000e590 	.word	0x0000e590
    1c8c:	0000e580 	.word	0x0000e580
    1c90:	0000e570 	.word	0x0000e570
    1c94:	0000e55c 	.word	0x0000e55c
    1c98:	0000e544 	.word	0x0000e544
    1c9c:	0000e52c 	.word	0x0000e52c
    1ca0:	0000e51c 	.word	0x0000e51c
    1ca4:	0000e504 	.word	0x0000e504
    1ca8:	0000e4f8 	.word	0x0000e4f8
    1cac:	0000e4ec 	.word	0x0000e4ec
    1cb0:	0000e4d4 	.word	0x0000e4d4
    1cb4:	0000e4c8 	.word	0x0000e4c8
    1cb8:	0000e4bc 	.word	0x0000e4bc
    1cbc:	0000e4b0 	.word	0x0000e4b0
    1cc0:	0000e4a4 	.word	0x0000e4a4
    1cc4:	0000e494 	.word	0x0000e494
    1cc8:	0000e488 	.word	0x0000e488
    1ccc:	0000e474 	.word	0x0000e474
    1cd0:	0000e468 	.word	0x0000e468
    1cd4:	0000e458 	.word	0x0000e458
    1cd8:	0000e44c 	.word	0x0000e44c
    1cdc:	0000e440 	.word	0x0000e440
    1ce0:	0000e438 	.word	0x0000e438
    1ce4:	0000e424 	.word	0x0000e424
    1ce8:	0000e414 	.word	0x0000e414
    1cec:	0000e400 	.word	0x0000e400
    1cf0:	0000e3f4 	.word	0x0000e3f4
    1cf4:	0000e3e8 	.word	0x0000e3e8
    1cf8:	0000e3dc 	.word	0x0000e3dc
    1cfc:	0000e3cc 	.word	0x0000e3cc
    1d00:	0000e3b8 	.word	0x0000e3b8
    1d04:	0000e3ac 	.word	0x0000e3ac
    1d08:	0000e39c 	.word	0x0000e39c
    1d0c:	0000e390 	.word	0x0000e390
    1d10:	0000e380 	.word	0x0000e380
    1d14:	0000e374 	.word	0x0000e374
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1d18:	498e      	ldr	r1, [pc, #568]	; (1f54 <print_palette(unsigned char)+0x534>)
    1d1a:	488f      	ldr	r0, [pc, #572]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d1c:	f7fe fdac 	bl	878 <Print::println(char const*)>
    1d20:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1d22:	498e      	ldr	r1, [pc, #568]	; (1f5c <print_palette(unsigned char)+0x53c>)
    1d24:	488c      	ldr	r0, [pc, #560]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d26:	f7fe fda7 	bl	878 <Print::println(char const*)>
    1d2a:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1d2c:	498c      	ldr	r1, [pc, #560]	; (1f60 <print_palette(unsigned char)+0x540>)
    1d2e:	488a      	ldr	r0, [pc, #552]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d30:	f7fe fda2 	bl	878 <Print::println(char const*)>
    1d34:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1d36:	498b      	ldr	r1, [pc, #556]	; (1f64 <print_palette(unsigned char)+0x544>)
    1d38:	4887      	ldr	r0, [pc, #540]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d3a:	f7fe fd9d 	bl	878 <Print::println(char const*)>
    1d3e:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1d40:	4989      	ldr	r1, [pc, #548]	; (1f68 <print_palette(unsigned char)+0x548>)
    1d42:	4885      	ldr	r0, [pc, #532]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d44:	f7fe fd98 	bl	878 <Print::println(char const*)>
    1d48:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1d4a:	4988      	ldr	r1, [pc, #544]	; (1f6c <print_palette(unsigned char)+0x54c>)
    1d4c:	4882      	ldr	r0, [pc, #520]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d4e:	f7fe fd93 	bl	878 <Print::println(char const*)>
    1d52:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1d54:	4986      	ldr	r1, [pc, #536]	; (1f70 <print_palette(unsigned char)+0x550>)
    1d56:	4880      	ldr	r0, [pc, #512]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d58:	f7fe fd8e 	bl	878 <Print::println(char const*)>
    1d5c:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1d5e:	4985      	ldr	r1, [pc, #532]	; (1f74 <print_palette(unsigned char)+0x554>)
    1d60:	487d      	ldr	r0, [pc, #500]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d62:	f7fe fd89 	bl	878 <Print::println(char const*)>
    1d66:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1d68:	4983      	ldr	r1, [pc, #524]	; (1f78 <print_palette(unsigned char)+0x558>)
    1d6a:	487b      	ldr	r0, [pc, #492]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d6c:	f7fe fd84 	bl	878 <Print::println(char const*)>
    1d70:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1d72:	4982      	ldr	r1, [pc, #520]	; (1f7c <print_palette(unsigned char)+0x55c>)
    1d74:	4878      	ldr	r0, [pc, #480]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d76:	f7fe fd7f 	bl	878 <Print::println(char const*)>
    1d7a:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1d7c:	4980      	ldr	r1, [pc, #512]	; (1f80 <print_palette(unsigned char)+0x560>)
    1d7e:	4876      	ldr	r0, [pc, #472]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d80:	f7fe fd7a 	bl	878 <Print::println(char const*)>
    1d84:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1d86:	497f      	ldr	r1, [pc, #508]	; (1f84 <print_palette(unsigned char)+0x564>)
    1d88:	4873      	ldr	r0, [pc, #460]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d8a:	f7fe fd75 	bl	878 <Print::println(char const*)>
    1d8e:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1d90:	497d      	ldr	r1, [pc, #500]	; (1f88 <print_palette(unsigned char)+0x568>)
    1d92:	4871      	ldr	r0, [pc, #452]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d94:	f7fe fd70 	bl	878 <Print::println(char const*)>
    1d98:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1d9a:	497c      	ldr	r1, [pc, #496]	; (1f8c <print_palette(unsigned char)+0x56c>)
    1d9c:	486e      	ldr	r0, [pc, #440]	; (1f58 <print_palette(unsigned char)+0x538>)
    1d9e:	f7fe fd6b 	bl	878 <Print::println(char const*)>
    1da2:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1da4:	497a      	ldr	r1, [pc, #488]	; (1f90 <print_palette(unsigned char)+0x570>)
    1da6:	486c      	ldr	r0, [pc, #432]	; (1f58 <print_palette(unsigned char)+0x538>)
    1da8:	f7fe fd66 	bl	878 <Print::println(char const*)>
    1dac:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1dae:	4979      	ldr	r1, [pc, #484]	; (1f94 <print_palette(unsigned char)+0x574>)
    1db0:	4869      	ldr	r0, [pc, #420]	; (1f58 <print_palette(unsigned char)+0x538>)
    1db2:	f7fe fd61 	bl	878 <Print::println(char const*)>
    1db6:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1db8:	4977      	ldr	r1, [pc, #476]	; (1f98 <print_palette(unsigned char)+0x578>)
    1dba:	4867      	ldr	r0, [pc, #412]	; (1f58 <print_palette(unsigned char)+0x538>)
    1dbc:	f7fe fd5c 	bl	878 <Print::println(char const*)>
    1dc0:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1dc2:	4976      	ldr	r1, [pc, #472]	; (1f9c <print_palette(unsigned char)+0x57c>)
    1dc4:	4864      	ldr	r0, [pc, #400]	; (1f58 <print_palette(unsigned char)+0x538>)
    1dc6:	f7fe fd57 	bl	878 <Print::println(char const*)>
    1dca:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1dcc:	4974      	ldr	r1, [pc, #464]	; (1fa0 <print_palette(unsigned char)+0x580>)
    1dce:	4862      	ldr	r0, [pc, #392]	; (1f58 <print_palette(unsigned char)+0x538>)
    1dd0:	f7fe fd52 	bl	878 <Print::println(char const*)>
    1dd4:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1dd6:	4973      	ldr	r1, [pc, #460]	; (1fa4 <print_palette(unsigned char)+0x584>)
    1dd8:	485f      	ldr	r0, [pc, #380]	; (1f58 <print_palette(unsigned char)+0x538>)
    1dda:	f7fe fd4d 	bl	878 <Print::println(char const*)>
    1dde:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1de0:	4971      	ldr	r1, [pc, #452]	; (1fa8 <print_palette(unsigned char)+0x588>)
    1de2:	485d      	ldr	r0, [pc, #372]	; (1f58 <print_palette(unsigned char)+0x538>)
    1de4:	f7fe fd48 	bl	878 <Print::println(char const*)>
    1de8:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1dea:	4970      	ldr	r1, [pc, #448]	; (1fac <print_palette(unsigned char)+0x58c>)
    1dec:	485a      	ldr	r0, [pc, #360]	; (1f58 <print_palette(unsigned char)+0x538>)
    1dee:	f7fe fd43 	bl	878 <Print::println(char const*)>
    1df2:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1df4:	496e      	ldr	r1, [pc, #440]	; (1fb0 <print_palette(unsigned char)+0x590>)
    1df6:	4858      	ldr	r0, [pc, #352]	; (1f58 <print_palette(unsigned char)+0x538>)
    1df8:	f7fe fd3e 	bl	878 <Print::println(char const*)>
    1dfc:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1dfe:	496d      	ldr	r1, [pc, #436]	; (1fb4 <print_palette(unsigned char)+0x594>)
    1e00:	4855      	ldr	r0, [pc, #340]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e02:	f7fe fd39 	bl	878 <Print::println(char const*)>
    1e06:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1e08:	496b      	ldr	r1, [pc, #428]	; (1fb8 <print_palette(unsigned char)+0x598>)
    1e0a:	4853      	ldr	r0, [pc, #332]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e0c:	f7fe fd34 	bl	878 <Print::println(char const*)>
    1e10:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1e12:	496a      	ldr	r1, [pc, #424]	; (1fbc <print_palette(unsigned char)+0x59c>)
    1e14:	4850      	ldr	r0, [pc, #320]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e16:	f7fe fd2f 	bl	878 <Print::println(char const*)>
    1e1a:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1e1c:	4968      	ldr	r1, [pc, #416]	; (1fc0 <print_palette(unsigned char)+0x5a0>)
    1e1e:	484e      	ldr	r0, [pc, #312]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e20:	f7fe fd2a 	bl	878 <Print::println(char const*)>
    1e24:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1e26:	4967      	ldr	r1, [pc, #412]	; (1fc4 <print_palette(unsigned char)+0x5a4>)
    1e28:	484b      	ldr	r0, [pc, #300]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e2a:	f7fe fd25 	bl	878 <Print::println(char const*)>
    1e2e:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1e30:	4965      	ldr	r1, [pc, #404]	; (1fc8 <print_palette(unsigned char)+0x5a8>)
    1e32:	4849      	ldr	r0, [pc, #292]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e34:	f7fe fd20 	bl	878 <Print::println(char const*)>
    1e38:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1e3a:	4964      	ldr	r1, [pc, #400]	; (1fcc <print_palette(unsigned char)+0x5ac>)
    1e3c:	4846      	ldr	r0, [pc, #280]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e3e:	f7fe fd1b 	bl	878 <Print::println(char const*)>
    1e42:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1e44:	4962      	ldr	r1, [pc, #392]	; (1fd0 <print_palette(unsigned char)+0x5b0>)
    1e46:	4844      	ldr	r0, [pc, #272]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e48:	f7fe fd16 	bl	878 <Print::println(char const*)>
    1e4c:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1e4e:	4961      	ldr	r1, [pc, #388]	; (1fd4 <print_palette(unsigned char)+0x5b4>)
    1e50:	4841      	ldr	r0, [pc, #260]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e52:	f7fe fd11 	bl	878 <Print::println(char const*)>
    1e56:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    1e58:	495f      	ldr	r1, [pc, #380]	; (1fd8 <print_palette(unsigned char)+0x5b8>)
    1e5a:	483f      	ldr	r0, [pc, #252]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e5c:	f7fe fd0c 	bl	878 <Print::println(char const*)>
    1e60:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    1e62:	495e      	ldr	r1, [pc, #376]	; (1fdc <print_palette(unsigned char)+0x5bc>)
    1e64:	483c      	ldr	r0, [pc, #240]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e66:	f7fe fd07 	bl	878 <Print::println(char const*)>
    1e6a:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    1e6c:	495c      	ldr	r1, [pc, #368]	; (1fe0 <print_palette(unsigned char)+0x5c0>)
    1e6e:	483a      	ldr	r0, [pc, #232]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e70:	f7fe fd02 	bl	878 <Print::println(char const*)>
    1e74:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    1e76:	495b      	ldr	r1, [pc, #364]	; (1fe4 <print_palette(unsigned char)+0x5c4>)
    1e78:	4837      	ldr	r0, [pc, #220]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e7a:	f7fe fcfd 	bl	878 <Print::println(char const*)>
    1e7e:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    1e80:	4959      	ldr	r1, [pc, #356]	; (1fe8 <print_palette(unsigned char)+0x5c8>)
    1e82:	4835      	ldr	r0, [pc, #212]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e84:	f7fe fcf8 	bl	878 <Print::println(char const*)>
    1e88:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    1e8a:	4958      	ldr	r1, [pc, #352]	; (1fec <print_palette(unsigned char)+0x5cc>)
    1e8c:	4832      	ldr	r0, [pc, #200]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e8e:	f7fe fcf3 	bl	878 <Print::println(char const*)>
    1e92:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    1e94:	4956      	ldr	r1, [pc, #344]	; (1ff0 <print_palette(unsigned char)+0x5d0>)
    1e96:	4830      	ldr	r0, [pc, #192]	; (1f58 <print_palette(unsigned char)+0x538>)
    1e98:	f7fe fcee 	bl	878 <Print::println(char const*)>
    1e9c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    1e9e:	4955      	ldr	r1, [pc, #340]	; (1ff4 <print_palette(unsigned char)+0x5d4>)
    1ea0:	482d      	ldr	r0, [pc, #180]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ea2:	f7fe fce9 	bl	878 <Print::println(char const*)>
    1ea6:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    1ea8:	4953      	ldr	r1, [pc, #332]	; (1ff8 <print_palette(unsigned char)+0x5d8>)
    1eaa:	482b      	ldr	r0, [pc, #172]	; (1f58 <print_palette(unsigned char)+0x538>)
    1eac:	f7fe fce4 	bl	878 <Print::println(char const*)>
    1eb0:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    1eb2:	4952      	ldr	r1, [pc, #328]	; (1ffc <print_palette(unsigned char)+0x5dc>)
    1eb4:	4828      	ldr	r0, [pc, #160]	; (1f58 <print_palette(unsigned char)+0x538>)
    1eb6:	f7fe fcdf 	bl	878 <Print::println(char const*)>
    1eba:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    1ebc:	4950      	ldr	r1, [pc, #320]	; (2000 <print_palette(unsigned char)+0x5e0>)
    1ebe:	4826      	ldr	r0, [pc, #152]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ec0:	f7fe fcda 	bl	878 <Print::println(char const*)>
    1ec4:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    1ec6:	494f      	ldr	r1, [pc, #316]	; (2004 <print_palette(unsigned char)+0x5e4>)
    1ec8:	4823      	ldr	r0, [pc, #140]	; (1f58 <print_palette(unsigned char)+0x538>)
    1eca:	f7fe fcd5 	bl	878 <Print::println(char const*)>
    1ece:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    1ed0:	494d      	ldr	r1, [pc, #308]	; (2008 <print_palette(unsigned char)+0x5e8>)
    1ed2:	4821      	ldr	r0, [pc, #132]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ed4:	f7fe fcd0 	bl	878 <Print::println(char const*)>
    1ed8:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    1eda:	494c      	ldr	r1, [pc, #304]	; (200c <print_palette(unsigned char)+0x5ec>)
    1edc:	481e      	ldr	r0, [pc, #120]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ede:	f7fe fccb 	bl	878 <Print::println(char const*)>
    1ee2:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    1ee4:	494a      	ldr	r1, [pc, #296]	; (2010 <print_palette(unsigned char)+0x5f0>)
    1ee6:	481c      	ldr	r0, [pc, #112]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ee8:	f7fe fcc6 	bl	878 <Print::println(char const*)>
    1eec:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    1eee:	4949      	ldr	r1, [pc, #292]	; (2014 <print_palette(unsigned char)+0x5f4>)
    1ef0:	4819      	ldr	r0, [pc, #100]	; (1f58 <print_palette(unsigned char)+0x538>)
    1ef2:	f7fe fcc1 	bl	878 <Print::println(char const*)>
    1ef6:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    1ef8:	4947      	ldr	r1, [pc, #284]	; (2018 <print_palette(unsigned char)+0x5f8>)
    1efa:	4817      	ldr	r0, [pc, #92]	; (1f58 <print_palette(unsigned char)+0x538>)
    1efc:	f7fe fcbc 	bl	878 <Print::println(char const*)>
    1f00:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    1f02:	4946      	ldr	r1, [pc, #280]	; (201c <print_palette(unsigned char)+0x5fc>)
    1f04:	4814      	ldr	r0, [pc, #80]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f06:	f7fe fcb7 	bl	878 <Print::println(char const*)>
    1f0a:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    1f0c:	4944      	ldr	r1, [pc, #272]	; (2020 <print_palette(unsigned char)+0x600>)
    1f0e:	4812      	ldr	r0, [pc, #72]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f10:	f7fe fcb2 	bl	878 <Print::println(char const*)>
    1f14:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    1f16:	4943      	ldr	r1, [pc, #268]	; (2024 <print_palette(unsigned char)+0x604>)
    1f18:	480f      	ldr	r0, [pc, #60]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f1a:	f7fe fcad 	bl	878 <Print::println(char const*)>
    1f1e:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    1f20:	4941      	ldr	r1, [pc, #260]	; (2028 <print_palette(unsigned char)+0x608>)
    1f22:	480d      	ldr	r0, [pc, #52]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f24:	f7fe fca8 	bl	878 <Print::println(char const*)>
    1f28:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    1f2a:	4940      	ldr	r1, [pc, #256]	; (202c <print_palette(unsigned char)+0x60c>)
    1f2c:	480a      	ldr	r0, [pc, #40]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f2e:	f7fe fca3 	bl	878 <Print::println(char const*)>
    1f32:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    1f34:	493e      	ldr	r1, [pc, #248]	; (2030 <print_palette(unsigned char)+0x610>)
    1f36:	4808      	ldr	r0, [pc, #32]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f38:	f7fe fc9e 	bl	878 <Print::println(char const*)>
    1f3c:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    1f3e:	493d      	ldr	r1, [pc, #244]	; (2034 <print_palette(unsigned char)+0x614>)
    1f40:	4805      	ldr	r0, [pc, #20]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f42:	f7fe fc99 	bl	878 <Print::println(char const*)>
    1f46:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    1f48:	493b      	ldr	r1, [pc, #236]	; (2038 <print_palette(unsigned char)+0x618>)
    1f4a:	4803      	ldr	r0, [pc, #12]	; (1f58 <print_palette(unsigned char)+0x538>)
    1f4c:	f7fe fc94 	bl	878 <Print::println(char const*)>
    1f50:	bd10      	pop	{r4, pc}
    1f52:	bf00      	nop
    1f54:	0000e360 	.word	0x0000e360
    1f58:	1fff878c 	.word	0x1fff878c
    1f5c:	0000e350 	.word	0x0000e350
    1f60:	0000e344 	.word	0x0000e344
    1f64:	0000e338 	.word	0x0000e338
    1f68:	0000e32c 	.word	0x0000e32c
    1f6c:	0000e318 	.word	0x0000e318
    1f70:	0000e30c 	.word	0x0000e30c
    1f74:	0000e300 	.word	0x0000e300
    1f78:	0000e2f4 	.word	0x0000e2f4
    1f7c:	0000e2dc 	.word	0x0000e2dc
    1f80:	0000e2d4 	.word	0x0000e2d4
    1f84:	0000e36c 	.word	0x0000e36c
    1f88:	0000e2c8 	.word	0x0000e2c8
    1f8c:	0000e2bc 	.word	0x0000e2bc
    1f90:	0000e2a8 	.word	0x0000e2a8
    1f94:	0000e294 	.word	0x0000e294
    1f98:	0000e284 	.word	0x0000e284
    1f9c:	0000e278 	.word	0x0000e278
    1fa0:	0000e26c 	.word	0x0000e26c
    1fa4:	0000e260 	.word	0x0000e260
    1fa8:	0000e254 	.word	0x0000e254
    1fac:	0000e248 	.word	0x0000e248
    1fb0:	0000e23c 	.word	0x0000e23c
    1fb4:	0000e230 	.word	0x0000e230
    1fb8:	0000e224 	.word	0x0000e224
    1fbc:	0000e218 	.word	0x0000e218
    1fc0:	0000e20c 	.word	0x0000e20c
    1fc4:	0000e200 	.word	0x0000e200
    1fc8:	0000e1f0 	.word	0x0000e1f0
    1fcc:	0000e1dc 	.word	0x0000e1dc
    1fd0:	0000e1c0 	.word	0x0000e1c0
    1fd4:	0000e1a8 	.word	0x0000e1a8
    1fd8:	0000e18c 	.word	0x0000e18c
    1fdc:	0000e17c 	.word	0x0000e17c
    1fe0:	0000e16c 	.word	0x0000e16c
    1fe4:	0000e158 	.word	0x0000e158
    1fe8:	0000e148 	.word	0x0000e148
    1fec:	0000e140 	.word	0x0000e140
    1ff0:	0000e138 	.word	0x0000e138
    1ff4:	0000e120 	.word	0x0000e120
    1ff8:	0000e110 	.word	0x0000e110
    1ffc:	0000e108 	.word	0x0000e108
    2000:	0000e0f8 	.word	0x0000e0f8
    2004:	0000e0e8 	.word	0x0000e0e8
    2008:	0000e0d8 	.word	0x0000e0d8
    200c:	0000e0c4 	.word	0x0000e0c4
    2010:	0000e0b0 	.word	0x0000e0b0
    2014:	0000e09c 	.word	0x0000e09c
    2018:	0000e084 	.word	0x0000e084
    201c:	0000e06c 	.word	0x0000e06c
    2020:	0000e05c 	.word	0x0000e05c
    2024:	0000e048 	.word	0x0000e048
    2028:	0000e034 	.word	0x0000e034
    202c:	0000e024 	.word	0x0000e024
    2030:	0000e018 	.word	0x0000e018
    2034:	0000e00c 	.word	0x0000e00c
    2038:	0000e5b4 	.word	0x0000e5b4

0000203c <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    203c:	b538      	push	{r3, r4, r5, lr}
    203e:	2100      	movs	r1, #0
    2040:	4604      	mov	r4, r0
    2042:	4889      	ldr	r0, [pc, #548]	; (2268 <LEDDebug(LEDStruct&)+0x22c>)
    2044:	f00a f926 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2048:	4888      	ldr	r0, [pc, #544]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    204a:	f00a fb27 	bl	c69c <Print::println()>
    204e:	2122      	movs	r1, #34	; 0x22
    2050:	4887      	ldr	r0, [pc, #540]	; (2270 <LEDDebug(LEDStruct&)+0x234>)
    2052:	f00a f91f 	bl	c294 <usb_serial_write>
    2056:	4885      	ldr	r0, [pc, #532]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2058:	f00a fb20 	bl	c69c <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    205c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2060:	2b00      	cmp	r3, #0
    2062:	f000 80a0 	beq.w	21a6 <LEDDebug(LEDStruct&)+0x16a>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2066:	2b01      	cmp	r3, #1
    2068:	f000 8518 	beq.w	2a9c <LEDDebug(LEDStruct&)+0xa60>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    206c:	2b02      	cmp	r3, #2
    206e:	f000 8563 	beq.w	2b38 <LEDDebug(LEDStruct&)+0xafc>
    2072:	2113      	movs	r1, #19
    2074:	487f      	ldr	r0, [pc, #508]	; (2274 <LEDDebug(LEDStruct&)+0x238>)
    2076:	f00a f90d 	bl	c294 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    207a:	4b7f      	ldr	r3, [pc, #508]	; (2278 <LEDDebug(LEDStruct&)+0x23c>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    207c:	487b      	ldr	r0, [pc, #492]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    207e:	7819      	ldrb	r1, [r3, #0]
    2080:	220a      	movs	r2, #10
    2082:	2300      	movs	r3, #0
    2084:	f00a fb1a 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2088:	2103      	movs	r1, #3
    208a:	487c      	ldr	r0, [pc, #496]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    208c:	f00a f902 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2090:	4876      	ldr	r0, [pc, #472]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2092:	f00a fb03 	bl	c69c <Print::println()>
    2096:	2113      	movs	r1, #19
    2098:	4879      	ldr	r0, [pc, #484]	; (2280 <LEDDebug(LEDStruct&)+0x244>)
    209a:	f00a f8fb 	bl	c294 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    209e:	2300      	movs	r3, #0
    20a0:	220a      	movs	r2, #10
    20a2:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    20a6:	4871      	ldr	r0, [pc, #452]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20a8:	f00a fb08 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    20ac:	2103      	movs	r1, #3
    20ae:	4873      	ldr	r0, [pc, #460]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    20b0:	f00a f8f0 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20b4:	486d      	ldr	r0, [pc, #436]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20b6:	f00a faf1 	bl	c69c <Print::println()>
    20ba:	2111      	movs	r1, #17
    20bc:	4871      	ldr	r0, [pc, #452]	; (2284 <LEDDebug(LEDStruct&)+0x248>)
    20be:	f00a f8e9 	bl	c294 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    20c2:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    20c6:	4869      	ldr	r0, [pc, #420]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20c8:	f00a fb38 	bl	c73c <Print::print(long)>
    20cc:	2103      	movs	r1, #3
    20ce:	486b      	ldr	r0, [pc, #428]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    20d0:	f00a f8e0 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20d4:	4865      	ldr	r0, [pc, #404]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20d6:	f00a fae1 	bl	c69c <Print::println()>
    20da:	2114      	movs	r1, #20
    20dc:	486a      	ldr	r0, [pc, #424]	; (2288 <LEDDebug(LEDStruct&)+0x24c>)
    20de:	f00a f8d9 	bl	c294 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    20e2:	2300      	movs	r3, #0
    20e4:	220a      	movs	r2, #10
    20e6:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    20ea:	4860      	ldr	r0, [pc, #384]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20ec:	f00a fae6 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    20f0:	2103      	movs	r1, #3
    20f2:	4862      	ldr	r0, [pc, #392]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    20f4:	f00a f8ce 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    20f8:	485c      	ldr	r0, [pc, #368]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    20fa:	f00a facf 	bl	c69c <Print::println()>
    20fe:	2115      	movs	r1, #21
    2100:	4862      	ldr	r0, [pc, #392]	; (228c <LEDDebug(LEDStruct&)+0x250>)
    2102:	f00a f8c7 	bl	c294 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2106:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    210a:	4858      	ldr	r0, [pc, #352]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    210c:	f00a fb16 	bl	c73c <Print::print(long)>
    2110:	2103      	movs	r1, #3
    2112:	485a      	ldr	r0, [pc, #360]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    2114:	f00a f8be 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2118:	4854      	ldr	r0, [pc, #336]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    211a:	f00a fabf 	bl	c69c <Print::println()>
    211e:	2111      	movs	r1, #17
    2120:	485b      	ldr	r0, [pc, #364]	; (2290 <LEDDebug(LEDStruct&)+0x254>)
    2122:	f00a f8b7 	bl	c294 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2126:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    212a:	4850      	ldr	r0, [pc, #320]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    212c:	f00a fb06 	bl	c73c <Print::print(long)>
    2130:	2103      	movs	r1, #3
    2132:	4852      	ldr	r0, [pc, #328]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    2134:	f00a f8ae 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2138:	484c      	ldr	r0, [pc, #304]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    213a:	f00a faaf 	bl	c69c <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    213e:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    2142:	bb5b      	cbnz	r3, 219c <LEDDebug(LEDStruct&)+0x160>
    2144:	2122      	movs	r1, #34	; 0x22
    2146:	484a      	ldr	r0, [pc, #296]	; (2270 <LEDDebug(LEDStruct&)+0x234>)
    2148:	f00a f8a4 	bl	c294 <usb_serial_write>
    214c:	4847      	ldr	r0, [pc, #284]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    214e:	f00a faa5 	bl	c69c <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2152:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    2156:	2b1d      	cmp	r3, #29
    2158:	f200 8493 	bhi.w	2a82 <LEDDebug(LEDStruct&)+0xa46>
    215c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2160:	049100ac 	.word	0x049100ac
    2164:	04910491 	.word	0x04910491
    2168:	04910491 	.word	0x04910491
    216c:	0491012e 	.word	0x0491012e
    2170:	04910491 	.word	0x04910491
    2174:	04910167 	.word	0x04910167
    2178:	04910491 	.word	0x04910491
    217c:	04910491 	.word	0x04910491
    2180:	01760491 	.word	0x01760491
    2184:	01830181 	.word	0x01830181
    2188:	01d20185 	.word	0x01d20185
    218c:	03320253 	.word	0x03320253
    2190:	03d3038e 	.word	0x03d3038e
    2194:	04120491 	.word	0x04120491
    2198:	002b0468 	.word	0x002b0468
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    219c:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    21a0:	f7ff fc3e 	bl	1a20 <print_palette(unsigned char)>
    21a4:	e7ce      	b.n	2144 <LEDDebug(LEDStruct&)+0x108>
    21a6:	2122      	movs	r1, #34	; 0x22
    21a8:	483a      	ldr	r0, [pc, #232]	; (2294 <LEDDebug(LEDStruct&)+0x258>)
    21aa:	f00a f873 	bl	c294 <usb_serial_write>
    21ae:	482f      	ldr	r0, [pc, #188]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21b0:	f00a fa74 	bl	c69c <Print::println()>
    21b4:	e75d      	b.n	2072 <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    21b6:	4938      	ldr	r1, [pc, #224]	; (2298 <LEDDebug(LEDStruct&)+0x25c>)
    21b8:	482c      	ldr	r0, [pc, #176]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21ba:	f7fe fb5d 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    21be:	4937      	ldr	r1, [pc, #220]	; (229c <LEDDebug(LEDStruct&)+0x260>)
    21c0:	482a      	ldr	r0, [pc, #168]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21c2:	f7fe fb4b 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    21c6:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    21ca:	4828      	ldr	r0, [pc, #160]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21cc:	f00a fab6 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    21d0:	492a      	ldr	r1, [pc, #168]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    21d2:	4826      	ldr	r0, [pc, #152]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21d4:	f7fe fb50 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    21d8:	4931      	ldr	r1, [pc, #196]	; (22a0 <LEDDebug(LEDStruct&)+0x264>)
    21da:	4824      	ldr	r0, [pc, #144]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21dc:	f7fe fb3e 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21e0:	2300      	movs	r3, #0
    21e2:	220a      	movs	r2, #10
    21e4:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    21e8:	4820      	ldr	r0, [pc, #128]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21ea:	f00a fa67 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    21ee:	4923      	ldr	r1, [pc, #140]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    21f0:	481e      	ldr	r0, [pc, #120]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21f2:	f7fe fb41 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    21f6:	492b      	ldr	r1, [pc, #172]	; (22a4 <LEDDebug(LEDStruct&)+0x268>)
    21f8:	481c      	ldr	r0, [pc, #112]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    21fa:	f7fe fb2f 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21fe:	2300      	movs	r3, #0
    2200:	220a      	movs	r2, #10
    2202:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2206:	4819      	ldr	r0, [pc, #100]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2208:	f00a fa58 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    220c:	491b      	ldr	r1, [pc, #108]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    220e:	4817      	ldr	r0, [pc, #92]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2210:	f7fe fb32 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2214:	4924      	ldr	r1, [pc, #144]	; (22a8 <LEDDebug(LEDStruct&)+0x26c>)
    2216:	4815      	ldr	r0, [pc, #84]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2218:	f7fe fb20 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    221c:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2220:	4812      	ldr	r0, [pc, #72]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2222:	f00a fa8b 	bl	c73c <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2226:	4915      	ldr	r1, [pc, #84]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    2228:	4810      	ldr	r0, [pc, #64]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    222a:	f7fe fb25 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    222e:	491f      	ldr	r1, [pc, #124]	; (22ac <LEDDebug(LEDStruct&)+0x270>)
    2230:	480e      	ldr	r0, [pc, #56]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2232:	f7fe fb13 	bl	85c <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2236:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    223a:	2b01      	cmp	r3, #1
    223c:	f000 84e5 	beq.w	2c0a <LEDDebug(LEDStruct&)+0xbce>
    2240:	f0c0 850e 	bcc.w	2c60 <LEDDebug(LEDStruct&)+0xc24>
    2244:	2b02      	cmp	r3, #2
    2246:	d103      	bne.n	2250 <LEDDebug(LEDStruct&)+0x214>
    2248:	4919      	ldr	r1, [pc, #100]	; (22b0 <LEDDebug(LEDStruct&)+0x274>)
    224a:	4808      	ldr	r0, [pc, #32]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    224c:	f7fe fb06 	bl	85c <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2250:	490a      	ldr	r1, [pc, #40]	; (227c <LEDDebug(LEDStruct&)+0x240>)
    2252:	4806      	ldr	r0, [pc, #24]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    2254:	f7fe fb10 	bl	878 <Print::println(char const*)>
    2258:	4916      	ldr	r1, [pc, #88]	; (22b4 <LEDDebug(LEDStruct&)+0x278>)
    225a:	4804      	ldr	r0, [pc, #16]	; (226c <LEDDebug(LEDStruct&)+0x230>)
    225c:	f7fe fafe 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2260:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2264:	e09a      	b.n	239c <LEDDebug(LEDStruct&)+0x360>
    2266:	bf00      	nop
    2268:	0000e764 	.word	0x0000e764
    226c:	1fff878c 	.word	0x1fff878c
    2270:	0000e5cc 	.word	0x0000e5cc
    2274:	0000e65c 	.word	0x0000e65c
    2278:	1fff8723 	.word	0x1fff8723
    227c:	0000e670 	.word	0x0000e670
    2280:	0000e674 	.word	0x0000e674
    2284:	0000e688 	.word	0x0000e688
    2288:	0000e69c 	.word	0x0000e69c
    228c:	0000e6b4 	.word	0x0000e6b4
    2290:	0000e6cc 	.word	0x0000e6cc
    2294:	0000e5f0 	.word	0x0000e5f0
    2298:	0000ef14 	.word	0x0000ef14
    229c:	0000ef38 	.word	0x0000ef38
    22a0:	0000ef50 	.word	0x0000ef50
    22a4:	0000ef68 	.word	0x0000ef68
    22a8:	0000ef80 	.word	0x0000ef80
    22ac:	0000ef94 	.word	0x0000ef94
    22b0:	0000efa8 	.word	0x0000efa8
    22b4:	0000efb8 	.word	0x0000efb8
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    22b8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    22bc:	487b      	ldr	r0, [pc, #492]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    22be:	2b04      	cmp	r3, #4
    22c0:	bf0c      	ite	eq
    22c2:	497b      	ldreq	r1, [pc, #492]	; (24b0 <LEDDebug(LEDStruct&)+0x474>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    22c4:	497b      	ldrne	r1, [pc, #492]	; (24b4 <LEDDebug(LEDStruct&)+0x478>)
    22c6:	f7fe fad7 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22ca:	497b      	ldr	r1, [pc, #492]	; (24b8 <LEDDebug(LEDStruct&)+0x47c>)
    22cc:	4877      	ldr	r0, [pc, #476]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22ce:	f7fe fac5 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22d2:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    22d6:	4875      	ldr	r0, [pc, #468]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22d8:	f00a fa30 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    22dc:	4977      	ldr	r1, [pc, #476]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    22de:	4873      	ldr	r0, [pc, #460]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22e0:	f7fe faca 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22e4:	4976      	ldr	r1, [pc, #472]	; (24c0 <LEDDebug(LEDStruct&)+0x484>)
    22e6:	4871      	ldr	r0, [pc, #452]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22e8:	f7fe fab8 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ec:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    22f0:	486e      	ldr	r0, [pc, #440]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22f2:	f00a fa23 	bl	c73c <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    22f6:	4971      	ldr	r1, [pc, #452]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    22f8:	486c      	ldr	r0, [pc, #432]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    22fa:	f7fe fabd 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    22fe:	4971      	ldr	r1, [pc, #452]	; (24c4 <LEDDebug(LEDStruct&)+0x488>)
    2300:	486a      	ldr	r0, [pc, #424]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2302:	f7fe faab 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2306:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    230a:	4868      	ldr	r0, [pc, #416]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    230c:	f00a fa16 	bl	c73c <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    2310:	496a      	ldr	r1, [pc, #424]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    2312:	4866      	ldr	r0, [pc, #408]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2314:	f7fe fab0 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2318:	496b      	ldr	r1, [pc, #428]	; (24c8 <LEDDebug(LEDStruct&)+0x48c>)
    231a:	4864      	ldr	r0, [pc, #400]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    231c:	f7fe fa9e 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2320:	2300      	movs	r3, #0
    2322:	220a      	movs	r2, #10
    2324:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2328:	4860      	ldr	r0, [pc, #384]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    232a:	f00a f9c7 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    232e:	4963      	ldr	r1, [pc, #396]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    2330:	485e      	ldr	r0, [pc, #376]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2332:	f7fe faa1 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2336:	4965      	ldr	r1, [pc, #404]	; (24cc <LEDDebug(LEDStruct&)+0x490>)
    2338:	485c      	ldr	r0, [pc, #368]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    233a:	f7fe fa8f 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    233e:	2300      	movs	r3, #0
    2340:	220a      	movs	r2, #10
    2342:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2346:	4859      	ldr	r0, [pc, #356]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2348:	f00a f9b8 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    234c:	495b      	ldr	r1, [pc, #364]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    234e:	4857      	ldr	r0, [pc, #348]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2350:	f7fe fa92 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2354:	495e      	ldr	r1, [pc, #376]	; (24d0 <LEDDebug(LEDStruct&)+0x494>)
    2356:	4855      	ldr	r0, [pc, #340]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2358:	f7fe fa80 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    235c:	2300      	movs	r3, #0
    235e:	220a      	movs	r2, #10
    2360:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2364:	4851      	ldr	r0, [pc, #324]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2366:	f00a f9a9 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    236a:	4954      	ldr	r1, [pc, #336]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    236c:	484f      	ldr	r0, [pc, #316]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    236e:	f7fe fa83 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2372:	4958      	ldr	r1, [pc, #352]	; (24d4 <LEDDebug(LEDStruct&)+0x498>)
    2374:	484d      	ldr	r0, [pc, #308]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2376:	f7fe fa71 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    237a:	2300      	movs	r3, #0
    237c:	220a      	movs	r2, #10
    237e:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2382:	484a      	ldr	r0, [pc, #296]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2384:	f00a f99a 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2388:	494c      	ldr	r1, [pc, #304]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    238a:	4848      	ldr	r0, [pc, #288]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    238c:	f7fe fa74 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2390:	4951      	ldr	r1, [pc, #324]	; (24d8 <LEDDebug(LEDStruct&)+0x49c>)
    2392:	4846      	ldr	r0, [pc, #280]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2394:	f7fe fa62 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2398:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    239c:	4843      	ldr	r0, [pc, #268]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    239e:	f00a f9cd 	bl	c73c <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23a2:	4946      	ldr	r1, [pc, #280]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    23a4:	4841      	ldr	r0, [pc, #260]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23a6:	f7fe fa67 	bl	878 <Print::println(char const*)>
    23aa:	2123      	movs	r1, #35	; 0x23
    23ac:	484b      	ldr	r0, [pc, #300]	; (24dc <LEDDebug(LEDStruct&)+0x4a0>)
    23ae:	f009 ff71 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    23b2:	483e      	ldr	r0, [pc, #248]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    23b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    23b8:	f00a b970 	b.w	c69c <Print::println()>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    23bc:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    23c0:	2b00      	cmp	r3, #0
    23c2:	f000 83fe 	beq.w	2bc2 <LEDDebug(LEDStruct&)+0xb86>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    23c6:	4946      	ldr	r1, [pc, #280]	; (24e0 <LEDDebug(LEDStruct&)+0x4a4>)
    23c8:	4838      	ldr	r0, [pc, #224]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23ca:	f7fe fa55 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23ce:	493a      	ldr	r1, [pc, #232]	; (24b8 <LEDDebug(LEDStruct&)+0x47c>)
    23d0:	4836      	ldr	r0, [pc, #216]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23d2:	f7fe fa43 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23d6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    23da:	4834      	ldr	r0, [pc, #208]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23dc:	f00a f9ae 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23e0:	4936      	ldr	r1, [pc, #216]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    23e2:	4832      	ldr	r0, [pc, #200]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23e4:	f7fe fa48 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23e8:	493e      	ldr	r1, [pc, #248]	; (24e4 <LEDDebug(LEDStruct&)+0x4a8>)
    23ea:	4830      	ldr	r0, [pc, #192]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23ec:	f7fe fa36 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23f0:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    23f4:	482d      	ldr	r0, [pc, #180]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23f6:	f00a f9a1 	bl	c73c <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    23fa:	4930      	ldr	r1, [pc, #192]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    23fc:	482b      	ldr	r0, [pc, #172]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    23fe:	f7fe fa3b 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2402:	4939      	ldr	r1, [pc, #228]	; (24e8 <LEDDebug(LEDStruct&)+0x4ac>)
    2404:	4829      	ldr	r0, [pc, #164]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2406:	f7fe fa29 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    240a:	2300      	movs	r3, #0
    240c:	220a      	movs	r2, #10
    240e:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2412:	4826      	ldr	r0, [pc, #152]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2414:	f00a f952 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2418:	4928      	ldr	r1, [pc, #160]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    241a:	4824      	ldr	r0, [pc, #144]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    241c:	f7fe fa2c 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2420:	4932      	ldr	r1, [pc, #200]	; (24ec <LEDDebug(LEDStruct&)+0x4b0>)
    2422:	4822      	ldr	r0, [pc, #136]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2424:	f7fe fa1a 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2428:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    242c:	e034      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    242e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2432:	3b0a      	subs	r3, #10
    2434:	2b06      	cmp	r3, #6
    2436:	f200 8389 	bhi.w	2b4c <LEDDebug(LEDStruct&)+0xb10>
    243a:	e8df f013 	tbh	[pc, r3, lsl #1]
    243e:	03fb      	.short	0x03fb
    2440:	038303f6 	.word	0x038303f6
    2444:	0405040a 	.word	0x0405040a
    2448:	03f10400 	.word	0x03f10400
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    244c:	4928      	ldr	r1, [pc, #160]	; (24f0 <LEDDebug(LEDStruct&)+0x4b4>)
    244e:	4817      	ldr	r0, [pc, #92]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2450:	f7fe fa12 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2454:	4918      	ldr	r1, [pc, #96]	; (24b8 <LEDDebug(LEDStruct&)+0x47c>)
    2456:	4815      	ldr	r0, [pc, #84]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2458:	f7fe fa00 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    245c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2460:	e79c      	b.n	239c <LEDDebug(LEDStruct&)+0x360>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2462:	4924      	ldr	r1, [pc, #144]	; (24f4 <LEDDebug(LEDStruct&)+0x4b8>)
    2464:	e7f3      	b.n	244e <LEDDebug(LEDStruct&)+0x412>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    2466:	4924      	ldr	r1, [pc, #144]	; (24f8 <LEDDebug(LEDStruct&)+0x4bc>)
    2468:	e7f1      	b.n	244e <LEDDebug(LEDStruct&)+0x412>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    246a:	4924      	ldr	r1, [pc, #144]	; (24fc <LEDDebug(LEDStruct&)+0x4c0>)
    246c:	480f      	ldr	r0, [pc, #60]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    246e:	f7fe fa03 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2472:	4911      	ldr	r1, [pc, #68]	; (24b8 <LEDDebug(LEDStruct&)+0x47c>)
    2474:	480d      	ldr	r0, [pc, #52]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2476:	f7fe f9f1 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    247a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    247e:	480b      	ldr	r0, [pc, #44]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2480:	f00a f95c 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2484:	490d      	ldr	r1, [pc, #52]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    2486:	4809      	ldr	r0, [pc, #36]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2488:	f7fe f9f6 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    248c:	491c      	ldr	r1, [pc, #112]	; (2500 <LEDDebug(LEDStruct&)+0x4c4>)
    248e:	4807      	ldr	r0, [pc, #28]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    2490:	f7fe f9e4 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2494:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2498:	4804      	ldr	r0, [pc, #16]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    249a:	2300      	movs	r3, #0
    249c:	220a      	movs	r2, #10
    249e:	f00a f90d 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    24a2:	4906      	ldr	r1, [pc, #24]	; (24bc <LEDDebug(LEDStruct&)+0x480>)
    24a4:	4801      	ldr	r0, [pc, #4]	; (24ac <LEDDebug(LEDStruct&)+0x470>)
    24a6:	f7fe f9e7 	bl	878 <Print::println(char const*)>
    24aa:	e77e      	b.n	23aa <LEDDebug(LEDStruct&)+0x36e>
    24ac:	1fff878c 	.word	0x1fff878c
    24b0:	0000e6e0 	.word	0x0000e6e0
    24b4:	0000e704 	.word	0x0000e704
    24b8:	0000e728 	.word	0x0000e728
    24bc:	0000e670 	.word	0x0000e670
    24c0:	0000e740 	.word	0x0000e740
    24c4:	0000e754 	.word	0x0000e754
    24c8:	0000e768 	.word	0x0000e768
    24cc:	0000e77c 	.word	0x0000e77c
    24d0:	0000e78c 	.word	0x0000e78c
    24d4:	0000e79c 	.word	0x0000e79c
    24d8:	0000e7ac 	.word	0x0000e7ac
    24dc:	0000efec 	.word	0x0000efec
    24e0:	0000e7e8 	.word	0x0000e7e8
    24e4:	0000e80c 	.word	0x0000e80c
    24e8:	0000e81c 	.word	0x0000e81c
    24ec:	0000e82c 	.word	0x0000e82c
    24f0:	0000e9ac 	.word	0x0000e9ac
    24f4:	0000e9d0 	.word	0x0000e9d0
    24f8:	0000e9f4 	.word	0x0000e9f4
    24fc:	0000ea18 	.word	0x0000ea18
    2500:	0000ea3c 	.word	0x0000ea3c
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2504:	4997      	ldr	r1, [pc, #604]	; (2764 <LEDDebug(LEDStruct&)+0x728>)
    2506:	4898      	ldr	r0, [pc, #608]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2508:	f7fe f9b6 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    250c:	4997      	ldr	r1, [pc, #604]	; (276c <LEDDebug(LEDStruct&)+0x730>)
    250e:	4896      	ldr	r0, [pc, #600]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2510:	f7fe f9a4 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2514:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2518:	4893      	ldr	r0, [pc, #588]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    251a:	f00a f90f 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    251e:	4994      	ldr	r1, [pc, #592]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2520:	4891      	ldr	r0, [pc, #580]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2522:	f7fe f9a9 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2526:	4993      	ldr	r1, [pc, #588]	; (2774 <LEDDebug(LEDStruct&)+0x738>)
    2528:	488f      	ldr	r0, [pc, #572]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    252a:	f7fe f997 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    252e:	2300      	movs	r3, #0
    2530:	220a      	movs	r2, #10
    2532:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2536:	488c      	ldr	r0, [pc, #560]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2538:	f00a f8c0 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    253c:	498c      	ldr	r1, [pc, #560]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    253e:	488a      	ldr	r0, [pc, #552]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2540:	f7fe f99a 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2544:	498c      	ldr	r1, [pc, #560]	; (2778 <LEDDebug(LEDStruct&)+0x73c>)
    2546:	4888      	ldr	r0, [pc, #544]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2548:	f7fe f988 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    254c:	2300      	movs	r3, #0
    254e:	220a      	movs	r2, #10
    2550:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2554:	4884      	ldr	r0, [pc, #528]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2556:	f00a f8b1 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    255a:	4985      	ldr	r1, [pc, #532]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    255c:	4882      	ldr	r0, [pc, #520]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    255e:	f7fe f98b 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2562:	4986      	ldr	r1, [pc, #536]	; (277c <LEDDebug(LEDStruct&)+0x740>)
    2564:	4880      	ldr	r0, [pc, #512]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2566:	f7fe f979 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    256a:	2300      	movs	r3, #0
    256c:	220a      	movs	r2, #10
    256e:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2572:	487d      	ldr	r0, [pc, #500]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2574:	f00a f8a2 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2578:	497d      	ldr	r1, [pc, #500]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    257a:	487b      	ldr	r0, [pc, #492]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    257c:	f7fe f97c 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2580:	497f      	ldr	r1, [pc, #508]	; (2780 <LEDDebug(LEDStruct&)+0x744>)
    2582:	4879      	ldr	r0, [pc, #484]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2584:	f7fe f96a 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2588:	2300      	movs	r3, #0
    258a:	220a      	movs	r2, #10
    258c:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2590:	4875      	ldr	r0, [pc, #468]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2592:	f00a f893 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2596:	4976      	ldr	r1, [pc, #472]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2598:	4873      	ldr	r0, [pc, #460]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    259a:	f7fe f96d 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    259e:	4979      	ldr	r1, [pc, #484]	; (2784 <LEDDebug(LEDStruct&)+0x748>)
    25a0:	4871      	ldr	r0, [pc, #452]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25a2:	f7fe f95b 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25a6:	2300      	movs	r3, #0
    25a8:	220a      	movs	r2, #10
    25aa:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    25ae:	486e      	ldr	r0, [pc, #440]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25b0:	f00a f884 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    25b4:	496e      	ldr	r1, [pc, #440]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    25b6:	486c      	ldr	r0, [pc, #432]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25b8:	f7fe f95e 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25bc:	4972      	ldr	r1, [pc, #456]	; (2788 <LEDDebug(LEDStruct&)+0x74c>)
    25be:	486a      	ldr	r0, [pc, #424]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25c0:	f7fe f94c 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25c4:	2300      	movs	r3, #0
    25c6:	220a      	movs	r2, #10
    25c8:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    25cc:	4866      	ldr	r0, [pc, #408]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25ce:	f00a f875 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    25d2:	4967      	ldr	r1, [pc, #412]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    25d4:	4864      	ldr	r0, [pc, #400]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25d6:	f7fe f94f 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25da:	496c      	ldr	r1, [pc, #432]	; (278c <LEDDebug(LEDStruct&)+0x750>)
    25dc:	4862      	ldr	r0, [pc, #392]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25de:	f7fe f93d 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    25e2:	2300      	movs	r3, #0
    25e4:	220a      	movs	r2, #10
    25e6:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    25ea:	485f      	ldr	r0, [pc, #380]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25ec:	f00a f866 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    25f0:	495f      	ldr	r1, [pc, #380]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    25f2:	485d      	ldr	r0, [pc, #372]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25f4:	f7fe f940 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25f8:	4965      	ldr	r1, [pc, #404]	; (2790 <LEDDebug(LEDStruct&)+0x754>)
    25fa:	485b      	ldr	r0, [pc, #364]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    25fc:	f7fe f92e 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2600:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2604:	e748      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2606:	4963      	ldr	r1, [pc, #396]	; (2794 <LEDDebug(LEDStruct&)+0x758>)
    2608:	4857      	ldr	r0, [pc, #348]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    260a:	f7fe f935 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    260e:	4957      	ldr	r1, [pc, #348]	; (276c <LEDDebug(LEDStruct&)+0x730>)
    2610:	4855      	ldr	r0, [pc, #340]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2612:	f7fe f923 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2616:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    261a:	4853      	ldr	r0, [pc, #332]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    261c:	f00a f88e 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2620:	4953      	ldr	r1, [pc, #332]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2622:	4851      	ldr	r0, [pc, #324]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2624:	f7fe f928 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2628:	495b      	ldr	r1, [pc, #364]	; (2798 <LEDDebug(LEDStruct&)+0x75c>)
    262a:	484f      	ldr	r0, [pc, #316]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    262c:	f7fe f916 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2630:	2300      	movs	r3, #0
    2632:	220a      	movs	r2, #10
    2634:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2638:	484b      	ldr	r0, [pc, #300]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    263a:	f00a f83f 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    263e:	494c      	ldr	r1, [pc, #304]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2640:	4849      	ldr	r0, [pc, #292]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2642:	f7fe f919 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2646:	4955      	ldr	r1, [pc, #340]	; (279c <LEDDebug(LEDStruct&)+0x760>)
    2648:	4847      	ldr	r0, [pc, #284]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    264a:	f7fe f907 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    264e:	2300      	movs	r3, #0
    2650:	220a      	movs	r2, #10
    2652:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2656:	4844      	ldr	r0, [pc, #272]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2658:	f00a f830 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    265c:	4944      	ldr	r1, [pc, #272]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    265e:	4842      	ldr	r0, [pc, #264]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2660:	f7fe f90a 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2664:	494e      	ldr	r1, [pc, #312]	; (27a0 <LEDDebug(LEDStruct&)+0x764>)
    2666:	4840      	ldr	r0, [pc, #256]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2668:	f7fe f8f8 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    266c:	2300      	movs	r3, #0
    266e:	220a      	movs	r2, #10
    2670:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2674:	483c      	ldr	r0, [pc, #240]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2676:	f00a f821 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    267a:	493d      	ldr	r1, [pc, #244]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    267c:	483a      	ldr	r0, [pc, #232]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    267e:	f7fe f8fb 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2682:	4948      	ldr	r1, [pc, #288]	; (27a4 <LEDDebug(LEDStruct&)+0x768>)
    2684:	4838      	ldr	r0, [pc, #224]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2686:	f7fe f8e9 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    268a:	2300      	movs	r3, #0
    268c:	220a      	movs	r2, #10
    268e:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2692:	4835      	ldr	r0, [pc, #212]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2694:	f00a f812 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    2698:	4935      	ldr	r1, [pc, #212]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    269a:	4833      	ldr	r0, [pc, #204]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    269c:	f7fe f8ec 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26a0:	4941      	ldr	r1, [pc, #260]	; (27a8 <LEDDebug(LEDStruct&)+0x76c>)
    26a2:	4831      	ldr	r0, [pc, #196]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26a4:	f7fe f8da 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26a8:	2300      	movs	r3, #0
    26aa:	220a      	movs	r2, #10
    26ac:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    26b0:	482d      	ldr	r0, [pc, #180]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26b2:	f00a f803 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    26b6:	492e      	ldr	r1, [pc, #184]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    26b8:	482b      	ldr	r0, [pc, #172]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26ba:	f7fe f8dd 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26be:	493b      	ldr	r1, [pc, #236]	; (27ac <LEDDebug(LEDStruct&)+0x770>)
    26c0:	4829      	ldr	r0, [pc, #164]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26c2:	f7fe f8cb 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26c6:	2300      	movs	r3, #0
    26c8:	220a      	movs	r2, #10
    26ca:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    26ce:	4826      	ldr	r0, [pc, #152]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26d0:	f009 fff4 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    26d4:	4926      	ldr	r1, [pc, #152]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    26d6:	4824      	ldr	r0, [pc, #144]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26d8:	f7fe f8ce 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26dc:	4934      	ldr	r1, [pc, #208]	; (27b0 <LEDDebug(LEDStruct&)+0x774>)
    26de:	4822      	ldr	r0, [pc, #136]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26e0:	f7fe f8bc 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26e4:	2300      	movs	r3, #0
    26e6:	220a      	movs	r2, #10
    26e8:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    26ec:	481e      	ldr	r0, [pc, #120]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26ee:	f009 ffe5 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    26f2:	491f      	ldr	r1, [pc, #124]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    26f4:	481c      	ldr	r0, [pc, #112]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26f6:	f7fe f8bf 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26fa:	492e      	ldr	r1, [pc, #184]	; (27b4 <LEDDebug(LEDStruct&)+0x778>)
    26fc:	481a      	ldr	r0, [pc, #104]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    26fe:	f7fe f8ad 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2702:	2300      	movs	r3, #0
    2704:	220a      	movs	r2, #10
    2706:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    270a:	4817      	ldr	r0, [pc, #92]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    270c:	f009 ffd6 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    2710:	4917      	ldr	r1, [pc, #92]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2712:	4815      	ldr	r0, [pc, #84]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2714:	f7fe f8b0 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2718:	4927      	ldr	r1, [pc, #156]	; (27b8 <LEDDebug(LEDStruct&)+0x77c>)
    271a:	4813      	ldr	r0, [pc, #76]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    271c:	f7fe f89e 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2720:	2300      	movs	r3, #0
    2722:	220a      	movs	r2, #10
    2724:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2728:	480f      	ldr	r0, [pc, #60]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    272a:	f009 ffc7 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    272e:	4910      	ldr	r1, [pc, #64]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    2730:	480d      	ldr	r0, [pc, #52]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2732:	f7fe f8a1 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2736:	4921      	ldr	r1, [pc, #132]	; (27bc <LEDDebug(LEDStruct&)+0x780>)
    2738:	480b      	ldr	r0, [pc, #44]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    273a:	f7fe f88f 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    273e:	2300      	movs	r3, #0
    2740:	220a      	movs	r2, #10
    2742:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2746:	4808      	ldr	r0, [pc, #32]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2748:	f009 ffb8 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    274c:	4908      	ldr	r1, [pc, #32]	; (2770 <LEDDebug(LEDStruct&)+0x734>)
    274e:	4806      	ldr	r0, [pc, #24]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2750:	f7fe f892 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2754:	491a      	ldr	r1, [pc, #104]	; (27c0 <LEDDebug(LEDStruct&)+0x784>)
    2756:	4804      	ldr	r0, [pc, #16]	; (2768 <LEDDebug(LEDStruct&)+0x72c>)
    2758:	f7fe f880 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    275c:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    2760:	e69a      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
    2762:	bf00      	nop
    2764:	0000eb24 	.word	0x0000eb24
    2768:	1fff878c 	.word	0x1fff878c
    276c:	0000e728 	.word	0x0000e728
    2770:	0000e670 	.word	0x0000e670
    2774:	0000eb48 	.word	0x0000eb48
    2778:	0000eb5c 	.word	0x0000eb5c
    277c:	0000eb70 	.word	0x0000eb70
    2780:	0000eb84 	.word	0x0000eb84
    2784:	0000eb98 	.word	0x0000eb98
    2788:	0000ebac 	.word	0x0000ebac
    278c:	0000ebc0 	.word	0x0000ebc0
    2790:	0000ebd4 	.word	0x0000ebd4
    2794:	0000ebe8 	.word	0x0000ebe8
    2798:	0000ec0c 	.word	0x0000ec0c
    279c:	0000ec20 	.word	0x0000ec20
    27a0:	0000ec34 	.word	0x0000ec34
    27a4:	0000ec48 	.word	0x0000ec48
    27a8:	0000ec5c 	.word	0x0000ec5c
    27ac:	0000ec70 	.word	0x0000ec70
    27b0:	0000ec84 	.word	0x0000ec84
    27b4:	0000ec98 	.word	0x0000ec98
    27b8:	0000ecac 	.word	0x0000ecac
    27bc:	0000ecc0 	.word	0x0000ecc0
    27c0:	0000ecd4 	.word	0x0000ecd4
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    27c4:	49b8      	ldr	r1, [pc, #736]	; (2aa8 <LEDDebug(LEDStruct&)+0xa6c>)
    27c6:	48b9      	ldr	r0, [pc, #740]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    27c8:	f7fe f856 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27cc:	49b8      	ldr	r1, [pc, #736]	; (2ab0 <LEDDebug(LEDStruct&)+0xa74>)
    27ce:	48b7      	ldr	r0, [pc, #732]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    27d0:	f7fe f844 	bl	85c <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    27d4:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    27d8:	2b01      	cmp	r3, #1
    27da:	f000 821c 	beq.w	2c16 <LEDDebug(LEDStruct&)+0xbda>
    27de:	f0c0 823d 	bcc.w	2c5c <LEDDebug(LEDStruct&)+0xc20>
    27e2:	2b02      	cmp	r3, #2
    27e4:	d107      	bne.n	27f6 <LEDDebug(LEDStruct&)+0x7ba>
    27e6:	49b3      	ldr	r1, [pc, #716]	; (2ab4 <LEDDebug(LEDStruct&)+0xa78>)
    27e8:	48b0      	ldr	r0, [pc, #704]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    27ea:	f7fe f837 	bl	85c <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    27ee:	49b2      	ldr	r1, [pc, #712]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    27f0:	48ae      	ldr	r0, [pc, #696]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    27f2:	f7fe f841 	bl	878 <Print::println(char const*)>
    27f6:	49b1      	ldr	r1, [pc, #708]	; (2abc <LEDDebug(LEDStruct&)+0xa80>)
    27f8:	48ac      	ldr	r0, [pc, #688]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    27fa:	f7fe f82f 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27fe:	2300      	movs	r3, #0
    2800:	220a      	movs	r2, #10
    2802:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2806:	48a9      	ldr	r0, [pc, #676]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2808:	f009 ff58 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    280c:	49aa      	ldr	r1, [pc, #680]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    280e:	48a7      	ldr	r0, [pc, #668]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2810:	f7fe f832 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2814:	49aa      	ldr	r1, [pc, #680]	; (2ac0 <LEDDebug(LEDStruct&)+0xa84>)
    2816:	48a5      	ldr	r0, [pc, #660]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2818:	f7fe f820 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    281c:	2300      	movs	r3, #0
    281e:	220a      	movs	r2, #10
    2820:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2824:	48a1      	ldr	r0, [pc, #644]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2826:	f009 ff49 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    282a:	49a3      	ldr	r1, [pc, #652]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    282c:	489f      	ldr	r0, [pc, #636]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    282e:	f7fe f823 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2832:	49a4      	ldr	r1, [pc, #656]	; (2ac4 <LEDDebug(LEDStruct&)+0xa88>)
    2834:	489d      	ldr	r0, [pc, #628]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2836:	f7fe f811 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    283a:	2300      	movs	r3, #0
    283c:	220a      	movs	r2, #10
    283e:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2842:	489a      	ldr	r0, [pc, #616]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2844:	f009 ff3a 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2848:	499b      	ldr	r1, [pc, #620]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    284a:	4898      	ldr	r0, [pc, #608]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    284c:	f7fe f814 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2850:	499d      	ldr	r1, [pc, #628]	; (2ac8 <LEDDebug(LEDStruct&)+0xa8c>)
    2852:	4896      	ldr	r0, [pc, #600]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2854:	f7fe f802 	bl	85c <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2858:	2300      	movs	r3, #0
    285a:	220a      	movs	r2, #10
    285c:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2860:	4892      	ldr	r0, [pc, #584]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2862:	f009 ff2b 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2866:	4994      	ldr	r1, [pc, #592]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2868:	4890      	ldr	r0, [pc, #576]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    286a:	f7fe f805 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    286e:	4997      	ldr	r1, [pc, #604]	; (2acc <LEDDebug(LEDStruct&)+0xa90>)
    2870:	488e      	ldr	r0, [pc, #568]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2872:	f7fd fff3 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2876:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    287a:	e58f      	b.n	239c <LEDDebug(LEDStruct&)+0x360>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    287c:	4994      	ldr	r1, [pc, #592]	; (2ad0 <LEDDebug(LEDStruct&)+0xa94>)
    287e:	488b      	ldr	r0, [pc, #556]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2880:	f7fd fffa 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2884:	4993      	ldr	r1, [pc, #588]	; (2ad4 <LEDDebug(LEDStruct&)+0xa98>)
    2886:	4889      	ldr	r0, [pc, #548]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2888:	f7fd ffe8 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    288c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2890:	4886      	ldr	r0, [pc, #536]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2892:	f009 ff53 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2896:	4988      	ldr	r1, [pc, #544]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2898:	4884      	ldr	r0, [pc, #528]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    289a:	f7fd ffed 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    289e:	498e      	ldr	r1, [pc, #568]	; (2ad8 <LEDDebug(LEDStruct&)+0xa9c>)
    28a0:	4882      	ldr	r0, [pc, #520]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28a2:	f7fd ffdb 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28a6:	2300      	movs	r3, #0
    28a8:	220a      	movs	r2, #10
    28aa:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    28ae:	487f      	ldr	r0, [pc, #508]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28b0:	f009 ff04 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    28b4:	4980      	ldr	r1, [pc, #512]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    28b6:	487d      	ldr	r0, [pc, #500]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28b8:	f7fd ffde 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28bc:	4987      	ldr	r1, [pc, #540]	; (2adc <LEDDebug(LEDStruct&)+0xaa0>)
    28be:	487b      	ldr	r0, [pc, #492]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28c0:	f7fd ffcc 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28c4:	2300      	movs	r3, #0
    28c6:	220a      	movs	r2, #10
    28c8:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    28cc:	4877      	ldr	r0, [pc, #476]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28ce:	f009 fef5 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    28d2:	4979      	ldr	r1, [pc, #484]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    28d4:	4875      	ldr	r0, [pc, #468]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28d6:	f7fd ffcf 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28da:	4981      	ldr	r1, [pc, #516]	; (2ae0 <LEDDebug(LEDStruct&)+0xaa4>)
    28dc:	4873      	ldr	r0, [pc, #460]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28de:	f7fd ffbd 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28e2:	2300      	movs	r3, #0
    28e4:	220a      	movs	r2, #10
    28e6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    28ea:	4870      	ldr	r0, [pc, #448]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28ec:	f009 fee6 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    28f0:	4971      	ldr	r1, [pc, #452]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    28f2:	486e      	ldr	r0, [pc, #440]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28f4:	f7fd ffc0 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28f8:	497a      	ldr	r1, [pc, #488]	; (2ae4 <LEDDebug(LEDStruct&)+0xaa8>)
    28fa:	486c      	ldr	r0, [pc, #432]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    28fc:	f7fd ffae 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2900:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2904:	e5c8      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2906:	4978      	ldr	r1, [pc, #480]	; (2ae8 <LEDDebug(LEDStruct&)+0xaac>)
    2908:	4868      	ldr	r0, [pc, #416]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    290a:	f7fd ffb5 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    290e:	4977      	ldr	r1, [pc, #476]	; (2aec <LEDDebug(LEDStruct&)+0xab0>)
    2910:	4866      	ldr	r0, [pc, #408]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2912:	f7fd ffa3 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2916:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    291a:	4864      	ldr	r0, [pc, #400]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    291c:	f009 ff0e 	bl	c73c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2920:	4965      	ldr	r1, [pc, #404]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2922:	4862      	ldr	r0, [pc, #392]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2924:	f7fd ffa8 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2928:	4971      	ldr	r1, [pc, #452]	; (2af0 <LEDDebug(LEDStruct&)+0xab4>)
    292a:	4860      	ldr	r0, [pc, #384]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    292c:	f7fd ff96 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2930:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2934:	485d      	ldr	r0, [pc, #372]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2936:	f009 ff01 	bl	c73c <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    293a:	495f      	ldr	r1, [pc, #380]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    293c:	485b      	ldr	r0, [pc, #364]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    293e:	f7fd ff9b 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2942:	496c      	ldr	r1, [pc, #432]	; (2af4 <LEDDebug(LEDStruct&)+0xab8>)
    2944:	4859      	ldr	r0, [pc, #356]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2946:	f7fd ff89 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    294a:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    294e:	4857      	ldr	r0, [pc, #348]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2950:	f009 fef4 	bl	c73c <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2954:	4958      	ldr	r1, [pc, #352]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2956:	4855      	ldr	r0, [pc, #340]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2958:	f7fd ff8e 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    295c:	4966      	ldr	r1, [pc, #408]	; (2af8 <LEDDebug(LEDStruct&)+0xabc>)
    295e:	4853      	ldr	r0, [pc, #332]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2960:	f7fd ff7c 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2964:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2968:	4850      	ldr	r0, [pc, #320]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    296a:	f009 fee7 	bl	c73c <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    296e:	4952      	ldr	r1, [pc, #328]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2970:	484e      	ldr	r0, [pc, #312]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2972:	f7fd ff81 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2976:	4961      	ldr	r1, [pc, #388]	; (2afc <LEDDebug(LEDStruct&)+0xac0>)
    2978:	484c      	ldr	r0, [pc, #304]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    297a:	f7fd ff6f 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    297e:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2982:	e589      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2984:	495e      	ldr	r1, [pc, #376]	; (2b00 <LEDDebug(LEDStruct&)+0xac4>)
    2986:	4849      	ldr	r0, [pc, #292]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2988:	f7fd ff76 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    298c:	495d      	ldr	r1, [pc, #372]	; (2b04 <LEDDebug(LEDStruct&)+0xac8>)
    298e:	4847      	ldr	r0, [pc, #284]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2990:	f7fd ff64 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2994:	2300      	movs	r3, #0
    2996:	220a      	movs	r2, #10
    2998:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    299c:	4843      	ldr	r0, [pc, #268]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    299e:	f009 fe8d 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    29a2:	4945      	ldr	r1, [pc, #276]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    29a4:	4841      	ldr	r0, [pc, #260]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29a6:	f7fd ff67 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29aa:	4957      	ldr	r1, [pc, #348]	; (2b08 <LEDDebug(LEDStruct&)+0xacc>)
    29ac:	483f      	ldr	r0, [pc, #252]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29ae:	f7fd ff55 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29b2:	2300      	movs	r3, #0
    29b4:	220a      	movs	r2, #10
    29b6:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    29ba:	483c      	ldr	r0, [pc, #240]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29bc:	f009 fe7e 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    29c0:	493d      	ldr	r1, [pc, #244]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    29c2:	483a      	ldr	r0, [pc, #232]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29c4:	f7fd ff58 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29c8:	4950      	ldr	r1, [pc, #320]	; (2b0c <LEDDebug(LEDStruct&)+0xad0>)
    29ca:	4838      	ldr	r0, [pc, #224]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29cc:	f7fd ff46 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29d0:	2300      	movs	r3, #0
    29d2:	220a      	movs	r2, #10
    29d4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    29d8:	4834      	ldr	r0, [pc, #208]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29da:	f009 fe6f 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    29de:	4936      	ldr	r1, [pc, #216]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    29e0:	4832      	ldr	r0, [pc, #200]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29e2:	f7fd ff49 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29e6:	494a      	ldr	r1, [pc, #296]	; (2b10 <LEDDebug(LEDStruct&)+0xad4>)
    29e8:	4830      	ldr	r0, [pc, #192]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29ea:	f7fd ff37 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29ee:	2300      	movs	r3, #0
    29f0:	220a      	movs	r2, #10
    29f2:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    29f6:	482d      	ldr	r0, [pc, #180]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    29f8:	f009 fe60 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    29fc:	492e      	ldr	r1, [pc, #184]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    29fe:	482b      	ldr	r0, [pc, #172]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a00:	f7fd ff3a 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a04:	4943      	ldr	r1, [pc, #268]	; (2b14 <LEDDebug(LEDStruct&)+0xad8>)
    2a06:	4829      	ldr	r0, [pc, #164]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a08:	f7fd ff28 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a0c:	2300      	movs	r3, #0
    2a0e:	220a      	movs	r2, #10
    2a10:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2a14:	4825      	ldr	r0, [pc, #148]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a16:	f009 fe51 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2a1a:	4927      	ldr	r1, [pc, #156]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2a1c:	4823      	ldr	r0, [pc, #140]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a1e:	f7fd ff2b 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a22:	493d      	ldr	r1, [pc, #244]	; (2b18 <LEDDebug(LEDStruct&)+0xadc>)
    2a24:	4821      	ldr	r0, [pc, #132]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a26:	f7fd ff19 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a2a:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2a2e:	e4b5      	b.n	239c <LEDDebug(LEDStruct&)+0x360>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2a30:	493a      	ldr	r1, [pc, #232]	; (2b1c <LEDDebug(LEDStruct&)+0xae0>)
    2a32:	481e      	ldr	r0, [pc, #120]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a34:	f7fd ff20 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a38:	4939      	ldr	r1, [pc, #228]	; (2b20 <LEDDebug(LEDStruct&)+0xae4>)
    2a3a:	481c      	ldr	r0, [pc, #112]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a3c:	f7fd ff0e 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a40:	2300      	movs	r3, #0
    2a42:	220a      	movs	r2, #10
    2a44:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2a48:	4818      	ldr	r0, [pc, #96]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a4a:	f009 fe37 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2a4e:	491a      	ldr	r1, [pc, #104]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2a50:	4816      	ldr	r0, [pc, #88]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a52:	f7fd ff11 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a56:	4933      	ldr	r1, [pc, #204]	; (2b24 <LEDDebug(LEDStruct&)+0xae8>)
    2a58:	4814      	ldr	r0, [pc, #80]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a5a:	f7fd feff 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a5e:	2300      	movs	r3, #0
    2a60:	220a      	movs	r2, #10
    2a62:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2a66:	4811      	ldr	r0, [pc, #68]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a68:	f009 fe28 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2a6c:	4912      	ldr	r1, [pc, #72]	; (2ab8 <LEDDebug(LEDStruct&)+0xa7c>)
    2a6e:	480f      	ldr	r0, [pc, #60]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a70:	f7fd ff02 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a74:	492c      	ldr	r1, [pc, #176]	; (2b28 <LEDDebug(LEDStruct&)+0xaec>)
    2a76:	480d      	ldr	r0, [pc, #52]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a78:	f7fd fef0 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2a7c:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2a80:	e48c      	b.n	239c <LEDDebug(LEDStruct&)+0x360>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2a82:	492a      	ldr	r1, [pc, #168]	; (2b2c <LEDDebug(LEDStruct&)+0xaf0>)
    2a84:	4809      	ldr	r0, [pc, #36]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a86:	f7fd fef7 	bl	878 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2a8a:	4929      	ldr	r1, [pc, #164]	; (2b30 <LEDDebug(LEDStruct&)+0xaf4>)
    2a8c:	4807      	ldr	r0, [pc, #28]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a8e:	f7fd fef3 	bl	878 <Print::println(char const*)>
			Serial.println("");
    2a92:	4926      	ldr	r1, [pc, #152]	; (2b2c <LEDDebug(LEDStruct&)+0xaf0>)
    2a94:	4805      	ldr	r0, [pc, #20]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2a96:	f7fd feef 	bl	878 <Print::println(char const*)>
			break;
    2a9a:	e486      	b.n	23aa <LEDDebug(LEDStruct&)+0x36e>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2a9c:	4925      	ldr	r1, [pc, #148]	; (2b34 <LEDDebug(LEDStruct&)+0xaf8>)
    2a9e:	4803      	ldr	r0, [pc, #12]	; (2aac <LEDDebug(LEDStruct&)+0xa70>)
    2aa0:	f7fd feea 	bl	878 <Print::println(char const*)>
    2aa4:	f7ff bae5 	b.w	2072 <LEDDebug(LEDStruct&)+0x36>
    2aa8:	0000ea54 	.word	0x0000ea54
    2aac:	1fff878c 	.word	0x1fff878c
    2ab0:	0000ea78 	.word	0x0000ea78
    2ab4:	0000ea8c 	.word	0x0000ea8c
    2ab8:	0000e670 	.word	0x0000e670
    2abc:	0000eaa8 	.word	0x0000eaa8
    2ac0:	0000eac0 	.word	0x0000eac0
    2ac4:	0000ead8 	.word	0x0000ead8
    2ac8:	0000eaf0 	.word	0x0000eaf0
    2acc:	0000eb0c 	.word	0x0000eb0c
    2ad0:	0000ece8 	.word	0x0000ece8
    2ad4:	0000ed0c 	.word	0x0000ed0c
    2ad8:	0000ed24 	.word	0x0000ed24
    2adc:	0000ed38 	.word	0x0000ed38
    2ae0:	0000ed50 	.word	0x0000ed50
    2ae4:	0000ed68 	.word	0x0000ed68
    2ae8:	0000ed80 	.word	0x0000ed80
    2aec:	0000e728 	.word	0x0000e728
    2af0:	0000eda4 	.word	0x0000eda4
    2af4:	0000edbc 	.word	0x0000edbc
    2af8:	0000edd4 	.word	0x0000edd4
    2afc:	0000ede8 	.word	0x0000ede8
    2b00:	0000edfc 	.word	0x0000edfc
    2b04:	0000ee20 	.word	0x0000ee20
    2b08:	0000ee38 	.word	0x0000ee38
    2b0c:	0000ee50 	.word	0x0000ee50
    2b10:	0000ee68 	.word	0x0000ee68
    2b14:	0000ee80 	.word	0x0000ee80
    2b18:	0000ee94 	.word	0x0000ee94
    2b1c:	0000eeac 	.word	0x0000eeac
    2b20:	0000eed0 	.word	0x0000eed0
    2b24:	0000eee0 	.word	0x0000eee0
    2b28:	0000eefc 	.word	0x0000eefc
    2b2c:	0000e764 	.word	0x0000e764
    2b30:	0000efc8 	.word	0x0000efc8
    2b34:	0000e614 	.word	0x0000e614
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2b38:	494c      	ldr	r1, [pc, #304]	; (2c6c <LEDDebug(LEDStruct&)+0xc30>)
    2b3a:	484d      	ldr	r0, [pc, #308]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b3c:	f7fd fe9c 	bl	878 <Print::println(char const*)>
    2b40:	f7ff ba97 	b.w	2072 <LEDDebug(LEDStruct&)+0x36>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2b44:	494b      	ldr	r1, [pc, #300]	; (2c74 <LEDDebug(LEDStruct&)+0xc38>)
    2b46:	484a      	ldr	r0, [pc, #296]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b48:	f7fd fe96 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b4c:	494a      	ldr	r1, [pc, #296]	; (2c78 <LEDDebug(LEDStruct&)+0xc3c>)
    2b4e:	4848      	ldr	r0, [pc, #288]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b50:	f7fd fe84 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b54:	2300      	movs	r3, #0
    2b56:	220a      	movs	r2, #10
    2b58:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2b5c:	4844      	ldr	r0, [pc, #272]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b5e:	f009 fdad 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2b62:	4946      	ldr	r1, [pc, #280]	; (2c7c <LEDDebug(LEDStruct&)+0xc40>)
    2b64:	4842      	ldr	r0, [pc, #264]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b66:	f7fd fe87 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b6a:	4945      	ldr	r1, [pc, #276]	; (2c80 <LEDDebug(LEDStruct&)+0xc44>)
    2b6c:	4840      	ldr	r0, [pc, #256]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b6e:	f7fd fe75 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b72:	2300      	movs	r3, #0
    2b74:	220a      	movs	r2, #10
    2b76:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2b7a:	483d      	ldr	r0, [pc, #244]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b7c:	f009 fd9e 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2b80:	493e      	ldr	r1, [pc, #248]	; (2c7c <LEDDebug(LEDStruct&)+0xc40>)
    2b82:	483b      	ldr	r0, [pc, #236]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b84:	f7fd fe78 	bl	878 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2b88:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2b8c:	b1f5      	cbz	r5, 2bcc <LEDDebug(LEDStruct&)+0xb90>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b8e:	493d      	ldr	r1, [pc, #244]	; (2c84 <LEDDebug(LEDStruct&)+0xc48>)
    2b90:	4837      	ldr	r0, [pc, #220]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b92:	f7fd fe63 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b96:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2b9a:	4835      	ldr	r0, [pc, #212]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2b9c:	f009 fdce 	bl	c73c <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2ba0:	4936      	ldr	r1, [pc, #216]	; (2c7c <LEDDebug(LEDStruct&)+0xc40>)
    2ba2:	4833      	ldr	r0, [pc, #204]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2ba4:	f7fd fe68 	bl	878 <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2ba8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2bac:	3b0f      	subs	r3, #15
    2bae:	2b01      	cmp	r3, #1
    2bb0:	f63f abfb 	bhi.w	23aa <LEDDebug(LEDStruct&)+0x36e>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb4:	4934      	ldr	r1, [pc, #208]	; (2c88 <LEDDebug(LEDStruct&)+0xc4c>)
    2bb6:	482e      	ldr	r0, [pc, #184]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bb8:	f7fd fe50 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bbc:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2bc0:	e46a      	b.n	2498 <LEDDebug(LEDStruct&)+0x45c>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2bc2:	4932      	ldr	r1, [pc, #200]	; (2c8c <LEDDebug(LEDStruct&)+0xc50>)
    2bc4:	482a      	ldr	r0, [pc, #168]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bc6:	f7fd fe57 	bl	878 <Print::println(char const*)>
    2bca:	e400      	b.n	23ce <LEDDebug(LEDStruct&)+0x392>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bcc:	4930      	ldr	r1, [pc, #192]	; (2c90 <LEDDebug(LEDStruct&)+0xc54>)
    2bce:	4828      	ldr	r0, [pc, #160]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bd0:	f7fd fe44 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bd4:	462b      	mov	r3, r5
    2bd6:	220a      	movs	r2, #10
    2bd8:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2bdc:	4824      	ldr	r0, [pc, #144]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bde:	f009 fd6d 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2be2:	4926      	ldr	r1, [pc, #152]	; (2c7c <LEDDebug(LEDStruct&)+0xc40>)
    2be4:	4822      	ldr	r0, [pc, #136]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2be6:	f7fd fe47 	bl	878 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bea:	492a      	ldr	r1, [pc, #168]	; (2c94 <LEDDebug(LEDStruct&)+0xc58>)
    2bec:	4820      	ldr	r0, [pc, #128]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bee:	f7fd fe35 	bl	85c <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bf2:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2bf6:	481e      	ldr	r0, [pc, #120]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2bf8:	462b      	mov	r3, r5
    2bfa:	220a      	movs	r2, #10
    2bfc:	f009 fd5e 	bl	c6bc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2c00:	491e      	ldr	r1, [pc, #120]	; (2c7c <LEDDebug(LEDStruct&)+0xc40>)
    2c02:	481b      	ldr	r0, [pc, #108]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c04:	f7fd fe38 	bl	878 <Print::println(char const*)>
    2c08:	e7c1      	b.n	2b8e <LEDDebug(LEDStruct&)+0xb52>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c0a:	4923      	ldr	r1, [pc, #140]	; (2c98 <LEDDebug(LEDStruct&)+0xc5c>)
    2c0c:	4818      	ldr	r0, [pc, #96]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c0e:	f7fd fe25 	bl	85c <Print::write(char const*)>
    2c12:	f7ff bb1d 	b.w	2250 <LEDDebug(LEDStruct&)+0x214>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2c16:	4921      	ldr	r1, [pc, #132]	; (2c9c <LEDDebug(LEDStruct&)+0xc60>)
    2c18:	4815      	ldr	r0, [pc, #84]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c1a:	f7fd fe2d 	bl	878 <Print::println(char const*)>
    2c1e:	e5ea      	b.n	27f6 <LEDDebug(LEDStruct&)+0x7ba>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2c20:	491f      	ldr	r1, [pc, #124]	; (2ca0 <LEDDebug(LEDStruct&)+0xc64>)
    2c22:	4813      	ldr	r0, [pc, #76]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c24:	f7fd fe28 	bl	878 <Print::println(char const*)>
    2c28:	e790      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2c2a:	491e      	ldr	r1, [pc, #120]	; (2ca4 <LEDDebug(LEDStruct&)+0xc68>)
    2c2c:	4810      	ldr	r0, [pc, #64]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c2e:	f7fd fe23 	bl	878 <Print::println(char const*)>
    2c32:	e78b      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2c34:	491c      	ldr	r1, [pc, #112]	; (2ca8 <LEDDebug(LEDStruct&)+0xc6c>)
    2c36:	480e      	ldr	r0, [pc, #56]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c38:	f7fd fe1e 	bl	878 <Print::println(char const*)>
    2c3c:	e786      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2c3e:	491b      	ldr	r1, [pc, #108]	; (2cac <LEDDebug(LEDStruct&)+0xc70>)
    2c40:	480b      	ldr	r0, [pc, #44]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c42:	f7fd fe19 	bl	878 <Print::println(char const*)>
    2c46:	e781      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				case FIRE_RANDOM:		Serial.println("===========FIRE RANDOM============"); break;
    2c48:	4919      	ldr	r1, [pc, #100]	; (2cb0 <LEDDebug(LEDStruct&)+0xc74>)
    2c4a:	4809      	ldr	r0, [pc, #36]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c4c:	f7fd fe14 	bl	878 <Print::println(char const*)>
    2c50:	e77c      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2c52:	4918      	ldr	r1, [pc, #96]	; (2cb4 <LEDDebug(LEDStruct&)+0xc78>)
    2c54:	4806      	ldr	r0, [pc, #24]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c56:	f7fd fe0f 	bl	878 <Print::println(char const*)>
    2c5a:	e777      	b.n	2b4c <LEDDebug(LEDStruct&)+0xb10>
    2c5c:	4916      	ldr	r1, [pc, #88]	; (2cb8 <LEDDebug(LEDStruct&)+0xc7c>)
    2c5e:	e5c3      	b.n	27e8 <LEDDebug(LEDStruct&)+0x7ac>
    2c60:	4916      	ldr	r1, [pc, #88]	; (2cbc <LEDDebug(LEDStruct&)+0xc80>)
    2c62:	4803      	ldr	r0, [pc, #12]	; (2c70 <LEDDebug(LEDStruct&)+0xc34>)
    2c64:	f7fd fdfa 	bl	85c <Print::write(char const*)>
    2c68:	f7ff baf2 	b.w	2250 <LEDDebug(LEDStruct&)+0x214>
    2c6c:	0000e638 	.word	0x0000e638
    2c70:	1fff878c 	.word	0x1fff878c
    2c74:	0000e8cc 	.word	0x0000e8cc
    2c78:	0000e938 	.word	0x0000e938
    2c7c:	0000e670 	.word	0x0000e670
    2c80:	0000e94c 	.word	0x0000e94c
    2c84:	0000e988 	.word	0x0000e988
    2c88:	0000e998 	.word	0x0000e998
    2c8c:	0000e7c4 	.word	0x0000e7c4
    2c90:	0000e960 	.word	0x0000e960
    2c94:	0000e974 	.word	0x0000e974
    2c98:	0000efb0 	.word	0x0000efb0
    2c9c:	0000ea9c 	.word	0x0000ea9c
    2ca0:	0000e860 	.word	0x0000e860
    2ca4:	0000e8a8 	.word	0x0000e8a8
    2ca8:	0000e884 	.word	0x0000e884
    2cac:	0000e83c 	.word	0x0000e83c
    2cb0:	0000e914 	.word	0x0000e914
    2cb4:	0000e8f0 	.word	0x0000e8f0
    2cb8:	0000ea94 	.word	0x0000ea94
    2cbc:	0000ea98 	.word	0x0000ea98

00002cc0 <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cc4:	b08d      	sub	sp, #52	; 0x34
    2cc6:	2134      	movs	r1, #52	; 0x34
    2cc8:	4605      	mov	r5, r0
    2cca:	9009      	str	r0, [sp, #36]	; 0x24
    2ccc:	4846      	ldr	r0, [pc, #280]	; (2de8 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2cce:	4c47      	ldr	r4, [pc, #284]	; (2dec <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    2cd0:	f009 fae0 	bl	c294 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2cd4:	4846      	ldr	r0, [pc, #280]	; (2df0 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2cd6:	f009 fce1 	bl	c69c <Print::println()>
    2cda:	2133      	movs	r1, #51	; 0x33
    2cdc:	4845      	ldr	r0, [pc, #276]	; (2df4 <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    2cde:	f009 fad9 	bl	c294 <usb_serial_write>
    2ce2:	4843      	ldr	r0, [pc, #268]	; (2df0 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2ce4:	f009 fcda 	bl	c69c <Print::println()>
    2ce8:	2133      	movs	r1, #51	; 0x33
    2cea:	4843      	ldr	r0, [pc, #268]	; (2df8 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    2cec:	f009 fad2 	bl	c294 <usb_serial_write>
    2cf0:	483f      	ldr	r0, [pc, #252]	; (2df0 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2cf2:	f009 fcd3 	bl	c69c <Print::println()>
    2cf6:	4841      	ldr	r0, [pc, #260]	; (2dfc <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2cf8:	4a41      	ldr	r2, [pc, #260]	; (2e00 <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    2cfa:	8803      	ldrh	r3, [r0, #0]
    2cfc:	7811      	ldrb	r1, [r2, #0]
    2cfe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2d02:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2d06:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d0a:	3319      	adds	r3, #25
    2d0c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d0e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2d12:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2d14:	fb12 f201 	smulbb	r2, r2, r1
    2d18:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d1a:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2d1c:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2d20:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2d24:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2d26:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2d2a:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2d2c:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2d2e:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2d30:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2d32:	d1f8      	bne.n	2d26 <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2d34:	f8d8 3000 	ldr.w	r3, [r8]
    2d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2d3a:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2d3c:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2d40:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    2d44:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2d48:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2d4c:	f04f 33ff 	mov.w	r3, #4294967295
    2d50:	9207      	str	r2, [sp, #28]
    2d52:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2d54:	2400      	movs	r4, #0
    2d56:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2d58:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2d5c:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d5e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2d62:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d66:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2d6a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2d6c:	b2f9      	uxtb	r1, r7
    2d6e:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2d72:	9104      	str	r1, [sp, #16]
    2d74:	b2e9      	uxtb	r1, r5
    2d76:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2d78:	fa5f f18c 	uxtb.w	r1, ip
    2d7c:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2d7e:	9908      	ldr	r1, [sp, #32]
    2d80:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2d82:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2d84:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2d88:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2d8c:	d80c      	bhi.n	2da8 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2d8e:	9906      	ldr	r1, [sp, #24]
    2d90:	458c      	cmp	ip, r1
    2d92:	dc07      	bgt.n	2da4 <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    2d94:	290f      	cmp	r1, #15
    2d96:	d005      	beq.n	2da4 <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    2d98:	3101      	adds	r1, #1
    2d9a:	b2c9      	uxtb	r1, r1
    2d9c:	428b      	cmp	r3, r1
    2d9e:	9103      	str	r1, [sp, #12]
    2da0:	bf38      	it	cc
    2da2:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2da4:	b259      	sxtb	r1, r3
    2da6:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2da8:	a90b      	add	r1, sp, #44	; 0x2c
    2daa:	9100      	str	r1, [sp, #0]
    2dac:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dae:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2db2:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2db6:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dba:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    2dbe:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    2dc2:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    2dc6:	f007 f9c1 	bl	a14c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    2dca:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2dcc:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    2dd0:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    2dd4:	46ca      	mov	sl, r9
    2dd6:	d1bf      	bne.n	2d58 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    2dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2dda:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    2dde:	f7fe fe1f 	bl	1a20 <print_palette(unsigned char)>
	}
}
    2de2:	b00d      	add	sp, #52	; 0x34
    2de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2de8:	0000f010 	.word	0x0000f010
    2dec:	0000fb8c 	.word	0x0000fb8c
    2df0:	1fff878c 	.word	0x1fff878c
    2df4:	0000f048 	.word	0x0000f048
    2df8:	0000f07c 	.word	0x0000f07c
    2dfc:	1fff8784 	.word	0x1fff8784
    2e00:	1fff8750 	.word	0x1fff8750

00002e04 <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    2e04:	4b24      	ldr	r3, [pc, #144]	; (2e98 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2e06:	4a25      	ldr	r2, [pc, #148]	; (2e9c <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    2e08:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    2e0a:	2100      	movs	r1, #0
    2e0c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    2e0e:	2b07      	cmp	r3, #7
    2e10:	d809      	bhi.n	2e26 <juggle_update(LEDStruct&)+0x22>
    2e12:	e8df f003 	tbb	[pc, r3]
    2e16:	1c13      	.short	0x1c13
    2e18:	04342e25 	.word	0x04342e25
    2e1c:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    2e1e:	4b20      	ldr	r3, [pc, #128]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e20:	881b      	ldrh	r3, [r3, #0]
    2e22:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e26:	f7ff b909 	b.w	203c <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    2e2a:	4b1d      	ldr	r3, [pc, #116]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e2c:	881b      	ldrh	r3, [r3, #0]
    2e2e:	3300      	adds	r3, #0
    2e30:	bf18      	it	ne
    2e32:	2301      	movne	r3, #1
    2e34:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    2e38:	f7ff b900 	b.w	203c <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    2e3c:	4b18      	ldr	r3, [pc, #96]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e3e:	881b      	ldrh	r3, [r3, #0]
    2e40:	3300      	adds	r3, #0
    2e42:	bf18      	it	ne
    2e44:	2301      	movne	r3, #1
    2e46:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e4a:	f7ff b8f7 	b.w	203c <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    2e4e:	4b14      	ldr	r3, [pc, #80]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e50:	881b      	ldrh	r3, [r3, #0]
    2e52:	3300      	adds	r3, #0
    2e54:	bf18      	it	ne
    2e56:	2301      	movne	r3, #1
    2e58:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e5c:	f7ff b8ee 	b.w	203c <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    2e60:	4b0f      	ldr	r3, [pc, #60]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e62:	881b      	ldrh	r3, [r3, #0]
    2e64:	3300      	adds	r3, #0
    2e66:	bf18      	it	ne
    2e68:	2301      	movne	r3, #1
    2e6a:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e6e:	f7ff b8e5 	b.w	203c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    2e72:	4b0b      	ldr	r3, [pc, #44]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e74:	881b      	ldrh	r3, [r3, #0]
    2e76:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e7a:	f7ff b8df 	b.w	203c <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    2e7e:	4b08      	ldr	r3, [pc, #32]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e80:	881b      	ldrh	r3, [r3, #0]
    2e82:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e86:	f7ff b8d9 	b.w	203c <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    2e8a:	4b05      	ldr	r3, [pc, #20]	; (2ea0 <juggle_update(LEDStruct&)+0x9c>)
    2e8c:	881b      	ldrh	r3, [r3, #0]
    2e8e:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    2e92:	f7ff b8d3 	b.w	203c <LEDDebug(LEDStruct&)>
    2e96:	bf00      	nop
    2e98:	1fff9e54 	.word	0x1fff9e54
    2e9c:	1fff9601 	.word	0x1fff9601
    2ea0:	1fff9e4c 	.word	0x1fff9e4c

00002ea4 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2ea8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    2eac:	b08b      	sub	sp, #44	; 0x2c
    2eae:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    2eb0:	2b00      	cmp	r3, #0
    2eb2:	f040 809d 	bne.w	2ff0 <juggle(LEDStruct&)+0x14c>
    2eb6:	4ed7      	ldr	r6, [pc, #860]	; (3214 <juggle(LEDStruct&)+0x370>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    2eb8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    2ebc:	8833      	ldrh	r3, [r6, #0]
    2ebe:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    2ec2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2ec6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    2eca:	3019      	adds	r0, #25
    2ecc:	b280      	uxth	r0, r0
    2ece:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    2ed2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    2ed6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2eda:	3519      	adds	r5, #25
    2edc:	b2ad      	uxth	r5, r5
    2ede:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    2ee2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2ee6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2eea:	3319      	adds	r3, #25
    2eec:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2ef4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2ef8:	3319      	adds	r3, #25
    2efa:	b29b      	uxth	r3, r3
    2efc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2f00:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f04:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2f08:	3119      	adds	r1, #25
    2f0a:	b289      	uxth	r1, r1
    2f0c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    2f10:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2f14:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f18:	3219      	adds	r2, #25
    2f1a:	b292      	uxth	r2, r2
    2f1c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    2f20:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    2f24:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    2f28:	f10e 0e19 	add.w	lr, lr, #25
    2f2c:	fa1f fe8e 	uxth.w	lr, lr
    2f30:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    2f34:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    2f38:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    2f3c:	f10c 0c19 	add.w	ip, ip, #25
    2f40:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f44:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f48:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    2f4c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f50:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f54:	b2ff      	uxtb	r7, r7
    2f56:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    2f5a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2f5e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f62:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    2f66:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    2f68:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2f6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2f6e:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f72:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f76:	ea4f 2e27 	mov.w	lr, r7, asr #8
    2f7a:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    2f7e:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f80:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2f84:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2f88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2f8c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    2f90:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    2f92:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    2f96:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2f9a:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2f9e:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2fa0:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2fa4:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    2fa8:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2fac:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2fb0:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2fb2:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    2fb6:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2fba:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    2fbe:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    2fc2:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2fc4:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    2fc6:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    2fca:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    2fce:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2fd2:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    2fd6:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    2fda:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    2fde:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    2fe2:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    2fe6:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    2fea:	2b00      	cmp	r3, #0
    2fec:	f040 81bb 	bne.w	3366 <juggle(LEDStruct&)+0x4c2>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    2ff0:	4b89      	ldr	r3, [pc, #548]	; (3218 <juggle(LEDStruct&)+0x374>)
    2ff2:	781b      	ldrb	r3, [r3, #0]
    2ff4:	2b00      	cmp	r3, #0
    2ff6:	f040 81c1 	bne.w	337c <juggle(LEDStruct&)+0x4d8>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    2ffa:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    2ffe:	b1d3      	cbz	r3, 3036 <juggle(LEDStruct&)+0x192>
    3000:	4b86      	ldr	r3, [pc, #536]	; (321c <juggle(LEDStruct&)+0x378>)
    3002:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    3006:	2200      	movs	r2, #0
    3008:	f103 0027 	add.w	r0, r3, #39	; 0x27
    300c:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    3010:	e001      	b.n	3016 <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    3012:	4283      	cmp	r3, r0
    3014:	d00f      	beq.n	3036 <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    3016:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    301a:	428a      	cmp	r2, r1
    301c:	d1f9      	bne.n	3012 <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    301e:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    3022:	4a7f      	ldr	r2, [pc, #508]	; (3220 <juggle(LEDStruct&)+0x37c>)
    3024:	fba2 2303 	umull	r2, r3, r2, r3
    3028:	08db      	lsrs	r3, r3, #3
    302a:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    302c:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    302e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3032:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3036:	2196      	movs	r1, #150	; 0x96
    3038:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    303c:	4620      	mov	r0, r4
    303e:	f007 f917 	bl	a270 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    3042:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    3046:	2900      	cmp	r1, #0
    3048:	f040 80f2 	bne.w	3230 <juggle(LEDStruct&)+0x38c>
		if (leds.juggle_phased) {
    304c:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    3050:	2b00      	cmp	r3, #0
    3052:	f000 81f2 	beq.w	343a <juggle(LEDStruct&)+0x596>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3056:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    305a:	2b00      	cmp	r3, #0
    305c:	f000 82d0 	beq.w	3600 <juggle(LEDStruct&)+0x75c>
    3060:	4870      	ldr	r0, [pc, #448]	; (3224 <juggle(LEDStruct&)+0x380>)
    3062:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3066:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 3228 <juggle(LEDStruct&)+0x384>
    306a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 322c <juggle(LEDStruct&)+0x388>
    306e:	9002      	str	r0, [sp, #8]
    3070:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3074:	468b      	mov	fp, r1
    3076:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    307a:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    307e:	9503      	str	r5, [sp, #12]
    3080:	e060      	b.n	3144 <juggle(LEDStruct&)+0x2a0>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3082:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3086:	445b      	add	r3, fp
    3088:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    308a:	f8da 1000 	ldr.w	r1, [sl]
    308e:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3090:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3092:	9905      	ldr	r1, [sp, #20]
    3094:	bf98      	it	ls
    3096:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3098:	f44f 708c 	mov.w	r0, #280	; 0x118
    309c:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    30a0:	bf98      	it	ls
    30a2:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    30a4:	fb03 f301 	mul.w	r3, r3, r1
    30a8:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    30aa:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    30ac:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    30b0:	d503      	bpl.n	30ba <juggle(LEDStruct&)+0x216>
    30b2:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    30b6:	3107      	adds	r1, #7
    30b8:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    30ba:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30bc:	9d02      	ldr	r5, [sp, #8]
    30be:	f819 6000 	ldrb.w	r6, [r9, r0]
    30c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    30c6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    30ca:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    30ce:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    30d0:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    30d2:	bf48      	it	mi
    30d4:	4249      	negmi	r1, r1
    30d6:	b20e      	sxth	r6, r1
    30d8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    30dc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    30e0:	9100      	str	r1, [sp, #0]
    30e2:	4640      	mov	r0, r8
    30e4:	4639      	mov	r1, r7
    30e6:	f007 f923 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    30ea:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    30ee:	2296      	movs	r2, #150	; 0x96
    30f0:	b29b      	uxth	r3, r3
    30f2:	fb02 f303 	mul.w	r3, r2, r3
    30f6:	0c1b      	lsrs	r3, r3, #16
    30f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    30fc:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    30fe:	5ce2      	ldrb	r2, [r4, r3]
    3100:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3104:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3108:	54e2      	strb	r2, [r4, r3]
    310a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    310e:	784a      	ldrb	r2, [r1, #1]
    3110:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3114:	704a      	strb	r2, [r1, #1]
    3116:	788b      	ldrb	r3, [r1, #2]
    3118:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    311c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3120:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3122:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3126:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    312a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    312e:	f10b 0b01 	add.w	fp, fp, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3132:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3134:	fa5f fb8b 	uxtb.w	fp, fp
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3138:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    313a:	455b      	cmp	r3, fp
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    313c:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3140:	f240 825e 	bls.w	3600 <juggle(LEDStruct&)+0x75c>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3144:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3148:	2900      	cmp	r1, #0
    314a:	d19a      	bne.n	3082 <juggle(LEDStruct&)+0x1de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    314c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3150:	445b      	add	r3, fp
    3152:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3154:	f8da 1000 	ldr.w	r1, [sl]
    3158:	9106      	str	r1, [sp, #24]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    315a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    315c:	9906      	ldr	r1, [sp, #24]
    315e:	bf98      	it	ls
    3160:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3162:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3166:	bf98      	it	ls
    3168:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    316a:	fb00 f101 	mul.w	r1, r0, r1
    316e:	fb03 f301 	mul.w	r3, r3, r1
    3172:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3174:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3176:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    317a:	d503      	bpl.n	3184 <juggle(LEDStruct&)+0x2e0>
    317c:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3180:	3107      	adds	r1, #7
    3182:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3184:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3186:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3188:	f3c1 0146 	ubfx	r1, r1, #1, #7
    318c:	f819 6000 	ldrb.w	r6, [r9, r0]
    3190:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    3194:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    3198:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    319a:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    319c:	bf48      	it	mi
    319e:	4249      	negmi	r1, r1
    31a0:	b20e      	sxth	r6, r1
    31a2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    31a6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    31aa:	9100      	str	r1, [sp, #0]
    31ac:	4640      	mov	r0, r8
    31ae:	4639      	mov	r1, r7
    31b0:	f007 f8be 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    31b4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    31b8:	b29b      	uxth	r3, r3
    31ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    31be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    31c2:	0c1b      	lsrs	r3, r3, #16
    31c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31c8:	18e1      	adds	r1, r4, r3
    31ca:	5ce2      	ldrb	r2, [r4, r3]
    31cc:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    31d0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    31d4:	54e2      	strb	r2, [r4, r3]
    31d6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    31da:	784a      	ldrb	r2, [r1, #1]
    31dc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    31e0:	704a      	strb	r2, [r1, #1]
    31e2:	788b      	ldrb	r3, [r1, #2]
    31e4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    31e8:	fa83 f352 	uqadd8	r3, r3, r2
    31ec:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    31ee:	708b      	strb	r3, [r1, #2]
    31f0:	4622      	mov	r2, r4
    31f2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31f4:	7819      	ldrb	r1, [r3, #0]
    31f6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    31fa:	7859      	ldrb	r1, [r3, #1]
    31fc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3200:	7899      	ldrb	r1, [r3, #2]
    3202:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3206:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3208:	429d      	cmp	r5, r3
    320a:	f1a2 0203 	sub.w	r2, r2, #3
    320e:	d1f1      	bne.n	31f4 <juggle(LEDStruct&)+0x350>
    3210:	9503      	str	r5, [sp, #12]
    3212:	e786      	b.n	3122 <juggle(LEDStruct&)+0x27e>
    3214:	1fff8784 	.word	0x1fff8784
    3218:	1fff9601 	.word	0x1fff9601
    321c:	1fff875b 	.word	0x1fff875b
    3220:	cccccccd 	.word	0xcccccccd
    3224:	0000f5bc 	.word	0x0000f5bc
    3228:	1fffa8ec 	.word	0x1fffa8ec
    322c:	0000fd4c 	.word	0x0000fd4c
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    3230:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    3234:	2e00      	cmp	r6, #0
    3236:	f000 80a5 	beq.w	3384 <juggle(LEDStruct&)+0x4e0>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    323a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    323e:	2b00      	cmp	r3, #0
    3240:	f000 81de 	beq.w	3600 <juggle(LEDStruct&)+0x75c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3244:	f8df 9228 	ldr.w	r9, [pc, #552]	; 3470 <juggle(LEDStruct&)+0x5cc>
    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    uint8_t  m   = slope[section];
    3248:	f8df 8228 	ldr.w	r8, [pc, #552]	; 3474 <juggle(LEDStruct&)+0x5d0>

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    324c:	4e86      	ldr	r6, [pc, #536]	; (3468 <juggle(LEDStruct&)+0x5c4>)
    324e:	2500      	movs	r5, #0
    3250:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    3254:	e065      	b.n	3322 <juggle(LEDStruct&)+0x47e>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3256:	2900      	cmp	r1, #0
    3258:	f000 820c 	beq.w	3674 <juggle(LEDStruct&)+0x7d0>
    325c:	f8d9 3000 	ldr.w	r3, [r9]
    3260:	9309      	str	r3, [sp, #36]	; 0x24
    3262:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
	return ret;
    3266:	9809      	ldr	r0, [sp, #36]	; 0x24
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3268:	f44f 718c 	mov.w	r1, #280	; 0x118
    326c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3270:	0212      	lsls	r2, r2, #8
    3272:	fb03 0315 	mls	r3, r3, r5, r0
    3276:	fb01 f202 	mul.w	r2, r1, r2
    327a:	fb03 f202 	mul.w	r2, r3, r2
    327e:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3282:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3286:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3288:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    328c:	d503      	bpl.n	3296 <juggle(LEDStruct&)+0x3f2>
    328e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3292:	3307      	adds	r3, #7
    3294:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3296:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3298:	f3c3 0346 	ubfx	r3, r3, #1, #7
    329c:	f818 a001 	ldrb.w	sl, [r8, r1]
    32a0:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
    32a4:	fb0a 1a03 	mla	sl, sl, r3, r1
    32a8:	fa1f fa8a 	uxth.w	sl, sl

    if( theta & 0x8000 ) y = -y;
    32ac:	0413      	lsls	r3, r2, #16
    32ae:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    32b2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    32b6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32ba:	9100      	str	r1, [sp, #0]
    32bc:	bf48      	it	mi
    32be:	f1ca 0a00 	rsbmi	sl, sl, #0
    32c2:	fa0f fa8a 	sxth.w	sl, sl
    32c6:	4639      	mov	r1, r7
    32c8:	a808      	add	r0, sp, #32
    32ca:	f007 f831 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    32ce:	f5aa 4300 	sub.w	r3, sl, #32768	; 0x8000
    32d2:	b29a      	uxth	r2, r3
    32d4:	2396      	movs	r3, #150	; 0x96
    32d6:	fb03 f302 	mul.w	r3, r3, r2
    32da:	0c1b      	lsrs	r3, r3, #16
    32dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    32e0:	18e1      	adds	r1, r4, r3
    32e2:	5ce2      	ldrb	r2, [r4, r3]
    32e4:	f89d 0020 	ldrb.w	r0, [sp, #32]
    32e8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    32ec:	54e2      	strb	r2, [r4, r3]
    32ee:	784a      	ldrb	r2, [r1, #1]
    32f0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    32f4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    32f8:	704a      	strb	r2, [r1, #1]
    32fa:	788b      	ldrb	r3, [r1, #2]
    32fc:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3300:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3304:	708b      	strb	r3, [r1, #2]
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3306:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    330a:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    330e:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3312:	3501      	adds	r5, #1
    3314:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3316:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3318:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    331a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    331e:	f240 816f 	bls.w	3600 <juggle(LEDStruct&)+0x75c>
				if (leds.this_dir) {
    3322:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3326:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    332a:	2a00      	cmp	r2, #0
    332c:	d193      	bne.n	3256 <juggle(LEDStruct&)+0x3b2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    332e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3332:	2900      	cmp	r1, #0
    3334:	f000 81db 	beq.w	36ee <juggle(LEDStruct&)+0x84a>
    3338:	4611      	mov	r1, r2
    333a:	fb03 f305 	mul.w	r3, r3, r5
    333e:	2295      	movs	r2, #149	; 0x95
    3340:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3344:	f7fd f8e6 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    3348:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    334c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3350:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3354:	9100      	str	r1, [sp, #0]
    3356:	4682      	mov	sl, r0
    3358:	4639      	mov	r1, r7
    335a:	a808      	add	r0, sp, #32
    335c:	f006 ffe8 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3360:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    3364:	e7bc      	b.n	32e0 <juggle(LEDStruct&)+0x43c>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3366:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    336a:	fa02 f300 	lsl.w	r3, r2, r0
    336e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3372:	4b3e      	ldr	r3, [pc, #248]	; (346c <juggle(LEDStruct&)+0x5c8>)
    3374:	781b      	ldrb	r3, [r3, #0]
    3376:	2b00      	cmp	r3, #0
    3378:	f43f ae3f 	beq.w	2ffa <juggle(LEDStruct&)+0x156>
    337c:	4620      	mov	r0, r4
    337e:	f7ff fd41 	bl	2e04 <juggle_update(LEDStruct&)>
    3382:	e63a      	b.n	2ffa <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3384:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3388:	2900      	cmp	r1, #0
    338a:	f000 8139 	beq.w	3600 <juggle(LEDStruct&)+0x75c>
    338e:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    3392:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    3396:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    339a:	e03c      	b.n	3416 <juggle(LEDStruct&)+0x572>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    339c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    33a0:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    33a4:	4431      	add	r1, r6
    33a6:	2b00      	cmp	r3, #0
    33a8:	f000 812d 	beq.w	3606 <juggle(LEDStruct&)+0x762>
    33ac:	2300      	movs	r3, #0
    33ae:	4408      	add	r0, r1
    33b0:	2295      	movs	r2, #149	; 0x95
    33b2:	4619      	mov	r1, r3
    33b4:	f7fd f86c 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    33b8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    33bc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33c0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    33c4:	9100      	str	r1, [sp, #0]
    33c6:	4681      	mov	r9, r0
    33c8:	4639      	mov	r1, r7
    33ca:	4640      	mov	r0, r8
    33cc:	f006 ffb0 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33d0:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    33d4:	18e1      	adds	r1, r4, r3
    33d6:	5ce2      	ldrb	r2, [r4, r3]
    33d8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    33dc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    33e0:	54e2      	strb	r2, [r4, r3]
    33e2:	784a      	ldrb	r2, [r1, #1]
    33e4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    33e8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    33ec:	704a      	strb	r2, [r1, #1]
    33ee:	788b      	ldrb	r3, [r1, #2]
    33f0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    33f4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    33f8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    33fa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    33fe:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3402:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3406:	3601      	adds	r6, #1
    3408:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    340a:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    340c:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    340e:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3412:	f240 80f5 	bls.w	3600 <juggle(LEDStruct&)+0x75c>
				if (leds.this_dir) {
    3416:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    341a:	2b00      	cmp	r3, #0
    341c:	d1be      	bne.n	339c <juggle(LEDStruct&)+0x4f8>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    341e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3422:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3426:	4431      	add	r1, r6
    3428:	4408      	add	r0, r1
    342a:	2a00      	cmp	r2, #0
    342c:	f000 819a 	beq.w	3764 <juggle(LEDStruct&)+0x8c0>
    3430:	4619      	mov	r1, r3
    3432:	2295      	movs	r2, #149	; 0x95
    3434:	f7fd f86e 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    3438:	e7be      	b.n	33b8 <juggle(LEDStruct&)+0x514>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    343a:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    343e:	2a00      	cmp	r2, #0
    3440:	f000 80de 	beq.w	3600 <juggle(LEDStruct&)+0x75c>
    3444:	4908      	ldr	r1, [pc, #32]	; (3468 <juggle(LEDStruct&)+0x5c4>)
    3446:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    344a:	f8df a024 	ldr.w	sl, [pc, #36]	; 3470 <juggle(LEDStruct&)+0x5cc>
    344e:	f8df 9024 	ldr.w	r9, [pc, #36]	; 3474 <juggle(LEDStruct&)+0x5d0>
    3452:	9102      	str	r1, [sp, #8]
    3454:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3458:	469b      	mov	fp, r3
    345a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
    345e:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    3462:	9503      	str	r5, [sp, #12]
    3464:	e066      	b.n	3534 <juggle(LEDStruct&)+0x690>
    3466:	bf00      	nop
    3468:	0000f5bc 	.word	0x0000f5bc
    346c:	1fff9601 	.word	0x1fff9601
    3470:	1fffa8ec 	.word	0x1fffa8ec
    3474:	0000fd4c 	.word	0x0000fd4c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3478:	f8da 3000 	ldr.w	r3, [sl]
    347c:	9307      	str	r3, [sp, #28]
	return ret;
    347e:	9b07      	ldr	r3, [sp, #28]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3480:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3484:	f44f 708c 	mov.w	r0, #280	; 0x118
    3488:	fb00 f303 	mul.w	r3, r0, r3
    348c:	0209      	lsls	r1, r1, #8
    348e:	fb03 f301 	mul.w	r3, r3, r1
    3492:	ea4f 314b 	mov.w	r1, fp, lsl #13
    3496:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    349a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    349c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    349e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    34a2:	d503      	bpl.n	34ac <juggle(LEDStruct&)+0x608>
    34a4:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    34a8:	3307      	adds	r3, #7
    34aa:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    34ac:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    34ae:	9d02      	ldr	r5, [sp, #8]
    34b0:	f819 6000 	ldrb.w	r6, [r9, r0]
    34b4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    34b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
    34bc:	fb06 0303 	mla	r3, r6, r3, r0
    34c0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    34c2:	040e      	lsls	r6, r1, #16
    34c4:	bf48      	it	mi
    34c6:	425b      	negmi	r3, r3
    34c8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    34cc:	b21e      	sxth	r6, r3
    34ce:	4640      	mov	r0, r8
    34d0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34d4:	9100      	str	r1, [sp, #0]
    34d6:	4639      	mov	r1, r7
    34d8:	f006 ff2a 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34dc:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    34e0:	2296      	movs	r2, #150	; 0x96
    34e2:	b29b      	uxth	r3, r3
    34e4:	fb02 f303 	mul.w	r3, r2, r3
    34e8:	0c1b      	lsrs	r3, r3, #16
    34ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    34ee:	18e1      	adds	r1, r4, r3
    34f0:	5ce2      	ldrb	r2, [r4, r3]
    34f2:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    34f6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34fa:	54e2      	strb	r2, [r4, r3]
    34fc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3500:	784a      	ldrb	r2, [r1, #1]
    3502:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3506:	704a      	strb	r2, [r1, #1]
    3508:	788b      	ldrb	r3, [r1, #2]
    350a:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    350e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3512:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3514:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3518:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    351c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3520:	f10b 0b01 	add.w	fp, fp, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3524:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3526:	fa5f fb8b 	uxtb.w	fp, fp
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    352a:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    352c:	4559      	cmp	r1, fp
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    352e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3532:	d965      	bls.n	3600 <juggle(LEDStruct&)+0x75c>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3534:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3538:	2b00      	cmp	r3, #0
    353a:	d19d      	bne.n	3478 <juggle(LEDStruct&)+0x5d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    353c:	f8da 3000 	ldr.w	r3, [sl]
    3540:	9308      	str	r3, [sp, #32]
	return ret;
    3542:	9b08      	ldr	r3, [sp, #32]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3544:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3548:	f44f 708c 	mov.w	r0, #280	; 0x118
    354c:	0209      	lsls	r1, r1, #8
    354e:	fb00 f303 	mul.w	r3, r0, r3
    3552:	fb03 f301 	mul.w	r3, r3, r1
    3556:	ea4f 314b 	mov.w	r1, fp, lsl #13
    355a:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    355e:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3560:	044d      	lsls	r5, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3562:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3566:	d503      	bpl.n	3570 <juggle(LEDStruct&)+0x6cc>
    3568:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    356c:	3307      	adds	r3, #7
    356e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3570:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3572:	9d02      	ldr	r5, [sp, #8]
    3574:	f819 6000 	ldrb.w	r6, [r9, r0]
    3578:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    357c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3580:	fb06 0303 	mla	r3, r6, r3, r0
    3584:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3586:	0408      	lsls	r0, r1, #16
    3588:	bf48      	it	mi
    358a:	425b      	negmi	r3, r3
    358c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3590:	b21e      	sxth	r6, r3
    3592:	4640      	mov	r0, r8
    3594:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3598:	9100      	str	r1, [sp, #0]
    359a:	4639      	mov	r1, r7
    359c:	f006 fec8 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35a0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    35a4:	b29b      	uxth	r3, r3
    35a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    35aa:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    35ae:	0c1b      	lsrs	r3, r3, #16
    35b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35b4:	18e1      	adds	r1, r4, r3
    35b6:	5ce2      	ldrb	r2, [r4, r3]
    35b8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    35bc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35c0:	54e2      	strb	r2, [r4, r3]
    35c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    35c6:	784a      	ldrb	r2, [r1, #1]
    35c8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35cc:	704a      	strb	r2, [r1, #1]
    35ce:	788b      	ldrb	r3, [r1, #2]
    35d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    35d4:	fa83 f352 	uqadd8	r3, r3, r2
    35d8:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    35da:	708b      	strb	r3, [r1, #2]
    35dc:	4622      	mov	r2, r4
    35de:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35e0:	7819      	ldrb	r1, [r3, #0]
    35e2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    35e6:	7859      	ldrb	r1, [r3, #1]
    35e8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    35ec:	7899      	ldrb	r1, [r3, #2]
    35ee:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    35f2:	3303      	adds	r3, #3
    35f4:	42ab      	cmp	r3, r5
    35f6:	f1a2 0203 	sub.w	r2, r2, #3
    35fa:	d1f1      	bne.n	35e0 <juggle(LEDStruct&)+0x73c>
    35fc:	9503      	str	r5, [sp, #12]
    35fe:	e789      	b.n	3514 <juggle(LEDStruct&)+0x670>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    3600:	b00b      	add	sp, #44	; 0x2c
    3602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3606:	4408      	add	r0, r1
    3608:	224a      	movs	r2, #74	; 0x4a
    360a:	4619      	mov	r1, r3
    360c:	f7fc ff40 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    3610:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3614:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3618:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    361c:	9100      	str	r1, [sp, #0]
    361e:	4681      	mov	r9, r0
    3620:	4639      	mov	r1, r7
    3622:	4640      	mov	r0, r8
    3624:	f006 fe84 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3628:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    362c:	18e1      	adds	r1, r4, r3
    362e:	5ce2      	ldrb	r2, [r4, r3]
    3630:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3634:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3638:	54e2      	strb	r2, [r4, r3]
    363a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    363e:	784a      	ldrb	r2, [r1, #1]
    3640:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3644:	704a      	strb	r2, [r1, #1]
    3646:	788b      	ldrb	r3, [r1, #2]
    3648:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    364c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3650:	708b      	strb	r3, [r1, #2]
    3652:	4622      	mov	r2, r4
    3654:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3656:	7819      	ldrb	r1, [r3, #0]
    3658:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    365c:	7859      	ldrb	r1, [r3, #1]
    365e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3662:	7899      	ldrb	r1, [r3, #2]
    3664:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3668:	3303      	adds	r3, #3
    366a:	42ab      	cmp	r3, r5
    366c:	f1a2 0203 	sub.w	r2, r2, #3
    3670:	d1f1      	bne.n	3656 <juggle(LEDStruct&)+0x7b2>
    3672:	e6c2      	b.n	33fa <juggle(LEDStruct&)+0x556>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3674:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    3678:	fb03 f305 	mul.w	r3, r3, r5
    367c:	224a      	movs	r2, #74	; 0x4a
    367e:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3682:	f7fc ff05 	bl	490 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.33]>
    3686:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    368a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    368e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3692:	9100      	str	r1, [sp, #0]
    3694:	4682      	mov	sl, r0
    3696:	4639      	mov	r1, r7
    3698:	a808      	add	r0, sp, #32
    369a:	f006 fe49 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    369e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    36a2:	18e1      	adds	r1, r4, r3
    36a4:	5ce2      	ldrb	r2, [r4, r3]
    36a6:	f89d 0020 	ldrb.w	r0, [sp, #32]
    36aa:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36ae:	54e2      	strb	r2, [r4, r3]
    36b0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    36b4:	784a      	ldrb	r2, [r1, #1]
    36b6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36ba:	704a      	strb	r2, [r1, #1]
    36bc:	788b      	ldrb	r3, [r1, #2]
    36be:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    36c2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36c6:	708b      	strb	r3, [r1, #2]
    36c8:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    36cc:	4623      	mov	r3, r4
    36ce:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36d0:	7819      	ldrb	r1, [r3, #0]
    36d2:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    36d6:	7859      	ldrb	r1, [r3, #1]
    36d8:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36dc:	7899      	ldrb	r1, [r3, #2]
    36de:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36e2:	3303      	adds	r3, #3
    36e4:	4283      	cmp	r3, r0
    36e6:	f1a2 0203 	sub.w	r2, r2, #3
    36ea:	d1f1      	bne.n	36d0 <juggle(LEDStruct&)+0x82c>
    36ec:	e60b      	b.n	3306 <juggle(LEDStruct&)+0x462>
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    36ee:	fb03 f305 	mul.w	r3, r3, r5
    36f2:	224a      	movs	r2, #74	; 0x4a
    36f4:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    36f8:	f7fc ff0c 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    36fc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3700:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3704:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3708:	9100      	str	r1, [sp, #0]
    370a:	4682      	mov	sl, r0
    370c:	4639      	mov	r1, r7
    370e:	a808      	add	r0, sp, #32
    3710:	f006 fe0e 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3714:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    3718:	18e1      	adds	r1, r4, r3
    371a:	5ce2      	ldrb	r2, [r4, r3]
    371c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    3720:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3724:	54e2      	strb	r2, [r4, r3]
    3726:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    372a:	784a      	ldrb	r2, [r1, #1]
    372c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3730:	704a      	strb	r2, [r1, #1]
    3732:	788b      	ldrb	r3, [r1, #2]
    3734:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    3738:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    373c:	708b      	strb	r3, [r1, #2]
    373e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3742:	4623      	mov	r3, r4
    3744:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3746:	7819      	ldrb	r1, [r3, #0]
    3748:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    374c:	7859      	ldrb	r1, [r3, #1]
    374e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3752:	7899      	ldrb	r1, [r3, #2]
    3754:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3758:	3303      	adds	r3, #3
    375a:	4283      	cmp	r3, r0
    375c:	f1a2 0203 	sub.w	r2, r2, #3
    3760:	d1f1      	bne.n	3746 <juggle(LEDStruct&)+0x8a2>
    3762:	e5d0      	b.n	3306 <juggle(LEDStruct&)+0x462>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3764:	4613      	mov	r3, r2
    3766:	4611      	mov	r1, r2
    3768:	224a      	movs	r2, #74	; 0x4a
    376a:	f7fc fed3 	bl	514 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.34]>
    376e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3772:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3776:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    377a:	9100      	str	r1, [sp, #0]
    377c:	4681      	mov	r9, r0
    377e:	4639      	mov	r1, r7
    3780:	4640      	mov	r0, r8
    3782:	f006 fdd5 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3786:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    378a:	18e1      	adds	r1, r4, r3
    378c:	5ce2      	ldrb	r2, [r4, r3]
    378e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3792:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3796:	54e2      	strb	r2, [r4, r3]
    3798:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    379c:	784a      	ldrb	r2, [r1, #1]
    379e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    37a2:	704a      	strb	r2, [r1, #1]
    37a4:	788b      	ldrb	r3, [r1, #2]
    37a6:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    37aa:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    37ae:	708b      	strb	r3, [r1, #2]
    37b0:	4622      	mov	r2, r4
    37b2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37b4:	7819      	ldrb	r1, [r3, #0]
    37b6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    37ba:	7859      	ldrb	r1, [r3, #1]
    37bc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    37c0:	7899      	ldrb	r1, [r3, #2]
    37c2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    37c6:	3303      	adds	r3, #3
    37c8:	42ab      	cmp	r3, r5
    37ca:	f1a2 0203 	sub.w	r2, r2, #3
    37ce:	d1f1      	bne.n	37b4 <juggle(LEDStruct&)+0x910>
    37d0:	e613      	b.n	33fa <juggle(LEDStruct&)+0x556>
    37d2:	bf00      	nop

000037d4 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    37d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    37d8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    37dc:	b08d      	sub	sp, #52	; 0x34
    37de:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    37e0:	2b00      	cmp	r3, #0
    37e2:	f040 809d 	bne.w	3920 <juggle_half(LEDStruct&)+0x14c>
    37e6:	4ec5      	ldr	r6, [pc, #788]	; (3afc <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    37e8:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    37ec:	8833      	ldrh	r3, [r6, #0]
    37ee:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    37f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    37f6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    37fa:	3019      	adds	r0, #25
    37fc:	b280      	uxth	r0, r0
    37fe:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3802:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3806:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    380a:	3519      	adds	r5, #25
    380c:	b2ad      	uxth	r5, r5
    380e:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3812:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3816:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    381a:	3319      	adds	r3, #25
    381c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3820:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3824:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3828:	3319      	adds	r3, #25
    382a:	b29b      	uxth	r3, r3
    382c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3830:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3834:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3838:	3119      	adds	r1, #25
    383a:	b289      	uxth	r1, r1
    383c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3840:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3844:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3848:	3219      	adds	r2, #25
    384a:	b292      	uxth	r2, r2
    384c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3850:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3854:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3858:	f10e 0e19 	add.w	lr, lr, #25
    385c:	fa1f fe8e 	uxth.w	lr, lr
    3860:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3864:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3868:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    386c:	f10c 0c19 	add.w	ip, ip, #25
    3870:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3874:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3878:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    387c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3880:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3884:	b2ff      	uxtb	r7, r7
    3886:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    388a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    388e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3892:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3896:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3898:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    389a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    389e:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    38a2:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    38a6:	ea4f 2e27 	mov.w	lr, r7, asr #8
    38aa:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    38ae:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38b0:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    38b4:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38bc:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    38c0:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    38c2:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    38c6:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38ca:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    38ce:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    38d0:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    38d4:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    38d8:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38dc:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    38e0:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    38e2:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    38e6:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    38ea:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    38ee:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    38f2:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    38f4:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    38f6:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    38fa:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    38fe:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3902:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3906:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    390a:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    390e:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3912:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3916:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    391a:	2b00      	cmp	r3, #0
    391c:	f040 8290 	bne.w	3e40 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3920:	4b77      	ldr	r3, [pc, #476]	; (3b00 <juggle_half(LEDStruct&)+0x32c>)
    3922:	781b      	ldrb	r3, [r3, #0]
    3924:	2b00      	cmp	r3, #0
    3926:	f040 8296 	bne.w	3e56 <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    392a:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    392e:	b113      	cbz	r3, 3936 <juggle_half(LEDStruct&)+0x162>
    3930:	2300      	movs	r3, #0
    3932:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3936:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    393a:	2196      	movs	r1, #150	; 0x96
    393c:	4620      	mov	r0, r4
    393e:	f006 fc97 	bl	a270 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3942:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3946:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    394a:	2f00      	cmp	r7, #0
    394c:	f040 8199 	bne.w	3c82 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3950:	2a00      	cmp	r2, #0
    3952:	f000 8350 	beq.w	3ff6 <juggle_half(LEDStruct&)+0x822>
    3956:	4b6b      	ldr	r3, [pc, #428]	; (3b04 <juggle_half(LEDStruct&)+0x330>)
    3958:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3b08 <juggle_half(LEDStruct&)+0x334>
    395c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3b0c <juggle_half(LEDStruct&)+0x338>
    3960:	9303      	str	r3, [sp, #12]
    3962:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3966:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    396a:	b2be      	uxth	r6, r7
    396c:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    396e:	9a03      	ldr	r2, [sp, #12]
    3970:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3974:	6812      	ldr	r2, [r2, #0]
    3976:	9207      	str	r2, [sp, #28]
    3978:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    397a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    397c:	9a07      	ldr	r2, [sp, #28]
    397e:	bf98      	it	ls
    3980:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3982:	f44f 718c 	mov.w	r1, #280	; 0x118
    3986:	bf98      	it	ls
    3988:	b29b      	uxthls	r3, r3
    398a:	fb01 f202 	mul.w	r2, r1, r2
    398e:	fb03 f302 	mul.w	r3, r3, r2
    3992:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3996:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    399a:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    399c:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    399e:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    39a2:	d503      	bpl.n	39ac <juggle_half(LEDStruct&)+0x1d8>
    39a4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    39a8:	3207      	adds	r2, #7
    39aa:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    39ac:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39ae:	f3c2 0146 	ubfx	r1, r2, #1, #7
    39b2:	f81b 5000 	ldrb.w	r5, [fp, r0]
    39b6:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    39ba:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    39be:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39c0:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    39c2:	bf48      	it	mi
    39c4:	4255      	negmi	r5, r2
    39c6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39ca:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    39ce:	bf54      	ite	pl
    39d0:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    39d2:	b22d      	sxthmi	r5, r5
    39d4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39d8:	9100      	str	r1, [sp, #0]
    39da:	4648      	mov	r0, r9
    39dc:	4641      	mov	r1, r8
    39de:	f006 fca7 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    39e2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    39e6:	2226      	movs	r2, #38	; 0x26
    39e8:	b29b      	uxth	r3, r3
    39ea:	fb02 f303 	mul.w	r3, r2, r3
    39ee:	0c1b      	lsrs	r3, r3, #16
    39f0:	3325      	adds	r3, #37	; 0x25
    39f2:	b29b      	uxth	r3, r3
    39f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39f8:	18e1      	adds	r1, r4, r3
    39fa:	5ce2      	ldrb	r2, [r4, r3]
    39fc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3a00:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a04:	54e2      	strb	r2, [r4, r3]
    3a06:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3a0a:	784a      	ldrb	r2, [r1, #1]
    3a0c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a10:	704a      	strb	r2, [r1, #1]
    3a12:	788b      	ldrb	r3, [r1, #2]
    3a14:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3a18:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a1c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3a1e:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3a22:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3a26:	4416      	add	r6, r2
    3a28:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3a2a:	9b03      	ldr	r3, [sp, #12]
    3a2c:	681b      	ldr	r3, [r3, #0]
    3a2e:	9306      	str	r3, [sp, #24]
    3a30:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3a32:	9a06      	ldr	r2, [sp, #24]
    3a34:	bf98      	it	ls
    3a36:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3a38:	f44f 738c 	mov.w	r3, #280	; 0x118
    3a3c:	bf98      	it	ls
    3a3e:	b2b6      	uxthls	r6, r6
    3a40:	fb03 f202 	mul.w	r2, r3, r2
    3a44:	fb06 f202 	mul.w	r2, r6, r2
    3a48:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3a4c:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a50:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3a52:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3a56:	d503      	bpl.n	3a60 <juggle_half(LEDStruct&)+0x28c>
    3a58:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3a5c:	3307      	adds	r3, #7
    3a5e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3a60:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a62:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3a66:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3a6a:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3a6e:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3a72:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3a74:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3a76:	bf48      	it	mi
    3a78:	425b      	negmi	r3, r3
    3a7a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a7e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a82:	b21d      	sxth	r5, r3
    3a84:	4648      	mov	r0, r9
    3a86:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a8a:	9100      	str	r1, [sp, #0]
    3a8c:	4641      	mov	r1, r8
    3a8e:	f006 fc4f 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a92:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3a96:	2226      	movs	r2, #38	; 0x26
    3a98:	b29b      	uxth	r3, r3
    3a9a:	fb02 f303 	mul.w	r3, r2, r3
    3a9e:	0c1b      	lsrs	r3, r3, #16
    3aa0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3aa4:	18e1      	adds	r1, r4, r3
    3aa6:	5ce2      	ldrb	r2, [r4, r3]
    3aa8:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3aac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3ab0:	54e2      	strb	r2, [r4, r3]
    3ab2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3ab6:	784a      	ldrb	r2, [r1, #1]
    3ab8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3abc:	704a      	strb	r2, [r1, #1]
    3abe:	788b      	ldrb	r3, [r1, #2]
    3ac0:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3ac4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ac8:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3aca:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3ace:	3701      	adds	r7, #1
    3ad0:	b2ff      	uxtb	r7, r7
    3ad2:	42bb      	cmp	r3, r7
    3ad4:	461a      	mov	r2, r3
    3ad6:	f63f af48 	bhi.w	396a <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3ada:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3ade:	2a00      	cmp	r2, #0
    3ae0:	f000 819a 	beq.w	3e18 <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3ae4:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3ae8:	2f00      	cmp	r7, #0
    3aea:	f040 81c1 	bne.w	3e70 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3aee:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3af2:	2b00      	cmp	r3, #0
    3af4:	f000 80c2 	beq.w	3c7c <juggle_half(LEDStruct&)+0x4a8>
    3af8:	e00a      	b.n	3b10 <juggle_half(LEDStruct&)+0x33c>
    3afa:	bf00      	nop
    3afc:	1fff8784 	.word	0x1fff8784
    3b00:	1fff9601 	.word	0x1fff9601
    3b04:	1fffa8ec 	.word	0x1fffa8ec
    3b08:	0000fd4c 	.word	0x0000fd4c
    3b0c:	0000f5bc 	.word	0x0000f5bc
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3b10:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3b14:	3301      	adds	r3, #1
    3b16:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b18:	9a03      	ldr	r2, [sp, #12]
    3b1a:	b2be      	uxth	r6, r7
    3b1c:	6812      	ldr	r2, [r2, #0]
    3b1e:	920b      	str	r2, [sp, #44]	; 0x2c
    3b20:	4433      	add	r3, r6
    3b22:	b29b      	uxth	r3, r3
    3b24:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3b28:	bf9c      	itt	ls
    3b2a:	021b      	lslls	r3, r3, #8
    3b2c:	b29b      	uxthls	r3, r3
    3b2e:	fb09 f202 	mul.w	r2, r9, r2
    3b32:	fb03 f302 	mul.w	r3, r3, r2
    3b36:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3b3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3b3e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b40:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b42:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b46:	d503      	bpl.n	3b50 <juggle_half(LEDStruct&)+0x37c>
    3b48:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3b4c:	3207      	adds	r2, #7
    3b4e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b50:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b52:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3b56:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3b5a:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3b5e:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3b62:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b64:	b2ad      	uxth	r5, r5
    3b66:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b6a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b6e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b72:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3b74:	bf48      	it	mi
    3b76:	426d      	negmi	r5, r5
    3b78:	4641      	mov	r1, r8
    3b7a:	a809      	add	r0, sp, #36	; 0x24
    3b7c:	b22d      	sxth	r5, r5
    3b7e:	f006 fbd7 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b82:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b86:	2226      	movs	r2, #38	; 0x26
    3b88:	b29b      	uxth	r3, r3
    3b8a:	fb02 f303 	mul.w	r3, r2, r3
    3b8e:	0c1b      	lsrs	r3, r3, #16
    3b90:	3370      	adds	r3, #112	; 0x70
    3b92:	b29b      	uxth	r3, r3
    3b94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b98:	18e1      	adds	r1, r4, r3
    3b9a:	5ce2      	ldrb	r2, [r4, r3]
    3b9c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3ba0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3ba4:	54e2      	strb	r2, [r4, r3]
    3ba6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3baa:	784a      	ldrb	r2, [r1, #1]
    3bac:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3bb0:	704a      	strb	r2, [r1, #1]
    3bb2:	788b      	ldrb	r3, [r1, #2]
    3bb4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3bb8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bbc:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3bbe:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3bc2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bc6:	4413      	add	r3, r2
    3bc8:	3301      	adds	r3, #1
    3bca:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bcc:	9b03      	ldr	r3, [sp, #12]
    3bce:	681b      	ldr	r3, [r3, #0]
    3bd0:	930a      	str	r3, [sp, #40]	; 0x28
    3bd2:	b2b6      	uxth	r6, r6
    3bd4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3bd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bd8:	bf9c      	itt	ls
    3bda:	0236      	lslls	r6, r6, #8
    3bdc:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3bde:	fb09 f202 	mul.w	r2, r9, r2
    3be2:	fb06 f202 	mul.w	r2, r6, r2
    3be6:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3bea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bee:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bf0:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bf4:	d503      	bpl.n	3bfe <juggle_half(LEDStruct&)+0x42a>
    3bf6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3bfa:	3307      	adds	r3, #7
    3bfc:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3bfe:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c00:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3c04:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3c08:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3c0c:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3c10:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c12:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3c14:	bf48      	it	mi
    3c16:	425b      	negmi	r3, r3
    3c18:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c1c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c20:	b21d      	sxth	r5, r3
    3c22:	a809      	add	r0, sp, #36	; 0x24
    3c24:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c28:	9100      	str	r1, [sp, #0]
    3c2a:	4641      	mov	r1, r8
    3c2c:	f006 fb80 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c30:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c34:	b29b      	uxth	r3, r3
    3c36:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3c3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c3e:	0c1b      	lsrs	r3, r3, #16
    3c40:	334b      	adds	r3, #75	; 0x4b
    3c42:	b29b      	uxth	r3, r3
    3c44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c48:	18e1      	adds	r1, r4, r3
    3c4a:	5ce2      	ldrb	r2, [r4, r3]
    3c4c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3c50:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c54:	54e2      	strb	r2, [r4, r3]
    3c56:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3c5a:	784a      	ldrb	r2, [r1, #1]
    3c5c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c60:	704a      	strb	r2, [r1, #1]
    3c62:	788b      	ldrb	r3, [r1, #2]
    3c64:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3c68:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c6c:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c6e:	3701      	adds	r7, #1
    3c70:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3c74:	b2ff      	uxtb	r7, r7
    3c76:	42bb      	cmp	r3, r7
    3c78:	f63f af4a 	bhi.w	3b10 <juggle_half(LEDStruct&)+0x33c>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3c7c:	b00d      	add	sp, #52	; 0x34
    3c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c82:	2a00      	cmp	r2, #0
    3c84:	f000 81b7 	beq.w	3ff6 <juggle_half(LEDStruct&)+0x822>
    3c88:	4b75      	ldr	r3, [pc, #468]	; (3e60 <juggle_half(LEDStruct&)+0x68c>)
    3c8a:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 3e68 <juggle_half(LEDStruct&)+0x694>
    3c8e:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 3e6c <juggle_half(LEDStruct&)+0x698>
    3c92:	9303      	str	r3, [sp, #12]
    3c94:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3c98:	2700      	movs	r7, #0
    3c9a:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c9e:	b2be      	uxth	r6, r7
    3ca0:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ca2:	9a03      	ldr	r2, [sp, #12]
    3ca4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3ca8:	6812      	ldr	r2, [r2, #0]
    3caa:	9205      	str	r2, [sp, #20]
    3cac:	440b      	add	r3, r1
    3cae:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3cb0:	9a05      	ldr	r2, [sp, #20]
    3cb2:	bf98      	it	ls
    3cb4:	021b      	lslls	r3, r3, #8
    3cb6:	f44f 718c 	mov.w	r1, #280	; 0x118
    3cba:	bf98      	it	ls
    3cbc:	b29b      	uxthls	r3, r3
    3cbe:	fb01 f202 	mul.w	r2, r1, r2
    3cc2:	fb03 f302 	mul.w	r3, r3, r2
    3cc6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cce:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cd0:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cd4:	d503      	bpl.n	3cde <juggle_half(LEDStruct&)+0x50a>
    3cd6:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3cda:	3207      	adds	r2, #7
    3cdc:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3cde:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ce0:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3ce4:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3ce8:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3cec:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3cf0:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3cf2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3cf4:	bf48      	it	mi
    3cf6:	4255      	negmi	r5, r2
    3cf8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3cfc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d00:	bf54      	ite	pl
    3d02:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3d04:	b22d      	sxthmi	r5, r5
    3d06:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d0a:	9100      	str	r1, [sp, #0]
    3d0c:	4648      	mov	r0, r9
    3d0e:	4641      	mov	r1, r8
    3d10:	f006 fb0e 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d14:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d18:	2226      	movs	r2, #38	; 0x26
    3d1a:	b29b      	uxth	r3, r3
    3d1c:	fb02 f303 	mul.w	r3, r2, r3
    3d20:	0c1b      	lsrs	r3, r3, #16
    3d22:	3325      	adds	r3, #37	; 0x25
    3d24:	b29b      	uxth	r3, r3
    3d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d2a:	18e1      	adds	r1, r4, r3
    3d2c:	5ce2      	ldrb	r2, [r4, r3]
    3d2e:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3d32:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d36:	54e2      	strb	r2, [r4, r3]
    3d38:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3d3c:	784a      	ldrb	r2, [r1, #1]
    3d3e:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d42:	704a      	strb	r2, [r1, #1]
    3d44:	788b      	ldrb	r3, [r1, #2]
    3d46:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3d4a:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d4e:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d50:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d54:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d58:	4416      	add	r6, r2
    3d5a:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d5c:	9b03      	ldr	r3, [sp, #12]
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	9304      	str	r3, [sp, #16]
    3d62:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d64:	9b04      	ldr	r3, [sp, #16]
    3d66:	bf98      	it	ls
    3d68:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d6a:	f44f 728c 	mov.w	r2, #280	; 0x118
    3d6e:	bf98      	it	ls
    3d70:	b2b6      	uxthls	r6, r6
    3d72:	fb02 f303 	mul.w	r3, r2, r3
    3d76:	fb06 f303 	mul.w	r3, r6, r3
    3d7a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3d7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3d82:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d84:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d86:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d8a:	d503      	bpl.n	3d94 <juggle_half(LEDStruct&)+0x5c0>
    3d8c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3d90:	3207      	adds	r2, #7
    3d92:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d94:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d96:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3d9a:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d9e:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3da2:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3da6:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3da8:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3daa:	bf48      	it	mi
    3dac:	4252      	negmi	r2, r2
    3dae:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3db2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3db6:	b215      	sxth	r5, r2
    3db8:	4648      	mov	r0, r9
    3dba:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3dbe:	9100      	str	r1, [sp, #0]
    3dc0:	4641      	mov	r1, r8
    3dc2:	f006 fab5 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3dc6:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3dca:	2226      	movs	r2, #38	; 0x26
    3dcc:	b29b      	uxth	r3, r3
    3dce:	fb02 f303 	mul.w	r3, r2, r3
    3dd2:	0c1b      	lsrs	r3, r3, #16
    3dd4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3dd8:	18e1      	adds	r1, r4, r3
    3dda:	5ce2      	ldrb	r2, [r4, r3]
    3ddc:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3de0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3de4:	54e2      	strb	r2, [r4, r3]
    3de6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3dea:	784a      	ldrb	r2, [r1, #1]
    3dec:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3df0:	704a      	strb	r2, [r1, #1]
    3df2:	788b      	ldrb	r3, [r1, #2]
    3df4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3df8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3dfc:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3dfe:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e02:	3701      	adds	r7, #1
    3e04:	b2ff      	uxtb	r7, r7
    3e06:	42bb      	cmp	r3, r7
    3e08:	461a      	mov	r2, r3
    3e0a:	f63f af48 	bhi.w	3c9e <juggle_half(LEDStruct&)+0x4ca>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3e0e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3e12:	2a00      	cmp	r2, #0
    3e14:	f47f ae66 	bne.w	3ae4 <juggle_half(LEDStruct&)+0x310>
    3e18:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e1c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e1e:	7822      	ldrb	r2, [r4, #0]
    3e20:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3e24:	7862      	ldrb	r2, [r4, #1]
    3e26:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3e2a:	78a2      	ldrb	r2, [r4, #2]
    3e2c:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3e30:	3403      	adds	r4, #3
    3e32:	42a1      	cmp	r1, r4
    3e34:	f1a3 0303 	sub.w	r3, r3, #3
    3e38:	d1f1      	bne.n	3e1e <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3e3a:	b00d      	add	sp, #52	; 0x34
    3e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3e40:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3e44:	fa02 f300 	lsl.w	r3, r2, r0
    3e48:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3e4c:	4b05      	ldr	r3, [pc, #20]	; (3e64 <juggle_half(LEDStruct&)+0x690>)
    3e4e:	781b      	ldrb	r3, [r3, #0]
    3e50:	2b00      	cmp	r3, #0
    3e52:	f43f ad6a 	beq.w	392a <juggle_half(LEDStruct&)+0x156>
    3e56:	4620      	mov	r0, r4
    3e58:	f7fe ffd4 	bl	2e04 <juggle_update(LEDStruct&)>
    3e5c:	e565      	b.n	392a <juggle_half(LEDStruct&)+0x156>
    3e5e:	bf00      	nop
    3e60:	1fffa8ec 	.word	0x1fffa8ec
    3e64:	1fff9601 	.word	0x1fff9601
    3e68:	0000fd4c 	.word	0x0000fd4c
    3e6c:	0000f5bc 	.word	0x0000f5bc
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e70:	2b00      	cmp	r3, #0
    3e72:	f43f af03 	beq.w	3c7c <juggle_half(LEDStruct&)+0x4a8>
    3e76:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e78:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e7c:	3301      	adds	r3, #1
    3e7e:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e80:	9a03      	ldr	r2, [sp, #12]
    3e82:	b2be      	uxth	r6, r7
    3e84:	6812      	ldr	r2, [r2, #0]
    3e86:	9209      	str	r2, [sp, #36]	; 0x24
    3e88:	4433      	add	r3, r6
    3e8a:	b29b      	uxth	r3, r3
    3e8c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3e90:	bf98      	it	ls
    3e92:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3e94:	f44f 718c 	mov.w	r1, #280	; 0x118
    3e98:	bf98      	it	ls
    3e9a:	b29b      	uxthls	r3, r3
    3e9c:	fb01 f202 	mul.w	r2, r1, r2
    3ea0:	fb03 f302 	mul.w	r3, r3, r2
    3ea4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3ea8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3eac:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3eae:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3eb2:	d503      	bpl.n	3ebc <juggle_half(LEDStruct&)+0x6e8>
    3eb4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3eb8:	3207      	adds	r2, #7
    3eba:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ebc:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ebe:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3ec2:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3ec6:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3eca:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3ece:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ed0:	b2ad      	uxth	r5, r5
    3ed2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3ed6:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3eda:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3ede:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3ee0:	bf48      	it	mi
    3ee2:	426d      	negmi	r5, r5
    3ee4:	4641      	mov	r1, r8
    3ee6:	4648      	mov	r0, r9
    3ee8:	b22d      	sxth	r5, r5
    3eea:	f006 fa21 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3eee:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3ef2:	2226      	movs	r2, #38	; 0x26
    3ef4:	b29b      	uxth	r3, r3
    3ef6:	fb02 f303 	mul.w	r3, r2, r3
    3efa:	0c1b      	lsrs	r3, r3, #16
    3efc:	3370      	adds	r3, #112	; 0x70
    3efe:	b29b      	uxth	r3, r3
    3f00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f04:	18e1      	adds	r1, r4, r3
    3f06:	5ce2      	ldrb	r2, [r4, r3]
    3f08:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3f0c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f10:	54e2      	strb	r2, [r4, r3]
    3f12:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f16:	784a      	ldrb	r2, [r1, #1]
    3f18:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f1c:	704a      	strb	r2, [r1, #1]
    3f1e:	788b      	ldrb	r3, [r1, #2]
    3f20:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f24:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f28:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3f2a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3f2e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f32:	4413      	add	r3, r2
    3f34:	3301      	adds	r3, #1
    3f36:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f38:	9b03      	ldr	r3, [sp, #12]
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	9308      	str	r3, [sp, #32]
    3f3e:	b2b6      	uxth	r6, r6
    3f40:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3f42:	9b08      	ldr	r3, [sp, #32]
    3f44:	bf98      	it	ls
    3f46:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3f48:	f44f 728c 	mov.w	r2, #280	; 0x118
    3f4c:	bf98      	it	ls
    3f4e:	b2b6      	uxthls	r6, r6
    3f50:	fb02 f303 	mul.w	r3, r2, r3
    3f54:	fb06 f303 	mul.w	r3, r6, r3
    3f58:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f5c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f60:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f62:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f64:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f68:	d503      	bpl.n	3f72 <juggle_half(LEDStruct&)+0x79e>
    3f6a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3f6e:	3207      	adds	r2, #7
    3f70:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f72:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f74:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3f78:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3f7c:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3f80:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3f84:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f86:	b2ad      	uxth	r5, r5
    3f88:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f8c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f90:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f94:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3f96:	bf48      	it	mi
    3f98:	426d      	negmi	r5, r5
    3f9a:	4641      	mov	r1, r8
    3f9c:	4648      	mov	r0, r9
    3f9e:	b22d      	sxth	r5, r5
    3fa0:	f006 f9c6 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3fa4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3fa8:	b29b      	uxth	r3, r3
    3faa:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3fae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3fb2:	0c1b      	lsrs	r3, r3, #16
    3fb4:	334b      	adds	r3, #75	; 0x4b
    3fb6:	b29b      	uxth	r3, r3
    3fb8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3fbc:	18e1      	adds	r1, r4, r3
    3fbe:	5ce2      	ldrb	r2, [r4, r3]
    3fc0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3fc4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3fc8:	54e2      	strb	r2, [r4, r3]
    3fca:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3fce:	784a      	ldrb	r2, [r1, #1]
    3fd0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3fd4:	704a      	strb	r2, [r1, #1]
    3fd6:	788b      	ldrb	r3, [r1, #2]
    3fd8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3fdc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3fe0:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3fe2:	3701      	adds	r7, #1
    3fe4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3fe8:	b2ff      	uxtb	r7, r7
    3fea:	42bb      	cmp	r3, r7
    3fec:	f63f af44 	bhi.w	3e78 <juggle_half(LEDStruct&)+0x6a4>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3ff0:	b00d      	add	sp, #52	; 0x34
    3ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3ff6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3ffa:	2b00      	cmp	r3, #0
    3ffc:	f43f af0c 	beq.w	3e18 <juggle_half(LEDStruct&)+0x644>
    4000:	e63c      	b.n	3c7c <juggle_half(LEDStruct&)+0x4a8>
    4002:	bf00      	nop

00004004 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4004:	4b17      	ldr	r3, [pc, #92]	; (4064 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    4006:	4a18      	ldr	r2, [pc, #96]	; (4068 <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    4008:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    400a:	2100      	movs	r1, #0
    400c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    400e:	2b03      	cmp	r3, #3
    4010:	d80a      	bhi.n	4028 <rainbow_update(LEDStruct&)+0x24>
    4012:	e8df f003 	tbb	[pc, r3]
    4016:	0217      	.short	0x0217
    4018:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    401a:	4b14      	ldr	r3, [pc, #80]	; (406c <rainbow_update(LEDStruct&)+0x68>)
    401c:	881b      	ldrh	r3, [r3, #0]
    401e:	3300      	adds	r3, #0
    4020:	bf18      	it	ne
    4022:	2301      	movne	r3, #1
    4024:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    4028:	f7fe b808 	b.w	203c <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    402c:	4b0f      	ldr	r3, [pc, #60]	; (406c <rainbow_update(LEDStruct&)+0x68>)
    402e:	881b      	ldrh	r3, [r3, #0]
    4030:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		default:	break;
	}
	LEDDebug(leds);
    4034:	f7fe b802 	b.w	203c <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    4038:	4b0c      	ldr	r3, [pc, #48]	; (406c <rainbow_update(LEDStruct&)+0x68>)
    403a:	881b      	ldrh	r3, [r3, #0]
    403c:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    4040:	f7fd bffc 	b.w	203c <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    4044:	4b09      	ldr	r3, [pc, #36]	; (406c <rainbow_update(LEDStruct&)+0x68>)
    4046:	881b      	ldrh	r3, [r3, #0]
    4048:	2b00      	cmp	r3, #0
    404a:	bf14      	ite	ne
    404c:	2301      	movne	r3, #1
    404e:	2300      	moveq	r3, #0
    4050:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4054:	bf14      	ite	ne
    4056:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    4058:	234b      	moveq	r3, #75	; 0x4b
    405a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    405e:	f7fd bfed 	b.w	203c <LEDDebug(LEDStruct&)>
    4062:	bf00      	nop
    4064:	1fff9e54 	.word	0x1fff9e54
    4068:	1fff9601 	.word	0x1fff9601
    406c:	1fff9e4c 	.word	0x1fff9e4c

00004070 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4070:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4078:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    407a:	2b00      	cmp	r3, #0
    407c:	d14a      	bne.n	4114 <rainbow_march(LEDStruct&)+0xa4>
    407e:	4860      	ldr	r0, [pc, #384]	; (4200 <rainbow_march(LEDStruct&)+0x190>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4080:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4084:	8803      	ldrh	r3, [r0, #0]
    4086:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    408a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    408e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4092:	3319      	adds	r3, #25
    4094:	b29b      	uxth	r3, r3
    4096:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    409a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    409e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    40a2:	3219      	adds	r2, #25
    40a4:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40a6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40aa:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40ac:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40b0:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40b4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40b8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40bc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    40c0:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40c2:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40c4:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40c6:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    40c8:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40ca:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40ce:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    40d0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    40d4:	2706      	movs	r7, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    40d6:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    40d8:	42b3      	cmp	r3, r6

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    40da:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    40de:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    40e2:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    40e6:	f884 627b 	strb.w	r6, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    40ea:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    40ee:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    40f2:	f000 8083 	beq.w	41fc <rainbow_march(LEDStruct&)+0x18c>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    40f6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    40fa:	b2d2      	uxtb	r2, r2
    40fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4100:	1212      	asrs	r2, r2, #8
    4102:	4432      	add	r2, r6
    4104:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    4106:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    410a:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    410e:	4620      	mov	r0, r4
    4110:	f7fd ff94 	bl	203c <LEDDebug(LEDStruct&)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4114:	4b3b      	ldr	r3, [pc, #236]	; (4204 <rainbow_march(LEDStruct&)+0x194>)
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	2b00      	cmp	r3, #0
    411a:	d16b      	bne.n	41f4 <rainbow_march(LEDStruct&)+0x184>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    411c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4120:	bb43      	cbnz	r3, 4174 <rainbow_march(LEDStruct&)+0x104>
    4122:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    4126:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    412a:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    412c:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4130:	b2d2      	uxtb	r2, r2
    4132:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4136:	bb4b      	cbnz	r3, 418c <rainbow_march(LEDStruct&)+0x11c>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4138:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    413c:	2b00      	cmp	r3, #0
    413e:	d151      	bne.n	41e4 <rainbow_march(LEDStruct&)+0x174>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4140:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4144:	214b      	movs	r1, #75	; 0x4b
    4146:	4620      	mov	r0, r4
    4148:	f005 ffe0 	bl	a10c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    414c:	4620      	mov	r0, r4
    414e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4152:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4154:	7802      	ldrb	r2, [r0, #0]
    4156:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    415a:	7842      	ldrb	r2, [r0, #1]
    415c:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4160:	7882      	ldrb	r2, [r0, #2]
    4162:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4166:	3003      	adds	r0, #3
    4168:	4288      	cmp	r0, r1
    416a:	f1a3 0303 	sub.w	r3, r3, #3
    416e:	d1f1      	bne.n	4154 <rainbow_march(LEDStruct&)+0xe4>
    4170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4174:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    4178:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    417c:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    417e:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4182:	b2d2      	uxtb	r2, r2
    4184:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4188:	2b00      	cmp	r3, #0
    418a:	d0d5      	beq.n	4138 <rainbow_march(LEDStruct&)+0xc8>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    418c:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4190:	2125      	movs	r1, #37	; 0x25
    4192:	4620      	mov	r0, r4
    4194:	f005 ffba 	bl	a10c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4198:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    419c:	4623      	mov	r3, r4
    419e:	4621      	mov	r1, r4
    41a0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    41a2:	7810      	ldrb	r0, [r2, #0]
    41a4:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    41a8:	7850      	ldrb	r0, [r2, #1]
    41aa:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    41ae:	7890      	ldrb	r0, [r2, #2]
    41b0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    41b4:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    41b6:	42aa      	cmp	r2, r5
    41b8:	f1a1 0103 	sub.w	r1, r1, #3
    41bc:	d1f1      	bne.n	41a2 <rainbow_march(LEDStruct&)+0x132>
    41be:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    41c2:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    41c4:	7802      	ldrb	r2, [r0, #0]
    41c6:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    41ca:	7842      	ldrb	r2, [r0, #1]
    41cc:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    41d0:	7882      	ldrb	r2, [r0, #2]
    41d2:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    41d6:	3003      	adds	r0, #3
    41d8:	4288      	cmp	r0, r1
    41da:	f1a3 0303 	sub.w	r3, r3, #3
    41de:	d1f1      	bne.n	41c4 <rainbow_march(LEDStruct&)+0x154>
    41e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    41e4:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    41e8:	4620      	mov	r0, r4
    41ea:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    41ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    41f0:	f005 bf8c 	b.w	a10c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    41f4:	4620      	mov	r0, r4
    41f6:	f7ff ff05 	bl	4004 <rainbow_update(LEDStruct&)>
    41fa:	e78f      	b.n	411c <rainbow_march(LEDStruct&)+0xac>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    41fc:	461a      	mov	r2, r3
    41fe:	e782      	b.n	4106 <rainbow_march(LEDStruct&)+0x96>
    4200:	1fff8784 	.word	0x1fff8784
    4204:	1fff9601 	.word	0x1fff9601

00004208 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4208:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    420a:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    420e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    4212:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4216:	250a      	movs	r5, #10
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    4218:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    421a:	3c0f      	subs	r4, #15
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    421c:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4220:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    4222:	f04f 050f 	mov.w	r5, #15
    4226:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    422a:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    422e:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4232:	d93d      	bls.n	42b0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    4234:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4236:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4238:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    423c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4240:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4244:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4248:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    424c:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4250:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    4254:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4258:	4c1f      	ldr	r4, [pc, #124]	; (42d8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    425a:	8823      	ldrh	r3, [r4, #0]
    425c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4260:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4264:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4268:	3319      	adds	r3, #25
    426a:	b29b      	uxth	r3, r3
    426c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4270:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4274:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4278:	3219      	adds	r2, #25
    427a:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    427c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4280:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4284:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4286:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4288:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    428c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4290:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4292:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4294:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4298:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    429c:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    42a0:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    42a4:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    42a8:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    42aa:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    42ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    42b0:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    42b4:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    42b8:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    42bc:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    42c0:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    42c4:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    42c8:	b112      	cbz	r2, 42d0 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    42ca:	2225      	movs	r2, #37	; 0x25
    42cc:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    42d0:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    42d4:	e7c0      	b.n	4258 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    42d6:	bf00      	nop
    42d8:	1fff8784 	.word	0x1fff8784

000042dc <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    42dc:	4b19      	ldr	r3, [pc, #100]	; (4344 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    42de:	4a1a      	ldr	r2, [pc, #104]	; (4348 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    42e0:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    42e2:	2100      	movs	r1, #0
    42e4:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    42e6:	2b05      	cmp	r3, #5
    42e8:	d808      	bhi.n	42fc <fire_update(LEDStruct&)+0x20>
    42ea:	e8df f003 	tbb	[pc, r3]
    42ee:	150f      	.short	0x150f
    42f0:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    42f4:	4b15      	ldr	r3, [pc, #84]	; (434c <fire_update(LEDStruct&)+0x70>)
    42f6:	881b      	ldrh	r3, [r3, #0]
    42f8:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    42fc:	f7fd be9e 	b.w	203c <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4300:	4b12      	ldr	r3, [pc, #72]	; (434c <fire_update(LEDStruct&)+0x70>)
    4302:	881b      	ldrh	r3, [r3, #0]
    4304:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    4308:	f7fd be98 	b.w	203c <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    430c:	4b0f      	ldr	r3, [pc, #60]	; (434c <fire_update(LEDStruct&)+0x70>)
    430e:	881b      	ldrh	r3, [r3, #0]
    4310:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4314:	f7fd be92 	b.w	203c <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    4318:	4b0c      	ldr	r3, [pc, #48]	; (434c <fire_update(LEDStruct&)+0x70>)
    431a:	881b      	ldrh	r3, [r3, #0]
    431c:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4320:	f7fd be8c 	b.w	203c <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    4324:	4b09      	ldr	r3, [pc, #36]	; (434c <fire_update(LEDStruct&)+0x70>)
    4326:	881b      	ldrh	r3, [r3, #0]
    4328:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    432c:	f7fd be86 	b.w	203c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4330:	4b06      	ldr	r3, [pc, #24]	; (434c <fire_update(LEDStruct&)+0x70>)
    4332:	881b      	ldrh	r3, [r3, #0]
    4334:	3300      	adds	r3, #0
    4336:	bf18      	it	ne
    4338:	2301      	movne	r3, #1
    433a:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    433e:	f7fd be7d 	b.w	203c <LEDDebug(LEDStruct&)>
    4342:	bf00      	nop
    4344:	1fff9e54 	.word	0x1fff9e54
    4348:	1fff9601 	.word	0x1fff9601
    434c:	1fff9e4c 	.word	0x1fff9e4c

00004350 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    4350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4354:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4358:	4dd0      	ldr	r5, [pc, #832]	; (469c <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    435a:	b086      	sub	sp, #24
    435c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    435e:	2b00      	cmp	r3, #0
    4360:	f000 8229 	beq.w	47b6 <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    4364:	4bce      	ldr	r3, [pc, #824]	; (46a0 <fire(LEDStruct&)+0x350>)
    4366:	781b      	ldrb	r3, [r3, #0]
    4368:	2b00      	cmp	r3, #0
    436a:	f040 8220 	bne.w	47ae <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    436e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4372:	2b00      	cmp	r3, #0
    4374:	f000 82d1 	beq.w	491a <fire(LEDStruct&)+0x5ca>
    4378:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    437c:	882a      	ldrh	r2, [r5, #0]
    437e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4382:	004f      	lsls	r7, r1, #1
    4384:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    4388:	fb97 f7f3 	sdiv	r7, r7, r3
    438c:	3702      	adds	r7, #2
    438e:	b2ff      	uxtb	r7, r7
    4390:	44a6      	add	lr, r4
    4392:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4396:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    439a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    439e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    43a2:	3219      	adds	r2, #25
    43a4:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    43a6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    43aa:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    43ae:	b2c9      	uxtb	r1, r1
    43b0:	fb11 f107 	smulbb	r1, r1, r7
    43b4:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    43b8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    43bc:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    43be:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    43c0:	d1e9      	bne.n	4396 <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    43c2:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    43c6:	802a      	strh	r2, [r5, #0]
    43c8:	2e00      	cmp	r6, #0
    43ca:	f000 80f5 	beq.w	45b8 <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    43ce:	f1a3 0e03 	sub.w	lr, r3, #3
    43d2:	f1be 0f01 	cmp.w	lr, #1
    43d6:	f04f 0c01 	mov.w	ip, #1
    43da:	dd1a      	ble.n	4412 <fire(LEDStruct&)+0xc2>
    43dc:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    43e0:	f203 277e 	addw	r7, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    43e4:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 46a4 <fire(LEDStruct&)+0x354>
    43e8:	4420      	add	r0, r4
    43ea:	4427      	add	r7, r4
    43ec:	f504 7820 	add.w	r8, r4, #640	; 0x280
    43f0:	7801      	ldrb	r1, [r0, #0]
    43f2:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    43f6:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    43fa:	fb89 a601 	smull	sl, r6, r9, r1
    43fe:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4402:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4404:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4408:	d1f2      	bne.n	43f0 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    440a:	f1bc 0f00 	cmp.w	ip, #0
    440e:	f000 8102 	beq.w	4616 <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4412:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4416:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    441a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    441e:	3219      	adds	r2, #25
    4420:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    4422:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4426:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    442a:	802a      	strh	r2, [r5, #0]
    442c:	b2c9      	uxtb	r1, r1
    442e:	428e      	cmp	r6, r1
    4430:	489a      	ldr	r0, [pc, #616]	; (469c <fire(LEDStruct&)+0x34c>)
    4432:	d926      	bls.n	4482 <fire(LEDStruct&)+0x132>
    4434:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4438:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    443c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4440:	3219      	adds	r2, #25
    4442:	b292      	uxth	r2, r2
    4444:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4448:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    444c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4450:	3619      	adds	r6, #25
    4452:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4454:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    4458:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    445c:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    445e:	b2d2      	uxtb	r2, r2
    4460:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    4464:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4468:	eb04 2222 	add.w	r2, r4, r2, asr #8
    446c:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    4470:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4472:	8006      	strh	r6, [r0, #0]
    4474:	3960      	subs	r1, #96	; 0x60
    4476:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    447a:	fa80 f051 	uqadd8	r0, r0, r1
    447e:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4482:	f1bc 0f00 	cmp.w	ip, #0
    4486:	d112      	bne.n	44ae <fire(LEDStruct&)+0x15e>
    4488:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    448a:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    448e:	4983      	ldr	r1, [pc, #524]	; (469c <fire(LEDStruct&)+0x34c>)
    4490:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4494:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4498:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    449c:	3219      	adds	r2, #25
    449e:	b292      	uxth	r2, r2
    44a0:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    44a4:	b2c0      	uxtb	r0, r0
    44a6:	4286      	cmp	r6, r0
    44a8:	802a      	strh	r2, [r5, #0]
    44aa:	f200 80cd 	bhi.w	4648 <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    44ae:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    44b2:	2a00      	cmp	r2, #0
    44b4:	d15f      	bne.n	4576 <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    44b6:	2b00      	cmp	r3, #0
    44b8:	f000 8226 	beq.w	4908 <fire(LEDStruct&)+0x5b8>
    44bc:	f204 277f 	addw	r7, r4, #639	; 0x27f
    44c0:	4690      	mov	r8, r2
    44c2:	46b9      	mov	r9, r7
    44c4:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    44c6:	3b01      	subs	r3, #1
    44c8:	ebc8 0503 	rsb	r5, r8, r3
    44cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    44d0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    44d4:	4630      	mov	r0, r6
    44d6:	f005 ff09 	bl	a2ec <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    44da:	f89d 3014 	ldrb.w	r3, [sp, #20]
    44de:	5563      	strb	r3, [r4, r5]
    44e0:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    44e2:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    44e6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    44ea:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    44ec:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    44ee:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    44f2:	f108 0801 	add.w	r8, r8, #1
    44f6:	4543      	cmp	r3, r8
    44f8:	dce5      	bgt.n	44c6 <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    44fa:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    44fe:	b30a      	cbz	r2, 4544 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    4500:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4504:	2a00      	cmp	r2, #0
    4506:	f040 81bf 	bne.w	4888 <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    450a:	4690      	mov	r8, r2
    450c:	2b00      	cmp	r3, #0
    450e:	f000 81fe 	beq.w	490e <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    4512:	eb08 0503 	add.w	r5, r8, r3
    4516:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    451a:	4630      	mov	r0, r6
    451c:	f005 fee6 	bl	a2ec <HeatColor(unsigned char)>
    4520:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4524:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4528:	54e2      	strb	r2, [r4, r3]
    452a:	4423      	add	r3, r4
        g = rhs.g;
    452c:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    4530:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4534:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    4536:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4538:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    453c:	f108 0801 	add.w	r8, r8, #1
    4540:	4543      	cmp	r3, r8
    4542:	dce6      	bgt.n	4512 <fire(LEDStruct&)+0x1c2>
    4544:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4548:	2a00      	cmp	r2, #0
    454a:	f000 80ad 	beq.w	46a8 <fire(LEDStruct&)+0x358>
    454e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4552:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4554:	781a      	ldrb	r2, [r3, #0]
    4556:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    455a:	785a      	ldrb	r2, [r3, #1]
    455c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4560:	789a      	ldrb	r2, [r3, #2]
    4562:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4566:	3303      	adds	r3, #3
    4568:	4299      	cmp	r1, r3
    456a:	f1a4 0403 	sub.w	r4, r4, #3
    456e:	d1f1      	bne.n	4554 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4570:	b006      	add	sp, #24
    4572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4576:	2b00      	cmp	r3, #0
    4578:	f000 80ea 	beq.w	4750 <fire(LEDStruct&)+0x400>
    457c:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4580:	46b9      	mov	r9, r7
    4582:	4625      	mov	r5, r4
    4584:	f04f 0800 	mov.w	r8, #0
    4588:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    458a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    458e:	4630      	mov	r0, r6
    4590:	f005 feac 	bl	a2ec <HeatColor(unsigned char)>
    4594:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4598:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    459c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    45a0:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    45a2:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    45a4:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    45a6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    45aa:	f108 0801 	add.w	r8, r8, #1
    45ae:	4543      	cmp	r3, r8
    45b0:	f105 0503 	add.w	r5, r5, #3
    45b4:	dce9      	bgt.n	458a <fire(LEDStruct&)+0x23a>
    45b6:	e7a0      	b.n	44fa <fire(LEDStruct&)+0x1aa>
    45b8:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    45bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    45c0:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    45c4:	fb9e fef3 	sdiv	lr, lr, r3
    45c8:	f10e 0e02 	add.w	lr, lr, #2
    45cc:	fa5f fe8e 	uxtb.w	lr, lr
    45d0:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    45d4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    45d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    45dc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45e0:	3219      	adds	r2, #25
    45e2:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45e4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    45e8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    45ec:	b2c9      	uxtb	r1, r1
    45ee:	fb11 f10e 	smulbb	r1, r1, lr
    45f2:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    45f6:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    45f8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    45fc:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    45fe:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4600:	dbe8      	blt.n	45d4 <fire(LEDStruct&)+0x284>
    4602:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4604:	f1a3 0e03 	sub.w	lr, r3, #3
    4608:	f1be 0f01 	cmp.w	lr, #1
    460c:	f04f 0c00 	mov.w	ip, #0
    4610:	f73f aee4 	bgt.w	43dc <fire(LEDStruct&)+0x8c>
    4614:	e6fd      	b.n	4412 <fire(LEDStruct&)+0xc2>
    4616:	f203 26c7 	addw	r6, r3, #711	; 0x2c7
    461a:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    461e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 46a4 <fire(LEDStruct&)+0x354>
    4622:	4426      	add	r6, r4
    4624:	4427      	add	r7, r4
    4626:	7831      	ldrb	r1, [r6, #0]
    4628:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    462c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4630:	fb88 9001 	smull	r9, r0, r8, r1
    4634:	f10e 3eff 	add.w	lr, lr, #4294967295
    4638:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    463c:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4640:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4644:	d1ef      	bne.n	4626 <fire(LEDStruct&)+0x2d6>
    4646:	e6e4      	b.n	4412 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4648:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    464c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4650:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4654:	3219      	adds	r2, #25
    4656:	b292      	uxth	r2, r2
    4658:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    465c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4660:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4664:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4666:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    466a:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    466c:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    466e:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4672:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4676:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4678:	eb04 2222 	add.w	r2, r4, r2, asr #8
    467c:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4680:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4684:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4688:	800d      	strh	r5, [r1, #0]
    468a:	1201      	asrs	r1, r0, #8
    468c:	3960      	subs	r1, #96	; 0x60
    468e:	4630      	mov	r0, r6
    4690:	fa80 f051 	uqadd8	r0, r0, r1
    4694:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
    4698:	e709      	b.n	44ae <fire(LEDStruct&)+0x15e>
    469a:	bf00      	nop
    469c:	1fff8784 	.word	0x1fff8784
    46a0:	1fff9601 	.word	0x1fff9601
    46a4:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    46a8:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    46ac:	2a00      	cmp	r2, #0
    46ae:	d15a      	bne.n	4766 <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46b0:	2b00      	cmp	r3, #0
    46b2:	f43f af5d 	beq.w	4570 <fire(LEDStruct&)+0x220>
    46b6:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    46ba:	46b9      	mov	r9, r7
    46bc:	f04f 0800 	mov.w	r8, #0
    46c0:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    46c2:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    46c6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    46ca:	354b      	adds	r5, #75	; 0x4b
    46cc:	4445      	add	r5, r8
    46ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    46d2:	4630      	mov	r0, r6
    46d4:	f005 fe0a 	bl	a2ec <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    46dc:	5563      	strb	r3, [r4, r5]
    46de:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    46e0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    46e4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    46e8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    46ea:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46ec:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    46f0:	f108 0801 	add.w	r8, r8, #1
    46f4:	4543      	cmp	r3, r8
    46f6:	dce4      	bgt.n	46c2 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    46f8:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    46fc:	2a00      	cmp	r2, #0
    46fe:	f43f af37 	beq.w	4570 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    4702:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4706:	2a00      	cmp	r2, #0
    4708:	f000 80dd 	beq.w	48c6 <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    470c:	2b00      	cmp	r3, #0
    470e:	f43f af2f 	beq.w	4570 <fire(LEDStruct&)+0x220>
    4712:	4625      	mov	r5, r4
    4714:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    4718:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    471c:	4630      	mov	r0, r6
    471e:	f005 fde5 	bl	a2ec <HeatColor(unsigned char)>
    4722:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4726:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    472a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    472e:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    4732:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    4736:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    473a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    473e:	f108 0801 	add.w	r8, r8, #1
    4742:	4543      	cmp	r3, r8
    4744:	f105 0503 	add.w	r5, r5, #3
    4748:	dce6      	bgt.n	4718 <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    474a:	b006      	add	sp, #24
    474c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4750:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4754:	2b00      	cmp	r3, #0
    4756:	f040 80da 	bne.w	490e <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    475a:	f1bc 0f00 	cmp.w	ip, #0
    475e:	f47f aef6 	bne.w	454e <fire(LEDStruct&)+0x1fe>
    4762:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4766:	2b00      	cmp	r3, #0
    4768:	f43f af02 	beq.w	4570 <fire(LEDStruct&)+0x220>
    476c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4770:	46b9      	mov	r9, r7
    4772:	4625      	mov	r5, r4
    4774:	f04f 0800 	mov.w	r8, #0
    4778:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    477a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    477e:	4630      	mov	r0, r6
    4780:	f005 fdb4 	bl	a2ec <HeatColor(unsigned char)>
    4784:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4788:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    478c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4790:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4794:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    4798:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    479c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    47a0:	f108 0801 	add.w	r8, r8, #1
    47a4:	4543      	cmp	r3, r8
    47a6:	f1a5 0503 	sub.w	r5, r5, #3
    47aa:	dce6      	bgt.n	477a <fire(LEDStruct&)+0x42a>
    47ac:	e7a4      	b.n	46f8 <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    47ae:	4620      	mov	r0, r4
    47b0:	f7ff fd94 	bl	42dc <fire_update(LEDStruct&)>
    47b4:	e5db      	b.n	436e <fire(LEDStruct&)+0x1e>
    47b6:	882b      	ldrh	r3, [r5, #0]
    47b8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    47bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    47c0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    47c4:	3119      	adds	r1, #25
    47c6:	b289      	uxth	r1, r1
    47c8:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    47cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    47d0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    47d4:	3219      	adds	r2, #25
    47d6:	b292      	uxth	r2, r2
    47d8:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    47dc:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    47e0:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    47e4:	f10e 0e19 	add.w	lr, lr, #25
    47e8:	fa1f fe8e 	uxth.w	lr, lr
    47ec:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    47f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    47f4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    47f8:	3619      	adds	r6, #25
    47fa:	b2b6      	uxth	r6, r6
    47fc:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4800:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4804:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4808:	3319      	adds	r3, #25
    480a:	b29b      	uxth	r3, r3
    480c:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4810:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4814:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4818:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    481c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4820:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4824:	b2f6      	uxtb	r6, r6
    4826:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    482a:	3719      	adds	r7, #25
    482c:	b2db      	uxtb	r3, r3
    482e:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4832:	b2bf      	uxth	r7, r7
    4834:	11b6      	asrs	r6, r6, #6
    4836:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    483a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    483e:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4842:	119b      	asrs	r3, r3, #6
    4844:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4848:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    484c:	333c      	adds	r3, #60	; 0x3c
    484e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4852:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4856:	fa5f f883 	uxtb.w	r8, r3
    485a:	fa5f fc8c 	uxtb.w	ip, ip
    485e:	3601      	adds	r6, #1
    4860:	f10e 0314 	add.w	r3, lr, #20
    4864:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4868:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    486c:	f8cd c000 	str.w	ip, [sp]
    4870:	f8cd 8004 	str.w	r8, [sp, #4]
    4874:	9602      	str	r6, [sp, #8]
    4876:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    487a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    487e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4880:	802f      	strh	r7, [r5, #0]
    4882:	f7ff fcc1 	bl	4208 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4886:	e56d      	b.n	4364 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4888:	2b00      	cmp	r3, #0
    488a:	d040      	beq.n	490e <fire(LEDStruct&)+0x5be>
    488c:	4625      	mov	r5, r4
    488e:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4892:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4896:	4630      	mov	r0, r6
    4898:	f005 fd28 	bl	a2ec <HeatColor(unsigned char)>
    489c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48a0:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    48a4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48a8:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    48ac:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    48b0:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    48b4:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    48b8:	f108 0801 	add.w	r8, r8, #1
    48bc:	4543      	cmp	r3, r8
    48be:	f1a5 0503 	sub.w	r5, r5, #3
    48c2:	dce6      	bgt.n	4892 <fire(LEDStruct&)+0x542>
    48c4:	e63e      	b.n	4544 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    48c6:	4690      	mov	r8, r2
    48c8:	2b00      	cmp	r3, #0
    48ca:	f43f ae51 	beq.w	4570 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    48ce:	334b      	adds	r3, #75	; 0x4b
    48d0:	ebc8 0503 	rsb	r5, r8, r3
    48d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    48d8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    48dc:	4630      	mov	r0, r6
    48de:	f005 fd05 	bl	a2ec <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    48e6:	5563      	strb	r3, [r4, r5]
    48e8:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    48ea:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    48ee:	f89d 2015 	ldrb.w	r2, [sp, #21]
    48f2:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    48f4:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    48f6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    48fa:	f108 0801 	add.w	r8, r8, #1
    48fe:	4543      	cmp	r3, r8
    4900:	dce5      	bgt.n	48ce <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4902:	b006      	add	sp, #24
    4904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4908:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    490c:	b163      	cbz	r3, 4928 <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    490e:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4912:	2b00      	cmp	r3, #0
    4914:	f47f ae1b 	bne.w	454e <fire(LEDStruct&)+0x1fe>
    4918:	e62a      	b.n	4570 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    491a:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    491e:	b10a      	cbz	r2, 4924 <fire(LEDStruct&)+0x5d4>
    4920:	882a      	ldrh	r2, [r5, #0]
    4922:	e554      	b.n	43ce <fire(LEDStruct&)+0x7e>
    4924:	882a      	ldrh	r2, [r5, #0]
    4926:	e66d      	b.n	4604 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4928:	f1bc 0f00 	cmp.w	ip, #0
    492c:	f47f ae0f 	bne.w	454e <fire(LEDStruct&)+0x1fe>
    4930:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4934:	e6bc      	b.n	46b0 <fire(LEDStruct&)+0x360>
    4936:	bf00      	nop

00004938 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    4938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    493c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4940:	4dd0      	ldr	r5, [pc, #832]	; (4c84 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4942:	b087      	sub	sp, #28
    4944:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4946:	2b00      	cmp	r3, #0
    4948:	f000 81da 	beq.w	4d00 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    494c:	4bce      	ldr	r3, [pc, #824]	; (4c88 <torch(LEDStruct&)+0x350>)
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	2b00      	cmp	r3, #0
    4952:	f040 8242 	bne.w	4dda <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4956:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    495a:	4663      	mov	r3, ip
    495c:	f1bc 0f00 	cmp.w	ip, #0
    4960:	f000 823f 	beq.w	4de2 <torch(LEDStruct&)+0x4aa>
    4964:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4968:	882a      	ldrh	r2, [r5, #0]
    496a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    496e:	004f      	lsls	r7, r1, #1
    4970:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4974:	fb97 f7fc 	sdiv	r7, r7, ip
    4978:	3702      	adds	r7, #2
    497a:	b2ff      	uxtb	r7, r7
    497c:	44a6      	add	lr, r4
    497e:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4982:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4986:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    498a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    498e:	3219      	adds	r2, #25
    4990:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4992:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4996:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    499a:	b2c9      	uxtb	r1, r1
    499c:	fb11 f107 	smulbb	r1, r1, r7
    49a0:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    49a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    49a8:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    49aa:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    49ac:	d1e9      	bne.n	4982 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    49ae:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    49b2:	802a      	strh	r2, [r5, #0]
    49b4:	2e00      	cmp	r6, #0
    49b6:	f000 816b 	beq.w	4c90 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    49ba:	f1ac 0703 	sub.w	r7, ip, #3
    49be:	2f01      	cmp	r7, #1
    49c0:	f04f 0901 	mov.w	r9, #1
    49c4:	dd1a      	ble.n	49fc <torch(LEDStruct&)+0xc4>
    49c6:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    49ca:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    49ce:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 4c8c <torch(LEDStruct&)+0x354>
    49d2:	4420      	add	r0, r4
    49d4:	4426      	add	r6, r4
    49d6:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    49da:	7801      	ldrb	r1, [r0, #0]
    49dc:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    49e0:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    49e4:	fb88 ba01 	smull	fp, sl, r8, r1
    49e8:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    49ec:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    49ee:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    49f2:	d1f2      	bne.n	49da <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    49f4:	f1b9 0f00 	cmp.w	r9, #0
    49f8:	f000 812c 	beq.w	4c54 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49fc:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4a00:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4a04:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a08:	3219      	adds	r2, #25
    4a0a:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4a0c:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4a10:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4a14:	802a      	strh	r2, [r5, #0]
    4a16:	b2c0      	uxtb	r0, r0
    4a18:	4286      	cmp	r6, r0
    4a1a:	499a      	ldr	r1, [pc, #616]	; (4c84 <torch(LEDStruct&)+0x34c>)
    4a1c:	d928      	bls.n	4a70 <torch(LEDStruct&)+0x138>
    4a1e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4a22:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4a26:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a2a:	3219      	adds	r2, #25
    4a2c:	b292      	uxth	r2, r2
    4a2e:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4a32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4a36:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4a3a:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a3c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a40:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4a42:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a44:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4a48:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4a4c:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4a4e:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4a52:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a56:	800e      	strh	r6, [r1, #0]
    4a58:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4a5c:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4a60:	1200      	asrs	r0, r0, #8
    4a62:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4a66:	4630      	mov	r0, r6
    4a68:	fa80 f051 	uqadd8	r0, r0, r1
    4a6c:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4a70:	f1b9 0f00 	cmp.w	r9, #0
    4a74:	d112      	bne.n	4a9c <torch(LEDStruct&)+0x164>
    4a76:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4a78:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4a7c:	4981      	ldr	r1, [pc, #516]	; (4c84 <torch(LEDStruct&)+0x34c>)
    4a7e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4a82:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4a86:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4a8a:	3219      	adds	r2, #25
    4a8c:	b292      	uxth	r2, r2
    4a8e:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4a92:	b2c0      	uxtb	r0, r0
    4a94:	4286      	cmp	r6, r0
    4a96:	802a      	strh	r2, [r5, #0]
    4a98:	f200 80af 	bhi.w	4bfa <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4a9c:	f1bc 0f00 	cmp.w	ip, #0
    4aa0:	f000 81a4 	beq.w	4dec <torch(LEDStruct&)+0x4b4>
    4aa4:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4aa8:	2600      	movs	r6, #0
    4aaa:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4aae:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    4ab2:	199d      	adds	r5, r3, r6
    4ab4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4ab8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4abc:	4648      	mov	r0, r9
    4abe:	f005 fc15 	bl	a2ec <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ac2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4ac6:	5563      	strb	r3, [r4, r5]
    4ac8:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4aca:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4ace:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4ad2:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4ad4:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4ad6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4ada:	3601      	adds	r6, #1
    4adc:	42b3      	cmp	r3, r6
    4ade:	dce6      	bgt.n	4aae <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4ae0:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4ae4:	2e00      	cmp	r6, #0
    4ae6:	d175      	bne.n	4bd4 <torch(LEDStruct&)+0x29c>
    4ae8:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4aec:	2b00      	cmp	r3, #0
    4aee:	f000 8183 	beq.w	4df8 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4af2:	334a      	adds	r3, #74	; 0x4a
    4af4:	1b9d      	subs	r5, r3, r6
    4af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4afa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4afe:	4648      	mov	r0, r9
    4b00:	f005 fbf4 	bl	a2ec <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4b08:	5563      	strb	r3, [r4, r5]
    4b0a:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4b0c:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4b10:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4b14:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4b16:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4b18:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4b1c:	3601      	adds	r6, #1
    4b1e:	42b3      	cmp	r3, r6
    4b20:	dce7      	bgt.n	4af2 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4b22:	2b4b      	cmp	r3, #75	; 0x4b
    4b24:	d047      	beq.n	4bb6 <torch(LEDStruct&)+0x27e>
    4b26:	f10d 0914 	add.w	r9, sp, #20
    4b2a:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    4b2e:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4b30:	4626      	mov	r6, r4
    4b32:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4b34:	f04f 0a01 	mov.w	sl, #1
    4b38:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4b3c:	f8cd a000 	str.w	sl, [sp]
    4b40:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4b44:	fb98 f3f3 	sdiv	r3, r8, r3
    4b48:	441a      	add	r2, r3
    4b4a:	b2d2      	uxtb	r2, r2
    4b4c:	23ff      	movs	r3, #255	; 0xff
    4b4e:	4659      	mov	r1, fp
    4b50:	4648      	mov	r0, r9
    4b52:	f005 fbed 	bl	a330 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b56:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4b5a:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4b5e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b62:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4b64:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4b66:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    