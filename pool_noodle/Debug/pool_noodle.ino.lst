
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 9d b8 00 00 55 b8 00 00     ... ........U...
      10:	55 b8 00 00 55 b8 00 00 55 b8 00 00 55 b8 00 00     U...U...U...U...
      20:	55 b8 00 00 55 b8 00 00 55 b8 00 00 9d b8 00 00     U...U...U.......
      30:	9d b8 00 00 55 b8 00 00 c9 cc 00 00 cd cd 00 00     ....U...........
      40:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      50:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      60:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      70:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      80:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      90:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      a0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      b0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      c0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      d0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      e0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
      f0:	9d b8 00 00 25 d1 00 00 9d b8 00 00 51 d2 00 00     ....%.......Q...
     100:	9d b8 00 00 7d d3 00 00 9d b8 00 00 9d b8 00 00     ....}...........
     110:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     120:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     130:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     140:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     150:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     160:	9d b8 00 00 e5 bc 00 00 9d b8 00 00 9d b8 00 00     ................
     170:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     180:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     190:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     1a0:	9d b8 00 00 9d b8 00 00 9d b8 00 00 9d b8 00 00     ................
     1b0:	9d b8 00 00 9d b8 00 00 9d b8 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00b fb68 	bl	b8a4 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b fbbc 	bl	ba50 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00b fb2d 	bl	b940 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00b fb1e 	bl	b940 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00e f820 	bl	e34c <__libc_init_array>

	startup_late_hook();
     30c:	f00b fad0 	bl	b8b0 <startup_late_hook>
	main();
     310:	f00c fd64 	bl	cddc <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	00011718 	.word	0x00011718
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fffabbc 	.word	0x1fffabbc
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3d79de 	.word	0x5e3d79de
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	0001171c 	.word	0x0001171c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	0001171c 	.word	0x0001171c
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.18]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4b4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b6:	4c1d      	ldr	r4, [pc, #116]	; (52c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x78>)
     4b8:	b083      	sub	sp, #12
     4ba:	6824      	ldr	r4, [r4, #0]
     4bc:	9401      	str	r4, [sp, #4]
	return ret;
     4be:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     4c0:	28ff      	cmp	r0, #255	; 0xff
     4c2:	bf98      	it	ls
     4c4:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4c6:	f44f 748c 	mov.w	r4, #280	; 0x118
     4ca:	eba5 0303 	sub.w	r3, r5, r3
     4ce:	fb04 f303 	mul.w	r3, r4, r3
     4d2:	bf98      	it	ls
     4d4:	b280      	uxthls	r0, r0
     4d6:	fb00 f003 	mul.w	r0, r0, r3
     4da:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e2:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e8:	d503      	bpl.n	4f2 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x3e>
     4ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ee:	3307      	adds	r3, #7
     4f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4f4:	4e0e      	ldr	r6, [pc, #56]	; (530 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f6:	4c0f      	ldr	r4, [pc, #60]	; (534 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4f8:	5d76      	ldrb	r6, [r6, r5]
     4fa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4fe:	f3c3 0546 	ubfx	r5, r3, #1, #7
     502:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     506:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     508:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     50a:	bf4a      	itet	mi
     50c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     50e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     510:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     512:	1a52      	subs	r2, r2, r1
     514:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     518:	b292      	uxth	r2, r2
     51a:	b2a3      	uxth	r3, r4
     51c:	fb02 3303 	mla	r3, r2, r3, r3
     520:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     524:	b280      	uxth	r0, r0
     526:	b003      	add	sp, #12
     528:	bc70      	pop	{r4, r5, r6}
     52a:	4770      	bx	lr
     52c:	1fffa8f8 	.word	0x1fffa8f8
     530:	00010518 	.word	0x00010518
     534:	0000fd88 	.word	0x0000fd88

00000538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1e      	ldr	r4, [pc, #120]	; (5b4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x7c>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     566:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     568:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     56a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56e:	d503      	bpl.n	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x40>
     570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     574:	3307      	adds	r3, #7
     576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     578:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     57a:	4e0f      	ldr	r6, [pc, #60]	; (5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57c:	4c0f      	ldr	r4, [pc, #60]	; (5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57e:	5d76      	ldrb	r6, [r6, r5]
     580:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     584:	f3c3 0546 	ubfx	r5, r3, #1, #7
     588:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58c:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     590:	bf4a      	itet	mi
     592:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     594:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     596:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     598:	1a52      	subs	r2, r2, r1
     59a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59e:	b292      	uxth	r2, r2
     5a0:	b2a3      	uxth	r3, r4
     5a2:	fb02 3303 	mla	r3, r2, r3, r3
     5a6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5aa:	b280      	uxth	r0, r0
     5ac:	b003      	add	sp, #12
     5ae:	bc70      	pop	{r4, r5, r6}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1fffa8f8 	.word	0x1fffa8f8
     5b8:	00010518 	.word	0x00010518
     5bc:	0000fd88 	.word	0x0000fd88

000005c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     5c0:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     5c2:	2101      	movs	r1, #1
     5c4:	4604      	mov	r4, r0
     5c6:	200e      	movs	r0, #14
     5c8:	f00b f9cc 	bl	b964 <pinMode>
     5cc:	2007      	movs	r0, #7
     5ce:	2101      	movs	r1, #1
     5d0:	f00b f9c8 	bl	b964 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     5d4:	69a0      	ldr	r0, [r4, #24]
     5d6:	b158      	cbz	r0, 5f0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     5d8:	6803      	ldr	r3, [r0, #0]
     5da:	4a07      	ldr	r2, [pc, #28]	; (5f8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     5dc:	685b      	ldr	r3, [r3, #4]
     5de:	4293      	cmp	r3, r2
     5e0:	d107      	bne.n	5f2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     5e2:	6842      	ldr	r2, [r0, #4]
     5e4:	7b01      	ldrb	r1, [r0, #12]
     5e6:	7813      	ldrb	r3, [r2, #0]
     5e8:	ea23 0301 	bic.w	r3, r3, r1
     5ec:	7013      	strb	r3, [r2, #0]
     5ee:	bd10      	pop	{r4, pc}
     5f0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     5f6:	4718      	bx	r3
     5f8:	00000481 	.word	0x00000481

000005fc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     600:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     602:	6805      	ldr	r5, [r0, #0]
     604:	f88d 3004 	strb.w	r3, [sp, #4]
     608:	f88d 3005 	strb.w	r3, [sp, #5]
     60c:	f88d 3006 	strb.w	r3, [sp, #6]
     610:	682e      	ldr	r6, [r5, #0]
     612:	4a37      	ldr	r2, [pc, #220]	; (6f0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     614:	f88d 3008 	strb.w	r3, [sp, #8]
     618:	4296      	cmp	r6, r2
     61a:	f88d 3009 	strb.w	r3, [sp, #9]
     61e:	f88d 300a 	strb.w	r3, [sp, #10]
     622:	d15f      	bne.n	6e4 <CLEDController::clearLeds(int)+0xe8>
     624:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     626:	9104      	str	r1, [sp, #16]
     628:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     62a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     62c:	a801      	add	r0, sp, #4
     62e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     630:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     634:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     638:	f88d 3020 	strb.w	r3, [sp, #32]
     63c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     63e:	d015      	beq.n	66c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     640:	f88d 301d 	strb.w	r3, [sp, #29]
     644:	f88d 301c 	strb.w	r3, [sp, #28]
     648:	f88d 301b 	strb.w	r3, [sp, #27]
     64c:	f88d 301a 	strb.w	r3, [sp, #26]
     650:	f88d 3019 	strb.w	r3, [sp, #25]
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     658:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     65a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     65c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     660:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     662:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     664:	a903      	add	r1, sp, #12
     666:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     668:	b00b      	add	sp, #44	; 0x2c
     66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     66c:	4a21      	ldr	r2, [pc, #132]	; (6f4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     66e:	7813      	ldrb	r3, [r2, #0]
     670:	3301      	adds	r3, #1
     672:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     676:	f013 0f01 	tst.w	r3, #1
     67a:	bf14      	ite	ne
     67c:	2180      	movne	r1, #128	; 0x80
     67e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     680:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     682:	079a      	lsls	r2, r3, #30
     684:	bf44      	itt	mi
     686:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     68a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     68c:	075b      	lsls	r3, r3, #29
     68e:	bf48      	it	mi
     690:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     694:	3110      	adds	r1, #16
     696:	2200      	movs	r2, #0
     698:	b2c9      	uxtb	r1, r1
     69a:	f10d 031b 	add.w	r3, sp, #27
     69e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6a2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6a6:	b1aa      	cbz	r2, 6d4 <CLEDController::clearLeds(int)+0xd8>
     6a8:	fb9e f2f2 	sdiv	r2, lr, r2
     6ac:	b2d2      	uxtb	r2, r2
     6ae:	1c50      	adds	r0, r2, #1
     6b0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     6b2:	fb00 1501 	mla	r5, r0, r1, r1
     6b6:	122d      	asrs	r5, r5, #8
     6b8:	7018      	strb	r0, [r3, #0]
     6ba:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6bc:	b105      	cbz	r5, 6c0 <CLEDController::clearLeds(int)+0xc4>
     6be:	3e01      	subs	r6, #1
     6c0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6c4:	b100      	cbz	r0, 6c8 <CLEDController::clearLeds(int)+0xcc>
     6c6:	701a      	strb	r2, [r3, #0]
     6c8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6ca:	429f      	cmp	r7, r3
     6cc:	d008      	beq.n	6e0 <CLEDController::clearLeds(int)+0xe4>
     6ce:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d0:	2a00      	cmp	r2, #0
     6d2:	d1e9      	bne.n	6a8 <CLEDController::clearLeds(int)+0xac>
     6d4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6d6:	f803 2c03 	strb.w	r2, [r3, #-3]
     6da:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6dc:	429f      	cmp	r7, r3
     6de:	d1f6      	bne.n	6ce <CLEDController::clearLeds(int)+0xd2>
     6e0:	6825      	ldr	r5, [r4, #0]
     6e2:	e7b9      	b.n	658 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     6e4:	460a      	mov	r2, r1
     6e6:	ab02      	add	r3, sp, #8
     6e8:	a901      	add	r1, sp, #4
     6ea:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6ec:	b00b      	add	sp, #44	; 0x2c
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f0:	000006f9 	.word	0x000006f9
     6f4:	1fff8c88 	.word	0x1fff8c88

000006f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6fc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6fe:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     700:	789b      	ldrb	r3, [r3, #2]
     702:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     704:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     706:	9101      	str	r1, [sp, #4]
     708:	9202      	str	r2, [sp, #8]
     70a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     70c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     710:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     714:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     718:	d016      	beq.n	748 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71a:	2300      	movs	r3, #0
     71c:	f88d 3015 	strb.w	r3, [sp, #21]
     720:	f88d 3014 	strb.w	r3, [sp, #20]
     724:	f88d 3013 	strb.w	r3, [sp, #19]
     728:	f88d 3012 	strb.w	r3, [sp, #18]
     72c:	f88d 3011 	strb.w	r3, [sp, #17]
     730:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     734:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     736:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     738:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     73a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     73e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     740:	a901      	add	r1, sp, #4
     742:	4790      	blx	r2
  }
     744:	b009      	add	sp, #36	; 0x24
     746:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     748:	4a1b      	ldr	r2, [pc, #108]	; (7b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74a:	7813      	ldrb	r3, [r2, #0]
     74c:	3301      	adds	r3, #1
     74e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     752:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     756:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     758:	bf14      	ite	ne
     75a:	2280      	movne	r2, #128	; 0x80
     75c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     75e:	0799      	lsls	r1, r3, #30
     760:	bf44      	itt	mi
     762:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     766:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     768:	075b      	lsls	r3, r3, #29
     76a:	bf48      	it	mi
     76c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     770:	3210      	adds	r2, #16
     772:	b2d2      	uxtb	r2, r2
     774:	f10d 0313 	add.w	r3, sp, #19
     778:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     77c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     780:	b1ac      	cbz	r4, 7ae <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     782:	fb9e f4f4 	sdiv	r4, lr, r4
     786:	b2e4      	uxtb	r4, r4
     788:	1c61      	adds	r1, r4, #1
     78a:	b2c9      	uxtb	r1, r1
     78c:	fb01 2502 	mla	r5, r1, r2, r2
     790:	122d      	asrs	r5, r5, #8
     792:	7019      	strb	r1, [r3, #0]
     794:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     796:	b105      	cbz	r5, 79a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     798:	3e01      	subs	r6, #1
     79a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     79e:	b101      	cbz	r1, 7a2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7a0:	701c      	strb	r4, [r3, #0]
     7a2:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a4:	42bb      	cmp	r3, r7
     7a6:	d0c5      	beq.n	734 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     7a8:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7aa:	2c00      	cmp	r4, #0
     7ac:	d1e9      	bne.n	782 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     7ae:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b0:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b4:	e7f5      	b.n	7a2 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     7b6:	bf00      	nop
     7b8:	1fff8c88 	.word	0x1fff8c88

000007bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7c0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7c2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7c4:	789b      	ldrb	r3, [r3, #2]
     7c6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7c8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     7ca:	9101      	str	r1, [sp, #4]
     7cc:	9202      	str	r2, [sp, #8]
     7ce:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7d0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     7d4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     7d8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7dc:	d017      	beq.n	80e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7de:	2300      	movs	r3, #0
     7e0:	f88d 3015 	strb.w	r3, [sp, #21]
     7e4:	f88d 3014 	strb.w	r3, [sp, #20]
     7e8:	f88d 3013 	strb.w	r3, [sp, #19]
     7ec:	f88d 3012 	strb.w	r3, [sp, #18]
     7f0:	f88d 3011 	strb.w	r3, [sp, #17]
     7f4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7f8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7fa:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     7fc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7fe:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     800:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     804:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     806:	a901      	add	r1, sp, #4
     808:	4798      	blx	r3
  }
     80a:	b009      	add	sp, #36	; 0x24
     80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     80e:	4a1b      	ldr	r2, [pc, #108]	; (87c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     810:	7813      	ldrb	r3, [r2, #0]
     812:	3301      	adds	r3, #1
     814:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     818:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     81c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     81e:	bf14      	ite	ne
     820:	2280      	movne	r2, #128	; 0x80
     822:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     824:	0799      	lsls	r1, r3, #30
     826:	bf44      	itt	mi
     828:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     82c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     82e:	075b      	lsls	r3, r3, #29
     830:	bf48      	it	mi
     832:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     836:	3210      	adds	r2, #16
     838:	b2d2      	uxtb	r2, r2
     83a:	f10d 0313 	add.w	r3, sp, #19
     83e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     842:	f44f 7e80 	mov.w	lr, #256	; 0x100
     846:	b1ac      	cbz	r4, 874 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     848:	fb9e f4f4 	sdiv	r4, lr, r4
     84c:	b2e4      	uxtb	r4, r4
     84e:	1c61      	adds	r1, r4, #1
     850:	b2c9      	uxtb	r1, r1
     852:	fb01 2502 	mla	r5, r1, r2, r2
     856:	122d      	asrs	r5, r5, #8
     858:	7019      	strb	r1, [r3, #0]
     85a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     85c:	b105      	cbz	r5, 860 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     85e:	3e01      	subs	r6, #1
     860:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     864:	b101      	cbz	r1, 868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     866:	701c      	strb	r4, [r3, #0]
     868:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     86a:	42bb      	cmp	r3, r7
     86c:	d0c4      	beq.n	7f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     86e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     870:	2c00      	cmp	r4, #0
     872:	d1e9      	bne.n	848 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     874:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     876:	f803 4c03 	strb.w	r4, [r3, #-3]
     87a:	e7f5      	b.n	868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     87c:	1fff8c88 	.word	0x1fff8c88

00000880 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     880:	b570      	push	{r4, r5, r6, lr}
     882:	4604      	mov	r4, r0
     884:	4608      	mov	r0, r1
     886:	460d      	mov	r5, r1
     888:	f00d fdfa 	bl	e480 <strlen>
     88c:	6823      	ldr	r3, [r4, #0]
     88e:	4602      	mov	r2, r0
     890:	4629      	mov	r1, r5
     892:	4620      	mov	r0, r4
     894:	685b      	ldr	r3, [r3, #4]
     896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     89a:	4718      	bx	r3

0000089c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     89c:	b538      	push	{r3, r4, r5, lr}
     89e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8a2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a4:	f00d fdec 	bl	e480 <strlen>
     8a8:	6823      	ldr	r3, [r4, #0]
     8aa:	4602      	mov	r2, r0
     8ac:	4629      	mov	r1, r5
     8ae:	685b      	ldr	r3, [r3, #4]
     8b0:	4620      	mov	r0, r4
     8b2:	4798      	blx	r3
     8b4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8b6:	4620      	mov	r0, r4
     8b8:	f00c fa98 	bl	cdec <Print::println()>
     8bc:	4428      	add	r0, r5
     8be:	bd38      	pop	{r3, r4, r5, pc}

000008c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c4:	780d      	ldrb	r5, [r1, #0]
     8c6:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     8c8:	784d      	ldrb	r5, [r1, #1]
     8ca:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     8cc:	7889      	ldrb	r1, [r1, #2]
     8ce:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d0:	7811      	ldrb	r1, [r2, #0]
     8d2:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     8d4:	7851      	ldrb	r1, [r2, #1]
     8d6:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     8d8:	7892      	ldrb	r2, [r2, #2]
     8da:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8dc:	781a      	ldrb	r2, [r3, #0]
     8de:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     8e0:	785a      	ldrb	r2, [r3, #1]
     8e2:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     8e4:	789b      	ldrb	r3, [r3, #2]
     8e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     8ea:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ec:	f89a b000 	ldrb.w	fp, [sl]
     8f0:	f880 b009 	strb.w	fp, [r0, #9]
     8f4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     8f8:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     8fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     900:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     902:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     904:	9d10      	ldr	r5, [sp, #64]	; 0x40
     906:	9911      	ldr	r1, [sp, #68]	; 0x44
     908:	9a12      	ldr	r2, [sp, #72]	; 0x48
     90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     90c:	f89a b001 	ldrb.w	fp, [sl, #1]
     910:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     914:	f89a a002 	ldrb.w	sl, [sl, #2]
     918:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91c:	f899 a000 	ldrb.w	sl, [r9]
     920:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     924:	f899 a001 	ldrb.w	sl, [r9, #1]
     928:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     92c:	f899 9002 	ldrb.w	r9, [r9, #2]
     930:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     934:	f898 9000 	ldrb.w	r9, [r8]
     938:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     93c:	f898 9001 	ldrb.w	r9, [r8, #1]
     940:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     944:	f898 8002 	ldrb.w	r8, [r8, #2]
     948:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     94c:	f89c 8000 	ldrb.w	r8, [ip]
     950:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     954:	f89c 8001 	ldrb.w	r8, [ip, #1]
     958:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     95c:	f89c c002 	ldrb.w	ip, [ip, #2]
     960:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     964:	f89e c000 	ldrb.w	ip, [lr]
     968:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     96c:	f89e c001 	ldrb.w	ip, [lr, #1]
     970:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     974:	f89e e002 	ldrb.w	lr, [lr, #2]
     978:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     97c:	f897 e000 	ldrb.w	lr, [r7]
     980:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     984:	f897 e001 	ldrb.w	lr, [r7, #1]
     988:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     98c:	78bf      	ldrb	r7, [r7, #2]
     98e:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     990:	7837      	ldrb	r7, [r6, #0]
     992:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     994:	7877      	ldrb	r7, [r6, #1]
     996:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     998:	78b6      	ldrb	r6, [r6, #2]
     99a:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     99c:	782e      	ldrb	r6, [r5, #0]
     99e:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     9a0:	786e      	ldrb	r6, [r5, #1]
     9a2:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     9a4:	78ad      	ldrb	r5, [r5, #2]
     9a6:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9aa:	780d      	ldrb	r5, [r1, #0]
     9ac:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     9b0:	784d      	ldrb	r5, [r1, #1]
     9b2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     9b6:	7889      	ldrb	r1, [r1, #2]
     9b8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9bc:	7811      	ldrb	r1, [r2, #0]
     9be:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     9c2:	7851      	ldrb	r1, [r2, #1]
     9c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     9c8:	7892      	ldrb	r2, [r2, #2]
     9ca:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d0:	7812      	ldrb	r2, [r2, #0]
     9d2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     9d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d8:	7852      	ldrb	r2, [r2, #1]
     9da:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     9de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9e0:	7892      	ldrb	r2, [r2, #2]
     9e2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     9ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f0:	7852      	ldrb	r2, [r2, #1]
     9f2:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f8:	7892      	ldrb	r2, [r2, #2]
     9fa:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9fe:	781a      	ldrb	r2, [r3, #0]
     a00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     a04:	785a      	ldrb	r2, [r3, #1]
     a06:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     a0a:	789b      	ldrb	r3, [r3, #2]
     a0c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a14 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a18:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a1a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a1c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a1e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a22:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a24:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a26:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a28:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a2a:	d1f8      	bne.n	a1e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a2c:	680b      	ldr	r3, [r1, #0]
     a2e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     a30:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a34:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a38:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a3c:	f04f 33ff 	mov.w	r3, #4294967295
     a40:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a42:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a44:	9305      	str	r3, [sp, #20]
     a46:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a48:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a4c:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a4e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     a52:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a56:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a5a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a5c:	b2f9      	uxtb	r1, r7
     a5e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a62:	9103      	str	r1, [sp, #12]
     a64:	b2e9      	uxtb	r1, r5
     a66:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a68:	fa5f f18c 	uxtb.w	r1, ip
     a6c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a6e:	9907      	ldr	r1, [sp, #28]
     a70:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a72:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a74:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a78:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a7c:	d80c      	bhi.n	a98 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a7e:	9905      	ldr	r1, [sp, #20]
     a80:	458c      	cmp	ip, r1
     a82:	dc07      	bgt.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     a84:	290f      	cmp	r1, #15
     a86:	d005      	beq.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     a88:	3101      	adds	r1, #1
     a8a:	b2c9      	uxtb	r1, r1
     a8c:	428b      	cmp	r3, r1
     a8e:	9102      	str	r1, [sp, #8]
     a90:	bf38      	it	cc
     a92:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a94:	b259      	sxtb	r1, r3
     a96:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a98:	a909      	add	r1, sp, #36	; 0x24
     a9a:	9100      	str	r1, [sp, #0]
     a9c:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9e:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     aa2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     aa6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aaa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     aae:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     ab2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     ab6:	f009 fef1 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     aba:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     abc:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac0:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     ac4:	46d1      	mov	r9, sl
     ac6:	d1bf      	bne.n	a48 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     ac8:	9806      	ldr	r0, [sp, #24]
     aca:	b00b      	add	sp, #44	; 0x2c
     acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ad0 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     ad0:	4b48      	ldr	r3, [pc, #288]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	f000 808b 	beq.w	bf0 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ade:	b09b      	sub	sp, #108	; 0x6c
     ae0:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     ae4:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     ae6:	2300      	movs	r3, #0
     ae8:	4a43      	ldr	r2, [pc, #268]	; (bf8 <updatePaletteIndex(LEDStruct&)+0x128>)
     aea:	9307      	str	r3, [sp, #28]
     aec:	f8df 910c 	ldr.w	r9, [pc, #268]	; bfc <updatePaletteIndex(LEDStruct&)+0x12c>
     af0:	9009      	str	r0, [sp, #36]	; 0x24
     af2:	f200 2327 	addw	r3, r0, #551	; 0x227
     af6:	9208      	str	r2, [sp, #32]
     af8:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     afa:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     afc:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b00:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b02:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b04:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b06:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b08:	d1f8      	bne.n	afc <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b0a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b0e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b10:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b14:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b18:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b1a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b1e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     b22:	2400      	movs	r4, #0
     b24:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b26:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b2e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b32:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b36:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b38:	b2f1      	uxtb	r1, r6
     b3a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b3e:	9103      	str	r1, [sp, #12]
     b40:	b2e9      	uxtb	r1, r5
     b42:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b44:	fa5f f18c 	uxtb.w	r1, ip
     b48:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b4a:	9906      	ldr	r1, [sp, #24]
     b4c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b4e:	aa0c      	add	r2, sp, #48	; 0x30
     b50:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b52:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b56:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b5a:	d80c      	bhi.n	b76 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b5c:	9905      	ldr	r1, [sp, #20]
     b5e:	458c      	cmp	ip, r1
     b60:	dc07      	bgt.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
     b62:	290f      	cmp	r1, #15
     b64:	d005      	beq.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     b66:	3101      	adds	r1, #1
     b68:	b2c9      	uxtb	r1, r1
     b6a:	428b      	cmp	r3, r1
     b6c:	9102      	str	r1, [sp, #8]
     b6e:	bf38      	it	cc
     b70:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b72:	b259      	sxtb	r1, r3
     b74:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b76:	a90d      	add	r1, sp, #52	; 0x34
     b78:	9100      	str	r1, [sp, #0]
     b7a:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b7c:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     b80:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     b84:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b88:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     b8c:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     b90:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     b94:	f009 fe82 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b98:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9a:	46d3      	mov	fp, sl
        g = rhs.g;
     b9c:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ba0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     ba4:	d1bf      	bne.n	b26 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ba8:	aa0e      	add	r2, sp, #56	; 0x38
     baa:	4293      	cmp	r3, r2
     bac:	d018      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
     bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     bb2:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     bb6:	e001      	b.n	bbc <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     bb8:	42a3      	cmp	r3, r4
     bba:	d011      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     bbc:	f812 1b01 	ldrb.w	r1, [r2], #1
     bc0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     bc4:	4288      	cmp	r0, r1
     bc6:	d0f7      	beq.n	bb8 <updatePaletteIndex(LEDStruct&)+0xe8>
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     bca:	9a07      	ldr	r2, [sp, #28]
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	3201      	adds	r2, #1
     bd0:	4293      	cmp	r3, r2
     bd2:	9207      	str	r2, [sp, #28]
     bd4:	dd09      	ble.n	bea <updatePaletteIndex(LEDStruct&)+0x11a>
     bd6:	9b08      	ldr	r3, [sp, #32]
     bd8:	f853 9f04 	ldr.w	r9, [r3, #4]!
     bdc:	9308      	str	r3, [sp, #32]
     bde:	e78c      	b.n	afa <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be2:	f89d 201c 	ldrb.w	r2, [sp, #28]
     be6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     bea:	b01b      	add	sp, #108	; 0x6c
     bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	1fff8750 	.word	0x1fff8750
     bf8:	00010358 	.word	0x00010358
     bfc:	00010ee4 	.word	0x00010ee4

00000c00 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c04:	b08b      	sub	sp, #44	; 0x2c
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c06:	aa09      	add	r2, sp, #36	; 0x24
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     c08:	2400      	movs	r4, #0
     c0a:	488b      	ldr	r0, [pc, #556]	; (e38 <initialize()+0x238>)
     c0c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
     c10:	2196      	movs	r1, #150	; 0x96
     c12:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
     c16:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
     c1a:	f009 fe0f 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     c1e:	4b86      	ldr	r3, [pc, #536]	; (e38 <initialize()+0x238>)
     c20:	4986      	ldr	r1, [pc, #536]	; (e3c <initialize()+0x23c>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     c22:	f883 41c6 	strb.w	r4, [r3, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     c26:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
     c2a:	f7ff fef3 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     c2e:	4b82      	ldr	r3, [pc, #520]	; (e38 <initialize()+0x238>)
     c30:	4983      	ldr	r1, [pc, #524]	; (e40 <initialize()+0x240>)
     c32:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
     c36:	f7ff feed 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     c3a:	487f      	ldr	r0, [pc, #508]	; (e38 <initialize()+0x238>)
     c3c:	f7ff ff48 	bl	ad0 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     c40:	4b80      	ldr	r3, [pc, #512]	; (e44 <initialize()+0x244>)
     c42:	4a81      	ldr	r2, [pc, #516]	; (e48 <initialize()+0x248>)
     c44:	7818      	ldrb	r0, [r3, #0]
     c46:	4b7c      	ldr	r3, [pc, #496]	; (e38 <initialize()+0x238>)
     c48:	f883 022c 	strb.w	r0, [r3, #556]	; 0x22c
     c4c:	4623      	mov	r3, r4
     c4e:	e001      	b.n	c54 <initialize()+0x54>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     c50:	2b1f      	cmp	r3, #31
     c52:	d009      	beq.n	c68 <initialize()+0x68>
		if (leds.mode_name == ModeList[i]) {
     c54:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     c58:	4281      	cmp	r1, r0
     c5a:	b2dc      	uxtb	r4, r3
     c5c:	f103 0301 	add.w	r3, r3, #1
     c60:	d1f6      	bne.n	c50 <initialize()+0x50>
			leds.mode_number = i;
     c62:	4b75      	ldr	r3, [pc, #468]	; (e38 <initialize()+0x238>)
     c64:	f883 422b 	strb.w	r4, [r3, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     c68:	4c78      	ldr	r4, [pc, #480]	; (e4c <initialize()+0x24c>)
     c6a:	2700      	movs	r7, #0
     c6c:	2196      	movs	r1, #150	; 0x96
     c6e:	4620      	mov	r0, r4
     c70:	aa09      	add	r2, sp, #36	; 0x24
     c72:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     c76:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     c7a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     c7e:	f009 fddd 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     c82:	2301      	movs	r3, #1
     c84:	4972      	ldr	r1, [pc, #456]	; (e50 <initialize()+0x250>)
     c86:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c8a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     c8e:	4a70      	ldr	r2, [pc, #448]	; (e50 <initialize()+0x250>)
            count++;;
        } while ( u.index != 255);
     c90:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c92:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c94:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c96:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c98:	d1f7      	bne.n	c8a <initialize()+0x8a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c9a:	6813      	ldr	r3, [r2, #0]
     c9c:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     c9e:	ea4f 6813 	mov.w	r8, r3, lsr #24
     ca2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     ca6:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     caa:	f04f 33ff 	mov.w	r3, #4294967295
     cae:	46c6      	mov	lr, r8
     cb0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     cb2:	2400      	movs	r4, #0
     cb4:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     cb6:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     cba:	4866      	ldr	r0, [pc, #408]	; (e54 <initialize()+0x254>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cbc:	f3c5 2707 	ubfx	r7, r5, #8, #8
     cc0:	f3c5 4607 	ubfx	r6, r5, #16, #8
     cc4:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     cc6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cca:	9104      	str	r1, [sp, #16]
     ccc:	b2f1      	uxtb	r1, r6
     cce:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     cd0:	fa5f f18c 	uxtb.w	r1, ip
     cd4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     cd6:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     cd8:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     cda:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cdc:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ce0:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ce2:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ce6:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     cea:	d80c      	bhi.n	d06 <initialize()+0x106>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     cec:	9906      	ldr	r1, [sp, #24]
     cee:	458c      	cmp	ip, r1
     cf0:	dc07      	bgt.n	d02 <initialize()+0x102>
     cf2:	290f      	cmp	r1, #15
     cf4:	d005      	beq.n	d02 <initialize()+0x102>
                    istart8 = lastSlotUsed + 1;
     cf6:	3101      	adds	r1, #1
     cf8:	b2c9      	uxtb	r1, r1
     cfa:	428b      	cmp	r3, r1
     cfc:	9103      	str	r1, [sp, #12]
     cfe:	bf38      	it	cc
     d00:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     d02:	b259      	sxtb	r1, r3
     d04:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d06:	a909      	add	r1, sp, #36	; 0x24
     d08:	9100      	str	r1, [sp, #0]
     d0a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d0c:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     d10:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     d14:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d18:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     d1c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     d20:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     d24:	f009 fdba 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     d28:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d2a:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     d2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     d32:	46d6      	mov	lr, sl
     d34:	d1bf      	bne.n	cb6 <initialize()+0xb6>
     d36:	4948      	ldr	r1, [pc, #288]	; (e58 <initialize()+0x258>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     d38:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     d3a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     d3e:	4a46      	ldr	r2, [pc, #280]	; (e58 <initialize()+0x258>)
            count++;;
        } while ( u.index != 255);
     d40:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d42:	3701      	adds	r7, #1
        } while ( u.index != 255);
     d44:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d46:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     d48:	d1f7      	bne.n	d3a <initialize()+0x13a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d4a:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d4c:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     d4e:	ea4f 6813 	mov.w	r8, r3, lsr #24
     d52:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     d56:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d5a:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d5e:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d60:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d62:	2400      	movs	r4, #0
     d64:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d66:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d6a:	4b38      	ldr	r3, [pc, #224]	; (e4c <initialize()+0x24c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d6c:	f3c5 2707 	ubfx	r7, r5, #8, #8
     d70:	f3c5 4607 	ubfx	r6, r5, #16, #8
     d74:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     d76:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d7a:	9104      	str	r1, [sp, #16]
     d7c:	b2f1      	uxtb	r1, r6
     d7e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     d80:	fa5f f18c 	uxtb.w	r1, ip
     d84:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     d86:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     d88:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d8a:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d8c:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d90:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
     d94:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     d96:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d9a:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d9e:	d80c      	bhi.n	dba <initialize()+0x1ba>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     da0:	9906      	ldr	r1, [sp, #24]
     da2:	458c      	cmp	ip, r1
     da4:	dc07      	bgt.n	db6 <initialize()+0x1b6>
     da6:	290f      	cmp	r1, #15
     da8:	d005      	beq.n	db6 <initialize()+0x1b6>
                    istart8 = lastSlotUsed + 1;
     daa:	3101      	adds	r1, #1
     dac:	b2c9      	uxtb	r1, r1
     dae:	428b      	cmp	r3, r1
     db0:	9103      	str	r1, [sp, #12]
     db2:	bf38      	it	cc
     db4:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     db6:	b259      	sxtb	r1, r3
     db8:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     dba:	a909      	add	r1, sp, #36	; 0x24
     dbc:	9100      	str	r1, [sp, #0]
     dbe:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dc0:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     dc4:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     dc8:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dcc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     dd0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     dd4:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     dd8:	f009 fd60 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ddc:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dde:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     de2:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     de6:	46d6      	mov	lr, sl
     de8:	d1bd      	bne.n	d66 <initialize()+0x166>
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dea:	4a18      	ldr	r2, [pc, #96]	; (e4c <initialize()+0x24c>)
     dec:	4b12      	ldr	r3, [pc, #72]	; (e38 <initialize()+0x238>)
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     dee:	4c1b      	ldr	r4, [pc, #108]	; (e5c <initialize()+0x25c>)
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     df0:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
     df4:	f882 322b 	strb.w	r3, [r2, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     df8:	4610      	mov	r0, r2
     dfa:	f7ff fe69 	bl	ad0 <updatePaletteIndex(LEDStruct&)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     dfe:	2300      	movs	r3, #0

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     e00:	aa09      	add	r2, sp, #36	; 0x24
     e02:	4620      	mov	r0, r4
     e04:	2196      	movs	r1, #150	; 0x96
     e06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
     e0a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
     e0e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     e12:	f009 fd13 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	over_leds.array_type		= OVERLAY;
     e16:	2302      	movs	r3, #2
	over_leds.current_palette	= cequal_gp;
     e18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
     e1c:	4910      	ldr	r1, [pc, #64]	; (e60 <initialize()+0x260>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
	over_leds.array_type		= OVERLAY;
     e1e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	over_leds.current_palette	= cequal_gp;
     e22:	f7ff fdf7 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	over_leds.target_palette	= cequal_gp;
     e26:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
     e2a:	490d      	ldr	r1, [pc, #52]	; (e60 <initialize()+0x260>)
     e2c:	f7ff fdf2 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
}
     e30:	b00b      	add	sp, #44	; 0x2c
     e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e36:	bf00      	nop
     e38:	1fff9e74 	.word	0x1fff9e74
     e3c:	00011320 	.word	0x00011320
     e40:	000109bc 	.word	0x000109bc
     e44:	1fff8749 	.word	0x1fff8749
     e48:	1fff8723 	.word	0x1fff8723
     e4c:	1fff8cb0 	.word	0x1fff8cb0
     e50:	000110c0 	.word	0x000110c0
     e54:	1fff8e78 	.word	0x1fff8e78
     e58:	00010318 	.word	0x00010318
     e5c:	1fff960c 	.word	0x1fff960c
     e60:	00011180 	.word	0x00011180

00000e64 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e64:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e66:	2112      	movs	r1, #18
     e68:	b082      	sub	sp, #8
     e6a:	482e      	ldr	r0, [pc, #184]	; (f24 <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e6c:	4c2e      	ldr	r4, [pc, #184]	; (f28 <global_debug()+0xc4>)
     e6e:	f00b fdb9 	bl	c9e4 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e72:	4b2e      	ldr	r3, [pc, #184]	; (f2c <global_debug()+0xc8>)
     e74:	4620      	mov	r0, r4
     e76:	7819      	ldrb	r1, [r3, #0]
     e78:	f00c f808 	bl	ce8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e7c:	4620      	mov	r0, r4
     e7e:	f00b ffb5 	bl	cdec <Print::println()>
     e82:	2111      	movs	r1, #17
     e84:	482a      	ldr	r0, [pc, #168]	; (f30 <global_debug()+0xcc>)
     e86:	f00b fdad 	bl	c9e4 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e8a:	4b2a      	ldr	r3, [pc, #168]	; (f34 <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e8c:	4620      	mov	r0, r4
     e8e:	7819      	ldrb	r1, [r3, #0]
     e90:	f00b fffc 	bl	ce8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e94:	4620      	mov	r0, r4
     e96:	f00b ffa9 	bl	cdec <Print::println()>
     e9a:	2115      	movs	r1, #21
     e9c:	4826      	ldr	r0, [pc, #152]	; (f38 <global_debug()+0xd4>)
     e9e:	f00b fda1 	bl	c9e4 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     ea2:	4b26      	ldr	r3, [pc, #152]	; (f3c <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea4:	4620      	mov	r0, r4
     ea6:	7819      	ldrb	r1, [r3, #0]
     ea8:	f00b fff0 	bl	ce8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     eac:	4620      	mov	r0, r4
     eae:	f00b ff9d 	bl	cdec <Print::println()>
     eb2:	2114      	movs	r1, #20
     eb4:	4822      	ldr	r0, [pc, #136]	; (f40 <global_debug()+0xdc>)
     eb6:	f00b fd95 	bl	c9e4 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     eba:	4b22      	ldr	r3, [pc, #136]	; (f44 <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ebc:	4620      	mov	r0, r4
     ebe:	8819      	ldrh	r1, [r3, #0]
     ec0:	f00b ffe4 	bl	ce8c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ec4:	4620      	mov	r0, r4
     ec6:	f00b ff91 	bl	cdec <Print::println()>
     eca:	210f      	movs	r1, #15
     ecc:	481e      	ldr	r0, [pc, #120]	; (f48 <global_debug()+0xe4>)
     ece:	f00b fd89 	bl	c9e4 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     ed2:	4b1e      	ldr	r3, [pc, #120]	; (f4c <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ed4:	4620      	mov	r0, r4
     ed6:	8819      	ldrh	r1, [r3, #0]
     ed8:	f00b ffd8 	bl	ce8c <Print::print(long)>
     edc:	2102      	movs	r1, #2
     ede:	481c      	ldr	r0, [pc, #112]	; (f50 <global_debug()+0xec>)
     ee0:	f00b fd80 	bl	c9e4 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     ee4:	4b1b      	ldr	r3, [pc, #108]	; (f54 <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     ee6:	220a      	movs	r2, #10
     ee8:	7819      	ldrb	r1, [r3, #0]
     eea:	4620      	mov	r0, r4
     eec:	2300      	movs	r3, #0
     eee:	f00b ff8d 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ef2:	2101      	movs	r1, #1
     ef4:	4818      	ldr	r0, [pc, #96]	; (f58 <global_debug()+0xf4>)
     ef6:	f00b fd75 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     efa:	4620      	mov	r0, r4
     efc:	f00b ff76 	bl	cdec <Print::println()>
     f00:	210e      	movs	r1, #14
     f02:	4816      	ldr	r0, [pc, #88]	; (f5c <global_debug()+0xf8>)
     f04:	f00b fd6e 	bl	c9e4 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f08:	4b15      	ldr	r3, [pc, #84]	; (f60 <global_debug()+0xfc>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	9301      	str	r3, [sp, #4]
	return ret;
     f0e:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f10:	2300      	movs	r3, #0
     f12:	220a      	movs	r2, #10
     f14:	4620      	mov	r0, r4
     f16:	f00b ff79 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f1a:	4620      	mov	r0, r4
     f1c:	f00b ff66 	bl	cdec <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f20:	b002      	add	sp, #8
     f22:	bd10      	pop	{r4, pc}
     f24:	0000e6b4 	.word	0x0000e6b4
     f28:	1fff878c 	.word	0x1fff878c
     f2c:	1fff8783 	.word	0x1fff8783
     f30:	0000e6c8 	.word	0x0000e6c8
     f34:	1fff874a 	.word	0x1fff874a
     f38:	0000e6dc 	.word	0x0000e6dc
     f3c:	1fff8722 	.word	0x1fff8722
     f40:	0000e6f4 	.word	0x0000e6f4
     f44:	1fff8cac 	.word	0x1fff8cac
     f48:	0000e70c 	.word	0x0000e70c
     f4c:	1fff9608 	.word	0x1fff9608
     f50:	0000e71c 	.word	0x0000e71c
     f54:	1fff9561 	.word	0x1fff9561
     f58:	0000e720 	.word	0x0000e720
     f5c:	0000e724 	.word	0x0000e724
     f60:	1fffa8f8 	.word	0x1fffa8f8

00000f64 <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f64:	491e      	ldr	r1, [pc, #120]	; (fe0 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f66:	481f      	ldr	r0, [pc, #124]	; (fe4 <begin_transition()+0x80>)
     f68:	880b      	ldrh	r3, [r1, #0]
     f6a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f76:	3319      	adds	r3, #25
     f78:	b29b      	uxth	r3, r3
     f7a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f82:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f86:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f8a:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f8c:	b2db      	uxtb	r3, r3
     f8e:	b292      	uxth	r2, r2
     f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f94:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f96:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f98:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f9c:	4e12      	ldr	r6, [pc, #72]	; (fe8 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f9e:	4d13      	ldr	r5, [pc, #76]	; (fec <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fa0:	5cf3      	ldrb	r3, [r6, r3]
     fa2:	4c13      	ldr	r4, [pc, #76]	; (ff0 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fa4:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     fa6:	b2ff      	uxtb	r7, r7
     fa8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fac:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fae:	123f      	asrs	r7, r7, #8
     fb0:	3703      	adds	r7, #3
	switch (transition_type) {
     fb2:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fb4:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fb6:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fb8:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fba:	d00c      	beq.n	fd6 <begin_transition()+0x72>
     fbc:	d306      	bcc.n	fcc <begin_transition()+0x68>
     fbe:	2b02      	cmp	r3, #2
     fc0:	d102      	bne.n	fc8 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fc2:	4b0c      	ldr	r3, [pc, #48]	; (ff4 <begin_transition()+0x90>)
     fc4:	2200      	movs	r2, #0
     fc6:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fc8:	bcf0      	pop	{r4, r5, r6, r7}
     fca:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     fcc:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <begin_transition()+0x94>)
     fce:	2200      	movs	r2, #0
     fd0:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fd2:	bcf0      	pop	{r4, r5, r6, r7}
     fd4:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     fd6:	4b07      	ldr	r3, [pc, #28]	; (ff4 <begin_transition()+0x90>)
     fd8:	224a      	movs	r2, #74	; 0x4a
     fda:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fdc:	bcf0      	pop	{r4, r5, r6, r7}
     fde:	4770      	bx	lr
     fe0:	1fff8784 	.word	0x1fff8784
     fe4:	1fff9504 	.word	0x1fff9504
     fe8:	1fff8754 	.word	0x1fff8754
     fec:	1fff9e5d 	.word	0x1fff9e5d
     ff0:	1fff9518 	.word	0x1fff9518
     ff4:	1fff9540 	.word	0x1fff9540
     ff8:	1fff8cae 	.word	0x1fff8cae

00000ffc <finish_transition()>:

void finish_transition() {
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     ffe:	4cec      	ldr	r4, [pc, #944]	; (13b0 <finish_transition()+0x3b4>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1000:	48ec      	ldr	r0, [pc, #944]	; (13b4 <finish_transition()+0x3b8>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    1002:	b083      	sub	sp, #12
	in_transition = 0;
    1004:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1006:	aa01      	add	r2, sp, #4
    1008:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    100a:	7023      	strb	r3, [r4, #0]
    100c:	f88d 3004 	strb.w	r3, [sp, #4]
    1010:	f88d 3005 	strb.w	r3, [sp, #5]
    1014:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1018:	f009 fc10 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
    101c:	4be6      	ldr	r3, [pc, #920]	; (13b8 <finish_transition()+0x3bc>)
    101e:	4ae7      	ldr	r2, [pc, #924]	; (13bc <finish_transition()+0x3c0>)
    1020:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1024:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    1028:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    102c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1030:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    1034:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1038:	f803 1c01 	strb.w	r1, [r3, #-1]
    103c:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    103e:	429d      	cmp	r5, r3
    1040:	f102 0203 	add.w	r2, r2, #3
    1044:	d1ee      	bne.n	1024 <finish_transition()+0x28>
    1046:	4cde      	ldr	r4, [pc, #888]	; (13c0 <finish_transition()+0x3c4>)
    1048:	4eda      	ldr	r6, [pc, #872]	; (13b4 <finish_transition()+0x3b8>)
    104a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    104e:	f886 31c2 	strb.w	r3, [r6, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1052:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    1056:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1058:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
    105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    105e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1062:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    1066:	f894 e1c3 	ldrb.w	lr, [r4, #451]	; 0x1c3
    106a:	f894 71c4 	ldrb.w	r7, [r4, #452]	; 0x1c4
    106e:	f886 e1c3 	strb.w	lr, [r6, #451]	; 0x1c3
    1072:	f886 71c4 	strb.w	r7, [r6, #452]	; 0x1c4
    1076:	f894 e1c5 	ldrb.w	lr, [r4, #453]	; 0x1c5
    107a:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
    107e:	f886 e1c5 	strb.w	lr, [r6, #453]	; 0x1c5
    1082:	f886 71c6 	strb.w	r7, [r6, #454]	; 0x1c6
    1086:	f894 e1c7 	ldrb.w	lr, [r4, #455]	; 0x1c7
    108a:	f886 e1c7 	strb.w	lr, [r6, #455]	; 0x1c7
    108e:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
    1092:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    1096:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1098:	f506 75fc 	add.w	r5, r6, #504	; 0x1f8
    109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    109e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    10a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    10a2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    10a6:	f894 e229 	ldrb.w	lr, [r4, #553]	; 0x229
    10aa:	f894 c228 	ldrb.w	ip, [r4, #552]	; 0x228
    10ae:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
    10b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    10b6:	f886 e229 	strb.w	lr, [r6, #553]	; 0x229
    10ba:	f886 c228 	strb.w	ip, [r6, #552]	; 0x228
    10be:	f886 722a 	strb.w	r7, [r6, #554]	; 0x22a
    10c2:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
    10c6:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    10ca:	f894 e22d 	ldrb.w	lr, [r4, #557]	; 0x22d
    10ce:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    10d2:	f894 522f 	ldrb.w	r5, [r4, #559]	; 0x22f
    10d6:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
    10da:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    10de:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b
    10e2:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c
    10e6:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    10ea:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    10ee:	f886 e22d 	strb.w	lr, [r6, #557]	; 0x22d
    10f2:	f886 722e 	strb.w	r7, [r6, #558]	; 0x22e
    10f6:	f894 e234 	ldrb.w	lr, [r4, #564]	; 0x234
    10fa:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
    10fe:	f886 522f 	strb.w	r5, [r6, #559]	; 0x22f
    1102:	f886 0230 	strb.w	r0, [r6, #560]	; 0x230
    1106:	f894 5236 	ldrb.w	r5, [r4, #566]	; 0x236
    110a:	f894 0237 	ldrb.w	r0, [r4, #567]	; 0x237
    110e:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
    1112:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
    1116:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    111a:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    111e:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
    1122:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    1126:	f886 7235 	strb.w	r7, [r6, #565]	; 0x235
    112a:	f886 2239 	strb.w	r2, [r6, #569]	; 0x239
    112e:	f886 323a 	strb.w	r3, [r6, #570]	; 0x23a
    1132:	f886 e234 	strb.w	lr, [r6, #564]	; 0x234
    1136:	f886 5236 	strb.w	r5, [r6, #566]	; 0x236
    113a:	f886 0237 	strb.w	r0, [r6, #567]	; 0x237
    113e:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    1142:	f206 233e 	addw	r3, r6, #574	; 0x23e
    1146:	f204 223e 	addw	r2, r4, #574	; 0x23e
    114a:	f206 277a 	addw	r7, r6, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    114e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
    1152:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    1156:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    115a:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
    115e:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1162:	f803 1c01 	strb.w	r1, [r3, #-1]
    1166:	3303      	adds	r3, #3
    1168:	429f      	cmp	r7, r3
    116a:	f102 0203 	add.w	r2, r2, #3
    116e:	d1ee      	bne.n	114e <finish_transition()+0x152>
    1170:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    1174:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    1178:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    117c:	f886 2277 	strb.w	r2, [r6, #631]	; 0x277
    1180:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    1184:	4b8f      	ldr	r3, [pc, #572]	; (13c4 <finish_transition()+0x3c8>)
    1186:	f886 0278 	strb.w	r0, [r6, #632]	; 0x278
    118a:	f886 1279 	strb.w	r1, [r6, #633]	; 0x279
    118e:	f894 027b 	ldrb.w	r0, [r4, #635]	; 0x27b
    1192:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    1196:	f886 227a 	strb.w	r2, [r6, #634]	; 0x27a
    119a:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    119e:	f886 027b 	strb.w	r0, [r6, #635]	; 0x27b
    11a2:	f886 127c 	strb.w	r1, [r6, #636]	; 0x27c
    11a6:	f894 027e 	ldrb.w	r0, [r4, #638]	; 0x27e
    11aa:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    11ae:	f886 227d 	strb.w	r2, [r6, #637]	; 0x27d
    11b2:	4a85      	ldr	r2, [pc, #532]	; (13c8 <finish_transition()+0x3cc>)
    11b4:	f886 027e 	strb.w	r0, [r6, #638]	; 0x27e
    11b8:	f886 127f 	strb.w	r1, [r6, #639]	; 0x27f
    11bc:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11c0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11c4:	f803 1b01 	strb.w	r1, [r3], #1
    11c8:	4283      	cmp	r3, r0
    11ca:	d1f9      	bne.n	11c0 <finish_transition()+0x1c4>
    11cc:	497f      	ldr	r1, [pc, #508]	; (13cc <finish_transition()+0x3d0>)
    11ce:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    11d6:	f803 2b01 	strb.w	r2, [r3], #1
    11da:	4283      	cmp	r3, r0
    11dc:	4a75      	ldr	r2, [pc, #468]	; (13b4 <finish_transition()+0x3b8>)
    11de:	d1f8      	bne.n	11d2 <finish_transition()+0x1d6>
    11e0:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    11e4:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    11e8:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    11ec:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    11f0:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    11f4:	f882 3316 	strb.w	r3, [r2, #790]	; 0x316
    11f8:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    11fc:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
    1200:	f882 5318 	strb.w	r5, [r2, #792]	; 0x318
    1204:	f8b4 631c 	ldrh.w	r6, [r4, #796]	; 0x31c
    1208:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    120c:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    1210:	f882 131a 	strb.w	r1, [r2, #794]	; 0x31a
    1214:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    1218:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    121c:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
    1220:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
    1224:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
    1228:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
    122c:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
    1230:	f894 5325 	ldrb.w	r5, [r4, #805]	; 0x325
    1234:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
    1238:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    123c:	f894 0326 	ldrb.w	r0, [r4, #806]	; 0x326
    1240:	f894 1327 	ldrb.w	r1, [r4, #807]	; 0x327
    1244:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    1248:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    124c:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1250:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    1254:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
    1258:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    125c:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1260:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    1264:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    1268:	f8b4 632c 	ldrh.w	r6, [r4, #812]	; 0x32c
    126c:	f8b4 532e 	ldrh.w	r5, [r4, #814]	; 0x32e
    1270:	f8b4 0330 	ldrh.w	r0, [r4, #816]	; 0x330
    1274:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    1278:	f8b4 3334 	ldrh.w	r3, [r4, #820]	; 0x334
    127c:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1280:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    1284:	f8b4 6336 	ldrh.w	r6, [r4, #822]	; 0x336
    1288:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
    128c:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
    1290:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    1294:	f8b4 033a 	ldrh.w	r0, [r4, #826]	; 0x33a
    1298:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    129c:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    12a0:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    12a4:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    12a8:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    12ac:	f894 633f 	ldrb.w	r6, [r4, #831]	; 0x33f
    12b0:	f894 5340 	ldrb.w	r5, [r4, #832]	; 0x340
    12b4:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
    12b8:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    12bc:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341
    12c0:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    12c4:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    12c8:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    12cc:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    12d0:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    12d4:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
    12d8:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    12dc:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    12e0:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    12e4:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    12e8:	f894 6345 	ldrb.w	r6, [r4, #837]	; 0x345
    12ec:	f894 5346 	ldrb.w	r5, [r4, #838]	; 0x346
    12f0:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
    12f4:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    12f8:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    12fc:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    1300:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    1304:	f894 634a 	ldrb.w	r6, [r4, #842]	; 0x34a
    1308:	f894 534b 	ldrb.w	r5, [r4, #843]	; 0x34b
    130c:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
    1310:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    1314:	f894 034c 	ldrb.w	r0, [r4, #844]	; 0x34c
    1318:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    131c:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    1320:	f894 334e 	ldrb.w	r3, [r4, #846]	; 0x34e
    1324:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    1328:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    132c:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
    1330:	f894 5350 	ldrb.w	r5, [r4, #848]	; 0x350
    1334:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
    1338:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    133c:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    1340:	f894 1352 	ldrb.w	r1, [r4, #850]	; 0x352
    1344:	f894 3353 	ldrb.w	r3, [r4, #851]	; 0x353
    1348:	f894 634f 	ldrb.w	r6, [r4, #847]	; 0x34f
    134c:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1350:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
    1354:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    1358:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    135c:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1360:	491b      	ldr	r1, [pc, #108]	; (13d0 <finish_transition()+0x3d4>)
    1362:	f894 6354 	ldrb.w	r6, [r4, #852]	; 0x354
    1366:	f894 335d 	ldrb.w	r3, [r4, #861]	; 0x35d
    136a:	f8d4 5358 	ldr.w	r5, [r4, #856]	; 0x358
    136e:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
    1372:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    1376:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    137a:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    137e:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
    1382:	f502 7358 	add.w	r3, r2, #864	; 0x360
    1386:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    138a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    138e:	f843 0b04 	str.w	r0, [r3], #4
    1392:	4293      	cmp	r3, r2
    1394:	d1f9      	bne.n	138a <finish_transition()+0x38e>
    1396:	4a0f      	ldr	r2, [pc, #60]	; (13d4 <finish_transition()+0x3d8>)
    1398:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    139c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13a0:	f843 1b04 	str.w	r1, [r3], #4
    13a4:	4283      	cmp	r3, r0
    13a6:	d1f9      	bne.n	139c <finish_transition()+0x3a0>
    13a8:	4a0b      	ldr	r2, [pc, #44]	; (13d8 <finish_transition()+0x3dc>)
    13aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    13ae:	e015      	b.n	13dc <finish_transition()+0x3e0>
    13b0:	1fff9504 	.word	0x1fff9504
    13b4:	1fff9e74 	.word	0x1fff9e74
    13b8:	1fff9e77 	.word	0x1fff9e77
    13bc:	1fff8cb3 	.word	0x1fff8cb3
    13c0:	1fff8cb0 	.word	0x1fff8cb0
    13c4:	1fffa0f4 	.word	0x1fffa0f4
    13c8:	1fff8f2f 	.word	0x1fff8f2f
    13cc:	1fff8f7a 	.word	0x1fff8f7a
    13d0:	1fff900c 	.word	0x1fff900c
    13d4:	1fff90fc 	.word	0x1fff90fc
    13d8:	1fff91ef 	.word	0x1fff91ef
    13dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    13e0:	f803 1b01 	strb.w	r1, [r3], #1
    13e4:	4283      	cmp	r3, r0
    13e6:	d1f9      	bne.n	13dc <finish_transition()+0x3e0>
    13e8:	4a62      	ldr	r2, [pc, #392]	; (1574 <finish_transition()+0x578>)
    13ea:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    13ee:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13f2:	f843 1b04 	str.w	r1, [r3], #4
    13f6:	4283      	cmp	r3, r0
    13f8:	d1f9      	bne.n	13ee <finish_transition()+0x3f2>
    13fa:	4a5f      	ldr	r2, [pc, #380]	; (1578 <finish_transition()+0x57c>)
    13fc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1400:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1404:	f843 1b04 	str.w	r1, [r3], #4
    1408:	4283      	cmp	r3, r0
    140a:	495c      	ldr	r1, [pc, #368]	; (157c <finish_transition()+0x580>)
    140c:	d1f8      	bne.n	1400 <finish_transition()+0x404>
    140e:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    1412:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    1416:	f894 675e 	ldrb.w	r6, [r4, #1886]	; 0x75e
    141a:	f8b4 5760 	ldrh.w	r5, [r4, #1888]	; 0x760
    141e:	f8b4 0762 	ldrh.w	r0, [r4, #1890]	; 0x762
    1422:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    1426:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    142a:	f8b4 3764 	ldrh.w	r3, [r4, #1892]	; 0x764
    142e:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    1432:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    1436:	f8a1 5760 	strh.w	r5, [r1, #1888]	; 0x760
    143a:	f8a1 0762 	strh.w	r0, [r1, #1890]	; 0x762
    143e:	f8a1 3764 	strh.w	r3, [r1, #1892]	; 0x764
    1442:	f881 2766 	strb.w	r2, [r1, #1894]	; 0x766
    1446:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    144a:	f894 6767 	ldrb.w	r6, [r4, #1895]	; 0x767
    144e:	f894 5768 	ldrb.w	r5, [r4, #1896]	; 0x768
    1452:	f894 0769 	ldrb.w	r0, [r4, #1897]	; 0x769
    1456:	4a4a      	ldr	r2, [pc, #296]	; (1580 <finish_transition()+0x584>)
    1458:	f881 376a 	strb.w	r3, [r1, #1898]	; 0x76a
    145c:	f881 6767 	strb.w	r6, [r1, #1895]	; 0x767
    1460:	f881 5768 	strb.w	r5, [r1, #1896]	; 0x768
    1464:	f881 0769 	strb.w	r0, [r1, #1897]	; 0x769
    1468:	f201 736c 	addw	r3, r1, #1900	; 0x76c
    146c:	f201 718c 	addw	r1, r1, #1932	; 0x78c
    1470:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1474:	f843 0b04 	str.w	r0, [r3], #4
    1478:	428b      	cmp	r3, r1
    147a:	d1f9      	bne.n	1470 <finish_transition()+0x474>
    147c:	4a41      	ldr	r2, [pc, #260]	; (1584 <finish_transition()+0x588>)
    147e:	f103 0020 	add.w	r0, r3, #32
    1482:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1486:	f843 1b04 	str.w	r1, [r3], #4
    148a:	4283      	cmp	r3, r0
    148c:	d1f9      	bne.n	1482 <finish_transition()+0x486>
    148e:	4a3e      	ldr	r2, [pc, #248]	; (1588 <finish_transition()+0x58c>)
    1490:	f103 0020 	add.w	r0, r3, #32
    1494:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1498:	f843 1b04 	str.w	r1, [r3], #4
    149c:	4283      	cmp	r3, r0
    149e:	d1f9      	bne.n	1494 <finish_transition()+0x498>
    14a0:	4a3a      	ldr	r2, [pc, #232]	; (158c <finish_transition()+0x590>)
    14a2:	f103 0020 	add.w	r0, r3, #32
    14a6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14aa:	f843 1b04 	str.w	r1, [r3], #4
    14ae:	4283      	cmp	r3, r0
    14b0:	d1f9      	bne.n	14a6 <finish_transition()+0x4aa>
    14b2:	4a37      	ldr	r2, [pc, #220]	; (1590 <finish_transition()+0x594>)
    14b4:	f103 0020 	add.w	r0, r3, #32
    14b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14bc:	f843 1b04 	str.w	r1, [r3], #4
    14c0:	4283      	cmp	r3, r0
    14c2:	d1f9      	bne.n	14b8 <finish_transition()+0x4bc>
    14c4:	4a33      	ldr	r2, [pc, #204]	; (1594 <finish_transition()+0x598>)
    14c6:	f103 0020 	add.w	r0, r3, #32
    14ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14ce:	f843 1b04 	str.w	r1, [r3], #4
    14d2:	4283      	cmp	r3, r0
    14d4:	4d29      	ldr	r5, [pc, #164]	; (157c <finish_transition()+0x580>)
    14d6:	d1f8      	bne.n	14ca <finish_transition()+0x4ce>
    14d8:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
    14dc:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    14e0:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
    14e4:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
    14e8:	f894 682e 	ldrb.w	r6, [r4, #2094]	; 0x82e
    14ec:	f8a5 382c 	strh.w	r3, [r5, #2092]	; 0x82c
    14f0:	f8a5 2830 	strh.w	r2, [r5, #2096]	; 0x830
    14f4:	f894 383c 	ldrb.w	r3, [r4, #2108]	; 0x83c
    14f8:	f894 283e 	ldrb.w	r2, [r4, #2110]	; 0x83e
    14fc:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
    1500:	f8c5 0838 	str.w	r0, [r5, #2104]	; 0x838
    1504:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    1508:	f894 0840 	ldrb.w	r0, [r4, #2112]	; 0x840
    150c:	f894 783d 	ldrb.w	r7, [r4, #2109]	; 0x83d
    1510:	f885 682e 	strb.w	r6, [r5, #2094]	; 0x82e
    1514:	f885 383c 	strb.w	r3, [r5, #2108]	; 0x83c
    1518:	f894 6841 	ldrb.w	r6, [r4, #2113]	; 0x841
    151c:	f894 3842 	ldrb.w	r3, [r4, #2114]	; 0x842
    1520:	f885 283e 	strb.w	r2, [r5, #2110]	; 0x83e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1524:	2400      	movs	r4, #0
    1526:	f885 183f 	strb.w	r1, [r5, #2111]	; 0x83f
    152a:	f885 0840 	strb.w	r0, [r5, #2112]	; 0x840
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    152e:	aa01      	add	r2, sp, #4
    1530:	2196      	movs	r1, #150	; 0x96
    1532:	4819      	ldr	r0, [pc, #100]	; (1598 <finish_transition()+0x59c>)
    1534:	f885 3842 	strb.w	r3, [r5, #2114]	; 0x842
    1538:	f885 783d 	strb.w	r7, [r5, #2109]	; 0x83d
    153c:	f885 6841 	strb.w	r6, [r5, #2113]	; 0x841
    1540:	f88d 4004 	strb.w	r4, [sp, #4]
    1544:	f88d 4005 	strb.w	r4, [sp, #5]
    1548:	f88d 4006 	strb.w	r4, [sp, #6]
    154c:	f009 f976 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1550:	4b12      	ldr	r3, [pc, #72]	; (159c <finish_transition()+0x5a0>)
void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
    1552:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	b953      	cbnz	r3, 1570 <finish_transition()+0x574>
    155a:	aa01      	add	r2, sp, #4
    155c:	2196      	movs	r1, #150	; 0x96
    155e:	4810      	ldr	r0, [pc, #64]	; (15a0 <finish_transition()+0x5a4>)
    1560:	f88d 3004 	strb.w	r3, [sp, #4]
    1564:	f88d 3005 	strb.w	r3, [sp, #5]
    1568:	f88d 3006 	strb.w	r3, [sp, #6]
    156c:	f009 f966 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
}
    1570:	b003      	add	sp, #12
    1572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1574:	1fff9228 	.word	0x1fff9228
    1578:	1fff9318 	.word	0x1fff9318
    157c:	1fff9e74 	.word	0x1fff9e74
    1580:	1fff9418 	.word	0x1fff9418
    1584:	1fff9438 	.word	0x1fff9438
    1588:	1fff9458 	.word	0x1fff9458
    158c:	1fff9478 	.word	0x1fff9478
    1590:	1fff9498 	.word	0x1fff9498
    1594:	1fff94b8 	.word	0x1fff94b8
    1598:	1fff8cb0 	.word	0x1fff8cb0
    159c:	1fff9606 	.word	0x1fff9606
    15a0:	1fff960c 	.word	0x1fff960c

000015a4 <blending()>:

void blending() {
    15a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15a8:	4d2f      	ldr	r5, [pc, #188]	; (1668 <blending()+0xc4>)
    15aa:	4e30      	ldr	r6, [pc, #192]	; (166c <blending()+0xc8>)
    15ac:	4c30      	ldr	r4, [pc, #192]	; (1670 <blending()+0xcc>)
    15ae:	4f31      	ldr	r7, [pc, #196]	; (1674 <blending()+0xd0>)
    15b0:	b085      	sub	sp, #20
    15b2:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    15b6:	4632      	mov	r2, r6
    15b8:	4629      	mov	r1, r5
    15ba:	783b      	ldrb	r3, [r7, #0]
    15bc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1674 <blending()+0xd0>
    15c0:	a803      	add	r0, sp, #12
    15c2:	3503      	adds	r5, #3
    15c4:	f009 fa2c 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d4:	7021      	strb	r1, [r4, #0]
    15d6:	4545      	cmp	r5, r8
        g = rhs.g;
    15d8:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    15da:	70a3      	strb	r3, [r4, #2]
    15dc:	f106 0603 	add.w	r6, r6, #3
    15e0:	f104 0403 	add.w	r4, r4, #3
    15e4:	d1e7      	bne.n	15b6 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15e6:	4e24      	ldr	r6, [pc, #144]	; (1678 <blending()+0xd4>)
    15e8:	6833      	ldr	r3, [r6, #0]
    15ea:	07db      	lsls	r3, r3, #31
    15ec:	d51f      	bpl.n	162e <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15ee:	4d23      	ldr	r5, [pc, #140]	; (167c <blending()+0xd8>)
    15f0:	4c23      	ldr	r4, [pc, #140]	; (1680 <blending()+0xdc>)
    15f2:	682b      	ldr	r3, [r5, #0]
    15f4:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15f6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15fa:	9b03      	ldr	r3, [sp, #12]
    15fc:	1a5b      	subs	r3, r3, r1
    15fe:	4293      	cmp	r3, r2
    1600:	d30c      	bcc.n	161c <blending()+0x78>
    1602:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1604:	682a      	ldr	r2, [r5, #0]
    1606:	9202      	str	r2, [sp, #8]
    1608:	3301      	adds	r3, #1
	return ret;
    160a:	9a02      	ldr	r2, [sp, #8]
    160c:	6022      	str	r2, [r4, #0]
    160e:	b2db      	uxtb	r3, r3
    1610:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    1612:	2bff      	cmp	r3, #255	; 0xff
    1614:	d006      	beq.n	1624 <blending()+0x80>
		finish_transition();
	}
}
    1616:	b005      	add	sp, #20
    1618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    161c:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1620:	2bff      	cmp	r3, #255	; 0xff
    1622:	d1f8      	bne.n	1616 <blending()+0x72>
		finish_transition();
    1624:	f7ff fcea 	bl	ffc <finish_transition()>
	}
}
    1628:	b005      	add	sp, #20
    162a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    162e:	4630      	mov	r0, r6
    1630:	f00a f940 	bl	b8b4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1634:	4d11      	ldr	r5, [pc, #68]	; (167c <blending()+0xd8>)
    1636:	b950      	cbnz	r0, 164e <blending()+0xaa>
    1638:	4c11      	ldr	r4, [pc, #68]	; (1680 <blending()+0xdc>)
    163a:	682b      	ldr	r3, [r5, #0]
    163c:	9303      	str	r3, [sp, #12]
    163e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1642:	9b03      	ldr	r3, [sp, #12]
    1644:	1a5b      	subs	r3, r3, r1
    1646:	4293      	cmp	r3, r2
    1648:	d2db      	bcs.n	1602 <blending()+0x5e>
    164a:	783b      	ldrb	r3, [r7, #0]
    164c:	e7e1      	b.n	1612 <blending()+0x6e>
    164e:	4b0d      	ldr	r3, [pc, #52]	; (1684 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1650:	682a      	ldr	r2, [r5, #0]
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	4c0a      	ldr	r4, [pc, #40]	; (1680 <blending()+0xdc>)
    1656:	9201      	str	r2, [sp, #4]
	return ret;
    1658:	9a01      	ldr	r2, [sp, #4]
    165a:	6022      	str	r2, [r4, #0]
    165c:	009b      	lsls	r3, r3, #2
    165e:	4630      	mov	r0, r6
    1660:	6063      	str	r3, [r4, #4]
    1662:	f00a f92d 	bl	b8c0 <__cxa_guard_release>
    1666:	e7e8      	b.n	163a <blending()+0x96>
    1668:	1fff9e74 	.word	0x1fff9e74
    166c:	1fff8cb0 	.word	0x1fff8cb0
    1670:	1fffa6b8 	.word	0x1fffa6b8
    1674:	1fff8cae 	.word	0x1fff8cae
    1678:	1fff95f8 	.word	0x1fff95f8
    167c:	1fffa8f8 	.word	0x1fffa8f8
    1680:	1fff9508 	.word	0x1fff9508
    1684:	1fff9e5d 	.word	0x1fff9e5d

00001688 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    168c:	4e94      	ldr	r6, [pc, #592]	; (18e0 <wipedown()+0x258>)
    168e:	f896 c000 	ldrb.w	ip, [r6]
    1692:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1696:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1698:	2b00      	cmp	r3, #0
    169a:	f000 811e 	beq.w	18da <wipedown()+0x252>
    169e:	f103 3bff 	add.w	fp, r3, #4294967295
    16a2:	fa1f fb8b 	uxth.w	fp, fp
    16a6:	488f      	ldr	r0, [pc, #572]	; (18e4 <wipedown()+0x25c>)
    16a8:	498f      	ldr	r1, [pc, #572]	; (18e8 <wipedown()+0x260>)
    16aa:	f10b 0b01 	add.w	fp, fp, #1
    16ae:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    16b2:	4483      	add	fp, r0
    16b4:	4602      	mov	r2, r0
    16b6:	460d      	mov	r5, r1
    16b8:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ba:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    16bc:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    16c0:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16c4:	7027      	strb	r7, [r4, #0]
    16c6:	3203      	adds	r2, #3
    16c8:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    16cc:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16d0:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16d4:	f884 a001 	strb.w	sl, [r4, #1]
    16d8:	455a      	cmp	r2, fp
        b = rhs.b;
    16da:	f884 9002 	strb.w	r9, [r4, #2]
    16de:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16e6:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    16ea:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16ee:	f104 0403 	add.w	r4, r4, #3
    16f2:	f1a1 0103 	sub.w	r1, r1, #3
    16f6:	d1e0      	bne.n	16ba <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16f8:	2b4a      	cmp	r3, #74	; 0x4a
    16fa:	d827      	bhi.n	174c <wipedown()+0xc4>
    16fc:	487b      	ldr	r0, [pc, #492]	; (18ec <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16fe:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1702:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1706:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    170a:	eb00 0801 	add.w	r8, r0, r1
    170e:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1712:	3301      	adds	r3, #1
    1714:	186f      	adds	r7, r5, r1
    1716:	f810 b001 	ldrb.w	fp, [r0, r1]
    171a:	f805 b001 	strb.w	fp, [r5, r1]
    171e:	18ac      	adds	r4, r5, r2
    1720:	b29b      	uxth	r3, r3
        g = rhs.g;
    1722:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1726:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    172a:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    172e:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1732:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1736:	f887 a001 	strb.w	sl, [r7, #1]
    173a:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    173c:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1740:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1744:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1748:	70a1      	strb	r1, [r4, #2]
    174a:	d1d8      	bne.n	16fe <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    174c:	f10c 3aff 	add.w	sl, ip, #4294967295
    1750:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1754:	2480      	movs	r4, #128	; 0x80
    1756:	eb05 0b0a 	add.w	fp, r5, sl
    175a:	4659      	mov	r1, fp
    175c:	4623      	mov	r3, r4
    175e:	a803      	add	r0, sp, #12
    1760:	aa02      	add	r2, sp, #8
    1762:	2700      	movs	r7, #0
    1764:	f88d 4009 	strb.w	r4, [sp, #9]
    1768:	f88d 400a 	strb.w	r4, [sp, #10]
    176c:	f88d 7008 	strb.w	r7, [sp, #8]
    1770:	f009 f956 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1774:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1778:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    177c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1780:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1784:	f805 300a 	strb.w	r3, [r5, sl]
    1788:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    178c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1790:	eb05 0908 	add.w	r9, r5, r8
    1794:	4649      	mov	r1, r9
    1796:	4623      	mov	r3, r4
        g = rhs.g;
    1798:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    179c:	f88b 0002 	strb.w	r0, [fp, #2]
    17a0:	aa02      	add	r2, sp, #8
    17a2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17a4:	f88d 7008 	strb.w	r7, [sp, #8]
    17a8:	f88d 4009 	strb.w	r4, [sp, #9]
    17ac:	f88d 400a 	strb.w	r4, [sp, #10]
    17b0:	f009 f936 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    17b4:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17ba:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    17be:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    17c2:	f89d 000d 	ldrb.w	r0, [sp, #13]
    17c6:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17ca:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    17ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17d6:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17da:	eb05 0e0c 	add.w	lr, r5, ip
    17de:	1868      	adds	r0, r5, r1
    17e0:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    17e2:	2a4a      	cmp	r2, #74	; 0x4a
    17e4:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17e8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18e8 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17ec:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17f0:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17f4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18e0 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17f8:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17fa:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17fc:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    17fe:	d82e      	bhi.n	185e <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1800:	4f3b      	ldr	r7, [pc, #236]	; (18f0 <wipedown()+0x268>)
    1802:	683b      	ldr	r3, [r7, #0]
    1804:	07db      	lsls	r3, r3, #31
    1806:	d517      	bpl.n	1838 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1808:	4d3a      	ldr	r5, [pc, #232]	; (18f4 <wipedown()+0x26c>)
    180a:	4c3b      	ldr	r4, [pc, #236]	; (18f8 <wipedown()+0x270>)
    180c:	682b      	ldr	r3, [r5, #0]
    180e:	9303      	str	r3, [sp, #12]
    1810:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1814:	9b03      	ldr	r3, [sp, #12]
    1816:	1a5b      	subs	r3, r3, r1
    1818:	4293      	cmp	r3, r2
    181a:	7833      	ldrb	r3, [r6, #0]
    181c:	d306      	bcc.n	182c <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    181e:	682a      	ldr	r2, [r5, #0]
    1820:	9202      	str	r2, [sp, #8]
    1822:	3b01      	subs	r3, #1
	return ret;
    1824:	9a02      	ldr	r2, [sp, #8]
    1826:	6022      	str	r2, [r4, #0]
    1828:	b2db      	uxtb	r3, r3
    182a:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    182c:	b90b      	cbnz	r3, 1832 <wipedown()+0x1aa>
		finish_transition();
    182e:	f7ff fbe5 	bl	ffc <finish_transition()>
	}
}
    1832:	b005      	add	sp, #20
    1834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1838:	4638      	mov	r0, r7
    183a:	f00a f83b 	bl	b8b4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    183e:	4d2d      	ldr	r5, [pc, #180]	; (18f4 <wipedown()+0x26c>)
    1840:	2800      	cmp	r0, #0
    1842:	d0e2      	beq.n	180a <wipedown()+0x182>
    1844:	4b2d      	ldr	r3, [pc, #180]	; (18fc <wipedown()+0x274>)
    1846:	682a      	ldr	r2, [r5, #0]
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	4c2b      	ldr	r4, [pc, #172]	; (18f8 <wipedown()+0x270>)
    184c:	9201      	str	r2, [sp, #4]
	return ret;
    184e:	9a01      	ldr	r2, [sp, #4]
    1850:	6022      	str	r2, [r4, #0]
    1852:	009b      	lsls	r3, r3, #2
    1854:	4638      	mov	r0, r7
    1856:	6063      	str	r3, [r4, #4]
    1858:	f00a f832 	bl	b8c0 <__cxa_guard_release>
    185c:	e7d6      	b.n	180c <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    185e:	1c55      	adds	r5, r2, #1
    1860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1864:	eb08 0a05 	add.w	sl, r8, r5
    1868:	4651      	mov	r1, sl
    186a:	4623      	mov	r3, r4
    186c:	aa02      	add	r2, sp, #8
    186e:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1870:	f88d 7008 	strb.w	r7, [sp, #8]
    1874:	f88d 4009 	strb.w	r4, [sp, #9]
    1878:	f88d 400a 	strb.w	r4, [sp, #10]
    187c:	f009 f8d0 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1880:	f899 3000 	ldrb.w	r3, [r9]
    1884:	f88d 7008 	strb.w	r7, [sp, #8]
    1888:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    188c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1890:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1894:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1898:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    189c:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18a0:	f808 c005 	strb.w	ip, [r8, r5]
    18a4:	aa02      	add	r2, sp, #8
    18a6:	4623      	mov	r3, r4
    18a8:	4649      	mov	r1, r9
    18aa:	a803      	add	r0, sp, #12
        g = rhs.g;
    18ac:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    18b0:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18b4:	f88d 4009 	strb.w	r4, [sp, #9]
    18b8:	f88d 400a 	strb.w	r4, [sp, #10]
    18bc:	f009 f8b0 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18cc:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18d0:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18d4:	f889 3002 	strb.w	r3, [r9, #2]
    18d8:	e792      	b.n	1800 <wipedown()+0x178>
    18da:	4d03      	ldr	r5, [pc, #12]	; (18e8 <wipedown()+0x260>)
    18dc:	e70e      	b.n	16fc <wipedown()+0x74>
    18de:	bf00      	nop
    18e0:	1fff9540 	.word	0x1fff9540
    18e4:	1fff9e74 	.word	0x1fff9e74
    18e8:	1fffa6b8 	.word	0x1fffa6b8
    18ec:	1fff8cb0 	.word	0x1fff8cb0
    18f0:	1fff95fc 	.word	0x1fff95fc
    18f4:	1fffa8f8 	.word	0x1fffa8f8
    18f8:	1fff951c 	.word	0x1fff951c
    18fc:	1fff9e5d 	.word	0x1fff9e5d

00001900 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1904:	4ba2      	ldr	r3, [pc, #648]	; (1b90 <wipeup()+0x290>)
    1906:	781d      	ldrb	r5, [r3, #0]
    1908:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    190a:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    190c:	2b00      	cmp	r3, #0
    190e:	f000 8130 	beq.w	1b72 <wipeup()+0x272>
    1912:	f103 3bff 	add.w	fp, r3, #4294967295
    1916:	fa1f fb8b 	uxth.w	fp, fp
    191a:	489e      	ldr	r0, [pc, #632]	; (1b94 <wipeup()+0x294>)
    191c:	499e      	ldr	r1, [pc, #632]	; (1b98 <wipeup()+0x298>)
    191e:	f10b 0b01 	add.w	fp, fp, #1
    1922:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1926:	4483      	add	fp, r0
    1928:	4602      	mov	r2, r0
    192a:	460c      	mov	r4, r1
    192c:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192e:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1932:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1936:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    193a:	f886 e000 	strb.w	lr, [r6]
    193e:	3203      	adds	r2, #3
    1940:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1944:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1948:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    194c:	f886 a001 	strb.w	sl, [r6, #1]
    1950:	455a      	cmp	r2, fp
        b = rhs.b;
    1952:	f886 9002 	strb.w	r9, [r6, #2]
    1956:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    195a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    195e:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    1962:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    1966:	f106 0603 	add.w	r6, r6, #3
    196a:	f1a1 0103 	sub.w	r1, r1, #3
    196e:	d1de      	bne.n	192e <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1970:	2b4a      	cmp	r3, #74	; 0x4a
    1972:	d828      	bhi.n	19c6 <wipeup()+0xc6>
    1974:	4889      	ldr	r0, [pc, #548]	; (1b9c <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    1976:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    197a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    197e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1982:	eb00 0801 	add.w	r8, r0, r1
    1986:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    198a:	3301      	adds	r3, #1
    198c:	eb04 0e01 	add.w	lr, r4, r1
    1990:	f810 b001 	ldrb.w	fp, [r0, r1]
    1994:	f804 b001 	strb.w	fp, [r4, r1]
    1998:	18a6      	adds	r6, r4, r2
    199a:	b29b      	uxth	r3, r3
        g = rhs.g;
    199c:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    19a0:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19a4:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19a8:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    19ac:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19b0:	f88e a001 	strb.w	sl, [lr, #1]
    19b4:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    19b6:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19ba:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    19be:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    19c2:	70b1      	strb	r1, [r6, #2]
    19c4:	d1d7      	bne.n	1976 <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    19c6:	2d00      	cmp	r5, #0
    19c8:	f040 808f 	bne.w	1aea <wipeup()+0x1ea>
    19cc:	f10d 0a0c 	add.w	sl, sp, #12
    19d0:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19d4:	4b6e      	ldr	r3, [pc, #440]	; (1b90 <wipeup()+0x290>)
    19d6:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    19d8:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    19e0:	1c5a      	adds	r2, r3, #1
    19e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19e6:	eb04 0e03 	add.w	lr, r4, r3
    19ea:	1825      	adds	r5, r4, r0
    19ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19f0:	2680      	movs	r6, #128	; 0x80
    19f2:	eb04 0902 	add.w	r9, r4, r2
    19f6:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19f8:	22ff      	movs	r2, #255	; 0xff
    19fa:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19fc:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1a00:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1a04:	f88e 2002 	strb.w	r2, [lr, #2]
    1a08:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a0a:	5422      	strb	r2, [r4, r0]
    1a0c:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a0e:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a10:	70aa      	strb	r2, [r5, #2]
    1a12:	4650      	mov	r0, sl
    1a14:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a16:	f88d 6009 	strb.w	r6, [sp, #9]
    1a1a:	f88d 600a 	strb.w	r6, [sp, #10]
    1a1e:	f88d 8008 	strb.w	r8, [sp, #8]
    1a22:	f008 fffd 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a26:	4b5a      	ldr	r3, [pc, #360]	; (1b90 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a28:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a2c:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a2e:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a32:	f88d 8008 	strb.w	r8, [sp, #8]
    1a36:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a3e:	eb04 0805 	add.w	r8, r4, r5
    1a42:	4633      	mov	r3, r6
    1a44:	f88d 6009 	strb.w	r6, [sp, #9]
    1a48:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a4c:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a50:	55e1      	strb	r1, [r4, r7]
    1a52:	465a      	mov	r2, fp
    1a54:	4650      	mov	r0, sl
    1a56:	4641      	mov	r1, r8
        g = rhs.g;
    1a58:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a5c:	f889 6002 	strb.w	r6, [r9, #2]
    1a60:	f008 ffde 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a64:	4b4e      	ldr	r3, [pc, #312]	; (1ba0 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a66:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a6a:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a6c:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a70:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a74:	5560      	strb	r0, [r4, r5]
    1a76:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a78:	4845      	ldr	r0, [pc, #276]	; (1b90 <wipeup()+0x290>)
        g = rhs.g;
    1a7a:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a7e:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a82:	d520      	bpl.n	1ac6 <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a84:	4d47      	ldr	r5, [pc, #284]	; (1ba4 <wipeup()+0x2a4>)
    1a86:	4c48      	ldr	r4, [pc, #288]	; (1ba8 <wipeup()+0x2a8>)
    1a88:	682b      	ldr	r3, [r5, #0]
    1a8a:	9303      	str	r3, [sp, #12]
    1a8c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	1a5b      	subs	r3, r3, r1
    1a94:	4293      	cmp	r3, r2
    1a96:	d30e      	bcc.n	1ab6 <wipeup()+0x1b6>
    1a98:	4b3d      	ldr	r3, [pc, #244]	; (1b90 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a9a:	682a      	ldr	r2, [r5, #0]
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	9202      	str	r2, [sp, #8]
	return ret;
    1aa0:	9a02      	ldr	r2, [sp, #8]
    1aa2:	6022      	str	r2, [r4, #0]
    1aa4:	3301      	adds	r3, #1
    1aa6:	4a3a      	ldr	r2, [pc, #232]	; (1b90 <wipeup()+0x290>)
    1aa8:	b2db      	uxtb	r3, r3
    1aaa:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1aac:	2b4a      	cmp	r3, #74	; 0x4a
    1aae:	d005      	beq.n	1abc <wipeup()+0x1bc>
		finish_transition();
	}
}
    1ab0:	b005      	add	sp, #20
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1ab8:	2b4a      	cmp	r3, #74	; 0x4a
    1aba:	d1f9      	bne.n	1ab0 <wipeup()+0x1b0>
		finish_transition();
    1abc:	f7ff fa9e 	bl	ffc <finish_transition()>
	}
}
    1ac0:	b005      	add	sp, #20
    1ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1ac6:	4836      	ldr	r0, [pc, #216]	; (1ba0 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac8:	4d36      	ldr	r5, [pc, #216]	; (1ba4 <wipeup()+0x2a4>)
    1aca:	f009 fef3 	bl	b8b4 <__cxa_guard_acquire>
    1ace:	2800      	cmp	r0, #0
    1ad0:	d151      	bne.n	1b76 <wipeup()+0x276>
    1ad2:	4c35      	ldr	r4, [pc, #212]	; (1ba8 <wipeup()+0x2a8>)
    1ad4:	682b      	ldr	r3, [r5, #0]
    1ad6:	9303      	str	r3, [sp, #12]
    1ad8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1adc:	9b03      	ldr	r3, [sp, #12]
    1ade:	1a5b      	subs	r3, r3, r1
    1ae0:	4293      	cmp	r3, r2
    1ae2:	d2d9      	bcs.n	1a98 <wipeup()+0x198>
    1ae4:	4b2a      	ldr	r3, [pc, #168]	; (1b90 <wipeup()+0x290>)
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	e7e0      	b.n	1aac <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1aea:	3d01      	subs	r5, #1
    1aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1af0:	2680      	movs	r6, #128	; 0x80
    1af2:	eb04 0905 	add.w	r9, r4, r5
    1af6:	f10d 0a0c 	add.w	sl, sp, #12
    1afa:	f10d 0b08 	add.w	fp, sp, #8
    1afe:	f04f 0800 	mov.w	r8, #0
    1b02:	4649      	mov	r1, r9
    1b04:	4633      	mov	r3, r6
    1b06:	4650      	mov	r0, sl
    1b08:	465a      	mov	r2, fp
    1b0a:	f88d 8008 	strb.w	r8, [sp, #8]
    1b0e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b12:	f88d 600a 	strb.w	r6, [sp, #10]
    1b16:	f008 ff83 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b1a:	4b1d      	ldr	r3, [pc, #116]	; (1b90 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b1c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b20:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b22:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b26:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b2a:	f88d 8008 	strb.w	r8, [sp, #8]
    1b2e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b36:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b3a:	5562      	strb	r2, [r4, r5]
    1b3c:	461f      	mov	r7, r3
    1b3e:	4641      	mov	r1, r8
    1b40:	4633      	mov	r3, r6
    1b42:	465a      	mov	r2, fp
    1b44:	4650      	mov	r0, sl
        g = rhs.g;
    1b46:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b4a:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b4e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b52:	f88d 600a 	strb.w	r6, [sp, #10]
    1b56:	f008 ff63 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b5a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b66:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b68:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b6c:	f888 3002 	strb.w	r3, [r8, #2]
    1b70:	e730      	b.n	19d4 <wipeup()+0xd4>
    1b72:	4c09      	ldr	r4, [pc, #36]	; (1b98 <wipeup()+0x298>)
    1b74:	e6fe      	b.n	1974 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b76:	4b0d      	ldr	r3, [pc, #52]	; (1bac <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b78:	682a      	ldr	r2, [r5, #0]
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	4c0a      	ldr	r4, [pc, #40]	; (1ba8 <wipeup()+0x2a8>)
    1b7e:	9201      	str	r2, [sp, #4]
	return ret;
    1b80:	9a01      	ldr	r2, [sp, #4]
    1b82:	6022      	str	r2, [r4, #0]
    1b84:	009b      	lsls	r3, r3, #2
    1b86:	4806      	ldr	r0, [pc, #24]	; (1ba0 <wipeup()+0x2a0>)
    1b88:	6063      	str	r3, [r4, #4]
    1b8a:	f009 fe99 	bl	b8c0 <__cxa_guard_release>
    1b8e:	e7a1      	b.n	1ad4 <wipeup()+0x1d4>
    1b90:	1fff9540 	.word	0x1fff9540
    1b94:	1fff8cb0 	.word	0x1fff8cb0
    1b98:	1fffa6b8 	.word	0x1fffa6b8
    1b9c:	1fff9e74 	.word	0x1fff9e74
    1ba0:	1fff9600 	.word	0x1fff9600
    1ba4:	1fffa8f8 	.word	0x1fffa8f8
    1ba8:	1fff9e60 	.word	0x1fff9e60
    1bac:	1fff9e5d 	.word	0x1fff9e5d

00001bb0 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1bb0:	2801      	cmp	r0, #1
    1bb2:	d006      	beq.n	1bc2 <switch_transition(TransitionType)+0x12>
    1bb4:	d303      	bcc.n	1bbe <switch_transition(TransitionType)+0xe>
    1bb6:	2802      	cmp	r0, #2
    1bb8:	d101      	bne.n	1bbe <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1bba:	f7ff bea1 	b.w	1900 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1bbe:	f7ff bcf1 	b.w	15a4 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1bc2:	f7ff bd61 	b.w	1688 <wipedown()>
    1bc6:	bf00      	nop

00001bc8 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1bc8:	b510      	push	{r4, lr}
    1bca:	2110      	movs	r1, #16
    1bcc:	4604      	mov	r4, r0
    1bce:	4894      	ldr	r0, [pc, #592]	; (1e20 <print_palette(unsigned char)+0x258>)
    1bd0:	f00a ff08 	bl	c9e4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1bd4:	4621      	mov	r1, r4
    1bd6:	2300      	movs	r3, #0
    1bd8:	220a      	movs	r2, #10
    1bda:	4892      	ldr	r0, [pc, #584]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1bdc:	f00b f916 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1be0:	2102      	movs	r1, #2
    1be2:	4891      	ldr	r0, [pc, #580]	; (1e28 <print_palette(unsigned char)+0x260>)
    1be4:	f00a fefe 	bl	c9e4 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1be8:	2c5c      	cmp	r4, #92	; 0x5c
    1bea:	f200 8281 	bhi.w	20f0 <print_palette(unsigned char)+0x528>
    1bee:	e8df f014 	tbh	[pc, r4, lsl #1]
    1bf2:	027a      	.short	0x027a
    1bf4:	02700275 	.word	0x02700275
    1bf8:	0266026b 	.word	0x0266026b
    1bfc:	025c0261 	.word	0x025c0261
    1c00:	02520257 	.word	0x02520257
    1c04:	0248024d 	.word	0x0248024d
    1c08:	023e0243 	.word	0x023e0243
    1c0c:	02340239 	.word	0x02340239
    1c10:	022a022f 	.word	0x022a022f
    1c14:	02200225 	.word	0x02200225
    1c18:	0216021b 	.word	0x0216021b
    1c1c:	020c0211 	.word	0x020c0211
    1c20:	02020207 	.word	0x02020207
    1c24:	01f801fd 	.word	0x01f801fd
    1c28:	01ee01f3 	.word	0x01ee01f3
    1c2c:	01e401e9 	.word	0x01e401e9
    1c30:	01da01df 	.word	0x01da01df
    1c34:	01d001d5 	.word	0x01d001d5
    1c38:	01c601cb 	.word	0x01c601cb
    1c3c:	01bc01c1 	.word	0x01bc01c1
    1c40:	01b201b7 	.word	0x01b201b7
    1c44:	01a801ad 	.word	0x01a801ad
    1c48:	019e01a3 	.word	0x019e01a3
    1c4c:	01940199 	.word	0x01940199
    1c50:	018a018f 	.word	0x018a018f
    1c54:	01800185 	.word	0x01800185
    1c58:	0176017b 	.word	0x0176017b
    1c5c:	016c0171 	.word	0x016c0171
    1c60:	01110167 	.word	0x01110167
    1c64:	0107010c 	.word	0x0107010c
    1c68:	00fd0102 	.word	0x00fd0102
    1c6c:	00f300f8 	.word	0x00f300f8
    1c70:	00e900ee 	.word	0x00e900ee
    1c74:	00df00e4 	.word	0x00df00e4
    1c78:	00d500da 	.word	0x00d500da
    1c7c:	00cb00d0 	.word	0x00cb00d0
    1c80:	00c100c6 	.word	0x00c100c6
    1c84:	00b700bc 	.word	0x00b700bc
    1c88:	00ad00b2 	.word	0x00ad00b2
    1c8c:	00a300a8 	.word	0x00a300a8
    1c90:	0099009e 	.word	0x0099009e
    1c94:	008f0094 	.word	0x008f0094
    1c98:	0085008a 	.word	0x0085008a
    1c9c:	007b0080 	.word	0x007b0080
    1ca0:	00710076 	.word	0x00710076
    1ca4:	0067006c 	.word	0x0067006c
    1ca8:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1cac:	495f      	ldr	r1, [pc, #380]	; (1e2c <print_palette(unsigned char)+0x264>)
    1cae:	485d      	ldr	r0, [pc, #372]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cb0:	f7fe fdf4 	bl	89c <Print::println(char const*)>
    1cb4:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1cb6:	495e      	ldr	r1, [pc, #376]	; (1e30 <print_palette(unsigned char)+0x268>)
    1cb8:	485a      	ldr	r0, [pc, #360]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cba:	f7fe fdef 	bl	89c <Print::println(char const*)>
    1cbe:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1cc0:	495c      	ldr	r1, [pc, #368]	; (1e34 <print_palette(unsigned char)+0x26c>)
    1cc2:	4858      	ldr	r0, [pc, #352]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cc4:	f7fe fdea 	bl	89c <Print::println(char const*)>
    1cc8:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1cca:	495b      	ldr	r1, [pc, #364]	; (1e38 <print_palette(unsigned char)+0x270>)
    1ccc:	4855      	ldr	r0, [pc, #340]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cce:	f7fe fde5 	bl	89c <Print::println(char const*)>
    1cd2:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1cd4:	4959      	ldr	r1, [pc, #356]	; (1e3c <print_palette(unsigned char)+0x274>)
    1cd6:	4853      	ldr	r0, [pc, #332]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cd8:	f7fe fde0 	bl	89c <Print::println(char const*)>
    1cdc:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1cde:	4958      	ldr	r1, [pc, #352]	; (1e40 <print_palette(unsigned char)+0x278>)
    1ce0:	4850      	ldr	r0, [pc, #320]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1ce2:	f7fe fddb 	bl	89c <Print::println(char const*)>
    1ce6:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1ce8:	4956      	ldr	r1, [pc, #344]	; (1e44 <print_palette(unsigned char)+0x27c>)
    1cea:	484e      	ldr	r0, [pc, #312]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cec:	f7fe fdd6 	bl	89c <Print::println(char const*)>
    1cf0:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1cf2:	4955      	ldr	r1, [pc, #340]	; (1e48 <print_palette(unsigned char)+0x280>)
    1cf4:	484b      	ldr	r0, [pc, #300]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cf6:	f7fe fdd1 	bl	89c <Print::println(char const*)>
    1cfa:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1cfc:	4953      	ldr	r1, [pc, #332]	; (1e4c <print_palette(unsigned char)+0x284>)
    1cfe:	4849      	ldr	r0, [pc, #292]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d00:	f7fe fdcc 	bl	89c <Print::println(char const*)>
    1d04:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1d06:	4952      	ldr	r1, [pc, #328]	; (1e50 <print_palette(unsigned char)+0x288>)
    1d08:	4846      	ldr	r0, [pc, #280]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d0a:	f7fe fdc7 	bl	89c <Print::println(char const*)>
    1d0e:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d10:	4950      	ldr	r1, [pc, #320]	; (1e54 <print_palette(unsigned char)+0x28c>)
    1d12:	4844      	ldr	r0, [pc, #272]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d14:	f7fe fdc2 	bl	89c <Print::println(char const*)>
    1d18:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d1a:	494f      	ldr	r1, [pc, #316]	; (1e58 <print_palette(unsigned char)+0x290>)
    1d1c:	4841      	ldr	r0, [pc, #260]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d1e:	f7fe fdbd 	bl	89c <Print::println(char const*)>
    1d22:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d24:	494d      	ldr	r1, [pc, #308]	; (1e5c <print_palette(unsigned char)+0x294>)
    1d26:	483f      	ldr	r0, [pc, #252]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d28:	f7fe fdb8 	bl	89c <Print::println(char const*)>
    1d2c:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d2e:	494c      	ldr	r1, [pc, #304]	; (1e60 <print_palette(unsigned char)+0x298>)
    1d30:	483c      	ldr	r0, [pc, #240]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d32:	f7fe fdb3 	bl	89c <Print::println(char const*)>
    1d36:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d38:	494a      	ldr	r1, [pc, #296]	; (1e64 <print_palette(unsigned char)+0x29c>)
    1d3a:	483a      	ldr	r0, [pc, #232]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d3c:	f7fe fdae 	bl	89c <Print::println(char const*)>
    1d40:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d42:	4949      	ldr	r1, [pc, #292]	; (1e68 <print_palette(unsigned char)+0x2a0>)
    1d44:	4837      	ldr	r0, [pc, #220]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d46:	f7fe fda9 	bl	89c <Print::println(char const*)>
    1d4a:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d4c:	4947      	ldr	r1, [pc, #284]	; (1e6c <print_palette(unsigned char)+0x2a4>)
    1d4e:	4835      	ldr	r0, [pc, #212]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d50:	f7fe fda4 	bl	89c <Print::println(char const*)>
    1d54:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d56:	4946      	ldr	r1, [pc, #280]	; (1e70 <print_palette(unsigned char)+0x2a8>)
    1d58:	4832      	ldr	r0, [pc, #200]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d5a:	f7fe fd9f 	bl	89c <Print::println(char const*)>
    1d5e:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d60:	4944      	ldr	r1, [pc, #272]	; (1e74 <print_palette(unsigned char)+0x2ac>)
    1d62:	4830      	ldr	r0, [pc, #192]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d64:	f7fe fd9a 	bl	89c <Print::println(char const*)>
    1d68:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d6a:	4943      	ldr	r1, [pc, #268]	; (1e78 <print_palette(unsigned char)+0x2b0>)
    1d6c:	482d      	ldr	r0, [pc, #180]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d6e:	f7fe fd95 	bl	89c <Print::println(char const*)>
    1d72:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d74:	4941      	ldr	r1, [pc, #260]	; (1e7c <print_palette(unsigned char)+0x2b4>)
    1d76:	482b      	ldr	r0, [pc, #172]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d78:	f7fe fd90 	bl	89c <Print::println(char const*)>
    1d7c:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d7e:	4940      	ldr	r1, [pc, #256]	; (1e80 <print_palette(unsigned char)+0x2b8>)
    1d80:	4828      	ldr	r0, [pc, #160]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d82:	f7fe fd8b 	bl	89c <Print::println(char const*)>
    1d86:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d88:	493e      	ldr	r1, [pc, #248]	; (1e84 <print_palette(unsigned char)+0x2bc>)
    1d8a:	4826      	ldr	r0, [pc, #152]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d8c:	f7fe fd86 	bl	89c <Print::println(char const*)>
    1d90:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d92:	493d      	ldr	r1, [pc, #244]	; (1e88 <print_palette(unsigned char)+0x2c0>)
    1d94:	4823      	ldr	r0, [pc, #140]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d96:	f7fe fd81 	bl	89c <Print::println(char const*)>
    1d9a:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d9c:	493b      	ldr	r1, [pc, #236]	; (1e8c <print_palette(unsigned char)+0x2c4>)
    1d9e:	4821      	ldr	r0, [pc, #132]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1da0:	f7fe fd7c 	bl	89c <Print::println(char const*)>
    1da4:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1da6:	493a      	ldr	r1, [pc, #232]	; (1e90 <print_palette(unsigned char)+0x2c8>)
    1da8:	481e      	ldr	r0, [pc, #120]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1daa:	f7fe fd77 	bl	89c <Print::println(char const*)>
    1dae:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1db0:	4938      	ldr	r1, [pc, #224]	; (1e94 <print_palette(unsigned char)+0x2cc>)
    1db2:	481c      	ldr	r0, [pc, #112]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1db4:	f7fe fd72 	bl	89c <Print::println(char const*)>
    1db8:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1dba:	4937      	ldr	r1, [pc, #220]	; (1e98 <print_palette(unsigned char)+0x2d0>)
    1dbc:	4819      	ldr	r0, [pc, #100]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dbe:	f7fe fd6d 	bl	89c <Print::println(char const*)>
    1dc2:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1dc4:	4935      	ldr	r1, [pc, #212]	; (1e9c <print_palette(unsigned char)+0x2d4>)
    1dc6:	4817      	ldr	r0, [pc, #92]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dc8:	f7fe fd68 	bl	89c <Print::println(char const*)>
    1dcc:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1dce:	4934      	ldr	r1, [pc, #208]	; (1ea0 <print_palette(unsigned char)+0x2d8>)
    1dd0:	4814      	ldr	r0, [pc, #80]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dd2:	f7fe fd63 	bl	89c <Print::println(char const*)>
    1dd6:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1dd8:	4932      	ldr	r1, [pc, #200]	; (1ea4 <print_palette(unsigned char)+0x2dc>)
    1dda:	4812      	ldr	r0, [pc, #72]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1ddc:	f7fe fd5e 	bl	89c <Print::println(char const*)>
    1de0:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1de2:	4931      	ldr	r1, [pc, #196]	; (1ea8 <print_palette(unsigned char)+0x2e0>)
    1de4:	480f      	ldr	r0, [pc, #60]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1de6:	f7fe fd59 	bl	89c <Print::println(char const*)>
    1dea:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1dec:	492f      	ldr	r1, [pc, #188]	; (1eac <print_palette(unsigned char)+0x2e4>)
    1dee:	480d      	ldr	r0, [pc, #52]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1df0:	f7fe fd54 	bl	89c <Print::println(char const*)>
    1df4:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1df6:	492e      	ldr	r1, [pc, #184]	; (1eb0 <print_palette(unsigned char)+0x2e8>)
    1df8:	480a      	ldr	r0, [pc, #40]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dfa:	f7fe fd4f 	bl	89c <Print::println(char const*)>
    1dfe:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1e00:	492c      	ldr	r1, [pc, #176]	; (1eb4 <print_palette(unsigned char)+0x2ec>)
    1e02:	4808      	ldr	r0, [pc, #32]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e04:	f7fe fd4a 	bl	89c <Print::println(char const*)>
    1e08:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e0a:	492b      	ldr	r1, [pc, #172]	; (1eb8 <print_palette(unsigned char)+0x2f0>)
    1e0c:	4805      	ldr	r0, [pc, #20]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e0e:	f7fe fd45 	bl	89c <Print::println(char const*)>
    1e12:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e14:	4929      	ldr	r1, [pc, #164]	; (1ebc <print_palette(unsigned char)+0x2f4>)
    1e16:	4803      	ldr	r0, [pc, #12]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e18:	f7fe fd40 	bl	89c <Print::println(char const*)>
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	bf00      	nop
    1e20:	0000e734 	.word	0x0000e734
    1e24:	1fff878c 	.word	0x1fff878c
    1e28:	0000e748 	.word	0x0000e748
    1e2c:	0000ecdc 	.word	0x0000ecdc
    1e30:	0000ecd0 	.word	0x0000ecd0
    1e34:	0000ecc0 	.word	0x0000ecc0
    1e38:	0000ecb0 	.word	0x0000ecb0
    1e3c:	0000ec9c 	.word	0x0000ec9c
    1e40:	0000ec84 	.word	0x0000ec84
    1e44:	0000ec6c 	.word	0x0000ec6c
    1e48:	0000ec5c 	.word	0x0000ec5c
    1e4c:	0000ec44 	.word	0x0000ec44
    1e50:	0000ec38 	.word	0x0000ec38
    1e54:	0000ec2c 	.word	0x0000ec2c
    1e58:	0000ec14 	.word	0x0000ec14
    1e5c:	0000ec08 	.word	0x0000ec08
    1e60:	0000ebfc 	.word	0x0000ebfc
    1e64:	0000ebf0 	.word	0x0000ebf0
    1e68:	0000ebe4 	.word	0x0000ebe4
    1e6c:	0000ebd4 	.word	0x0000ebd4
    1e70:	0000ebc8 	.word	0x0000ebc8
    1e74:	0000ebb4 	.word	0x0000ebb4
    1e78:	0000eba8 	.word	0x0000eba8
    1e7c:	0000eb98 	.word	0x0000eb98
    1e80:	0000eb8c 	.word	0x0000eb8c
    1e84:	0000eb80 	.word	0x0000eb80
    1e88:	0000eb78 	.word	0x0000eb78
    1e8c:	0000eb64 	.word	0x0000eb64
    1e90:	0000eb54 	.word	0x0000eb54
    1e94:	0000eb40 	.word	0x0000eb40
    1e98:	0000eb34 	.word	0x0000eb34
    1e9c:	0000eb28 	.word	0x0000eb28
    1ea0:	0000eb1c 	.word	0x0000eb1c
    1ea4:	0000eb0c 	.word	0x0000eb0c
    1ea8:	0000eaf8 	.word	0x0000eaf8
    1eac:	0000eaec 	.word	0x0000eaec
    1eb0:	0000eadc 	.word	0x0000eadc
    1eb4:	0000ead0 	.word	0x0000ead0
    1eb8:	0000eac0 	.word	0x0000eac0
    1ebc:	0000eab4 	.word	0x0000eab4
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1ec0:	498e      	ldr	r1, [pc, #568]	; (20fc <print_palette(unsigned char)+0x534>)
    1ec2:	488f      	ldr	r0, [pc, #572]	; (2100 <print_palette(unsigned char)+0x538>)
    1ec4:	f7fe fcea 	bl	89c <Print::println(char const*)>
    1ec8:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1eca:	498e      	ldr	r1, [pc, #568]	; (2104 <print_palette(unsigned char)+0x53c>)
    1ecc:	488c      	ldr	r0, [pc, #560]	; (2100 <print_palette(unsigned char)+0x538>)
    1ece:	f7fe fce5 	bl	89c <Print::println(char const*)>
    1ed2:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1ed4:	498c      	ldr	r1, [pc, #560]	; (2108 <print_palette(unsigned char)+0x540>)
    1ed6:	488a      	ldr	r0, [pc, #552]	; (2100 <print_palette(unsigned char)+0x538>)
    1ed8:	f7fe fce0 	bl	89c <Print::println(char const*)>
    1edc:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1ede:	498b      	ldr	r1, [pc, #556]	; (210c <print_palette(unsigned char)+0x544>)
    1ee0:	4887      	ldr	r0, [pc, #540]	; (2100 <print_palette(unsigned char)+0x538>)
    1ee2:	f7fe fcdb 	bl	89c <Print::println(char const*)>
    1ee6:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1ee8:	4989      	ldr	r1, [pc, #548]	; (2110 <print_palette(unsigned char)+0x548>)
    1eea:	4885      	ldr	r0, [pc, #532]	; (2100 <print_palette(unsigned char)+0x538>)
    1eec:	f7fe fcd6 	bl	89c <Print::println(char const*)>
    1ef0:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1ef2:	4988      	ldr	r1, [pc, #544]	; (2114 <print_palette(unsigned char)+0x54c>)
    1ef4:	4882      	ldr	r0, [pc, #520]	; (2100 <print_palette(unsigned char)+0x538>)
    1ef6:	f7fe fcd1 	bl	89c <Print::println(char const*)>
    1efa:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1efc:	4986      	ldr	r1, [pc, #536]	; (2118 <print_palette(unsigned char)+0x550>)
    1efe:	4880      	ldr	r0, [pc, #512]	; (2100 <print_palette(unsigned char)+0x538>)
    1f00:	f7fe fccc 	bl	89c <Print::println(char const*)>
    1f04:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1f06:	4985      	ldr	r1, [pc, #532]	; (211c <print_palette(unsigned char)+0x554>)
    1f08:	487d      	ldr	r0, [pc, #500]	; (2100 <print_palette(unsigned char)+0x538>)
    1f0a:	f7fe fcc7 	bl	89c <Print::println(char const*)>
    1f0e:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f10:	4983      	ldr	r1, [pc, #524]	; (2120 <print_palette(unsigned char)+0x558>)
    1f12:	487b      	ldr	r0, [pc, #492]	; (2100 <print_palette(unsigned char)+0x538>)
    1f14:	f7fe fcc2 	bl	89c <Print::println(char const*)>
    1f18:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f1a:	4982      	ldr	r1, [pc, #520]	; (2124 <print_palette(unsigned char)+0x55c>)
    1f1c:	4878      	ldr	r0, [pc, #480]	; (2100 <print_palette(unsigned char)+0x538>)
    1f1e:	f7fe fcbd 	bl	89c <Print::println(char const*)>
    1f22:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f24:	4980      	ldr	r1, [pc, #512]	; (2128 <print_palette(unsigned char)+0x560>)
    1f26:	4876      	ldr	r0, [pc, #472]	; (2100 <print_palette(unsigned char)+0x538>)
    1f28:	f7fe fcb8 	bl	89c <Print::println(char const*)>
    1f2c:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f2e:	497f      	ldr	r1, [pc, #508]	; (212c <print_palette(unsigned char)+0x564>)
    1f30:	4873      	ldr	r0, [pc, #460]	; (2100 <print_palette(unsigned char)+0x538>)
    1f32:	f7fe fcb3 	bl	89c <Print::println(char const*)>
    1f36:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f38:	497d      	ldr	r1, [pc, #500]	; (2130 <print_palette(unsigned char)+0x568>)
    1f3a:	4871      	ldr	r0, [pc, #452]	; (2100 <print_palette(unsigned char)+0x538>)
    1f3c:	f7fe fcae 	bl	89c <Print::println(char const*)>
    1f40:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f42:	497c      	ldr	r1, [pc, #496]	; (2134 <print_palette(unsigned char)+0x56c>)
    1f44:	486e      	ldr	r0, [pc, #440]	; (2100 <print_palette(unsigned char)+0x538>)
    1f46:	f7fe fca9 	bl	89c <Print::println(char const*)>
    1f4a:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f4c:	497a      	ldr	r1, [pc, #488]	; (2138 <print_palette(unsigned char)+0x570>)
    1f4e:	486c      	ldr	r0, [pc, #432]	; (2100 <print_palette(unsigned char)+0x538>)
    1f50:	f7fe fca4 	bl	89c <Print::println(char const*)>
    1f54:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f56:	4979      	ldr	r1, [pc, #484]	; (213c <print_palette(unsigned char)+0x574>)
    1f58:	4869      	ldr	r0, [pc, #420]	; (2100 <print_palette(unsigned char)+0x538>)
    1f5a:	f7fe fc9f 	bl	89c <Print::println(char const*)>
    1f5e:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f60:	4977      	ldr	r1, [pc, #476]	; (2140 <print_palette(unsigned char)+0x578>)
    1f62:	4867      	ldr	r0, [pc, #412]	; (2100 <print_palette(unsigned char)+0x538>)
    1f64:	f7fe fc9a 	bl	89c <Print::println(char const*)>
    1f68:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f6a:	4976      	ldr	r1, [pc, #472]	; (2144 <print_palette(unsigned char)+0x57c>)
    1f6c:	4864      	ldr	r0, [pc, #400]	; (2100 <print_palette(unsigned char)+0x538>)
    1f6e:	f7fe fc95 	bl	89c <Print::println(char const*)>
    1f72:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f74:	4974      	ldr	r1, [pc, #464]	; (2148 <print_palette(unsigned char)+0x580>)
    1f76:	4862      	ldr	r0, [pc, #392]	; (2100 <print_palette(unsigned char)+0x538>)
    1f78:	f7fe fc90 	bl	89c <Print::println(char const*)>
    1f7c:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f7e:	4973      	ldr	r1, [pc, #460]	; (214c <print_palette(unsigned char)+0x584>)
    1f80:	485f      	ldr	r0, [pc, #380]	; (2100 <print_palette(unsigned char)+0x538>)
    1f82:	f7fe fc8b 	bl	89c <Print::println(char const*)>
    1f86:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f88:	4971      	ldr	r1, [pc, #452]	; (2150 <print_palette(unsigned char)+0x588>)
    1f8a:	485d      	ldr	r0, [pc, #372]	; (2100 <print_palette(unsigned char)+0x538>)
    1f8c:	f7fe fc86 	bl	89c <Print::println(char const*)>
    1f90:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f92:	4970      	ldr	r1, [pc, #448]	; (2154 <print_palette(unsigned char)+0x58c>)
    1f94:	485a      	ldr	r0, [pc, #360]	; (2100 <print_palette(unsigned char)+0x538>)
    1f96:	f7fe fc81 	bl	89c <Print::println(char const*)>
    1f9a:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f9c:	496e      	ldr	r1, [pc, #440]	; (2158 <print_palette(unsigned char)+0x590>)
    1f9e:	4858      	ldr	r0, [pc, #352]	; (2100 <print_palette(unsigned char)+0x538>)
    1fa0:	f7fe fc7c 	bl	89c <Print::println(char const*)>
    1fa4:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1fa6:	496d      	ldr	r1, [pc, #436]	; (215c <print_palette(unsigned char)+0x594>)
    1fa8:	4855      	ldr	r0, [pc, #340]	; (2100 <print_palette(unsigned char)+0x538>)
    1faa:	f7fe fc77 	bl	89c <Print::println(char const*)>
    1fae:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1fb0:	496b      	ldr	r1, [pc, #428]	; (2160 <print_palette(unsigned char)+0x598>)
    1fb2:	4853      	ldr	r0, [pc, #332]	; (2100 <print_palette(unsigned char)+0x538>)
    1fb4:	f7fe fc72 	bl	89c <Print::println(char const*)>
    1fb8:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1fba:	496a      	ldr	r1, [pc, #424]	; (2164 <print_palette(unsigned char)+0x59c>)
    1fbc:	4850      	ldr	r0, [pc, #320]	; (2100 <print_palette(unsigned char)+0x538>)
    1fbe:	f7fe fc6d 	bl	89c <Print::println(char const*)>
    1fc2:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1fc4:	4968      	ldr	r1, [pc, #416]	; (2168 <print_palette(unsigned char)+0x5a0>)
    1fc6:	484e      	ldr	r0, [pc, #312]	; (2100 <print_palette(unsigned char)+0x538>)
    1fc8:	f7fe fc68 	bl	89c <Print::println(char const*)>
    1fcc:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1fce:	4967      	ldr	r1, [pc, #412]	; (216c <print_palette(unsigned char)+0x5a4>)
    1fd0:	484b      	ldr	r0, [pc, #300]	; (2100 <print_palette(unsigned char)+0x538>)
    1fd2:	f7fe fc63 	bl	89c <Print::println(char const*)>
    1fd6:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1fd8:	4965      	ldr	r1, [pc, #404]	; (2170 <print_palette(unsigned char)+0x5a8>)
    1fda:	4849      	ldr	r0, [pc, #292]	; (2100 <print_palette(unsigned char)+0x538>)
    1fdc:	f7fe fc5e 	bl	89c <Print::println(char const*)>
    1fe0:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1fe2:	4964      	ldr	r1, [pc, #400]	; (2174 <print_palette(unsigned char)+0x5ac>)
    1fe4:	4846      	ldr	r0, [pc, #280]	; (2100 <print_palette(unsigned char)+0x538>)
    1fe6:	f7fe fc59 	bl	89c <Print::println(char const*)>
    1fea:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fec:	4962      	ldr	r1, [pc, #392]	; (2178 <print_palette(unsigned char)+0x5b0>)
    1fee:	4844      	ldr	r0, [pc, #272]	; (2100 <print_palette(unsigned char)+0x538>)
    1ff0:	f7fe fc54 	bl	89c <Print::println(char const*)>
    1ff4:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1ff6:	4961      	ldr	r1, [pc, #388]	; (217c <print_palette(unsigned char)+0x5b4>)
    1ff8:	4841      	ldr	r0, [pc, #260]	; (2100 <print_palette(unsigned char)+0x538>)
    1ffa:	f7fe fc4f 	bl	89c <Print::println(char const*)>
    1ffe:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2000:	495f      	ldr	r1, [pc, #380]	; (2180 <print_palette(unsigned char)+0x5b8>)
    2002:	483f      	ldr	r0, [pc, #252]	; (2100 <print_palette(unsigned char)+0x538>)
    2004:	f7fe fc4a 	bl	89c <Print::println(char const*)>
    2008:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    200a:	495e      	ldr	r1, [pc, #376]	; (2184 <print_palette(unsigned char)+0x5bc>)
    200c:	483c      	ldr	r0, [pc, #240]	; (2100 <print_palette(unsigned char)+0x538>)
    200e:	f7fe fc45 	bl	89c <Print::println(char const*)>
    2012:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    2014:	495c      	ldr	r1, [pc, #368]	; (2188 <print_palette(unsigned char)+0x5c0>)
    2016:	483a      	ldr	r0, [pc, #232]	; (2100 <print_palette(unsigned char)+0x538>)
    2018:	f7fe fc40 	bl	89c <Print::println(char const*)>
    201c:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    201e:	495b      	ldr	r1, [pc, #364]	; (218c <print_palette(unsigned char)+0x5c4>)
    2020:	4837      	ldr	r0, [pc, #220]	; (2100 <print_palette(unsigned char)+0x538>)
    2022:	f7fe fc3b 	bl	89c <Print::println(char const*)>
    2026:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2028:	4959      	ldr	r1, [pc, #356]	; (2190 <print_palette(unsigned char)+0x5c8>)
    202a:	4835      	ldr	r0, [pc, #212]	; (2100 <print_palette(unsigned char)+0x538>)
    202c:	f7fe fc36 	bl	89c <Print::println(char const*)>
    2030:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    2032:	4958      	ldr	r1, [pc, #352]	; (2194 <print_palette(unsigned char)+0x5cc>)
    2034:	4832      	ldr	r0, [pc, #200]	; (2100 <print_palette(unsigned char)+0x538>)
    2036:	f7fe fc31 	bl	89c <Print::println(char const*)>
    203a:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    203c:	4956      	ldr	r1, [pc, #344]	; (2198 <print_palette(unsigned char)+0x5d0>)
    203e:	4830      	ldr	r0, [pc, #192]	; (2100 <print_palette(unsigned char)+0x538>)
    2040:	f7fe fc2c 	bl	89c <Print::println(char const*)>
    2044:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    2046:	4955      	ldr	r1, [pc, #340]	; (219c <print_palette(unsigned char)+0x5d4>)
    2048:	482d      	ldr	r0, [pc, #180]	; (2100 <print_palette(unsigned char)+0x538>)
    204a:	f7fe fc27 	bl	89c <Print::println(char const*)>
    204e:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2050:	4953      	ldr	r1, [pc, #332]	; (21a0 <print_palette(unsigned char)+0x5d8>)
    2052:	482b      	ldr	r0, [pc, #172]	; (2100 <print_palette(unsigned char)+0x538>)
    2054:	f7fe fc22 	bl	89c <Print::println(char const*)>
    2058:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    205a:	4952      	ldr	r1, [pc, #328]	; (21a4 <print_palette(unsigned char)+0x5dc>)
    205c:	4828      	ldr	r0, [pc, #160]	; (2100 <print_palette(unsigned char)+0x538>)
    205e:	f7fe fc1d 	bl	89c <Print::println(char const*)>
    2062:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    2064:	4950      	ldr	r1, [pc, #320]	; (21a8 <print_palette(unsigned char)+0x5e0>)
    2066:	4826      	ldr	r0, [pc, #152]	; (2100 <print_palette(unsigned char)+0x538>)
    2068:	f7fe fc18 	bl	89c <Print::println(char const*)>
    206c:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    206e:	494f      	ldr	r1, [pc, #316]	; (21ac <print_palette(unsigned char)+0x5e4>)
    2070:	4823      	ldr	r0, [pc, #140]	; (2100 <print_palette(unsigned char)+0x538>)
    2072:	f7fe fc13 	bl	89c <Print::println(char const*)>
    2076:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2078:	494d      	ldr	r1, [pc, #308]	; (21b0 <print_palette(unsigned char)+0x5e8>)
    207a:	4821      	ldr	r0, [pc, #132]	; (2100 <print_palette(unsigned char)+0x538>)
    207c:	f7fe fc0e 	bl	89c <Print::println(char const*)>
    2080:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    2082:	494c      	ldr	r1, [pc, #304]	; (21b4 <print_palette(unsigned char)+0x5ec>)
    2084:	481e      	ldr	r0, [pc, #120]	; (2100 <print_palette(unsigned char)+0x538>)
    2086:	f7fe fc09 	bl	89c <Print::println(char const*)>
    208a:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    208c:	494a      	ldr	r1, [pc, #296]	; (21b8 <print_palette(unsigned char)+0x5f0>)
    208e:	481c      	ldr	r0, [pc, #112]	; (2100 <print_palette(unsigned char)+0x538>)
    2090:	f7fe fc04 	bl	89c <Print::println(char const*)>
    2094:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    2096:	4949      	ldr	r1, [pc, #292]	; (21bc <print_palette(unsigned char)+0x5f4>)
    2098:	4819      	ldr	r0, [pc, #100]	; (2100 <print_palette(unsigned char)+0x538>)
    209a:	f7fe fbff 	bl	89c <Print::println(char const*)>
    209e:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    20a0:	4947      	ldr	r1, [pc, #284]	; (21c0 <print_palette(unsigned char)+0x5f8>)
    20a2:	4817      	ldr	r0, [pc, #92]	; (2100 <print_palette(unsigned char)+0x538>)
    20a4:	f7fe fbfa 	bl	89c <Print::println(char const*)>
    20a8:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    20aa:	4946      	ldr	r1, [pc, #280]	; (21c4 <print_palette(unsigned char)+0x5fc>)
    20ac:	4814      	ldr	r0, [pc, #80]	; (2100 <print_palette(unsigned char)+0x538>)
    20ae:	f7fe fbf5 	bl	89c <Print::println(char const*)>
    20b2:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    20b4:	4944      	ldr	r1, [pc, #272]	; (21c8 <print_palette(unsigned char)+0x600>)
    20b6:	4812      	ldr	r0, [pc, #72]	; (2100 <print_palette(unsigned char)+0x538>)
    20b8:	f7fe fbf0 	bl	89c <Print::println(char const*)>
    20bc:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    20be:	4943      	ldr	r1, [pc, #268]	; (21cc <print_palette(unsigned char)+0x604>)
    20c0:	480f      	ldr	r0, [pc, #60]	; (2100 <print_palette(unsigned char)+0x538>)
    20c2:	f7fe fbeb 	bl	89c <Print::println(char const*)>
    20c6:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    20c8:	4941      	ldr	r1, [pc, #260]	; (21d0 <print_palette(unsigned char)+0x608>)
    20ca:	480d      	ldr	r0, [pc, #52]	; (2100 <print_palette(unsigned char)+0x538>)
    20cc:	f7fe fbe6 	bl	89c <Print::println(char const*)>
    20d0:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20d2:	4940      	ldr	r1, [pc, #256]	; (21d4 <print_palette(unsigned char)+0x60c>)
    20d4:	480a      	ldr	r0, [pc, #40]	; (2100 <print_palette(unsigned char)+0x538>)
    20d6:	f7fe fbe1 	bl	89c <Print::println(char const*)>
    20da:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    20dc:	493e      	ldr	r1, [pc, #248]	; (21d8 <print_palette(unsigned char)+0x610>)
    20de:	4808      	ldr	r0, [pc, #32]	; (2100 <print_palette(unsigned char)+0x538>)
    20e0:	f7fe fbdc 	bl	89c <Print::println(char const*)>
    20e4:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    20e6:	493d      	ldr	r1, [pc, #244]	; (21dc <print_palette(unsigned char)+0x614>)
    20e8:	4805      	ldr	r0, [pc, #20]	; (2100 <print_palette(unsigned char)+0x538>)
    20ea:	f7fe fbd7 	bl	89c <Print::println(char const*)>
    20ee:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20f0:	493b      	ldr	r1, [pc, #236]	; (21e0 <print_palette(unsigned char)+0x618>)
    20f2:	4803      	ldr	r0, [pc, #12]	; (2100 <print_palette(unsigned char)+0x538>)
    20f4:	f7fe fbd2 	bl	89c <Print::println(char const*)>
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	0000eaa0 	.word	0x0000eaa0
    2100:	1fff878c 	.word	0x1fff878c
    2104:	0000ea90 	.word	0x0000ea90
    2108:	0000ea84 	.word	0x0000ea84
    210c:	0000ea78 	.word	0x0000ea78
    2110:	0000ea6c 	.word	0x0000ea6c
    2114:	0000ea58 	.word	0x0000ea58
    2118:	0000ea4c 	.word	0x0000ea4c
    211c:	0000ea40 	.word	0x0000ea40
    2120:	0000ea34 	.word	0x0000ea34
    2124:	0000ea1c 	.word	0x0000ea1c
    2128:	0000ea14 	.word	0x0000ea14
    212c:	0000eaac 	.word	0x0000eaac
    2130:	0000ea08 	.word	0x0000ea08
    2134:	0000e9fc 	.word	0x0000e9fc
    2138:	0000e9e8 	.word	0x0000e9e8
    213c:	0000e9d4 	.word	0x0000e9d4
    2140:	0000e9c4 	.word	0x0000e9c4
    2144:	0000e9b8 	.word	0x0000e9b8
    2148:	0000e9ac 	.word	0x0000e9ac
    214c:	0000e9a0 	.word	0x0000e9a0
    2150:	0000e994 	.word	0x0000e994
    2154:	0000e988 	.word	0x0000e988
    2158:	0000e97c 	.word	0x0000e97c
    215c:	0000e970 	.word	0x0000e970
    2160:	0000e964 	.word	0x0000e964
    2164:	0000e958 	.word	0x0000e958
    2168:	0000e94c 	.word	0x0000e94c
    216c:	0000e940 	.word	0x0000e940
    2170:	0000e930 	.word	0x0000e930
    2174:	0000e91c 	.word	0x0000e91c
    2178:	0000e900 	.word	0x0000e900
    217c:	0000e8e8 	.word	0x0000e8e8
    2180:	0000e8cc 	.word	0x0000e8cc
    2184:	0000e8bc 	.word	0x0000e8bc
    2188:	0000e8ac 	.word	0x0000e8ac
    218c:	0000e898 	.word	0x0000e898
    2190:	0000e888 	.word	0x0000e888
    2194:	0000e880 	.word	0x0000e880
    2198:	0000e878 	.word	0x0000e878
    219c:	0000e860 	.word	0x0000e860
    21a0:	0000e850 	.word	0x0000e850
    21a4:	0000e848 	.word	0x0000e848
    21a8:	0000e838 	.word	0x0000e838
    21ac:	0000e828 	.word	0x0000e828
    21b0:	0000e818 	.word	0x0000e818
    21b4:	0000e804 	.word	0x0000e804
    21b8:	0000e7f0 	.word	0x0000e7f0
    21bc:	0000e7dc 	.word	0x0000e7dc
    21c0:	0000e7c4 	.word	0x0000e7c4
    21c4:	0000e7ac 	.word	0x0000e7ac
    21c8:	0000e79c 	.word	0x0000e79c
    21cc:	0000e788 	.word	0x0000e788
    21d0:	0000e774 	.word	0x0000e774
    21d4:	0000e764 	.word	0x0000e764
    21d8:	0000e758 	.word	0x0000e758
    21dc:	0000e74c 	.word	0x0000e74c
    21e0:	0000ecf4 	.word	0x0000ecf4

000021e4 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	2100      	movs	r1, #0
    21e8:	4604      	mov	r4, r0
    21ea:	4885      	ldr	r0, [pc, #532]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    21ec:	f00a fbfa 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21f0:	4884      	ldr	r0, [pc, #528]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    21f2:	f00a fdfb 	bl	cdec <Print::println()>
    21f6:	2122      	movs	r1, #34	; 0x22
    21f8:	4883      	ldr	r0, [pc, #524]	; (2408 <LEDDebug(LEDStruct&)+0x224>)
    21fa:	f00a fbf3 	bl	c9e4 <usb_serial_write>
    21fe:	4881      	ldr	r0, [pc, #516]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2200:	f00a fdf4 	bl	cdec <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2204:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2208:	2b00      	cmp	r3, #0
    220a:	f000 80a1 	beq.w	2350 <LEDDebug(LEDStruct&)+0x16c>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    220e:	2b01      	cmp	r3, #1
    2210:	f000 8574 	beq.w	2cfc <LEDDebug(LEDStruct&)+0xb18>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2214:	2b02      	cmp	r3, #2
    2216:	f000 8577 	beq.w	2d08 <LEDDebug(LEDStruct&)+0xb24>
    221a:	2113      	movs	r1, #19
    221c:	487b      	ldr	r0, [pc, #492]	; (240c <LEDDebug(LEDStruct&)+0x228>)
    221e:	f00a fbe1 	bl	c9e4 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2222:	4b7b      	ldr	r3, [pc, #492]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2224:	4877      	ldr	r0, [pc, #476]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2226:	7819      	ldrb	r1, [r3, #0]
    2228:	220a      	movs	r2, #10
    222a:	2300      	movs	r3, #0
    222c:	f00a fdee 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2230:	2103      	movs	r1, #3
    2232:	4878      	ldr	r0, [pc, #480]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2234:	f00a fbd6 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2238:	4872      	ldr	r0, [pc, #456]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    223a:	f00a fdd7 	bl	cdec <Print::println()>
    223e:	2113      	movs	r1, #19
    2240:	4875      	ldr	r0, [pc, #468]	; (2418 <LEDDebug(LEDStruct&)+0x234>)
    2242:	f00a fbcf 	bl	c9e4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2246:	2300      	movs	r3, #0
    2248:	220a      	movs	r2, #10
    224a:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    224e:	486d      	ldr	r0, [pc, #436]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2250:	f00a fddc 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2254:	2103      	movs	r1, #3
    2256:	486f      	ldr	r0, [pc, #444]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2258:	f00a fbc4 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    225c:	4869      	ldr	r0, [pc, #420]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    225e:	f00a fdc5 	bl	cdec <Print::println()>
    2262:	2111      	movs	r1, #17
    2264:	486d      	ldr	r0, [pc, #436]	; (241c <LEDDebug(LEDStruct&)+0x238>)
    2266:	f00a fbbd 	bl	c9e4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    226a:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    226e:	4865      	ldr	r0, [pc, #404]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2270:	f00a fe0c 	bl	ce8c <Print::print(long)>
    2274:	2103      	movs	r1, #3
    2276:	4867      	ldr	r0, [pc, #412]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2278:	f00a fbb4 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    227c:	4861      	ldr	r0, [pc, #388]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    227e:	f00a fdb5 	bl	cdec <Print::println()>
    2282:	2114      	movs	r1, #20
    2284:	4866      	ldr	r0, [pc, #408]	; (2420 <LEDDebug(LEDStruct&)+0x23c>)
    2286:	f00a fbad 	bl	c9e4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    228a:	2300      	movs	r3, #0
    228c:	220a      	movs	r2, #10
    228e:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    2292:	485c      	ldr	r0, [pc, #368]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2294:	f00a fdba 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2298:	2103      	movs	r1, #3
    229a:	485e      	ldr	r0, [pc, #376]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    229c:	f00a fba2 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22a0:	4858      	ldr	r0, [pc, #352]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22a2:	f00a fda3 	bl	cdec <Print::println()>
    22a6:	2115      	movs	r1, #21
    22a8:	485e      	ldr	r0, [pc, #376]	; (2424 <LEDDebug(LEDStruct&)+0x240>)
    22aa:	f00a fb9b 	bl	c9e4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ae:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22b2:	4854      	ldr	r0, [pc, #336]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22b4:	f00a fdea 	bl	ce8c <Print::print(long)>
    22b8:	2103      	movs	r1, #3
    22ba:	4856      	ldr	r0, [pc, #344]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    22bc:	f00a fb92 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22c0:	4850      	ldr	r0, [pc, #320]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22c2:	f00a fd93 	bl	cdec <Print::println()>
    22c6:	2111      	movs	r1, #17
    22c8:	4857      	ldr	r0, [pc, #348]	; (2428 <LEDDebug(LEDStruct&)+0x244>)
    22ca:	f00a fb8b 	bl	c9e4 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ce:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22d2:	484c      	ldr	r0, [pc, #304]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22d4:	f00a fdda 	bl	ce8c <Print::print(long)>
    22d8:	2103      	movs	r1, #3
    22da:	484e      	ldr	r0, [pc, #312]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    22dc:	f00a fb82 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22e0:	4848      	ldr	r0, [pc, #288]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22e2:	f00a fd83 	bl	cdec <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22e6:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22ea:	bb63      	cbnz	r3, 2346 <LEDDebug(LEDStruct&)+0x162>
    22ec:	2122      	movs	r1, #34	; 0x22
    22ee:	4846      	ldr	r0, [pc, #280]	; (2408 <LEDDebug(LEDStruct&)+0x224>)
    22f0:	f00a fb78 	bl	c9e4 <usb_serial_write>
    22f4:	4843      	ldr	r0, [pc, #268]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22f6:	f00a fd79 	bl	cdec <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22fa:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22fe:	2b1e      	cmp	r3, #30
    2300:	f200 84ee 	bhi.w	2ce0 <LEDDebug(LEDStruct&)+0xafc>
    2304:	e8df f013 	tbh	[pc, r3, lsl #1]
    2308:	04ec00a2 	.word	0x04ec00a2
    230c:	04ec04ec 	.word	0x04ec04ec
    2310:	04ec04ec 	.word	0x04ec04ec
    2314:	04ec0115 	.word	0x04ec0115
    2318:	04ec04ec 	.word	0x04ec04ec
    231c:	04ec014e 	.word	0x04ec014e
    2320:	04ec04ec 	.word	0x04ec04ec
    2324:	04ec04ec 	.word	0x04ec04ec
    2328:	015d04ec 	.word	0x015d04ec
    232c:	0168018b 	.word	0x0168018b
    2330:	018d016a 	.word	0x018d016a
    2334:	02f8024a 	.word	0x02f8024a
    2338:	03d40354 	.word	0x03d40354
    233c:	041304ec 	.word	0x041304ec
    2340:	04930469 	.word	0x04930469
    2344:	0029      	.short	0x0029
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2346:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    234a:	f7ff fc3d 	bl	1bc8 <print_palette(unsigned char)>
    234e:	e7cd      	b.n	22ec <LEDDebug(LEDStruct&)+0x108>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2350:	4936      	ldr	r1, [pc, #216]	; (242c <LEDDebug(LEDStruct&)+0x248>)
    2352:	482c      	ldr	r0, [pc, #176]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2354:	f7fe faa2 	bl	89c <Print::println(char const*)>
    2358:	e75f      	b.n	221a <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    235a:	4935      	ldr	r1, [pc, #212]	; (2430 <LEDDebug(LEDStruct&)+0x24c>)
    235c:	4829      	ldr	r0, [pc, #164]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    235e:	f7fe fa9d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2362:	4934      	ldr	r1, [pc, #208]	; (2434 <LEDDebug(LEDStruct&)+0x250>)
    2364:	4827      	ldr	r0, [pc, #156]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2366:	f7fe fa8b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    236a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    236e:	4825      	ldr	r0, [pc, #148]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2370:	f00a fd8c 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2374:	4927      	ldr	r1, [pc, #156]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2376:	4823      	ldr	r0, [pc, #140]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2378:	f7fe fa90 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    237c:	492e      	ldr	r1, [pc, #184]	; (2438 <LEDDebug(LEDStruct&)+0x254>)
    237e:	4821      	ldr	r0, [pc, #132]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2380:	f7fe fa7e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2384:	2300      	movs	r3, #0
    2386:	220a      	movs	r2, #10
    2388:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    238c:	481d      	ldr	r0, [pc, #116]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    238e:	f00a fd3d 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2392:	4920      	ldr	r1, [pc, #128]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2394:	481b      	ldr	r0, [pc, #108]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    2396:	f7fe fa81 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    239a:	4928      	ldr	r1, [pc, #160]	; (243c <LEDDebug(LEDStruct&)+0x258>)
    239c:	4819      	ldr	r0, [pc, #100]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    239e:	f7fe fa6f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23a2:	2300      	movs	r3, #0
    23a4:	220a      	movs	r2, #10
    23a6:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    23aa:	4816      	ldr	r0, [pc, #88]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23ac:	f00a fd2e 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    23b0:	4918      	ldr	r1, [pc, #96]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    23b2:	4814      	ldr	r0, [pc, #80]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23b4:	f7fe fa72 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23b8:	4921      	ldr	r1, [pc, #132]	; (2440 <LEDDebug(LEDStruct&)+0x25c>)
    23ba:	4812      	ldr	r0, [pc, #72]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23bc:	f7fe fa60 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23c0:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    23c4:	480f      	ldr	r0, [pc, #60]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23c6:	f00a fd61 	bl	ce8c <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    23ca:	4912      	ldr	r1, [pc, #72]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    23cc:	480d      	ldr	r0, [pc, #52]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23ce:	f7fe fa65 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23d2:	491c      	ldr	r1, [pc, #112]	; (2444 <LEDDebug(LEDStruct&)+0x260>)
    23d4:	480b      	ldr	r0, [pc, #44]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23d6:	f7fe fa53 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23da:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    23de:	4809      	ldr	r0, [pc, #36]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23e0:	f00a fd54 	bl	ce8c <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23e4:	490b      	ldr	r1, [pc, #44]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    23e6:	4807      	ldr	r0, [pc, #28]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    23e8:	f7fe fa58 	bl	89c <Print::println(char const*)>
    23ec:	2123      	movs	r1, #35	; 0x23
    23ee:	4816      	ldr	r0, [pc, #88]	; (2448 <LEDDebug(LEDStruct&)+0x264>)
    23f0:	f00a faf8 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    23f4:	4803      	ldr	r0, [pc, #12]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    23f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    23fa:	f00a bcf7 	b.w	cdec <Print::println()>
    23fe:	bf00      	nop
    2400:	0000eea4 	.word	0x0000eea4
    2404:	1fff878c 	.word	0x1fff878c
    2408:	0000ed0c 	.word	0x0000ed0c
    240c:	0000ed9c 	.word	0x0000ed9c
    2410:	1fff8723 	.word	0x1fff8723
    2414:	0000edb0 	.word	0x0000edb0
    2418:	0000edb4 	.word	0x0000edb4
    241c:	0000edc8 	.word	0x0000edc8
    2420:	0000eddc 	.word	0x0000eddc
    2424:	0000edf4 	.word	0x0000edf4
    2428:	0000ee0c 	.word	0x0000ee0c
    242c:	0000ed30 	.word	0x0000ed30
    2430:	0000f708 	.word	0x0000f708
    2434:	0000ee68 	.word	0x0000ee68
    2438:	0000f72c 	.word	0x0000f72c
    243c:	0000f744 	.word	0x0000f744
    2440:	0000f760 	.word	0x0000f760
    2444:	0000f77c 	.word	0x0000f77c
    2448:	0000f7b8 	.word	0x0000f7b8
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    244c:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2450:	48b4      	ldr	r0, [pc, #720]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    2452:	2b04      	cmp	r3, #4
    2454:	bf0c      	ite	eq
    2456:	49b4      	ldreq	r1, [pc, #720]	; (2728 <LEDDebug(LEDStruct&)+0x544>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2458:	49b4      	ldrne	r1, [pc, #720]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    245a:	f7fe fa1f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    245e:	49b4      	ldr	r1, [pc, #720]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2460:	48b0      	ldr	r0, [pc, #704]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2462:	f7fe fa0d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2466:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    246a:	48ae      	ldr	r0, [pc, #696]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    246c:	f00a fd0e 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2470:	49b0      	ldr	r1, [pc, #704]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2472:	48ac      	ldr	r0, [pc, #688]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2474:	f7fe fa12 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2478:	49af      	ldr	r1, [pc, #700]	; (2738 <LEDDebug(LEDStruct&)+0x554>)
    247a:	48aa      	ldr	r0, [pc, #680]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    247c:	f7fe fa00 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2480:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    2484:	48a7      	ldr	r0, [pc, #668]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2486:	f00a fd01 	bl	ce8c <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    248a:	49aa      	ldr	r1, [pc, #680]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    248c:	48a5      	ldr	r0, [pc, #660]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    248e:	f7fe fa05 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2492:	49aa      	ldr	r1, [pc, #680]	; (273c <LEDDebug(LEDStruct&)+0x558>)
    2494:	48a3      	ldr	r0, [pc, #652]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2496:	f7fe f9f3 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    249a:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    249e:	48a1      	ldr	r0, [pc, #644]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24a0:	f00a fcf4 	bl	ce8c <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    24a4:	49a3      	ldr	r1, [pc, #652]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    24a6:	489f      	ldr	r0, [pc, #636]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24a8:	f7fe f9f8 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ac:	49a4      	ldr	r1, [pc, #656]	; (2740 <LEDDebug(LEDStruct&)+0x55c>)
    24ae:	489d      	ldr	r0, [pc, #628]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24b0:	f7fe f9e6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24b4:	2300      	movs	r3, #0
    24b6:	220a      	movs	r2, #10
    24b8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24bc:	4899      	ldr	r0, [pc, #612]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24be:	f00a fca5 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24c2:	499c      	ldr	r1, [pc, #624]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    24c4:	4897      	ldr	r0, [pc, #604]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24c6:	f7fe f9e9 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ca:	499e      	ldr	r1, [pc, #632]	; (2744 <LEDDebug(LEDStruct&)+0x560>)
    24cc:	4895      	ldr	r0, [pc, #596]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24ce:	f7fe f9d7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24d2:	2300      	movs	r3, #0
    24d4:	220a      	movs	r2, #10
    24d6:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    24da:	4892      	ldr	r0, [pc, #584]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24dc:	f00a fc96 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    24e0:	4994      	ldr	r1, [pc, #592]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    24e2:	4890      	ldr	r0, [pc, #576]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24e4:	f7fe f9da 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24e8:	4997      	ldr	r1, [pc, #604]	; (2748 <LEDDebug(LEDStruct&)+0x564>)
    24ea:	488e      	ldr	r0, [pc, #568]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24ec:	f7fe f9c8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24f0:	2300      	movs	r3, #0
    24f2:	220a      	movs	r2, #10
    24f4:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    24f8:	488a      	ldr	r0, [pc, #552]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    24fa:	f00a fc87 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    24fe:	498d      	ldr	r1, [pc, #564]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2500:	4888      	ldr	r0, [pc, #544]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2502:	f7fe f9cb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2506:	4991      	ldr	r1, [pc, #580]	; (274c <LEDDebug(LEDStruct&)+0x568>)
    2508:	4886      	ldr	r0, [pc, #536]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    250a:	f7fe f9b9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    250e:	2300      	movs	r3, #0
    2510:	220a      	movs	r2, #10
    2512:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2516:	4883      	ldr	r0, [pc, #524]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2518:	f00a fc78 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    251c:	4985      	ldr	r1, [pc, #532]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    251e:	4881      	ldr	r0, [pc, #516]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2520:	f7fe f9bc 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2524:	498a      	ldr	r1, [pc, #552]	; (2750 <LEDDebug(LEDStruct&)+0x56c>)
    2526:	487f      	ldr	r0, [pc, #508]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2528:	f7fe f9aa 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    252c:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    2530:	e755      	b.n	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2532:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    2536:	2b00      	cmp	r3, #0
    2538:	f000 8474 	beq.w	2e24 <LEDDebug(LEDStruct&)+0xc40>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    253c:	4985      	ldr	r1, [pc, #532]	; (2754 <LEDDebug(LEDStruct&)+0x570>)
    253e:	4879      	ldr	r0, [pc, #484]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2540:	f7fe f9ac 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2544:	497a      	ldr	r1, [pc, #488]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2546:	4877      	ldr	r0, [pc, #476]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2548:	f7fe f99a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    254c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2550:	4874      	ldr	r0, [pc, #464]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2552:	f00a fc9b 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2556:	4977      	ldr	r1, [pc, #476]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2558:	4872      	ldr	r0, [pc, #456]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    255a:	f7fe f99f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    255e:	497e      	ldr	r1, [pc, #504]	; (2758 <LEDDebug(LEDStruct&)+0x574>)
    2560:	4870      	ldr	r0, [pc, #448]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2562:	f7fe f98d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2566:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    256a:	486e      	ldr	r0, [pc, #440]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    256c:	f00a fc8e 	bl	ce8c <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    2570:	4970      	ldr	r1, [pc, #448]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2572:	486c      	ldr	r0, [pc, #432]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2574:	f7fe f992 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2578:	4978      	ldr	r1, [pc, #480]	; (275c <LEDDebug(LEDStruct&)+0x578>)
    257a:	486a      	ldr	r0, [pc, #424]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    257c:	f7fe f980 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2580:	2300      	movs	r3, #0
    2582:	220a      	movs	r2, #10
    2584:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2588:	4866      	ldr	r0, [pc, #408]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    258a:	f00a fc3f 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    258e:	4969      	ldr	r1, [pc, #420]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2590:	4864      	ldr	r0, [pc, #400]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2592:	f7fe f983 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2596:	4972      	ldr	r1, [pc, #456]	; (2760 <LEDDebug(LEDStruct&)+0x57c>)
    2598:	4862      	ldr	r0, [pc, #392]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    259a:	f7fe f971 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    259e:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    25a2:	e032      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    25a4:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25a8:	3b0a      	subs	r3, #10
    25aa:	2b06      	cmp	r3, #6
    25ac:	f200 83b6 	bhi.w	2d1c <LEDDebug(LEDStruct&)+0xb38>
    25b0:	e8df f013 	tbh	[pc, r3, lsl #1]
    25b4:	047b0480 	.word	0x047b0480
    25b8:	047603b0 	.word	0x047603b0
    25bc:	0467046c 	.word	0x0467046c
    25c0:	0471      	.short	0x0471
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    25c2:	4968      	ldr	r1, [pc, #416]	; (2764 <LEDDebug(LEDStruct&)+0x580>)
    25c4:	4857      	ldr	r0, [pc, #348]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25c6:	f7fe f969 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25ca:	4959      	ldr	r1, [pc, #356]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    25cc:	4855      	ldr	r0, [pc, #340]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25ce:	f7fe f957 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25d2:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25d6:	e702      	b.n	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    25d8:	4963      	ldr	r1, [pc, #396]	; (2768 <LEDDebug(LEDStruct&)+0x584>)
    25da:	e7f3      	b.n	25c4 <LEDDebug(LEDStruct&)+0x3e0>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    25dc:	4963      	ldr	r1, [pc, #396]	; (276c <LEDDebug(LEDStruct&)+0x588>)
    25de:	4851      	ldr	r0, [pc, #324]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25e0:	f7fe f95c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25e4:	4952      	ldr	r1, [pc, #328]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    25e6:	484f      	ldr	r0, [pc, #316]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25e8:	f7fe f94a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25ec:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25f0:	484c      	ldr	r0, [pc, #304]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25f2:	f00a fc4b 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25f6:	494f      	ldr	r1, [pc, #316]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    25f8:	484a      	ldr	r0, [pc, #296]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    25fa:	f7fe f94f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25fe:	495c      	ldr	r1, [pc, #368]	; (2770 <LEDDebug(LEDStruct&)+0x58c>)
    2600:	4848      	ldr	r0, [pc, #288]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2602:	f7fe f93d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2606:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    260a:	4846      	ldr	r0, [pc, #280]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    260c:	2300      	movs	r3, #0
    260e:	220a      	movs	r2, #10
    2610:	f00a fbfc 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    2614:	4947      	ldr	r1, [pc, #284]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2616:	4843      	ldr	r0, [pc, #268]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2618:	f7fe f940 	bl	89c <Print::println(char const*)>
    261c:	e6e6      	b.n	23ec <LEDDebug(LEDStruct&)+0x208>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    261e:	4955      	ldr	r1, [pc, #340]	; (2774 <LEDDebug(LEDStruct&)+0x590>)
    2620:	e7d0      	b.n	25c4 <LEDDebug(LEDStruct&)+0x3e0>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2622:	4955      	ldr	r1, [pc, #340]	; (2778 <LEDDebug(LEDStruct&)+0x594>)
    2624:	483f      	ldr	r0, [pc, #252]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2626:	f7fe f939 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    262a:	4941      	ldr	r1, [pc, #260]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    262c:	483d      	ldr	r0, [pc, #244]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    262e:	f7fe f927 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2632:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2636:	483b      	ldr	r0, [pc, #236]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2638:	f00a fc28 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    263c:	493d      	ldr	r1, [pc, #244]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    263e:	4839      	ldr	r0, [pc, #228]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2640:	f7fe f92c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2644:	494d      	ldr	r1, [pc, #308]	; (277c <LEDDebug(LEDStruct&)+0x598>)
    2646:	4837      	ldr	r0, [pc, #220]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2648:	f7fe f91a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    264c:	2300      	movs	r3, #0
    264e:	220a      	movs	r2, #10
    2650:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2654:	4833      	ldr	r0, [pc, #204]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2656:	f00a fbd9 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    265a:	4936      	ldr	r1, [pc, #216]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    265c:	4831      	ldr	r0, [pc, #196]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    265e:	f7fe f91d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2662:	4947      	ldr	r1, [pc, #284]	; (2780 <LEDDebug(LEDStruct&)+0x59c>)
    2664:	482f      	ldr	r0, [pc, #188]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2666:	f7fe f90b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    266a:	2300      	movs	r3, #0
    266c:	220a      	movs	r2, #10
    266e:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2672:	482c      	ldr	r0, [pc, #176]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2674:	f00a fbca 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2678:	492e      	ldr	r1, [pc, #184]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    267a:	482a      	ldr	r0, [pc, #168]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    267c:	f7fe f90e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2680:	4940      	ldr	r1, [pc, #256]	; (2784 <LEDDebug(LEDStruct&)+0x5a0>)
    2682:	4828      	ldr	r0, [pc, #160]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2684:	f7fe f8fc 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2688:	2300      	movs	r3, #0
    268a:	220a      	movs	r2, #10
    268c:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2690:	4824      	ldr	r0, [pc, #144]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2692:	f00a fbbb 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2696:	4927      	ldr	r1, [pc, #156]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2698:	4822      	ldr	r0, [pc, #136]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    269a:	f7fe f8ff 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    269e:	493a      	ldr	r1, [pc, #232]	; (2788 <LEDDebug(LEDStruct&)+0x5a4>)
    26a0:	4820      	ldr	r0, [pc, #128]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26a2:	f7fe f8ed 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26a6:	2300      	movs	r3, #0
    26a8:	220a      	movs	r2, #10
    26aa:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    26ae:	481d      	ldr	r0, [pc, #116]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26b0:	f00a fbac 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    26b4:	491f      	ldr	r1, [pc, #124]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    26b6:	481b      	ldr	r0, [pc, #108]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26b8:	f7fe f8f0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26bc:	4933      	ldr	r1, [pc, #204]	; (278c <LEDDebug(LEDStruct&)+0x5a8>)
    26be:	4819      	ldr	r0, [pc, #100]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26c0:	f7fe f8de 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26c4:	2300      	movs	r3, #0
    26c6:	220a      	movs	r2, #10
    26c8:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    26cc:	4815      	ldr	r0, [pc, #84]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26ce:	f00a fb9d 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    26d2:	4918      	ldr	r1, [pc, #96]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    26d4:	4813      	ldr	r0, [pc, #76]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26d6:	f7fe f8e1 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26da:	492d      	ldr	r1, [pc, #180]	; (2790 <LEDDebug(LEDStruct&)+0x5ac>)
    26dc:	4811      	ldr	r0, [pc, #68]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26de:	f7fe f8cf 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26e2:	2300      	movs	r3, #0
    26e4:	220a      	movs	r2, #10
    26e6:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    26ea:	480e      	ldr	r0, [pc, #56]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26ec:	f00a fb8e 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    26f0:	4910      	ldr	r1, [pc, #64]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    26f2:	480c      	ldr	r0, [pc, #48]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26f4:	f7fe f8d2 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f8:	4926      	ldr	r1, [pc, #152]	; (2794 <LEDDebug(LEDStruct&)+0x5b0>)
    26fa:	480a      	ldr	r0, [pc, #40]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    26fc:	f7fe f8c0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2700:	2300      	movs	r3, #0
    2702:	220a      	movs	r2, #10
    2704:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2708:	4806      	ldr	r0, [pc, #24]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    270a:	f00a fb7f 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    270e:	4909      	ldr	r1, [pc, #36]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2710:	4804      	ldr	r0, [pc, #16]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    2712:	f7fe f8c3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2716:	4920      	ldr	r1, [pc, #128]	; (2798 <LEDDebug(LEDStruct&)+0x5b4>)
    2718:	4802      	ldr	r0, [pc, #8]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
    271a:	f7fe f8b1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    271e:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2722:	e772      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
    2724:	1fff878c 	.word	0x1fff878c
    2728:	0000ee20 	.word	0x0000ee20
    272c:	0000ee44 	.word	0x0000ee44
    2730:	0000ee68 	.word	0x0000ee68
    2734:	0000edb0 	.word	0x0000edb0
    2738:	0000ee80 	.word	0x0000ee80
    273c:	0000ee94 	.word	0x0000ee94
    2740:	0000eea8 	.word	0x0000eea8
    2744:	0000eebc 	.word	0x0000eebc
    2748:	0000eecc 	.word	0x0000eecc
    274c:	0000eedc 	.word	0x0000eedc
    2750:	0000eeec 	.word	0x0000eeec
    2754:	0000ef28 	.word	0x0000ef28
    2758:	0000ef4c 	.word	0x0000ef4c
    275c:	0000ef5c 	.word	0x0000ef5c
    2760:	0000ef6c 	.word	0x0000ef6c
    2764:	0000f0ec 	.word	0x0000f0ec
    2768:	0000f134 	.word	0x0000f134
    276c:	0000f158 	.word	0x0000f158
    2770:	0000f17c 	.word	0x0000f17c
    2774:	0000f110 	.word	0x0000f110
    2778:	0000f264 	.word	0x0000f264
    277c:	0000f288 	.word	0x0000f288
    2780:	0000f29c 	.word	0x0000f29c
    2784:	0000f2b0 	.word	0x0000f2b0
    2788:	0000f2c4 	.word	0x0000f2c4
    278c:	0000f2d8 	.word	0x0000f2d8
    2790:	0000f2ec 	.word	0x0000f2ec
    2794:	0000f300 	.word	0x0000f300
    2798:	0000f314 	.word	0x0000f314
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    279c:	49a7      	ldr	r1, [pc, #668]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    279e:	48a8      	ldr	r0, [pc, #672]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27a0:	f7fe f87c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27a4:	49a7      	ldr	r1, [pc, #668]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    27a6:	48a6      	ldr	r0, [pc, #664]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27a8:	f7fe f86a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27ac:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27b0:	48a3      	ldr	r0, [pc, #652]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27b2:	f00a fb6b 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    27b6:	49a4      	ldr	r1, [pc, #656]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    27b8:	48a1      	ldr	r0, [pc, #644]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27ba:	f7fe f86f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27be:	49a3      	ldr	r1, [pc, #652]	; (2a4c <LEDDebug(LEDStruct&)+0x868>)
    27c0:	489f      	ldr	r0, [pc, #636]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27c2:	f7fe f85d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c6:	2300      	movs	r3, #0
    27c8:	220a      	movs	r2, #10
    27ca:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    27ce:	489c      	ldr	r0, [pc, #624]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27d0:	f00a fb1c 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    27d4:	499c      	ldr	r1, [pc, #624]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    27d6:	489a      	ldr	r0, [pc, #616]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27d8:	f7fe f860 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27dc:	499c      	ldr	r1, [pc, #624]	; (2a50 <LEDDebug(LEDStruct&)+0x86c>)
    27de:	4898      	ldr	r0, [pc, #608]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27e0:	f7fe f84e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27e4:	2300      	movs	r3, #0
    27e6:	220a      	movs	r2, #10
    27e8:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    27ec:	4894      	ldr	r0, [pc, #592]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27ee:	f00a fb0d 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    27f2:	4995      	ldr	r1, [pc, #596]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    27f4:	4892      	ldr	r0, [pc, #584]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27f6:	f7fe f851 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27fa:	4996      	ldr	r1, [pc, #600]	; (2a54 <LEDDebug(LEDStruct&)+0x870>)
    27fc:	4890      	ldr	r0, [pc, #576]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27fe:	f7fe f83f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2802:	2300      	movs	r3, #0
    2804:	220a      	movs	r2, #10
    2806:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    280a:	488d      	ldr	r0, [pc, #564]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    280c:	f00a fafe 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2810:	498d      	ldr	r1, [pc, #564]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2812:	488b      	ldr	r0, [pc, #556]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2814:	f7fe f842 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2818:	498f      	ldr	r1, [pc, #572]	; (2a58 <LEDDebug(LEDStruct&)+0x874>)
    281a:	4889      	ldr	r0, [pc, #548]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    281c:	f7fe f830 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2820:	2300      	movs	r3, #0
    2822:	220a      	movs	r2, #10
    2824:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2828:	4885      	ldr	r0, [pc, #532]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    282a:	f00a faef 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    282e:	4986      	ldr	r1, [pc, #536]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2830:	4883      	ldr	r0, [pc, #524]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2832:	f7fe f833 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2836:	4989      	ldr	r1, [pc, #548]	; (2a5c <LEDDebug(LEDStruct&)+0x878>)
    2838:	4881      	ldr	r0, [pc, #516]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    283a:	f7fe f821 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    283e:	2300      	movs	r3, #0
    2840:	220a      	movs	r2, #10
    2842:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2846:	487e      	ldr	r0, [pc, #504]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2848:	f00a fae0 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    284c:	497e      	ldr	r1, [pc, #504]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    284e:	487c      	ldr	r0, [pc, #496]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2850:	f7fe f824 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2854:	4982      	ldr	r1, [pc, #520]	; (2a60 <LEDDebug(LEDStruct&)+0x87c>)
    2856:	487a      	ldr	r0, [pc, #488]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2858:	f7fe f812 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    285c:	2300      	movs	r3, #0
    285e:	220a      	movs	r2, #10
    2860:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2864:	4876      	ldr	r0, [pc, #472]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2866:	f00a fad1 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    286a:	4977      	ldr	r1, [pc, #476]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    286c:	4874      	ldr	r0, [pc, #464]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    286e:	f7fe f815 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2872:	497c      	ldr	r1, [pc, #496]	; (2a64 <LEDDebug(LEDStruct&)+0x880>)
    2874:	4872      	ldr	r0, [pc, #456]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2876:	f7fe f803 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    287a:	2300      	movs	r3, #0
    287c:	220a      	movs	r2, #10
    287e:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2882:	486f      	ldr	r0, [pc, #444]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2884:	f00a fac2 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2888:	496f      	ldr	r1, [pc, #444]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    288a:	486d      	ldr	r0, [pc, #436]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    288c:	f7fe f806 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2890:	4975      	ldr	r1, [pc, #468]	; (2a68 <LEDDebug(LEDStruct&)+0x884>)
    2892:	486b      	ldr	r0, [pc, #428]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2894:	f7fd fff4 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2898:	2300      	movs	r3, #0
    289a:	220a      	movs	r2, #10
    289c:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    28a0:	4867      	ldr	r0, [pc, #412]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28a2:	f00a fab3 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    28a6:	4968      	ldr	r1, [pc, #416]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    28a8:	4865      	ldr	r0, [pc, #404]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28aa:	f7fd fff7 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ae:	496f      	ldr	r1, [pc, #444]	; (2a6c <LEDDebug(LEDStruct&)+0x888>)
    28b0:	4863      	ldr	r0, [pc, #396]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28b2:	f7fd ffe5 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28b6:	2300      	movs	r3, #0
    28b8:	220a      	movs	r2, #10
    28ba:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    28be:	4860      	ldr	r0, [pc, #384]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28c0:	f00a faa4 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    28c4:	4960      	ldr	r1, [pc, #384]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    28c6:	485e      	ldr	r0, [pc, #376]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28c8:	f7fd ffe8 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28cc:	4968      	ldr	r1, [pc, #416]	; (2a70 <LEDDebug(LEDStruct&)+0x88c>)
    28ce:	485c      	ldr	r0, [pc, #368]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28d0:	f7fd ffd6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28d4:	2300      	movs	r3, #0
    28d6:	220a      	movs	r2, #10
    28d8:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    28dc:	4858      	ldr	r0, [pc, #352]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28de:	f00a fa95 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    28e2:	4959      	ldr	r1, [pc, #356]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    28e4:	4856      	ldr	r0, [pc, #344]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28e6:	f7fd ffd9 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ea:	4962      	ldr	r1, [pc, #392]	; (2a74 <LEDDebug(LEDStruct&)+0x890>)
    28ec:	4854      	ldr	r0, [pc, #336]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28ee:	f7fd ffc7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28f2:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    28f6:	e688      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    28f8:	495f      	ldr	r1, [pc, #380]	; (2a78 <LEDDebug(LEDStruct&)+0x894>)
    28fa:	4851      	ldr	r0, [pc, #324]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    28fc:	f7fd ffce 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2900:	495e      	ldr	r1, [pc, #376]	; (2a7c <LEDDebug(LEDStruct&)+0x898>)
    2902:	484f      	ldr	r0, [pc, #316]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2904:	f7fd ffbc 	bl	880 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2908:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    290c:	2b01      	cmp	r3, #1
    290e:	f000 82ae 	beq.w	2e6e <LEDDebug(LEDStruct&)+0xc8a>
    2912:	f0c0 82d9 	bcc.w	2ec8 <LEDDebug(LEDStruct&)+0xce4>
    2916:	2b02      	cmp	r3, #2
    2918:	d107      	bne.n	292a <LEDDebug(LEDStruct&)+0x746>
    291a:	4959      	ldr	r1, [pc, #356]	; (2a80 <LEDDebug(LEDStruct&)+0x89c>)
    291c:	4848      	ldr	r0, [pc, #288]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    291e:	f7fd ffaf 	bl	880 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2922:	4949      	ldr	r1, [pc, #292]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2924:	4846      	ldr	r0, [pc, #280]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2926:	f7fd ffb9 	bl	89c <Print::println(char const*)>
    292a:	4956      	ldr	r1, [pc, #344]	; (2a84 <LEDDebug(LEDStruct&)+0x8a0>)
    292c:	4844      	ldr	r0, [pc, #272]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    292e:	f7fd ffa7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2932:	2300      	movs	r3, #0
    2934:	220a      	movs	r2, #10
    2936:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    293a:	4841      	ldr	r0, [pc, #260]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    293c:	f00a fa66 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    2940:	4941      	ldr	r1, [pc, #260]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2942:	483f      	ldr	r0, [pc, #252]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2944:	f7fd ffaa 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2948:	494f      	ldr	r1, [pc, #316]	; (2a88 <LEDDebug(LEDStruct&)+0x8a4>)
    294a:	483d      	ldr	r0, [pc, #244]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    294c:	f7fd ff98 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2950:	2300      	movs	r3, #0
    2952:	220a      	movs	r2, #10
    2954:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2958:	4839      	ldr	r0, [pc, #228]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    295a:	f00a fa57 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    295e:	493a      	ldr	r1, [pc, #232]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2960:	4837      	ldr	r0, [pc, #220]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2962:	f7fd ff9b 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2966:	4949      	ldr	r1, [pc, #292]	; (2a8c <LEDDebug(LEDStruct&)+0x8a8>)
    2968:	4835      	ldr	r0, [pc, #212]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    296a:	f7fd ff89 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    296e:	2300      	movs	r3, #0
    2970:	220a      	movs	r2, #10
    2972:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2976:	4832      	ldr	r0, [pc, #200]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2978:	f00a fa48 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    297c:	4932      	ldr	r1, [pc, #200]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    297e:	4830      	ldr	r0, [pc, #192]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2980:	f7fd ff8c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2984:	4942      	ldr	r1, [pc, #264]	; (2a90 <LEDDebug(LEDStruct&)+0x8ac>)
    2986:	482e      	ldr	r0, [pc, #184]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2988:	f7fd ff7a 	bl	880 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    298c:	2300      	movs	r3, #0
    298e:	220a      	movs	r2, #10
    2990:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2994:	482a      	ldr	r0, [pc, #168]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2996:	f00a fa39 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    299a:	492b      	ldr	r1, [pc, #172]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    299c:	4828      	ldr	r0, [pc, #160]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    299e:	f7fd ff7d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29a2:	493c      	ldr	r1, [pc, #240]	; (2a94 <LEDDebug(LEDStruct&)+0x8b0>)
    29a4:	4826      	ldr	r0, [pc, #152]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29a6:	f7fd ff6b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29aa:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    29ae:	e516      	b.n	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    29b0:	4939      	ldr	r1, [pc, #228]	; (2a98 <LEDDebug(LEDStruct&)+0x8b4>)
    29b2:	4823      	ldr	r0, [pc, #140]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29b4:	f7fd ff72 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b8:	4938      	ldr	r1, [pc, #224]	; (2a9c <LEDDebug(LEDStruct&)+0x8b8>)
    29ba:	4821      	ldr	r0, [pc, #132]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29bc:	f7fd ff60 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29c0:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    29c4:	481e      	ldr	r0, [pc, #120]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29c6:	f00a fa61 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    29ca:	491f      	ldr	r1, [pc, #124]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    29cc:	481c      	ldr	r0, [pc, #112]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29ce:	f7fd ff65 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29d2:	4933      	ldr	r1, [pc, #204]	; (2aa0 <LEDDebug(LEDStruct&)+0x8bc>)
    29d4:	481a      	ldr	r0, [pc, #104]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29d6:	f7fd ff53 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29da:	2300      	movs	r3, #0
    29dc:	220a      	movs	r2, #10
    29de:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    29e2:	4817      	ldr	r0, [pc, #92]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29e4:	f00a fa12 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    29e8:	4917      	ldr	r1, [pc, #92]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    29ea:	4815      	ldr	r0, [pc, #84]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29ec:	f7fd ff56 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f0:	492c      	ldr	r1, [pc, #176]	; (2aa4 <LEDDebug(LEDStruct&)+0x8c0>)
    29f2:	4813      	ldr	r0, [pc, #76]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    29f4:	f7fd ff44 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29f8:	2300      	movs	r3, #0
    29fa:	220a      	movs	r2, #10
    29fc:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2a00:	480f      	ldr	r0, [pc, #60]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a02:	f00a fa03 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2a06:	4910      	ldr	r1, [pc, #64]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2a08:	480d      	ldr	r0, [pc, #52]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a0a:	f7fd ff47 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a0e:	4926      	ldr	r1, [pc, #152]	; (2aa8 <LEDDebug(LEDStruct&)+0x8c4>)
    2a10:	480b      	ldr	r0, [pc, #44]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a12:	f7fd ff35 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a16:	2300      	movs	r3, #0
    2a18:	220a      	movs	r2, #10
    2a1a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2a1e:	4808      	ldr	r0, [pc, #32]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a20:	f00a f9f4 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2a24:	4908      	ldr	r1, [pc, #32]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    2a26:	4806      	ldr	r0, [pc, #24]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a28:	f7fd ff38 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a2c:	491f      	ldr	r1, [pc, #124]	; (2aac <LEDDebug(LEDStruct&)+0x8c8>)
    2a2e:	4804      	ldr	r0, [pc, #16]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    2a30:	f7fd ff26 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a34:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2a38:	e5e7      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
    2a3a:	bf00      	nop
    2a3c:	0000f328 	.word	0x0000f328
    2a40:	1fff878c 	.word	0x1fff878c
    2a44:	0000ee68 	.word	0x0000ee68
    2a48:	0000edb0 	.word	0x0000edb0
    2a4c:	0000f34c 	.word	0x0000f34c
    2a50:	0000f360 	.word	0x0000f360
    2a54:	0000f374 	.word	0x0000f374
    2a58:	0000f388 	.word	0x0000f388
    2a5c:	0000f39c 	.word	0x0000f39c
    2a60:	0000f3b0 	.word	0x0000f3b0
    2a64:	0000f3c4 	.word	0x0000f3c4
    2a68:	0000f3d8 	.word	0x0000f3d8
    2a6c:	0000f3ec 	.word	0x0000f3ec
    2a70:	0000f400 	.word	0x0000f400
    2a74:	0000f414 	.word	0x0000f414
    2a78:	0000f194 	.word	0x0000f194
    2a7c:	0000f1b8 	.word	0x0000f1b8
    2a80:	0000f1cc 	.word	0x0000f1cc
    2a84:	0000f1e8 	.word	0x0000f1e8
    2a88:	0000f200 	.word	0x0000f200
    2a8c:	0000f218 	.word	0x0000f218
    2a90:	0000f230 	.word	0x0000f230
    2a94:	0000f24c 	.word	0x0000f24c
    2a98:	0000f428 	.word	0x0000f428
    2a9c:	0000f44c 	.word	0x0000f44c
    2aa0:	0000f464 	.word	0x0000f464
    2aa4:	0000f478 	.word	0x0000f478
    2aa8:	0000f490 	.word	0x0000f490
    2aac:	0000f4a8 	.word	0x0000f4a8
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2ab0:	49b8      	ldr	r1, [pc, #736]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ab2:	48b9      	ldr	r0, [pc, #740]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ab4:	f7fd fef2 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab8:	49b8      	ldr	r1, [pc, #736]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2aba:	48b7      	ldr	r0, [pc, #732]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2abc:	f7fd fee0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ac0:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2ac4:	48b4      	ldr	r0, [pc, #720]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ac6:	f00a f9e1 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2aca:	49b5      	ldr	r1, [pc, #724]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2acc:	48b2      	ldr	r0, [pc, #712]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ace:	f7fd fee5 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ad2:	49b4      	ldr	r1, [pc, #720]	; (2da4 <LEDDebug(LEDStruct&)+0xbc0>)
    2ad4:	48b0      	ldr	r0, [pc, #704]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ad6:	f7fd fed3 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ada:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2ade:	48ae      	ldr	r0, [pc, #696]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ae0:	f00a f9d4 	bl	ce8c <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2ae4:	49ae      	ldr	r1, [pc, #696]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2ae6:	48ac      	ldr	r0, [pc, #688]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ae8:	f7fd fed8 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aec:	49ae      	ldr	r1, [pc, #696]	; (2da8 <LEDDebug(LEDStruct&)+0xbc4>)
    2aee:	48aa      	ldr	r0, [pc, #680]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2af0:	f7fd fec6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2af4:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2af8:	48a7      	ldr	r0, [pc, #668]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2afa:	f00a f9c7 	bl	ce8c <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2afe:	49a8      	ldr	r1, [pc, #672]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2b00:	48a5      	ldr	r0, [pc, #660]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b02:	f7fd fecb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b06:	49a9      	ldr	r1, [pc, #676]	; (2dac <LEDDebug(LEDStruct&)+0xbc8>)
    2b08:	48a3      	ldr	r0, [pc, #652]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b0a:	f7fd feb9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b0e:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2b12:	48a1      	ldr	r0, [pc, #644]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b14:	f00a f9ba 	bl	ce8c <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2b18:	49a1      	ldr	r1, [pc, #644]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2b1a:	489f      	ldr	r0, [pc, #636]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b1c:	f7fd febe 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b20:	49a3      	ldr	r1, [pc, #652]	; (2db0 <LEDDebug(LEDStruct&)+0xbcc>)
    2b22:	489d      	ldr	r0, [pc, #628]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b24:	f7fd feac 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b28:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2b2c:	e56d      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2b2e:	49a1      	ldr	r1, [pc, #644]	; (2db4 <LEDDebug(LEDStruct&)+0xbd0>)
    2b30:	4899      	ldr	r0, [pc, #612]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b32:	f7fd feb3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b36:	49a0      	ldr	r1, [pc, #640]	; (2db8 <LEDDebug(LEDStruct&)+0xbd4>)
    2b38:	4897      	ldr	r0, [pc, #604]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b3a:	f7fd fea1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b3e:	2300      	movs	r3, #0
    2b40:	220a      	movs	r2, #10
    2b42:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2b46:	4894      	ldr	r0, [pc, #592]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b48:	f00a f960 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2b4c:	4994      	ldr	r1, [pc, #592]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2b4e:	4892      	ldr	r0, [pc, #584]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b50:	f7fd fea4 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b54:	4999      	ldr	r1, [pc, #612]	; (2dbc <LEDDebug(LEDStruct&)+0xbd8>)
    2b56:	4890      	ldr	r0, [pc, #576]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b58:	f7fd fe92 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b5c:	2300      	movs	r3, #0
    2b5e:	220a      	movs	r2, #10
    2b60:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2b64:	488c      	ldr	r0, [pc, #560]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b66:	f00a f951 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2b6a:	498d      	ldr	r1, [pc, #564]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2b6c:	488a      	ldr	r0, [pc, #552]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b6e:	f7fd fe95 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b72:	4993      	ldr	r1, [pc, #588]	; (2dc0 <LEDDebug(LEDStruct&)+0xbdc>)
    2b74:	4888      	ldr	r0, [pc, #544]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b76:	f7fd fe83 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b7a:	2300      	movs	r3, #0
    2b7c:	220a      	movs	r2, #10
    2b7e:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b82:	4885      	ldr	r0, [pc, #532]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b84:	f00a f942 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b88:	4985      	ldr	r1, [pc, #532]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2b8a:	4883      	ldr	r0, [pc, #524]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b8c:	f7fd fe86 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b90:	498c      	ldr	r1, [pc, #560]	; (2dc4 <LEDDebug(LEDStruct&)+0xbe0>)
    2b92:	4881      	ldr	r0, [pc, #516]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2b94:	f7fd fe74 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b98:	2300      	movs	r3, #0
    2b9a:	220a      	movs	r2, #10
    2b9c:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2ba0:	487d      	ldr	r0, [pc, #500]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ba2:	f00a f933 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2ba6:	497e      	ldr	r1, [pc, #504]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2ba8:	487b      	ldr	r0, [pc, #492]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2baa:	f7fd fe77 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bae:	4986      	ldr	r1, [pc, #536]	; (2dc8 <LEDDebug(LEDStruct&)+0xbe4>)
    2bb0:	4879      	ldr	r0, [pc, #484]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bb2:	f7fd fe65 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bb6:	2300      	movs	r3, #0
    2bb8:	220a      	movs	r2, #10
    2bba:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2bbe:	4876      	ldr	r0, [pc, #472]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bc0:	f00a f924 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2bc4:	4976      	ldr	r1, [pc, #472]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2bc6:	4874      	ldr	r0, [pc, #464]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bc8:	f7fd fe68 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bcc:	497f      	ldr	r1, [pc, #508]	; (2dcc <LEDDebug(LEDStruct&)+0xbe8>)
    2bce:	4872      	ldr	r0, [pc, #456]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bd0:	f7fd fe56 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bd4:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2bd8:	e401      	b.n	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2bda:	497d      	ldr	r1, [pc, #500]	; (2dd0 <LEDDebug(LEDStruct&)+0xbec>)
    2bdc:	486e      	ldr	r0, [pc, #440]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bde:	f7fd fe5d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2be2:	497c      	ldr	r1, [pc, #496]	; (2dd4 <LEDDebug(LEDStruct&)+0xbf0>)
    2be4:	486c      	ldr	r0, [pc, #432]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2be6:	f7fd fe4b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bea:	2300      	movs	r3, #0
    2bec:	220a      	movs	r2, #10
    2bee:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2bf2:	4869      	ldr	r0, [pc, #420]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bf4:	f00a f90a 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2bf8:	4969      	ldr	r1, [pc, #420]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2bfa:	4867      	ldr	r0, [pc, #412]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2bfc:	f7fd fe4e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c00:	4975      	ldr	r1, [pc, #468]	; (2dd8 <LEDDebug(LEDStruct&)+0xbf4>)
    2c02:	4865      	ldr	r0, [pc, #404]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c04:	f7fd fe3c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c08:	2300      	movs	r3, #0
    2c0a:	220a      	movs	r2, #10
    2c0c:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2c10:	4861      	ldr	r0, [pc, #388]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c12:	f00a f8fb 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2c16:	4962      	ldr	r1, [pc, #392]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2c18:	485f      	ldr	r0, [pc, #380]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c1a:	f7fd fe3f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1e:	496f      	ldr	r1, [pc, #444]	; (2ddc <LEDDebug(LEDStruct&)+0xbf8>)
    2c20:	485d      	ldr	r0, [pc, #372]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c22:	f7fd fe2d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c26:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2c2a:	f7ff bbd8 	b.w	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2c2e:	496c      	ldr	r1, [pc, #432]	; (2de0 <LEDDebug(LEDStruct&)+0xbfc>)
    2c30:	4859      	ldr	r0, [pc, #356]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c32:	f7fd fe33 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c36:	496b      	ldr	r1, [pc, #428]	; (2de4 <LEDDebug(LEDStruct&)+0xc00>)
    2c38:	4857      	ldr	r0, [pc, #348]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c3a:	f7fd fe21 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c3e:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2c42:	4855      	ldr	r0, [pc, #340]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c44:	f00a f922 	bl	ce8c <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2c48:	4955      	ldr	r1, [pc, #340]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2c4a:	4853      	ldr	r0, [pc, #332]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c4c:	f7fd fe26 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c50:	4965      	ldr	r1, [pc, #404]	; (2de8 <LEDDebug(LEDStruct&)+0xc04>)
    2c52:	4851      	ldr	r0, [pc, #324]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c54:	f7fd fe14 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c58:	2300      	movs	r3, #0
    2c5a:	220a      	movs	r2, #10
    2c5c:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2c60:	484d      	ldr	r0, [pc, #308]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c62:	f00a f8d3 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    2c66:	494e      	ldr	r1, [pc, #312]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2c68:	484b      	ldr	r0, [pc, #300]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c6a:	f7fd fe17 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c6e:	495f      	ldr	r1, [pc, #380]	; (2dec <LEDDebug(LEDStruct&)+0xc08>)
    2c70:	4849      	ldr	r0, [pc, #292]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c72:	f7fd fe05 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c76:	2300      	movs	r3, #0
    2c78:	220a      	movs	r2, #10
    2c7a:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2c7e:	4846      	ldr	r0, [pc, #280]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c80:	f00a f8c4 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    2c84:	4946      	ldr	r1, [pc, #280]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2c86:	4844      	ldr	r0, [pc, #272]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c88:	f7fd fe08 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c8c:	4958      	ldr	r1, [pc, #352]	; (2df0 <LEDDebug(LEDStruct&)+0xc0c>)
    2c8e:	4842      	ldr	r0, [pc, #264]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c90:	f7fd fdf6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c94:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2c98:	483f      	ldr	r0, [pc, #252]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2c9a:	f00a f8f7 	bl	ce8c <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2c9e:	4940      	ldr	r1, [pc, #256]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2ca0:	483d      	ldr	r0, [pc, #244]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ca2:	f7fd fdfb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ca6:	4953      	ldr	r1, [pc, #332]	; (2df4 <LEDDebug(LEDStruct&)+0xc10>)
    2ca8:	483b      	ldr	r0, [pc, #236]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2caa:	f7fd fde9 	bl	880 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2cae:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2cb2:	2b01      	cmp	r3, #1
    2cb4:	f000 80e0 	beq.w	2e78 <LEDDebug(LEDStruct&)+0xc94>
    2cb8:	f0c0 8101 	bcc.w	2ebe <LEDDebug(LEDStruct&)+0xcda>
    2cbc:	2b02      	cmp	r3, #2
    2cbe:	d103      	bne.n	2cc8 <LEDDebug(LEDStruct&)+0xae4>
    2cc0:	494d      	ldr	r1, [pc, #308]	; (2df8 <LEDDebug(LEDStruct&)+0xc14>)
    2cc2:	4835      	ldr	r0, [pc, #212]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2cc4:	f7fd fddc 	bl	880 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2cc8:	4935      	ldr	r1, [pc, #212]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2cca:	4833      	ldr	r0, [pc, #204]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ccc:	f7fd fde6 	bl	89c <Print::println(char const*)>
    2cd0:	494a      	ldr	r1, [pc, #296]	; (2dfc <LEDDebug(LEDStruct&)+0xc18>)
    2cd2:	4831      	ldr	r0, [pc, #196]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2cd4:	f7fd fdd4 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2cd8:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2cdc:	f7ff bb7f 	b.w	23de <LEDDebug(LEDStruct&)+0x1fa>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2ce0:	4947      	ldr	r1, [pc, #284]	; (2e00 <LEDDebug(LEDStruct&)+0xc1c>)
    2ce2:	482d      	ldr	r0, [pc, #180]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ce4:	f7fd fdda 	bl	89c <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2ce8:	4946      	ldr	r1, [pc, #280]	; (2e04 <LEDDebug(LEDStruct&)+0xc20>)
    2cea:	482b      	ldr	r0, [pc, #172]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2cec:	f7fd fdd6 	bl	89c <Print::println(char const*)>
			Serial.println("");
    2cf0:	4943      	ldr	r1, [pc, #268]	; (2e00 <LEDDebug(LEDStruct&)+0xc1c>)
    2cf2:	4829      	ldr	r0, [pc, #164]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2cf4:	f7fd fdd2 	bl	89c <Print::println(char const*)>
			break;
    2cf8:	f7ff bb78 	b.w	23ec <LEDDebug(LEDStruct&)+0x208>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2cfc:	4942      	ldr	r1, [pc, #264]	; (2e08 <LEDDebug(LEDStruct&)+0xc24>)
    2cfe:	4826      	ldr	r0, [pc, #152]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d00:	f7fd fdcc 	bl	89c <Print::println(char const*)>
    2d04:	f7ff ba89 	b.w	221a <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2d08:	4940      	ldr	r1, [pc, #256]	; (2e0c <LEDDebug(LEDStruct&)+0xc28>)
    2d0a:	4823      	ldr	r0, [pc, #140]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d0c:	f7fd fdc6 	bl	89c <Print::println(char const*)>
    2d10:	f7ff ba83 	b.w	221a <LEDDebug(LEDStruct&)+0x36>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2d14:	493e      	ldr	r1, [pc, #248]	; (2e10 <LEDDebug(LEDStruct&)+0xc2c>)
    2d16:	4820      	ldr	r0, [pc, #128]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d18:	f7fd fdc0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d1c:	493d      	ldr	r1, [pc, #244]	; (2e14 <LEDDebug(LEDStruct&)+0xc30>)
    2d1e:	481e      	ldr	r0, [pc, #120]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d20:	f7fd fdae 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d24:	2300      	movs	r3, #0
    2d26:	220a      	movs	r2, #10
    2d28:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2d2c:	481a      	ldr	r0, [pc, #104]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d2e:	f00a f86d 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2d32:	491b      	ldr	r1, [pc, #108]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2d34:	4818      	ldr	r0, [pc, #96]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d36:	f7fd fdb1 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d3a:	4937      	ldr	r1, [pc, #220]	; (2e18 <LEDDebug(LEDStruct&)+0xc34>)
    2d3c:	4816      	ldr	r0, [pc, #88]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d3e:	f7fd fd9f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d42:	2300      	movs	r3, #0
    2d44:	220a      	movs	r2, #10
    2d46:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2d4a:	4813      	ldr	r0, [pc, #76]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d4c:	f00a f85e 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2d50:	4913      	ldr	r1, [pc, #76]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2d52:	4811      	ldr	r0, [pc, #68]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d54:	f7fd fda2 	bl	89c <Print::println(char const*)>
			if (!leds.fire_sync) {
    2d58:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2d5c:	2d00      	cmp	r5, #0
    2d5e:	d067      	beq.n	2e30 <LEDDebug(LEDStruct&)+0xc4c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d60:	492e      	ldr	r1, [pc, #184]	; (2e1c <LEDDebug(LEDStruct&)+0xc38>)
    2d62:	480d      	ldr	r0, [pc, #52]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d64:	f7fd fd8c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d68:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2d6c:	480a      	ldr	r0, [pc, #40]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d6e:	f00a f88d 	bl	ce8c <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2d72:	490b      	ldr	r1, [pc, #44]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2d74:	4808      	ldr	r0, [pc, #32]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d76:	f7fd fd91 	bl	89c <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2d7a:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2d7e:	3b0f      	subs	r3, #15
    2d80:	2b01      	cmp	r3, #1
    2d82:	f63f ab33 	bhi.w	23ec <LEDDebug(LEDStruct&)+0x208>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d86:	4926      	ldr	r1, [pc, #152]	; (2e20 <LEDDebug(LEDStruct&)+0xc3c>)
    2d88:	4803      	ldr	r0, [pc, #12]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2d8a:	f7fd fd79 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d8e:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2d92:	e43a      	b.n	260a <LEDDebug(LEDStruct&)+0x426>
    2d94:	0000f4c0 	.word	0x0000f4c0
    2d98:	1fff878c 	.word	0x1fff878c
    2d9c:	0000ee68 	.word	0x0000ee68
    2da0:	0000edb0 	.word	0x0000edb0
    2da4:	0000f4e4 	.word	0x0000f4e4
    2da8:	0000f4fc 	.word	0x0000f4fc
    2dac:	0000f514 	.word	0x0000f514
    2db0:	0000f528 	.word	0x0000f528
    2db4:	0000f53c 	.word	0x0000f53c
    2db8:	0000f560 	.word	0x0000f560
    2dbc:	0000f578 	.word	0x0000f578
    2dc0:	0000f590 	.word	0x0000f590
    2dc4:	0000f5a8 	.word	0x0000f5a8
    2dc8:	0000f5c0 	.word	0x0000f5c0
    2dcc:	0000f5d4 	.word	0x0000f5d4
    2dd0:	0000f5ec 	.word	0x0000f5ec
    2dd4:	0000f610 	.word	0x0000f610
    2dd8:	0000f620 	.word	0x0000f620
    2ddc:	0000f63c 	.word	0x0000f63c
    2de0:	0000f654 	.word	0x0000f654
    2de4:	0000f678 	.word	0x0000f678
    2de8:	0000f690 	.word	0x0000f690
    2dec:	0000f6a8 	.word	0x0000f6a8
    2df0:	0000f6c0 	.word	0x0000f6c0
    2df4:	0000f6d4 	.word	0x0000f6d4
    2df8:	0000f6e8 	.word	0x0000f6e8
    2dfc:	0000f6f8 	.word	0x0000f6f8
    2e00:	0000eea4 	.word	0x0000eea4
    2e04:	0000f794 	.word	0x0000f794
    2e08:	0000ed54 	.word	0x0000ed54
    2e0c:	0000ed78 	.word	0x0000ed78
    2e10:	0000f00c 	.word	0x0000f00c
    2e14:	0000f078 	.word	0x0000f078
    2e18:	0000f08c 	.word	0x0000f08c
    2e1c:	0000f0c8 	.word	0x0000f0c8
    2e20:	0000f0d8 	.word	0x0000f0d8
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2e24:	4929      	ldr	r1, [pc, #164]	; (2ecc <LEDDebug(LEDStruct&)+0xce8>)
    2e26:	482a      	ldr	r0, [pc, #168]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e28:	f7fd fd38 	bl	89c <Print::println(char const*)>
    2e2c:	f7ff bb8a 	b.w	2544 <LEDDebug(LEDStruct&)+0x360>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e30:	4928      	ldr	r1, [pc, #160]	; (2ed4 <LEDDebug(LEDStruct&)+0xcf0>)
    2e32:	4827      	ldr	r0, [pc, #156]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e34:	f7fd fd24 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e38:	462b      	mov	r3, r5
    2e3a:	220a      	movs	r2, #10
    2e3c:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2e40:	4823      	ldr	r0, [pc, #140]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e42:	f009 ffe3 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2e46:	4924      	ldr	r1, [pc, #144]	; (2ed8 <LEDDebug(LEDStruct&)+0xcf4>)
    2e48:	4821      	ldr	r0, [pc, #132]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e4a:	f7fd fd27 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e4e:	4923      	ldr	r1, [pc, #140]	; (2edc <LEDDebug(LEDStruct&)+0xcf8>)
    2e50:	481f      	ldr	r0, [pc, #124]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e52:	f7fd fd15 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e56:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2e5a:	481d      	ldr	r0, [pc, #116]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e5c:	462b      	mov	r3, r5
    2e5e:	220a      	movs	r2, #10
    2e60:	f009 ffd4 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2e64:	491c      	ldr	r1, [pc, #112]	; (2ed8 <LEDDebug(LEDStruct&)+0xcf4>)
    2e66:	481a      	ldr	r0, [pc, #104]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e68:	f7fd fd18 	bl	89c <Print::println(char const*)>
    2e6c:	e778      	b.n	2d60 <LEDDebug(LEDStruct&)+0xb7c>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2e6e:	491c      	ldr	r1, [pc, #112]	; (2ee0 <LEDDebug(LEDStruct&)+0xcfc>)
    2e70:	4817      	ldr	r0, [pc, #92]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e72:	f7fd fd13 	bl	89c <Print::println(char const*)>
    2e76:	e558      	b.n	292a <LEDDebug(LEDStruct&)+0x746>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e78:	491a      	ldr	r1, [pc, #104]	; (2ee4 <LEDDebug(LEDStruct&)+0xd00>)
    2e7a:	4815      	ldr	r0, [pc, #84]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e7c:	f7fd fd00 	bl	880 <Print::write(char const*)>
    2e80:	e722      	b.n	2cc8 <LEDDebug(LEDStruct&)+0xae4>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2e82:	4919      	ldr	r1, [pc, #100]	; (2ee8 <LEDDebug(LEDStruct&)+0xd04>)
    2e84:	4812      	ldr	r0, [pc, #72]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e86:	f7fd fd09 	bl	89c <Print::println(char const*)>
    2e8a:	e747      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				case FIRE_RANDOM:		Serial.println("===========FIRE RANDOM============"); break;
    2e8c:	4917      	ldr	r1, [pc, #92]	; (2eec <LEDDebug(LEDStruct&)+0xd08>)
    2e8e:	4810      	ldr	r0, [pc, #64]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e90:	f7fd fd04 	bl	89c <Print::println(char const*)>
    2e94:	e742      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2e96:	4916      	ldr	r1, [pc, #88]	; (2ef0 <LEDDebug(LEDStruct&)+0xd0c>)
    2e98:	480d      	ldr	r0, [pc, #52]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e9a:	f7fd fcff 	bl	89c <Print::println(char const*)>
    2e9e:	e73d      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2ea0:	4914      	ldr	r1, [pc, #80]	; (2ef4 <LEDDebug(LEDStruct&)+0xd10>)
    2ea2:	480b      	ldr	r0, [pc, #44]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2ea4:	f7fd fcfa 	bl	89c <Print::println(char const*)>
    2ea8:	e738      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2eaa:	4913      	ldr	r1, [pc, #76]	; (2ef8 <LEDDebug(LEDStruct&)+0xd14>)
    2eac:	4808      	ldr	r0, [pc, #32]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2eae:	f7fd fcf5 	bl	89c <Print::println(char const*)>
    2eb2:	e733      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2eb4:	4911      	ldr	r1, [pc, #68]	; (2efc <LEDDebug(LEDStruct&)+0xd18>)
    2eb6:	4806      	ldr	r0, [pc, #24]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2eb8:	f7fd fcf0 	bl	89c <Print::println(char const*)>
    2ebc:	e72e      	b.n	2d1c <LEDDebug(LEDStruct&)+0xb38>
    2ebe:	4910      	ldr	r1, [pc, #64]	; (2f00 <LEDDebug(LEDStruct&)+0xd1c>)
    2ec0:	4803      	ldr	r0, [pc, #12]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2ec2:	f7fd fcdd 	bl	880 <Print::write(char const*)>
    2ec6:	e6ff      	b.n	2cc8 <LEDDebug(LEDStruct&)+0xae4>
    2ec8:	490e      	ldr	r1, [pc, #56]	; (2f04 <LEDDebug(LEDStruct&)+0xd20>)
    2eca:	e527      	b.n	291c <LEDDebug(LEDStruct&)+0x738>
    2ecc:	0000ef04 	.word	0x0000ef04
    2ed0:	1fff878c 	.word	0x1fff878c
    2ed4:	0000f0a0 	.word	0x0000f0a0
    2ed8:	0000edb0 	.word	0x0000edb0
    2edc:	0000f0b4 	.word	0x0000f0b4
    2ee0:	0000f1dc 	.word	0x0000f1dc
    2ee4:	0000f6f0 	.word	0x0000f6f0
    2ee8:	0000ef7c 	.word	0x0000ef7c
    2eec:	0000f054 	.word	0x0000f054
    2ef0:	0000efa0 	.word	0x0000efa0
    2ef4:	0000f030 	.word	0x0000f030
    2ef8:	0000efe8 	.word	0x0000efe8
    2efc:	0000efc4 	.word	0x0000efc4
    2f00:	0000f1d8 	.word	0x0000f1d8
    2f04:	0000f1d4 	.word	0x0000f1d4

00002f08 <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f0c:	b08d      	sub	sp, #52	; 0x34
    2f0e:	2134      	movs	r1, #52	; 0x34
    2f10:	4605      	mov	r5, r0
    2f12:	9009      	str	r0, [sp, #36]	; 0x24
    2f14:	4846      	ldr	r0, [pc, #280]	; (3030 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2f16:	4c47      	ldr	r4, [pc, #284]	; (3034 <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    2f18:	f009 fd64 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f1c:	4846      	ldr	r0, [pc, #280]	; (3038 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f1e:	f009 ff65 	bl	cdec <Print::println()>
    2f22:	2133      	movs	r1, #51	; 0x33
    2f24:	4845      	ldr	r0, [pc, #276]	; (303c <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    2f26:	f009 fd5d 	bl	c9e4 <usb_serial_write>
    2f2a:	4843      	ldr	r0, [pc, #268]	; (3038 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f2c:	f009 ff5e 	bl	cdec <Print::println()>
    2f30:	2133      	movs	r1, #51	; 0x33
    2f32:	4843      	ldr	r0, [pc, #268]	; (3040 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    2f34:	f009 fd56 	bl	c9e4 <usb_serial_write>
    2f38:	483f      	ldr	r0, [pc, #252]	; (3038 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f3a:	f009 ff57 	bl	cdec <Print::println()>
    2f3e:	4841      	ldr	r0, [pc, #260]	; (3044 <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f40:	4a41      	ldr	r2, [pc, #260]	; (3048 <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    2f42:	8803      	ldrh	r3, [r0, #0]
    2f44:	7811      	ldrb	r1, [r2, #0]
    2f46:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2f4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f4e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2f52:	3319      	adds	r3, #25
    2f54:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f56:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2f5a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2f5c:	fb12 f201 	smulbb	r2, r2, r1
    2f60:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f62:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2f64:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f68:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2f6c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2f6e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2f72:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2f74:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2f76:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2f78:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2f7a:	d1f8      	bne.n	2f6e <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2f7c:	f8d8 3000 	ldr.w	r3, [r8]
    2f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f82:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2f84:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2f88:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    2f8c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2f90:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2f94:	f04f 33ff 	mov.w	r3, #4294967295
    2f98:	9207      	str	r2, [sp, #28]
    2f9a:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2f9c:	2400      	movs	r4, #0
    2f9e:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2fa0:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2fa4:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fa6:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2faa:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fae:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2fb2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2fb4:	b2f9      	uxtb	r1, r7
    2fb6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2fba:	9104      	str	r1, [sp, #16]
    2fbc:	b2e9      	uxtb	r1, r5
    2fbe:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2fc0:	fa5f f18c 	uxtb.w	r1, ip
    2fc4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2fc6:	9908      	ldr	r1, [sp, #32]
    2fc8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2fca:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2fcc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fd0:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2fd4:	d80c      	bhi.n	2ff0 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2fd6:	9906      	ldr	r1, [sp, #24]
    2fd8:	458c      	cmp	ip, r1
    2fda:	dc07      	bgt.n	2fec <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    2fdc:	290f      	cmp	r1, #15
    2fde:	d005      	beq.n	2fec <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    2fe0:	3101      	adds	r1, #1
    2fe2:	b2c9      	uxtb	r1, r1
    2fe4:	428b      	cmp	r3, r1
    2fe6:	9103      	str	r1, [sp, #12]
    2fe8:	bf38      	it	cc
    2fea:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2fec:	b259      	sxtb	r1, r3
    2fee:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2ff0:	a90b      	add	r1, sp, #44	; 0x2c
    2ff2:	9100      	str	r1, [sp, #0]
    2ff4:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ff6:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2ffa:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2ffe:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3002:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    3006:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    300a:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    300e:	f007 fc45 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3012:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3014:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3018:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    301c:	46ca      	mov	sl, r9
    301e:	d1bf      	bne.n	2fa0 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3020:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3022:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    3026:	f7fe fdcf 	bl	1bc8 <print_palette(unsigned char)>
	}
}
    302a:	b00d      	add	sp, #52	; 0x34
    302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3030:	0000f7dc 	.word	0x0000f7dc
    3034:	00010358 	.word	0x00010358
    3038:	1fff878c 	.word	0x1fff878c
    303c:	0000f814 	.word	0x0000f814
    3040:	0000f848 	.word	0x0000f848
    3044:	1fff8784 	.word	0x1fff8784
    3048:	1fff8750 	.word	0x1fff8750

0000304c <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    304c:	4b24      	ldr	r3, [pc, #144]	; (30e0 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    304e:	4a25      	ldr	r2, [pc, #148]	; (30e4 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    3050:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    3052:	2100      	movs	r1, #0
    3054:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3056:	2b07      	cmp	r3, #7
    3058:	d809      	bhi.n	306e <juggle_update(LEDStruct&)+0x22>
    305a:	e8df f003 	tbb	[pc, r3]
    305e:	1c13      	.short	0x1c13
    3060:	04342e25 	.word	0x04342e25
    3064:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    3066:	4b20      	ldr	r3, [pc, #128]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    3068:	881b      	ldrh	r3, [r3, #0]
    306a:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    306e:	f7ff b8b9 	b.w	21e4 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    3072:	4b1d      	ldr	r3, [pc, #116]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    3074:	881b      	ldrh	r3, [r3, #0]
    3076:	3300      	adds	r3, #0
    3078:	bf18      	it	ne
    307a:	2301      	movne	r3, #1
    307c:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    3080:	f7ff b8b0 	b.w	21e4 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    3084:	4b18      	ldr	r3, [pc, #96]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    3086:	881b      	ldrh	r3, [r3, #0]
    3088:	3300      	adds	r3, #0
    308a:	bf18      	it	ne
    308c:	2301      	movne	r3, #1
    308e:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3092:	f7ff b8a7 	b.w	21e4 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    3096:	4b14      	ldr	r3, [pc, #80]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    3098:	881b      	ldrh	r3, [r3, #0]
    309a:	3300      	adds	r3, #0
    309c:	bf18      	it	ne
    309e:	2301      	movne	r3, #1
    30a0:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30a4:	f7ff b89e 	b.w	21e4 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    30a8:	4b0f      	ldr	r3, [pc, #60]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    30aa:	881b      	ldrh	r3, [r3, #0]
    30ac:	3300      	adds	r3, #0
    30ae:	bf18      	it	ne
    30b0:	2301      	movne	r3, #1
    30b2:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30b6:	f7ff b895 	b.w	21e4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    30ba:	4b0b      	ldr	r3, [pc, #44]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    30bc:	881b      	ldrh	r3, [r3, #0]
    30be:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30c2:	f7ff b88f 	b.w	21e4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    30c6:	4b08      	ldr	r3, [pc, #32]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    30c8:	881b      	ldrh	r3, [r3, #0]
    30ca:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30ce:	f7ff b889 	b.w	21e4 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    30d2:	4b05      	ldr	r3, [pc, #20]	; (30e8 <juggle_update(LEDStruct&)+0x9c>)
    30d4:	881b      	ldrh	r3, [r3, #0]
    30d6:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30da:	f7ff b883 	b.w	21e4 <LEDDebug(LEDStruct&)>
    30de:	bf00      	nop
    30e0:	1fff9e5c 	.word	0x1fff9e5c
    30e4:	1fff9605 	.word	0x1fff9605
    30e8:	1fff9e54 	.word	0x1fff9e54

000030ec <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    30ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    30f0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    30f4:	b089      	sub	sp, #36	; 0x24
    30f6:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    30f8:	2b00      	cmp	r3, #0
    30fa:	f040 809d 	bne.w	3238 <juggle(LEDStruct&)+0x14c>
    30fe:	4ed4      	ldr	r6, [pc, #848]	; (3450 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3100:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3104:	8833      	ldrh	r3, [r6, #0]
    3106:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    310a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    310e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3112:	3019      	adds	r0, #25
    3114:	b280      	uxth	r0, r0
    3116:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    311a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    311e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3122:	3519      	adds	r5, #25
    3124:	b2ad      	uxth	r5, r5
    3126:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    312a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    312e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3132:	3319      	adds	r3, #25
    3134:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3138:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    313c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3140:	3319      	adds	r3, #25
    3142:	b29b      	uxth	r3, r3
    3144:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3148:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    314c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3150:	3119      	adds	r1, #25
    3152:	b289      	uxth	r1, r1
    3154:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3158:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    315c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3160:	3219      	adds	r2, #25
    3162:	b292      	uxth	r2, r2
    3164:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3168:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    316c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3170:	f10e 0e19 	add.w	lr, lr, #25
    3174:	fa1f fe8e 	uxth.w	lr, lr
    3178:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    317c:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3180:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3184:	f10c 0c19 	add.w	ip, ip, #25
    3188:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    318c:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3190:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3194:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3198:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    319c:	b2ff      	uxtb	r7, r7
    319e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    31a2:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    31a6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31aa:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    31ae:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    31b0:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31b6:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31ba:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31be:	ea4f 2e27 	mov.w	lr, r7, asr #8
    31c2:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    31c6:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31c8:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31cc:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    31d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31d4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    31d8:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    31da:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    31de:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31e2:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31e6:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31e8:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31ec:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    31f0:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    31f4:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31f8:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31fa:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    31fe:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3202:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3206:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    320a:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    320c:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    320e:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3212:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3216:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    321a:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    321e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3222:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3226:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    322a:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    322e:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3232:	2b00      	cmp	r3, #0
    3234:	f040 8177 	bne.w	3526 <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3238:	4b86      	ldr	r3, [pc, #536]	; (3454 <juggle(LEDStruct&)+0x368>)
    323a:	781b      	ldrb	r3, [r3, #0]
    323c:	2b00      	cmp	r3, #0
    323e:	f040 817d 	bne.w	353c <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    3242:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3246:	b1d3      	cbz	r3, 327e <juggle(LEDStruct&)+0x192>
    3248:	4b83      	ldr	r3, [pc, #524]	; (3458 <juggle(LEDStruct&)+0x36c>)
    324a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    324e:	2200      	movs	r2, #0
    3250:	f103 0027 	add.w	r0, r3, #39	; 0x27
    3254:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    3258:	e001      	b.n	325e <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    325a:	4283      	cmp	r3, r0
    325c:	d00f      	beq.n	327e <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    325e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3262:	428a      	cmp	r2, r1
    3264:	d1f9      	bne.n	325a <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3266:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    326a:	4a7c      	ldr	r2, [pc, #496]	; (345c <juggle(LEDStruct&)+0x370>)
    326c:	fba2 2303 	umull	r2, r3, r2, r3
    3270:	08db      	lsrs	r3, r3, #3
    3272:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3274:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3276:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    327a:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    327e:	2196      	movs	r1, #150	; 0x96
    3280:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3284:	4620      	mov	r0, r4
    3286:	f007 fb9b 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    328a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    328e:	2900      	cmp	r1, #0
    3290:	f040 80ec 	bne.w	346c <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    3294:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3298:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    329c:	2f00      	cmp	r7, #0
    329e:	f000 81ac 	beq.w	35fa <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    32a2:	2b00      	cmp	r3, #0
    32a4:	f000 8273 	beq.w	378e <juggle(LEDStruct&)+0x6a2>
    32a8:	486d      	ldr	r0, [pc, #436]	; (3460 <juggle(LEDStruct&)+0x374>)
    32aa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    32ae:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3464 <juggle(LEDStruct&)+0x378>
    32b2:	9003      	str	r0, [sp, #12]
    32b4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3468 <juggle(LEDStruct&)+0x37c>
    32b8:	460f      	mov	r7, r1
    32ba:	f10d 0a1c 	add.w	sl, sp, #28
    32be:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    32c2:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    32c6:	e05d      	b.n	3384 <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32c8:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    32cc:	443b      	add	r3, r7
    32ce:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32d0:	f8d9 1000 	ldr.w	r1, [r9]
    32d4:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    32d6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    32d8:	9904      	ldr	r1, [sp, #16]
    32da:	bf98      	it	ls
    32dc:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    32de:	f44f 708c 	mov.w	r0, #280	; 0x118
    32e2:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    32e6:	bf98      	it	ls
    32e8:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    32ea:	fb03 f301 	mul.w	r3, r3, r1
    32ee:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    32f0:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    32f2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    32f6:	d503      	bpl.n	3300 <juggle(LEDStruct&)+0x214>
    32f8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    32fc:	3107      	adds	r1, #7
    32fe:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3300:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3302:	9e03      	ldr	r6, [sp, #12]
    3304:	5c36      	ldrb	r6, [r6, r0]
    3306:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    330a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    330e:	fb06 0101 	mla	r1, r6, r1, r0
    3312:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3314:	041e      	lsls	r6, r3, #16
    3316:	bf48      	it	mi
    3318:	4249      	negmi	r1, r1
    331a:	b20e      	sxth	r6, r1
    331c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3320:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3324:	9100      	str	r1, [sp, #0]
    3326:	4650      	mov	r0, sl
    3328:	4641      	mov	r1, r8
    332a:	f007 fba9 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    332e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3332:	2296      	movs	r2, #150	; 0x96
    3334:	b29b      	uxth	r3, r3
    3336:	fb02 f303 	mul.w	r3, r2, r3
    333a:	0c1b      	lsrs	r3, r3, #16
    333c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3340:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3342:	5ce2      	ldrb	r2, [r4, r3]
    3344:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3348:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    334c:	54e2      	strb	r2, [r4, r3]
    334e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3352:	784a      	ldrb	r2, [r1, #1]
    3354:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3358:	704a      	strb	r2, [r1, #1]
    335a:	788b      	ldrb	r3, [r1, #2]
    335c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3360:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3364:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3366:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    336a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    336e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3372:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3374:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3376:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3378:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    337a:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    337c:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3380:	f240 8205 	bls.w	378e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3384:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3388:	2900      	cmp	r1, #0
    338a:	d19d      	bne.n	32c8 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    338c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3390:	443b      	add	r3, r7
    3392:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3394:	f8d9 1000 	ldr.w	r1, [r9]
    3398:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    339a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    339c:	9905      	ldr	r1, [sp, #20]
    339e:	bf98      	it	ls
    33a0:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    33a2:	f44f 708c 	mov.w	r0, #280	; 0x118
    33a6:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    33aa:	bf98      	it	ls
    33ac:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    33ae:	fb03 f301 	mul.w	r3, r3, r1
    33b2:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33b4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33b6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33ba:	d503      	bpl.n	33c4 <juggle(LEDStruct&)+0x2d8>
    33bc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    33c0:	3107      	adds	r1, #7
    33c2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33c4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33c6:	9e03      	ldr	r6, [sp, #12]
    33c8:	5c36      	ldrb	r6, [r6, r0]
    33ca:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    33ce:	f3c1 0146 	ubfx	r1, r1, #1, #7
    33d2:	fb06 0101 	mla	r1, r6, r1, r0
    33d6:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    33d8:	041e      	lsls	r6, r3, #16
    33da:	bf48      	it	mi
    33dc:	4249      	negmi	r1, r1
    33de:	b20e      	sxth	r6, r1
    33e0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    33e4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33e8:	9100      	str	r1, [sp, #0]
    33ea:	4650      	mov	r0, sl
    33ec:	4641      	mov	r1, r8
    33ee:	f007 fb47 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33f2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    33f6:	b29b      	uxth	r3, r3
    33f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    33fc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3400:	0c1b      	lsrs	r3, r3, #16
    3402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3406:	18e1      	adds	r1, r4, r3
    3408:	5ce2      	ldrb	r2, [r4, r3]
    340a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    340e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3412:	54e2      	strb	r2, [r4, r3]
    3414:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3418:	784a      	ldrb	r2, [r1, #1]
    341a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    341e:	704a      	strb	r2, [r1, #1]
    3420:	788b      	ldrb	r3, [r1, #2]
    3422:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3426:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    342a:	708b      	strb	r3, [r1, #2]
    342c:	4622      	mov	r2, r4
    342e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3430:	7819      	ldrb	r1, [r3, #0]
    3432:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3436:	7859      	ldrb	r1, [r3, #1]
    3438:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    343c:	7899      	ldrb	r1, [r3, #2]
    343e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3442:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3444:	429d      	cmp	r5, r3
    3446:	f1a2 0203 	sub.w	r2, r2, #3
    344a:	d1f1      	bne.n	3430 <juggle(LEDStruct&)+0x344>
    344c:	e78b      	b.n	3366 <juggle(LEDStruct&)+0x27a>
    344e:	bf00      	nop
    3450:	1fff8784 	.word	0x1fff8784
    3454:	1fff9605 	.word	0x1fff9605
    3458:	1fff875b 	.word	0x1fff875b
    345c:	cccccccd 	.word	0xcccccccd
    3460:	00010518 	.word	0x00010518
    3464:	1fffa8f8 	.word	0x1fffa8f8
    3468:	0000fd88 	.word	0x0000fd88
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    346c:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    3470:	2e00      	cmp	r6, #0
    3472:	d067      	beq.n	3544 <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3474:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3478:	2b00      	cmp	r3, #0
    347a:	f000 8188 	beq.w	378e <juggle(LEDStruct&)+0x6a2>
    347e:	2500      	movs	r5, #0
    3480:	f10d 0a1c 	add.w	sl, sp, #28
    3484:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3488:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    348c:	e039      	b.n	3502 <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    348e:	fb06 f305 	mul.w	r3, r6, r5
    3492:	2900      	cmp	r1, #0
    3494:	f000 81b5 	beq.w	3802 <juggle(LEDStruct&)+0x716>
    3498:	2295      	movs	r2, #149	; 0x95
    349a:	2100      	movs	r1, #0
    349c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    34a0:	f7fd f808 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34a4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    34a8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    34ac:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34b0:	9100      	str	r1, [sp, #0]
    34b2:	4607      	mov	r7, r0
    34b4:	4641      	mov	r1, r8
    34b6:	4650      	mov	r0, sl
    34b8:	f007 fae2 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34bc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    34c0:	18e1      	adds	r1, r4, r3
    34c2:	5ce2      	ldrb	r2, [r4, r3]
    34c4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34c8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34cc:	54e2      	strb	r2, [r4, r3]
    34ce:	784a      	ldrb	r2, [r1, #1]
    34d0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34d4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34d8:	704a      	strb	r2, [r1, #1]
    34da:	788b      	ldrb	r3, [r1, #2]
    34dc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34e0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34e4:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34e6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    34ea:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34ee:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    34f2:	3501      	adds	r5, #1
    34f4:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34f6:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34f8:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34fa:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34fe:	f240 8146 	bls.w	378e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    3502:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3506:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    350a:	2b00      	cmp	r3, #0
    350c:	d1bf      	bne.n	348e <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    350e:	2900      	cmp	r1, #0
    3510:	f000 81b8 	beq.w	3884 <juggle(LEDStruct&)+0x798>
    3514:	4619      	mov	r1, r3
    3516:	2295      	movs	r2, #149	; 0x95
    3518:	fb06 f305 	mul.w	r3, r6, r5
    351c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3520:	f7fd f80a 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3524:	e7be      	b.n	34a4 <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3526:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    352a:	fa02 f300 	lsl.w	r3, r2, r0
    352e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3532:	4bd0      	ldr	r3, [pc, #832]	; (3874 <juggle(LEDStruct&)+0x788>)
    3534:	781b      	ldrb	r3, [r3, #0]
    3536:	2b00      	cmp	r3, #0
    3538:	f43f ae83 	beq.w	3242 <juggle(LEDStruct&)+0x156>
    353c:	4620      	mov	r0, r4
    353e:	f7ff fd85 	bl	304c <juggle_update(LEDStruct&)>
    3542:	e67e      	b.n	3242 <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3544:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3548:	2900      	cmp	r1, #0
    354a:	f000 8120 	beq.w	378e <juggle(LEDStruct&)+0x6a2>
    354e:	f10d 0a1c 	add.w	sl, sp, #28
    3552:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3556:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    355a:	e03c      	b.n	35d6 <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    355c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3560:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3564:	4431      	add	r1, r6
    3566:	2b00      	cmp	r3, #0
    3568:	f000 8114 	beq.w	3794 <juggle(LEDStruct&)+0x6a8>
    356c:	2300      	movs	r3, #0
    356e:	4408      	add	r0, r1
    3570:	2295      	movs	r2, #149	; 0x95
    3572:	4619      	mov	r1, r3
    3574:	f7fc ff9e 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3578:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    357c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3580:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3584:	9100      	str	r1, [sp, #0]
    3586:	4607      	mov	r7, r0
    3588:	4641      	mov	r1, r8
    358a:	4650      	mov	r0, sl
    358c:	f007 fa78 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3590:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3594:	18e1      	adds	r1, r4, r3
    3596:	5ce2      	ldrb	r2, [r4, r3]
    3598:	f89d 001c 	ldrb.w	r0, [sp, #28]
    359c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35a0:	54e2      	strb	r2, [r4, r3]
    35a2:	784a      	ldrb	r2, [r1, #1]
    35a4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35a8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35ac:	704a      	strb	r2, [r1, #1]
    35ae:	788b      	ldrb	r3, [r1, #2]
    35b0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35b4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35b8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35ba:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35be:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35c2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    35c6:	3601      	adds	r6, #1
    35c8:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35ca:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35cc:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35ce:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35d2:	f240 80dc 	bls.w	378e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    35d6:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    35da:	2b00      	cmp	r3, #0
    35dc:	d1be      	bne.n	355c <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    35de:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    35e2:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    35e6:	4431      	add	r1, r6
    35e8:	4408      	add	r0, r1
    35ea:	2a00      	cmp	r2, #0
    35ec:	f000 8185 	beq.w	38fa <juggle(LEDStruct&)+0x80e>
    35f0:	4619      	mov	r1, r3
    35f2:	2295      	movs	r2, #149	; 0x95
    35f4:	f7fc ffa0 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    35f8:	e7be      	b.n	3578 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    35fa:	2b00      	cmp	r3, #0
    35fc:	f000 80c7 	beq.w	378e <juggle(LEDStruct&)+0x6a2>
    3600:	4b9d      	ldr	r3, [pc, #628]	; (3878 <juggle(LEDStruct&)+0x78c>)
    3602:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3606:	f8df 9274 	ldr.w	r9, [pc, #628]	; 387c <juggle(LEDStruct&)+0x790>
    360a:	9303      	str	r3, [sp, #12]
    360c:	f8df b270 	ldr.w	fp, [pc, #624]	; 3880 <juggle(LEDStruct&)+0x794>
    3610:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3614:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3618:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    361c:	e057      	b.n	36ce <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    361e:	f8d9 3000 	ldr.w	r3, [r9]
    3622:	9306      	str	r3, [sp, #24]
	return ret;
    3624:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3626:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    362a:	fb0a f303 	mul.w	r3, sl, r3
    362e:	0209      	lsls	r1, r1, #8
    3630:	fb03 f301 	mul.w	r3, r3, r1
    3634:	0379      	lsls	r1, r7, #13
    3636:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    363a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    363c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    363e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3642:	d503      	bpl.n	364c <juggle(LEDStruct&)+0x560>
    3644:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3648:	3307      	adds	r3, #7
    364a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    364c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    364e:	9e03      	ldr	r6, [sp, #12]
    3650:	5c36      	ldrb	r6, [r6, r0]
    3652:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3656:	f3c3 0346 	ubfx	r3, r3, #1, #7
    365a:	fb06 0303 	mla	r3, r6, r3, r0
    365e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3660:	040e      	lsls	r6, r1, #16
    3662:	bf48      	it	mi
    3664:	425b      	negmi	r3, r3
    3666:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    366a:	b21e      	sxth	r6, r3
    366c:	a805      	add	r0, sp, #20
    366e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3672:	9100      	str	r1, [sp, #0]
    3674:	4641      	mov	r1, r8
    3676:	f007 fa03 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    367a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    367e:	2296      	movs	r2, #150	; 0x96
    3680:	b29b      	uxth	r3, r3
    3682:	fb02 f303 	mul.w	r3, r2, r3
    3686:	0c1b      	lsrs	r3, r3, #16
    3688:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    368c:	18e1      	adds	r1, r4, r3
    368e:	5ce2      	ldrb	r2, [r4, r3]
    3690:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3694:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3698:	54e2      	strb	r2, [r4, r3]
    369a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    369e:	784a      	ldrb	r2, [r1, #1]
    36a0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36a4:	704a      	strb	r2, [r1, #1]
    36a6:	788b      	ldrb	r3, [r1, #2]
    36a8:	f89d 2016 	ldrb.w	r2, [sp, #22]
    36ac:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36b0:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36b2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    36b6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36ba:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    36be:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36c0:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36c2:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36c4:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36c6:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36c8:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36cc:	d95f      	bls.n	378e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36ce:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    36d2:	2b00      	cmp	r3, #0
    36d4:	d1a3      	bne.n	361e <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36d6:	f8d9 3000 	ldr.w	r3, [r9]
    36da:	9307      	str	r3, [sp, #28]
	return ret;
    36dc:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    36de:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    36e2:	fb0a f101 	mul.w	r1, sl, r1
    36e6:	021b      	lsls	r3, r3, #8
    36e8:	fb03 f301 	mul.w	r3, r3, r1
    36ec:	0379      	lsls	r1, r7, #13
    36ee:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    36f2:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    36f4:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    36f6:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36fa:	d503      	bpl.n	3704 <juggle(LEDStruct&)+0x618>
    36fc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3700:	3307      	adds	r3, #7
    3702:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3704:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3706:	9e03      	ldr	r6, [sp, #12]
    3708:	5c36      	ldrb	r6, [r6, r0]
    370a:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    370e:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3712:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3716:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3718:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    371a:	bf48      	it	mi
    371c:	425b      	negmi	r3, r3
    371e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3722:	b21e      	sxth	r6, r3
    3724:	a805      	add	r0, sp, #20
    3726:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    372a:	9100      	str	r1, [sp, #0]
    372c:	4641      	mov	r1, r8
    372e:	f007 f9a7 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3732:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3736:	b29b      	uxth	r3, r3
    3738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    373c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3740:	0c1b      	lsrs	r3, r3, #16
    3742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3746:	18e1      	adds	r1, r4, r3
    3748:	5ce2      	ldrb	r2, [r4, r3]
    374a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    374e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3752:	54e2      	strb	r2, [r4, r3]
    3754:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3758:	784a      	ldrb	r2, [r1, #1]
    375a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    375e:	704a      	strb	r2, [r1, #1]
    3760:	788b      	ldrb	r3, [r1, #2]
    3762:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3766:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    376a:	708b      	strb	r3, [r1, #2]
    376c:	4622      	mov	r2, r4
    376e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3770:	7819      	ldrb	r1, [r3, #0]
    3772:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3776:	7859      	ldrb	r1, [r3, #1]
    3778:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    377c:	7899      	ldrb	r1, [r3, #2]
    377e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3782:	3303      	adds	r3, #3
    3784:	42ab      	cmp	r3, r5
    3786:	f1a2 0203 	sub.w	r2, r2, #3
    378a:	d1f1      	bne.n	3770 <juggle(LEDStruct&)+0x684>
    378c:	e791      	b.n	36b2 <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    378e:	b009      	add	sp, #36	; 0x24
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3794:	4408      	add	r0, r1
    3796:	224a      	movs	r2, #74	; 0x4a
    3798:	4619      	mov	r1, r3
    379a:	f7fc fe8b 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    379e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    37a2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    37a6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    37aa:	9100      	str	r1, [sp, #0]
    37ac:	4607      	mov	r7, r0
    37ae:	4641      	mov	r1, r8
    37b0:	4650      	mov	r0, sl
    37b2:	f007 f965 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    37b6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    37ba:	18e1      	adds	r1, r4, r3
    37bc:	5ce2      	ldrb	r2, [r4, r3]
    37be:	f89d 001c 	ldrb.w	r0, [sp, #28]
    37c2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    37c6:	54e2      	strb	r2, [r4, r3]
    37c8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    37cc:	784a      	ldrb	r2, [r1, #1]
    37ce:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    37d2:	704a      	strb	r2, [r1, #1]
    37d4:	788b      	ldrb	r3, [r1, #2]
    37d6:	f89d 201e 	ldrb.w	r2, [sp, #30]
    37da:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    37de:	708b      	strb	r3, [r1, #2]
    37e0:	4622      	mov	r2, r4
    37e2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37e4:	7819      	ldrb	r1, [r3, #0]
    37e6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    37ea:	7859      	ldrb	r1, [r3, #1]
    37ec:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    37f0:	7899      	ldrb	r1, [r3, #2]
    37f2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    37f6:	3303      	adds	r3, #3
    37f8:	42ab      	cmp	r3, r5
    37fa:	f1a2 0203 	sub.w	r2, r2, #3
    37fe:	d1f1      	bne.n	37e4 <juggle(LEDStruct&)+0x6f8>
    3800:	e6db      	b.n	35ba <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3802:	224a      	movs	r2, #74	; 0x4a
    3804:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3808:	f7fc fe54 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    380c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3810:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3814:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3818:	9100      	str	r1, [sp, #0]
    381a:	4607      	mov	r7, r0
    381c:	4641      	mov	r1, r8
    381e:	4650      	mov	r0, sl
    3820:	f007 f92e 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3824:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3828:	18e1      	adds	r1, r4, r3
    382a:	5ce2      	ldrb	r2, [r4, r3]
    382c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3830:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3834:	54e2      	strb	r2, [r4, r3]
    3836:	f89d 301d 	ldrb.w	r3, [sp, #29]
    383a:	784a      	ldrb	r2, [r1, #1]
    383c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3840:	704a      	strb	r2, [r1, #1]
    3842:	788b      	ldrb	r3, [r1, #2]
    3844:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3848:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    384c:	708b      	strb	r3, [r1, #2]
    384e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3852:	4623      	mov	r3, r4
    3854:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3856:	7819      	ldrb	r1, [r3, #0]
    3858:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    385c:	7859      	ldrb	r1, [r3, #1]
    385e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3862:	7899      	ldrb	r1, [r3, #2]
    3864:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3868:	3303      	adds	r3, #3
    386a:	4283      	cmp	r3, r0
    386c:	f1a2 0203 	sub.w	r2, r2, #3
    3870:	d1f1      	bne.n	3856 <juggle(LEDStruct&)+0x76a>
    3872:	e638      	b.n	34e6 <juggle(LEDStruct&)+0x3fa>
    3874:	1fff9605 	.word	0x1fff9605
    3878:	00010518 	.word	0x00010518
    387c:	1fffa8f8 	.word	0x1fffa8f8
    3880:	0000fd88 	.word	0x0000fd88
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3884:	fb06 f305 	mul.w	r3, r6, r5
    3888:	224a      	movs	r2, #74	; 0x4a
    388a:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    388e:	f7fc fe53 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3892:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3896:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    389a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    389e:	9100      	str	r1, [sp, #0]
    38a0:	4607      	mov	r7, r0
    38a2:	4641      	mov	r1, r8
    38a4:	4650      	mov	r0, sl
    38a6:	f007 f8eb 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38aa:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    38ae:	18e1      	adds	r1, r4, r3
    38b0:	5ce2      	ldrb	r2, [r4, r3]
    38b2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    38b6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    38ba:	54e2      	strb	r2, [r4, r3]
    38bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    38c0:	784a      	ldrb	r2, [r1, #1]
    38c2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    38c6:	704a      	strb	r2, [r1, #1]
    38c8:	788b      	ldrb	r3, [r1, #2]
    38ca:	f89d 201e 	ldrb.w	r2, [sp, #30]
    38ce:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    38d2:	708b      	strb	r3, [r1, #2]
    38d4:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    38d8:	4623      	mov	r3, r4
    38da:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38dc:	7819      	ldrb	r1, [r3, #0]
    38de:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    38e2:	7859      	ldrb	r1, [r3, #1]
    38e4:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    38e8:	7899      	ldrb	r1, [r3, #2]
    38ea:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    38ee:	3303      	adds	r3, #3
    38f0:	4283      	cmp	r3, r0
    38f2:	f1a2 0203 	sub.w	r2, r2, #3
    38f6:	d1f1      	bne.n	38dc <juggle(LEDStruct&)+0x7f0>
    38f8:	e5f5      	b.n	34e6 <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    38fa:	4613      	mov	r3, r2
    38fc:	4611      	mov	r1, r2
    38fe:	224a      	movs	r2, #74	; 0x4a
    3900:	f7fc fe1a 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3904:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3908:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    390c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3910:	9100      	str	r1, [sp, #0]
    3912:	4607      	mov	r7, r0
    3914:	4641      	mov	r1, r8
    3916:	4650      	mov	r0, sl
    3918:	f007 f8b2 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    391c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3920:	18e1      	adds	r1, r4, r3
    3922:	5ce2      	ldrb	r2, [r4, r3]
    3924:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3928:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    392c:	54e2      	strb	r2, [r4, r3]
    392e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3932:	784a      	ldrb	r2, [r1, #1]
    3934:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3938:	704a      	strb	r2, [r1, #1]
    393a:	788b      	ldrb	r3, [r1, #2]
    393c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3940:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3944:	708b      	strb	r3, [r1, #2]
    3946:	4622      	mov	r2, r4
    3948:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    394a:	7819      	ldrb	r1, [r3, #0]
    394c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3950:	7859      	ldrb	r1, [r3, #1]
    3952:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3956:	7899      	ldrb	r1, [r3, #2]
    3958:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    395c:	3303      	adds	r3, #3
    395e:	42ab      	cmp	r3, r5
    3960:	f1a2 0203 	sub.w	r2, r2, #3
    3964:	d1f1      	bne.n	394a <juggle(LEDStruct&)+0x85e>
    3966:	e628      	b.n	35ba <juggle(LEDStruct&)+0x4ce>

00003968 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    396c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3970:	b08d      	sub	sp, #52	; 0x34
    3972:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3974:	2b00      	cmp	r3, #0
    3976:	f040 809d 	bne.w	3ab4 <juggle_half(LEDStruct&)+0x14c>
    397a:	4ec5      	ldr	r6, [pc, #788]	; (3c90 <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    397c:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3980:	8833      	ldrh	r3, [r6, #0]
    3982:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    398a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    398e:	3019      	adds	r0, #25
    3990:	b280      	uxth	r0, r0
    3992:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3996:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    399a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    399e:	3519      	adds	r5, #25
    39a0:	b2ad      	uxth	r5, r5
    39a2:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    39a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    39aa:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39ae:	3319      	adds	r3, #25
    39b0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39bc:	3319      	adds	r3, #25
    39be:	b29b      	uxth	r3, r3
    39c0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    39c8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    39cc:	3119      	adds	r1, #25
    39ce:	b289      	uxth	r1, r1
    39d0:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    39d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    39d8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    39dc:	3219      	adds	r2, #25
    39de:	b292      	uxth	r2, r2
    39e0:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    39e4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    39e8:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    39ec:	f10e 0e19 	add.w	lr, lr, #25
    39f0:	fa1f fe8e 	uxth.w	lr, lr
    39f4:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    39f8:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    39fc:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3a00:	f10c 0c19 	add.w	ip, ip, #25
    3a04:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a08:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a0c:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3a10:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a14:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a18:	b2ff      	uxtb	r7, r7
    3a1a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3a1e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3a22:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a26:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3a2a:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3a2c:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a32:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a36:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a3a:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3a3e:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3a42:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a44:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a48:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a50:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3a54:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3a56:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3a5a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a5e:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a62:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a64:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a68:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3a6c:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a70:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a74:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3a76:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3a7a:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3a7e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a82:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3a86:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3a88:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3a8a:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a8e:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3a92:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a96:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3a9a:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3a9e:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3aa2:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3aa6:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3aaa:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3aae:	2b00      	cmp	r3, #0
    3ab0:	f040 8290 	bne.w	3fd4 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3ab4:	4b77      	ldr	r3, [pc, #476]	; (3c94 <juggle_half(LEDStruct&)+0x32c>)
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	2b00      	cmp	r3, #0
    3aba:	f040 8296 	bne.w	3fea <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3abe:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3ac2:	b113      	cbz	r3, 3aca <juggle_half(LEDStruct&)+0x162>
    3ac4:	2300      	movs	r3, #0
    3ac6:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3aca:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3ace:	2196      	movs	r1, #150	; 0x96
    3ad0:	4620      	mov	r0, r4
    3ad2:	f006 ff75 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3ad6:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3ada:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3ade:	2f00      	cmp	r7, #0
    3ae0:	f040 8199 	bne.w	3e16 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3ae4:	2a00      	cmp	r2, #0
    3ae6:	f000 8350 	beq.w	418a <juggle_half(LEDStruct&)+0x822>
    3aea:	4b6b      	ldr	r3, [pc, #428]	; (3c98 <juggle_half(LEDStruct&)+0x330>)
    3aec:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3c9c <juggle_half(LEDStruct&)+0x334>
    3af0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3ca0 <juggle_half(LEDStruct&)+0x338>
    3af4:	9303      	str	r3, [sp, #12]
    3af6:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3afa:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3afe:	b2be      	uxth	r6, r7
    3b00:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b02:	9a03      	ldr	r2, [sp, #12]
    3b04:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3b08:	6812      	ldr	r2, [r2, #0]
    3b0a:	9207      	str	r2, [sp, #28]
    3b0c:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3b0e:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b10:	9a07      	ldr	r2, [sp, #28]
    3b12:	bf98      	it	ls
    3b14:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b16:	f44f 718c 	mov.w	r1, #280	; 0x118
    3b1a:	bf98      	it	ls
    3b1c:	b29b      	uxthls	r3, r3
    3b1e:	fb01 f202 	mul.w	r2, r1, r2
    3b22:	fb03 f302 	mul.w	r3, r3, r2
    3b26:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3b2a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3b2e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b30:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b32:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b36:	d503      	bpl.n	3b40 <juggle_half(LEDStruct&)+0x1d8>
    3b38:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3b3c:	3207      	adds	r2, #7
    3b3e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b40:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b42:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3b46:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3b4a:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3b4e:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3b52:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b54:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3b56:	bf48      	it	mi
    3b58:	4255      	negmi	r5, r2
    3b5a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b5e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b62:	bf54      	ite	pl
    3b64:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3b66:	b22d      	sxthmi	r5, r5
    3b68:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b6c:	9100      	str	r1, [sp, #0]
    3b6e:	4648      	mov	r0, r9
    3b70:	4641      	mov	r1, r8
    3b72:	f006 ff85 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b76:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b7a:	2226      	movs	r2, #38	; 0x26
    3b7c:	b29b      	uxth	r3, r3
    3b7e:	fb02 f303 	mul.w	r3, r2, r3
    3b82:	0c1b      	lsrs	r3, r3, #16
    3b84:	3325      	adds	r3, #37	; 0x25
    3b86:	b29b      	uxth	r3, r3
    3b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b8c:	18e1      	adds	r1, r4, r3
    3b8e:	5ce2      	ldrb	r2, [r4, r3]
    3b90:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3b94:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b98:	54e2      	strb	r2, [r4, r3]
    3b9a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3b9e:	784a      	ldrb	r2, [r1, #1]
    3ba0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ba4:	704a      	strb	r2, [r1, #1]
    3ba6:	788b      	ldrb	r3, [r1, #2]
    3ba8:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3bac:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3bb0:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3bb2:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3bb6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3bba:	4416      	add	r6, r2
    3bbc:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bbe:	9b03      	ldr	r3, [sp, #12]
    3bc0:	681b      	ldr	r3, [r3, #0]
    3bc2:	9306      	str	r3, [sp, #24]
    3bc4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3bc6:	9a06      	ldr	r2, [sp, #24]
    3bc8:	bf98      	it	ls
    3bca:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3bcc:	f44f 738c 	mov.w	r3, #280	; 0x118
    3bd0:	bf98      	it	ls
    3bd2:	b2b6      	uxthls	r6, r6
    3bd4:	fb03 f202 	mul.w	r2, r3, r2
    3bd8:	fb06 f202 	mul.w	r2, r6, r2
    3bdc:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3be0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3be4:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3be6:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bea:	d503      	bpl.n	3bf4 <juggle_half(LEDStruct&)+0x28c>
    3bec:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3bf0:	3307      	adds	r3, #7
    3bf2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3bf4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bf6:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3bfa:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3bfe:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3c02:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3c06:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c08:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3c0a:	bf48      	it	mi
    3c0c:	425b      	negmi	r3, r3
    3c0e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c12:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c16:	b21d      	sxth	r5, r3
    3c18:	4648      	mov	r0, r9
    3c1a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c1e:	9100      	str	r1, [sp, #0]
    3c20:	4641      	mov	r1, r8
    3c22:	f006 ff2d 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c26:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c2a:	2226      	movs	r2, #38	; 0x26
    3c2c:	b29b      	uxth	r3, r3
    3c2e:	fb02 f303 	mul.w	r3, r2, r3
    3c32:	0c1b      	lsrs	r3, r3, #16
    3c34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c38:	18e1      	adds	r1, r4, r3
    3c3a:	5ce2      	ldrb	r2, [r4, r3]
    3c3c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3c40:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c44:	54e2      	strb	r2, [r4, r3]
    3c46:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3c4a:	784a      	ldrb	r2, [r1, #1]
    3c4c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c50:	704a      	strb	r2, [r1, #1]
    3c52:	788b      	ldrb	r3, [r1, #2]
    3c54:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3c58:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c5c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c5e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3c62:	3701      	adds	r7, #1
    3c64:	b2ff      	uxtb	r7, r7
    3c66:	42bb      	cmp	r3, r7
    3c68:	461a      	mov	r2, r3
    3c6a:	f63f af48 	bhi.w	3afe <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3c6e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3c72:	2a00      	cmp	r2, #0
    3c74:	f000 819a 	beq.w	3fac <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3c78:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3c7c:	2f00      	cmp	r7, #0
    3c7e:	f040 81c1 	bne.w	4004 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3c82:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c86:	2b00      	cmp	r3, #0
    3c88:	f000 80c2 	beq.w	3e10 <juggle_half(LEDStruct&)+0x4a8>
    3c8c:	e00a      	b.n	3ca4 <juggle_half(LEDStruct&)+0x33c>
    3c8e:	bf00      	nop
    3c90:	1fff8784 	.word	0x1fff8784
    3c94:	1fff9605 	.word	0x1fff9605
    3c98:	1fffa8f8 	.word	0x1fffa8f8
    3c9c:	00010518 	.word	0x00010518
    3ca0:	0000fd88 	.word	0x0000fd88
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ca4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3ca8:	3301      	adds	r3, #1
    3caa:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3cac:	9a03      	ldr	r2, [sp, #12]
    3cae:	b2be      	uxth	r6, r7
    3cb0:	6812      	ldr	r2, [r2, #0]
    3cb2:	920b      	str	r2, [sp, #44]	; 0x2c
    3cb4:	4433      	add	r3, r6
    3cb6:	b29b      	uxth	r3, r3
    3cb8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3cba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cbc:	bf9c      	itt	ls
    3cbe:	021b      	lslls	r3, r3, #8
    3cc0:	b29b      	uxthls	r3, r3
    3cc2:	fb09 f202 	mul.w	r2, r9, r2
    3cc6:	fb03 f302 	mul.w	r3, r3, r2
    3cca:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3cd2:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cd4:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cd6:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cda:	d503      	bpl.n	3ce4 <juggle_half(LEDStruct&)+0x37c>
    3cdc:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3ce0:	3207      	adds	r2, #7
    3ce2:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3ce4:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ce6:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3cea:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3cee:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3cf2:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3cf6:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3cf8:	b2ad      	uxth	r5, r5
    3cfa:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3cfe:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3d02:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d06:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3d08:	bf48      	it	mi
    3d0a:	426d      	negmi	r5, r5
    3d0c:	4641      	mov	r1, r8
    3d0e:	a809      	add	r0, sp, #36	; 0x24
    3d10:	b22d      	sxth	r5, r5
    3d12:	f006 feb5 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d16:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d1a:	2226      	movs	r2, #38	; 0x26
    3d1c:	b29b      	uxth	r3, r3
    3d1e:	fb02 f303 	mul.w	r3, r2, r3
    3d22:	0c1b      	lsrs	r3, r3, #16
    3d24:	3370      	adds	r3, #112	; 0x70
    3d26:	b29b      	uxth	r3, r3
    3d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d2c:	18e1      	adds	r1, r4, r3
    3d2e:	5ce2      	ldrb	r2, [r4, r3]
    3d30:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3d34:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d38:	54e2      	strb	r2, [r4, r3]
    3d3a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3d3e:	784a      	ldrb	r2, [r1, #1]
    3d40:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d44:	704a      	strb	r2, [r1, #1]
    3d46:	788b      	ldrb	r3, [r1, #2]
    3d48:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3d4c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d50:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d52:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d56:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d5a:	4413      	add	r3, r2
    3d5c:	3301      	adds	r3, #1
    3d5e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d60:	9b03      	ldr	r3, [sp, #12]
    3d62:	681b      	ldr	r3, [r3, #0]
    3d64:	930a      	str	r3, [sp, #40]	; 0x28
    3d66:	b2b6      	uxth	r6, r6
    3d68:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3d6c:	bf9c      	itt	ls
    3d6e:	0236      	lslls	r6, r6, #8
    3d70:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d72:	fb09 f202 	mul.w	r2, r9, r2
    3d76:	fb06 f202 	mul.w	r2, r6, r2
    3d7a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3d7e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d82:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d84:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d88:	d503      	bpl.n	3d92 <juggle_half(LEDStruct&)+0x42a>
    3d8a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d8e:	3307      	adds	r3, #7
    3d90:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d92:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d94:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3d98:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d9c:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3da0:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3da4:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3da6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3da8:	bf48      	it	mi
    3daa:	425b      	negmi	r3, r3
    3dac:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3db0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3db4:	b21d      	sxth	r5, r3
    3db6:	a809      	add	r0, sp, #36	; 0x24
    3db8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3dbc:	9100      	str	r1, [sp, #0]
    3dbe:	4641      	mov	r1, r8
    3dc0:	f006 fe5e 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3dc4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3dc8:	b29b      	uxth	r3, r3
    3dca:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3dce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3dd2:	0c1b      	lsrs	r3, r3, #16
    3dd4:	334b      	adds	r3, #75	; 0x4b
    3dd6:	b29b      	uxth	r3, r3
    3dd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ddc:	18e1      	adds	r1, r4, r3
    3dde:	5ce2      	ldrb	r2, [r4, r3]
    3de0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3de4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3de8:	54e2      	strb	r2, [r4, r3]
    3dea:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3dee:	784a      	ldrb	r2, [r1, #1]
    3df0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3df4:	704a      	strb	r2, [r1, #1]
    3df6:	788b      	ldrb	r3, [r1, #2]
    3df8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3dfc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e00:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e02:	3701      	adds	r7, #1
    3e04:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e08:	b2ff      	uxtb	r7, r7
    3e0a:	42bb      	cmp	r3, r7
    3e0c:	f63f af4a 	bhi.w	3ca4 <juggle_half(LEDStruct&)+0x33c>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3e10:	b00d      	add	sp, #52	; 0x34
    3e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e16:	2a00      	cmp	r2, #0
    3e18:	f000 81b7 	beq.w	418a <juggle_half(LEDStruct&)+0x822>
    3e1c:	4b75      	ldr	r3, [pc, #468]	; (3ff4 <juggle_half(LEDStruct&)+0x68c>)
    3e1e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 3ffc <juggle_half(LEDStruct&)+0x694>
    3e22:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 4000 <juggle_half(LEDStruct&)+0x698>
    3e26:	9303      	str	r3, [sp, #12]
    3e28:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3e2c:	2700      	movs	r7, #0
    3e2e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e32:	b2be      	uxth	r6, r7
    3e34:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e36:	9a03      	ldr	r2, [sp, #12]
    3e38:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3e3c:	6812      	ldr	r2, [r2, #0]
    3e3e:	9205      	str	r2, [sp, #20]
    3e40:	440b      	add	r3, r1
    3e42:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e44:	9a05      	ldr	r2, [sp, #20]
    3e46:	bf98      	it	ls
    3e48:	021b      	lslls	r3, r3, #8
    3e4a:	f44f 718c 	mov.w	r1, #280	; 0x118
    3e4e:	bf98      	it	ls
    3e50:	b29b      	uxthls	r3, r3
    3e52:	fb01 f202 	mul.w	r2, r1, r2
    3e56:	fb03 f302 	mul.w	r3, r3, r2
    3e5a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e62:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e64:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e68:	d503      	bpl.n	3e72 <juggle_half(LEDStruct&)+0x50a>
    3e6a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e6e:	3207      	adds	r2, #7
    3e70:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e72:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e74:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3e78:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e7c:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3e80:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3e84:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e86:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3e88:	bf48      	it	mi
    3e8a:	4255      	negmi	r5, r2
    3e8c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e90:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e94:	bf54      	ite	pl
    3e96:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3e98:	b22d      	sxthmi	r5, r5
    3e9a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3e9e:	9100      	str	r1, [sp, #0]
    3ea0:	4648      	mov	r0, r9
    3ea2:	4641      	mov	r1, r8
    3ea4:	f006 fdec 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ea8:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3eac:	2226      	movs	r2, #38	; 0x26
    3eae:	b29b      	uxth	r3, r3
    3eb0:	fb02 f303 	mul.w	r3, r2, r3
    3eb4:	0c1b      	lsrs	r3, r3, #16
    3eb6:	3325      	adds	r3, #37	; 0x25
    3eb8:	b29b      	uxth	r3, r3
    3eba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ebe:	18e1      	adds	r1, r4, r3
    3ec0:	5ce2      	ldrb	r2, [r4, r3]
    3ec2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3ec6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3eca:	54e2      	strb	r2, [r4, r3]
    3ecc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3ed0:	784a      	ldrb	r2, [r1, #1]
    3ed2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ed6:	704a      	strb	r2, [r1, #1]
    3ed8:	788b      	ldrb	r3, [r1, #2]
    3eda:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3ede:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ee2:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ee4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3ee8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3eec:	4416      	add	r6, r2
    3eee:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ef0:	9b03      	ldr	r3, [sp, #12]
    3ef2:	681b      	ldr	r3, [r3, #0]
    3ef4:	9304      	str	r3, [sp, #16]
    3ef6:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3ef8:	9b04      	ldr	r3, [sp, #16]
    3efa:	bf98      	it	ls
    3efc:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3efe:	f44f 728c 	mov.w	r2, #280	; 0x118
    3f02:	bf98      	it	ls
    3f04:	b2b6      	uxthls	r6, r6
    3f06:	fb02 f303 	mul.w	r3, r2, r3
    3f0a:	fb06 f303 	mul.w	r3, r6, r3
    3f0e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f16:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f18:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f1a:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f1e:	d503      	bpl.n	3f28 <juggle_half(LEDStruct&)+0x5c0>
    3f20:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3f24:	3207      	adds	r2, #7
    3f26:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f28:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f2a:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3f2e:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3f32:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3f36:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3f3a:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f3c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3f3e:	bf48      	it	mi
    3f40:	4252      	negmi	r2, r2
    3f42:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f46:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f4a:	b215      	sxth	r5, r2
    3f4c:	4648      	mov	r0, r9
    3f4e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f52:	9100      	str	r1, [sp, #0]
    3f54:	4641      	mov	r1, r8
    3f56:	f006 fd93 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f5a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3f5e:	2226      	movs	r2, #38	; 0x26
    3f60:	b29b      	uxth	r3, r3
    3f62:	fb02 f303 	mul.w	r3, r2, r3
    3f66:	0c1b      	lsrs	r3, r3, #16
    3f68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f6c:	18e1      	adds	r1, r4, r3
    3f6e:	5ce2      	ldrb	r2, [r4, r3]
    3f70:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3f74:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f78:	54e2      	strb	r2, [r4, r3]
    3f7a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f7e:	784a      	ldrb	r2, [r1, #1]
    3f80:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f84:	704a      	strb	r2, [r1, #1]
    3f86:	788b      	ldrb	r3, [r1, #2]
    3f88:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f8c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f90:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f92:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f96:	3701      	adds	r7, #1
    3f98:	b2ff      	uxtb	r7, r7
    3f9a:	42bb      	cmp	r3, r7
    3f9c:	461a      	mov	r2, r3
    3f9e:	f63f af48 	bhi.w	3e32 <juggle_half(LEDStruct&)+0x4ca>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3fa2:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3fa6:	2a00      	cmp	r2, #0
    3fa8:	f47f ae66 	bne.w	3c78 <juggle_half(LEDStruct&)+0x310>
    3fac:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3fb0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fb2:	7822      	ldrb	r2, [r4, #0]
    3fb4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3fb8:	7862      	ldrb	r2, [r4, #1]
    3fba:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3fbe:	78a2      	ldrb	r2, [r4, #2]
    3fc0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3fc4:	3403      	adds	r4, #3
    3fc6:	42a1      	cmp	r1, r4
    3fc8:	f1a3 0303 	sub.w	r3, r3, #3
    3fcc:	d1f1      	bne.n	3fb2 <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3fce:	b00d      	add	sp, #52	; 0x34
    3fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3fd4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3fd8:	fa02 f300 	lsl.w	r3, r2, r0
    3fdc:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3fe0:	4b05      	ldr	r3, [pc, #20]	; (3ff8 <juggle_half(LEDStruct&)+0x690>)
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	f43f ad6a 	beq.w	3abe <juggle_half(LEDStruct&)+0x156>
    3fea:	4620      	mov	r0, r4
    3fec:	f7ff f82e 	bl	304c <juggle_update(LEDStruct&)>
    3ff0:	e565      	b.n	3abe <juggle_half(LEDStruct&)+0x156>
    3ff2:	bf00      	nop
    3ff4:	1fffa8f8 	.word	0x1fffa8f8
    3ff8:	1fff9605 	.word	0x1fff9605
    3ffc:	00010518 	.word	0x00010518
    4000:	0000fd88 	.word	0x0000fd88
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4004:	2b00      	cmp	r3, #0
    4006:	f43f af03 	beq.w	3e10 <juggle_half(LEDStruct&)+0x4a8>
    400a:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    400c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4010:	3301      	adds	r3, #1
    4012:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4014:	9a03      	ldr	r2, [sp, #12]
    4016:	b2be      	uxth	r6, r7
    4018:	6812      	ldr	r2, [r2, #0]
    401a:	9209      	str	r2, [sp, #36]	; 0x24
    401c:	4433      	add	r3, r6
    401e:	b29b      	uxth	r3, r3
    4020:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4022:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4024:	bf98      	it	ls
    4026:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4028:	f44f 718c 	mov.w	r1, #280	; 0x118
    402c:	bf98      	it	ls
    402e:	b29b      	uxthls	r3, r3
    4030:	fb01 f202 	mul.w	r2, r1, r2
    4034:	fb03 f302 	mul.w	r3, r3, r2
    4038:	f3c3 430e 	ubfx	r3, r3, #16, #15
    403c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4040:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4042:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4046:	d503      	bpl.n	4050 <juggle_half(LEDStruct&)+0x6e8>
    4048:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    404c:	3207      	adds	r2, #7
    404e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4050:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4052:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4056:	f81b 5001 	ldrb.w	r5, [fp, r1]
    405a:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    405e:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4062:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4064:	b2ad      	uxth	r5, r5
    4066:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    406a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    406e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4072:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    4074:	bf48      	it	mi
    4076:	426d      	negmi	r5, r5
    4078:	4641      	mov	r1, r8
    407a:	4648      	mov	r0, r9
    407c:	b22d      	sxth	r5, r5
    407e:	f006 fcff 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4082:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4086:	2226      	movs	r2, #38	; 0x26
    4088:	b29b      	uxth	r3, r3
    408a:	fb02 f303 	mul.w	r3, r2, r3
    408e:	0c1b      	lsrs	r3, r3, #16
    4090:	3370      	adds	r3, #112	; 0x70
    4092:	b29b      	uxth	r3, r3
    4094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4098:	18e1      	adds	r1, r4, r3
    409a:	5ce2      	ldrb	r2, [r4, r3]
    409c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    40a0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    40a4:	54e2      	strb	r2, [r4, r3]
    40a6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    40aa:	784a      	ldrb	r2, [r1, #1]
    40ac:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40b0:	704a      	strb	r2, [r1, #1]
    40b2:	788b      	ldrb	r3, [r1, #2]
    40b4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    40b8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40bc:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    40be:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    40c2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40c6:	4413      	add	r3, r2
    40c8:	3301      	adds	r3, #1
    40ca:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40cc:	9b03      	ldr	r3, [sp, #12]
    40ce:	681b      	ldr	r3, [r3, #0]
    40d0:	9308      	str	r3, [sp, #32]
    40d2:	b2b6      	uxth	r6, r6
    40d4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    40d6:	9b08      	ldr	r3, [sp, #32]
    40d8:	bf98      	it	ls
    40da:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    40dc:	f44f 728c 	mov.w	r2, #280	; 0x118
    40e0:	bf98      	it	ls
    40e2:	b2b6      	uxthls	r6, r6
    40e4:	fb02 f303 	mul.w	r3, r2, r3
    40e8:	fb06 f303 	mul.w	r3, r6, r3
    40ec:	f3c3 430e 	ubfx	r3, r3, #16, #15
    40f0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    40f4:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    40f6:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    40f8:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    40fc:	d503      	bpl.n	4106 <juggle_half(LEDStruct&)+0x79e>
    40fe:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4102:	3207      	adds	r2, #7
    4104:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4106:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4108:	f3c2 0246 	ubfx	r2, r2, #1, #7
    410c:	f81b 5001 	ldrb.w	r5, [fp, r1]
    4110:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    4114:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4118:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    411a:	b2ad      	uxth	r5, r5
    411c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4120:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4124:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4128:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    412a:	bf48      	it	mi
    412c:	426d      	negmi	r5, r5
    412e:	4641      	mov	r1, r8
    4130:	4648      	mov	r0, r9
    4132:	b22d      	sxth	r5, r5
    4134:	f006 fca4 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4138:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    413c:	b29b      	uxth	r3, r3
    413e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4142:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4146:	0c1b      	lsrs	r3, r3, #16
    4148:	334b      	adds	r3, #75	; 0x4b
    414a:	b29b      	uxth	r3, r3
    414c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4150:	18e1      	adds	r1, r4, r3
    4152:	5ce2      	ldrb	r2, [r4, r3]
    4154:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4158:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    415c:	54e2      	strb	r2, [r4, r3]
    415e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4162:	784a      	ldrb	r2, [r1, #1]
    4164:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4168:	704a      	strb	r2, [r1, #1]
    416a:	788b      	ldrb	r3, [r1, #2]
    416c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4170:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4174:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4176:	3701      	adds	r7, #1
    4178:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    417c:	b2ff      	uxtb	r7, r7
    417e:	42bb      	cmp	r3, r7
    4180:	f63f af44 	bhi.w	400c <juggle_half(LEDStruct&)+0x6a4>
		}
	}
	else {
		strip_sync(leds);
	}
}
    4184:	b00d      	add	sp, #52	; 0x34
    4186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    418a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    418e:	2b00      	cmp	r3, #0
    4190:	f43f af0c 	beq.w	3fac <juggle_half(LEDStruct&)+0x644>
    4194:	e63c      	b.n	3e10 <juggle_half(LEDStruct&)+0x4a8>
    4196:	bf00      	nop

00004198 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4198:	4b17      	ldr	r3, [pc, #92]	; (41f8 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    419a:	4a18      	ldr	r2, [pc, #96]	; (41fc <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    419c:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    419e:	2100      	movs	r1, #0
    41a0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    41a2:	2b03      	cmp	r3, #3
    41a4:	d80a      	bhi.n	41bc <rainbow_update(LEDStruct&)+0x24>
    41a6:	e8df f003 	tbb	[pc, r3]
    41aa:	0217      	.short	0x0217
    41ac:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    41ae:	4b14      	ldr	r3, [pc, #80]	; (4200 <rainbow_update(LEDStruct&)+0x68>)
    41b0:	881b      	ldrh	r3, [r3, #0]
    41b2:	3300      	adds	r3, #0
    41b4:	bf18      	it	ne
    41b6:	2301      	movne	r3, #1
    41b8:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41bc:	f7fe b812 	b.w	21e4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    41c0:	4b0f      	ldr	r3, [pc, #60]	; (4200 <rainbow_update(LEDStruct&)+0x68>)
    41c2:	881b      	ldrh	r3, [r3, #0]
    41c4:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		default:	break;
	}
	LEDDebug(leds);
    41c8:	f7fe b80c 	b.w	21e4 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    41cc:	4b0c      	ldr	r3, [pc, #48]	; (4200 <rainbow_update(LEDStruct&)+0x68>)
    41ce:	881b      	ldrh	r3, [r3, #0]
    41d0:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41d4:	f7fe b806 	b.w	21e4 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    41d8:	4b09      	ldr	r3, [pc, #36]	; (4200 <rainbow_update(LEDStruct&)+0x68>)
    41da:	881b      	ldrh	r3, [r3, #0]
    41dc:	2b00      	cmp	r3, #0
    41de:	bf14      	ite	ne
    41e0:	2301      	movne	r3, #1
    41e2:	2300      	moveq	r3, #0
    41e4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    41e8:	bf14      	ite	ne
    41ea:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    41ec:	234b      	moveq	r3, #75	; 0x4b
    41ee:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41f2:	f7fd bff7 	b.w	21e4 <LEDDebug(LEDStruct&)>
    41f6:	bf00      	nop
    41f8:	1fff9e5c 	.word	0x1fff9e5c
    41fc:	1fff9605 	.word	0x1fff9605
    4200:	1fff9e54 	.word	0x1fff9e54

00004204 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4204:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    420e:	2b00      	cmp	r3, #0
    4210:	d14a      	bne.n	42a8 <rainbow_march(LEDStruct&)+0xa4>
    4212:	4860      	ldr	r0, [pc, #384]	; (4394 <rainbow_march(LEDStruct&)+0x190>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4214:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4218:	8803      	ldrh	r3, [r0, #0]
    421a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    421e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4222:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4226:	3319      	adds	r3, #25
    4228:	b29b      	uxth	r3, r3
    422a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    422e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4232:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4236:	3219      	adds	r2, #25
    4238:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    423a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    423e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4240:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4244:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4248:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    424c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4250:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4254:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4256:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4258:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    425a:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    425c:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    425e:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4262:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    4264:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4268:	2706      	movs	r7, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    426a:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    426c:	42b3      	cmp	r3, r6

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    426e:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    4272:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    4276:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    427a:	f884 627b 	strb.w	r6, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    427e:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4282:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4286:	f000 8083 	beq.w	4390 <rainbow_march(LEDStruct&)+0x18c>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    428a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    428e:	b2d2      	uxtb	r2, r2
    4290:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4294:	1212      	asrs	r2, r2, #8
    4296:	4432      	add	r2, r6
    4298:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    429a:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    429e:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    42a2:	4620      	mov	r0, r4
    42a4:	f7fd ff9e 	bl	21e4 <LEDDebug(LEDStruct&)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    42a8:	4b3b      	ldr	r3, [pc, #236]	; (4398 <rainbow_march(LEDStruct&)+0x194>)
    42aa:	781b      	ldrb	r3, [r3, #0]
    42ac:	2b00      	cmp	r3, #0
    42ae:	d16b      	bne.n	4388 <rainbow_march(LEDStruct&)+0x184>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    42b0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    42b4:	bb43      	cbnz	r3, 4308 <rainbow_march(LEDStruct&)+0x104>
    42b6:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    42ba:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    42be:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    42c0:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    42c4:	b2d2      	uxtb	r2, r2
    42c6:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    42ca:	bb4b      	cbnz	r3, 4320 <rainbow_march(LEDStruct&)+0x11c>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    42cc:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    42d0:	2b00      	cmp	r3, #0
    42d2:	d151      	bne.n	4378 <rainbow_march(LEDStruct&)+0x174>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    42d4:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    42d8:	214b      	movs	r1, #75	; 0x4b
    42da:	4620      	mov	r0, r4
    42dc:	f006 fabe 	bl	a85c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    42e0:	4620      	mov	r0, r4
    42e2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    42e6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42e8:	7802      	ldrb	r2, [r0, #0]
    42ea:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    42ee:	7842      	ldrb	r2, [r0, #1]
    42f0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    42f4:	7882      	ldrb	r2, [r0, #2]
    42f6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    42fa:	3003      	adds	r0, #3
    42fc:	4288      	cmp	r0, r1
    42fe:	f1a3 0303 	sub.w	r3, r3, #3
    4302:	d1f1      	bne.n	42e8 <rainbow_march(LEDStruct&)+0xe4>
    4304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4308:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    430c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4310:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4312:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4316:	b2d2      	uxtb	r2, r2
    4318:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    431c:	2b00      	cmp	r3, #0
    431e:	d0d5      	beq.n	42cc <rainbow_march(LEDStruct&)+0xc8>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4320:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4324:	2125      	movs	r1, #37	; 0x25
    4326:	4620      	mov	r0, r4
    4328:	f006 fa98 	bl	a85c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    432c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4330:	4623      	mov	r3, r4
    4332:	4621      	mov	r1, r4
    4334:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4336:	7810      	ldrb	r0, [r2, #0]
    4338:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    433c:	7850      	ldrb	r0, [r2, #1]
    433e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4342:	7890      	ldrb	r0, [r2, #2]
    4344:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4348:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    434a:	42aa      	cmp	r2, r5
    434c:	f1a1 0103 	sub.w	r1, r1, #3
    4350:	d1f1      	bne.n	4336 <rainbow_march(LEDStruct&)+0x132>
    4352:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4356:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4358:	7802      	ldrb	r2, [r0, #0]
    435a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    435e:	7842      	ldrb	r2, [r0, #1]
    4360:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4364:	7882      	ldrb	r2, [r0, #2]
    4366:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    436a:	3003      	adds	r0, #3
    436c:	4288      	cmp	r0, r1
    436e:	f1a3 0303 	sub.w	r3, r3, #3
    4372:	d1f1      	bne.n	4358 <rainbow_march(LEDStruct&)+0x154>
    4374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4378:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    437c:	4620      	mov	r0, r4
    437e:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    4380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4384:	f006 ba6a 	b.w	a85c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4388:	4620      	mov	r0, r4
    438a:	f7ff ff05 	bl	4198 <rainbow_update(LEDStruct&)>
    438e:	e78f      	b.n	42b0 <rainbow_march(LEDStruct&)+0xac>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4390:	461a      	mov	r2, r3
    4392:	e782      	b.n	429a <rainbow_march(LEDStruct&)+0x96>
    4394:	1fff8784 	.word	0x1fff8784
    4398:	1fff9605 	.word	0x1fff9605

0000439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    439c:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    439e:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    43a2:	f89d 6018 	ldrb.w	r6, [sp, #24]
    43a6:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    43aa:	250a      	movs	r5, #10
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    43ac:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    43ae:	3c0f      	subs	r4, #15
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    43b0:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    43b4:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    43b6:	f04f 050f 	mov.w	r5, #15
    43ba:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    43be:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    43c2:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    43c6:	d93d      	bls.n	4444 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    43c8:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    43ca:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    43cc:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    43d0:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    43d4:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    43d8:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    43dc:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    43e0:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    43e4:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    43e8:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43ec:	4c1f      	ldr	r4, [pc, #124]	; (446c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    43ee:	8823      	ldrh	r3, [r4, #0]
    43f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    43f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    43f8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    43fc:	3319      	adds	r3, #25
    43fe:	b29b      	uxth	r3, r3
    4400:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4404:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4408:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    440c:	3219      	adds	r2, #25
    440e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4410:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4414:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4418:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    441a:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    441c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4420:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4424:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4426:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4428:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    442c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4430:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4434:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4438:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    443c:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    443e:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4442:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4444:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4448:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    444c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4450:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4454:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4458:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    445c:	b112      	cbz	r2, 4464 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    445e:	2225      	movs	r2, #37	; 0x25
    4460:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    4464:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4468:	e7c0      	b.n	43ec <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    446a:	bf00      	nop
    446c:	1fff8784 	.word	0x1fff8784

00004470 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4470:	4b19      	ldr	r3, [pc, #100]	; (44d8 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4472:	4a1a      	ldr	r2, [pc, #104]	; (44dc <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    4474:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4476:	2100      	movs	r1, #0
    4478:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    447a:	2b05      	cmp	r3, #5
    447c:	d808      	bhi.n	4490 <fire_update(LEDStruct&)+0x20>
    447e:	e8df f003 	tbb	[pc, r3]
    4482:	150f      	.short	0x150f
    4484:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4488:	4b15      	ldr	r3, [pc, #84]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    448a:	881b      	ldrh	r3, [r3, #0]
    448c:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4490:	f7fd bea8 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4494:	4b12      	ldr	r3, [pc, #72]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    4496:	881b      	ldrh	r3, [r3, #0]
    4498:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    449c:	f7fd bea2 	b.w	21e4 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    44a0:	4b0f      	ldr	r3, [pc, #60]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    44a2:	881b      	ldrh	r3, [r3, #0]
    44a4:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44a8:	f7fd be9c 	b.w	21e4 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    44ac:	4b0c      	ldr	r3, [pc, #48]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    44ae:	881b      	ldrh	r3, [r3, #0]
    44b0:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44b4:	f7fd be96 	b.w	21e4 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    44b8:	4b09      	ldr	r3, [pc, #36]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    44ba:	881b      	ldrh	r3, [r3, #0]
    44bc:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44c0:	f7fd be90 	b.w	21e4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    44c4:	4b06      	ldr	r3, [pc, #24]	; (44e0 <fire_update(LEDStruct&)+0x70>)
    44c6:	881b      	ldrh	r3, [r3, #0]
    44c8:	3300      	adds	r3, #0
    44ca:	bf18      	it	ne
    44cc:	2301      	movne	r3, #1
    44ce:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44d2:	f7fd be87 	b.w	21e4 <LEDDebug(LEDStruct&)>
    44d6:	bf00      	nop
    44d8:	1fff9e5c 	.word	0x1fff9e5c
    44dc:	1fff9605 	.word	0x1fff9605
    44e0:	1fff9e54 	.word	0x1fff9e54

000044e4 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    44e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    44e8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    44ec:	4dd0      	ldr	r5, [pc, #832]	; (4830 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    44ee:	b086      	sub	sp, #24
    44f0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    44f2:	2b00      	cmp	r3, #0
    44f4:	f000 8229 	beq.w	494a <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    44f8:	4bce      	ldr	r3, [pc, #824]	; (4834 <fire(LEDStruct&)+0x350>)
    44fa:	781b      	ldrb	r3, [r3, #0]
    44fc:	2b00      	cmp	r3, #0
    44fe:	f040 8220 	bne.w	4942 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4502:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4506:	2b00      	cmp	r3, #0
    4508:	f000 82d1 	beq.w	4aae <fire(LEDStruct&)+0x5ca>
    450c:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4510:	882a      	ldrh	r2, [r5, #0]
    4512:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4516:	004f      	lsls	r7, r1, #1
    4518:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    451c:	fb97 f7f3 	sdiv	r7, r7, r3
    4520:	3702      	adds	r7, #2
    4522:	b2ff      	uxtb	r7, r7
    4524:	44a6      	add	lr, r4
    4526:	f204 267f 	addw	r6, r4, #639	; 0x27f
    452a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    452e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4532:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4536:	3219      	adds	r2, #25
    4538:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    453a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    453e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4542:	b2c9      	uxtb	r1, r1
    4544:	fb11 f107 	smulbb	r1, r1, r7
    4548:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    454c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4550:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4552:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4554:	d1e9      	bne.n	452a <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4556:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    455a:	802a      	strh	r2, [r5, #0]
    455c:	2e00      	cmp	r6, #0
    455e:	f000 80f5 	beq.w	474c <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4562:	f1a3 0e03 	sub.w	lr, r3, #3
    4566:	f1be 0f01 	cmp.w	lr, #1
    456a:	f04f 0c01 	mov.w	ip, #1
    456e:	dd1a      	ble.n	45a6 <fire(LEDStruct&)+0xc2>
    4570:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    4574:	f203 277e 	addw	r7, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4578:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 4838 <fire(LEDStruct&)+0x354>
    457c:	4420      	add	r0, r4
    457e:	4427      	add	r7, r4
    4580:	f504 7820 	add.w	r8, r4, #640	; 0x280
    4584:	7801      	ldrb	r1, [r0, #0]
    4586:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    458a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    458e:	fb89 a601 	smull	sl, r6, r9, r1
    4592:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4596:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4598:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    459c:	d1f2      	bne.n	4584 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    459e:	f1bc 0f00 	cmp.w	ip, #0
    45a2:	f000 8102 	beq.w	47aa <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45a6:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    45aa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    45ae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45b2:	3219      	adds	r2, #25
    45b4:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    45b6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    45ba:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    45be:	802a      	strh	r2, [r5, #0]
    45c0:	b2c9      	uxtb	r1, r1
    45c2:	428e      	cmp	r6, r1
    45c4:	489a      	ldr	r0, [pc, #616]	; (4830 <fire(LEDStruct&)+0x34c>)
    45c6:	d926      	bls.n	4616 <fire(LEDStruct&)+0x132>
    45c8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    45cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    45d0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45d4:	3219      	adds	r2, #25
    45d6:	b292      	uxth	r2, r2
    45d8:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    45dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    45e0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    45e4:	3619      	adds	r6, #25
    45e6:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45e8:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    45ec:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    45f0:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    45f2:	b2d2      	uxtb	r2, r2
    45f4:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    45f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    45fc:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4600:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    4604:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4606:	8006      	strh	r6, [r0, #0]
    4608:	3960      	subs	r1, #96	; 0x60
    460a:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    460e:	fa80 f051 	uqadd8	r0, r0, r1
    4612:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4616:	f1bc 0f00 	cmp.w	ip, #0
    461a:	d112      	bne.n	4642 <fire(LEDStruct&)+0x15e>
    461c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    461e:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4622:	4983      	ldr	r1, [pc, #524]	; (4830 <fire(LEDStruct&)+0x34c>)
    4624:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4628:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    462c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4630:	3219      	adds	r2, #25
    4632:	b292      	uxth	r2, r2
    4634:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4638:	b2c0      	uxtb	r0, r0
    463a:	4286      	cmp	r6, r0
    463c:	802a      	strh	r2, [r5, #0]
    463e:	f200 80cd 	bhi.w	47dc <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4642:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4646:	2a00      	cmp	r2, #0
    4648:	d15f      	bne.n	470a <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    464a:	2b00      	cmp	r3, #0
    464c:	f000 8226 	beq.w	4a9c <fire(LEDStruct&)+0x5b8>
    4650:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4654:	4690      	mov	r8, r2
    4656:	46b9      	mov	r9, r7
    4658:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    465a:	3b01      	subs	r3, #1
    465c:	ebc8 0503 	rsb	r5, r8, r3
    4660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4664:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4668:	4630      	mov	r0, r6
    466a:	f006 f9e7 	bl	aa3c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    466e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4672:	5563      	strb	r3, [r4, r5]
    4674:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4676:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    467a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    467e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4680:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4682:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4686:	f108 0801 	add.w	r8, r8, #1
    468a:	4543      	cmp	r3, r8
    468c:	dce5      	bgt.n	465a <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    468e:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4692:	b30a      	cbz	r2, 46d8 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    4694:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4698:	2a00      	cmp	r2, #0
    469a:	f040 81bf 	bne.w	4a1c <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    469e:	4690      	mov	r8, r2
    46a0:	2b00      	cmp	r3, #0
    46a2:	f000 81fe 	beq.w	4aa2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    46a6:	eb08 0503 	add.w	r5, r8, r3
    46aa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    46ae:	4630      	mov	r0, r6
    46b0:	f006 f9c4 	bl	aa3c <HeatColor(unsigned char)>
    46b4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46b8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    46bc:	54e2      	strb	r2, [r4, r3]
    46be:	4423      	add	r3, r4
        g = rhs.g;
    46c0:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    46c4:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    46c8:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    46ca:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46cc:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    46d0:	f108 0801 	add.w	r8, r8, #1
    46d4:	4543      	cmp	r3, r8
    46d6:	dce6      	bgt.n	46a6 <fire(LEDStruct&)+0x1c2>
    46d8:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    46dc:	2a00      	cmp	r2, #0
    46de:	f000 80ad 	beq.w	483c <fire(LEDStruct&)+0x358>
    46e2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46e6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46e8:	781a      	ldrb	r2, [r3, #0]
    46ea:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    46ee:	785a      	ldrb	r2, [r3, #1]
    46f0:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    46f4:	789a      	ldrb	r2, [r3, #2]
    46f6:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    46fa:	3303      	adds	r3, #3
    46fc:	4299      	cmp	r1, r3
    46fe:	f1a4 0403 	sub.w	r4, r4, #3
    4702:	d1f1      	bne.n	46e8 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4704:	b006      	add	sp, #24
    4706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    470a:	2b00      	cmp	r3, #0
    470c:	f000 80ea 	beq.w	48e4 <fire(LEDStruct&)+0x400>
    4710:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4714:	46b9      	mov	r9, r7
    4716:	4625      	mov	r5, r4
    4718:	f04f 0800 	mov.w	r8, #0
    471c:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    471e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4722:	4630      	mov	r0, r6
    4724:	f006 f98a 	bl	aa3c <HeatColor(unsigned char)>
    4728:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    472c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4730:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4734:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4736:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4738:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    473a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    473e:	f108 0801 	add.w	r8, r8, #1
    4742:	4543      	cmp	r3, r8
    4744:	f105 0503 	add.w	r5, r5, #3
    4748:	dce9      	bgt.n	471e <fire(LEDStruct&)+0x23a>
    474a:	e7a0      	b.n	468e <fire(LEDStruct&)+0x1aa>
    474c:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4750:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4754:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4758:	fb9e fef3 	sdiv	lr, lr, r3
    475c:	f10e 0e02 	add.w	lr, lr, #2
    4760:	fa5f fe8e 	uxtb.w	lr, lr
    4764:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4768:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    476c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4770:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4774:	3219      	adds	r2, #25
    4776:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4778:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    477c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4780:	b2c9      	uxtb	r1, r1
    4782:	fb11 f10e 	smulbb	r1, r1, lr
    4786:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    478a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    478c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4790:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4792:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4794:	dbe8      	blt.n	4768 <fire(LEDStruct&)+0x284>
    4796:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4798:	f1a3 0e03 	sub.w	lr, r3, #3
    479c:	f1be 0f01 	cmp.w	lr, #1
    47a0:	f04f 0c00 	mov.w	ip, #0
    47a4:	f73f aee4 	bgt.w	4570 <fire(LEDStruct&)+0x8c>
    47a8:	e6fd      	b.n	45a6 <fire(LEDStruct&)+0xc2>
    47aa:	f203 26c7 	addw	r6, r3, #711	; 0x2c7
    47ae:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    47b2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4838 <fire(LEDStruct&)+0x354>
    47b6:	4426      	add	r6, r4
    47b8:	4427      	add	r7, r4
    47ba:	7831      	ldrb	r1, [r6, #0]
    47bc:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    47c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    47c4:	fb88 9001 	smull	r9, r0, r8, r1
    47c8:	f10e 3eff 	add.w	lr, lr, #4294967295
    47cc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    47d0:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    47d4:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    47d8:	d1ef      	bne.n	47ba <fire(LEDStruct&)+0x2d6>
    47da:	e6e4      	b.n	45a6 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47dc:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    47e0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    47e4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    47e8:	3219      	adds	r2, #25
    47ea:	b292      	uxth	r2, r2
    47ec:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    47f0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    47f4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    47f8:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47fa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47fe:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4800:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4802:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4806:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    480a:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    480c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4810:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4814:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4818:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    481c:	800d      	strh	r5, [r1, #0]
    481e:	1201      	asrs	r1, r0, #8
    4820:	3960      	subs	r1, #96	; 0x60
    4822:	4630      	mov	r0, r6
    4824:	fa80 f051 	uqadd8	r0, r0, r1
    4828:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
    482c:	e709      	b.n	4642 <fire(LEDStruct&)+0x15e>
    482e:	bf00      	nop
    4830:	1fff8784 	.word	0x1fff8784
    4834:	1fff9605 	.word	0x1fff9605
    4838:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    483c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4840:	2a00      	cmp	r2, #0
    4842:	d15a      	bne.n	48fa <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4844:	2b00      	cmp	r3, #0
    4846:	f43f af5d 	beq.w	4704 <fire(LEDStruct&)+0x220>
    484a:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    484e:	46b9      	mov	r9, r7
    4850:	f04f 0800 	mov.w	r8, #0
    4854:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    4856:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    485a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    485e:	354b      	adds	r5, #75	; 0x4b
    4860:	4445      	add	r5, r8
    4862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4866:	4630      	mov	r0, r6
    4868:	f006 f8e8 	bl	aa3c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    486c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4870:	5563      	strb	r3, [r4, r5]
    4872:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4874:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4878:	f89d 2015 	ldrb.w	r2, [sp, #21]
    487c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    487e:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4880:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4884:	f108 0801 	add.w	r8, r8, #1
    4888:	4543      	cmp	r3, r8
    488a:	dce4      	bgt.n	4856 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    488c:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4890:	2a00      	cmp	r2, #0
    4892:	f43f af37 	beq.w	4704 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    4896:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    489a:	2a00      	cmp	r2, #0
    489c:	f000 80dd 	beq.w	4a5a <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    48a0:	2b00      	cmp	r3, #0
    48a2:	f43f af2f 	beq.w	4704 <fire(LEDStruct&)+0x220>
    48a6:	4625      	mov	r5, r4
    48a8:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    48ac:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    48b0:	4630      	mov	r0, r6
    48b2:	f006 f8c3 	bl	aa3c <HeatColor(unsigned char)>
    48b6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48ba:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    48be:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48c2:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    48c6:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    48ca:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    48ce:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    48d2:	f108 0801 	add.w	r8, r8, #1
    48d6:	4543      	cmp	r3, r8
    48d8:	f105 0503 	add.w	r5, r5, #3
    48dc:	dce6      	bgt.n	48ac <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    48de:	b006      	add	sp, #24
    48e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    48e4:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    48e8:	2b00      	cmp	r3, #0
    48ea:	f040 80da 	bne.w	4aa2 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    48ee:	f1bc 0f00 	cmp.w	ip, #0
    48f2:	f47f aef6 	bne.w	46e2 <fire(LEDStruct&)+0x1fe>
    48f6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    48fa:	2b00      	cmp	r3, #0
    48fc:	f43f af02 	beq.w	4704 <fire(LEDStruct&)+0x220>
    4900:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4904:	46b9      	mov	r9, r7
    4906:	4625      	mov	r5, r4
    4908:	f04f 0800 	mov.w	r8, #0
    490c:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    490e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4912:	4630      	mov	r0, r6
    4914:	f006 f892 	bl	aa3c <HeatColor(unsigned char)>
    4918:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    491c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4920:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4924:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4928:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    492c:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4930:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4934:	f108 0801 	add.w	r8, r8, #1
    4938:	4543      	cmp	r3, r8
    493a:	f1a5 0503 	sub.w	r5, r5, #3
    493e:	dce6      	bgt.n	490e <fire(LEDStruct&)+0x42a>
    4940:	e7a4      	b.n	488c <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4942:	4620      	mov	r0, r4
    4944:	f7ff fd94 	bl	4470 <fire_update(LEDStruct&)>
    4948:	e5db      	b.n	4502 <fire(LEDStruct&)+0x1e>
    494a:	882b      	ldrh	r3, [r5, #0]
    494c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4950:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4954:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4958:	3119      	adds	r1, #25
    495a:	b289      	uxth	r1, r1
    495c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4960:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4964:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4968:	3219      	adds	r2, #25
    496a:	b292      	uxth	r2, r2
    496c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4970:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4974:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4978:	f10e 0e19 	add.w	lr, lr, #25
    497c:	fa1f fe8e 	uxth.w	lr, lr
    4980:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4984:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4988:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    498c:	3619      	adds	r6, #25
    498e:	b2b6      	uxth	r6, r6
    4990:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4994:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4998:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    499c:	3319      	adds	r3, #25
    499e:	b29b      	uxth	r3, r3
    49a0:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    49a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49a8:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    49ac:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49b0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49b4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    49b8:	b2f6      	uxtb	r6, r6
    49ba:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49be:	3719      	adds	r7, #25
    49c0:	b2db      	uxtb	r3, r3
    49c2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    49c6:	b2bf      	uxth	r7, r7
    49c8:	11b6      	asrs	r6, r6, #6
    49ca:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    49ce:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    49d2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    49d6:	119b      	asrs	r3, r3, #6
    49d8:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49dc:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    49e0:	333c      	adds	r3, #60	; 0x3c
    49e2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    49e6:	f3c6 1681 	ubfx	r6, r6, #6, #2
    49ea:	fa5f f883 	uxtb.w	r8, r3
    49ee:	fa5f fc8c 	uxtb.w	ip, ip
    49f2:	3601      	adds	r6, #1
    49f4:	f10e 0314 	add.w	r3, lr, #20
    49f8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    49fc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4a00:	f8cd c000 	str.w	ip, [sp]
    4a04:	f8cd 8004 	str.w	r8, [sp, #4]
    4a08:	9602      	str	r6, [sp, #8]
    4a0a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4a0e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4a12:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a14:	802f      	strh	r7, [r5, #0]
    4a16:	f7ff fcc1 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4a1a:	e56d      	b.n	44f8 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d040      	beq.n	4aa2 <fire(LEDStruct&)+0x5be>
    4a20:	4625      	mov	r5, r4
    4a22:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4a26:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a2a:	4630      	mov	r0, r6
    4a2c:	f006 f806 	bl	aa3c <HeatColor(unsigned char)>
    4a30:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a34:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a38:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a3c:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4a40:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4a44:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4a48:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a4c:	f108 0801 	add.w	r8, r8, #1
    4a50:	4543      	cmp	r3, r8
    4a52:	f1a5 0503 	sub.w	r5, r5, #3
    4a56:	dce6      	bgt.n	4a26 <fire(LEDStruct&)+0x542>
    4a58:	e63e      	b.n	46d8 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4a5a:	4690      	mov	r8, r2
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	f43f ae51 	beq.w	4704 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4a62:	334b      	adds	r3, #75	; 0x4b
    4a64:	ebc8 0503 	rsb	r5, r8, r3
    4a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4a6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a70:	4630      	mov	r0, r6
    4a72:	f005 ffe3 	bl	aa3c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a76:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4a7a:	5563      	strb	r3, [r4, r5]
    4a7c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4a7e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4a82:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4a86:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4a88:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4a8a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a8e:	f108 0801 	add.w	r8, r8, #1
    4a92:	4543      	cmp	r3, r8
    4a94:	dce5      	bgt.n	4a62 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4a96:	b006      	add	sp, #24
    4a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4a9c:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4aa0:	b163      	cbz	r3, 4abc <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4aa2:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4aa6:	2b00      	cmp	r3, #0
    4aa8:	f47f ae1b 	bne.w	46e2 <fire(LEDStruct&)+0x1fe>
    4aac:	e62a      	b.n	4704 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4aae:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    4ab2:	b10a      	cbz	r2, 4ab8 <fire(LEDStruct&)+0x5d4>
    4ab4:	882a      	ldrh	r2, [r5, #0]
    4ab6:	e554      	b.n	4562 <fire(LEDStruct&)+0x7e>
    4ab8:	882a      	ldrh	r2, [r5, #0]
    4aba:	e66d      	b.n	4798 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4abc:	f1bc 0f00 	cmp.w	ip, #0
    4ac0:	f47f ae0f 	bne.w	46e2 <fire(LEDStruct&)+0x1fe>
    4ac4:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4ac8:	e6bc      	b.n	4844 <fire(LEDStruct&)+0x360>
    4aca:	bf00      	nop

00004acc <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    4acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4ad0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4ad4:	4dd0      	ldr	r5, [pc, #832]	; (4e18 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4ad6:	b087      	sub	sp, #28
    4ad8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4ada:	2b00      	cmp	r3, #0
    4adc:	f000 81da 	beq.w	4e94 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    4ae0:	4bce      	ldr	r3, [pc, #824]	; (4e1c <torch(LEDStruct&)+0x350>)
    4ae2:	781b      	ldrb	r3, [r3, #0]
    4ae4:	2b00      	cmp	r3, #0
    4ae6:	f040 8242 	bne.w	4f6e <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4aea:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    4aee:	4663      	mov	r3, ip
    4af0:	f1bc 0f00 	cmp.w	ip, #0
    4af4:	f000 823f 	beq.w	4f76 <torch(LEDStruct&)+0x4aa>
    4af8:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4afc:	882a      	ldrh	r2, [r5, #0]
    4afe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4b02:	004f      	lsls	r7, r1, #1
    4b04:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4b08:	fb97 f7fc 	sdiv	r7, r7, ip
    4b0c:	3702      	adds	r7, #2
    4b0e:	b2ff      	uxtb	r7, r7
    4b10:	44a6      	add	lr, r4
    4b12:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4b16:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4b1a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b1e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b22:	3219      	adds	r2, #25
    4b24:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b26:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4b2a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4b2e:	b2c9      	uxtb	r1, r1
    4b30:	fb11 f107 	smulbb	r1, r1, r7
    4b34:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4b38:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4b3c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4b3e:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4b40:	d1e9      	bne.n	4b16 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4b42:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4b46:	802a      	strh	r2, [r5, #0]
    4b48:	2e00      	cmp	r6, #0
    4b4a:	f000 816b 	beq.w	4e24 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b4e:	f1ac 0703 	sub.w	r7, ip, #3
    4b52:	2f01      	cmp	r7, #1
    4b54:	f04f 0901 	mov.w	r9, #1
    4b58:	dd1a      	ble.n	4b90 <torch(LEDStruct&)+0xc4>
    4b5a:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    4b5e:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4b62:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 4e20 <torch(LEDStruct&)+0x354>
    4b66:	4420      	add	r0, r4
    4b68:	4426      	add	r6, r4
    4b6a:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4b6e:	7801      	ldrb	r1, [r0, #0]
    4b70:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    4b74:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    4b78:	fb88 ba01 	smull	fp, sl, r8, r1
    4b7c:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b80:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4b82:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b86:	d1f2      	bne.n	4b6e <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    4b88:	f1b9 0f00 	cmp.w	r9, #0
    4b8c:	f000 812c 	beq.w	4de8 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b90:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4b94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b98:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b9c:	3219      	adds	r2, #25
    4b9e:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4ba0:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4ba4:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4ba8:	802a      	strh	r2, [r5, #0]
    4baa:	b2c0      	uxtb	r0, r0
    4bac:	4286      	cmp	r6, r0
    4bae:	499a      	ldr	r1, [pc, #616]	; (4e18 <torch(LEDStruct&)+0x34c>)
    4bb0:	d928      	bls.n	4c04 <torch(LEDStruct&)+0x138>
    4bb2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4bb6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4bba:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4bbe:	3219      	adds	r2, #25
    4bc0:	b292      	uxth	r2, r2
    4bc2:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4bc6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4bca:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4bce:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bd0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bd4:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4bd6:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bd8:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4bdc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4be0:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4be2:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4be6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bea:	800e      	strh	r6, [r1, #0]
    4bec:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4bf0:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4bf4:	1200      	asrs	r0, r0, #8
    4bf6:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4bfa:	4630      	mov	r0, r6
    4bfc:	fa80 f051 	uqadd8	r0, r0, r1
    4c00:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4c04:	f1b9 0f00 	cmp.w	r9, #0
    4c08:	d112      	bne.n	4c30 <torch(LEDStruct&)+0x164>
    4c0a:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4c0c:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4c10:	4981      	ldr	r1, [pc, #516]	; (4e18 <torch(LEDStruct&)+0x34c>)
    4c12:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4c16:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4c1a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c1e:	3219      	adds	r2, #25
    4c20:	b292      	uxth	r2, r2
    4c22:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4c26:	b2c0      	uxtb	r0, r0
    4c28:	4286      	cmp	r6, r0
    4c2a:	802a      	strh	r2, [r5, #0]
    4c2c:	f200 80af 	bhi.w	4d8e <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4c30:	f1bc 0f00 	cmp.w	ip, #0
    4c34:	f000 81a4 	beq.w	4f80 <torch(LEDStruct&)+0x4b4>
    4c38:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4c3c:	2600      	movs	r6, #0
    4c3e:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4c42:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    4c46:	199d      	adds	r5, r3, r6
    4c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4c4c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4c50:	4648      	mov	r0, r9
    4c52:	f005 fef3 	bl	aa3c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c56:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4c5a:	5563      	strb	r3, [r4, r5]
    4c5c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4c5e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4c62:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4c66:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4c68:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4c6a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4c6e:	3601      	adds	r6, #1
    4c70:	42b3      	cmp	r3, r6
    4c72:	dce6      	bgt.n	4c42 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4c74:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4c78:	2e00      	cmp	r6, #0
    4c7a:	d175      	bne.n	4d68 <torch(LEDStruct&)+0x29c>
    4c7c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4c80:	2b00      	cmp	r3, #0
    4c82:	f000 8183 	beq.w	4f8c <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4c86:	334a      	adds	r3, #74	; 0x4a
    4c88:	1b9d      	subs	r5, r3, r6
    4c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4c8e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4c92:	4648      	mov	r0, r9
    4c94:	f005 fed2 	bl	aa3c <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4c9c:	5563      	strb	r3, [r4, r5]
    4c9e:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4ca0:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4ca4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4ca8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4caa:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4cac:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4cb0:	3601      	adds	r6, #1
    4cb2:	42b3      	cmp	r3, r6
    4cb4:	dce7      	bgt.n	4c86 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4cb6:	2b4b      	cmp	r3, #75	; 0x4b
    4cb8:	d047      	beq.n	4d4a <torch(LEDStruct&)+0x27e>
    4cba:	f10d 0914 	add.w	r9, sp, #20
    4cbe:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    4cc2:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4cc4:	4626      	mov	r6, r4
    4cc6:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4cc8:	f04f 0a01 	mov.w	sl, #1
    4ccc:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4cd0:	f8cd a000 	str.w	sl, [sp]
    4cd4:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4cd8:	fb98 f3f3 	sdiv	r3, r8, r3
    4cdc:	441a      	add	r2, r3
    4cde:	b2d2      	uxtb	r2, r2
    4ce0:	23ff      	movs	r3, #255	; 0xff
    4ce2:	4659      	mov	r1, fp
    4ce4:	4648      	mov	r0, r9
    4ce6:	f005 fecb 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cea:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4cee:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4cf2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cf6:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4cf8:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4cfa:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4cfc:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4d00:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    4d04:	fb98 f8f2 	sdiv	r8, r8, r2
    4d08:	eb08 0203 	add.w	r2, r8, r3
    4d0c:	b2d2      	uxtb	r2, r2
    4d0e:	23ff      	movs	r3, #255	; 0xff
    4d10:	4659      	mov	r1, fp
    4d12:	f8cd a000 	str.w	sl, [sp]
    4d16:	4648      	mov	r0, r9
    4d18:	f005 feb2 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4d1c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4d20:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d24:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4d28:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d2c:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    4d30:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4d34:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d38:	3501      	adds	r5, #1
    4d3a:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    4d3e:	42aa      	cmp	r2, r5
    4d40:	f106 0603 	add.w	r6, r6, #3
    4d44:	f1a7 0703 	sub.w	r7, r7, #3
    4d48:	dcc0      	bgt.n	4ccc <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    4d4a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4d4e:	2b00      	cmp	r3, #0
    4d50:	f040 8096 	bne.w	4e80 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    4d54:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4d58:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    4d5c:	1a9b      	subs	r3, r3, r2
    4d5e:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    4d62:	b007      	add	sp, #28
    4d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d68:	4621      	mov	r1, r4
    4d6a:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d6e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4d70:	7810      	ldrb	r0, [r2, #0]
    4d72:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    4d76:	7850      	ldrb	r0, [r2, #1]
    4d78:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    4d7c:	7890      	ldrb	r0, [r2, #2]
    4d7e:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    4d82:	3203      	adds	r2, #3
    4d84:	4295      	cmp	r5, r2
    4d86:	f1a1 0103 	sub.w	r1, r1, #3
    4d8a:	d1f1      	bne.n	4d70 <torch(LEDStruct&)+0x2a4>
    4d8c:	e793      	b.n	4cb6 <torch(LEDStruct&)+0x1ea>
    4d8e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4d92:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4d96:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d9a:	3219      	adds	r2, #25
    4d9c:	b292      	uxth	r2, r2
    4d9e:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4da2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4da6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4daa:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4dac:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4db0:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4db2:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4db4:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4db8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    4dbc:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4dbe:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4dc2:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4dc6:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4dca:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4dce:	800d      	strh	r5, [r1, #0]
    4dd0:	1201      	asrs	r1, r0, #8
    4dd2:	3960      	subs	r1, #96	; 0x60
    4dd4:	4630      	mov	r0, r6
    4dd6:	fa80 f051 	uqadd8	r0, r0, r1
    4dda:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4dde:	f1bc 0f00 	cmp.w	ip, #0
    4de2:	f47f af29 	bne.w	4c38 <torch(LEDStruct&)+0x16c>
    4de6:	e0cf      	b.n	4f88 <torch(LEDStruct&)+0x4bc>
    4de8:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    4dec:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4df0:	f8df 802c 	ldr.w	r8, [pc, #44]	; 4e20 <torch(LEDStruct&)+0x354>
    4df4:	4426      	add	r6, r4
    4df6:	44a6      	add	lr, r4
    4df8:	7831      	ldrb	r1, [r6, #0]
    4dfa:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    4dfe:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4e02:	fb88 a001 	smull	sl, r0, r8, r1
    4e06:	3f01      	subs	r7, #1
    4e08:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e0c:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4e0e:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e12:	d1f1      	bne.n	4df8 <torch(LEDStruct&)+0x32c>
    4e14:	e6bc      	b.n	4b90 <torch(LEDStruct&)+0xc4>
    4e16:	bf00      	nop
    4e18:	1fff8784 	.word	0x1fff8784
    4e1c:	1fff9605 	.word	0x1fff9605
    4e20:	55555556 	.word	0x55555556
    4e24:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4e28:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4e2c:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4e30:	fb9e fefc 	sdiv	lr, lr, ip
    4e34:	f10e 0e02 	add.w	lr, lr, #2
    4e38:	fa5f fe8e 	uxtb.w	lr, lr
    4e3c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4e40:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e48:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e4c:	3219      	adds	r2, #25
    4e4e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e50:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4e54:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4e58:	b2c9      	uxtb	r1, r1
    4e5a:	fb11 f10e 	smulbb	r1, r1, lr
    4e5e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e62:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4e64:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e68:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4e6a:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e6c:	dbe8      	blt.n	4e40 <torch(LEDStruct&)+0x374>
    4e6e:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e70:	f1ac 0703 	sub.w	r7, ip, #3
    4e74:	2f01      	cmp	r7, #1
    4e76:	f04f 0900 	mov.w	r9, #0
    4e7a:	f73f ae6e 	bgt.w	4b5a <torch(LEDStruct&)+0x8e>
    4e7e:	e687      	b.n	4b90 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    4e80:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4e84:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    4e88:	4413      	add	r3, r2
    4e8a:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    4e8e:	b007      	add	sp, #28
    4e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e94:	882b      	ldrh	r3, [r5, #0]
    4e96:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4e9a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4e9e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4ea2:	3119      	adds	r1, #25
    4ea4:	b289      	uxth	r1, r1
    4ea6:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4eaa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4eae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4eb2:	3219      	adds	r2, #25
    4eb4:	b292      	uxth	r2, r2
    4eb6:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4eba:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4ebe:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4ec2:	f10e 0e19 	add.w	lr, lr, #25
    4ec6:	fa1f fe8e 	uxth.w	lr, lr
    4eca:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4ece:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4ed2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4ed6:	3619      	adds	r6, #25
    4ed8:	b2b6      	uxth	r6, r6
    4eda:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4ede:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4ee2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ee6:	3319      	adds	r3, #25
    4ee8:	b29b      	uxth	r3, r3
    4eea:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4eee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ef2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    4ef6:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4efa:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4efe:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    4f02:	b2f6      	uxtb	r6, r6
    4f04:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f08:	3719      	adds	r7, #25
    4f0a:	b2db      	uxtb	r3, r3
    4f0c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    4f10:	b2bf      	uxth	r7, r7
    4f12:	11b6      	asrs	r6, r6, #6
    4f14:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    4f18:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4f1c:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    4f20:	119b      	asrs	r3, r3, #6
    4f22:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4f26:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    4f2a:	333c      	adds	r3, #60	; 0x3c
    4f2c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4f30:	f3c6 1681 	ubfx	r6, r6, #6, #2
    4f34:	fa5f fc8c 	uxtb.w	ip, ip
    4f38:	fa5f f883 	uxtb.w	r8, r3
    4f3c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    4f40:	f10e 0314 	add.w	r3, lr, #20
    4f44:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    4f48:	3601      	adds	r6, #1
    4f4a:	f8cd c000 	str.w	ip, [sp]
    4f4e:	f8cd 8004 	str.w	r8, [sp, #4]
    4f52:	9602      	str	r6, [sp, #8]
    4f54:	b2db      	uxtb	r3, r3
    4f56:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    4f5a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4f5e:	802f      	strh	r7, [r5, #0]
    4f60:	f7ff fa1c 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    4f64:	4b0b      	ldr	r3, [pc, #44]	; (4f94 <torch(LEDStruct&)+0x4c8>)
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	2b00      	cmp	r3, #0
    4f6a:	f43f adbe 	beq.w	4aea <torch(LEDStruct&)+0x1e>
    4f6e:	4620      	mov	r0, r4
    4f70:	f7ff fa7e 	bl	4470 <fire_update(LEDStruct&)>
    4f74:	e5b9      	b.n	4aea <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4f76:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    4f7a:	b14a      	cbz	r2, 4f90 <torch(LEDStruct&)+0x4c4>
    4f7c:	882a      	ldrh	r2, [r5, #0]
    4f7e:	e5e6      	b.n	4b4e <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4f80:	f1b9 0f00 	cmp.w	r9, #0
    4f84:	f47f aef0 	bne.w	4d68 <torch(LEDStruct&)+0x29c>
    4f88:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4f8c:	2300      	movs	r3, #0
    4f8e:	e696      	b.n	4cbe <torch(LEDStruct&)+0x1f2>
    4f90:	882a      	ldrh	r2, [r5, #0]
    4f92:	e76d      	b.n	4e70 <torch(LEDStruct&)+0x3a4>
    4f94:	1fff9605 	.word	0x1fff9605

00004f98 <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4f98:	4b0e      	ldr	r3, [pc, #56]	; (4fd4 <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    4f9a:	4a0f      	ldr	r2, [pc, #60]	; (4fd8 <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    4f9c:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    4f9e:	2100      	movs	r1, #0
    4fa0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4fa2:	b13b      	cbz	r3, 4fb4 <confetti_update(LEDStruct&)+0x1c>
    4fa4:	2b01      	cmp	r3, #1
    4fa6:	d103      	bne.n	4fb0 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    4fa8:	4b0c      	ldr	r3, [pc, #48]	; (4fdc <confetti_update(LEDStruct&)+0x44>)
    4faa:	881b      	ldrh	r3, [r3, #0]
    4fac:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    4fb0:	f7fd b918 	b.w	21e4 <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    4fb4:	4b09      	ldr	r3, [pc, #36]	; (4fdc <confetti_update(LEDStruct&)+0x44>)
    4fb6:	881b      	ldrh	r3, [r3, #0]
    4fb8:	2b00      	cmp	r3, #0
    4fba:	bf14      	ite	ne
    4fbc:	2301      	movne	r3, #1
    4fbe:	2300      	moveq	r3, #0
    4fc0:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4fc4:	bf14      	ite	ne
    4fc6:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    4fc8:	234b      	moveq	r3, #75	; 0x4b
    4fca:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    4fce:	f7fd b909 	b.w	21e4 <LEDDebug(LEDStruct&)>
    4fd2:	bf00      	nop
    4fd4:	1fff9e5c 	.word	0x1fff9e5c
    4fd8:	1fff9605 	.word	0x1fff9605
    4fdc:	1fff9e54 	.word	0x1fff9e54

00004fe0 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    4fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    4fe2:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4fe6:	4e4b      	ldr	r6, [pc, #300]	; (5114 <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    4fe8:	b085      	sub	sp, #20
    4fea:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    4fec:	bb8b      	cbnz	r3, 5052 <confetti(LEDStruct&)+0x72>
    4fee:	8833      	ldrh	r3, [r6, #0]
    4ff0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4ff4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4ff8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4ffc:	3319      	adds	r3, #25
    4ffe:	b29b      	uxth	r3, r3
    5000:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    5004:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5008:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    500c:	3119      	adds	r1, #25
    500e:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5010:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5014:	b2d2      	uxtb	r2, r2
    5016:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    501a:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    501c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    5020:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5022:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5024:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    5028:	2714      	movs	r7, #20
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    502a:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    502c:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    502e:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    5030:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    5034:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    5038:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    503c:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5040:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5044:	2b00      	cmp	r3, #0
    5046:	d15c      	bne.n	5102 <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    5048:	234b      	movs	r3, #75	; 0x4b
    504a:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    504e:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    5052:	4b31      	ldr	r3, [pc, #196]	; (5118 <confetti(LEDStruct&)+0x138>)
    5054:	781b      	ldrb	r3, [r3, #0]
    5056:	2b00      	cmp	r3, #0
    5058:	d157      	bne.n	510a <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    505a:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    505e:	4620      	mov	r0, r4
    5060:	2196      	movs	r1, #150	; 0x96
    5062:	f005 fcad 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5066:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5068:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    506c:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5070:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5074:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    5078:	3319      	adds	r3, #25
    507a:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    507c:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5080:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    5084:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5088:	3719      	adds	r7, #25
    508a:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    508c:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5090:	fb03 f305 	mul.w	r3, r3, r5
    5094:	2101      	movs	r1, #1
    5096:	0c1d      	lsrs	r5, r3, #16
    5098:	9100      	str	r1, [sp, #0]
    509a:	a803      	add	r0, sp, #12
    509c:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    50a0:	b2d2      	uxtb	r2, r2
    50a2:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    50a4:	8037      	strh	r7, [r6, #0]
    50a6:	f005 fceb 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    50aa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    50ae:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    50b0:	5ce2      	ldrb	r2, [r4, r3]
    50b2:	f89d 000c 	ldrb.w	r0, [sp, #12]
    50b6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    50ba:	54e2      	strb	r2, [r4, r3]
    50bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    50c0:	784a      	ldrb	r2, [r1, #1]
    50c2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    50c6:	704a      	strb	r2, [r1, #1]
    50c8:	788b      	ldrb	r3, [r1, #2]
    50ca:	f89d 200e 	ldrb.w	r2, [sp, #14]
    50ce:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    50d2:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    50d4:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    50d8:	b98b      	cbnz	r3, 50fe <confetti(LEDStruct&)+0x11e>
    50da:	4620      	mov	r0, r4
    50dc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    50e0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50e2:	781a      	ldrb	r2, [r3, #0]
    50e4:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    50e8:	785a      	ldrb	r2, [r3, #1]
    50ea:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    50ee:	789a      	ldrb	r2, [r3, #2]
    50f0:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    50f4:	3303      	adds	r3, #3
    50f6:	428b      	cmp	r3, r1
    50f8:	f1a0 0003 	sub.w	r0, r0, #3
    50fc:	d1f1      	bne.n	50e2 <confetti(LEDStruct&)+0x102>
}
    50fe:	b005      	add	sp, #20
    5100:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5102:	2396      	movs	r3, #150	; 0x96
    5104:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    5108:	e7a1      	b.n	504e <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    510a:	4620      	mov	r0, r4
    510c:	f7ff ff44 	bl	4f98 <confetti_update(LEDStruct&)>
    5110:	e7a3      	b.n	505a <confetti(LEDStruct&)+0x7a>
    5112:	bf00      	nop
    5114:	1fff8784 	.word	0x1fff8784
    5118:	1fff9605 	.word	0x1fff9605

0000511c <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    511c:	4b24      	ldr	r3, [pc, #144]	; (51b0 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    511e:	4a25      	ldr	r2, [pc, #148]	; (51b4 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    5120:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5122:	2100      	movs	r1, #0
    5124:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5126:	2b09      	cmp	r3, #9
    5128:	d80a      	bhi.n	5140 <one_sin_update(LEDStruct&)+0x24>
    512a:	e8df f003 	tbb	[pc, r3]
    512e:	1e10      	.short	0x1e10
    5130:	322d2823 	.word	0x322d2823
    5134:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    5138:	4b1f      	ldr	r3, [pc, #124]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    513a:	881b      	ldrh	r3, [r3, #0]
    513c:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5140:	f7fd b850 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    5144:	4b1c      	ldr	r3, [pc, #112]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    5146:	881b      	ldrh	r3, [r3, #0]
    5148:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    514c:	e7f8      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    514e:	4b1a      	ldr	r3, [pc, #104]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    5150:	881b      	ldrh	r3, [r3, #0]
    5152:	2b00      	cmp	r3, #0
    5154:	bf14      	ite	ne
    5156:	2301      	movne	r3, #1
    5158:	2300      	moveq	r3, #0
    515a:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    515e:	bf14      	ite	ne
    5160:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5162:	234b      	moveq	r3, #75	; 0x4b
    5164:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    5168:	e7ea      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    516a:	4b13      	ldr	r3, [pc, #76]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    516c:	881b      	ldrh	r3, [r3, #0]
    516e:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    5172:	e7e5      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    5174:	4b10      	ldr	r3, [pc, #64]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    5176:	881b      	ldrh	r3, [r3, #0]
    5178:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    517c:	e7e0      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    517e:	4b0e      	ldr	r3, [pc, #56]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    5180:	881b      	ldrh	r3, [r3, #0]
    5182:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5186:	e7db      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    5188:	4b0b      	ldr	r3, [pc, #44]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    518a:	881b      	ldrh	r3, [r3, #0]
    518c:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5190:	e7d6      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    5192:	4b09      	ldr	r3, [pc, #36]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    5194:	881b      	ldrh	r3, [r3, #0]
    5196:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    519a:	e7d1      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    519c:	4b06      	ldr	r3, [pc, #24]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    519e:	881b      	ldrh	r3, [r3, #0]
    51a0:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    51a4:	e7cc      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    51a6:	4b04      	ldr	r3, [pc, #16]	; (51b8 <one_sin_update(LEDStruct&)+0x9c>)
    51a8:	881b      	ldrh	r3, [r3, #0]
    51aa:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    51ae:	e7c7      	b.n	5140 <one_sin_update(LEDStruct&)+0x24>
    51b0:	1fff9e5c 	.word	0x1fff9e5c
    51b4:	1fff9605 	.word	0x1fff9605
    51b8:	1fff9e54 	.word	0x1fff9e54

000051bc <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    51bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    51c0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    51c4:	b085      	sub	sp, #20
    51c6:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    51c8:	2b00      	cmp	r3, #0
    51ca:	f040 80be 	bne.w	534a <one_sin(LEDStruct&)+0x18e>
    51ce:	f8df c32c 	ldr.w	ip, [pc, #812]	; 54fc <one_sin(LEDStruct&)+0x340>
    51d2:	f8bc 3000 	ldrh.w	r3, [ip]
    51d6:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    51da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    51de:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    51e2:	3619      	adds	r6, #25
    51e4:	b2b6      	uxth	r6, r6
    51e6:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    51ea:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    51ee:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    51f2:	3119      	adds	r1, #25
    51f4:	b289      	uxth	r1, r1
    51f6:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    51fa:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    51fe:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5202:	3519      	adds	r5, #25
    5204:	b2ad      	uxth	r5, r5
    5206:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    520a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    520e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5212:	3319      	adds	r3, #25
    5214:	b29b      	uxth	r3, r3
    5216:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    521a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    521e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5222:	3719      	adds	r7, #25
    5224:	b2bf      	uxth	r7, r7
    5226:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    522a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    522e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5232:	3019      	adds	r0, #25
    5234:	b280      	uxth	r0, r0
    5236:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    523a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    523e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5242:	3219      	adds	r2, #25
    5244:	b292      	uxth	r2, r2
    5246:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    524a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    524e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5252:	f10e 0e19 	add.w	lr, lr, #25
    5256:	fa1f fe8e 	uxth.w	lr, lr
    525a:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    525e:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    5262:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5266:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    526a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    526e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5272:	f108 0819 	add.w	r8, r8, #25
    5276:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    527a:	b2db      	uxtb	r3, r3
    527c:	b2c9      	uxtb	r1, r1
    527e:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5280:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5284:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5288:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    528c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5290:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    5294:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5298:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    529c:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52a0:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52a2:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52a6:	119b      	asrs	r3, r3, #6
    52a8:	3101      	adds	r1, #1
    52aa:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52b2:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    52b6:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52ba:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52bc:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    52c0:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52c4:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52c8:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52cc:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52d4:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52d8:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    52dc:	f04f 0815 	mov.w	r8, #21
    52e0:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52e2:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    52e6:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    52e8:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    52ea:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52ee:	fa5f f989 	uxtb.w	r9, r9
    52f2:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    52f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    52f8:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52fa:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    52fe:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    5302:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5306:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    530a:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    530e:	2e00      	cmp	r6, #0
    5310:	f040 80e8 	bne.w	54e4 <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    5314:	224b      	movs	r2, #75	; 0x4b
    5316:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    531a:	4d76      	ldr	r5, [pc, #472]	; (54f4 <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    531c:	f884 a33f 	strb.w	sl, [r4, #831]	; 0x33f
	leds.sin_speed		= ss + (saf/5);
    5320:	fba5 2503 	umull	r2, r5, r5, r3
    5324:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5328:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    532a:	f884 9341 	strb.w	r9, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    532e:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    5332:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    5336:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    533a:	f884 e34f 	strb.w	lr, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    533e:	f884 c350 	strb.w	ip, [r4, #848]	; 0x350
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5342:	f884 2340 	strb.w	r2, [r4, #832]	; 0x340
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5346:	f884 1345 	strb.w	r1, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    534a:	4b6b      	ldr	r3, [pc, #428]	; (54f8 <one_sin(LEDStruct&)+0x33c>)
    534c:	781b      	ldrb	r3, [r3, #0]
    534e:	2b00      	cmp	r3, #0
    5350:	f040 80cc 	bne.w	54ec <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    5354:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    5358:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    535c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5360:	440b      	add	r3, r1
    5362:	b2db      	uxtb	r3, r3
    5364:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    5368:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    536c:	2a00      	cmp	r2, #0
    536e:	f000 80b1 	beq.w	54d4 <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    5372:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5376:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    537a:	4413      	add	r3, r2
    537c:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5380:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5384:	2b00      	cmp	r3, #0
    5386:	f000 808e 	beq.w	54a6 <one_sin(LEDStruct&)+0x2ea>
    538a:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    538e:	4625      	mov	r5, r4
    5390:	1c67      	adds	r7, r4, #1
    5392:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5394:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5398:	e05c      	b.n	5454 <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    539a:	2900      	cmp	r1, #0
        in = 255 - in;
    539c:	bfbc      	itt	lt
    539e:	43d2      	mvnlt	r2, r2
    53a0:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    53a2:	0052      	lsls	r2, r2, #1
    53a4:	b2d2      	uxtb	r2, r2
    53a6:	1c53      	adds	r3, r2, #1
    53a8:	fb03 f202 	mul.w	r2, r3, r2
    53ac:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    53ae:	fb02 f303 	mul.w	r3, r2, r3
    53b2:	121b      	asrs	r3, r3, #8
    53b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    53b8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    53bc:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    53be:	05d3      	lsls	r3, r2, #23
    53c0:	bf54      	ite	pl
    53c2:	fa5f fb82 	uxtbpl.w	fp, r2
    53c6:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    53ca:	ebc0 0b0b 	rsb	fp, r0, fp
    53ce:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    53d2:	f894 2350 	ldrb.w	r2, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    53d6:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
    53da:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    53de:	4629      	mov	r1, r5
    53e0:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    53e2:	f88d 300c 	strb.w	r3, [sp, #12]
    53e6:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    53ea:	f005 fd47 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    53ee:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    53f2:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    53f6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    53fa:	9100      	str	r1, [sp, #0]
    53fc:	fb02 320a 	mla	r2, r2, sl, r3
    5400:	b2d2      	uxtb	r2, r2
    5402:	465b      	mov	r3, fp
    5404:	4649      	mov	r1, r9
    5406:	a803      	add	r0, sp, #12
    5408:	f005 fb3a 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    540c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    5410:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5414:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5418:	f807 3c01 	strb.w	r3, [r7, #-1]
    541c:	786a      	ldrb	r2, [r5, #1]
    541e:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5422:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5426:	706a      	strb	r2, [r5, #1]
    5428:	78ab      	ldrb	r3, [r5, #2]
    542a:	f89d 200e 	ldrb.w	r2, [sp, #14]
    542e:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5432:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    5434:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    5438:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    543c:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    5440:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5442:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5444:	42b2      	cmp	r2, r6
    5446:	f105 0503 	add.w	r5, r5, #3
    544a:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    544e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5452:	dd28      	ble.n	54a6 <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    5454:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    5458:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    545c:	fa5f fa86 	uxtb.w	sl, r6
    5460:	fb03 220a 	mla	r2, r3, sl, r2
    5464:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5466:	b251      	sxtb	r1, r2
    5468:	2900      	cmp	r1, #0
        in = 255 - in;
    546a:	bfba      	itte	lt
    546c:	43d3      	mvnlt	r3, r2
    546e:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5470:	4613      	movge	r3, r2
    5472:	005b      	lsls	r3, r3, #1
    5474:	b2db      	uxtb	r3, r3
    5476:	1c58      	adds	r0, r3, #1
    5478:	fb00 f303 	mul.w	r3, r0, r3
    547c:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    547e:	fb03 f000 	mul.w	r0, r3, r0
    5482:	1200      	asrs	r0, r0, #8
    5484:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5488:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    548c:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    548e:	05d8      	lsls	r0, r3, #23
    5490:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5494:	bf54      	ite	pl
    5496:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5498:	23ff      	movmi	r3, #255	; 0xff
    549a:	4298      	cmp	r0, r3
    549c:	f4ff af7d 	bcc.w	539a <one_sin(LEDStruct&)+0x1de>
    54a0:	f04f 0b00 	mov.w	fp, #0
    54a4:	e795      	b.n	53d2 <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    54a6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    54aa:	b983      	cbnz	r3, 54ce <one_sin(LEDStruct&)+0x312>
    54ac:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    54b0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54b2:	7822      	ldrb	r2, [r4, #0]
    54b4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    54b8:	7862      	ldrb	r2, [r4, #1]
    54ba:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    54be:	78a2      	ldrb	r2, [r4, #2]
    54c0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    54c4:	3403      	adds	r4, #3
    54c6:	42a1      	cmp	r1, r4
    54c8:	f1a3 0303 	sub.w	r3, r3, #3
    54cc:	d1f1      	bne.n	54b2 <one_sin(LEDStruct&)+0x2f6>
}
    54ce:	b005      	add	sp, #20
    54d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    54d4:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    54d8:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    54dc:	1a9b      	subs	r3, r3, r2
    54de:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    54e2:	e74d      	b.n	5380 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    54e4:	2296      	movs	r2, #150	; 0x96
    54e6:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
    54ea:	e716      	b.n	531a <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    54ec:	4620      	mov	r0, r4
    54ee:	f7ff fe15 	bl	511c <one_sin_update(LEDStruct&)>
    54f2:	e72f      	b.n	5354 <one_sin(LEDStruct&)+0x198>
    54f4:	cccccccd 	.word	0xcccccccd
    54f8:	1fff9605 	.word	0x1fff9605
    54fc:	1fff8784 	.word	0x1fff8784

00005500 <fireworks_update(LEDStruct&)>:
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5500:	4b07      	ldr	r3, [pc, #28]	; (5520 <fireworks_update(LEDStruct&)+0x20>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5502:	4a08      	ldr	r2, [pc, #32]	; (5524 <fireworks_update(LEDStruct&)+0x24>)
	switch (update_var) {
    5504:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5506:	2100      	movs	r1, #0
    5508:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    550a:	b933      	cbnz	r3, 551a <fireworks_update(LEDStruct&)+0x1a>
		case 0:	leds.use_overlay = (bool)update_arg;	break; //a
    550c:	4b06      	ldr	r3, [pc, #24]	; (5528 <fireworks_update(LEDStruct&)+0x28>)
    550e:	881b      	ldrh	r3, [r3, #0]
    5510:	1a5b      	subs	r3, r3, r1
    5512:	bf18      	it	ne
    5514:	2301      	movne	r3, #1
    5516:	f880 31c7 	strb.w	r3, [r0, #455]	; 0x1c7
		default:	break;
	}
	LEDDebug(leds);
    551a:	f7fc be63 	b.w	21e4 <LEDDebug(LEDStruct&)>
    551e:	bf00      	nop
    5520:	1fff9e5c 	.word	0x1fff9e5c
    5524:	1fff9605 	.word	0x1fff9605
    5528:	1fff9e54 	.word	0x1fff9e54

0000552c <prepare_for_explosion(LEDStruct&)>:
}

void prepare_for_explosion(LEDStruct& leds) {
    552c:	b570      	push	{r4, r5, r6, lr}
    552e:	4604      	mov	r4, r0
    5530:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    5532:	4d1b      	ldr	r5, [pc, #108]	; (55a0 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5534:	2002      	movs	r0, #2
    5536:	f006 f90f 	bl	b758 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    553a:	882b      	ldrh	r3, [r5, #0]
    553c:	4418      	add	r0, r3
    553e:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    5542:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5546:	f243 6319 	movw	r3, #13849	; 0x3619
    554a:	4418      	add	r0, r3
    554c:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    554e:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5552:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    5556:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    555a:	b2d2      	uxtb	r2, r2
    555c:	4403      	add	r3, r0
    555e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5562:	b29b      	uxth	r3, r3
    5564:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    5566:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    5568:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    556c:	321b      	adds	r2, #27
    556e:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    5572:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    5576:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    557a:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    557e:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5582:	4620      	mov	r0, r4
    5584:	aa01      	add	r2, sp, #4
    5586:	2196      	movs	r1, #150	; 0x96
    5588:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    558a:	f88d 6004 	strb.w	r6, [sp, #4]
    558e:	f88d 6005 	strb.w	r6, [sp, #5]
    5592:	f88d 6006 	strb.w	r6, [sp, #6]
    5596:	f005 f951 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
}
    559a:	b002      	add	sp, #8
    559c:	bd70      	pop	{r4, r5, r6, pc}
    559e:	bf00      	nop
    55a0:	1fff8784 	.word	0x1fff8784

000055a4 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    55a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    55a8:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    55ac:	b087      	sub	sp, #28
    55ae:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    55b0:	2b00      	cmp	r3, #0
    55b2:	f000 8089 	beq.w	56c8 <fadeup(LEDStruct&)+0x124>
    55b6:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    55ba:	9303      	str	r3, [sp, #12]
    55bc:	4606      	mov	r6, r0
    55be:	4618      	mov	r0, r3
    55c0:	4b5d      	ldr	r3, [pc, #372]	; (5738 <fadeup(LEDStruct&)+0x194>)
    55c2:	881b      	ldrh	r3, [r3, #0]
    55c4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    55c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    55cc:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    55d0:	3419      	adds	r4, #25
    55d2:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    55d4:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    55d8:	b2db      	uxtb	r3, r3
    55da:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    55de:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    55e2:	ea4f 2929 	mov.w	r9, r9, asr #8
    55e6:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    55ea:	2301      	movs	r3, #1
    55ec:	fa5f f989 	uxtb.w	r9, r9
    55f0:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    55f4:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    55f8:	f008 fc44 	bl	de84 <__aeabi_ui2f>
    55fc:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    5600:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5604:	465b      	mov	r3, fp
    5606:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    560a:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    560e:	46d3      	mov	fp, sl
    5610:	9001      	str	r0, [sp, #4]
    5612:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5616:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5618:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    561a:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    561e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5622:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5626:	3419      	adds	r4, #25
    5628:	b2a4      	uxth	r4, r4
    562a:	2373      	movs	r3, #115	; 0x73
    562c:	fb03 f004 	mul.w	r0, r3, r4
    5630:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    5632:	9b01      	ldr	r3, [sp, #4]
    5634:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5638:	300a      	adds	r0, #10
    563a:	b280      	uxth	r0, r0
    563c:	f008 fc22 	bl	de84 <__aeabi_ui2f>
    5640:	493e      	ldr	r1, [pc, #248]	; (573c <fadeup(LEDStruct&)+0x198>)
    5642:	f008 fd2b 	bl	e09c <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5646:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    564a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    564e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5652:	3319      	adds	r3, #25
    5654:	b29b      	uxth	r3, r3
    5656:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    565a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    565e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5662:	3419      	adds	r4, #25
    5664:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5666:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    566a:	b2c9      	uxtb	r1, r1
    566c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5670:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5674:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    5676:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    567a:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    567c:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    5680:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5684:	b2c8      	uxtb	r0, r1
    5686:	f008 fbfd 	bl	de84 <__aeabi_ui2f>
    568a:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    568c:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    568e:	4a2c      	ldr	r2, [pc, #176]	; (5740 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5690:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5694:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5696:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    569a:	d8be      	bhi.n	561a <fadeup(LEDStruct&)+0x76>
    569c:	9a03      	ldr	r2, [sp, #12]
    569e:	9e02      	ldr	r6, [sp, #8]
    56a0:	4f25      	ldr	r7, [pc, #148]	; (5738 <fadeup(LEDStruct&)+0x194>)
    56a2:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    56a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    56aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    56ae:	18f5      	adds	r5, r6, r3
    56b0:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    56b2:	22ff      	movs	r2, #255	; 0xff
    56b4:	803c      	strh	r4, [r7, #0]
    56b6:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    56b8:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    56ba:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    56bc:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    56be:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    56c0:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    56c2:	b007      	add	sp, #28
    56c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    56c8:	9d02      	ldr	r5, [sp, #8]
    56ca:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    56ce:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    56d2:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    56d6:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    56da:	3305      	adds	r3, #5
    56dc:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    56de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    56e2:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    56e6:	4429      	add	r1, r5
    56e8:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    56ea:	24ff      	movs	r4, #255	; 0xff
    56ec:	f88d 3016 	strb.w	r3, [sp, #22]
    56f0:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    56f4:	f005 fbc2 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    56f8:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    56fc:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5700:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    5704:	f88d 3014 	strb.w	r3, [sp, #20]
    5708:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    570c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5710:	a805      	add	r0, sp, #20
    5712:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5714:	f88d 4015 	strb.w	r4, [sp, #21]
    5718:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    571c:	f005 fbae 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    5720:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    5724:	2bff      	cmp	r3, #255	; 0xff
    5726:	d1cc      	bne.n	56c2 <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    5728:	9a02      	ldr	r2, [sp, #8]
    572a:	2301      	movs	r3, #1
    572c:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    5730:	b007      	add	sp, #28
    5732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5736:	bf00      	nop
    5738:	1fff8784 	.word	0x1fff8784
    573c:	42c80000 	.word	0x42c80000
    5740:	437f0000 	.word	0x437f0000

00005744 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5748:	4b65      	ldr	r3, [pc, #404]	; (58e0 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    574a:	4605      	mov	r5, r0
    574c:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    574e:	781a      	ldrb	r2, [r3, #0]
    5750:	2196      	movs	r1, #150	; 0x96
    5752:	f005 f935 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5756:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    575a:	2600      	movs	r6, #0
    575c:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5760:	2c00      	cmp	r4, #0
    5762:	d07e      	beq.n	5862 <explosion(LEDStruct&)+0x11e>
    5764:	f8df 9190 	ldr.w	r9, [pc, #400]	; 58f8 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5768:	f04f 08ff 	mov.w	r8, #255	; 0xff
    576c:	e03b      	b.n	57e6 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    576e:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    5772:	4650      	mov	r0, sl
    5774:	f008 fad6 	bl	dd24 <__addsf3>
    5778:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    577a:	2100      	movs	r1, #0
    577c:	4638      	mov	r0, r7
    577e:	f008 fd77 	bl	e270 <__aeabi_fcmplt>
    5782:	4958      	ldr	r1, [pc, #352]	; (58e4 <explosion(LEDStruct&)+0x1a0>)
    5784:	2800      	cmp	r0, #0
    5786:	d168      	bne.n	585a <explosion(LEDStruct&)+0x116>
    5788:	4638      	mov	r0, r7
    578a:	f008 fd8f 	bl	e2ac <__aeabi_fcmpgt>
    578e:	b100      	cbz	r0, 5792 <explosion(LEDStruct&)+0x4e>
    5790:	4f54      	ldr	r7, [pc, #336]	; (58e4 <explosion(LEDStruct&)+0x1a0>)
    5792:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    5796:	4651      	mov	r1, sl
    5798:	f8d9 0000 	ldr.w	r0, [r9]
    579c:	f008 fbca 	bl	df34 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    57a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    57a4:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    57a8:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    57ac:	f008 fbc2 	bl	df34 <__aeabi_fmul>
    57b0:	4601      	mov	r1, r0
    57b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    57b6:	f008 fab3 	bl	dd20 <__aeabi_fsub>
    57ba:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    57be:	f008 fbb9 	bl	df34 <__aeabi_fmul>
    57c2:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    57c6:	f008 fda1 	bl	e30c <__aeabi_f2uiz>
    57ca:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    57ce:	b2c0      	uxtb	r0, r0
    57d0:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    57d2:	f106 0601 	add.w	r6, r6, #1
    57d6:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    57da:	bf38      	it	cc
    57dc:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    57e0:	b2f6      	uxtb	r6, r6
    57e2:	42b3      	cmp	r3, r6
    57e4:	d93b      	bls.n	585e <explosion(LEDStruct&)+0x11a>
    57e6:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    57ea:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    57ee:	f008 fd67 	bl	e2c0 <__aeabi_f2iz>
    57f2:	4607      	mov	r7, r0
    57f4:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    57f8:	f008 fd88 	bl	e30c <__aeabi_f2uiz>
    57fc:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5800:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5804:	a901      	add	r1, sp, #4
    5806:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5808:	f88d 3000 	strb.w	r3, [sp]
    580c:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5810:	f005 fb34 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    5814:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    5818:	1829      	adds	r1, r5, r0
    581a:	5c2b      	ldrb	r3, [r5, r0]
    581c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5820:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5824:	542b      	strb	r3, [r5, r0]
    5826:	f89d 3005 	ldrb.w	r3, [sp, #5]
    582a:	784a      	ldrb	r2, [r1, #1]
    582c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5830:	704a      	strb	r2, [r1, #1]
    5832:	788b      	ldrb	r3, [r1, #2]
    5834:	f89d 2006 	ldrb.w	r2, [sp, #6]
    5838:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    583c:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    583e:	708b      	strb	r3, [r1, #2]
    5840:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    5844:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    5848:	2b00      	cmp	r3, #0
    584a:	d190      	bne.n	576e <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    584c:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5850:	4651      	mov	r1, sl
    5852:	f008 fa65 	bl	dd20 <__aeabi_fsub>
    5856:	4607      	mov	r7, r0
    5858:	e78f      	b.n	577a <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    585a:	2700      	movs	r7, #0
    585c:	e799      	b.n	5792 <explosion(LEDStruct&)+0x4e>
    585e:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    5862:	462a      	mov	r2, r5
    5864:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    5868:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    586a:	7819      	ldrb	r1, [r3, #0]
    586c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    5870:	7859      	ldrb	r1, [r3, #1]
    5872:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    5876:	7899      	ldrb	r1, [r3, #2]
    5878:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    587c:	3303      	adds	r3, #3
    587e:	4283      	cmp	r3, r0
    5880:	f1a2 0203 	sub.w	r2, r2, #3
    5884:	d1f1      	bne.n	586a <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    5886:	bb44      	cbnz	r4, 58da <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5888:	aa01      	add	r2, sp, #4
    588a:	2196      	movs	r1, #150	; 0x96
    588c:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    588e:	f88d 4004 	strb.w	r4, [sp, #4]
    5892:	f88d 4005 	strb.w	r4, [sp, #5]
    5896:	f88d 4006 	strb.w	r4, [sp, #6]
    589a:	f004 ffcf 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    589e:	4812      	ldr	r0, [pc, #72]	; (58e8 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    58a0:	4c12      	ldr	r4, [pc, #72]	; (58ec <explosion(LEDStruct&)+0x1a8>)
    58a2:	8803      	ldrh	r3, [r0, #0]
    58a4:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    58a6:	4912      	ldr	r1, [pc, #72]	; (58f0 <explosion(LEDStruct&)+0x1ac>)
    58a8:	4a12      	ldr	r2, [pc, #72]	; (58f4 <explosion(LEDStruct&)+0x1b0>)
    58aa:	9401      	str	r4, [sp, #4]
    58ac:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    58b0:	8809      	ldrh	r1, [r1, #0]
    58b2:	8812      	ldrh	r2, [r2, #0]
    58b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    58bc:	440a      	add	r2, r1
    58be:	3319      	adds	r3, #25
    58c0:	b29b      	uxth	r3, r3
    58c2:	b292      	uxth	r2, r2
	return ret;
    58c4:	9901      	ldr	r1, [sp, #4]
    58c6:	8003      	strh	r3, [r0, #0]
    58c8:	fb03 f302 	mul.w	r3, r3, r2
    58cc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    58d0:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    58d2:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    58d6:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    58da:	b002      	add	sp, #8
    58dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58e0:	1fff8748 	.word	0x1fff8748
    58e4:	42940000 	.word	0x42940000
    58e8:	1fff8784 	.word	0x1fff8784
    58ec:	1fffa8f8 	.word	0x1fffa8f8
    58f0:	1fff874e 	.word	0x1fff874e
    58f4:	1fff874c 	.word	0x1fff874c
    58f8:	1fff8758 	.word	0x1fff8758

000058fc <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    58fc:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    58fe:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    5902:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    5904:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    5906:	d01c      	beq.n	5942 <fireworks_render(LEDStruct&)+0x46>
    5908:	d317      	bcc.n	593a <fireworks_render(LEDStruct&)+0x3e>
    590a:	2b02      	cmp	r3, #2
    590c:	d113      	bne.n	5936 <fireworks_render(LEDStruct&)+0x3a>
    590e:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5910:	aa01      	add	r2, sp, #4
    5912:	2196      	movs	r1, #150	; 0x96
    5914:	4604      	mov	r4, r0
    5916:	f88d 3004 	strb.w	r3, [sp, #4]
    591a:	f88d 3005 	strb.w	r3, [sp, #5]
    591e:	f88d 3006 	strb.w	r3, [sp, #6]
    5922:	f004 ff8b 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5926:	4a0b      	ldr	r2, [pc, #44]	; (5954 <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    5928:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    592c:	6812      	ldr	r2, [r2, #0]
    592e:	9201      	str	r2, [sp, #4]
	return ret;
    5930:	9a01      	ldr	r2, [sp, #4]
    5932:	429a      	cmp	r2, r3
    5934:	d209      	bcs.n	594a <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    5936:	b002      	add	sp, #8
    5938:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    593a:	f7ff fe33 	bl	55a4 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    593e:	b002      	add	sp, #8
    5940:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    5942:	f7ff feff 	bl	5744 <explosion(LEDStruct&)>
			break;
	}
}
    5946:	b002      	add	sp, #8
    5948:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    594a:	4620      	mov	r0, r4
    594c:	f7ff fdee 	bl	552c <prepare_for_explosion(LEDStruct&)>
    5950:	e7f1      	b.n	5936 <fireworks_render(LEDStruct&)+0x3a>
    5952:	bf00      	nop
    5954:	1fffa8f8 	.word	0x1fffa8f8

00005958 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    5958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    595a:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    595e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    5960:	b173      	cbz	r3, 5980 <fireworks(LEDStruct&)+0x28>
    5962:	4d2f      	ldr	r5, [pc, #188]	; (5a20 <fireworks(LEDStruct&)+0xc8>)
	if (keyboard_update) { fireworks_update(leds); }
    5964:	4b2f      	ldr	r3, [pc, #188]	; (5a24 <fireworks(LEDStruct&)+0xcc>)
    5966:	781b      	ldrb	r3, [r3, #0]
    5968:	2b00      	cmp	r3, #0
    596a:	d155      	bne.n	5a18 <fireworks(LEDStruct&)+0xc0>

	fireworks_render(leds);
    596c:	4620      	mov	r0, r4
    596e:	f7ff ffc5 	bl	58fc <fireworks_render(LEDStruct&)>

	overlay_in_use = 0;
	if (leds.use_overlay) {
    5972:	f894 31c7 	ldrb.w	r3, [r4, #455]	; 0x1c7
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }

	fireworks_render(leds);

	overlay_in_use = 0;
    5976:	492a      	ldr	r1, [pc, #168]	; (5a20 <fireworks(LEDStruct&)+0xc8>)
    5978:	2200      	movs	r2, #0
    597a:	702a      	strb	r2, [r5, #0]
	if (leds.use_overlay) {
    597c:	bb4b      	cbnz	r3, 59d2 <fireworks(LEDStruct&)+0x7a>
    597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5980:	4929      	ldr	r1, [pc, #164]	; (5a28 <fireworks(LEDStruct&)+0xd0>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    5982:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5986:	880b      	ldrh	r3, [r1, #0]
    5988:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    598c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5990:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5994:	3319      	adds	r3, #25
    5996:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5998:	eb03 2213 	add.w	r2, r3, r3, lsr #8
	leds.delay_time			= 15;
    599c:	250f      	movs	r5, #15
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    599e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    59a2:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    59a4:	2617      	movs	r6, #23
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;
    59a6:	2002      	movs	r0, #2

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    59a8:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    59ac:	800b      	strh	r3, [r1, #0]

	leds.current_stage		= WAITING;

	leds.use_overlay		= uo;
    59ae:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    59b2:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    59b6:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.current_stage		= WAITING;
    59ba:	f884 0354 	strb.w	r0, [r4, #852]	; 0x354

	leds.use_overlay		= uo;
	if (leds.use_overlay) { if (!overlay_in_use) { over_leds.current_stage = WAITING; } }
    59be:	4d18      	ldr	r5, [pc, #96]	; (5a20 <fireworks(LEDStruct&)+0xc8>)
    59c0:	2a00      	cmp	r2, #0
    59c2:	d0cf      	beq.n	5964 <fireworks(LEDStruct&)+0xc>
    59c4:	782b      	ldrb	r3, [r5, #0]
    59c6:	2b00      	cmp	r3, #0
    59c8:	d1cc      	bne.n	5964 <fireworks(LEDStruct&)+0xc>
    59ca:	4b18      	ldr	r3, [pc, #96]	; (5a2c <fireworks(LEDStruct&)+0xd4>)
    59cc:	f883 0354 	strb.w	r0, [r3, #852]	; 0x354
    59d0:	e7c8      	b.n	5964 <fireworks(LEDStruct&)+0xc>

	fireworks_render(leds);

	overlay_in_use = 0;
	if (leds.use_overlay) {
		overlay_in_use = 1;
    59d2:	2301      	movs	r3, #1
		fireworks_render(over_leds);
    59d4:	4815      	ldr	r0, [pc, #84]	; (5a2c <fireworks(LEDStruct&)+0xd4>)

	fireworks_render(leds);

	overlay_in_use = 0;
	if (leds.use_overlay) {
		overlay_in_use = 1;
    59d6:	700b      	strb	r3, [r1, #0]
		fireworks_render(over_leds);
    59d8:	f7ff ff90 	bl	58fc <fireworks_render(LEDStruct&)>
    59dc:	4b13      	ldr	r3, [pc, #76]	; (5a2c <fireworks(LEDStruct&)+0xd4>)
    59de:	4620      	mov	r0, r4
    59e0:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    59e4:	3401      	adds	r4, #1
    59e6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
    59ea:	7819      	ldrb	r1, [r3, #0]
    59ec:	fa82 f251 	uqadd8	r2, r2, r1


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    59f0:	f804 2c01 	strb.w	r2, [r4, #-1]
    59f4:	7841      	ldrb	r1, [r0, #1]
    59f6:	785a      	ldrb	r2, [r3, #1]
    59f8:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    59fc:	7041      	strb	r1, [r0, #1]
    59fe:	7882      	ldrb	r2, [r0, #2]
    5a00:	7899      	ldrb	r1, [r3, #2]
    5a02:	fa82 f251 	uqadd8	r2, r2, r1
    5a06:	3303      	adds	r3, #3
		for (uint16_t i = 0; i < NUM_LEDS; i++) {
    5a08:	42ab      	cmp	r3, r5
        b = qadd8( b, rhs.b);
    5a0a:	7082      	strb	r2, [r0, #2]
    5a0c:	f104 0403 	add.w	r4, r4, #3
    5a10:	f100 0003 	add.w	r0, r0, #3
    5a14:	d1e7      	bne.n	59e6 <fireworks(LEDStruct&)+0x8e>
    5a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    5a18:	4620      	mov	r0, r4
    5a1a:	f7ff fd71 	bl	5500 <fireworks_update(LEDStruct&)>
    5a1e:	e7a5      	b.n	596c <fireworks(LEDStruct&)+0x14>
    5a20:	1fff9606 	.word	0x1fff9606
    5a24:	1fff9605 	.word	0x1fff9605
    5a28:	1fff8784 	.word	0x1fff8784
    5a2c:	1fff960c 	.word	0x1fff960c

00005a30 <shooting_pole_update(LEDStruct&)>:
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5a30:	4b18      	ldr	r3, [pc, #96]	; (5a94 <shooting_pole_update(LEDStruct&)+0x64>)
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    5a32:	4a19      	ldr	r2, [pc, #100]	; (5a98 <shooting_pole_update(LEDStruct&)+0x68>)
	switch (update_var) {
    5a34:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}

void shooting_pole_update(LEDStruct& leds) {
	keyboard_update = 0;
    5a36:	2100      	movs	r1, #0
    5a38:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5a3a:	2b04      	cmp	r3, #4
    5a3c:	d80d      	bhi.n	5a5a <shooting_pole_update(LEDStruct&)+0x2a>
    5a3e:	e8df f003 	tbb	[pc, r3]
    5a42:	1403      	.short	0x1403
    5a44:	201a      	.short	0x201a
    5a46:	0e          	.byte	0x0e
    5a47:	00          	.byte	0x00

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
    5a48:	4b14      	ldr	r3, [pc, #80]	; (5a9c <shooting_pole_update(LEDStruct&)+0x6c>)
    5a4a:	781b      	ldrb	r3, [r3, #0]
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
    5a4c:	2b09      	cmp	r3, #9
    5a4e:	d91e      	bls.n	5a8e <shooting_pole_update(LEDStruct&)+0x5e>
    5a50:	2b41      	cmp	r3, #65	; 0x41
    5a52:	bfa8      	it	ge
    5a54:	2341      	movge	r3, #65	; 0x41
    5a56:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5a5a:	f7fc bbc3 	b.w	21e4 <LEDDebug(LEDStruct&)>
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
    5a5e:	4b0f      	ldr	r3, [pc, #60]	; (5a9c <shooting_pole_update(LEDStruct&)+0x6c>)
    5a60:	881b      	ldrh	r3, [r3, #0]
    5a62:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
		default:	break;
	}
	LEDDebug(leds);
    5a66:	f7fc bbbd 	b.w	21e4 <LEDDebug(LEDStruct&)>

		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
    5a6a:	4b0c      	ldr	r3, [pc, #48]	; (5a9c <shooting_pole_update(LEDStruct&)+0x6c>)
    5a6c:	881b      	ldrh	r3, [r3, #0]
    5a6e:	f880 375e 	strb.w	r3, [r0, #1886]	; 0x75e
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5a72:	f7fc bbb7 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
    5a76:	4b09      	ldr	r3, [pc, #36]	; (5a9c <shooting_pole_update(LEDStruct&)+0x6c>)
    5a78:	881b      	ldrh	r3, [r3, #0]
    5a7a:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5a7e:	f7fc bbb1 	b.w	21e4 <LEDDebug(LEDStruct&)>
			leds.strip_range	= (uint8_t)update_arg;	
			leds.strip_range	= constrain(leds.strip_range, 10, ONE_SIDE - 10);
			break;	
		case 1:		leds.pole_diff		= (uint8_t)update_arg;	break;	//b
		case 2:		leds.juggle_fade	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.juggle_beat	= (uint8_t)update_arg;	break;	//d
    5a82:	4b06      	ldr	r3, [pc, #24]	; (5a9c <shooting_pole_update(LEDStruct&)+0x6c>)
    5a84:	881b      	ldrh	r3, [r3, #0]
    5a86:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 4:		leds.juggle_diff	= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    5a8a:	f7fc bbab 	b.w	21e4 <LEDDebug(LEDStruct&)>
    5a8e:	230a      	movs	r3, #10
    5a90:	e7e1      	b.n	5a56 <shooting_pole_update(LEDStruct&)+0x26>
    5a92:	bf00      	nop
    5a94:	1fff9e5c 	.word	0x1fff9e5c
    5a98:	1fff9605 	.word	0x1fff9605
    5a9c:	1fff9e54 	.word	0x1fff9e54

00005aa0 <shooting_pole(LEDStruct&)>:
}

void shooting_pole(LEDStruct& leds) {
    5aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    5aa4:	f890 622e 	ldrb.w	r6, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
    5aa8:	b087      	sub	sp, #28
    5aaa:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    5aac:	2e00      	cmp	r6, #0
    5aae:	f000 80f7 	beq.w	5ca0 <shooting_pole(LEDStruct&)+0x200>
	if (keyboard_update) { shooting_pole_update(leds); }
    5ab2:	4bbc      	ldr	r3, [pc, #752]	; (5da4 <shooting_pole(LEDStruct&)+0x304>)
    5ab4:	781b      	ldrb	r3, [r3, #0]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	f040 8161 	bne.w	5d7e <shooting_pole(LEDStruct&)+0x2de>

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    5abc:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    5ac0:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    5ac4:	b311      	cbz	r1, 5b0c <shooting_pole(LEDStruct&)+0x6c>
    5ac6:	4626      	mov	r6, r4
    5ac8:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    5aca:	f04f 0801 	mov.w	r8, #1
    5ace:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    5ad2:	f8cd 8000 	str.w	r8, [sp]
    5ad6:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    5ada:	fb92 f2f1 	sdiv	r2, r2, r1
    5ade:	441a      	add	r2, r3
    5ae0:	b2d2      	uxtb	r2, r2
    5ae2:	23ff      	movs	r3, #255	; 0xff
    5ae4:	4639      	mov	r1, r7
    5ae6:	a805      	add	r0, sp, #20
    5ae8:	f004 ffca 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5aec:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5af0:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    5af4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5af8:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    5afa:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    5afc:	70b3      	strb	r3, [r6, #2]
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    5afe:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    5b02:	3501      	adds	r5, #1
    5b04:	42a9      	cmp	r1, r5
    5b06:	f106 0603 	add.w	r6, r6, #3
    5b0a:	dce0      	bgt.n	5ace <shooting_pole(LEDStruct&)+0x2e>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    5b0c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5b10:	2b00      	cmp	r3, #0
    5b12:	f000 80bd 	beq.w	5c90 <shooting_pole(LEDStruct&)+0x1f0>
    5b16:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    5b1a:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    5b1e:	4413      	add	r3, r2
    5b20:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Fade juggle LEDs
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    5b24:	294a      	cmp	r1, #74	; 0x4a
    5b26:	f300 812e 	bgt.w	5d86 <shooting_pole(LEDStruct&)+0x2e6>
    5b2a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    5b2e:	18a3      	adds	r3, r4, r2
    5b30:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b34:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5b38:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b3a:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5b3c:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b40:	43c9      	mvns	r1, r1
    5b42:	b2c9      	uxtb	r1, r1
    5b44:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5b46:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b4a:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5b4e:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b52:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5b54:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5b56:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    5b58:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    5b5a:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    5b5c:	709a      	strb	r2, [r3, #2]
    5b5e:	3303      	adds	r3, #3
    5b60:	42ab      	cmp	r3, r5
    5b62:	d1e7      	bne.n	5b34 <shooting_pole(LEDStruct&)+0x94>
    5b64:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5b68:	f8df 824c 	ldr.w	r8, [pc, #588]	; 5db8 <shooting_pole(LEDStruct&)+0x318>

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    5b6c:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    5b70:	f8d8 2000 	ldr.w	r2, [r8]
    5b74:	9205      	str	r2, [sp, #20]
	return ret;
    5b76:	9805      	ldr	r0, [sp, #20]
    5b78:	f44f 728c 	mov.w	r2, #280	; 0x118
    5b7c:	fb02 f200 	mul.w	r2, r2, r0
    5b80:	021b      	lsls	r3, r3, #8
    5b82:	fb03 f202 	mul.w	r2, r3, r2
    5b86:	f3c2 420e 	ubfx	r2, r2, #16, #15
    5b8a:	f5a2 4280 	sub.w	r2, r2, #16384	; 0x4000
    5b8e:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    5b90:	0450      	lsls	r0, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    5b92:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    5b96:	d503      	bpl.n	5ba0 <shooting_pole(LEDStruct&)+0x100>
    5b98:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    5b9c:	3307      	adds	r3, #7
    5b9e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    5ba0:	0a18      	lsrs	r0, r3, #8
    5ba2:	f8df e218 	ldr.w	lr, [pc, #536]	; 5dbc <shooting_pole(LEDStruct&)+0x31c>
    uint8_t  m   = slope[section];
    5ba6:	4e80      	ldr	r6, [pc, #512]	; (5da8 <shooting_pole(LEDStruct&)+0x308>)

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5ba8:	5c36      	ldrb	r6, [r6, r0]
    5baa:	f83e 0010 	ldrh.w	r0, [lr, r0, lsl #1]
    5bae:	f3c3 0346 	ubfx	r3, r3, #1, #7
    5bb2:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    5bb6:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    5bb8:	b29e      	uxth	r6, r3

    if( theta & 0x8000 ) y = -y;
    5bba:	bf48      	it	mi
    5bbc:	4276      	negmi	r6, r6
    5bbe:	b236      	sxth	r6, r6
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
    5bc0:	f1c1 034a 	rsb	r3, r1, #74	; 0x4a
    5bc4:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
    5bc8:	b29b      	uxth	r3, r3
    5bca:	b2b6      	uxth	r6, r6
    5bcc:	fb03 6606 	mla	r6, r3, r6, r6
    5bd0:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    5bd4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    5bd8:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    5bdc:	9000      	str	r0, [sp, #0]
    5bde:	eb01 4616 	add.w	r6, r1, r6, lsr #16
    5be2:	a804      	add	r0, sp, #16
    5be4:	4639      	mov	r1, r7
    5be6:	b2b6      	uxth	r6, r6
    5be8:	f004 ff4a 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5bec:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5bf0:	18e1      	adds	r1, r4, r3
    5bf2:	5ce2      	ldrb	r2, [r4, r3]
    5bf4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    5bf8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5bfc:	54e2      	strb	r2, [r4, r3]
    5bfe:	f89d 3011 	ldrb.w	r3, [sp, #17]
    5c02:	784a      	ldrb	r2, [r1, #1]
    5c04:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5c08:	704a      	strb	r2, [r1, #1]
    5c0a:	788b      	ldrb	r3, [r1, #2]
    5c0c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    5c10:	fa83 f352 	uqadd8	r3, r3, r2

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5c14:	4f65      	ldr	r7, [pc, #404]	; (5dac <shooting_pole(LEDStruct&)+0x30c>)
        b = qadd8( b, rhs.b);
    5c16:	708b      	strb	r3, [r1, #2]
    5c18:	683b      	ldr	r3, [r7, #0]
    5c1a:	07db      	lsls	r3, r3, #31
    5c1c:	d51b      	bpl.n	5c56 <shooting_pole(LEDStruct&)+0x1b6>
    5c1e:	4e64      	ldr	r6, [pc, #400]	; (5db0 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c20:	f8d8 3000 	ldr.w	r3, [r8]
    5c24:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    5c26:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    5c2a:	9b04      	ldr	r3, [sp, #16]
    5c2c:	1a5b      	subs	r3, r3, r1
    5c2e:	429a      	cmp	r2, r3
    5c30:	d921      	bls.n	5c76 <shooting_pole(LEDStruct&)+0x1d6>
void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    5c32:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5c34:	781a      	ldrb	r2, [r3, #0]
    5c36:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    5c3a:	785a      	ldrb	r2, [r3, #1]
    5c3c:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    5c40:	789a      	ldrb	r2, [r3, #2]
    5c42:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    5c46:	3303      	adds	r3, #3
    5c48:	429d      	cmp	r5, r3
    5c4a:	f1a4 0403 	sub.w	r4, r4, #3
    5c4e:	d1f1      	bne.n	5c34 <shooting_pole(LEDStruct&)+0x194>

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }

	strip_sync(leds);
}
    5c50:	b007      	add	sp, #28
    5c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5c56:	4638      	mov	r0, r7
    5c58:	f005 fe2c 	bl	b8b4 <__cxa_guard_acquire>
    5c5c:	2800      	cmp	r0, #0
    5c5e:	f040 8095 	bne.w	5d8c <shooting_pole(LEDStruct&)+0x2ec>
    5c62:	4e53      	ldr	r6, [pc, #332]	; (5db0 <shooting_pole(LEDStruct&)+0x310>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c64:	f8d8 3000 	ldr.w	r3, [r8]
    5c68:	9304      	str	r3, [sp, #16]
    5c6a:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    5c6e:	9b04      	ldr	r3, [sp, #16]
    5c70:	1a5b      	subs	r3, r3, r1
    5c72:	4293      	cmp	r3, r2
    5c74:	d3dd      	bcc.n	5c32 <shooting_pole(LEDStruct&)+0x192>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5c76:	f8d8 1000 	ldr.w	r1, [r8]
    5c7a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    5c7e:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    5c82:	9103      	str	r1, [sp, #12]
	return ret;
    5c84:	9903      	ldr	r1, [sp, #12]
    5c86:	6031      	str	r1, [r6, #0]
    5c88:	4413      	add	r3, r2
    5c8a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    5c8e:	e7d0      	b.n	5c32 <shooting_pole(LEDStruct&)+0x192>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    5c90:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    5c94:	f894 275e 	ldrb.w	r2, [r4, #1886]	; 0x75e
    5c98:	1a9b      	subs	r3, r3, r2
    5c9a:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    5c9e:	e741      	b.n	5b24 <shooting_pole(LEDStruct&)+0x84>
    5ca0:	4f44      	ldr	r7, [pc, #272]	; (5db4 <shooting_pole(LEDStruct&)+0x314>)
    5ca2:	883b      	ldrh	r3, [r7, #0]
    5ca4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5ca8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5cac:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5cb0:	3319      	adds	r3, #25
    5cb2:	b29b      	uxth	r3, r3
    5cb4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5cb8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5cbc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5cc0:	3219      	adds	r2, #25
    5cc2:	b292      	uxth	r2, r2
    5cc4:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5cc8:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5ccc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5cd0:	f10e 0e19 	add.w	lr, lr, #25
    5cd4:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cd8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5cdc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
    5ce0:	2146      	movs	r1, #70	; 0x46
    5ce2:	2032      	movs	r0, #50	; 0x32
    5ce4:	b2dd      	uxtb	r5, r3
    5ce6:	eb0e 281e 	add.w	r8, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5cea:	f8a7 e000 	strh.w	lr, [r7]
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5cee:	fa5f f982 	uxtb.w	r9, r2
    5cf2:	f007 f989 	bl	d008 <random(long, long)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5cf6:	883b      	ldrh	r3, [r7, #0]
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    5cf8:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
    5cfc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    5d04:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5d08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    5d0c:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d0e:	fa5f f888 	uxtb.w	r8, r8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d12:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5d16:	f1c3 0339 	rsb	r3, r3, #57	; 0x39
    5d1a:	b2db      	uxtb	r3, r3
    5d1c:	3019      	adds	r0, #25
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5d1e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5d22:	b280      	uxth	r0, r0
    5d24:	ebc8 1808 	rsb	r8, r8, r8, lsl #4
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
    5d28:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5d2c:	4b1d      	ldr	r3, [pc, #116]	; (5da4 <shooting_pole(LEDStruct&)+0x304>)

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
    5d2e:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5d32:	eb09 0289 	add.w	r2, r9, r9, lsl #2
	leds.juggle_fade = jf;
    5d36:	ea4f 11e8 	mov.w	r1, r8, asr #7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d3a:	eb00 2e10 	add.w	lr, r0, r0, lsr #8
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5d3e:	1215      	asrs	r5, r2, #8
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5d40:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5d44:	f101 021e 	add.w	r2, r1, #30
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5d48:	781b      	ldrb	r3, [r3, #0]
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    5d4a:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5d4e:	1c69      	adds	r1, r5, #1


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
    5d50:	f04f 0c18 	mov.w	ip, #24

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5d54:	f10e 0501 	add.w	r5, lr, #1
void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    5d58:	220f      	movs	r2, #15
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    5d5a:	f04f 0e01 	mov.w	lr, #1
	leds.mode_type			= SHOOTING_POLE;
	leds.use_full_range		= 0;
	leds.delay_time			= 15;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    5d5e:	f884 175e 	strb.w	r1, [r4, #1886]	; 0x75e
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d62:	8038      	strh	r0, [r7, #0]
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    5d64:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(30, 120), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 33)) {
	leds.mode_initialized	= 1;
    5d68:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    5d6c:	f884 e22a 	strb.w	lr, [r4, #554]	; 0x22a
	leds.mode_type			= SHOOTING_POLE;
    5d70:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.use_full_range		= 0;
	leds.delay_time			= 15;
    5d74:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	LEDDebug(leds);
}

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
	if (keyboard_update) { shooting_pole_update(leds); }
    5d78:	2b00      	cmp	r3, #0
    5d7a:	f43f ae9f 	beq.w	5abc <shooting_pole(LEDStruct&)+0x1c>
    5d7e:	4620      	mov	r0, r4
    5d80:	f7ff fe56 	bl	5a30 <shooting_pole_update(LEDStruct&)>
    5d84:	e69a      	b.n	5abc <shooting_pole(LEDStruct&)+0x1c>
    5d86:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    5d8a:	e6ed      	b.n	5b68 <shooting_pole(LEDStruct&)+0xc8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5d8c:	f8d8 3000 	ldr.w	r3, [r8]
    5d90:	4e07      	ldr	r6, [pc, #28]	; (5db0 <shooting_pole(LEDStruct&)+0x310>)
    5d92:	9302      	str	r3, [sp, #8]
	return ret;
    5d94:	9b02      	ldr	r3, [sp, #8]
    5d96:	6033      	str	r3, [r6, #0]
    5d98:	2332      	movs	r3, #50	; 0x32

	// Add juggle LEDs
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);

	// Change juggle color
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    5d9a:	4638      	mov	r0, r7
    5d9c:	6073      	str	r3, [r6, #4]
    5d9e:	f005 fd8f 	bl	b8c0 <__cxa_guard_release>
    5da2:	e75f      	b.n	5c64 <shooting_pole(LEDStruct&)+0x1c4>
    5da4:	1fff9605 	.word	0x1fff9605
    5da8:	00010518 	.word	0x00010518
    5dac:	1fff95f4 	.word	0x1fff95f4
    5db0:	1fff9510 	.word	0x1fff9510
    5db4:	1fff8784 	.word	0x1fff8784
    5db8:	1fffa8f8 	.word	0x1fffa8f8
    5dbc:	0000fd88 	.word	0x0000fd88

00005dc0 <two_sin_update(LEDStruct&)>:
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    5dc0:	4b2a      	ldr	r3, [pc, #168]	; (5e6c <two_sin_update(LEDStruct&)+0xac>)
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5dc2:	4a2b      	ldr	r2, [pc, #172]	; (5e70 <two_sin_update(LEDStruct&)+0xb0>)
	switch (update_var) {
    5dc4:	781b      	ldrb	r3, [r3, #0]
	leds.sin_all_freq	= saf;		// number of repeats
}


void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    5dc6:	2100      	movs	r1, #0
    5dc8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5dca:	2b0b      	cmp	r3, #11
    5dcc:	d80b      	bhi.n	5de6 <two_sin_update(LEDStruct&)+0x26>
    5dce:	e8df f003 	tbb	[pc, r3]
    5dd2:	1f11      	.short	0x1f11
    5dd4:	332e2924 	.word	0x332e2924
    5dd8:	06423d38 	.word	0x06423d38
    5ddc:	0c47      	.short	0x0c47
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
    5dde:	4b25      	ldr	r3, [pc, #148]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5de0:	881b      	ldrh	r3, [r3, #0]
    5de2:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
		default:	break;
	}
	LEDDebug(leds);
    5de6:	f7fc b9fd 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
		case 11:	leds.sin_all_freq	= (uint8_t)update_arg;	break;	//l
    5dea:	4b22      	ldr	r3, [pc, #136]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5dec:	881b      	ldrh	r3, [r3, #0]
    5dee:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5df2:	e7f8      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>

void two_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5df4:	4b1f      	ldr	r3, [pc, #124]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5df6:	881b      	ldrh	r3, [r3, #0]
    5df8:	2b00      	cmp	r3, #0
    5dfa:	bf14      	ite	ne
    5dfc:	2301      	movne	r3, #1
    5dfe:	2300      	moveq	r3, #0
    5e00:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5e04:	bf14      	ite	ne
    5e06:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5e08:	234b      	moveq	r3, #75	; 0x4b
    5e0a:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    5e0e:	e7ea      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
			break;
		case 1:		leds.sin_hue		= (uint8_t)update_arg;	break;	//b		
    5e10:	4b18      	ldr	r3, [pc, #96]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e12:	881b      	ldrh	r3, [r3, #0]
    5e14:	f880 3347 	strb.w	r3, [r0, #839]	; 0x347
    5e18:	e7e5      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 2:		leds.two_hue		= (uint8_t)update_arg;	break;	//c
    5e1a:	4b16      	ldr	r3, [pc, #88]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e1c:	881b      	ldrh	r3, [r3, #0]
    5e1e:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d
    5e22:	e7e0      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 3:		leds.sin_speed		= (uint8_t)update_arg;	break;	//d
    5e24:	4b13      	ldr	r3, [pc, #76]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e26:	881b      	ldrh	r3, [r3, #0]
    5e28:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5e2c:	e7db      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 4:		leds.two_speed		= (uint8_t)update_arg;	break;	//e
    5e2e:	4b11      	ldr	r3, [pc, #68]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e30:	881b      	ldrh	r3, [r3, #0]
    5e32:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
    5e36:	e7d6      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 5:		leds.sin_rot		= (uint8_t)update_arg;	break;	//f
    5e38:	4b0e      	ldr	r3, [pc, #56]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e3a:	881b      	ldrh	r3, [r3, #0]
    5e3c:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5e40:	e7d1      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 6:		leds.two_rot		= (uint8_t)update_arg;	break;	//g
    5e42:	4b0c      	ldr	r3, [pc, #48]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e44:	881b      	ldrh	r3, [r3, #0]
    5e46:	f880 334a 	strb.w	r3, [r0, #842]	; 0x34a
    5e4a:	e7cc      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 7:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//h
    5e4c:	4b09      	ldr	r3, [pc, #36]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e4e:	881b      	ldrh	r3, [r3, #0]
    5e50:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    5e54:	e7c7      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 8:		leds.two_cutoff		= (uint8_t)update_arg;	break;	//i
    5e56:	4b07      	ldr	r3, [pc, #28]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e58:	881b      	ldrh	r3, [r3, #0]
    5e5a:	f880 334b 	strb.w	r3, [r0, #843]	; 0x34b
    5e5e:	e7c2      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
		case 9:		leds.sin_phase		= (uint8_t)update_arg;	break;	//j
		case 10:	leds.two_phase		= (uint8_t)update_arg;	break;	//k
    5e60:	4b04      	ldr	r3, [pc, #16]	; (5e74 <two_sin_update(LEDStruct&)+0xb4>)
    5e62:	881b      	ldrh	r3, [r3, #0]
    5e64:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    5e68:	e7bd      	b.n	5de6 <two_sin_update(LEDStruct&)+0x26>
    5e6a:	bf00      	nop
    5e6c:	1fff9e5c 	.word	0x1fff9e5c
    5e70:	1fff9605 	.word	0x1fff9605
    5e74:	1fff9e54 	.word	0x1fff9e54

00005e78 <two_sin(LEDStruct&)>:
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5e7c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void two_sin(LEDStruct& leds) {
    5e80:	b083      	sub	sp, #12
    5e82:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { two_sin_init(leds); }
    5e84:	2b00      	cmp	r3, #0
    5e86:	f040 80cb 	bne.w	6020 <two_sin(LEDStruct&)+0x1a8>
    5e8a:	f8df a3cc 	ldr.w	sl, [pc, #972]	; 6258 <two_sin(LEDStruct&)+0x3e0>
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
    5e8e:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    5e92:	f8ba 3000 	ldrh.w	r3, [sl]
    5e96:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5e9a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    5e9e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5ea2:	3619      	adds	r6, #25
    5ea4:	b2b6      	uxth	r6, r6
    5ea6:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5eaa:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    5eae:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    5eb2:	f10c 0c19 	add.w	ip, ip, #25
    5eb6:	fa1f fc8c 	uxth.w	ip, ip
    5eba:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    5ebe:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    5ec2:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5ec6:	f10e 0e19 	add.w	lr, lr, #25
    5eca:	fa1f fe8e 	uxth.w	lr, lr
    5ece:	eb0e 214e 	add.w	r1, lr, lr, lsl #9
    5ed2:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    5ed6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5eda:	3119      	adds	r1, #25
    5edc:	b289      	uxth	r1, r1
    5ede:	eb01 2741 	add.w	r7, r1, r1, lsl #9
    5ee2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
    5ee6:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5eea:	3719      	adds	r7, #25
    5eec:	b2bf      	uxth	r7, r7
    5eee:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5ef2:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5ef6:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5efa:	3519      	adds	r5, #25
    5efc:	b2ad      	uxth	r5, r5
    5efe:	eb05 2045 	add.w	r0, r5, r5, lsl #9
    5f02:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5f06:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5f0a:	3019      	adds	r0, #25
    5f0c:	b280      	uxth	r0, r0
    5f0e:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5f12:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5f16:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5f1a:	3219      	adds	r2, #25
    5f1c:	b292      	uxth	r2, r2
    5f1e:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5f22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5f26:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5f2a:	3319      	adds	r3, #25
    5f2c:	b29b      	uxth	r3, r3
    5f2e:	eb03 2943 	add.w	r9, r3, r3, lsl #9
    5f32:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    5f36:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    5f3a:	f109 0919 	add.w	r9, r9, #25
    5f3e:	fa1f f989 	uxth.w	r9, r9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f42:	eb09 2819 	add.w	r8, r9, r9, lsr #8
    5f46:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5f4a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f4e:	fa5f f888 	uxtb.w	r8, r8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f52:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f56:	b2c9      	uxtb	r1, r1
    5f58:	b2d2      	uxtb	r2, r2
    5f5a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f64:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5f68:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5f70:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    5f74:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f78:	1112      	asrs	r2, r2, #4
    5f7a:	ea4f 2828 	mov.w	r8, r8, asr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f7e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f82:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f84:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5f88:	b2ed      	uxtb	r5, r5
    5f8a:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f8c:	111b      	asrs	r3, r3, #4
    5f8e:	f102 0b20 	add.w	fp, r2, #32
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5f92:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5f96:	f108 020c 	add.w	r2, r8, #12
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5f9a:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
    5f9e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5fa2:	3903      	subs	r1, #3
    5fa4:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5fac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5fb0:	3320      	adds	r3, #32
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5fb2:	f8aa 9000 	strh.w	r9, [sl]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
    5fb6:	f04f 0816 	mov.w	r8, #22

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5fba:	f04f 0901 	mov.w	r9, #1
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
    5fbe:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5fc2:	fa5f fc8c 	uxtb.w	ip, ip
    5fc6:	fa5f fe8e 	uxtb.w	lr, lr
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5fca:	b2c9      	uxtb	r1, r1
    5fcc:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5fce:	f3c5 2507 	ubfx	r5, r5, #8, #8
    5fd2:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5fd6:	fa5f fb8b 	uxtb.w	fp, fp
    5fda:	b2d2      	uxtb	r2, r2
    5fdc:	b2db      	uxtb	r3, r3

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(253,260), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(32, 80), uint8_t tc = random8(32, 80), uint8_t saf = random8(12, 33)) {

	leds.mode_initialized	= 1;
    5fde:	f884 922e 	strb.w	r9, [r4, #558]	; 0x22e
	leds.mode_type			= TWO_SIN;
    5fe2:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5fe6:	2e00      	cmp	r6, #0
    5fe8:	f040 812b 	bne.w	6242 <two_sin(LEDStruct&)+0x3ca>
	else					 { leds.strip_range = ONE_SIDE; }
    5fec:	264b      	movs	r6, #75	; 0x4b
    5fee:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    5ff2:	2600      	movs	r6, #0
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue		= sh;		// changes by rot
    5ff4:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue		= th;
    5ff8:	f884 e34d 	strb.w	lr, [r4, #845]	; 0x34d
	leds.sin_speed		= ss;		// changes the phase
    5ffc:	f884 1340 	strb.w	r1, [r4, #832]	; 0x340
	leds.two_speed		= ts;
    6000:	f884 7349 	strb.w	r7, [r4, #841]	; 0x349
	leds.sin_rot		= sr;		// changes the hue
    6004:	f884 5342 	strb.w	r5, [r4, #834]	; 0x342
	leds.two_rot		= tr;
    6008:	f884 034a 	strb.w	r0, [r4, #842]	; 0x34a
	leds.sin_cutoff		= sc;		// limits the brightness
    600c:	f884 b341 	strb.w	fp, [r4, #833]	; 0x341
	leds.two_cutoff		= tc;
    6010:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
	leds.sin_phase		= 0;		// changes by speed
	leds.two_phase		= 0;
	leds.sin_all_freq	= saf;		// number of repeats
    6014:	f884 2343 	strb.w	r2, [r4, #835]	; 0x343
	leds.two_speed		= ts;
	leds.sin_rot		= sr;		// changes the hue
	leds.two_rot		= tr;
	leds.sin_cutoff		= sc;		// limits the brightness
	leds.two_cutoff		= tc;
	leds.sin_phase		= 0;		// changes by speed
    6018:	f884 6346 	strb.w	r6, [r4, #838]	; 0x346
	leds.two_phase		= 0;
    601c:	f884 634c 	strb.w	r6, [r4, #844]	; 0x34c
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    6020:	4b8c      	ldr	r3, [pc, #560]	; (6254 <two_sin(LEDStruct&)+0x3dc>)
    6022:	781b      	ldrb	r3, [r3, #0]
    6024:	2b00      	cmp	r3, #0
    6026:	f040 8110 	bne.w	624a <two_sin(LEDStruct&)+0x3d2>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    602a:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    602e:	2b00      	cmp	r3, #0
    6030:	f040 80f8 	bne.w	6224 <two_sin(LEDStruct&)+0x3ac>
    6034:	f894 0346 	ldrb.w	r0, [r4, #838]	; 0x346
    6038:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    603c:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    6040:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    6044:	4402      	add	r2, r0
    6046:	440b      	add	r3, r1
    6048:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    604c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    6050:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
    6054:	f894 2342 	ldrb.w	r2, [r4, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    6058:	f894 034d 	ldrb.w	r0, [r4, #845]	; 0x34d
    605c:	f894 334a 	ldrb.w	r3, [r4, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range; k++) {
    6060:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    6064:	4494      	add	ip, r2
    6066:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    606a:	4403      	add	r3, r0
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    606c:	f884 c347 	strb.w	ip, [r4, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    6070:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range; k++) {
    6074:	2900      	cmp	r1, #0
    6076:	f000 80be 	beq.w	61f6 <two_sin(LEDStruct&)+0x37e>
    607a:	4626      	mov	r6, r4
    607c:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    607e:	25ff      	movs	r5, #255	; 0xff
    6080:	e08b      	b.n	619a <two_sin(LEDStruct&)+0x322>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6082:	2b00      	cmp	r3, #0
        in = 255 - in;
    6084:	bfbc      	itt	lt
    6086:	43c9      	mvnlt	r1, r1
    6088:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    608a:	0049      	lsls	r1, r1, #1
    608c:	b2c9      	uxtb	r1, r1
    608e:	1c4b      	adds	r3, r1, #1
    6090:	fb03 f101 	mul.w	r1, r3, r1
    6094:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    6096:	fb01 f303 	mul.w	r3, r1, r3
    609a:	121b      	asrs	r3, r3, #8
    609c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    60a0:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    60a4:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    60a6:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    60a8:	bf54      	ite	pl
    60aa:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    60ae:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    60b2:	ebc8 0e0e 	rsb	lr, r8, lr
    60b6:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    60ba:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    60be:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    60c2:	3b80      	subs	r3, #128	; 0x80
    60c4:	4403      	add	r3, r0
    60c6:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    60c8:	b259      	sxtb	r1, r3
    60ca:	2900      	cmp	r1, #0
        in = 255 - in;
    60cc:	bfba      	itte	lt
    60ce:	43da      	mvnlt	r2, r3
    60d0:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    60d2:	461a      	movge	r2, r3
    60d4:	0052      	lsls	r2, r2, #1
    60d6:	b2d2      	uxtb	r2, r2
    60d8:	1c50      	adds	r0, r2, #1
    60da:	fb00 f202 	mul.w	r2, r0, r2
    60de:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    60e0:	fb02 f000 	mul.w	r0, r2, r0
    60e4:	1200      	asrs	r0, r0, #8
    60e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    60ea:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    60ee:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    60f0:	05d0      	lsls	r0, r2, #23
    60f2:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    60f6:	bf54      	ite	pl
    60f8:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    60fa:	22ff      	movmi	r2, #255	; 0xff
    60fc:	4290      	cmp	r0, r2
    60fe:	d278      	bcs.n	61f2 <two_sin(LEDStruct&)+0x37a>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    6100:	2900      	cmp	r1, #0
        in = 255 - in;
    6102:	bfbc      	itt	lt
    6104:	43db      	mvnlt	r3, r3
    6106:	b2db      	uxtblt	r3, r3
    6108:	005a      	lsls	r2, r3, #1
    610a:	b2d2      	uxtb	r2, r2
    610c:	1c53      	adds	r3, r2, #1
    610e:	fb03 f202 	mul.w	r2, r3, r2
    6112:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    6114:	fb02 f303 	mul.w	r3, r2, r3
    6118:	121b      	asrs	r3, r3, #8
    611a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    611e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    6122:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    6124:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    6126:	bf54      	ite	pl
    6128:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    612a:	23ff      	movmi	r3, #255	; 0xff
    612c:	1a1b      	subs	r3, r3, r0
    612e:	b2db      	uxtb	r3, r3
    6130:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6134:	4631      	mov	r1, r6
    6136:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6138:	f88d c004 	strb.w	ip, [sp, #4]
    613c:	f88d e006 	strb.w	lr, [sp, #6]
    6140:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6144:	f004 fe9a 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    6148:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    614c:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    6150:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6154:	a901      	add	r1, sp, #4
    6156:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6158:	f88d 3000 	strb.w	r3, [sp]
    615c:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6160:	f004 fe8c 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    6164:	7833      	ldrb	r3, [r6, #0]
    6166:	f89d 2004 	ldrb.w	r2, [sp, #4]
    616a:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    616e:	7033      	strb	r3, [r6, #0]
    6170:	7872      	ldrb	r2, [r6, #1]
    6172:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6176:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    617a:	7072      	strb	r2, [r6, #1]
    617c:	78b3      	ldrb	r3, [r6, #2]
    617e:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6182:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    6186:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range; k++) {
    6188:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    618c:	3701      	adds	r7, #1
    618e:	42bb      	cmp	r3, r7
    6190:	f106 0603 	add.w	r6, r6, #3
    6194:	dd2f      	ble.n	61f6 <two_sin(LEDStruct&)+0x37e>
    6196:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     
    619a:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    619e:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    61a2:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    61a6:	fb10 f007 	smulbb	r0, r0, r7
    61aa:	b2c0      	uxtb	r0, r0
    61ac:	4401      	add	r1, r0
    61ae:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    61b0:	b24b      	sxtb	r3, r1
    61b2:	2b00      	cmp	r3, #0
        in = 255 - in;
    61b4:	bfba      	itte	lt
    61b6:	43ca      	mvnlt	r2, r1
    61b8:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    61ba:	460a      	movge	r2, r1
    61bc:	0052      	lsls	r2, r2, #1
    61be:	b2d2      	uxtb	r2, r2
    61c0:	f102 0e01 	add.w	lr, r2, #1
    61c4:	fb0e f202 	mul.w	r2, lr, r2
    61c8:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    61ca:	fb02 fe0e 	mul.w	lr, r2, lr
    61ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    61d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    61d6:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    61da:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    61dc:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    61e0:	bf0c      	ite	eq
    61e2:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    61e4:	22ff      	movne	r2, #255	; 0xff
    61e6:	4590      	cmp	r8, r2
    61e8:	f4ff af4b 	bcc.w	6082 <two_sin(LEDStruct&)+0x20a>
    61ec:	f04f 0e00 	mov.w	lr, #0
    61f0:	e763      	b.n	60ba <two_sin(LEDStruct&)+0x242>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    61f2:	2300      	movs	r3, #0
    61f4:	e79c      	b.n	6130 <two_sin(LEDStruct&)+0x2b8>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
	if (!leds.use_full_range) { strip_sync(leds); }
    61f6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    61fa:	b983      	cbnz	r3, 621e <two_sin(LEDStruct&)+0x3a6>
    61fc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6200:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6202:	781a      	ldrb	r2, [r3, #0]
    6204:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    6208:	785a      	ldrb	r2, [r3, #1]
    620a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    620e:	789a      	ldrb	r2, [r3, #2]
    6210:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6214:	3303      	adds	r3, #3
    6216:	428b      	cmp	r3, r1
    6218:	f1a4 0403 	sub.w	r4, r4, #3
    621c:	d1f1      	bne.n	6202 <two_sin(LEDStruct&)+0x38a>
}
    621e:	b003      	add	sp, #12
    6220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    6224:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    6228:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c
    622c:	f894 0340 	ldrb.w	r0, [r4, #832]	; 0x340
    6230:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    6234:	1a12      	subs	r2, r2, r0
    6236:	1a5b      	subs	r3, r3, r1
    6238:	f884 2346 	strb.w	r2, [r4, #838]	; 0x346
    623c:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    6240:	e706      	b.n	6050 <two_sin(LEDStruct&)+0x1d8>

	leds.mode_initialized	= 1;
	leds.mode_type			= TWO_SIN;
	leds.use_palette		= 0;
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6242:	2696      	movs	r6, #150	; 0x96
    6244:	f8a4 633c 	strh.w	r6, [r4, #828]	; 0x33c
    6248:	e6d3      	b.n	5ff2 <two_sin(LEDStruct&)+0x17a>
}


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	if (keyboard_update) { two_sin_update(leds); }
    624a:	4620      	mov	r0, r4
    624c:	f7ff fdb8 	bl	5dc0 <two_sin_update(LEDStruct&)>
    6250:	e6eb      	b.n	602a <two_sin(LEDStruct&)+0x1b2>
    6252:	bf00      	nop
    6254:	1fff9605 	.word	0x1fff9605
    6258:	1fff8784 	.word	0x1fff8784

0000625c <noise_update(LEDStruct&)>:
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    625c:	4b19      	ldr	r3, [pc, #100]	; (62c4 <noise_update(LEDStruct&)+0x68>)
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    625e:	4a1a      	ldr	r2, [pc, #104]	; (62c8 <noise_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    6260:	781b      	ldrb	r3, [r3, #0]
	leds.noise_dist		= d;
	leds.noise_fade		= nf;
}

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
    6262:	2100      	movs	r1, #0
    6264:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    6266:	2b04      	cmp	r3, #4
    6268:	d808      	bhi.n	627c <noise_update(LEDStruct&)+0x20>
    626a:	e8df f003 	tbb	[pc, r3]
    626e:	1e0f      	.short	0x1e0f
    6270:	2403      	.short	0x2403
    6272:	09          	.byte	0x09
    6273:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
    6274:	4b15      	ldr	r3, [pc, #84]	; (62cc <noise_update(LEDStruct&)+0x70>)
    6276:	881b      	ldrh	r3, [r3, #0]
    6278:	f8a0 3762 	strh.w	r3, [r0, #1890]	; 0x762
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    627c:	f7fb bfb2 	b.w	21e4 <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
    6280:	4b12      	ldr	r3, [pc, #72]	; (62cc <noise_update(LEDStruct&)+0x70>)
    6282:	881b      	ldrh	r3, [r3, #0]
    6284:	f880 3767 	strb.w	r3, [r0, #1895]	; 0x767
		default:	break;
	}
	LEDDebug(leds);
    6288:	f7fb bfac 	b.w	21e4 <LEDDebug(LEDStruct&)>

void noise_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
    628c:	4b0f      	ldr	r3, [pc, #60]	; (62cc <noise_update(LEDStruct&)+0x70>)
    628e:	881b      	ldrh	r3, [r3, #0]
    6290:	2b00      	cmp	r3, #0
    6292:	bf14      	ite	ne
    6294:	2301      	movne	r3, #1
    6296:	2300      	moveq	r3, #0
    6298:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
    629c:	bf14      	ite	ne
    629e:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; } 
    62a0:	234b      	moveq	r3, #75	; 0x4b
    62a2:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    62a6:	f7fb bf9d 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;	
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
    62aa:	4b08      	ldr	r3, [pc, #32]	; (62cc <noise_update(LEDStruct&)+0x70>)
    62ac:	881b      	ldrh	r3, [r3, #0]
    62ae:	f8a0 3760 	strh.w	r3, [r0, #1888]	; 0x760
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    62b2:	f7fb bf97 	b.w	21e4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; } 
			else { leds.strip_range = ONE_SIDE; } 
			break;	
		case 1:		leds.noise_scale	= (uint16_t)update_arg;	break;	//b		
		case 2:		leds.noise_yscale	= (uint16_t)update_arg;	break;	//c
		case 3:		leds.noise_dist		= (uint16_t)update_arg;	break;	//d
    62b6:	4b05      	ldr	r3, [pc, #20]	; (62cc <noise_update(LEDStruct&)+0x70>)
    62b8:	881b      	ldrh	r3, [r3, #0]
    62ba:	f8a0 3764 	strh.w	r3, [r0, #1892]	; 0x764
		case 4:		leds.noise_fade		= (uint8_t)update_arg;	break;	//e
		default:	break;
	}
	LEDDebug(leds);
    62be:	f7fb bf91 	b.w	21e4 <LEDDebug(LEDStruct&)>
    62c2:	bf00      	nop
    62c4:	1fff9e5c 	.word	0x1fff9e5c
    62c8:	1fff9605 	.word	0x1fff9605
    62cc:	1fff9e54 	.word	0x1fff9e54

000062d0 <noise(LEDStruct&)>:
}

void noise(LEDStruct& leds) {
    62d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    62d4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
    62d8:	b085      	sub	sp, #20
    62da:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    62dc:	2b00      	cmp	r3, #0
    62de:	d16a      	bne.n	63b6 <noise(LEDStruct&)+0xe6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    62e0:	4d78      	ldr	r5, [pc, #480]	; (64c4 <noise(LEDStruct&)+0x1f4>)
    62e2:	882b      	ldrh	r3, [r5, #0]
    62e4:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    62e8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    62ec:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    62f0:	3619      	adds	r6, #25
    62f2:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    62f4:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    62f8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    62fc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6300:	3219      	adds	r2, #25
    6302:	b292      	uxth	r2, r2
    6304:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    6308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    630c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6310:	3319      	adds	r3, #25
    6312:	b29b      	uxth	r3, r3
    6314:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    6318:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    631c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6320:	f10e 0e19 	add.w	lr, lr, #25
    6324:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6328:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    632c:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6330:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    6334:	3019      	adds	r0, #25
    6336:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6338:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    633c:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6340:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6342:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6346:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    634a:	fb07 fe0e 	mul.w	lr, r7, lr
    634e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6352:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6356:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    635a:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    635e:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6360:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6362:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6364:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    6368:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    636c:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6370:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    6374:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6376:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    6378:	f04f 0e19 	mov.w	lr, #25
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    637c:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    6380:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    6384:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    6386:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    638a:	b289      	uxth	r1, r1
    638c:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    638e:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6390:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6392:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    6396:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    639a:	2f00      	cmp	r7, #0
    639c:	f040 8089 	bne.w	64b2 <noise(LEDStruct&)+0x1e2>
	else				  	 { leds.strip_range = ONE_SIDE; }
    63a0:	254b      	movs	r5, #75	; 0x4b
    63a2:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    63a6:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    63aa:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    63ae:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    63b2:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    63b6:	4b44      	ldr	r3, [pc, #272]	; (64c8 <noise(LEDStruct&)+0x1f8>)
    63b8:	781b      	ldrb	r3, [r3, #0]
    63ba:	2b00      	cmp	r3, #0
    63bc:	d17d      	bne.n	64ba <noise(LEDStruct&)+0x1ea>

	for (int i = 0; i < leds.strip_range; i++) {
    63be:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    63c2:	b37b      	cbz	r3, 6424 <noise(LEDStruct&)+0x154>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    63c4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 64d4 <noise(LEDStruct&)+0x204>
    63c8:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    63cc:	4625      	mov	r5, r4

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    63ce:	2600      	movs	r6, #0
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    63d0:	2701      	movs	r7, #1
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    63d2:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    63d6:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    63da:	fb10 f006 	smulbb	r0, r0, r6
    63de:	b280      	uxth	r0, r0
    63e0:	4401      	add	r1, r0
    63e2:	b289      	uxth	r1, r1
    63e4:	f004 fef2 	bl	b1cc <inoise8(unsigned short, unsigned short)>
    63e8:	fba9 3200 	umull	r3, r2, r9, r0
    63ec:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    63f0:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    63f4:	9700      	str	r7, [sp, #0]
    63f6:	23ff      	movs	r3, #255	; 0xff
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    63f8:	f884 2766 	strb.w	r2, [r4, #1894]	; 0x766
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    63fc:	4641      	mov	r1, r8
    63fe:	a803      	add	r0, sp, #12
    6400:	f004 fb3e 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    6404:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6408:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    640c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6410:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    6412:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    6414:	70ab      	strb	r3, [r5, #2]

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    6416:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    641a:	3601      	adds	r6, #1
    641c:	42b3      	cmp	r3, r6
    641e:	f105 0503 	add.w	r5, r5, #3
    6422:	dcd6      	bgt.n	63d2 <noise(LEDStruct&)+0x102>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6424:	4b29      	ldr	r3, [pc, #164]	; (64cc <noise(LEDStruct&)+0x1fc>)
    6426:	681b      	ldr	r3, [r3, #0]
    6428:	9303      	str	r3, [sp, #12]
	return ret;
    642a:	9803      	ldr	r0, [sp, #12]
    642c:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    6430:	fb03 f000 	mul.w	r0, r3, r0
    6434:	0e00      	lsrs	r0, r0, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6436:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6438:	0659      	lsls	r1, r3, #25
    643a:	d535      	bpl.n	64a8 <noise(LEDStruct&)+0x1d8>
        offset = (uint8_t)255 - offset;
    643c:	43db      	mvns	r3, r3
    643e:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6440:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    6444:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6446:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    644a:	110b      	asrs	r3, r1, #4
    644c:	4920      	ldr	r1, [pc, #128]	; (64d0 <noise(LEDStruct&)+0x200>)
    644e:	005b      	lsls	r3, r3, #1
    6450:	18cd      	adds	r5, r1, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6452:	5ccb      	ldrb	r3, [r1, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    6454:	7869      	ldrb	r1, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6456:	fb11 f202 	smulbb	r2, r1, r2
    645a:	eb03 1322 	add.w	r3, r3, r2, asr #4
    645e:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6460:	0602      	lsls	r2, r0, #24
    6462:	bf48      	it	mi
    6464:	425b      	negmi	r3, r3
    6466:	b25b      	sxtb	r3, r3

    y += 128;
    6468:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    646a:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    646e:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    6472:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6476:	3301      	adds	r3, #1
    6478:	4413      	add	r3, r2
    647a:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    647e:	b981      	cbnz	r1, 64a2 <noise(LEDStruct&)+0x1d2>
    6480:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6484:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6486:	781a      	ldrb	r2, [r3, #0]
    6488:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    648c:	785a      	ldrb	r2, [r3, #1]
    648e:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    6492:	789a      	ldrb	r2, [r3, #2]
    6494:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    6498:	3303      	adds	r3, #3
    649a:	4299      	cmp	r1, r3
    649c:	f1a4 0403 	sub.w	r4, r4, #3
    64a0:	d1f1      	bne.n	6486 <noise(LEDStruct&)+0x1b6>
}
    64a2:	b005      	add	sp, #20
    64a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    64a8:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    64ac:	f003 020f 	and.w	r2, r3, #15
    64b0:	e7cb      	b.n	644a <noise(LEDStruct&)+0x17a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    64b2:	2596      	movs	r5, #150	; 0x96
    64b4:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    64b8:	e775      	b.n	63a6 <noise(LEDStruct&)+0xd6>
	LEDDebug(leds);
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    64ba:	4620      	mov	r0, r4
    64bc:	f7ff fece 	bl	625c <noise_update(LEDStruct&)>
    64c0:	e77d      	b.n	63be <noise(LEDStruct&)+0xee>
    64c2:	bf00      	nop
    64c4:	1fff8784 	.word	0x1fff8784
    64c8:	1fff9605 	.word	0x1fff9605
    64cc:	1fffa8f8 	.word	0x1fffa8f8
    64d0:	0000ff10 	.word	0x0000ff10
    64d4:	80808081 	.word	0x80808081

000064d8 <noise_mover(LEDStruct&)>:

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    64d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    64da:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e

	if (!leds.use_full_range) { strip_sync(leds); }
}


void noise_mover(LEDStruct& leds) {
    64de:	b085      	sub	sp, #20
    64e0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    64e2:	2b00      	cmp	r3, #0
    64e4:	d16a      	bne.n	65bc <noise_mover(LEDStruct&)+0xe4>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    64e6:	4d7e      	ldr	r5, [pc, #504]	; (66e0 <noise_mover(LEDStruct&)+0x208>)
    64e8:	882b      	ldrh	r3, [r5, #0]
    64ea:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    64ee:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    64f2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    64f6:	3619      	adds	r6, #25
    64f8:	b2b6      	uxth	r6, r6
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    64fa:	eb06 2246 	add.w	r2, r6, r6, lsl #9
    64fe:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    6502:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    6506:	3219      	adds	r2, #25
    6508:	b292      	uxth	r2, r2
    650a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    650e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6512:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6516:	3319      	adds	r3, #25
    6518:	b29b      	uxth	r3, r3
    651a:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    651e:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    6522:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    6526:	f10e 0e19 	add.w	lr, lr, #25
    652a:	fa1f fe8e 	uxth.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    652e:	eb0e 204e 	add.w	r0, lr, lr, lsl #9
    6532:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
    6536:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    653a:	3019      	adds	r0, #25
    653c:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    653e:	eb00 2110 	add.w	r1, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6542:	f64b 7768 	movw	r7, #49000	; 0xbf68
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6546:	b2c9      	uxtb	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6548:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    654c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6550:	fb07 fe0e 	mul.w	lr, r7, lr
    6554:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6558:	eb06 2716 	add.w	r7, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    655c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6560:	f3c2 36cf 	ubfx	r6, r2, #15, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6564:	8028      	strh	r0, [r5, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6566:	118a      	asrs	r2, r1, #6
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6568:	2501      	movs	r5, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    656a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
    656e:	f106 010a 	add.w	r1, r6, #10
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6572:	f3c7 17c0 	ubfx	r7, r7, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6576:	f50e 767a 	add.w	r6, lr, #1000	; 0x3e8
    657a:	330a      	adds	r3, #10
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    657c:	3220      	adds	r2, #32
	leds.mode_type			= NOISE;
    657e:	f04f 0e19 	mov.w	lr, #25
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
    6582:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
    6586:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.delay_time			= 5;
    658a:	2505      	movs	r5, #5

	leds.use_full_range		= ufr;
    658c:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6590:	b289      	uxth	r1, r1
    6592:	b29b      	uxth	r3, r3
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    6594:	b2d2      	uxtb	r2, r2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    6596:	b2b0      	uxth	r0, r6
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(10,40), uint16_t y = random16(10,40), uint16_t d = random16(1000,50000), uint8_t nf = random8(32,60)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= NOISE;
    6598:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 5;
    659c:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    65a0:	2f00      	cmp	r7, #0
    65a2:	f040 8094 	bne.w	66ce <noise_mover(LEDStruct&)+0x1f6>
	else				  	 { leds.strip_range = ONE_SIDE; }
    65a6:	254b      	movs	r5, #75	; 0x4b
    65a8:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c

	leds.noise_scale	= s;
    65ac:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
	leds.noise_yscale	= y;
    65b0:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
	leds.noise_dist		= d;
    65b4:	f8a4 0764 	strh.w	r0, [r4, #1892]	; 0x764
	leds.noise_fade		= nf;
    65b8:	f884 2767 	strb.w	r2, [r4, #1895]	; 0x767
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    65bc:	4b49      	ldr	r3, [pc, #292]	; (66e4 <noise_mover(LEDStruct&)+0x20c>)
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	2b00      	cmp	r3, #0
    65c2:	f040 8088 	bne.w	66d6 <noise_mover(LEDStruct&)+0x1fe>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
    65c6:	f894 2767 	ldrb.w	r2, [r4, #1895]	; 0x767
    65ca:	2196      	movs	r1, #150	; 0x96
    65cc:	4620      	mov	r0, r4
    65ce:	f004 f9f7 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
    65d2:	f8b4 3762 	ldrh.w	r3, [r4, #1890]	; 0x762
    65d6:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    65da:	f8b4 0760 	ldrh.w	r0, [r4, #1888]	; 0x760
    65de:	4419      	add	r1, r3
    65e0:	b289      	uxth	r1, r1
    65e2:	f004 fdf3 	bl	b1cc <inoise8(unsigned short, unsigned short)>
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    65e6:	4a40      	ldr	r2, [pc, #256]	; (66e8 <noise_mover(LEDStruct&)+0x210>)
    65e8:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    65ec:	fba2 1500 	umull	r1, r5, r2, r0
    65f0:	eb00 10d5 	add.w	r0, r0, r5, lsr #7
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    65f4:	2bfe      	cmp	r3, #254	; 0xfe
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
    65f6:	f000 05ff 	and.w	r5, r0, #255	; 0xff
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
    65fa:	dc5f      	bgt.n	66bc <noise_mover(LEDStruct&)+0x1e4>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
    65fc:	fb03 5305 	mla	r3, r3, r5, r5
    6600:	121d      	asrs	r5, r3, #8
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   
    6602:	b2ed      	uxtb	r5, r5
    6604:	2301      	movs	r3, #1
    6606:	462a      	mov	r2, r5
    6608:	9300      	str	r3, [sp, #0]
    660a:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    660e:	23ff      	movs	r3, #255	; 0xff
    6610:	a803      	add	r0, sp, #12
    6612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6616:	f004 fa33 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    661a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    661e:	5563      	strb	r3, [r4, r5]
    6620:	4425      	add	r5, r4
        g = rhs.g;
    6622:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    6626:	f89d 200e 	ldrb.w	r2, [sp, #14]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    662a:	4b30      	ldr	r3, [pc, #192]	; (66ec <noise_mover(LEDStruct&)+0x214>)

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    662c:	7069      	strb	r1, [r5, #1]
        b = rhs.b;
    662e:	70aa      	strb	r2, [r5, #2]
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	9303      	str	r3, [sp, #12]
	return ret;
    6634:	9903      	ldr	r1, [sp, #12]
    6636:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    663a:	fb03 f101 	mul.w	r1, r3, r1
    663e:	0e09      	lsrs	r1, r1, #24
    6640:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6642:	0658      	lsls	r0, r3, #25
    6644:	d535      	bpl.n	66b2 <noise_mover(LEDStruct&)+0x1da>
        offset = (uint8_t)255 - offset;
    6646:	43db      	mvns	r3, r3
    6648:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    664a:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    664e:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6650:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    6654:	4826      	ldr	r0, [pc, #152]	; (66f0 <noise_mover(LEDStruct&)+0x218>)
    6656:	1112      	asrs	r2, r2, #4
    6658:	0052      	lsls	r2, r2, #1
    665a:	1885      	adds	r5, r0, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    665c:	5c82      	ldrb	r2, [r0, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    665e:	7868      	ldrb	r0, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6660:	fb10 f303 	smulbb	r3, r0, r3
    6664:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6668:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    666a:	060a      	lsls	r2, r1, #24
    666c:	bf48      	it	mi
    666e:	425b      	negmi	r3, r3
    6670:	b25b      	sxtb	r3, r3

    y += 128;
    6672:	3b80      	subs	r3, #128	; 0x80

	leds.noise_dist += beatsin8(10, 1, 4);
    6674:	f8b4 2764 	ldrh.w	r2, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6678:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.noise_fade);
	uint8_t locn = inoise8(leds.noise_scale, leds.noise_dist + leds.noise_yscale) % 255;          
	uint8_t pixlen = map(locn, 0, 255, 0, leds.strip_range);     
	leds.led_data[pixlen] = ColorFromPalette(leds.current_palette, pixlen, 255, LINEARBLEND);   

	leds.noise_dist += beatsin8(10, 1, 4);
    667c:	f3c3 1381 	ubfx	r3, r3, #6, #2
    6680:	3301      	adds	r3, #1
    6682:	4413      	add	r3, r2
    6684:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764

	if (!leds.use_full_range) { strip_sync(leds); }
    6688:	b989      	cbnz	r1, 66ae <noise_mover(LEDStruct&)+0x1d6>
    668a:	4620      	mov	r0, r4
    668c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    6690:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6692:	781a      	ldrb	r2, [r3, #0]
    6694:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    6698:	785a      	ldrb	r2, [r3, #1]
    669a:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    669e:	789a      	ldrb	r2, [r3, #2]
    66a0:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    66a4:	3303      	adds	r3, #3
    66a6:	4299      	cmp	r1, r3
    66a8:	f1a0 0003 	sub.w	r0, r0, #3
    66ac:	d1f1      	bne.n	6692 <noise_mover(LEDStruct&)+0x1ba>
}
    66ae:	b005      	add	sp, #20
    66b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    66b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    66b6:	f003 030f 	and.w	r3, r3, #15
    66ba:	e7cb      	b.n	6654 <noise_mover(LEDStruct&)+0x17c>
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    66bc:	fb03 f305 	mul.w	r3, r3, r5
    66c0:	fb82 2503 	smull	r2, r5, r2, r3
    66c4:	441d      	add	r5, r3
    66c6:	17db      	asrs	r3, r3, #31
    66c8:	ebc3 15e5 	rsb	r5, r3, r5, asr #7
    66cc:	e799      	b.n	6602 <noise_mover(LEDStruct&)+0x12a>
	leds.mode_type			= NOISE;
	leds.use_palette		= 1;
	leds.delay_time			= 5;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    66ce:	2596      	movs	r5, #150	; 0x96
    66d0:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    66d4:	e76a      	b.n	65ac <noise_mover(LEDStruct&)+0xd4>
}


void noise_mover(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }
	if (keyboard_update) { noise_update(leds); }
    66d6:	4620      	mov	r0, r4
    66d8:	f7ff fdc0 	bl	625c <noise_update(LEDStruct&)>
    66dc:	e773      	b.n	65c6 <noise_mover(LEDStruct&)+0xee>
    66de:	bf00      	nop
    66e0:	1fff8784 	.word	0x1fff8784
    66e4:	1fff9605 	.word	0x1fff9605
    66e8:	80808081 	.word	0x80808081
    66ec:	1fffa8f8 	.word	0x1fffa8f8
    66f0:	0000ff10 	.word	0x0000ff10

000066f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>:
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    66f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66f8:	4607      	mov	r7, r0
    66fa:	b087      	sub	sp, #28
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    66fc:	f8b0 033c 	ldrh.w	r0, [r0, #828]	; 0x33c
{ 0x000208, 0x00030E, 0x000514, 0x00061A, 0x000820, 0x000927, 0x000B2D, 0x000C33,
  0x000E39, 0x001040, 0x001450, 0x001860, 0x001C70, 0x002080, 0x1040BF, 0x2060FF };

// Add one layer of waves into the led array
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    6700:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
    6704:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    6708:	9102      	str	r1, [sp, #8]
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    670a:	2800      	cmp	r0, #0
    670c:	d06e      	beq.n	67ec <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0xf8>
    670e:	085b      	lsrs	r3, r3, #1
    6710:	f103 0a14 	add.w	sl, r3, #20
    6714:	f10a 0301 	add.w	r3, sl, #1
    6718:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 67f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x100>
    671c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 67f8 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x104>
    6720:	9303      	str	r3, [sp, #12]
    6722:	4614      	mov	r4, r2
    6724:	2600      	movs	r6, #0
        waveangle += 250;
    6726:	35fa      	adds	r5, #250	; 0xfa
    6728:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    672a:	046a      	lsls	r2, r5, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    672c:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6730:	d503      	bpl.n	673a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x46>
    6732:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6736:	3307      	adds	r3, #7
    6738:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    673a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    673c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6740:	f819 0001 	ldrb.w	r0, [r9, r1]
    6744:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
    6748:	fb00 3302 	mla	r3, r0, r2, r3
    674c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    674e:	0428      	lsls	r0, r5, #16
    6750:	bf48      	it	mi
    6752:	425b      	negmi	r3, r3
    6754:	b21b      	sxth	r3, r3
        uint16_t s16 = sin16(waveangle) + 32768;
        uint16_t cs = scale16(s16, wavescale_half) + wavescale_half;
        ci += cs;
    6756:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    675a:	9a03      	ldr	r2, [sp, #12]
    675c:	b29b      	uxth	r3, r3
    675e:	fb02 f303 	mul.w	r3, r2, r3
    6762:	eb0a 4313 	add.w	r3, sl, r3, lsr #16
    6766:	441c      	add	r4, r3
    6768:	b2a4      	uxth	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    676a:	0461      	lsls	r1, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    676c:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6770:	d503      	bpl.n	677a <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x86>
    6772:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6776:	3307      	adds	r3, #7
    6778:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    677a:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    677c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6780:	f819 0001 	ldrb.w	r0, [r9, r1]
    6784:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
    6788:	9902      	ldr	r1, [sp, #8]
    678a:	fb00 3302 	mla	r3, r0, r2, r3
    678e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6790:	0422      	lsls	r2, r4, #16
    6792:	bf48      	it	mi
    6794:	425b      	negmi	r3, r3
    6796:	b21b      	sxth	r3, r3
    6798:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    679c:	b29b      	uxth	r3, r3
    679e:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
    67a2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    67a6:	2301      	movs	r3, #1
    67a8:	9300      	str	r3, [sp, #0]
    67aa:	a805      	add	r0, sp, #20
    67ac:	465b      	mov	r3, fp
    67ae:	f3c2 4207 	ubfx	r2, r2, #16, #8
    67b2:	f004 f965 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    67b6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    67ba:	18b9      	adds	r1, r7, r2
    67bc:	5cbb      	ldrb	r3, [r7, r2]
    67be:	f89d 0014 	ldrb.w	r0, [sp, #20]
    67c2:	fa83 f350 	uqadd8	r3, r3, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    67c6:	54bb      	strb	r3, [r7, r2]
    67c8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    67cc:	784a      	ldrb	r2, [r1, #1]
    67ce:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    67d2:	704a      	strb	r2, [r1, #1]
    67d4:	788b      	ldrb	r3, [r1, #2]
    67d6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    67da:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    67de:	708b      	strb	r3, [r1, #2]
void pacifica_one_layer(LEDStruct& leds, CRGBPalette16& p, uint16_t cistart, uint16_t wavescale, uint8_t bri, uint16_t ioff)
{
    uint16_t ci = cistart;
    uint16_t waveangle = ioff;
    uint16_t wavescale_half = (wavescale / 2) + 20;
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    67e0:	3601      	adds	r6, #1
    67e2:	f8b7 333c 	ldrh.w	r3, [r7, #828]	; 0x33c
    67e6:	b2b6      	uxth	r6, r6
    67e8:	42b3      	cmp	r3, r6
    67ea:	d89c      	bhi.n	6726 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)+0x32>
        uint16_t sindex16 = sin16(ci) + 32768;
        uint8_t sindex8 = scale16(sindex16, 240);
        CRGB c = ColorFromPalette(p, sindex8, bri, LINEARBLEND);
        leds.led_data[i] += c;
    }
}
    67ec:	b007      	add	sp, #28
    67ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67f2:	bf00      	nop
    67f4:	00010518 	.word	0x00010518
    67f8:	0000fd88 	.word	0x0000fd88

000067fc <pacifica_add_whitecaps(LEDStruct&)>:

// Add extra 'white' to areas where the four layers of light have lined up brightly
void pacifica_add_whitecaps(LEDStruct& leds)
{
    67fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6800:	4c58      	ldr	r4, [pc, #352]	; (6964 <pacifica_add_whitecaps(LEDStruct&)+0x168>)
    6802:	b083      	sub	sp, #12
    6804:	6823      	ldr	r3, [r4, #0]
    6806:	9301      	str	r3, [sp, #4]
	return ret;
    6808:	9901      	ldr	r1, [sp, #4]
    680a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    680e:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
    6812:	f3c1 3147 	ubfx	r1, r1, #13, #8
    6816:	b2cb      	uxtb	r3, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6818:	065e      	lsls	r6, r3, #25
    681a:	f140 809e 	bpl.w	695a <pacifica_add_whitecaps(LEDStruct&)+0x15e>
        offset = (uint8_t)255 - offset;
    681e:	43db      	mvns	r3, r3
    6820:	b2da      	uxtb	r2, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6822:	f002 030f 	and.w	r3, r2, #15
    if( theta & 0x40) secoffset++;
    6826:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    6828:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    682c:	f8df a138 	ldr.w	sl, [pc, #312]	; 6968 <pacifica_add_whitecaps(LEDStruct&)+0x16c>
    6830:	1112      	asrs	r2, r2, #4
    6832:	0052      	lsls	r2, r2, #1
    6834:	eb0a 0502 	add.w	r5, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    6838:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    683c:	786d      	ldrb	r5, [r5, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    683e:	fb15 f303 	smulbb	r3, r5, r3
    6842:	eb02 1323 	add.w	r3, r2, r3, asr #4
    6846:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    6848:	060d      	lsls	r5, r1, #24
    684a:	bf48      	it	mi
    684c:	425b      	negmi	r3, r3
    684e:	b25b      	sxtb	r3, r3

    y += 128;
    6850:	3b80      	subs	r3, #128	; 0x80
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    6852:	b2db      	uxtb	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6854:	6822      	ldr	r2, [r4, #0]
    6856:	9200      	str	r2, [sp, #0]
    6858:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    685c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
	return ret;
    6860:	9c00      	ldr	r4, [sp, #0]
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6862:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    6866:	ea4f 2929 	mov.w	r9, r9, asr #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    686a:	f44f 22f5 	mov.w	r2, #501760	; 0x7a800
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    686e:	f109 0937 	add.w	r9, r9, #55	; 0x37
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    6872:	fb02 f404 	mul.w	r4, r2, r4
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    6876:	fa5f f989 	uxtb.w	r9, r9
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    687a:	0e24      	lsrs	r4, r4, #24
    687c:	2b00      	cmp	r3, #0
    687e:	d069      	beq.n	6954 <pacifica_add_whitecaps(LEDStruct&)+0x158>
    6880:	ebc3 0bc3 	rsb	fp, r3, r3, lsl #3
    6884:	44a3      	add	fp, r4
    6886:	43e7      	mvns	r7, r4
    6888:	fa5f fb8b 	uxtb.w	fp, fp
    688c:	f100 0801 	add.w	r8, r0, #1
    6890:	b2ff      	uxtb	r7, r7
    6892:	e058      	b.n	6946 <pacifica_add_whitecaps(LEDStruct&)+0x14a>
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    6894:	f007 030f 	and.w	r3, r7, #15
    if( theta & 0x40) secoffset++;
    6898:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    689a:	f007 023f 	and.w	r2, r7, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    689e:	1112      	asrs	r2, r2, #4
    68a0:	0052      	lsls	r2, r2, #1
    68a2:	eb0a 0102 	add.w	r1, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    68a6:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    68aa:	7849      	ldrb	r1, [r1, #1]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    68ac:	f818 ec01 	ldrb.w	lr, [r8, #-1]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    68b0:	7886      	ldrb	r6, [r0, #2]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    68b2:	fb11 f303 	smulbb	r3, r1, r3
    68b6:	eb02 1323 	add.w	r3, r2, r3, asr #4
    68ba:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    68bc:	0622      	lsls	r2, r4, #24
    68be:	7842      	ldrb	r2, [r0, #1]
    68c0:	bf48      	it	mi
    68c2:	425b      	negmi	r3, r3
    68c4:	fa0f fc8e 	sxth.w	ip, lr
    68c8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    68cc:	b25b      	sxtb	r3, r3
    68ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4

    y += 128;
    68d2:	3b80      	subs	r3, #128	; 0x80
    68d4:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    68d8:	440a      	add	r2, r1
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
    68da:	b2db      	uxtb	r3, r3
    68dc:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    68e0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
    68e4:	1212      	asrs	r2, r2, #8
    68e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    68ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    68ee:	4465      	add	r5, ip
    68f0:	eb02 2525 	add.w	r5, r2, r5, asr #8
    68f4:	440e      	add	r6, r1
    68f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    68fa:	eb09 2323 	add.w	r3, r9, r3, asr #8
    68fe:	eb05 2626 	add.w	r6, r5, r6, asr #8
    6902:	b2db      	uxtb	r3, r3
    6904:	b2f6      	uxtb	r6, r6
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    6906:	1af2      	subs	r2, r6, r3
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    6908:	3407      	adds	r4, #7
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
            uint8_t overage = l - threshold;
    690a:	b2d2      	uxtb	r2, r2

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    690c:	42b3      	cmp	r3, r6
    690e:	4611      	mov	r1, r2
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
        uint8_t threshold = scale8(sin8(wave), 20) + basethreshold;
        wave += 7;
    6910:	b2e4      	uxtb	r4, r4
        uint8_t l = leds.led_data[i].getAverageLight();
        if (l > threshold) {
    6912:	d210      	bcs.n	6936 <pacifica_add_whitecaps(LEDStruct&)+0x13a>
    6914:	fa81 f152 	uqadd8	r1, r1, r2
    6918:	460d      	mov	r5, r1
    691a:	fa85 f551 	uqadd8	r5, r5, r1
    691e:	fa8e fe52 	uqadd8	lr, lr, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    6922:	f808 ec01 	strb.w	lr, [r8, #-1]
    6926:	7842      	ldrb	r2, [r0, #1]
    6928:	fa82 f251 	uqadd8	r2, r2, r1
    692c:	7883      	ldrb	r3, [r0, #2]
        g = qadd8( g, rhs.g);
    692e:	7042      	strb	r2, [r0, #1]
    6930:	fa83 f355 	uqadd8	r3, r3, r5
        b = qadd8( b, rhs.b);
    6934:	7083      	strb	r3, [r0, #2]
    6936:	3f07      	subs	r7, #7
void pacifica_add_whitecaps(LEDStruct& leds)
{
    uint8_t basethreshold = beatsin8(9, 55, 65);
    uint8_t wave = beat8(7);

    for (uint16_t i = 0; i < leds.strip_range; i++) {
    6938:	455c      	cmp	r4, fp
    693a:	b2ff      	uxtb	r7, r7
    693c:	f100 0003 	add.w	r0, r0, #3
    6940:	f108 0803 	add.w	r8, r8, #3
    6944:	d006      	beq.n	6954 <pacifica_add_whitecaps(LEDStruct&)+0x158>
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    6946:	0661      	lsls	r1, r4, #25
    6948:	d4a4      	bmi.n	6894 <pacifica_add_whitecaps(LEDStruct&)+0x98>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    694a:	f004 023f 	and.w	r2, r4, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    694e:	f004 030f 	and.w	r3, r4, #15
    6952:	e7a4      	b.n	689e <pacifica_add_whitecaps(LEDStruct&)+0xa2>
            uint8_t overage = l - threshold;
            uint8_t overage2 = qadd8(overage, overage);
            leds.led_data[i] += CRGB(overage, overage2, qadd8(overage2, overage2));
        }
    }
}
    6954:	b003      	add	sp, #12
    6956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    695a:	f003 023f 	and.w	r2, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    695e:	f003 030f 	and.w	r3, r3, #15
    6962:	e763      	b.n	682c <pacifica_add_whitecaps(LEDStruct&)+0x30>
    6964:	1fffa8f8 	.word	0x1fffa8f8
    6968:	0000ff10 	.word	0x0000ff10

0000696c <pacifica_deepen_colors(LEDStruct&)>:

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    696c:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    6970:	b383      	cbz	r3, 69d4 <pacifica_deepen_colors(LEDStruct&)+0x68>
    }
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    6972:	b5f0      	push	{r4, r5, r6, r7, lr}
    6974:	1e5c      	subs	r4, r3, #1
    6976:	b2a4      	uxth	r4, r4
    6978:	3401      	adds	r4, #1
    697a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    697e:	4602      	mov	r2, r0
    6980:	4404      	add	r4, r0
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    6982:	2702      	movs	r7, #2
    6984:	3002      	adds	r0, #2
        if( rhs.g > g) g = rhs.g;
    6986:	2605      	movs	r6, #5
        if( rhs.b > b) b = rhs.b;
    6988:	2507      	movs	r5, #7
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    698a:	7853      	ldrb	r3, [r2, #1]
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    698c:	7891      	ldrb	r1, [r2, #2]
    698e:	eb03 1e43 	add.w	lr, r3, r3, lsl #5
    6992:	eb03 034e 	add.w	r3, r3, lr, lsl #1
    6996:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
    699a:	ebc3 0383 	rsb	r3, r3, r3, lsl #2
    699e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
    69a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    69a6:	11c9      	asrs	r1, r1, #7
        leds.led_data[i].green = scale8(leds.led_data[i].green, 200);
    69a8:	7053      	strb	r3, [r2, #1]

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
        leds.led_data[i].blue = scale8(leds.led_data[i].blue, 145);
    69aa:	7091      	strb	r1, [r2, #2]
    }

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
    69ac:	f810 1c02 	ldrb.w	r1, [r0, #-2]
    69b0:	2901      	cmp	r1, #1
    69b2:	bf9c      	itt	ls
    69b4:	f800 7c02 	strbls.w	r7, [r0, #-2]
    69b8:	7853      	ldrbls	r3, [r2, #1]
        if( rhs.g > g) g = rhs.g;
    69ba:	2b04      	cmp	r3, #4
        if( rhs.b > b) b = rhs.b;
    69bc:	7893      	ldrb	r3, [r2, #2]

    /// "or" operator brings each channel up to the higher of the two values
    inline CRGB& operator|= (const CRGB& rhs )
    {
        if( rhs.r > r) r = rhs.r;
        if( rhs.g > g) g = rhs.g;
    69be:	bf98      	it	ls
    69c0:	7056      	strbls	r6, [r2, #1]
        if( rhs.b > b) b = rhs.b;
    69c2:	2b06      	cmp	r3, #6
    69c4:	bf98      	it	ls
    69c6:	7095      	strbls	r5, [r2, #2]
    69c8:	3203      	adds	r2, #3
}

// Deepen the blues and greens
void pacifica_deepen_colors(LEDStruct& leds)
{
    for (uint16_t i = 0; i < leds.strip_range; i++) {
    69ca:	42a2      	cmp	r2, r4
    69cc:	f100 0003 	add.w	r0, r0, #3
    69d0:	d1db      	bne.n	698a <pacifica_deepen_colors(LEDStruct&)+0x1e>
    69d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69d4:	4770      	bx	lr
    69d6:	bf00      	nop

000069d8 <pacifica_update(LEDStruct&)>:
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    switch (update_var) {
    69d8:	4b0a      	ldr	r3, [pc, #40]	; (6a04 <pacifica_update(LEDStruct&)+0x2c>)
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    69da:	4a0b      	ldr	r2, [pc, #44]	; (6a08 <pacifica_update(LEDStruct&)+0x30>)
    switch (update_var) {
    69dc:	781b      	ldrb	r3, [r3, #0]
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
}

void pacifica_update(LEDStruct& leds) {
    keyboard_update = 0;
    69de:	2100      	movs	r1, #0
    69e0:	7011      	strb	r1, [r2, #0]
    switch (update_var) {
    69e2:	b963      	cbnz	r3, 69fe <pacifica_update(LEDStruct&)+0x26>
    case 0:															//a
        leds.use_full_range = (bool)update_arg;
    69e4:	4b09      	ldr	r3, [pc, #36]	; (6a0c <pacifica_update(LEDStruct&)+0x34>)
    69e6:	881b      	ldrh	r3, [r3, #0]
    69e8:	428b      	cmp	r3, r1
    69ea:	bf14      	ite	ne
    69ec:	2301      	movne	r3, #1
    69ee:	460b      	moveq	r3, r1
    69f0:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
        if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    69f4:	bf14      	ite	ne
    69f6:	2396      	movne	r3, #150	; 0x96
        else                     { leds.strip_range = ONE_SIDE; }
    69f8:	234b      	moveq	r3, #75	; 0x4b
    69fa:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
        break;
    default:	break;
    }
    LEDDebug(leds);
    69fe:	f7fb bbf1 	b.w	21e4 <LEDDebug(LEDStruct&)>
    6a02:	bf00      	nop
    6a04:	1fff9e5c 	.word	0x1fff9e5c
    6a08:	1fff9605 	.word	0x1fff9605
    6a0c:	1fff9e54 	.word	0x1fff9e54

00006a10 <pride(LEDStruct&)>:
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    6a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    6a14:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    6a18:	b08b      	sub	sp, #44	; 0x2c
    6a1a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { pride_init(leds); }
    6a1c:	bb0b      	cbnz	r3, 6a62 <pride(LEDStruct&)+0x52>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6a1e:	49b4      	ldr	r1, [pc, #720]	; (6cf0 <pride(LEDStruct&)+0x2e0>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= PRIDE;
	leds.use_palette		= 0;
    6a20:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6a24:	880b      	ldrh	r3, [r1, #0]
    6a26:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6a2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6a2e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6a32:	3319      	adds	r3, #25
    6a34:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6a36:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6a3a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6a3e:	2601      	movs	r6, #1
	leds.mode_type			= PRIDE;
    6a40:	2512      	movs	r5, #18
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6a42:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6a44:	800b      	strh	r3, [r1, #0]

	leds.use_full_range		= ufr;
    6a46:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6a4a:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
	leds.mode_type			= PRIDE;
    6a4e:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6a52:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6a56:	2a00      	cmp	r2, #0
    6a58:	f000 81d3 	beq.w	6e02 <pride(LEDStruct&)+0x3f2>
    6a5c:	2396      	movs	r3, #150	; 0x96
    6a5e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    6a62:	4ba4      	ldr	r3, [pc, #656]	; (6cf4 <pride(LEDStruct&)+0x2e4>)
    6a64:	781b      	ldrb	r3, [r3, #0]
    6a66:	2b00      	cmp	r3, #0
    6a68:	f040 81d3 	bne.w	6e12 <pride(LEDStruct&)+0x402>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6a6c:	49a2      	ldr	r1, [pc, #648]	; (6cf8 <pride(LEDStruct&)+0x2e8>)
    6a6e:	680b      	ldr	r3, [r1, #0]
    6a70:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    6a72:	9809      	ldr	r0, [sp, #36]	; 0x24
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6a74:	f645 7328 	movw	r3, #24360	; 0x5f28
    6a78:	fb03 f000 	mul.w	r0, r3, r0
    6a7c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a7e:	0442      	lsls	r2, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6a80:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6a84:	d503      	bpl.n	6a8e <pride(LEDStruct&)+0x7e>
    6a86:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6a8a:	3307      	adds	r3, #7
    6a8c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6a8e:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    6a90:	4d9a      	ldr	r5, [pc, #616]	; (6cfc <pride(LEDStruct&)+0x2ec>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6a92:	4e9b      	ldr	r6, [pc, #620]	; (6d00 <pride(LEDStruct&)+0x2f0>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6a94:	f815 e002 	ldrb.w	lr, [r5, r2]
    6a98:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
    6a9c:	f3c3 0246 	ubfx	r2, r3, #1, #7
    6aa0:	fb0e 7302 	mla	r3, lr, r2, r7
    6aa4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6aa6:	0407      	lsls	r7, r0, #16
    6aa8:	bf48      	it	mi
    6aaa:	425b      	negmi	r3, r3
    6aac:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6aae:	680a      	ldr	r2, [r1, #0]
    6ab0:	9208      	str	r2, [sp, #32]

	leds.sat8 = beatsin88(87, 220, 250);
    6ab2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6ab6:	b29b      	uxth	r3, r3
    6ab8:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
	return ret;
    6abc:	9f08      	ldr	r7, [sp, #32]
    6abe:	4b91      	ldr	r3, [pc, #580]	; (6d04 <pride(LEDStruct&)+0x2f4>)
    6ac0:	0c12      	lsrs	r2, r2, #16
    6ac2:	fb03 f707 	mul.w	r7, r3, r7
    6ac6:	0c3f      	lsrs	r7, r7, #16
    6ac8:	32dc      	adds	r2, #220	; 0xdc
    6aca:	b2d2      	uxtb	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6acc:	0478      	lsls	r0, r7, #17
    6ace:	f884 2325 	strb.w	r2, [r4, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6ad2:	f3c7 03ca 	ubfx	r3, r7, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ad6:	d503      	bpl.n	6ae0 <pride(LEDStruct&)+0xd0>
    6ad8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6adc:	3307      	adds	r3, #7
    6ade:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6ae0:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6ae4:	f3c3 0046 	ubfx	r0, r3, #1, #7
    6ae8:	f815 c00e 	ldrb.w	ip, [r5, lr]
    6aec:	f836 301e 	ldrh.w	r3, [r6, lr, lsl #1]
    6af0:	fb0c 3300 	mla	r3, ip, r0, r3
    6af4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6af6:	0438      	lsls	r0, r7, #16
    6af8:	bf48      	it	mi
    6afa:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6afc:	6808      	ldr	r0, [r1, #0]
    6afe:	9007      	str	r0, [sp, #28]
    6b00:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    6b02:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6b06:	b29b      	uxth	r3, r3
	return ret;
    6b08:	9f07      	ldr	r7, [sp, #28]
    6b0a:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    6b0e:	f64d 6308 	movw	r3, #56840	; 0xde08
    6b12:	fb03 fe07 	mul.w	lr, r3, r7
    6b16:	0c00      	lsrs	r0, r0, #16
    6b18:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    6b1c:	3060      	adds	r0, #96	; 0x60
    6b1e:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6b20:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    6b24:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6b28:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6b2c:	d003      	beq.n	6b36 <pride(LEDStruct&)+0x126>
    6b2e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6b32:	3307      	adds	r3, #7
    6b34:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6b36:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6b3a:	f3c3 0746 	ubfx	r7, r3, #1, #7
    6b3e:	f815 800c 	ldrb.w	r8, [r5, ip]
    6b42:	f836 301c 	ldrh.w	r3, [r6, ip, lsl #1]
    6b46:	fb08 3307 	mla	r3, r8, r7, r3

    if( theta & 0x8000 ) y = -y;
    6b4a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6b4e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6b50:	bf18      	it	ne
    6b52:	425b      	negne	r3, r3
    6b54:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b56:	680f      	ldr	r7, [r1, #0]
    6b58:	9706      	str	r7, [sp, #24]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6b5a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6b5e:	b29b      	uxth	r3, r3
    6b60:	ebc3 1e03 	rsb	lr, r3, r3, lsl #4
	return ret;
    6b64:	9f06      	ldr	r7, [sp, #24]
    6b66:	eb03 2e0e 	add.w	lr, r3, lr, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6b6a:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    6b6e:	fb03 fc07 	mul.w	ip, r3, r7
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6b72:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6b76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6b7a:	f50e 5ec8 	add.w	lr, lr, #6400	; 0x1900
    6b7e:	fa1f f78e 	uxth.w	r7, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6b82:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    6b86:	f8a4 7328 	strh.w	r7, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6b8a:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6b8e:	d003      	beq.n	6b98 <pride(LEDStruct&)+0x188>
    6b90:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6b94:	3307      	adds	r3, #7
    6b96:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6b98:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6b9c:	f3c3 0e46 	ubfx	lr, r3, #1, #7
    6ba0:	f815 9008 	ldrb.w	r9, [r5, r8]
    6ba4:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    6ba8:	fb09 330e 	mla	r3, r9, lr, r3
    6bac:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6bae:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    6bb2:	bf18      	it	ne
    6bb4:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bb6:	f8d1 e000 	ldr.w	lr, [r1]
    6bba:	f8cd e014 	str.w	lr, [sp, #20]
    6bbe:	b21b      	sxth	r3, r3
    6bc0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6bc4:	b29b      	uxth	r3, r3
    6bc6:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    6bca:	f8dd 8014 	ldr.w	r8, [sp, #20]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    6bce:	f8b4 9320 	ldrh.w	r9, [r4, #800]	; 0x320
    6bd2:	f8a4 932a 	strh.w	r9, [r4, #810]	; 0x32a
    6bd6:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6bda:	f647 3398 	movw	r3, #31640	; 0x7b98
    6bde:	fb03 f808 	mul.w	r8, r3, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6be2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6be6:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6bea:	f10e 0e17 	add.w	lr, lr, #23
    6bee:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6bf2:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (keyboard_update) { pride_update(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    6bf6:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6bfa:	f3c8 03ca 	ubfx	r3, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6bfe:	d003      	beq.n	6c08 <pride(LEDStruct&)+0x1f8>
    6c00:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c04:	3307      	adds	r3, #7
    6c06:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c08:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c0c:	f3c3 0c46 	ubfx	ip, r3, #1, #7
    6c10:	f815 b00a 	ldrb.w	fp, [r5, sl]
    6c14:	f836 301a 	ldrh.w	r3, [r6, sl, lsl #1]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6c18:	f8b4 a31e 	ldrh.w	sl, [r4, #798]	; 0x31e
    6c1c:	fb0b 330c 	mla	r3, fp, ip, r3
    6c20:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6c22:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    6c26:	bf18      	it	ne
    6c28:	425b      	negne	r3, r3
    6c2a:	fa0f fc83 	sxth.w	ip, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c2e:	680b      	ldr	r3, [r1, #0]
    6c30:	9303      	str	r3, [sp, #12]
	return ret;
    6c32:	9b03      	ldr	r3, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c34:	6809      	ldr	r1, [r1, #0]
    6c36:	9104      	str	r1, [sp, #16]
    6c38:	f5ac 4100 	sub.w	r1, ip, #32768	; 0x8000
    6c3c:	b289      	uxth	r1, r1
    6c3e:	f640 3cb8 	movw	ip, #3000	; 0xbb8
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    6c42:	fa1f f883 	uxth.w	r8, r3
	return ret;
    6c46:	f8dd b010 	ldr.w	fp, [sp, #16]
    6c4a:	f8a4 832e 	strh.w	r8, [r4, #814]	; 0x32e
    6c4e:	fb0c f301 	mul.w	r3, ip, r1
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6c52:	492d      	ldr	r1, [pc, #180]	; (6d08 <pride(LEDStruct&)+0x2f8>)
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6c54:	f8b4 c31c 	ldrh.w	ip, [r4, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    6c58:	f8a4 831e 	strh.w	r8, [r4, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6c5c:	ebca 0a08 	rsb	sl, sl, r8
    6c60:	fa1f fa8a 	uxth.w	sl, sl
    6c64:	fb01 fb0b 	mul.w	fp, r1, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6c68:	0c1b      	lsrs	r3, r3, #16
    6c6a:	3301      	adds	r3, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6c6c:	fb1a cc0e 	smlabb	ip, sl, lr, ip
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6c70:	ea4f 4e1b 	mov.w	lr, fp, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6c74:	b299      	uxth	r1, r3
    6c76:	fa1f fc8c 	uxth.w	ip, ip
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c7a:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    6c7e:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6c82:	f8a4 a330 	strh.w	sl, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6c86:	f8a4 c31c 	strh.w	ip, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6c8a:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6c8e:	d003      	beq.n	6c98 <pride(LEDStruct&)+0x288>
    6c90:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6c94:	3307      	adds	r3, #7
    6c96:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6c98:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6c9c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6ca0:	f815 b008 	ldrb.w	fp, [r5, r8]
    6ca4:	f836 8018 	ldrh.w	r8, [r6, r8, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    6ca8:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    6cac:	fb0b 8303 	mla	r3, fp, r3, r8

    if( theta & 0x8000 ) y = -y;
    6cb0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6cb4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6cb6:	bf16      	itet	ne
    6cb8:	f1c3 0800 	rsbne	r8, r3, #0
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6cbc:	fa0f f883 	sxtheq.w	r8, r3

    if( theta & 0x8000 ) y = -y;
    6cc0:	fa0f f888 	sxthne.w	r8, r8

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6cc4:	f5a8 4800 	sub.w	r8, r8, #32768	; 0x8000
    6cc8:	fa1f f888 	uxth.w	r8, r8
    6ccc:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    6cd0:	0c1b      	lsrs	r3, r3, #16
    6cd2:	3305      	adds	r3, #5
    6cd4:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6cd6:	f8b4 e33c 	ldrh.w	lr, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    6cda:	fb0a 9303 	mla	r3, sl, r3, r9
    6cde:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6ce2:	f1be 0f00 	cmp.w	lr, #0
    6ce6:	d074      	beq.n	6dd2 <pride(LEDStruct&)+0x3c2>
    6ce8:	46be      	mov	lr, r7
    6cea:	460b      	mov	r3, r1
    6cec:	2700      	movs	r7, #0
    6cee:	e019      	b.n	6d24 <pride(LEDStruct&)+0x314>
    6cf0:	1fff8784 	.word	0x1fff8784
    6cf4:	1fff9605 	.word	0x1fff9605
    6cf8:	1fffa8f8 	.word	0x1fffa8f8
    6cfc:	00010518 	.word	0x00010518
    6d00:	0000fd88 	.word	0x0000fd88
    6d04:	000174f8 	.word	0x000174f8
    6d08:	0001b580 	.word	0x0001b580
    6d0c:	f8b4 932a 	ldrh.w	r9, [r4, #810]	; 0x32a
    6d10:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    6d14:	f8b4 c332 	ldrh.w	ip, [r4, #818]	; 0x332
    6d18:	f8b4 e328 	ldrh.w	lr, [r4, #808]	; 0x328
    6d1c:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    6d20:	f894 2325 	ldrb.w	r2, [r4, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6d24:	44f4      	add	ip, lr
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6d26:	444b      	add	r3, r9
    6d28:	b29b      	uxth	r3, r3
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6d2a:	fa1f fc8c 	uxth.w	ip, ip
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    6d2e:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d32:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    6d36:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
		leds.hue8 = leds.hue16 / 256;
    6d3a:	f884 e324 	strb.w	lr, [r4, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    6d3e:	f8a4 c332 	strh.w	ip, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6d42:	f3cc 03ca 	ubfx	r3, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6d46:	d003      	beq.n	6d50 <pride(LEDStruct&)+0x340>
    6d48:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6d4c:	3307      	adds	r3, #7
    6d4e:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6d50:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6d54:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6d58:	f815 9008 	ldrb.w	r9, [r5, r8]
    6d5c:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6d60:	f88d e008 	strb.w	lr, [sp, #8]
    6d64:	fb09 3301 	mla	r3, r9, r1, r3

    if( theta & 0x8000 ) y = -y;
    6d68:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6d6c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6d6e:	bf18      	it	ne
    6d70:	425b      	negne	r3, r3
    6d72:	b21b      	sxth	r3, r3
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6d74:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6d78:	b29b      	uxth	r3, r3

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6d7a:	fb03 f103 	mul.w	r1, r3, r3
    6d7e:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6d80:	fb01 fc00 	mul.w	ip, r1, r0
    6d84:	43c0      	mvns	r0, r0
    6d86:	eb00 4c1c 	add.w	ip, r0, ip, lsr #16
    6d8a:	fa5f fc8c 	uxtb.w	ip, ip
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    6d8e:	f8a4 3336 	strh.w	r3, [r4, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    6d92:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    6d96:	f884 c326 	strb.w	ip, [r4, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6d9a:	a901      	add	r1, sp, #4
    6d9c:	a802      	add	r0, sp, #8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6d9e:	f88d c00a 	strb.w	ip, [sp, #10]
    6da2:	f88d 2009 	strb.w	r2, [sp, #9]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6da6:	f004 f869 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6daa:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6dae:	3b01      	subs	r3, #1
    6db0:	1bdb      	subs	r3, r3, r7
    6db2:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6db4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    6db8:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    6dbc:	4420      	add	r0, r4
    6dbe:	2240      	movs	r2, #64	; 0x40
    6dc0:	a901      	add	r1, sp, #4
    6dc2:	f003 fdff 	bl	a9c4 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    6dc6:	3701      	adds	r7, #1
    6dc8:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    6dcc:	b2bf      	uxth	r7, r7
    6dce:	42bb      	cmp	r3, r7
    6dd0:	d89c      	bhi.n	6d0c <pride(LEDStruct&)+0x2fc>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    6dd2:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    6dd6:	b98b      	cbnz	r3, 6dfc <pride(LEDStruct&)+0x3ec>
    6dd8:	4623      	mov	r3, r4
    6dda:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    6dde:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6de0:	7811      	ldrb	r1, [r2, #0]
    6de2:	f883 11bf 	strb.w	r1, [r3, #447]	; 0x1bf
        g = rhs.g;
    6de6:	7851      	ldrb	r1, [r2, #1]
    6de8:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
        b = rhs.b;
    6dec:	7891      	ldrb	r1, [r2, #2]
    6dee:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1
    6df2:	3203      	adds	r2, #3
    6df4:	4290      	cmp	r0, r2
    6df6:	f1a3 0303 	sub.w	r3, r3, #3
    6dfa:	d1f1      	bne.n	6de0 <pride(LEDStruct&)+0x3d0>
}
    6dfc:	b00b      	add	sp, #44	; 0x2c
    6dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    6e02:	234b      	movs	r3, #75	; 0x4b
    6e04:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
	if (!leds.mode_initialized) { pride_init(leds); }
	if (keyboard_update) { pride_update(leds); }
    6e08:	4b04      	ldr	r3, [pc, #16]	; (6e1c <pride(LEDStruct&)+0x40c>)
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	2b00      	cmp	r3, #0
    6e0e:	f43f ae2d 	beq.w	6a6c <pride(LEDStruct&)+0x5c>
    6e12:	4620      	mov	r0, r4
    6e14:	f7ff fde0 	bl	69d8 <pacifica_update(LEDStruct&)>
    6e18:	e628      	b.n	6a6c <pride(LEDStruct&)+0x5c>
    6e1a:	bf00      	nop
    6e1c:	1fff9605 	.word	0x1fff9605

00006e20 <colorwave(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6e24:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
    6e28:	b08b      	sub	sp, #44	; 0x2c
    6e2a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    6e2c:	bb0b      	cbnz	r3, 6e72 <colorwave(LEDStruct&)+0x52>
    6e2e:	48d0      	ldr	r0, [pc, #832]	; (7170 <colorwave(LEDStruct&)+0x350>)
    6e30:	8803      	ldrh	r3, [r0, #0]
    6e32:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6e36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6e3a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    6e3e:	3319      	adds	r3, #25
    6e40:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6e42:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6e46:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6e48:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette		= 1;
	leds.mode_type			= COLORWAVE;
    6e4c:	2611      	movs	r6, #17
	leds.delay_time			= 15;
    6e4e:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6e50:	8003      	strh	r3, [r0, #0]
	
	leds.use_full_range		= ufr;
    6e52:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    6e56:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    6e5a:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.mode_type			= COLORWAVE;
    6e5e:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
    6e62:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    6e66:	2a00      	cmp	r2, #0
    6e68:	f000 81b8 	beq.w	71dc <colorwave(LEDStruct&)+0x3bc>
    6e6c:	2396      	movs	r3, #150	; 0x96
    6e6e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    6e72:	4bc0      	ldr	r3, [pc, #768]	; (7174 <colorwave(LEDStruct&)+0x354>)
    6e74:	781b      	ldrb	r3, [r3, #0]
    6e76:	2b00      	cmp	r3, #0
    6e78:	f040 81b8 	bne.w	71ec <colorwave(LEDStruct&)+0x3cc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e7c:	4abe      	ldr	r2, [pc, #760]	; (7178 <colorwave(LEDStruct&)+0x358>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6e7e:	4bbf      	ldr	r3, [pc, #764]	; (717c <colorwave(LEDStruct&)+0x35c>)
    6e80:	6811      	ldr	r1, [r2, #0]
    6e82:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    6e84:	9809      	ldr	r0, [sp, #36]	; 0x24
    6e86:	fb03 f000 	mul.w	r0, r3, r0
    6e8a:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6e8c:	0445      	lsls	r5, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6e8e:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6e92:	d503      	bpl.n	6e9c <colorwave(LEDStruct&)+0x7c>
    6e94:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6e98:	3307      	adds	r3, #7
    6e9a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6e9c:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    6e9e:	4fb8      	ldr	r7, [pc, #736]	; (7180 <colorwave(LEDStruct&)+0x360>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6ea0:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 7184 <colorwave(LEDStruct&)+0x364>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6ea4:	5c7e      	ldrb	r6, [r7, r1]
    6ea6:	f838 5011 	ldrh.w	r5, [r8, r1, lsl #1]
    6eaa:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6eae:	fb06 5301 	mla	r3, r6, r1, r5

    if( theta & 0x8000 ) y = -y;
    6eb2:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6eb4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6eb6:	bf48      	it	mi
    6eb8:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6eba:	6811      	ldr	r1, [r2, #0]
    6ebc:	9108      	str	r1, [sp, #32]
    6ebe:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    6ec0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6ec4:	b29b      	uxth	r3, r3
	return ret;
    6ec6:	9d08      	ldr	r5, [sp, #32]
    6ec8:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    6ecc:	f64d 6308 	movw	r3, #56840	; 0xde08
    6ed0:	fb03 f505 	mul.w	r5, r3, r5
    6ed4:	0c00      	lsrs	r0, r0, #16
    6ed6:	0c2d      	lsrs	r5, r5, #16
    6ed8:	3060      	adds	r0, #96	; 0x60
    6eda:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6edc:	0469      	lsls	r1, r5, #17
    6ede:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6ee2:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6ee6:	d503      	bpl.n	6ef0 <colorwave(LEDStruct&)+0xd0>
    6ee8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6eec:	3307      	adds	r3, #7
    6eee:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6ef0:	0a1e      	lsrs	r6, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6ef2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    6ef6:	f817 e006 	ldrb.w	lr, [r7, r6]
    6efa:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
    6efe:	fb0e 3301 	mla	r3, lr, r1, r3

    if( theta & 0x8000 ) y = -y;
    6f02:	042e      	lsls	r6, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6f04:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6f06:	bf48      	it	mi
    6f08:	425b      	negmi	r3, r3
    6f0a:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f0c:	6811      	ldr	r1, [r2, #0]
    6f0e:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6f10:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6f14:	b29b      	uxth	r3, r3
    6f16:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    6f1a:	9e07      	ldr	r6, [sp, #28]
    6f1c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6f20:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    6f24:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6f28:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6f2a:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6f2c:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    6f30:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f32:	0475      	lsls	r5, r6, #17
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    6f34:	f8a4 1328 	strh.w	r1, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6f38:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f3c:	d503      	bpl.n	6f46 <colorwave(LEDStruct&)+0x126>
    6f3e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6f42:	3307      	adds	r3, #7
    6f44:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6f46:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6f4a:	f3c3 0546 	ubfx	r5, r3, #1, #7
    6f4e:	f817 c00e 	ldrb.w	ip, [r7, lr]
    6f52:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    6f56:	fb0c 3305 	mla	r3, ip, r5, r3
    6f5a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    6f5c:	0435      	lsls	r5, r6, #16
    6f5e:	bf48      	it	mi
    6f60:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f62:	6815      	ldr	r5, [r2, #0]
    6f64:	9506      	str	r5, [sp, #24]
    6f66:	b21b      	sxth	r3, r3
    6f68:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    6f6c:	b29b      	uxth	r3, r3
    6f6e:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    6f72:	9d06      	ldr	r5, [sp, #24]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    6f74:	f8b4 c320 	ldrh.w	ip, [r4, #800]	; 0x320
    6f78:	f8a4 c32a 	strh.w	ip, [r4, #810]	; 0x32a
    6f7c:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6f80:	f647 3398 	movw	r3, #31640	; 0x7b98
    6f84:	fb03 f505 	mul.w	r5, r3, r5
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6f88:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6f8c:	0c2d      	lsrs	r5, r5, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6f8e:	f10e 0e17 	add.w	lr, lr, #23
    6f92:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    6f96:	046e      	lsls	r6, r5, #17
	if (keyboard_update) { colorwave_update(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    6f98:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    6f9c:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    6fa0:	d503      	bpl.n	6faa <colorwave(LEDStruct&)+0x18a>
    6fa2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    6fa6:	3307      	adds	r3, #7
    6fa8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    6faa:	ea4f 2913 	mov.w	r9, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    6fae:	f3c3 0346 	ubfx	r3, r3, #1, #7
    6fb2:	f817 a009 	ldrb.w	sl, [r7, r9]
    6fb6:	f838 6019 	ldrh.w	r6, [r8, r9, lsl #1]
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    6fba:	f8b4 b31c 	ldrh.w	fp, [r4, #796]	; 0x31c
    6fbe:	fb0a 6603 	mla	r6, sl, r3, r6
    6fc2:	b2b6      	uxth	r6, r6

    if( theta & 0x8000 ) y = -y;
    6fc4:	042b      	lsls	r3, r5, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fc6:	6813      	ldr	r3, [r2, #0]
    6fc8:	9304      	str	r3, [sp, #16]
    6fca:	bf48      	it	mi
    6fcc:	4276      	negmi	r6, r6
	return ret;
    6fce:	f8dd 9010 	ldr.w	r9, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fd2:	6813      	ldr	r3, [r2, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    6fd4:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    6fd8:	9305      	str	r3, [sp, #20]
    6fda:	b236      	sxth	r6, r6
    6fdc:	f5a6 4200 	sub.w	r2, r6, #32768	; 0x8000
    6fe0:	f240 43b1 	movw	r3, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    6fe4:	fa1f f689 	uxth.w	r6, r9
    6fe8:	b292      	uxth	r2, r2
	return ret;
    6fea:	f8dd a014 	ldr.w	sl, [sp, #20]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    6fee:	f8df 9198 	ldr.w	r9, [pc, #408]	; 7188 <colorwave(LEDStruct&)+0x368>
    6ff2:	f8a4 632e 	strh.w	r6, [r4, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    6ff6:	fb03 f202 	mul.w	r2, r3, r2
	leds.deltams = leds.ms - leds.sLastMillis;
    6ffa:	1b73      	subs	r3, r6, r5
    6ffc:	b29d      	uxth	r5, r3
    6ffe:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7000:	fb09 f90a 	mul.w	r9, r9, sl
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7004:	f502 7396 	add.w	r3, r2, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7008:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    700c:	fb15 be0e 	smlabb	lr, r5, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7010:	b29a      	uxth	r2, r3
    7012:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7016:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    701a:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    701e:	f8a4 5330 	strh.w	r5, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
    7022:	f8a4 631e 	strh.w	r6, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    7026:	f8a4 e31c 	strh.w	lr, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    702a:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    702e:	d003      	beq.n	7038 <colorwave(LEDStruct&)+0x218>
    7030:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7034:	3307      	adds	r3, #7
    7036:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7038:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    703c:	f3c3 0646 	ubfx	r6, r3, #1, #7
    7040:	f817 b00a 	ldrb.w	fp, [r7, sl]
    7044:	f838 301a 	ldrh.w	r3, [r8, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    7048:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    704c:	fb0b 3306 	mla	r3, fp, r6, r3
    7050:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7052:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    7056:	bf18      	it	ne
    7058:	425b      	negne	r3, r3
    705a:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    705c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7060:	b29b      	uxth	r3, r3
    7062:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7066:	0c1b      	lsrs	r3, r3, #16
    7068:	3305      	adds	r3, #5
    706a:	b29b      	uxth	r3, r3
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    706c:	f8b4 633c 	ldrh.w	r6, [r4, #828]	; 0x33c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    7070:	fb05 c303 	mla	r3, r5, r3, ip
    7074:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    7078:	2e00      	cmp	r6, #0
    707a:	f000 8098 	beq.w	71ae <colorwave(LEDStruct&)+0x38e>
    707e:	4613      	mov	r3, r2
    7080:	f504 7ae4 	add.w	sl, r4, #456	; 0x1c8
    7084:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    7086:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    708a:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    708c:	4463      	add	r3, ip
    708e:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    7090:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    7094:	448e      	add	lr, r1
    7096:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    709a:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    709e:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    70a2:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    70a4:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    70a8:	bf08      	it	eq
    70aa:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    70ac:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    70b0:	f884 b324 	strb.w	fp, [r4, #804]	; 0x324
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    70b4:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    70b8:	f8a4 c334 	strh.w	ip, [r4, #820]	; 0x334
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    70bc:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    70c0:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    70c4:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    70c8:	d003      	beq.n	70d2 <colorwave(LEDStruct&)+0x2b2>
    70ca:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    70ce:	3107      	adds	r1, #7
    70d0:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    70d2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    70d6:	f3c1 0346 	ubfx	r3, r1, #1, #7
    70da:	f817 b00c 	ldrb.w	fp, [r7, ip]
    70de:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    70e2:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    70e6:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    70ea:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    70ec:	bf18      	it	ne
    70ee:	4249      	negne	r1, r1
    70f0:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    70f2:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    70f6:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    70f8:	fb01 fe01 	mul.w	lr, r1, r1
    70fc:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    7100:	fb0e f300 	mul.w	r3, lr, r0
    7104:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    7108:	43c0      	mvns	r0, r0
    710a:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    710e:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    7112:	b2db      	uxtb	r3, r3
    7114:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    7118:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    711c:	f8a4 e338 	strh.w	lr, [r4, #824]	; 0x338
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    7120:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    7124:	4651      	mov	r1, sl
    7126:	f8cd 9000 	str.w	r9, [sp]
    712a:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    712c:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    7130:	f003 fca6 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    7134:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    7138:	3b01      	subs	r3, #1
    713a:	1b9b      	subs	r3, r3, r6
    713c:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    713e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    7142:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    7146:	4420      	add	r0, r4
    7148:	2280      	movs	r2, #128	; 0x80
    714a:	a903      	add	r1, sp, #12
    714c:	3d01      	subs	r5, #1
    714e:	f003 fc39 	bl	a9c4 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    7152:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    7156:	d019      	beq.n	718c <colorwave(LEDStruct&)+0x36c>
    7158:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    715c:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    7160:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    7164:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    7168:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    716c:	e78e      	b.n	708c <colorwave(LEDStruct&)+0x26c>
    716e:	bf00      	nop
    7170:	1fff8784 	.word	0x1fff8784
    7174:	1fff9605 	.word	0x1fff9605
    7178:	1fffa8f8 	.word	0x1fffa8f8
    717c:	000174f8 	.word	0x000174f8
    7180:	00010518 	.word	0x00010518
    7184:	0000fd88 	.word	0x0000fd88
    7188:	0001b580 	.word	0x0001b580
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    718c:	3601      	adds	r6, #1
    718e:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    7192:	b2b6      	uxth	r6, r6
    7194:	42b3      	cmp	r3, r6
    7196:	d90a      	bls.n	71ae <colorwave(LEDStruct&)+0x38e>
    7198:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    719c:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    71a0:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    71a4:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    71a8:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    71ac:	e76d      	b.n	708a <colorwave(LEDStruct&)+0x26a>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    71ae:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    71b2:	b983      	cbnz	r3, 71d6 <colorwave(LEDStruct&)+0x3b6>
    71b4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    71b8:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    71ba:	781a      	ldrb	r2, [r3, #0]
    71bc:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    71c0:	785a      	ldrb	r2, [r3, #1]
    71c2:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    71c6:	789a      	ldrb	r2, [r3, #2]
    71c8:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    71cc:	3303      	adds	r3, #3
    71ce:	4299      	cmp	r1, r3
    71d0:	f1a4 0403 	sub.w	r4, r4, #3
    71d4:	d1f1      	bne.n	71ba <colorwave(LEDStruct&)+0x39a>
}
    71d6:	b00b      	add	sp, #44	; 0x2c
    71d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.mode_type			= COLORWAVE;
	leds.delay_time			= 15;
	
	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
    71dc:	234b      	movs	r3, #75	; 0x4b
    71de:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	LEDDebug(leds);
}

void colorwave(LEDStruct& leds) {
	if (!leds.mode_initialized) { colorwave_init(leds); }
	if (keyboard_update) { colorwave_update(leds); }
    71e2:	4b04      	ldr	r3, [pc, #16]	; (71f4 <colorwave(LEDStruct&)+0x3d4>)
    71e4:	781b      	ldrb	r3, [r3, #0]
    71e6:	2b00      	cmp	r3, #0
    71e8:	f43f ae48 	beq.w	6e7c <colorwave(LEDStruct&)+0x5c>
    71ec:	4620      	mov	r0, r4
    71ee:	f7ff fbf3 	bl	69d8 <pacifica_update(LEDStruct&)>
    71f2:	e643      	b.n	6e7c <colorwave(LEDStruct&)+0x5c>
    71f4:	1fff9605 	.word	0x1fff9605

000071f8 <pacifica(LEDStruct&)>:
}


void pacifica(LEDStruct& leds)
{
    71f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!leds.mode_initialized) { pacifica_init(leds); }
    71fc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    LEDDebug(leds);
}


void pacifica(LEDStruct& leds)
{
    7200:	b095      	sub	sp, #84	; 0x54
    7202:	4604      	mov	r4, r0
    if (!leds.mode_initialized) { pacifica_init(leds); }
    7204:	bb0b      	cbnz	r3, 724a <pacifica(LEDStruct&)+0x52>
    7206:	49b4      	ldr	r1, [pc, #720]	; (74d8 <pacifica(LEDStruct&)+0x2e0>)
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    leds.use_palette        = 0;
    7208:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    720c:	880b      	ldrh	r3, [r1, #0]
    720e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    7212:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7216:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    721a:	3319      	adds	r3, #25
    721c:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    721e:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    7222:	f3c2 12c0 	ubfx	r2, r2, #7, #1
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    7226:	2601      	movs	r6, #1
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    7228:	2513      	movs	r5, #19
    leds.delay_time         = 15;
    722a:	200f      	movs	r0, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    722c:	800b      	strh	r3, [r1, #0]

    leds.use_full_range     = ufr;
    722e:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
        leds.led_data[i] |= CRGB(2, 5, 7);
    }
}

void pacifica_init(LEDStruct& leds, bool ufr = random8(2)) {
    leds.mode_initialized   = 1;
    7232:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette        = 0;
    leds.mode_type          = PACIFICA;
    7236:	f884 522d 	strb.w	r5, [r4, #557]	; 0x22d
    leds.delay_time         = 15;
    723a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    723e:	2a00      	cmp	r2, #0
    7240:	f000 82d5 	beq.w	77ee <pacifica(LEDStruct&)+0x5f6>
    7244:	2396      	movs	r3, #150	; 0x96
    7246:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    724a:	4ba4      	ldr	r3, [pc, #656]	; (74dc <pacifica(LEDStruct&)+0x2e4>)
    724c:	781b      	ldrb	r3, [r3, #0]
    724e:	2b00      	cmp	r3, #0
    7250:	f040 82d5 	bne.w	77fe <pacifica(LEDStruct&)+0x606>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7254:	4da2      	ldr	r5, [pc, #648]	; (74e0 <pacifica(LEDStruct&)+0x2e8>)
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    7256:	4ba3      	ldr	r3, [pc, #652]	; (74e4 <pacifica(LEDStruct&)+0x2ec>)
    7258:	682a      	ldr	r2, [r5, #0]
    725a:	9203      	str	r2, [sp, #12]
	return ret;
    725c:	9a03      	ldr	r2, [sp, #12]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    725e:	6829      	ldr	r1, [r5, #0]
    7260:	9113      	str	r1, [sp, #76]	; 0x4c
	return ret;
    7262:	9913      	ldr	r1, [sp, #76]	; 0x4c
    7264:	6818      	ldr	r0, [r3, #0]
    sLastms = ms;
    7266:	601a      	str	r2, [r3, #0]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7268:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    726c:	fb03 f101 	mul.w	r1, r3, r1
    7270:	0c09      	lsrs	r1, r1, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7272:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7274:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    // Increment the four "color index start" counters, one for each wave layer.
    // Each is incremented at a different speed, and the speeds vary over time.
    static uint16_t sCIStart1, sCIStart2, sCIStart3, sCIStart4;
    static uint32_t sLastms = 0;
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    7278:	eba2 0000 	sub.w	r0, r2, r0
    if( theta & 0x4000 ) offset = 2047 - offset;
    727c:	d503      	bpl.n	7286 <pacifica(LEDStruct&)+0x8e>
    727e:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7282:	3307      	adds	r3, #7
    7284:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7286:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    7288:	4e97      	ldr	r6, [pc, #604]	; (74e8 <pacifica(LEDStruct&)+0x2f0>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    728a:	4f98      	ldr	r7, [pc, #608]	; (74ec <pacifica(LEDStruct&)+0x2f4>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    728c:	f816 c002 	ldrb.w	ip, [r6, r2]
    7290:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
    7294:	f3c3 0246 	ubfx	r2, r3, #1, #7
    7298:	fb0c e302 	mla	r3, ip, r2, lr
    729c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    729e:	040a      	lsls	r2, r1, #16
    72a0:	bf48      	it	mi
    72a2:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72a4:	682a      	ldr	r2, [r5, #0]
    72a6:	9212      	str	r2, [sp, #72]	; 0x48
    72a8:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    72aa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    72ae:	b29b      	uxth	r3, r3
	return ret;
    72b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    72b2:	f04f 0e5b 	mov.w	lr, #91	; 0x5b
    72b6:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    72ba:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    72be:	fb03 f302 	mul.w	r3, r3, r2
    72c2:	0c1b      	lsrs	r3, r3, #16
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    72c4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    72c8:	f10e 0eb3 	add.w	lr, lr, #179	; 0xb3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    72cc:	0459      	lsls	r1, r3, #17
    72ce:	fa1f fe8e 	uxth.w	lr, lr
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    72d2:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    72d6:	d503      	bpl.n	72e0 <pacifica(LEDStruct&)+0xe8>
    72d8:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    72dc:	3207      	adds	r2, #7
    72de:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    72e0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    72e4:	f3c2 0146 	ubfx	r1, r2, #1, #7
    72e8:	f816 800c 	ldrb.w	r8, [r6, ip]
    72ec:	f837 201c 	ldrh.w	r2, [r7, ip, lsl #1]
    72f0:	fb08 2201 	mla	r2, r8, r1, r2
    72f4:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    72f6:	0419      	lsls	r1, r3, #16
    72f8:	bf48      	it	mi
    72fa:	4252      	negmi	r2, r2
    72fc:	b212      	sxth	r2, r2
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    72fe:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    7302:	235b      	movs	r3, #91	; 0x5b
    7304:	b292      	uxth	r2, r2
    7306:	fb03 f202 	mul.w	r2, r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    730a:	682b      	ldr	r3, [r5, #0]
    730c:	9311      	str	r3, [sp, #68]	; 0x44
    730e:	0c12      	lsrs	r2, r2, #16
	return ret;
    7310:	9b11      	ldr	r3, [sp, #68]	; 0x44
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    7312:	4977      	ldr	r1, [pc, #476]	; (74f0 <pacifica(LEDStruct&)+0x2f8>)
    7314:	32b3      	adds	r2, #179	; 0xb3
    7316:	b292      	uxth	r2, r2
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    7318:	fb00 fe0e 	mul.w	lr, r0, lr
    731c:	fb01 f103 	mul.w	r1, r1, r3
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    7320:	fb00 f002 	mul.w	r0, r0, r2
    7324:	0c09      	lsrs	r1, r1, #16
    uint32_t ms = GET_MILLIS();
    uint32_t deltams = ms - sLastms;
    sLastms = ms;
    uint16_t speedfactor1 = beatsin16(3, 179, 269);
    uint16_t speedfactor2 = beatsin16(4, 179, 269);
    uint32_t deltams1 = (deltams * speedfactor1) / 256;
    7326:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    732a:	0a00      	lsrs	r0, r0, #8
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    732c:	eb0e 0300 	add.w	r3, lr, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7330:	044a      	lsls	r2, r1, #17
    7332:	ea4f 0c53 	mov.w	ip, r3, lsr #1
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7336:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    733a:	d503      	bpl.n	7344 <pacifica(LEDStruct&)+0x14c>
    733c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7340:	3307      	adds	r3, #7
    7342:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7344:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7348:	f3c3 0246 	ubfx	r2, r3, #1, #7
    734c:	f816 9008 	ldrb.w	r9, [r6, r8]
    7350:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    7354:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 7500 <pacifica(LEDStruct&)+0x308>
    7358:	fb09 3302 	mla	r3, r9, r2, r3

    if( theta & 0x8000 ) y = -y;
    735c:	0409      	lsls	r1, r1, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    735e:	682a      	ldr	r2, [r5, #0]
    7360:	9210      	str	r2, [sp, #64]	; 0x40
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7362:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7364:	bf48      	it	mi
    7366:	425b      	negmi	r3, r3
    7368:	4a62      	ldr	r2, [pc, #392]	; (74f4 <pacifica(LEDStruct&)+0x2fc>)
	return ret;
    736a:	9910      	ldr	r1, [sp, #64]	; 0x40
    736c:	f8ba 8000 	ldrh.w	r8, [sl]
    7370:	b21b      	sxth	r3, r3
    7372:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7376:	fb02 f101 	mul.w	r1, r2, r1
    737a:	f3c3 3381 	ubfx	r3, r3, #14, #2
    737e:	0c09      	lsrs	r1, r1, #16
    7380:	330a      	adds	r3, #10
    7382:	fb0e 8303 	mla	r3, lr, r3, r8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7386:	044a      	lsls	r2, r1, #17
    7388:	f8aa 3000 	strh.w	r3, [sl]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    738c:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    7390:	d503      	bpl.n	739a <pacifica(LEDStruct&)+0x1a2>
    7392:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7396:	3307      	adds	r3, #7
    7398:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    739a:	ea4f 2813 	mov.w	r8, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    739e:	f3c3 0246 	ubfx	r2, r3, #1, #7
    73a2:	f816 9008 	ldrb.w	r9, [r6, r8]
    73a6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    73aa:	fb09 3302 	mla	r3, r9, r2, r3

    if( theta & 0x8000 ) y = -y;
    73ae:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    73b0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    73b2:	bf4c      	ite	mi
    73b4:	425a      	negmi	r2, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    73b6:	b21a      	sxthpl	r2, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73b8:	682b      	ldr	r3, [r5, #0]
    73ba:	930f      	str	r3, [sp, #60]	; 0x3c

    if( theta & 0x8000 ) y = -y;
    73bc:	bf48      	it	mi
    73be:	b212      	sxthmi	r2, r2
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    73c0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 7504 <pacifica(LEDStruct&)+0x30c>
	return ret;
    73c4:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    73c8:	494b      	ldr	r1, [pc, #300]	; (74f8 <pacifica(LEDStruct&)+0x300>)
    73ca:	f8b9 3000 	ldrh.w	r3, [r9]
    73ce:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    73d2:	f3c2 3281 	ubfx	r2, r2, #14, #2
    73d6:	fb01 f108 	mul.w	r1, r1, r8
    73da:	3208      	adds	r2, #8
    73dc:	0c09      	lsrs	r1, r1, #16
    73de:	fb0c 3312 	mls	r3, ip, r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    73e2:	044a      	lsls	r2, r1, #17
    73e4:	f8a9 3000 	strh.w	r3, [r9]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    73e8:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    73ec:	d503      	bpl.n	73f6 <pacifica(LEDStruct&)+0x1fe>
    73ee:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    73f2:	3307      	adds	r3, #7
    73f4:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    73f6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    73fa:	f3c3 0246 	ubfx	r2, r3, #1, #7
    73fe:	f816 800c 	ldrb.w	r8, [r6, ip]
    7402:	f837 301c 	ldrh.w	r3, [r7, ip, lsl #1]
    7406:	fb08 3302 	mla	r3, r8, r2, r3

    if( theta & 0x8000 ) y = -y;
    740a:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    740c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    740e:	bf48      	it	mi
    7410:	425b      	negmi	r3, r3
    7412:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7414:	682a      	ldr	r2, [r5, #0]
    7416:	920e      	str	r2, [sp, #56]	; 0x38
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    7418:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    741c:	b29b      	uxth	r3, r3
    741e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 7508 <pacifica(LEDStruct&)+0x310>
	return ret;
    7422:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    7426:	4935      	ldr	r1, [pc, #212]	; (74fc <pacifica(LEDStruct&)+0x304>)
    7428:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    742c:	0c12      	lsrs	r2, r2, #16
    742e:	f8b8 3000 	ldrh.w	r3, [r8]
    7432:	3205      	adds	r2, #5
    7434:	fb01 f10c 	mul.w	r1, r1, ip
    7438:	b292      	uxth	r2, r2
    743a:	0c09      	lsrs	r1, r1, #16
    743c:	fb0e 3312 	mls	r3, lr, r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    7440:	044a      	lsls	r2, r1, #17
    7442:	f8a8 3000 	strh.w	r3, [r8]
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    7446:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    744a:	d503      	bpl.n	7454 <pacifica(LEDStruct&)+0x25c>
    744c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    7450:	3307      	adds	r3, #7
    7452:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7454:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7458:	f3c3 0246 	ubfx	r2, r3, #1, #7
    745c:	f816 c00e 	ldrb.w	ip, [r6, lr]
    7460:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    7464:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 750c <pacifica(LEDStruct&)+0x314>
    7468:	fb0c 3302 	mla	r3, ip, r2, r3
    746c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    746e:	040a      	lsls	r2, r1, #16
    7470:	bf48      	it	mi
    7472:	425b      	negmi	r3, r3
    7474:	b21b      	sxth	r3, r3
    7476:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    747a:	b29b      	uxth	r3, r3
    747c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    7480:	0c12      	lsrs	r2, r2, #16
    7482:	f8bb e000 	ldrh.w	lr, [fp]

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    7486:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    uint32_t deltams2 = (deltams * speedfactor2) / 256;
    uint32_t deltams21 = (deltams1 + deltams2) / 2;
    sCIStart1 += (deltams1 * beatsin88(1011, 10, 13));
    sCIStart2 -= (deltams21 * beatsin88(777, 8, 11));
    sCIStart3 -= (deltams1 * beatsin88(501, 5, 7));
    sCIStart4 -= (deltams2 * beatsin88(257, 4, 6));
    748a:	3204      	adds	r2, #4
    748c:	b292      	uxth	r2, r2
    748e:	fb00 e312 	mls	r3, r0, r2, lr
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    7492:	2202      	movs	r2, #2
    7494:	2006      	movs	r0, #6
    7496:	f8ab 3000 	strh.w	r3, [fp]
    749a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
    749e:	230a      	movs	r3, #10

    // Clear out the LED array to a dim background blue-green
    fill_solid(leds.led_data, leds.strip_range, CRGB(2, 6, 10));
    74a0:	aa0d      	add	r2, sp, #52	; 0x34
    74a2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
    74a6:	4620      	mov	r0, r4
    74a8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    74ac:	f003 f9c6 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    74b0:	682b      	ldr	r3, [r5, #0]
    74b2:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    74b4:	980d      	ldr	r0, [sp, #52]	; 0x34

    // Render each of four layers, with different scales and speeds, that vary over time
    pacifica_one_layer(leds, pacifica_palette_1, sCIStart1, beatsin16(3, 11 * 256, 14 * 256), beatsin8(10, 70, 130), 0 - beat16(301));
    74b6:	f8ba 2000 	ldrh.w	r2, [sl]
    74ba:	f44f 3352 	mov.w	r3, #215040	; 0x34800
    74be:	fb03 f000 	mul.w	r0, r3, r0
    74c2:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    74c4:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    74c6:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    74ca:	d521      	bpl.n	7510 <pacifica(LEDStruct&)+0x318>
    74cc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    74d0:	3307      	adds	r3, #7
    74d2:	b29b      	uxth	r3, r3
    74d4:	e01c      	b.n	7510 <pacifica(LEDStruct&)+0x318>
    74d6:	bf00      	nop
    74d8:	1fff8784 	.word	0x1fff8784
    74dc:	1fff9605 	.word	0x1fff9605
    74e0:	1fffa8f8 	.word	0x1fffa8f8
    74e4:	1fff9544 	.word	0x1fff9544
    74e8:	00010518 	.word	0x00010518
    74ec:	0000fd88 	.word	0x0000fd88
    74f0:	000451c8 	.word	0x000451c8
    74f4:	000351d8 	.word	0x000351d8
    74f8:	000223f8 	.word	0x000223f8
    74fc:	00011918 	.word	0x00011918
    7500:	1fff9548 	.word	0x1fff9548
    7504:	1fff954a 	.word	0x1fff954a
    7508:	1fff9530 	.word	0x1fff9530
    750c:	1fff954e 	.word	0x1fff954e

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    7510:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    7514:	f3c3 0146 	ubfx	r1, r3, #1, #7
    7518:	f816 c00e 	ldrb.w	ip, [r6, lr]
    751c:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    7520:	fb0c 3301 	mla	r3, ip, r1, r3
    7524:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7526:	0401      	lsls	r1, r0, #16
    7528:	bf48      	it	mi
    752a:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    752c:	6829      	ldr	r1, [r5, #0]
    752e:	910c      	str	r1, [sp, #48]	; 0x30
    7530:	b21b      	sxth	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7532:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
	return ret;
    7536:	980c      	ldr	r0, [sp, #48]	; 0x30
    7538:	b29b      	uxth	r3, r3
    753a:	f44f 212f 	mov.w	r1, #716800	; 0xaf000
    753e:	fb01 f000 	mul.w	r0, r1, r0
    7542:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    7546:	eb03 230e 	add.w	r3, r3, lr, lsl #8
    754a:	0e00      	lsrs	r0, r0, #24
    754c:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    754e:	b2c1      	uxtb	r1, r0
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7554:	f011 0f40 	tst.w	r1, #64	; 0x40
    7558:	b29b      	uxth	r3, r3
    755a:	f000 8143 	beq.w	77e4 <pacifica(LEDStruct&)+0x5ec>
        offset = (uint8_t)255 - offset;
    755e:	43c9      	mvns	r1, r1
    7560:	fa5f fe81 	uxtb.w	lr, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7564:	f00e 010f 	and.w	r1, lr, #15
    if( theta & 0x40) secoffset++;
    7568:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    756a:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    756e:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 782c <pacifica(LEDStruct&)+0x634>
    7572:	ea4f 1e2e 	mov.w	lr, lr, asr #4
    7576:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    757a:	eb0a 0c0e 	add.w	ip, sl, lr
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    757e:	f81a e00e 	ldrb.w	lr, [sl, lr]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7582:	f89c c001 	ldrb.w	ip, [ip, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7586:	fb1c f101 	smulbb	r1, ip, r1
    758a:	eb0e 1121 	add.w	r1, lr, r1, asr #4
    if( theta & 0x80 ) y = -y;
    758e:	0600      	lsls	r0, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7590:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    7592:	bf48      	it	mi
    7594:	4249      	negmi	r1, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7596:	6828      	ldr	r0, [r5, #0]
    7598:	9007      	str	r0, [sp, #28]
    759a:	b249      	sxtb	r1, r1

    y += 128;
    759c:	3980      	subs	r1, #128	; 0x80
    759e:	b2c9      	uxtb	r1, r1
	return ret;
    75a0:	f8dd e01c 	ldr.w	lr, [sp, #28]
    75a4:	4898      	ldr	r0, [pc, #608]	; (7808 <pacifica(LEDStruct&)+0x610>)
    75a6:	ebc1 1c01 	rsb	ip, r1, r1, lsl #4
    75aa:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    75ae:	fb00 f00e 	mul.w	r0, r0, lr
    75b2:	1209      	asrs	r1, r1, #8
    75b4:	0c00      	lsrs	r0, r0, #16
    75b6:	3146      	adds	r1, #70	; 0x46
    75b8:	4240      	negs	r0, r0
    75ba:	b2c9      	uxtb	r1, r1
    75bc:	b280      	uxth	r0, r0
    75be:	9100      	str	r1, [sp, #0]
    75c0:	9001      	str	r0, [sp, #4]
    75c2:	4992      	ldr	r1, [pc, #584]	; (780c <pacifica(LEDStruct&)+0x614>)
    75c4:	4620      	mov	r0, r4
    75c6:	f7ff f895 	bl	66f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    75ca:	682b      	ldr	r3, [r5, #0]
    75cc:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    75ce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    pacifica_one_layer(leds, pacifica_palette_2, sCIStart2, beatsin16(4, 6 * 256, 9 * 256), beatsin8(17, 40, 80), beat16(401));
    75d0:	f8b9 2000 	ldrh.w	r2, [r9]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    75d4:	f44f 238c 	mov.w	r3, #286720	; 0x46000
    75d8:	fb03 f000 	mul.w	r0, r3, r0
    75dc:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    75de:	0441      	lsls	r1, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    75e0:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    75e4:	d503      	bpl.n	75ee <pacifica(LEDStruct&)+0x3f6>
    75e6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    75ea:	3307      	adds	r3, #7
    75ec:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    75ee:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    75f2:	f3c3 0146 	ubfx	r1, r3, #1, #7
    75f6:	f816 600e 	ldrb.w	r6, [r6, lr]
    75fa:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    75fe:	fb06 3301 	mla	r3, r6, r1, r3
    7602:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    7604:	0401      	lsls	r1, r0, #16
    7606:	bf48      	it	mi
    7608:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    760a:	6829      	ldr	r1, [r5, #0]
    760c:	910a      	str	r1, [sp, #40]	; 0x28
    760e:	b21b      	sxth	r3, r3
    7610:	497f      	ldr	r1, [pc, #508]	; (7810 <pacifica(LEDStruct&)+0x618>)
	return ret;
    7612:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    7614:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    7618:	b29b      	uxth	r3, r3
    761a:	fb01 f606 	mul.w	r6, r1, r6
    761e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    7622:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    7626:	0e36      	lsrs	r6, r6, #24
    7628:	0c1b      	lsrs	r3, r3, #16
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    762a:	b2f1      	uxtb	r1, r6
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    762c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7630:	064f      	lsls	r7, r1, #25
    7632:	b29b      	uxth	r3, r3
    7634:	f140 80d1 	bpl.w	77da <pacifica(LEDStruct&)+0x5e2>
        offset = (uint8_t)255 - offset;
    7638:	43c8      	mvns	r0, r1
    763a:	b2c0      	uxtb	r0, r0
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    763c:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    7640:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7642:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7646:	1100      	asrs	r0, r0, #4
    7648:	0040      	lsls	r0, r0, #1
    764a:	eb0a 0700 	add.w	r7, sl, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    764e:	f81a 0000 	ldrb.w	r0, [sl, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7652:	787f      	ldrb	r7, [r7, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7654:	fb17 f101 	smulbb	r1, r7, r1
    7658:	eb00 1121 	add.w	r1, r0, r1, asr #4
    765c:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    765e:	0630      	lsls	r0, r6, #24
    7660:	bf48      	it	mi
    7662:	4249      	negmi	r1, r1
    7664:	b249      	sxtb	r1, r1

    y += 128;
    7666:	3980      	subs	r1, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7668:	6828      	ldr	r0, [r5, #0]
    766a:	9006      	str	r0, [sp, #24]
    766c:	b2c9      	uxtb	r1, r1
    766e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    7672:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	return ret;
    7676:	9e06      	ldr	r6, [sp, #24]
    7678:	4866      	ldr	r0, [pc, #408]	; (7814 <pacifica(LEDStruct&)+0x61c>)
    767a:	1209      	asrs	r1, r1, #8
    767c:	3128      	adds	r1, #40	; 0x28
    767e:	fb00 f006 	mul.w	r0, r0, r6
    7682:	b2c9      	uxtb	r1, r1
    7684:	0c00      	lsrs	r0, r0, #16
    7686:	9100      	str	r1, [sp, #0]
    7688:	9001      	str	r0, [sp, #4]
    768a:	4963      	ldr	r1, [pc, #396]	; (7818 <pacifica(LEDStruct&)+0x620>)
    768c:	4620      	mov	r0, r4
    768e:	f7ff f831 	bl	66f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7692:	682b      	ldr	r3, [r5, #0]
    7694:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    7696:	9809      	ldr	r0, [sp, #36]	; 0x24
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart3, 6 * 256, beatsin8(9, 10, 38), 0 - beat16(503));
    7698:	f8b8 2000 	ldrh.w	r2, [r8]
    769c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    76a0:	ebc0 1080 	rsb	r0, r0, r0, lsl #6
    76a4:	f3c0 3047 	ubfx	r0, r0, #13, #8
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    76a8:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    76aa:	0659      	lsls	r1, r3, #25
    76ac:	f140 8090 	bpl.w	77d0 <pacifica(LEDStruct&)+0x5d8>
        offset = (uint8_t)255 - offset;
    76b0:	43db      	mvns	r3, r3
    76b2:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    76b4:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    76b8:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    76ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    76be:	1109      	asrs	r1, r1, #4
    76c0:	0049      	lsls	r1, r1, #1
    76c2:	eb0a 0601 	add.w	r6, sl, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    76c6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    76ca:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    76cc:	fb16 f303 	smulbb	r3, r6, r3
    76d0:	eb01 1323 	add.w	r3, r1, r3, asr #4
    if( theta & 0x80 ) y = -y;
    76d4:	0607      	lsls	r7, r0, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    76d6:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    76d8:	bf48      	it	mi
    76da:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76dc:	6829      	ldr	r1, [r5, #0]
    76de:	9105      	str	r1, [sp, #20]
    76e0:	b25b      	sxtb	r3, r3

    y += 128;
    76e2:	3b80      	subs	r3, #128	; 0x80
	return ret;
    76e4:	9805      	ldr	r0, [sp, #20]
    76e6:	494d      	ldr	r1, [pc, #308]	; (781c <pacifica(LEDStruct&)+0x624>)
    76e8:	b2db      	uxtb	r3, r3
    76ea:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
    76ee:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    76f2:	fb01 f100 	mul.w	r1, r1, r0
    76f6:	121b      	asrs	r3, r3, #8
    76f8:	0c09      	lsrs	r1, r1, #16
    76fa:	330a      	adds	r3, #10
    76fc:	4249      	negs	r1, r1
    76fe:	b2db      	uxtb	r3, r3
    7700:	b289      	uxth	r1, r1
    7702:	9300      	str	r3, [sp, #0]
    7704:	9101      	str	r1, [sp, #4]
    7706:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    770a:	4620      	mov	r0, r4
    770c:	4944      	ldr	r1, [pc, #272]	; (7820 <pacifica(LEDStruct&)+0x628>)
    770e:	f7fe fff1 	bl	66f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7712:	682b      	ldr	r3, [r5, #0]
    7714:	9308      	str	r3, [sp, #32]
	return ret;
    7716:	9808      	ldr	r0, [sp, #32]
    pacifica_one_layer(leds, pacifica_palette_3, sCIStart4, 5 * 256, beatsin8(8, 10, 28), beat16(601));
    7718:	f8bb 2000 	ldrh.w	r2, [fp]
    771c:	f44f 230c 	mov.w	r3, #573440	; 0x8c000
    7720:	fb03 f000 	mul.w	r0, r3, r0
    7724:	0e00      	lsrs	r0, r0, #24
    7726:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7728:	065e      	lsls	r6, r3, #25
    772a:	d54c      	bpl.n	77c6 <pacifica(LEDStruct&)+0x5ce>
        offset = (uint8_t)255 - offset;
    772c:	43db      	mvns	r3, r3
    772e:	b2d9      	uxtb	r1, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7730:	f001 030f 	and.w	r3, r1, #15
    if( theta & 0x40) secoffset++;
    7734:	3301      	adds	r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7736:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    773a:	1109      	asrs	r1, r1, #4
    773c:	0049      	lsls	r1, r1, #1
    773e:	eb0a 0601 	add.w	r6, sl, r1
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7742:	f81a 1001 	ldrb.w	r1, [sl, r1]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7746:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7748:	fb16 f303 	smulbb	r3, r6, r3
    774c:	eb01 1323 	add.w	r3, r1, r3, asr #4
    7750:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    7752:	0601      	lsls	r1, r0, #24
    7754:	bf48      	it	mi
    7756:	425b      	negmi	r3, r3
    7758:	b25b      	sxtb	r3, r3

    y += 128;
    775a:	3b80      	subs	r3, #128	; 0x80
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    775c:	6829      	ldr	r1, [r5, #0]
    775e:	9104      	str	r1, [sp, #16]
    7760:	b2db      	uxtb	r3, r3
    7762:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    7766:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	return ret;
    776a:	9d04      	ldr	r5, [sp, #16]
    776c:	482d      	ldr	r0, [pc, #180]	; (7824 <pacifica(LEDStruct&)+0x62c>)
    776e:	492c      	ldr	r1, [pc, #176]	; (7820 <pacifica(LEDStruct&)+0x628>)
    7770:	121b      	asrs	r3, r3, #8
    7772:	330a      	adds	r3, #10
    7774:	fb00 f005 	mul.w	r0, r0, r5
    7778:	b2db      	uxtb	r3, r3
    777a:	0c00      	lsrs	r0, r0, #16
    777c:	9300      	str	r3, [sp, #0]
    777e:	9001      	str	r0, [sp, #4]
    7780:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    7784:	4620      	mov	r0, r4
    7786:	f7fe ffb5 	bl	66f4 <pacifica_one_layer(LEDStruct&, CRGBPalette16&, unsigned short, unsigned short, unsigned char, unsigned short)>

    // Add brighter 'whitecaps' where the waves lines up more
    pacifica_add_whitecaps(leds);
    778a:	4620      	mov	r0, r4
    778c:	f7ff f836 	bl	67fc <pacifica_add_whitecaps(LEDStruct&)>

    // Deepen the blues and greens a bit
    pacifica_deepen_colors(leds);
    7790:	4620      	mov	r0, r4
    7792:	f7ff f8eb 	bl	696c <pacifica_deepen_colors(LEDStruct&)>

    if (!leds.use_full_range) { strip_sync(leds); }
    7796:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    779a:	b98b      	cbnz	r3, 77c0 <pacifica(LEDStruct&)+0x5c8>
    779c:	4620      	mov	r0, r4
    779e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    77a2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    77a4:	781a      	ldrb	r2, [r3, #0]
    77a6:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    77aa:	785a      	ldrb	r2, [r3, #1]
    77ac:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    77b0:	789a      	ldrb	r2, [r3, #2]
    77b2:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    77b6:	3303      	adds	r3, #3
    77b8:	4299      	cmp	r1, r3
    77ba:	f1a0 0003 	sub.w	r0, r0, #3
    77be:	d1f1      	bne.n	77a4 <pacifica(LEDStruct&)+0x5ac>
}
    77c0:	b015      	add	sp, #84	; 0x54
    77c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    77c6:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    77ca:	f003 030f 	and.w	r3, r3, #15
    77ce:	e7b4      	b.n	773a <pacifica(LEDStruct&)+0x542>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    77d0:	f003 013f 	and.w	r1, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    77d4:	f003 030f 	and.w	r3, r3, #15
    77d8:	e771      	b.n	76be <pacifica(LEDStruct&)+0x4c6>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    77da:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    77de:	f001 010f 	and.w	r1, r1, #15
    77e2:	e730      	b.n	7646 <pacifica(LEDStruct&)+0x44e>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    77e4:	f001 0e3f 	and.w	lr, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    77e8:	f001 010f 	and.w	r1, r1, #15
    77ec:	e6bf      	b.n	756e <pacifica(LEDStruct&)+0x376>
    leds.mode_type          = PACIFICA;
    leds.delay_time         = 15;

    leds.use_full_range     = ufr;
    if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    else                     { leds.strip_range = ONE_SIDE; }
    77ee:	234b      	movs	r3, #75	; 0x4b
    77f0:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c


void pacifica(LEDStruct& leds)
{
    if (!leds.mode_initialized) { pacifica_init(leds); }
    if (keyboard_update) { pacifica_update(leds); }
    77f4:	4b0c      	ldr	r3, [pc, #48]	; (7828 <pacifica(LEDStruct&)+0x630>)
    77f6:	781b      	ldrb	r3, [r3, #0]
    77f8:	2b00      	cmp	r3, #0
    77fa:	f43f ad2b 	beq.w	7254 <pacifica(LEDStruct&)+0x5c>
    77fe:	4620      	mov	r0, r4
    7800:	f7ff f8ea 	bl	69d8 <pacifica_update(LEDStruct&)>
    7804:	e526      	b.n	7254 <pacifica(LEDStruct&)+0x5c>
    7806:	bf00      	nop
    7808:	00014938 	.word	0x00014938
    780c:	1fff9564 	.word	0x1fff9564
    7810:	00129800 	.word	0x00129800
    7814:	0001b698 	.word	0x0001b698
    7818:	1fff9594 	.word	0x1fff9594
    781c:	00022628 	.word	0x00022628
    7820:	1fff95c4 	.word	0x1fff95c4
    7824:	00029158 	.word	0x00029158
    7828:	1fff9605 	.word	0x1fff9605
    782c:	0000ff10 	.word	0x0000ff10

00007830 <bounce_update(LEDStruct&)>:
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    7830:	4b1c      	ldr	r3, [pc, #112]	; (78a4 <bounce_update(LEDStruct&)+0x74>)
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    7832:	4a1d      	ldr	r2, [pc, #116]	; (78a8 <bounce_update(LEDStruct&)+0x78>)
	switch (update_var) {
    7834:	781b      	ldrb	r3, [r3, #0]
	leds.bounce_rainbow		= br;
}


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
    7836:	2100      	movs	r1, #0
    7838:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    783a:	2b05      	cmp	r3, #5
    783c:	d80d      	bhi.n	785a <bounce_update(LEDStruct&)+0x2a>
    783e:	e8df f003 	tbb	[pc, r3]
    7842:	0317      	.short	0x0317
    7844:	0e29231d 	.word	0x0e29231d
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
    7848:	4b18      	ldr	r3, [pc, #96]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    784a:	781b      	ldrb	r3, [r3, #0]
    784c:	2b09      	cmp	r3, #9
    784e:	d927      	bls.n	78a0 <bounce_update(LEDStruct&)+0x70>
    7850:	2b14      	cmp	r3, #20
    7852:	bfa8      	it	ge
    7854:	2314      	movge	r3, #20
    7856:	f880 323a 	strb.w	r3, [r0, #570]	; 0x23a
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    785a:	f7fa bcc3 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
    785e:	4b13      	ldr	r3, [pc, #76]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    7860:	881b      	ldrh	r3, [r3, #0]
    7862:	3300      	adds	r3, #0
    7864:	bf18      	it	ne
    7866:	2301      	movne	r3, #1
    7868:	f880 3277 	strb.w	r3, [r0, #631]	; 0x277
		default:	break;
	}
	LEDDebug(leds);
    786c:	f7fa bcba 	b.w	21e4 <LEDDebug(LEDStruct&)>


void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
    7870:	4b0e      	ldr	r3, [pc, #56]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    7872:	881b      	ldrh	r3, [r3, #0]
    7874:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7878:	f7fa bcb4 	b.w	21e4 <LEDDebug(LEDStruct&)>
void bounce_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
    787c:	4b0b      	ldr	r3, [pc, #44]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    787e:	881b      	ldrh	r3, [r3, #0]
    7880:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7884:	f7fa bcae 	b.w	21e4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
    7888:	4b08      	ldr	r3, [pc, #32]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    788a:	881b      	ldrh	r3, [r3, #0]
    788c:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    7890:	f7fa bca8 	b.w	21e4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//a
		case 1:		leds.bounce_length		 = (uint8_t)update_arg;	leds.bounce_length = constrain(leds.bounce_length, 10, BOUNCE_MAX_LENGTH); break;	//b		
		case 2:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_diff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.bounce_start_beat	= (uint8_t)update_arg;	break;	//e
    7894:	4b05      	ldr	r3, [pc, #20]	; (78ac <bounce_update(LEDStruct&)+0x7c>)
    7896:	881b      	ldrh	r3, [r3, #0]
    7898:	f880 3238 	strb.w	r3, [r0, #568]	; 0x238
		case 5:		leds.bounce_rainbow		= (bool)update_arg;		break;	//f
		default:	break;
	}
	LEDDebug(leds);
    789c:	f7fa bca2 	b.w	21e4 <LEDDebug(LEDStruct&)>
    78a0:	230a      	movs	r3, #10
    78a2:	e7d8      	b.n	7856 <bounce_update(LEDStruct&)+0x26>
    78a4:	1fff9e5c 	.word	0x1fff9e5c
    78a8:	1fff9605 	.word	0x1fff9605
    78ac:	1fff9e54 	.word	0x1fff9e54

000078b0 <bounce(LEDStruct&)>:
}


void bounce(LEDStruct& leds) {
    78b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    78b4:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void bounce(LEDStruct& leds) {
    78b8:	b08b      	sub	sp, #44	; 0x2c
    78ba:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    78bc:	2a00      	cmp	r2, #0
    78be:	f000 813f 	beq.w	7b40 <bounce(LEDStruct&)+0x290>
    78c2:	f200 233b 	addw	r3, r0, #571	; 0x23b
    78c6:	9303      	str	r3, [sp, #12]
    78c8:	f10d 0824 	add.w	r8, sp, #36	; 0x24
	if (keyboard_update) { bounce_update(leds); }
    78cc:	4b97      	ldr	r3, [pc, #604]	; (7b2c <bounce(LEDStruct&)+0x27c>)
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	2b00      	cmp	r3, #0
    78d2:	f040 8126 	bne.w	7b22 <bounce(LEDStruct&)+0x272>

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    78d6:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    78da:	2b00      	cmp	r3, #0
    78dc:	f000 80fc 	beq.w	7ad8 <bounce(LEDStruct&)+0x228>
    78e0:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    78e4:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    78e8:	1c51      	adds	r1, r2, #1
    78ea:	f884 127a 	strb.w	r1, [r4, #634]	; 0x27a
    78ee:	4620      	mov	r0, r4
    78f0:	214b      	movs	r1, #75	; 0x4b
    78f2:	f002 ffb3 	bl	a85c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    78f6:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    78fa:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    78fe:	4f8c      	ldr	r7, [pc, #560]	; (7b30 <bounce(LEDStruct&)+0x280>)
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    7900:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    7904:	9803      	ldr	r0, [sp, #12]
    7906:	2114      	movs	r1, #20
    7908:	f003 f85a 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    790c:	683b      	ldr	r3, [r7, #0]
    790e:	9308      	str	r3, [sp, #32]
	return ret;
    7910:	9808      	ldr	r0, [sp, #32]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    7912:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    7916:	f894 223a 	ldrb.w	r2, [r4, #570]	; 0x23a
    791a:	f44f 738c 	mov.w	r3, #280	; 0x118
    791e:	fb03 f300 	mul.w	r3, r3, r0
    7922:	0209      	lsls	r1, r1, #8
    7924:	fb03 f101 	mul.w	r1, r3, r1
    7928:	0e09      	lsrs	r1, r1, #24
    792a:	b2c8      	uxtb	r0, r1
    792c:	3a01      	subs	r2, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    792e:	0646      	lsls	r6, r0, #25
    7930:	b2d2      	uxtb	r2, r2
    7932:	f140 80cc 	bpl.w	7ace <bounce(LEDStruct&)+0x21e>
        offset = (uint8_t)255 - offset;
    7936:	43c3      	mvns	r3, r0
    7938:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    793a:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    793e:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7944:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 7b38 <bounce(LEDStruct&)+0x288>
    7948:	111b      	asrs	r3, r3, #4
    794a:	005b      	lsls	r3, r3, #1
    794c:	eb0a 0603 	add.w	r6, sl, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7950:	f81a 3003 	ldrb.w	r3, [sl, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7954:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7956:	fb16 f000 	smulbb	r0, r6, r0
    795a:	eb03 1320 	add.w	r3, r3, r0, asr #4
    if( theta & 0x80 ) y = -y;
    795e:	0609      	lsls	r1, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7960:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    7962:	bf48      	it	mi
    7964:	425b      	negmi	r3, r3
    7966:	b25b      	sxtb	r3, r3
    7968:	3b80      	subs	r3, #128	; 0x80
    796a:	b2de      	uxtb	r6, r3
    796c:	fb02 6606 	mla	r6, r2, r6, r6
    7970:	1236      	asrs	r6, r6, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    7972:	2301      	movs	r3, #1
    7974:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    7978:	f884 6239 	strb.w	r6, [r4, #569]	; 0x239
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    797c:	4649      	mov	r1, r9
    797e:	9300      	str	r3, [sp, #0]
    7980:	4640      	mov	r0, r8
    7982:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    7984:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    7988:	f003 f87a 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    798c:	19a3      	adds	r3, r4, r6
    798e:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    7992:	f893 223b 	ldrb.w	r2, [r3, #571]	; 0x23b
    7996:	fa82 f251 	uqadd8	r2, r2, r1
    799a:	f883 223b 	strb.w	r2, [r3, #571]	; 0x23b
    799e:	f893 123c 	ldrb.w	r1, [r3, #572]	; 0x23c
    79a2:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    79a6:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    79aa:	f883 123c 	strb.w	r1, [r3, #572]	; 0x23c
    79ae:	f893 223d 	ldrb.w	r2, [r3, #573]	; 0x23d
    79b2:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    79b6:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    79ba:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    79be:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    79c2:	b1f3      	cbz	r3, 7a02 <bounce(LEDStruct&)+0x152>
    79c4:	2600      	movs	r6, #0
    79c6:	9903      	ldr	r1, [sp, #12]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    79c8:	46b0      	mov	r8, r6
    79ca:	e001      	b.n	79d0 <bounce(LEDStruct&)+0x120>
    79cc:	f201 213b 	addw	r1, r1, #571	; 0x23b
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    79d0:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    79d4:	4433      	add	r3, r6
    79d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    79da:	18e2      	adds	r2, r4, r3
    79dc:	f804 8003 	strb.w	r8, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    79e0:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    79e2:	f882 8001 	strb.w	r8, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    79e6:	f882 8002 	strb.w	r8, [r2, #2]
    79ea:	22ff      	movs	r2, #255	; 0xff
    79ec:	f002 ffea 	bl	a9c4 <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    79f0:	3601      	adds	r6, #1
    79f2:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    79f6:	b2f6      	uxtb	r6, r6
    79f8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    79fc:	42b3      	cmp	r3, r6
    79fe:	4421      	add	r1, r4
    7a00:	d8e4      	bhi.n	79cc <bounce(LEDStruct&)+0x11c>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    7a02:	f8df 8138 	ldr.w	r8, [pc, #312]	; 7b3c <bounce(LEDStruct&)+0x28c>
    7a06:	f8d8 2000 	ldr.w	r2, [r8]
    7a0a:	07d6      	lsls	r6, r2, #31
    7a0c:	d51a      	bpl.n	7a44 <bounce(LEDStruct&)+0x194>
    7a0e:	4e49      	ldr	r6, [pc, #292]	; (7b34 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a10:	683a      	ldr	r2, [r7, #0]
    7a12:	9207      	str	r2, [sp, #28]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7a14:	e896 0003 	ldmia.w	r6, {r0, r1}
	return ret;
    7a18:	9a07      	ldr	r2, [sp, #28]
    7a1a:	1a12      	subs	r2, r2, r0
    7a1c:	428a      	cmp	r2, r1
    7a1e:	d222      	bcs.n	7a66 <bounce(LEDStruct&)+0x1b6>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    7a20:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7a22:	781a      	ldrb	r2, [r3, #0]
    7a24:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    7a28:	785a      	ldrb	r2, [r3, #1]
    7a2a:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    7a2e:	789a      	ldrb	r2, [r3, #2]
    7a30:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    7a34:	3303      	adds	r3, #3
    7a36:	429d      	cmp	r5, r3
    7a38:	f1a4 0403 	sub.w	r4, r4, #3
    7a3c:	d1f1      	bne.n	7a22 <bounce(LEDStruct&)+0x172>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }

	strip_sync(leds);
}
    7a3e:	b00b      	add	sp, #44	; 0x2c
    7a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    7a44:	4640      	mov	r0, r8
    7a46:	f003 ff35 	bl	b8b4 <__cxa_guard_acquire>
    7a4a:	2800      	cmp	r0, #0
    7a4c:	f040 8111 	bne.w	7c72 <bounce(LEDStruct&)+0x3c2>
    7a50:	4e38      	ldr	r6, [pc, #224]	; (7b34 <bounce(LEDStruct&)+0x284>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a52:	683b      	ldr	r3, [r7, #0]
    7a54:	9307      	str	r3, [sp, #28]
    7a56:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    7a5a:	9b07      	ldr	r3, [sp, #28]
    7a5c:	1a5b      	subs	r3, r3, r1
    7a5e:	4293      	cmp	r3, r2
    7a60:	d3de      	bcc.n	7a20 <bounce(LEDStruct&)+0x170>
    7a62:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a66:	683a      	ldr	r2, [r7, #0]
    7a68:	9206      	str	r2, [sp, #24]
	return ret;
    7a6a:	9906      	ldr	r1, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7a6c:	683a      	ldr	r2, [r7, #0]
    7a6e:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    7a70:	9809      	ldr	r0, [sp, #36]	; 0x24
    7a72:	f894 2238 	ldrb.w	r2, [r4, #568]	; 0x238
    7a76:	6031      	str	r1, [r6, #0]
    7a78:	f44f 718c 	mov.w	r1, #280	; 0x118
    7a7c:	fb01 f100 	mul.w	r1, r1, r0
    7a80:	0212      	lsls	r2, r2, #8
    7a82:	fb02 f101 	mul.w	r1, r2, r1
    7a86:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    7a88:	b2ca      	uxtb	r2, r1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    7a8a:	0650      	lsls	r0, r2, #25
    7a8c:	f100 80e9 	bmi.w	7c62 <bounce(LEDStruct&)+0x3b2>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7a90:	f002 063f 	and.w	r6, r2, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7a94:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    7a98:	1132      	asrs	r2, r6, #4
    7a9a:	0052      	lsls	r2, r2, #1
    7a9c:	eb0a 0602 	add.w	r6, sl, r2
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7aa0:	f81a 2002 	ldrb.w	r2, [sl, r2]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    7aa4:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    7aa6:	fb16 f000 	smulbb	r0, r6, r0
    7aaa:	eb02 1220 	add.w	r2, r2, r0, asr #4
    7aae:	b2d2      	uxtb	r2, r2
    if( theta & 0x80 ) y = -y;
    7ab0:	0609      	lsls	r1, r1, #24
    7ab2:	bf48      	it	mi
    7ab4:	4252      	negmi	r2, r2
    7ab6:	b252      	sxtb	r2, r2
    7ab8:	f1c3 034a 	rsb	r3, r3, #74	; 0x4a
    7abc:	3a80      	subs	r2, #128	; 0x80
    7abe:	b2d9      	uxtb	r1, r3
    7ac0:	b2d3      	uxtb	r3, r2
    7ac2:	fb01 3303 	mla	r3, r1, r3, r3
    7ac6:	121b      	asrs	r3, r3, #8
    7ac8:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    7acc:	e7a8      	b.n	7a20 <bounce(LEDStruct&)+0x170>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7ace:	f000 033f 	and.w	r3, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7ad2:	f000 000f 	and.w	r0, r0, #15
    7ad6:	e735      	b.n	7944 <bounce(LEDStruct&)+0x94>
void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }
    7ad8:	f894 727a 	ldrb.w	r7, [r4, #634]	; 0x27a
    7adc:	f894 b279 	ldrb.w	fp, [r4, #633]	; 0x279
    7ae0:	1c7b      	adds	r3, r7, #1
    7ae2:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    7ae6:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    7aea:	4626      	mov	r6, r4
    7aec:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
    7af0:	f04f 0a01 	mov.w	sl, #1
    7af4:	463a      	mov	r2, r7
    7af6:	23ff      	movs	r3, #255	; 0xff
    7af8:	4649      	mov	r1, r9
    7afa:	f8cd a000 	str.w	sl, [sp]
    7afe:	4640      	mov	r0, r8
    7b00:	f002 ffbe 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7b04:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
        g = rhs.g;
    7b08:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
        b = rhs.b;
    7b0c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7b10:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    7b12:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    7b14:	70b3      	strb	r3, [r6, #2]
    7b16:	3603      	adds	r6, #3
        colorIndex += incIndex;
    7b18:	445f      	add	r7, fp
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    7b1a:	42ae      	cmp	r6, r5
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
        colorIndex += incIndex;
    7b1c:	b2ff      	uxtb	r7, r7
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    7b1e:	d1e9      	bne.n	7af4 <bounce(LEDStruct&)+0x244>
    7b20:	e6ed      	b.n	78fe <bounce(LEDStruct&)+0x4e>
}


void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
	if (keyboard_update) { bounce_update(leds); }
    7b22:	4620      	mov	r0, r4
    7b24:	f7ff fe84 	bl	7830 <bounce_update(LEDStruct&)>
    7b28:	e6d5      	b.n	78d6 <bounce(LEDStruct&)+0x26>
    7b2a:	bf00      	nop
    7b2c:	1fff9605 	.word	0x1fff9605
    7b30:	1fffa8f8 	.word	0x1fffa8f8
    7b34:	1fff9538 	.word	0x1fff9538
    7b38:	0000ff10 	.word	0x0000ff10
    7b3c:	1fff9e50 	.word	0x1fff9e50
    7b40:	4951      	ldr	r1, [pc, #324]	; (7c88 <bounce(LEDStruct&)+0x3d8>)
void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
    7b42:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    7b46:	880b      	ldrh	r3, [r1, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    7b48:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    7b4c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    7b50:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7b54:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7b58:	3319      	adds	r3, #25
    7b5a:	b29b      	uxth	r3, r3
    7b5c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    7b60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    7b64:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    7b68:	3519      	adds	r5, #25
    7b6a:	b2ad      	uxth	r5, r5
    7b6c:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    7b70:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    7b74:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    7b78:	3719      	adds	r7, #25
    7b7a:	b2bf      	uxth	r7, r7
    7b7c:	eb07 2947 	add.w	r9, r7, r7, lsl #9
    7b80:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    7b84:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    7b88:	f109 0919 	add.w	r9, r9, #25
    7b8c:	fa1f f989 	uxth.w	r9, r9
    7b90:	eb09 2a49 	add.w	sl, r9, r9, lsl #9
    7b94:	eb09 0a8a 	add.w	sl, r9, sl, lsl #2
    7b98:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    7b9c:	f10a 0a19 	add.w	sl, sl, #25
    7ba0:	fa1f fa8a 	uxth.w	sl, sl
    7ba4:	eb0a 2e4a 	add.w	lr, sl, sl, lsl #9
    7ba8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
    7bac:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    7bb0:	f10e 0e19 	add.w	lr, lr, #25
    7bb4:	fa1f fe8e 	uxth.w	lr, lr
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    7bb8:	f04f 0801 	mov.w	r8, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7bbc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    7bc0:	b2de      	uxtb	r6, r3
    7bc2:	eb0e 2b1e 	add.w	fp, lr, lr, lsr #8
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7bc6:	f204 233b 	addw	r3, r4, #571	; 0x23b
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    7bca:	f04f 0c1b 	mov.w	ip, #27
	leds.delay_time			= 15;
    7bce:	200f      	movs	r0, #15
#ifndef BOUNCE_H
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
    7bd0:	f884 822e 	strb.w	r8, [r4, #558]	; 0x22e
	leds.use_palette		= 1;
    7bd4:	f884 822a 	strb.w	r8, [r4, #554]	; 0x22a
    7bd8:	eb07 2717 	add.w	r7, r7, r7, lsr #8
    7bdc:	eb09 2919 	add.w	r9, r9, r9, lsr #8
    7be0:	eb0a 2a1a 	add.w	sl, sl, sl, lsr #8
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7be4:	f10d 0824 	add.w	r8, sp, #36	; 0x24

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
    7be8:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
    7bec:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7bf0:	4618      	mov	r0, r3
    7bf2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7bf6:	f8a1 e000 	strh.w	lr, [r1]
    7bfa:	4642      	mov	r2, r8
    7bfc:	2114      	movs	r1, #20
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7bfe:	b2ff      	uxtb	r7, r7
    7c00:	fa5f f989 	uxtb.w	r9, r9
    7c04:	fa5f fb8b 	uxtb.w	fp, fp
    7c08:	fa5f fa8a 	uxtb.w	sl, sl
#define BOUNCE_H

void bounce_init(LEDStruct& leds, uint8_t jf = random8(32, 80), bool br = random8(2), uint8_t bl = random8(12, 21), uint8_t bsb = random8(16, 40), uint8_t jb = random8(80, 120), uint8_t rd = random8(1, 16)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= 1;
	leds.mode_type			= BOUNCE;
    7c0c:	f884 c22d 	strb.w	ip, [r4, #557]	; 0x22d
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    7c10:	9303      	str	r3, [sp, #12]
    7c12:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    7c16:	f002 fe11 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    7c1a:	ebcb 1b0b 	rsb	fp, fp, fp, lsl #4
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    7c1e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    7c22:	eb0a 008a 	add.w	r0, sl, sl, lsl #2
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    7c26:	eb09 0149 	add.w	r1, r9, r9, lsl #1
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    7c2a:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
    7c2e:	b2ed      	uxtb	r5, r5
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    7c30:	ea4f 262b 	mov.w	r6, fp, asr #8
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    7c34:	1140      	asrs	r0, r0, #5
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    7c36:	1149      	asrs	r1, r1, #5
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    7c38:	1212      	asrs	r2, r2, #8
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    7c3a:	111b      	asrs	r3, r3, #4
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    7c3c:	3601      	adds	r6, #1
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    7c3e:	3050      	adds	r0, #80	; 0x50
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    7c40:	3110      	adds	r1, #16
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    7c42:	320c      	adds	r2, #12
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    7c44:	09ed      	lsrs	r5, r5, #7
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    7c46:	3320      	adds	r3, #32
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
    7c48:	f884 6279 	strb.w	r6, [r4, #633]	; 0x279
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
	leds.juggle_beat		= jb;
    7c4c:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
    7c50:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
	leds.bounce_length		= bl;
    7c54:	f884 223a 	strb.w	r2, [r4, #570]	; 0x23a
	leds.juggle_beat		= jb;
	leds.rainbow_diff		= rd;
	leds.bounce_start_beat	= bsb;
	leds.bounce_rainbow		= br;
    7c58:	f884 5277 	strb.w	r5, [r4, #631]	; 0x277
	leds.mode_type			= BOUNCE;
	leds.delay_time			= 15;
	leds.use_full_range		= 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade		= jf;
    7c5c:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    7c60:	e634      	b.n	78cc <bounce(LEDStruct&)+0x1c>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    7c62:	43d2      	mvns	r2, r2
    7c64:	b2d2      	uxtb	r2, r2
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    7c66:	f002 000f 	and.w	r0, r2, #15
    if( theta & 0x40) secoffset++;
    7c6a:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    7c6c:	f002 063f 	and.w	r6, r2, #63	; 0x3f
    7c70:	e712      	b.n	7a98 <bounce(LEDStruct&)+0x1e8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c72:	683b      	ldr	r3, [r7, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    7c74:	4e05      	ldr	r6, [pc, #20]	; (7c8c <bounce(LEDStruct&)+0x3dc>)
    7c76:	9305      	str	r3, [sp, #20]
	return ret;
    7c78:	9b05      	ldr	r3, [sp, #20]
    7c7a:	6033      	str	r3, [r6, #0]
    7c7c:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - leds.bounce_length - 1); }
    7c7e:	4640      	mov	r0, r8
    7c80:	6073      	str	r3, [r6, #4]
    7c82:	f003 fe1d 	bl	b8c0 <__cxa_guard_release>
    7c86:	e6e4      	b.n	7a52 <bounce(LEDStruct&)+0x1a2>
    7c88:	1fff8784 	.word	0x1fff8784
    7c8c:	1fff9538 	.word	0x1fff9538

00007c90 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>:
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    7c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	leds.mode_initialized	= 1;
    7c94:	2701      	movs	r7, #1
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    7c96:	261c      	movs	r6, #28
	leds.delay_time			= 15;
    7c98:	250f      	movs	r5, #15


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    7c9a:	2400      	movs	r4, #0
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
    7c9c:	b087      	sub	sp, #28
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
    7c9e:	f880 122a 	strb.w	r1, [r0, #554]	; 0x22a
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
    7ca2:	f880 2769 	strb.w	r2, [r0, #1897]	; 0x769
	leds.number_of_balls	= nob;
    7ca6:	f880 376a 	strb.w	r3, [r0, #1898]	; 0x76a
#ifndef BOUNCING_BALLS_H
#define BOUNCING_BALLS_H


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
    7caa:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
	leds.use_palette		= up;
	leds.use_full_range		= 0;
	leds.mode_type			= BOUNCING_BALLS;
    7cae:	f880 622d 	strb.w	r6, [r0, #557]	; 0x22d
	leds.delay_time			= 15;
    7cb2:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3


void bouncing_balls_init(LEDStruct& leds, bool up = random8(2), uint8_t bf = random8(1,30), uint8_t nob = random8(2, MAX_NUMBER_OF_BALLS + 1)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.use_full_range		= 0;
    7cb6:	f880 41c4 	strb.w	r4, [r0, #452]	; 0x1c4
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d043      	beq.n	7d46 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xb6>
    7cbe:	469b      	mov	fp, r3
    7cc0:	4b25      	ldr	r3, [pc, #148]	; (7d58 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc8>)
    7cc2:	4605      	mov	r5, r0
    7cc4:	681b      	ldr	r3, [r3, #0]
    7cc6:	9301      	str	r3, [sp, #4]
    7cc8:	4658      	mov	r0, fp
    7cca:	f005 fd4d 	bl	d768 <__aeabi_ui2d>
    7cce:	4602      	mov	r2, r0
    7cd0:	460b      	mov	r3, r1
    7cd2:	f005 fdbf 	bl	d854 <__aeabi_dmul>
    7cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7cda:	f505 6afd 	add.w	sl, r5, #2024	; 0x7e8
    7cde:	f505 69ed 	add.w	r9, r5, #1896	; 0x768
    7ce2:	f505 68f9 	add.w	r8, r5, #1992	; 0x7c8
    7ce6:	f505 67f1 	add.w	r7, r5, #1928	; 0x788
    7cea:	f505 66f5 	add.w	r6, r5, #1960	; 0x7a8
    7cee:	f605 0508 	addw	r5, r5, #2056	; 0x808
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7cf2:	4b1a      	ldr	r3, [pc, #104]	; (7d5c <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xcc>)
    7cf4:	681b      	ldr	r3, [r3, #0]
    7cf6:	9305      	str	r3, [sp, #20]
	return ret;
    7cf8:	9b05      	ldr	r3, [sp, #20]
		leds.bouncing_tLast[i]		= millis();
    7cfa:	f84a 3f04 	str.w	r3, [sl, #4]!
		leds.bouncing_heights[i]	= h0;
    7cfe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    7d02:	f849 3f04 	str.w	r3, [r9, #4]!
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
    7d06:	2300      	movs	r3, #0
    7d08:	f848 3f04 	str.w	r3, [r8, #4]!
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
    7d0c:	9b01      	ldr	r3, [sp, #4]
    7d0e:	f847 3f04 	str.w	r3, [r7, #4]!
		leds.bouncing_tCycle[i]		= 0;
    7d12:	2300      	movs	r3, #0
    7d14:	f846 3f04 	str.w	r3, [r6, #4]!
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    7d18:	4620      	mov	r0, r4
    7d1a:	f006 f8b7 	bl	de8c <__aeabi_i2f>
    7d1e:	f005 fd45 	bl	d7ac <__aeabi_f2d>
    7d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    7d26:	f005 febf 	bl	daa8 <__aeabi_ddiv>
    7d2a:	4602      	mov	r2, r0
    7d2c:	460b      	mov	r3, r1
    7d2e:	a108      	add	r1, pc, #32	; (adr r1, 7d50 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0xc0>)
    7d30:	e9d1 0100 	ldrd	r0, r1, [r1]
    7d34:	f005 fbda 	bl	d4ec <__aeabi_dsub>
    7d38:	f005 ff9e 	bl	dc78 <__aeabi_d2f>
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    7d3c:	3401      	adds	r4, #1
    7d3e:	455c      	cmp	r4, fp
		leds.bouncing_tLast[i]		= millis();
		leds.bouncing_heights[i]	= h0;
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
    7d40:	f845 0f04 	str.w	r0, [r5, #4]!
	leds.delay_time			= 15;

	leds.bouncing_fade		= bf;
	leds.number_of_balls	= nob;

	for (int i = 0; i < leds.number_of_balls; i++) {    // Initialize variables
    7d44:	d1d5      	bne.n	7cf2 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)+0x62>
		leds.bouncing_pos[i]		= 0;                              // Balls start on the ground
		leds.bouncing_vImpact[i]	= bouncing_vImpact0;                   // And "pop" up at vImpact0
		leds.bouncing_tCycle[i]		= 0;
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}
    7d46:	b007      	add	sp, #28
    7d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d4c:	f3af 8000 	nop.w
    7d50:	c0000000 	.word	0xc0000000
    7d54:	3feccccc 	.word	0x3feccccc
    7d58:	1fff8744 	.word	0x1fff8744
    7d5c:	1fffa8f8 	.word	0x1fffa8f8

00007d60 <bouncing_balls_update(LEDStruct&)>:

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    7d60:	4b12      	ldr	r3, [pc, #72]	; (7dac <bouncing_balls_update(LEDStruct&)+0x4c>)
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    7d62:	4a13      	ldr	r2, [pc, #76]	; (7db0 <bouncing_balls_update(LEDStruct&)+0x50>)
	switch (update_var) {
    7d64:	781b      	ldrb	r3, [r3, #0]
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    7d66:	2100      	movs	r1, #0
	switch (update_var) {
    7d68:	2b01      	cmp	r3, #1
		leds.bouncing_COR[i]		= 0.90 - float(i) / pow(leds.number_of_balls, 2);
	}
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
    7d6a:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    7d6c:	d011      	beq.n	7d92 <bouncing_balls_update(LEDStruct&)+0x32>
    7d6e:	d30a      	bcc.n	7d86 <bouncing_balls_update(LEDStruct&)+0x26>
    7d70:	2b02      	cmp	r3, #2
    7d72:	d106      	bne.n	7d82 <bouncing_balls_update(LEDStruct&)+0x22>
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
    7d74:	4b0f      	ldr	r3, [pc, #60]	; (7db4 <bouncing_balls_update(LEDStruct&)+0x54>)
    7d76:	881b      	ldrh	r3, [r3, #0]
    7d78:	3300      	adds	r3, #0
    7d7a:	bf18      	it	ne
    7d7c:	2301      	movne	r3, #1
    7d7e:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	default:	break;
	}
	LEDDebug(leds);
    7d82:	f7fa ba2f 	b.w	21e4 <LEDDebug(LEDStruct&)>
}

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
    7d86:	4b0b      	ldr	r3, [pc, #44]	; (7db4 <bouncing_balls_update(LEDStruct&)+0x54>)
    7d88:	881b      	ldrh	r3, [r3, #0]
    7d8a:	f880 3769 	strb.w	r3, [r0, #1897]	; 0x769
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    7d8e:	f7fa ba29 	b.w	21e4 <LEDDebug(LEDStruct&)>

void bouncing_balls_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
	case 0:		leds.bouncing_fade	 = (uint8_t)update_arg;	break;	//a
	case 1:		if (update_arg > MAX_NUMBER_OF_BALLS) { update_arg = MAX_NUMBER_OF_BALLS; } leds.number_of_balls = (uint8_t)update_arg;	break;	//b		
    7d92:	4a08      	ldr	r2, [pc, #32]	; (7db4 <bouncing_balls_update(LEDStruct&)+0x54>)
    7d94:	8813      	ldrh	r3, [r2, #0]
    7d96:	2b08      	cmp	r3, #8
    7d98:	bf8c      	ite	hi
    7d9a:	2308      	movhi	r3, #8
    7d9c:	b2db      	uxtbls	r3, r3
    7d9e:	f880 376a 	strb.w	r3, [r0, #1898]	; 0x76a
    7da2:	bf88      	it	hi
    7da4:	8013      	strhhi	r3, [r2, #0]
	case 2:		leds.use_palette	 = (bool)update_arg; break; //c
	default:	break;
	}
	LEDDebug(leds);
    7da6:	f7fa ba1d 	b.w	21e4 <LEDDebug(LEDStruct&)>
    7daa:	bf00      	nop
    7dac:	1fff9e5c 	.word	0x1fff9e5c
    7db0:	1fff9605 	.word	0x1fff9605
    7db4:	1fff9e54 	.word	0x1fff9e54

00007db8 <bouncing_balls(LEDStruct&)>:
}

void bouncing_balls(LEDStruct& leds) {
    7db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7dbc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	default:	break;
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
    7dc0:	b089      	sub	sp, #36	; 0x24
    7dc2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7dc4:	2b00      	cmp	r3, #0
    7dc6:	f000 80df 	beq.w	7f88 <bouncing_balls(LEDStruct&)+0x1d0>
	if (keyboard_update) { bouncing_balls_update(leds); }
    7dca:	4b8d      	ldr	r3, [pc, #564]	; (8000 <bouncing_balls(LEDStruct&)+0x248>)
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	2b00      	cmp	r3, #0
    7dd0:	f040 8112 	bne.w	7ff8 <bouncing_balls(LEDStruct&)+0x240>

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7dd4:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    7dd8:	2b00      	cmp	r3, #0
    7dda:	f000 80c1 	beq.w	7f60 <bouncing_balls(LEDStruct&)+0x1a8>
    7dde:	f04f 0800 	mov.w	r8, #0
    7de2:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8010 <bouncing_balls(LEDStruct&)+0x258>
    7de6:	46c3      	mov	fp, r8
    7de8:	e032      	b.n	7e50 <bouncing_balls(LEDStruct&)+0x98>
			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       

		if (leds.use_palette) {
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
    7dea:	f894 3768 	ldrb.w	r3, [r4, #1896]	; 0x768
    7dee:	f894 276a 	ldrb.w	r2, [r4, #1898]	; 0x76a
    7df2:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    7df6:	9100      	str	r1, [sp, #0]
    7df8:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    7dfc:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    7e00:	fb96 f6f2 	sdiv	r6, r6, r2
    7e04:	18f2      	adds	r2, r6, r3
    7e06:	b2d2      	uxtb	r2, r2
    7e08:	23ff      	movs	r3, #255	; 0xff
    7e0a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    7e0e:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    7e12:	a805      	add	r0, sp, #20
    7e14:	f002 fe34 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7e18:	f89d 3014 	ldrb.w	r3, [sp, #20]
    7e1c:	55e3      	strb	r3, [r4, r7]
    7e1e:	4427      	add	r7, r4
        g = rhs.g;
        b = rhs.b;
    7e20:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    7e24:	f89d 2015 	ldrb.w	r2, [sp, #21]
    7e28:	707a      	strb	r2, [r7, #1]
        b = rhs.b;
    7e2a:	70bb      	strb	r3, [r7, #2]
			leds.bouncing_index++;
    7e2c:	f894 3768 	ldrb.w	r3, [r4, #1896]	; 0x768
    7e30:	3301      	adds	r3, #1
    7e32:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7e36:	f10b 0b01 	add.w	fp, fp, #1
    7e3a:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    7e3e:	fa5f fb8b 	uxtb.w	fp, fp
    7e42:	f108 0828 	add.w	r8, r8, #40	; 0x28
    7e46:	455b      	cmp	r3, fp
    7e48:	fa5f f888 	uxtb.w	r8, r8
    7e4c:	f240 8088 	bls.w	7f60 <bouncing_balls(LEDStruct&)+0x1a8>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
    7e50:	f894 2769 	ldrb.w	r2, [r4, #1897]	; 0x769
    7e54:	214b      	movs	r1, #75	; 0x4b
    7e56:	4620      	mov	r0, r4
    7e58:	fa0f f68b 	sxth.w	r6, fp
    7e5c:	f002 fdb0 	bl	a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    7e60:	eb04 0586 	add.w	r5, r4, r6, lsl #2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e64:	f8d9 3000 	ldr.w	r3, [r9]
    7e68:	9306      	str	r3, [sp, #24]
	return ret;
    7e6a:	9806      	ldr	r0, [sp, #24]
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    7e6c:	f8d5 37ec 	ldr.w	r3, [r5, #2028]	; 0x7ec
    7e70:	1ac0      	subs	r0, r0, r3
    7e72:	f006 f807 	bl	de84 <__aeabi_ui2f>
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7e76:	4963      	ldr	r1, [pc, #396]	; (8004 <bouncing_balls(LEDStruct&)+0x24c>)
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
    7e78:	f8c5 07ac 	str.w	r0, [r5, #1964]	; 0x7ac
    7e7c:	4607      	mov	r7, r0
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7e7e:	f006 f90d 	bl	e09c <__aeabi_fdiv>
    7e82:	f005 fc93 	bl	d7ac <__aeabi_f2d>
    7e86:	4602      	mov	r2, r0
    7e88:	460b      	mov	r3, r1
    7e8a:	f005 fce3 	bl	d854 <__aeabi_dmul>
    7e8e:	2200      	movs	r2, #0
    7e90:	4b5d      	ldr	r3, [pc, #372]	; (8008 <bouncing_balls(LEDStruct&)+0x250>)
    7e92:	f8d5 a78c 	ldr.w	sl, [r5, #1932]	; 0x78c
    7e96:	f005 fcdd 	bl	d854 <__aeabi_dmul>
    7e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7e9e:	4651      	mov	r1, sl
    7ea0:	4638      	mov	r0, r7
    7ea2:	f006 f847 	bl	df34 <__aeabi_fmul>
    7ea6:	4957      	ldr	r1, [pc, #348]	; (8004 <bouncing_balls(LEDStruct&)+0x24c>)
    7ea8:	f006 f8f8 	bl	e09c <__aeabi_fdiv>
    7eac:	f005 fc7e 	bl	d7ac <__aeabi_f2d>
    7eb0:	4602      	mov	r2, r0
    7eb2:	460b      	mov	r3, r1
    7eb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    7eb8:	f005 fb1a 	bl	d4f0 <__adddf3>
    7ebc:	f005 fedc 	bl	dc78 <__aeabi_d2f>

		if (leds.bouncing_heights[i] < 0) {
    7ec0:	2100      	movs	r1, #0
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;
    7ec2:	f8c5 076c 	str.w	r0, [r5, #1900]	; 0x76c
    7ec6:	4607      	mov	r7, r0

		if (leds.bouncing_heights[i] < 0) {
    7ec8:	f006 f9d2 	bl	e270 <__aeabi_fcmplt>
    7ecc:	bb70      	cbnz	r0, 7f2c <bouncing_balls(LEDStruct&)+0x174>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    7ece:	4638      	mov	r0, r7
    7ed0:	494e      	ldr	r1, [pc, #312]	; (800c <bouncing_balls(LEDStruct&)+0x254>)
    7ed2:	f006 f82f 	bl	df34 <__aeabi_fmul>
    7ed6:	2100      	movs	r1, #0
    7ed8:	4607      	mov	r7, r0
    7eda:	f006 f9dd 	bl	e298 <__aeabi_fcmpge>
    7ede:	b1e0      	cbz	r0, 7f1a <bouncing_balls(LEDStruct&)+0x162>
    7ee0:	4638      	mov	r0, r7
    7ee2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    7ee6:	f005 ff1d 	bl	dd24 <__addsf3>
    7eea:	f006 f9e9 	bl	e2c0 <__aeabi_f2iz>
    7eee:	4607      	mov	r7, r0
    7ef0:	f8c5 77cc 	str.w	r7, [r5, #1996]	; 0x7cc

		if (leds.use_palette) {
    7ef4:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    7ef8:	2b00      	cmp	r3, #0
    7efa:	f47f af76 	bne.w	7dea <bouncing_balls(LEDStruct&)+0x32>
			leds.led_data[leds.bouncing_pos[i]] = ColorFromPalette(leds.current_palette, leds.bouncing_index + i * ONE_SIDE / leds.number_of_balls, 255, leds.current_blending);
			leds.bouncing_index++;
		}
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
    7efe:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7f02:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    7f04:	4421      	add	r1, r4
    7f06:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    7f08:	f88d 8014 	strb.w	r8, [sp, #20]
    7f0c:	f88d 3015 	strb.w	r3, [sp, #21]
    7f10:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    7f14:	f002 ffb2 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    7f18:	e78d      	b.n	7e36 <bouncing_balls(LEDStruct&)+0x7e>
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
			leds.bouncing_tLast[i] = millis();

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
		}
		leds.bouncing_pos[i] = round(leds.bouncing_heights[i] * (ONE_SIDE - 1) / h0);       
    7f1a:	4638      	mov	r0, r7
    7f1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    7f20:	f005 fefe 	bl	dd20 <__aeabi_fsub>
    7f24:	f006 f9cc 	bl	e2c0 <__aeabi_f2iz>
    7f28:	4607      	mov	r7, r0
    7f2a:	e7e1      	b.n	7ef0 <bouncing_balls(LEDStruct&)+0x138>
		fadeToBlackBy(leds.led_data, ONE_SIDE, leds.bouncing_fade);
		leds.bouncing_tCycle[i] = millis() - leds.bouncing_tLast[i];
		leds.bouncing_heights[i] = 0.5 * GRAVITY * pow(leds.bouncing_tCycle[i] / 1000, 2.0) + leds.bouncing_vImpact[i] * leds.bouncing_tCycle[i] / 1000;

		if (leds.bouncing_heights[i] < 0) {
			leds.bouncing_heights[i] = 0;                            
    7f2c:	2300      	movs	r3, #0
    7f2e:	f8c5 376c 	str.w	r3, [r5, #1900]	; 0x76c
			leds.bouncing_vImpact[i] = leds.bouncing_COR[i] * leds.bouncing_vImpact[i];   
    7f32:	f8d5 180c 	ldr.w	r1, [r5, #2060]	; 0x80c
    7f36:	4650      	mov	r0, sl
    7f38:	f005 fffc 	bl	df34 <__aeabi_fmul>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f3c:	4b34      	ldr	r3, [pc, #208]	; (8010 <bouncing_balls(LEDStruct&)+0x258>)
    7f3e:	f8c5 078c 	str.w	r0, [r5, #1932]	; 0x78c
    7f42:	681b      	ldr	r3, [r3, #0]
    7f44:	9307      	str	r3, [sp, #28]
	return ret;
    7f46:	9b07      	ldr	r3, [sp, #28]
			leds.bouncing_tLast[i] = millis();
    7f48:	f8c5 37ec 	str.w	r3, [r5, #2028]	; 0x7ec

			if (leds.bouncing_vImpact[i] < 0.01) { leds.bouncing_vImpact[i] = bouncing_vImpact0; }  
    7f4c:	4931      	ldr	r1, [pc, #196]	; (8014 <bouncing_balls(LEDStruct&)+0x25c>)
    7f4e:	f006 f98f 	bl	e270 <__aeabi_fcmplt>
    7f52:	b118      	cbz	r0, 7f5c <bouncing_balls(LEDStruct&)+0x1a4>
    7f54:	4b30      	ldr	r3, [pc, #192]	; (8018 <bouncing_balls(LEDStruct&)+0x260>)
    7f56:	681b      	ldr	r3, [r3, #0]
    7f58:	f8c5 378c 	str.w	r3, [r5, #1932]	; 0x78c

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
	if (keyboard_update) { bouncing_balls_update(leds); }

	for (uint8_t i = 0; i < leds.number_of_balls; i++) {
    7f5c:	2700      	movs	r7, #0
    7f5e:	e7c7      	b.n	7ef0 <bouncing_balls(LEDStruct&)+0x138>
    7f60:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    7f64:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7f66:	7822      	ldrb	r2, [r4, #0]
    7f68:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    7f6c:	7862      	ldrb	r2, [r4, #1]
    7f6e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    7f72:	78a2      	ldrb	r2, [r4, #2]
    7f74:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    7f78:	3403      	adds	r4, #3
    7f7a:	42a1      	cmp	r1, r4
    7f7c:	f1a3 0303 	sub.w	r3, r3, #3
    7f80:	d1f1      	bne.n	7f66 <bouncing_balls(LEDStruct&)+0x1ae>
		else {
			leds.led_data[leds.bouncing_pos[i]] = CHSV((i * 40), 255, 255);
		}
	}
	strip_sync(leds);
}
    7f82:	b009      	add	sp, #36	; 0x24
    7f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7f88:	4d24      	ldr	r5, [pc, #144]	; (801c <bouncing_balls(LEDStruct&)+0x264>)
    7f8a:	882b      	ldrh	r3, [r5, #0]
    7f8c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    7f90:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7f94:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    7f98:	3119      	adds	r1, #25
    7f9a:	b289      	uxth	r1, r1
    7f9c:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    7fa0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    7fa4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    7fa8:	3319      	adds	r3, #25
    7faa:	b29b      	uxth	r3, r3
    7fac:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    7fb0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    7fb4:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    7fb8:	3619      	adds	r6, #25
    7fba:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    7fbc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void bouncing_balls(LEDStruct& leds) {
	if (!leds.mode_initialized) { bouncing_balls_init(leds); }
    7fc0:	b2db      	uxtb	r3, r3
    7fc2:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    7fc6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    7fca:	b2ff      	uxtb	r7, r7
    7fcc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7fd0:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
    7fd4:	123b      	asrs	r3, r7, #8
    7fd6:	1212      	asrs	r2, r2, #8
    7fd8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    7fdc:	3302      	adds	r3, #2
    7fde:	3201      	adds	r2, #1
    7fe0:	b2db      	uxtb	r3, r3
    7fe2:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    7fe6:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    7fe8:	802e      	strh	r6, [r5, #0]
    7fea:	f7ff fe51 	bl	7c90 <bouncing_balls_init(LEDStruct&, bool, unsigned char, unsigned char)>
	if (keyboard_update) { bouncing_balls_update(leds); }
    7fee:	4b04      	ldr	r3, [pc, #16]	; (8000 <bouncing_balls(LEDStruct&)+0x248>)
    7ff0:	781b      	ldrb	r3, [r3, #0]
    7ff2:	2b00      	cmp	r3, #0
    7ff4:	f43f aeee 	beq.w	7dd4 <bouncing_balls(LEDStruct&)+0x1c>
    7ff8:	4620      	mov	r0, r4
    7ffa:	f7ff feb1 	bl	7d60 <bouncing_balls_update(LEDStruct&)>
    7ffe:	e6e9      	b.n	7dd4 <bouncing_balls(LEDStruct&)+0x1c>
    8000:	1fff9605 	.word	0x1fff9605
    8004:	447a0000 	.word	0x447a0000
    8008:	bfe00000 	.word	0xbfe00000
    800c:	42940000 	.word	0x42940000
    8010:	1fffa8f8 	.word	0x1fffa8f8
    8014:	3c23d70a 	.word	0x3c23d70a
    8018:	1fff8744 	.word	0x1fff8744
    801c:	1fff8784 	.word	0x1fff8784

00008020 <lightsaber_update(LEDStruct&)>:
}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    8020:	4b12      	ldr	r3, [pc, #72]	; (806c <lightsaber_update(LEDStruct&)+0x4c>)

}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
    8022:	4a13      	ldr	r2, [pc, #76]	; (8070 <lightsaber_update(LEDStruct&)+0x50>)
	switch (update_var) {
    8024:	781b      	ldrb	r3, [r3, #0]

}


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
    8026:	2100      	movs	r1, #0
    8028:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    802a:	2b03      	cmp	r3, #3
    802c:	d807      	bhi.n	803e <lightsaber_update(LEDStruct&)+0x1e>
    802e:	e8df f003 	tbb	[pc, r3]
    8032:	0214      	.short	0x0214
    8034:	080e      	.short	0x080e
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
    8036:	4b0f      	ldr	r3, [pc, #60]	; (8074 <lightsaber_update(LEDStruct&)+0x54>)
    8038:	881b      	ldrh	r3, [r3, #0]
    803a:	f880 382e 	strb.w	r3, [r0, #2094]	; 0x82e
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    803e:	f7fa b8d1 	b.w	21e4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
    8042:	4b0c      	ldr	r3, [pc, #48]	; (8074 <lightsaber_update(LEDStruct&)+0x54>)
    8044:	881b      	ldrh	r3, [r3, #0]
    8046:	f8a0 3830 	strh.w	r3, [r0, #2096]	; 0x830
		default:	break;
	}
	LEDDebug(leds);
    804a:	f7fa b8cb 	b.w	21e4 <LEDDebug(LEDStruct&)>
void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
    804e:	4b09      	ldr	r3, [pc, #36]	; (8074 <lightsaber_update(LEDStruct&)+0x54>)
    8050:	881b      	ldrh	r3, [r3, #0]
    8052:	f880 383d 	strb.w	r3, [r0, #2109]	; 0x83d
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    8056:	f7fa b8c5 	b.w	21e4 <LEDDebug(LEDStruct&)>


void lightsaber_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.use_palette	= (bool)update_arg;		break; //a
    805a:	4b06      	ldr	r3, [pc, #24]	; (8074 <lightsaber_update(LEDStruct&)+0x54>)
    805c:	881b      	ldrh	r3, [r3, #0]
    805e:	3300      	adds	r3, #0
    8060:	bf18      	it	ne
    8062:	2301      	movne	r3, #1
    8064:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
		case 1:		leds.blade_color	= (uint8_t)update_arg;	break; //b
		case 2:		leds.delta_bright	= (uint8_t)update_arg;	break; //c
		case 3:		leds.hold_time		= (uint16_t)update_arg;	break; //d
		default:	break;
	}
	LEDDebug(leds);
    8068:	f7fa b8bc 	b.w	21e4 <LEDDebug(LEDStruct&)>
    806c:	1fff9e5c 	.word	0x1fff9e5c
    8070:	1fff9605 	.word	0x1fff9605
    8074:	1fff9e54 	.word	0x1fff9e54

00008078 <lightsaber(LEDStruct&)>:
}


void lightsaber(LEDStruct& leds) {
    8078:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    807a:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
	}
	LEDDebug(leds);
}


void lightsaber(LEDStruct& leds) {
    807e:	b087      	sub	sp, #28
    8080:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    8082:	2a00      	cmp	r2, #0
    8084:	f040 809f 	bne.w	81c6 <lightsaber(LEDStruct&)+0x14e>
    8088:	48d1      	ldr	r0, [pc, #836]	; (83d0 <lightsaber(LEDStruct&)+0x358>)
	if (keyboard_update) { lightsaber_update(leds); }
    808a:	49d2      	ldr	r1, [pc, #840]	; (83d4 <lightsaber(LEDStruct&)+0x35c>)
    808c:	8803      	ldrh	r3, [r0, #0]
    808e:	7809      	ldrb	r1, [r1, #0]

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
    8090:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    8094:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    8098:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    809c:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    80a0:	3619      	adds	r6, #25
    80a2:	b2b6      	uxth	r6, r6
    80a4:	eb06 2546 	add.w	r5, r6, r6, lsl #9
    80a8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
    80ac:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    80b0:	3519      	adds	r5, #25
    80b2:	b2ad      	uxth	r5, r5
    80b4:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    80b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    80bc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    80c0:	3319      	adds	r3, #25
    80c2:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    80c4:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    80c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    80cc:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    80d0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    80d4:	3719      	adds	r7, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    80d6:	b2db      	uxtb	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    80d8:	b2bf      	uxth	r7, r7
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    80da:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    80de:	f240 7ed1 	movw	lr, #2001	; 0x7d1
    80e2:	11db      	asrs	r3, r3, #7
    80e4:	fb0e fe07 	mul.w	lr, lr, r7
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
    80e8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    80ec:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    80f0:	3332      	adds	r3, #50	; 0x32
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    80f2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
	LEDDebug(leds);
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
    80f6:	f3c6 16c0 	ubfx	r6, r6, #7, #1
    80fa:	b2db      	uxtb	r3, r3
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
    80fc:	f50e 6efa 	add.w	lr, lr, #2000	; 0x7d0
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
    8100:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
	leds.blade_color		= bc;
	leds.delta_bright		= db;
	leds.hold_time			= ht;
	leds.tip_pos			= 0;
    8104:	f8a4 282c 	strh.w	r2, [r4, #2092]	; 0x82c
	leds.ls_val				= 0;
    8108:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
	leds.mode_type			= LIGHTSABER;
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
    810c:	f884 582e 	strb.w	r5, [r4, #2094]	; 0x82e
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8110:	8007      	strh	r7, [r0, #0]
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
    8112:	2501      	movs	r5, #1
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
    8114:	201d      	movs	r0, #29
	leds.use_full_range		= 0;
	leds.delay_time			= 10;
    8116:	220a      	movs	r2, #10
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
	leds.use_palette		= up;
    8118:	f884 622a 	strb.w	r6, [r4, #554]	; 0x22a
	leds.use_full_range		= 0;
	leds.delay_time			= 10;

	leds.saber_stage		= UP;
	leds.blade_color		= bc;
	leds.delta_bright		= db;
    811c:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
	leds.hold_time			= ht;
    8120:	f8a4 e830 	strh.w	lr, [r4, #2096]	; 0x830
#ifndef LIGHTSABER_H
#define LIGHTSABER_H

void lightsaber_init(LEDStruct& leds, bool up = random8(2), uint8_t bc = random8(), uint8_t db = random8(50,80), uint16_t ht = random16(2000,4001)) {
	leds.mode_initialized	= 1;
    8124:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.use_palette		= up;
	leds.mode_type			= LIGHTSABER;
    8128:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.use_full_range		= 0;
	leds.delay_time			= 10;
    812c:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    8130:	2900      	cmp	r1, #0
    8132:	f040 808c 	bne.w	824e <lightsaber(LEDStruct&)+0x1d6>
    8136:	460d      	mov	r5, r1
    8138:	460a      	mov	r2, r1

	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
    813a:	441a      	add	r2, r3
    813c:	f1c3 00ff 	rsb	r0, r3, #255	; 0xff
    8140:	4282      	cmp	r2, r0
    8142:	f2c0 80cc 	blt.w	82de <lightsaber(LEDStruct&)+0x266>
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
    8146:	2e00      	cmp	r6, #0
    8148:	f000 814a 	beq.w	83e0 <lightsaber(LEDStruct&)+0x368>
    814c:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    8150:	4aa1      	ldr	r2, [pc, #644]	; (83d8 <lightsaber(LEDStruct&)+0x360>)
    8152:	9300      	str	r3, [sp, #0]
    8154:	ebc5 2305 	rsb	r3, r5, r5, lsl #8
    8158:	fb82 1203 	smull	r1, r2, r2, r3
    815c:	17db      	asrs	r3, r3, #31
    815e:	ebc3 02e2 	rsb	r2, r3, r2, asr #3
    8162:	b2d2      	uxtb	r2, r2
    8164:	23ff      	movs	r3, #255	; 0xff
    8166:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    816a:	a805      	add	r0, sp, #20
    816c:	f002 fc88 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    8170:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8174:	1863      	adds	r3, r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8176:	f89d 5014 	ldrb.w	r5, [sp, #20]
        g = rhs.g;
    817a:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
    817e:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8182:	5465      	strb	r5, [r4, r1]
        g = rhs.g;
    8184:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    8186:	709a      	strb	r2, [r3, #2]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    8188:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
    818c:	2200      	movs	r2, #0
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    818e:	2b49      	cmp	r3, #73	; 0x49
	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
    8190:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
    8194:	f200 810d 	bhi.w	83b2 <lightsaber(LEDStruct&)+0x33a>
    8198:	3301      	adds	r3, #1
    819a:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    819e:	4620      	mov	r0, r4
    81a0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    81a4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    81a6:	781a      	ldrb	r2, [r3, #0]
    81a8:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    81ac:	785a      	ldrb	r2, [r3, #1]
    81ae:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    81b2:	789a      	ldrb	r2, [r3, #2]
    81b4:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    81b8:	3303      	adds	r3, #3
    81ba:	4299      	cmp	r1, r3
    81bc:	f1a0 0003 	sub.w	r0, r0, #3
    81c0:	d1f1      	bne.n	81a6 <lightsaber(LEDStruct&)+0x12e>
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;
	}
	strip_sync(leds);
}
    81c2:	b007      	add	sp, #28
    81c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    81c6:	4b83      	ldr	r3, [pc, #524]	; (83d4 <lightsaber(LEDStruct&)+0x35c>)
    81c8:	781b      	ldrb	r3, [r3, #0]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d13f      	bne.n	824e <lightsaber(LEDStruct&)+0x1d6>

	switch (leds.saber_stage) {
    81ce:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    81d2:	2b01      	cmp	r3, #1
    81d4:	d042      	beq.n	825c <lightsaber(LEDStruct&)+0x1e4>
    81d6:	f0c0 8113 	bcc.w	8400 <lightsaber(LEDStruct&)+0x388>
    81da:	2b02      	cmp	r3, #2
    81dc:	d1df      	bne.n	819e <lightsaber(LEDStruct&)+0x126>
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
			if (millis() > leds.ls_end && leds.tip_pos == 0) { leds.saber_stage = UP; leds.ls_val = 0; }
			break;

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
    81de:	f894 283d 	ldrb.w	r2, [r4, #2109]	; 0x83d
    81e2:	f894 383c 	ldrb.w	r3, [r4, #2108]	; 0x83c
    81e6:	1a9b      	subs	r3, r3, r2
    81e8:	429a      	cmp	r2, r3
    81ea:	db51      	blt.n	8290 <lightsaber(LEDStruct&)+0x218>
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
    81ec:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    81f0:	2b00      	cmp	r3, #0
    81f2:	f000 80cc 	beq.w	838e <lightsaber(LEDStruct&)+0x316>
    81f6:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    81fa:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    81fe:	4a76      	ldr	r2, [pc, #472]	; (83d8 <lightsaber(LEDStruct&)+0x360>)
    8200:	9300      	str	r3, [sp, #0]
    8202:	ebc5 2305 	rsb	r3, r5, r5, lsl #8
    8206:	fb82 1203 	smull	r1, r2, r2, r3
    820a:	17db      	asrs	r3, r3, #31
    820c:	ebc3 02e2 	rsb	r2, r3, r2, asr #3
    8210:	b2d2      	uxtb	r2, r2
    8212:	2300      	movs	r3, #0
    8214:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    8218:	a805      	add	r0, sp, #20
    821a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    821e:	f002 fc2f 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    8222:	1963      	adds	r3, r4, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8224:	f89d 0014 	ldrb.w	r0, [sp, #20]
        g = rhs.g;
    8228:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    822c:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8230:	5560      	strb	r0, [r4, r5]
        g = rhs.g;
    8232:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    8234:	709a      	strb	r2, [r3, #2]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
    8236:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
    823a:	22ff      	movs	r2, #255	; 0xff
    823c:	f884 283c 	strb.w	r2, [r4, #2108]	; 0x83c
				if (leds.tip_pos > 0) { leds.tip_pos--; }
    8240:	2b00      	cmp	r3, #0
    8242:	f000 8094 	beq.w	836e <lightsaber(LEDStruct&)+0x2f6>
    8246:	3b01      	subs	r3, #1
    8248:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    824c:	e7a7      	b.n	819e <lightsaber(LEDStruct&)+0x126>
}


void lightsaber(LEDStruct& leds) {
	if (!leds.mode_initialized) { lightsaber_init(leds); }
	if (keyboard_update) { lightsaber_update(leds); }
    824e:	4620      	mov	r0, r4
    8250:	f7ff fee6 	bl	8020 <lightsaber_update(LEDStruct&)>

	switch (leds.saber_stage) {
    8254:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    8258:	2b01      	cmp	r3, #1
    825a:	d1bc      	bne.n	81d6 <lightsaber(LEDStruct&)+0x15e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    825c:	4b5f      	ldr	r3, [pc, #380]	; (83dc <lightsaber(LEDStruct&)+0x364>)
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;

		case WAIT:
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
    825e:	f8d4 2838 	ldr.w	r2, [r4, #2104]	; 0x838
    8262:	6819      	ldr	r1, [r3, #0]
    8264:	9103      	str	r1, [sp, #12]
	return ret;
    8266:	9903      	ldr	r1, [sp, #12]
    8268:	4291      	cmp	r1, r2
    826a:	d903      	bls.n	8274 <lightsaber(LEDStruct&)+0x1fc>
    826c:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    8270:	294a      	cmp	r1, #74	; 0x4a
    8272:	d058      	beq.n	8326 <lightsaber(LEDStruct&)+0x2ae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8274:	681b      	ldr	r3, [r3, #0]
    8276:	9304      	str	r3, [sp, #16]
	return ret;
    8278:	9b04      	ldr	r3, [sp, #16]
			if (millis() > leds.ls_end && leds.tip_pos == 0) { leds.saber_stage = UP; leds.ls_val = 0; }
    827a:	4293      	cmp	r3, r2
    827c:	d98f      	bls.n	819e <lightsaber(LEDStruct&)+0x126>
    827e:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
    8282:	2b00      	cmp	r3, #0
    8284:	d18b      	bne.n	819e <lightsaber(LEDStruct&)+0x126>
    8286:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    828a:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    828e:	e786      	b.n	819e <lightsaber(LEDStruct&)+0x126>
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    8290:	f894 222a 	ldrb.w	r2, [r4, #554]	; 0x22a
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
    8294:	b2db      	uxtb	r3, r3
    8296:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    829a:	2a00      	cmp	r2, #0
    829c:	d04d      	beq.n	833a <lightsaber(LEDStruct&)+0x2c2>
    829e:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    82a2:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
    82a6:	494c      	ldr	r1, [pc, #304]	; (83d8 <lightsaber(LEDStruct&)+0x360>)
    82a8:	9200      	str	r2, [sp, #0]
    82aa:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    82ae:	fb81 0102 	smull	r0, r1, r1, r2
    82b2:	17d2      	asrs	r2, r2, #31
    82b4:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
    82b8:	b2d2      	uxtb	r2, r2
    82ba:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    82be:	a805      	add	r0, sp, #20
    82c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    82c4:	f002 fbdc 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    82c8:	1963      	adds	r3, r4, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    82ca:	f89d 0014 	ldrb.w	r0, [sp, #20]
        g = rhs.g;
    82ce:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    82d2:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    82d6:	5560      	strb	r0, [r4, r5]
        g = rhs.g;
    82d8:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    82da:	709a      	strb	r2, [r3, #2]
    82dc:	e75f      	b.n	819e <lightsaber(LEDStruct&)+0x126>
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
				}
			}
			else {
				leds.ls_val += leds.delta_bright;
    82de:	440b      	add	r3, r1
    82e0:	b2db      	uxtb	r3, r3
    82e2:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
    82e6:	2e00      	cmp	r6, #0
    82e8:	d039      	beq.n	835e <lightsaber(LEDStruct&)+0x2e6>
    82ea:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
    82ee:	493a      	ldr	r1, [pc, #232]	; (83d8 <lightsaber(LEDStruct&)+0x360>)
    82f0:	9200      	str	r2, [sp, #0]
    82f2:	ebc5 2205 	rsb	r2, r5, r5, lsl #8
    82f6:	fb81 0102 	smull	r0, r1, r1, r2
    82fa:	17d2      	asrs	r2, r2, #31
    82fc:	ebc2 02e1 	rsb	r2, r2, r1, asr #3
    8300:	b2d2      	uxtb	r2, r2
    8302:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    8306:	a805      	add	r0, sp, #20
    8308:	f002 fbba 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    830c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8310:	1863      	adds	r3, r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8312:	f89d 5014 	ldrb.w	r5, [sp, #20]
        g = rhs.g;
    8316:	f89d 0015 	ldrb.w	r0, [sp, #21]
        b = rhs.b;
    831a:	f89d 2016 	ldrb.w	r2, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    831e:	5465      	strb	r5, [r4, r1]
        g = rhs.g;
    8320:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    8322:	709a      	strb	r2, [r3, #2]
    8324:	e73b      	b.n	819e <lightsaber(LEDStruct&)+0x126>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8326:	681b      	ldr	r3, [r3, #0]
    8328:	9304      	str	r3, [sp, #16]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
			}
			break;

		case WAIT:
			if (millis() > leds.ls_end && leds.tip_pos == ONE_SIDE-1) { leds.saber_stage = DOWN; leds.ls_val = 255; }
    832a:	2202      	movs	r2, #2
    832c:	23ff      	movs	r3, #255	; 0xff
	return ret;
    832e:	9904      	ldr	r1, [sp, #16]
    8330:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    8334:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    8338:	e731      	b.n	819e <lightsaber(LEDStruct&)+0x126>
				}
			}
			else {
				leds.ls_val -= leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
    833a:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    833e:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    8342:	f88d 3016 	strb.w	r3, [sp, #22]
    8346:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    834a:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    834c:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    834e:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8350:	f88d 2014 	strb.w	r2, [sp, #20]
    8354:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    8358:	f002 fd90 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    835c:	e71f      	b.n	819e <lightsaber(LEDStruct&)+0x126>
				}
			}
			else {
				leds.ls_val += leds.delta_bright;
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, leds.ls_val, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, leds.ls_val); }
    835e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8362:	4421      	add	r1, r4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    8364:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    8368:	f88d 3016 	strb.w	r3, [sp, #22]
    836c:	e7ee      	b.n	834c <lightsaber(LEDStruct&)+0x2d4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    836e:	4b1b      	ldr	r3, [pc, #108]	; (83dc <lightsaber(LEDStruct&)+0x364>)
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    8370:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    8374:	681b      	ldr	r3, [r3, #0]
    8376:	9305      	str	r3, [sp, #20]
	return ret;
    8378:	9b05      	ldr	r3, [sp, #20]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
					leds.ls_begin = millis();
    837a:	f8c4 3834 	str.w	r3, [r4, #2100]	; 0x834
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    837e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
    8382:	2201      	movs	r2, #1
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time / 2;
    8384:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
				leds.ls_val = 255;
				if (leds.tip_pos > 0) { leds.tip_pos--; }
				else {
					leds.saber_stage = WAIT;
    8388:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    838c:	e707      	b.n	819e <lightsaber(LEDStruct&)+0x126>
			break;

		case DOWN:
			if (leds.ls_val - leds.delta_bright <= leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 0, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 0); }
    838e:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    8392:	f894 282e 	ldrb.w	r2, [r4, #2094]	; 0x82e
    8396:	f88d 3016 	strb.w	r3, [sp, #22]
    839a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    839e:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    83a0:	4421      	add	r1, r4
    83a2:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    83a4:	f88d 2014 	strb.w	r2, [sp, #20]
    83a8:	f88d 3015 	strb.w	r3, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    83ac:	f002 fd66 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    83b0:	e741      	b.n	8236 <lightsaber(LEDStruct&)+0x1be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    83b2:	4b0a      	ldr	r3, [pc, #40]	; (83dc <lightsaber(LEDStruct&)+0x364>)
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
    83b4:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    83b8:	681b      	ldr	r3, [r3, #0]
    83ba:	9302      	str	r3, [sp, #8]
	return ret;
    83bc:	9b02      	ldr	r3, [sp, #8]
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
					leds.ls_begin = millis();
    83be:	f8c4 3834 	str.w	r3, [r4, #2100]	; 0x834
					leds.ls_end = leds.ls_begin + leds.hold_time;
    83c2:	4413      	add	r3, r2
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
    83c4:	2201      	movs	r2, #1
					leds.ls_begin = millis();
					leds.ls_end = leds.ls_begin + leds.hold_time;
    83c6:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
				leds.ls_val = 0;
				if (leds.tip_pos < ONE_SIDE - 1) { leds.tip_pos++; }
				else { 
					leds.saber_stage = WAIT; 
    83ca:	f884 283e 	strb.w	r2, [r4, #2110]	; 0x83e
    83ce:	e6e6      	b.n	819e <lightsaber(LEDStruct&)+0x126>
    83d0:	1fff8784 	.word	0x1fff8784
    83d4:	1fff9605 	.word	0x1fff9605
    83d8:	1b4e81b5 	.word	0x1b4e81b5
    83dc:	1fffa8f8 	.word	0x1fffa8f8
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    83e0:	f894 382e 	ldrb.w	r3, [r4, #2094]	; 0x82e
    83e4:	f88d 3014 	strb.w	r3, [sp, #20]

	switch (leds.saber_stage) {
		case UP:
			if (leds.ls_val + leds.delta_bright >= 255 - leds.delta_bright) {
				if (leds.use_palette) { leds.led_data[leds.tip_pos] = ColorFromPalette(leds.current_palette, leds.tip_pos * 255 / ONE_SIDE, 255, leds.current_blending); }
				else { leds.led_data[leds.tip_pos] = CHSV(leds.blade_color, 255, 255); }
    83e8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    83ec:	23ff      	movs	r3, #255	; 0xff
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    83ee:	4421      	add	r1, r4
    83f0:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    83f2:	f88d 3015 	strb.w	r3, [sp, #21]
    83f6:	f88d 3016 	strb.w	r3, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    83fa:	f002 fd3f 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    83fe:	e6c3      	b.n	8188 <lightsaber(LEDStruct&)+0x110>
    8400:	f894 183c 	ldrb.w	r1, [r4, #2108]	; 0x83c
    8404:	f894 383d 	ldrb.w	r3, [r4, #2109]	; 0x83d
    8408:	f894 622a 	ldrb.w	r6, [r4, #554]	; 0x22a
    840c:	f8b4 582c 	ldrh.w	r5, [r4, #2092]	; 0x82c
    8410:	460a      	mov	r2, r1
    8412:	e692      	b.n	813a <lightsaber(LEDStruct&)+0xc2>

00008414 <twinkle_update(LEDStruct&)>:
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    8414:	4b1c      	ldr	r3, [pc, #112]	; (8488 <twinkle_update(LEDStruct&)+0x74>)
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    8416:	4a1d      	ldr	r2, [pc, #116]	; (848c <twinkle_update(LEDStruct&)+0x78>)
	switch (update_var) {
    8418:	781b      	ldrb	r3, [r3, #0]
	
}


void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
    841a:	2100      	movs	r1, #0
    841c:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    841e:	2b04      	cmp	r3, #4
    8420:	d808      	bhi.n	8434 <twinkle_update(LEDStruct&)+0x20>
    8422:	e8df f003 	tbb	[pc, r3]
    8426:	2112      	.short	0x2112
    8428:	2703      	.short	0x2703
    842a:	09          	.byte	0x09
    842b:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
    842c:	4b18      	ldr	r3, [pc, #96]	; (8490 <twinkle_update(LEDStruct&)+0x7c>)
    842e:	881b      	ldrh	r3, [r3, #0]
    8430:	f880 3840 	strb.w	r3, [r0, #2112]	; 0x840
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8434:	f7f9 bed6 	b.w	21e4 <LEDDebug(LEDStruct&)>
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e
    8438:	4b15      	ldr	r3, [pc, #84]	; (8490 <twinkle_update(LEDStruct&)+0x7c>)
    843a:	881b      	ldrh	r3, [r3, #0]
    843c:	3300      	adds	r3, #0
    843e:	bf18      	it	ne
    8440:	2301      	movne	r3, #1
    8442:	f880 3842 	strb.w	r3, [r0, #2114]	; 0x842

	}
	LEDDebug(leds);
    8446:	f7f9 becd 	b.w	21e4 <LEDDebug(LEDStruct&)>

void twinkle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:
			leds.use_full_range = (bool)update_arg; //a
    844a:	4b11      	ldr	r3, [pc, #68]	; (8490 <twinkle_update(LEDStruct&)+0x7c>)
    844c:	881b      	ldrh	r3, [r3, #0]
    844e:	2b00      	cmp	r3, #0
    8450:	bf14      	ite	ne
    8452:	2301      	movne	r3, #1
    8454:	2300      	moveq	r3, #0
    8456:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    845a:	bf14      	ite	ne
    845c:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    845e:	234b      	moveq	r3, #75	; 0x4b
    8460:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8464:	f7f9 bebe 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:
			leds.use_full_range = (bool)update_arg; //a
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
    8468:	4b09      	ldr	r3, [pc, #36]	; (8490 <twinkle_update(LEDStruct&)+0x7c>)
    846a:	881b      	ldrh	r3, [r3, #0]
    846c:	f880 383f 	strb.w	r3, [r0, #2111]	; 0x83f
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8470:	f7f9 beb8 	b.w	21e4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1: leds.twinkle_speed			= (uint8_t)update_arg;	break;	//b
		case 2: leds.twinkle_density		= (uint8_t)update_arg;	break;	//c
		case 3:	leds.cool_like_incandescent = (bool)update_arg;		break;	//d
    8474:	4b06      	ldr	r3, [pc, #24]	; (8490 <twinkle_update(LEDStruct&)+0x7c>)
    8476:	881b      	ldrh	r3, [r3, #0]
    8478:	3300      	adds	r3, #0
    847a:	bf18      	it	ne
    847c:	2301      	movne	r3, #1
    847e:	f880 3841 	strb.w	r3, [r0, #2113]	; 0x841
		case 4: leds.auto_select_bg_color	= (bool)update_arg;		break;	//e

	}
	LEDDebug(leds);
    8482:	f7f9 beaf 	b.w	21e4 <LEDDebug(LEDStruct&)>
    8486:	bf00      	nop
    8488:	1fff9e5c 	.word	0x1fff9e5c
    848c:	1fff9605 	.word	0x1fff9605
    8490:	1fff9e54 	.word	0x1fff9e54

00008494 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>:
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    8494:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
    8496:	f891 483f 	ldrb.w	r4, [r1, #2111]	; 0x83f
    849a:	f1c4 0408 	rsb	r4, r4, #8
    849e:	fa22 f404 	lsr.w	r4, r2, r4
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
    84a2:	f3c4 2207 	ubfx	r2, r4, #8, #8
    84a6:	441a      	add	r2, r3
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    84a8:	460e      	mov	r6, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
    84aa:	b2d1      	uxtb	r1, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    84ac:	064f      	lsls	r7, r1, #25
	c.g = qsub8(c.g, cooling);
	c.b = qsub8(c.b, cooling * 2);
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
    84ae:	b085      	sub	sp, #20
    84b0:	4605      	mov	r5, r0
    84b2:	d55d      	bpl.n	8570 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xdc>
        offset = (uint8_t)255 - offset;
    84b4:	43c9      	mvns	r1, r1
    84b6:	b2c8      	uxtb	r0, r1
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    84b8:	f000 010f 	and.w	r1, r0, #15
    if( theta & 0x40) secoffset++;
    84bc:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    84be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    84c2:	4f2f      	ldr	r7, [pc, #188]	; (8580 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xec>)
    84c4:	1100      	asrs	r0, r0, #4
    84c6:	0040      	lsls	r0, r0, #1
    84c8:	eb07 0e00 	add.w	lr, r7, r0
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    84cc:	5c38      	ldrb	r0, [r7, r0]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    84ce:	f89e 7001 	ldrb.w	r7, [lr, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    84d2:	fb17 f101 	smulbb	r1, r7, r1
    84d6:	eb00 1121 	add.w	r1, r0, r1, asr #4
    84da:	b2c9      	uxtb	r1, r1
    if( theta & 0x80 ) y = -y;
    84dc:	0610      	lsls	r0, r2, #24
    84de:	bf48      	it	mi
    84e0:	4249      	negmi	r1, r1
    84e2:	b249      	sxtb	r1, r1
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
	uint16_t slowcycle16 = (ticks >> 8) + salt;
	slowcycle16 += sin8(slowcycle16);
	slowcycle16 = (slowcycle16 * 2053) + 1384;
    84e4:	3980      	subs	r1, #128	; 0x80
    84e6:	fa52 f281 	uxtab	r2, r2, r1
    84ea:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    84ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    84f2:	f502 62ad 	add.w	r2, r2, #1384	; 0x568
	uint8_t slowcycle8 = (slowcycle16 & 0xFF) + (slowcycle16 >> 8);
    84f6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    84fa:	f002 02ff 	and.w	r2, r2, #255	; 0xff

	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
    84fe:	f896 1840 	ldrb.w	r1, [r6, #2112]	; 0x840
    8502:	f3c2 0042 	ubfx	r0, r2, #1, #3
    8506:	4288      	cmp	r0, r1
    8508:	da2b      	bge.n	8562 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xce>
}

CRGB computeOneTwinkle(LEDStruct& leds, uint32_t ms, uint8_t salt)
{
	uint16_t ticks = ms >> (8 - leds.twinkle_speed);
	uint8_t fastcycle8 = ticks;
    850a:	b2e7      	uxtb	r7, r4
}


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
    850c:	2f55      	cmp	r7, #85	; 0x55
    850e:	d923      	bls.n	8558 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xc4>
		return i * 3;
	}
	else {
		i -= 86;
    8510:	f1a7 0156 	sub.w	r1, r7, #86	; 0x56
    8514:	b2c9      	uxtb	r1, r1
		return 255 - (i + (i / 2));
    8516:	eb01 0151 	add.w	r1, r1, r1, lsr #1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    851a:	1ad2      	subs	r2, r2, r3
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    851c:	43c9      	mvns	r1, r1
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    851e:	b2d2      	uxtb	r2, r2
	if (i < 86) {
		return i * 3;
	}
	else {
		i -= 86;
		return 255 - (i + (i / 2));
    8520:	b2c9      	uxtb	r1, r1
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
		c = ColorFromPalette(leds.current_palette, hue, bright, NOBLEND);
    8522:	2000      	movs	r0, #0
    8524:	460b      	mov	r3, r1
    8526:	9000      	str	r0, [sp, #0]
    8528:	f506 71e4 	add.w	r1, r6, #456	; 0x1c8
    852c:	a803      	add	r0, sp, #12
    852e:	f002 faa7 	bl	aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    8532:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8536:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    853a:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    853e:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    8540:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    8542:	70ab      	strb	r3, [r5, #2]
		if (leds.cool_like_incandescent == 1) {
    8544:	f896 3841 	ldrb.w	r3, [r6, #2113]	; 0x841
    8548:	b17b      	cbz	r3, 856a <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;
    854a:	0623      	lsls	r3, r4, #24
    854c:	d50d      	bpl.n	856a <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>
    854e:	4639      	mov	r1, r7
    8550:	4628      	mov	r0, r5
    8552:	f7f7 ff9d 	bl	490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.18]>
    8556:	e008      	b.n	856a <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xd6>


uint8_t attackDecayWave8(uint8_t i)
{
	if (i < 86) {
		return i * 3;
    8558:	eb07 0147 	add.w	r1, r7, r7, lsl #1
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
	CRGB c;
	if (bright > 0) {
    855c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8560:	d10b      	bne.n	857a <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0xe6>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    8562:	2300      	movs	r3, #0
    8564:	702b      	strb	r3, [r5, #0]
        g = (colorcode >>  8) & 0xFF;
    8566:	706b      	strb	r3, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    8568:	70ab      	strb	r3, [r5, #2]
	}
	else {
		c = CRGB::Black;
	}
	return c;
}
    856a:	4628      	mov	r0, r5
    856c:	b005      	add	sp, #20
    856e:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    8570:	f001 003f 	and.w	r0, r1, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    8574:	f001 010f 	and.w	r1, r1, #15
    8578:	e7a3      	b.n	84c2 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x2e>
	uint8_t bright = 0;
	if (((slowcycle8 & 0x0E) / 2) < leds.twinkle_density) {
		bright = attackDecayWave8(fastcycle8);
	}

	uint8_t hue = slowcycle8 - salt;
    857a:	1ad2      	subs	r2, r2, r3
    857c:	b2d2      	uxtb	r2, r2
    857e:	e7d0      	b.n	8522 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)+0x8e>
    8580:	0000ff10 	.word	0x0000ff10

00008584 <twinkle(LEDStruct&)>:
	return c;
}



void twinkle(LEDStruct& leds) {
    8584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8588:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	return c;
}



void twinkle(LEDStruct& leds) {
    858c:	b08b      	sub	sp, #44	; 0x2c
    858e:	4683      	mov	fp, r0
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8590:	2b00      	cmp	r3, #0
    8592:	d15e      	bne.n	8652 <twinkle(LEDStruct&)+0xce>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8594:	48d1      	ldr	r0, [pc, #836]	; (88dc <twinkle(LEDStruct&)+0x358>)
    8596:	8803      	ldrh	r3, [r0, #0]
    8598:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    859c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    85a0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    85a4:	3219      	adds	r2, #25
    85a6:	b292      	uxth	r2, r2
    85a8:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    85ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    85b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    85b4:	3319      	adds	r3, #25
    85b6:	b29b      	uxth	r3, r3
    85b8:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    85bc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    85c0:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    85c4:	3119      	adds	r1, #25
    85c6:	b289      	uxth	r1, r1
    85c8:	eb01 2441 	add.w	r4, r1, r1, lsl #9
    85cc:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    85d0:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    85d4:	3419      	adds	r4, #25
    85d6:	b2a4      	uxth	r4, r4
    85d8:	eb04 2544 	add.w	r5, r4, r4, lsl #9
    85dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    85e0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    85e4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    85e8:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    85ea:	3519      	adds	r5, #25
    85ec:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    85ee:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    85f2:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    85f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    85fa:	f3c2 16c0 	ubfx	r6, r2, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    85fe:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8602:	f3c1 1281 	ubfx	r2, r1, #6, #2
    8606:	121b      	asrs	r3, r3, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8608:	eb05 2115 	add.w	r1, r5, r5, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    860c:	8005      	strh	r5, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    860e:	3303      	adds	r3, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    8610:	2501      	movs	r5, #1
	leds.mode_type			= TWINKLE;
    8612:	271e      	movs	r7, #30
}



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
    8614:	f3c1 10c0 	ubfx	r0, r1, #7, #1
    8618:	f3c4 11c0 	ubfx	r1, r4, #7, #1

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    861c:	240f      	movs	r4, #15

	leds.use_full_range		= ufr;
    861e:	f88b 61c4 	strb.w	r6, [fp, #452]	; 0x1c4
    8622:	b2db      	uxtb	r3, r3
    8624:	3203      	adds	r2, #3
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
    8626:	f88b 522e 	strb.w	r5, [fp, #558]	; 0x22e
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
    862a:	f88b 522a 	strb.w	r5, [fp, #554]	; 0x22a
#ifndef TWINKLE_H
#define TWINKLE_H

void twinkle_init(LEDStruct& leds, bool ufr = random8(2), uint8_t ts = random8(3,6), uint8_t td = random8(3,7), bool cli = random8(2), bool asbg = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= TWINKLE;
    862e:	f88b 722d 	strb.w	r7, [fp, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    8632:	f88b 41c3 	strb.w	r4, [fp, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    8636:	2e00      	cmp	r6, #0
    8638:	f040 80e3 	bne.w	8802 <twinkle(LEDStruct&)+0x27e>
	else					 { leds.strip_range = ONE_SIDE; }
    863c:	244b      	movs	r4, #75	; 0x4b
    863e:	f8ab 433c 	strh.w	r4, [fp, #828]	; 0x33c

	leds.twinkle_speed			= ts;
    8642:	f88b 383f 	strb.w	r3, [fp, #2111]	; 0x83f
	leds.twinkle_density		= td;
    8646:	f88b 2840 	strb.w	r2, [fp, #2112]	; 0x840
	leds.cool_like_incandescent = cli;
    864a:	f88b 1841 	strb.w	r1, [fp, #2113]	; 0x841
	leds.auto_select_bg_color	= asbg;
    864e:	f88b 0842 	strb.w	r0, [fp, #2114]	; 0x842



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    8652:	4ba3      	ldr	r3, [pc, #652]	; (88e0 <twinkle(LEDStruct&)+0x35c>)
    8654:	781b      	ldrb	r3, [r3, #0]
    8656:	2b00      	cmp	r3, #0
    8658:	f040 80d7 	bne.w	880a <twinkle(LEDStruct&)+0x286>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    865c:	4aa1      	ldr	r2, [pc, #644]	; (88e4 <twinkle(LEDStruct&)+0x360>)

	uint32_t clock32 = millis();

	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
    865e:	f89b 3842 	ldrb.w	r3, [fp, #2114]	; 0x842
    8662:	6812      	ldr	r2, [r2, #0]
    8664:	9209      	str	r2, [sp, #36]	; 0x24
	return ret;
    8666:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8668:	9202      	str	r2, [sp, #8]
    866a:	b133      	cbz	r3, 867a <twinkle(LEDStruct&)+0xf6>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    866c:	f89b 11c8 	ldrb.w	r1, [fp, #456]	; 0x1c8
    8670:	f89b 31cb 	ldrb.w	r3, [fp, #459]	; 0x1cb
    8674:	428b      	cmp	r3, r1
    8676:	f000 80cc 	beq.w	8812 <twinkle(LEDStruct&)+0x28e>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    867a:	2300      	movs	r3, #0
    867c:	f88d 3018 	strb.w	r3, [sp, #24]
        g = (colorcode >>  8) & 0xFF;
    8680:	f88d 3019 	strb.w	r3, [sp, #25]
        b = (colorcode >>  0) & 0xFF;
    8684:	f88d 301a 	strb.w	r3, [sp, #26]
    8688:	9305      	str	r3, [sp, #20]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    868a:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    868e:	2b00      	cmp	r3, #0
    8690:	f000 8091 	beq.w	87b6 <twinkle(LEDStruct&)+0x232>
    8694:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    8698:	9303      	str	r3, [sp, #12]
    869a:	f04f 0a00 	mov.w	sl, #0
    869e:	f642 444a 	movw	r4, #11338	; 0x2c4a
    86a2:	e030      	b.n	8706 <twinkle(LEDStruct&)+0x182>
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    86a4:	9a05      	ldr	r2, [sp, #20]
    }

    /// this allows testing a CRGB for zero-ness
    inline operator bool() const __attribute__((always_inline))
    {
        return r || g || b;
    86a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
    86aa:	9704      	str	r7, [sp, #16]
    86ac:	1a9b      	subs	r3, r3, r2
    86ae:	00db      	lsls	r3, r3, #3
    86b0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
    86b4:	aa07      	add	r2, sp, #28
    86b6:	a906      	add	r1, sp, #24
    86b8:	a808      	add	r0, sp, #32
    86ba:	f1b8 0f00 	cmp.w	r8, #0
    86be:	d106      	bne.n	86ce <twinkle(LEDStruct&)+0x14a>
    86c0:	f89d 5019 	ldrb.w	r5, [sp, #25]
    86c4:	b91d      	cbnz	r5, 86ce <twinkle(LEDStruct&)+0x14a>

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
		if (deltabright >= 32 || (!bg)) {
    86c6:	f89d 501a 	ldrb.w	r5, [sp, #26]
    86ca:	2d00      	cmp	r5, #0
    86cc:	d063      	beq.n	8796 <twinkle(LEDStruct&)+0x212>
			leds.led_data[i] = c;
		}
		else if (deltabright > 0) {
    86ce:	f1b9 0f00 	cmp.w	r9, #0
    86d2:	f340 8088 	ble.w	87e6 <twinkle(LEDStruct&)+0x262>
			leds.led_data[i] = blend(bg, c, deltabright * 8);
    86d6:	f002 f9a3 	bl	aa20 <blend(CRGB const&, CRGB const&, unsigned char)>
    86da:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    86de:	eb0b 0302 	add.w	r3, fp, r2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    86e2:	f89d 5020 	ldrb.w	r5, [sp, #32]
        g = rhs.g;
    86e6:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
        b = rhs.b;
    86ea:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    86ee:	f80b 5002 	strb.w	r5, [fp, r2]
        g = rhs.g;
    86f2:	7058      	strb	r0, [r3, #1]
        b = rhs.b;
    86f4:	7099      	strb	r1, [r3, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    86f6:	f10a 0a01 	add.w	sl, sl, #1
    86fa:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    86fe:	fa1f fa8a 	uxth.w	sl, sl
    8702:	4553      	cmp	r3, sl
    8704:	d957      	bls.n	87b6 <twinkle(LEDStruct&)+0x232>
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    8706:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    870a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    870e:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
    8712:	b29b      	uxth	r3, r3
		uint16_t myclockoffset16 = PRNG16;
		PRNG16 = (uint16_t)(PRNG16 * 2053) + 1384;
    8714:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    8718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    871c:	f504 64ad 	add.w	r4, r4, #1384	; 0x568
    8720:	b2a4      	uxth	r4, r4
		uint8_t myspeedmultiplierQ5_3 = ((((PRNG16 & 0xFF) >> 4) + (PRNG16 & 0x0F)) & 0x0F) + 0x08;
		uint32_t myclock30 = (uint32_t)((clock32 * myspeedmultiplierQ5_3) >> 3) + myclockoffset16;
		uint8_t myunique8 = PRNG16 >> 8;

		CRGB c = computeOneTwinkle(leds, myclock30, myunique8);
    8722:	eb04 1214 	add.w	r2, r4, r4, lsr #4
    8726:	9902      	ldr	r1, [sp, #8]
    8728:	f002 020f 	and.w	r2, r2, #15
    872c:	3208      	adds	r2, #8
    872e:	fb01 f202 	mul.w	r2, r1, r2
    8732:	eb03 02d2 	add.w	r2, r3, r2, lsr #3
    8736:	4659      	mov	r1, fp
    8738:	0a23      	lsrs	r3, r4, #8
    873a:	a807      	add	r0, sp, #28
    873c:	f7ff feaa 	bl	8494 <computeOneTwinkle(LEDStruct&, unsigned long, unsigned char)>
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
    8740:	f89d 601d 	ldrb.w	r6, [sp, #29]
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    8744:	f89d 301e 	ldrb.w	r3, [sp, #30]
#if FASTLED_SCALE8_FIXED == 1
        const uint8_t eightyfive = 85;
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
    8748:	f89d e01c 	ldrb.w	lr, [sp, #28]
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    874c:	9301      	str	r3, [sp, #4]
    874e:	b230      	sxth	r0, r6
    8750:	461d      	mov	r5, r3
    8752:	fa0f f18e 	sxth.w	r1, lr
    8756:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    875a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    875e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8762:	b22f      	sxth	r7, r5
    8764:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8768:	4410      	add	r0, r2
    876a:	4419      	add	r1, r3
    876c:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    8770:	1200      	asrs	r0, r0, #8
    8772:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8776:	eb00 2221 	add.w	r2, r0, r1, asr #8
    877a:	443b      	add	r3, r7
    877c:	eb02 2323 	add.w	r3, r2, r3, asr #8

		uint8_t cbright = c.getAverageLight();
		int16_t deltabright = cbright - bg_bri;
    8780:	9a03      	ldr	r2, [sp, #12]
    8782:	b2db      	uxtb	r3, r3
    8784:	ebc2 0903 	rsb	r9, r2, r3
    8788:	eb0a 074a 	add.w	r7, sl, sl, lsl #1
		if (deltabright >= 32 || (!bg)) {
    878c:	f1b9 0f1f 	cmp.w	r9, #31
    8790:	eb0b 0c07 	add.w	ip, fp, r7
    8794:	dd86      	ble.n	86a4 <twinkle(LEDStruct&)+0x120>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    8796:	f80b e007 	strb.w	lr, [fp, r7]
        g = rhs.g;
        b = rhs.b;
    879a:	f89d 3004 	ldrb.w	r3, [sp, #4]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    879e:	f88c 6001 	strb.w	r6, [ip, #1]
        b = rhs.b;
    87a2:	f88c 3002 	strb.w	r3, [ip, #2]
	else {
		bg = CRGB::Black;
	}
	uint8_t bg_bri = bg.getAverageLight();

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    87a6:	f10a 0a01 	add.w	sl, sl, #1
    87aa:	f8bb 333c 	ldrh.w	r3, [fp, #828]	; 0x33c
    87ae:	fa1f fa8a 	uxth.w	sl, sl
    87b2:	4553      	cmp	r3, sl
    87b4:	d8a7      	bhi.n	8706 <twinkle(LEDStruct&)+0x182>
		else {
			leds.led_data[i] = bg;
		}
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    87b6:	f89b 31c4 	ldrb.w	r3, [fp, #452]	; 0x1c4
    87ba:	b98b      	cbnz	r3, 87e0 <twinkle(LEDStruct&)+0x25c>
    87bc:	465a      	mov	r2, fp
    87be:	f10b 00e1 	add.w	r0, fp, #225	; 0xe1
    87c2:	465b      	mov	r3, fp
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    87c4:	7819      	ldrb	r1, [r3, #0]
    87c6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    87ca:	7859      	ldrb	r1, [r3, #1]
    87cc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    87d0:	7899      	ldrb	r1, [r3, #2]
    87d2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    87d6:	3303      	adds	r3, #3
    87d8:	4283      	cmp	r3, r0
    87da:	f1a2 0203 	sub.w	r2, r2, #3
    87de:	d1f1      	bne.n	87c4 <twinkle(LEDStruct&)+0x240>
}
    87e0:	b00b      	add	sp, #44	; 0x2c
    87e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    87e6:	9904      	ldr	r1, [sp, #16]
        g = rhs.g;
    87e8:	f89d 2019 	ldrb.w	r2, [sp, #25]
        b = rhs.b;
    87ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    87f0:	f80b 8001 	strb.w	r8, [fp, r1]
    87f4:	eb0b 0c01 	add.w	ip, fp, r1
        g = rhs.g;
    87f8:	f88c 2001 	strb.w	r2, [ip, #1]
        b = rhs.b;
    87fc:	f88c 3002 	strb.w	r3, [ip, #2]
    8800:	e779      	b.n	86f6 <twinkle(LEDStruct&)+0x172>
	leds.mode_type			= TWINKLE;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    8802:	2496      	movs	r4, #150	; 0x96
    8804:	f8ab 433c 	strh.w	r4, [fp, #828]	; 0x33c
    8808:	e71b      	b.n	8642 <twinkle(LEDStruct&)+0xbe>



void twinkle(LEDStruct& leds) {
	if (!leds.mode_initialized) { twinkle_init(leds); }
	if (keyboard_update) { twinkle_update(leds); }
    880a:	4658      	mov	r0, fp
    880c:	f7ff fe02 	bl	8414 <twinkle_update(LEDStruct&)>
    8810:	e724      	b.n	865c <twinkle(LEDStruct&)+0xd8>
};


inline __attribute__((always_inline)) bool operator== (const CRGB& lhs, const CRGB& rhs)
{
    return (lhs.r == rhs.r) && (lhs.g == rhs.g) && (lhs.b == rhs.b);
    8812:	f89b 41cc 	ldrb.w	r4, [fp, #460]	; 0x1cc
    8816:	f89b 31c9 	ldrb.w	r3, [fp, #457]	; 0x1c9
    881a:	42a3      	cmp	r3, r4
    881c:	f47f af2d 	bne.w	867a <twinkle(LEDStruct&)+0xf6>
    8820:	f89b 51cd 	ldrb.w	r5, [fp, #461]	; 0x1cd
    8824:	f89b 31ca 	ldrb.w	r3, [fp, #458]	; 0x1ca
    8828:	42ab      	cmp	r3, r5
    882a:	f47f af26 	bne.w	867a <twinkle(LEDStruct&)+0xf6>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    882e:	b20e      	sxth	r6, r1
    8830:	b227      	sxth	r7, r4
    8832:	eb06 0286 	add.w	r2, r6, r6, lsl #2
    8836:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    883a:	b228      	sxth	r0, r5
    883c:	eb02 1e02 	add.w	lr, r2, r2, lsl #4
    8840:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    8844:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    8848:	44b6      	add	lr, r6
    884a:	443a      	add	r2, r7
    884c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8850:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    8854:	f3c2 2207 	ubfx	r2, r2, #8, #8
    8858:	4403      	add	r3, r0
#else
        const uint8_t eightyfive = 86;
#endif
        uint8_t avg = scale8_LEAVING_R1_DIRTY( r, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( g, eightyfive) + \
        scale8_LEAVING_R1_DIRTY( b, eightyfive);
    885a:	eb0e 0c02 	add.w	ip, lr, r2
    885e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8862:	449c      	add	ip, r3
    8864:	fa5f fc8c 	uxtb.w	ip, ip
	CRGB bg;

	if ((leds.auto_select_bg_color == 1) && (leds.current_palette[0] == leds.current_palette[1])) {
		bg = leds.current_palette[0];
		uint8_t bglight = bg.getAverageLight();
		if (bglight > 64) {
    8868:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    886c:	d86c      	bhi.n	8948 <twinkle(LEDStruct&)+0x3c4>
			bg.nscale8_video(16);
		}
		else if (bglight > 16) {
    886e:	f1bc 0f10 	cmp.w	ip, #16
    8872:	d939      	bls.n	88e8 <twinkle(LEDStruct&)+0x364>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8874:	2900      	cmp	r1, #0
    8876:	f000 808a 	beq.w	898e <twinkle(LEDStruct&)+0x40a>
    887a:	10b1      	asrs	r1, r6, #2
    887c:	3101      	adds	r1, #1
    887e:	b2c9      	uxtb	r1, r1
    8880:	b20b      	sxth	r3, r1
    8882:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8886:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    888a:	4413      	add	r3, r2
    888c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8890:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8894:	2c00      	cmp	r4, #0
    8896:	d078      	beq.n	898a <twinkle(LEDStruct&)+0x406>
    8898:	10bc      	asrs	r4, r7, #2
    889a:	3401      	adds	r4, #1
    889c:	b2e4      	uxtb	r4, r4
    889e:	b222      	sxth	r2, r4
    88a0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    88a4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    88a8:	440a      	add	r2, r1
    88aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
    88ae:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    88b2:	2d00      	cmp	r5, #0
    88b4:	d067      	beq.n	8986 <twinkle(LEDStruct&)+0x402>
    88b6:	1085      	asrs	r5, r0, #2
    88b8:	3501      	adds	r5, #1
    88ba:	b2ed      	uxtb	r5, r5
    88bc:	b229      	sxth	r1, r5
    88be:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    88c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    88c6:	4401      	add	r1, r0
    88c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
    88cc:	4413      	add	r3, r2
    88ce:	440b      	add	r3, r1
    88d0:	b2db      	uxtb	r3, r3
    88d2:	9305      	str	r3, [sp, #20]
    88d4:	f88d 501a 	strb.w	r5, [sp, #26]
    88d8:	e6d7      	b.n	868a <twinkle(LEDStruct&)+0x106>
    88da:	bf00      	nop
    88dc:	1fff8784 	.word	0x1fff8784
    88e0:	1fff9605 	.word	0x1fff9605
    88e4:	1fffa8f8 	.word	0x1fffa8f8
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    88e8:	2900      	cmp	r1, #0
    88ea:	d054      	beq.n	8996 <twinkle(LEDStruct&)+0x412>
    88ec:	f10e 0101 	add.w	r1, lr, #1
    88f0:	b2c9      	uxtb	r1, r1
    88f2:	b208      	sxth	r0, r1
    88f4:	eb00 0680 	add.w	r6, r0, r0, lsl #2
    88f8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
    88fc:	4430      	add	r0, r6
    88fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
    8902:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8906:	2c00      	cmp	r4, #0
    8908:	d043      	beq.n	8992 <twinkle(LEDStruct&)+0x40e>
    890a:	3201      	adds	r2, #1
    890c:	b2d4      	uxtb	r4, r2
    890e:	b222      	sxth	r2, r4
    8910:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8914:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8918:	440a      	add	r2, r1
    891a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    891e:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    8922:	2d00      	cmp	r5, #0
    8924:	d03d      	beq.n	89a2 <twinkle(LEDStruct&)+0x41e>
    8926:	3301      	adds	r3, #1
    8928:	b2dd      	uxtb	r5, r3
    892a:	b229      	sxth	r1, r5
    892c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
    8930:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8934:	4419      	add	r1, r3
    8936:	f3c1 2107 	ubfx	r1, r1, #8, #8
    893a:	1883      	adds	r3, r0, r2
    893c:	440b      	add	r3, r1
    893e:	b2db      	uxtb	r3, r3
    8940:	9305      	str	r3, [sp, #20]
    8942:	f88d 501a 	strb.w	r5, [sp, #26]
    8946:	e6a0      	b.n	868a <twinkle(LEDStruct&)+0x106>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8948:	b349      	cbz	r1, 899e <twinkle(LEDStruct&)+0x41a>
    894a:	1131      	asrs	r1, r6, #4
    894c:	3101      	adds	r1, #1
    894e:	b2c9      	uxtb	r1, r1
    8950:	b20b      	sxth	r3, r1
    8952:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8956:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    895a:	4413      	add	r3, r2
    895c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    8960:	f88d 1018 	strb.w	r1, [sp, #24]
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8964:	b1cc      	cbz	r4, 899a <twinkle(LEDStruct&)+0x416>
    8966:	113c      	asrs	r4, r7, #4
    8968:	3401      	adds	r4, #1
    896a:	b2e4      	uxtb	r4, r4
    896c:	b222      	sxth	r2, r4
    896e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8972:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    8976:	440a      	add	r2, r1
    8978:	f3c2 2207 	ubfx	r2, r2, #8, #8
    897c:	f88d 4019 	strb.w	r4, [sp, #25]
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    8980:	b10d      	cbz	r5, 8986 <twinkle(LEDStruct&)+0x402>
    8982:	1105      	asrs	r5, r0, #4
    8984:	e798      	b.n	88b8 <twinkle(LEDStruct&)+0x334>
    8986:	4629      	mov	r1, r5
    8988:	e7a0      	b.n	88cc <twinkle(LEDStruct&)+0x348>
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    898a:	4622      	mov	r2, r4
    898c:	e78f      	b.n	88ae <twinkle(LEDStruct&)+0x32a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    898e:	460b      	mov	r3, r1
    8990:	e77e      	b.n	8890 <twinkle(LEDStruct&)+0x30c>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    8992:	4622      	mov	r2, r4
    8994:	e7c3      	b.n	891e <twinkle(LEDStruct&)+0x39a>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    8996:	4608      	mov	r0, r1
    8998:	e7b3      	b.n	8902 <twinkle(LEDStruct&)+0x37e>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    899a:	4622      	mov	r2, r4
    899c:	e7ee      	b.n	897c <twinkle(LEDStruct&)+0x3f8>
///         THIS FUNCTION ALWAYS MODIFIES ITS ARGUMENTS IN PLACE
LIB8STATIC void nscale8x3_video( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
    uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
    r = (r == 0) ? 0 : (((int)r * (int)(scale) ) >> 8) + nonzeroscale;
    899e:	460b      	mov	r3, r1
    89a0:	e7de      	b.n	8960 <twinkle(LEDStruct&)+0x3dc>
    g = (g == 0) ? 0 : (((int)g * (int)(scale) ) >> 8) + nonzeroscale;
    b = (b == 0) ? 0 : (((int)b * (int)(scale) ) >> 8) + nonzeroscale;
    89a2:	4629      	mov	r1, r5
    89a4:	e7c9      	b.n	893a <twinkle(LEDStruct&)+0x3b6>
    89a6:	bf00      	nop

000089a8 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    89a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (leds.mode_name) {
    89ac:	f890 322c 	ldrb.w	r3, [r0, #556]	; 0x22c
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    89b0:	b085      	sub	sp, #20
    89b2:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    89b4:	2b1e      	cmp	r3, #30
    89b6:	f200 85c6 	bhi.w	9546 <switch_mode(LEDStruct&)+0xb9e>
    89ba:	e8df f013 	tbh	[pc, r3, lsl #1]
    89be:	0071      	.short	0x0071
    89c0:	028c0311 	.word	0x028c0311
    89c4:	015b0205 	.word	0x015b0205
    89c8:	00fe00f8 	.word	0x00fe00f8
    89cc:	014d0452 	.word	0x014d0452
    89d0:	001f03eb 	.word	0x001f03eb
    89d4:	049f039d 	.word	0x049f039d
    89d8:	006b040b 	.word	0x006b040b
    89dc:	04ee0540 	.word	0x04ee0540
    89e0:	05bf0153 	.word	0x05bf0153
    89e4:	05b505ba 	.word	0x05b505ba
    89e8:	05ab05b0 	.word	0x05ab05b0
    89ec:	05a105a6 	.word	0x05a105a6
    89f0:	0597059c 	.word	0x0597059c
    89f4:	058d0592 	.word	0x058d0592
    89f8:	03930398 	.word	0x03930398
			break;

		
		// Fire Functions -----------------------------------------------------------------------
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    89fc:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8a00:	2a00      	cmp	r2, #0
    8a02:	d147      	bne.n	8a94 <switch_mode(LEDStruct&)+0xec>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8a04:	4d9a      	ldr	r5, [pc, #616]	; (8c70 <switch_mode(LEDStruct&)+0x2c8>)
    8a06:	882b      	ldrh	r3, [r5, #0]
    8a08:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8a0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8a10:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8a14:	3019      	adds	r0, #25
    8a16:	b280      	uxth	r0, r0
    8a18:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    8a1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    8a20:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8a24:	3119      	adds	r1, #25
    8a26:	b289      	uxth	r1, r1
    8a28:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    8a2c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8a30:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8a34:	3319      	adds	r3, #25
    8a36:	b29b      	uxth	r3, r3
    8a38:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    8a3c:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8a40:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8a44:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8a48:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8a4c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    8a50:	b2c7      	uxtb	r7, r0
    8a52:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8a54:	3619      	adds	r6, #25
    8a56:	b2db      	uxtb	r3, r3
    8a58:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    8a5c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    8a60:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    8a64:	b2b6      	uxth	r6, r6
    8a66:	1188      	asrs	r0, r1, #6
    8a68:	1199      	asrs	r1, r3, #6
    8a6a:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8a6e:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    8a72:	3032      	adds	r0, #50	; 0x32
    8a74:	f3c7 1781 	ubfx	r7, r7, #6, #2
    8a78:	313c      	adds	r1, #60	; 0x3c
    8a7a:	121b      	asrs	r3, r3, #8
    8a7c:	b2c0      	uxtb	r0, r0
    8a7e:	3701      	adds	r7, #1
    8a80:	b2c9      	uxtb	r1, r1
    8a82:	3314      	adds	r3, #20
    8a84:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    8a88:	b2db      	uxtb	r3, r3
    8a8a:	4611      	mov	r1, r2
    8a8c:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8a8e:	802e      	strh	r6, [r5, #0]
    8a90:	f7fb fc84 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    8a94:	4620      	mov	r0, r4
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    8a96:	b005      	add	sp, #20
    8a98:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    8a9c:	f7fb bd22 	b.w	44e4 <fire(LEDStruct&)>
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions -----------------------------------------------------------------------
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    8aa0:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    8aa4:	2900      	cmp	r1, #0
    8aa6:	f040 8082 	bne.w	8bae <switch_mode(LEDStruct&)+0x206>
    8aaa:	4871      	ldr	r0, [pc, #452]	; (8c70 <switch_mode(LEDStruct&)+0x2c8>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8aac:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
    8ab0:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8ab2:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    8ab6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8aba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8abe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ac2:	3319      	adds	r3, #25
    8ac4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8ac8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8acc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ad0:	3319      	adds	r3, #25
    8ad2:	b29b      	uxth	r3, r3
    8ad4:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    8ad8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    8adc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8ae0:	3519      	adds	r5, #25
    8ae2:	b2ad      	uxth	r5, r5
    8ae4:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    8ae8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    8aec:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8af0:	3219      	adds	r2, #25
    8af2:	b292      	uxth	r2, r2
    8af4:	eb02 2c42 	add.w	ip, r2, r2, lsl #9
    8af8:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    8afc:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    8b00:	f10c 0c19 	add.w	ip, ip, #25
    8b04:	fa1f fc8c 	uxth.w	ip, ip
    8b08:	eb0c 264c 	add.w	r6, ip, ip, lsl #9
    8b0c:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
    8b10:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    8b14:	3619      	adds	r6, #25
    8b16:	b2b6      	uxth	r6, r6
    8b18:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    8b1c:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8b20:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    8b24:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    8b28:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8b2c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8b30:	b2ed      	uxtb	r5, r5
	leds.juggle_fade		 = jf;
    8b32:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b34:	b2ff      	uxtb	r7, r7
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8b36:	eb0c 231c 	add.w	r3, ip, ip, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8b3a:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
    8b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	leds.juggle_fade		 = jf;
    8b42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8b46:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b4a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8b4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8b52:	11ad      	asrs	r5, r5, #6
	leds.juggle_fade		 = jf;
    8b54:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8b56:	3508      	adds	r5, #8
	leds.juggle_fade		 = jf;
    8b58:	3220      	adds	r2, #32
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b5a:	123f      	asrs	r7, r7, #8
    8b5c:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8b5e:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    8b62:	f884 1236 	strb.w	r1, [r4, #566]	; 0x236
    8b66:	eb0e 211e 	add.w	r1, lr, lr, lsr #8
	leds.juggle_numdots 	 = jn;
    8b6a:	3701      	adds	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8b6c:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8b6e:	f3c6 16c0 	ubfx	r6, r6, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8b72:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8b76:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8b7a:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8b7e:	2501      	movs	r5, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8b80:	220f      	movs	r2, #15

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8b82:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8b86:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8b8a:	f8a0 e000 	strh.w	lr, [r0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8b8e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8b92:	f884 6234 	strb.w	r6, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8b96:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8b9a:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8b9e:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8ba2:	b126      	cbz	r6, 8bae <switch_mode(LEDStruct&)+0x206>
    8ba4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8ba8:	40ab      	lsls	r3, r5
    8baa:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    8bae:	4620      	mov	r0, r4
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    8bb0:	b005      	add	sp, #20
    8bb2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    8bb6:	f7fa ba99 	b.w	30ec <juggle(LEDStruct&)>
			break;


		// Rainbow March Functions -----------------------------------------------------------------------
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    8bba:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8bbe:	2a00      	cmp	r2, #0
    8bc0:	d14a      	bne.n	8c58 <switch_mode(LEDStruct&)+0x2b0>
    8bc2:	482b      	ldr	r0, [pc, #172]	; (8c70 <switch_mode(LEDStruct&)+0x2c8>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    8bc4:	f884 222a 	strb.w	r2, [r4, #554]	; 0x22a
    8bc8:	8803      	ldrh	r3, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    8bca:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
    8bce:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8bd2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8bd6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8bda:	3319      	adds	r3, #25
    8bdc:	b29b      	uxth	r3, r3
    8bde:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8be2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8be6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8bea:	3219      	adds	r2, #25
    8bec:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8bee:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8bf2:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8bf4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8bf8:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8bfc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c00:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c04:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8c08:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c0a:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c0c:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c0e:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c10:	eb01 2511 	add.w	r5, r1, r1, lsr #8
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    8c14:	2701      	movs	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c16:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    8c18:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    8c1c:	2606      	movs	r6, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c1e:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8c20:	42bb      	cmp	r3, r7

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8c22:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    8c26:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    8c2a:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= RAINBOW_MARCH;
    8c2e:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    8c32:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    8c36:	f000 8489 	beq.w	954c <switch_mode(LEDStruct&)+0xba4>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8c3a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8c3e:	b2d2      	uxtb	r2, r2
    8c40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8c44:	1212      	asrs	r2, r2, #8
    8c46:	443a      	add	r2, r7
    8c48:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    8c4a:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    8c4e:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    8c52:	4620      	mov	r0, r4
    8c54:	f7f9 fac6 	bl	21e4 <LEDDebug(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    8c58:	4620      	mov	r0, r4
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    8c5a:	b005      	add	sp, #20
    8c5c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    8c60:	f7fb bad0 	b.w	4204 <rainbow_march(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    8c64:	b005      	add	sp, #20
    8c66:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Colorwave, Pride, Pacifica Functions -----------------------------------------------------------------------
		case COLORWAVE:
			colorwave(leds);
    8c6a:	f7fe b8d9 	b.w	6e20 <colorwave(LEDStruct&)>
    8c6e:	bf00      	nop
    8c70:	1fff8784 	.word	0x1fff8784
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_HALF:
			if (!leds.mode_initialized) { juggle_init(leds); }
    8c74:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8c78:	2b00      	cmp	r3, #0
    8c7a:	f040 809f 	bne.w	8dbc <switch_mode(LEDStruct&)+0x414>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8c7e:	4ed7      	ldr	r6, [pc, #860]	; (8fdc <switch_mode(LEDStruct&)+0x634>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8c80:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    8c84:	8833      	ldrh	r3, [r6, #0]
    8c86:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8c8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8c8e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8c92:	3019      	adds	r0, #25
    8c94:	b280      	uxth	r0, r0
    8c96:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    8c9a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    8c9e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8ca2:	3519      	adds	r5, #25
    8ca4:	b2ad      	uxth	r5, r5
    8ca6:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    8caa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8cae:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8cb2:	3319      	adds	r3, #25
    8cb4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8cb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8cbc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8cc0:	3319      	adds	r3, #25
    8cc2:	b29b      	uxth	r3, r3
    8cc4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    8cc8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    8ccc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    8cd0:	3119      	adds	r1, #25
    8cd2:	b289      	uxth	r1, r1
    8cd4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    8cd8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    8cdc:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8ce0:	3219      	adds	r2, #25
    8ce2:	b292      	uxth	r2, r2
    8ce4:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    8ce8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    8cec:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    8cf0:	3719      	adds	r7, #25
    8cf2:	b2bf      	uxth	r7, r7
    8cf4:	eb07 2e47 	add.w	lr, r7, r7, lsl #9
    8cf8:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
    8cfc:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8d00:	f10e 0e19 	add.w	lr, lr, #25
    8d04:	fa1f fe8e 	uxth.w	lr, lr
    8d08:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    8d0c:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d10:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    8d14:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    8d18:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d1c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d20:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
    8d22:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    8d24:	b2d2      	uxtb	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d26:	eb07 2717 	add.w	r7, r7, r7, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d2a:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	leds.juggle_beat		 = jb;
    8d32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8d36:	f3c7 17c0 	ubfx	r7, r7, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d3a:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_fade		 = jf;
    8d3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d42:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8d46:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d4a:	ea4f 2923 	mov.w	r9, r3, asr #8
	leds.juggle_beat		 = jb;
    8d4e:	ea4f 18a1 	mov.w	r8, r1, asr #6
	leds.juggle_fade		 = jf;
    8d52:	1112      	asrs	r2, r2, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8d54:	1c7b      	adds	r3, r7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8d56:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    8d5a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8d5e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    8d62:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    8d66:	f109 0701 	add.w	r7, r9, #1
	leds.juggle_beat		 = jb;
    8d6a:	f108 0808 	add.w	r8, r8, #8
	leds.juggle_fade		 = jf;
    8d6e:	f102 0920 	add.w	r9, r2, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8d72:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8d74:	f3ce 12c0 	ubfx	r2, lr, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8d78:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    8d7c:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8d80:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8d82:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;
    8d86:	250f      	movs	r5, #15

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8d88:	f884 7230 	strb.w	r7, [r4, #560]	; 0x230
	leds.juggle_beat		 = jb;
    8d8c:	f884 8231 	strb.w	r8, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8d90:	f884 9232 	strb.w	r9, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    8d94:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8d98:	f8a6 c000 	strh.w	ip, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8d9c:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8da0:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8da4:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8da8:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8dac:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8db0:	b122      	cbz	r2, 8dbc <switch_mode(LEDStruct&)+0x414>
    8db2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8db6:	4083      	lsls	r3, r0
    8db8:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
			juggle_half(leds);
    8dbc:	4620      	mov	r0, r4
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    8dbe:	b005      	add	sp, #20
    8dc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			juggle(leds);
			break;

		case JUGGLE_HALF:
			if (!leds.mode_initialized) { juggle_init(leds); }
			juggle_half(leds);
    8dc4:	f7fa bdd0 	b.w	3968 <juggle_half(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    8dc8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    8dcc:	2b00      	cmp	r3, #0
    8dce:	f47f aeee 	bne.w	8bae <switch_mode(LEDStruct&)+0x206>
    8dd2:	4982      	ldr	r1, [pc, #520]	; (8fdc <switch_mode(LEDStruct&)+0x634>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8dd4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    8dd8:	880b      	ldrh	r3, [r1, #0]
    8dda:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8dde:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8de2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8de6:	3319      	adds	r3, #25
    8de8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8dec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8df0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8df4:	3319      	adds	r3, #25
    8df6:	b29b      	uxth	r3, r3
    8df8:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8dfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8e00:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8e04:	3019      	adds	r0, #25
    8e06:	b280      	uxth	r0, r0
    8e08:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    8e0c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8e10:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8e14:	3219      	adds	r2, #25
    8e16:	b292      	uxth	r2, r2
    8e18:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    8e1c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    8e20:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8e24:	f10e 0e19 	add.w	lr, lr, #25
    8e28:	fa1f fe8e 	uxth.w	lr, lr
    8e2c:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    8e30:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    8e34:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8e38:	3519      	adds	r5, #25
    8e3a:	b2ad      	uxth	r5, r5
    8e3c:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8e40:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8e44:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8e48:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8e4c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8e50:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8e52:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    8e56:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    8e58:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8e5a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8e5e:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8e62:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    8e64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    8e68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8e6c:	1236      	asrs	r6, r6, #8
    8e6e:	b2bf      	uxth	r7, r7
    8e70:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8e72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8e76:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    8e78:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8e7a:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    8e7c:	3220      	adds	r2, #32
    8e7e:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8e80:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8e84:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    8e88:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8e8c:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8e8e:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8e92:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8e96:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8e9a:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8e9e:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8ea0:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8ea2:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8ea6:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8ea8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8eac:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8eb0:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8eb4:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8eb8:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    8ebc:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8ec0:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8ec4:	2d00      	cmp	r5, #0
    8ec6:	f43f ae72 	beq.w	8bae <switch_mode(LEDStruct&)+0x206>
    8eca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8ece:	4083      	lsls	r3, r0
    8ed0:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    8ed4:	e66b      	b.n	8bae <switch_mode(LEDStruct&)+0x206>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    8ed6:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8eda:	2a00      	cmp	r2, #0
    8edc:	f47f ae67 	bne.w	8bae <switch_mode(LEDStruct&)+0x206>
    8ee0:	493e      	ldr	r1, [pc, #248]	; (8fdc <switch_mode(LEDStruct&)+0x634>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8ee2:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    8ee6:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    8ee8:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    8eec:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8ef4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8ef8:	3319      	adds	r3, #25
    8efa:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8efe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8f02:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    8f06:	3319      	adds	r3, #25
    8f08:	b29b      	uxth	r3, r3
    8f0a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    8f0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8f12:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    8f16:	3019      	adds	r0, #25
    8f18:	b280      	uxth	r0, r0
    8f1a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    8f1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    8f22:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    8f26:	3219      	adds	r2, #25
    8f28:	b292      	uxth	r2, r2
    8f2a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    8f2e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    8f32:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    8f36:	f10e 0e19 	add.w	lr, lr, #25
    8f3a:	fa1f fe8e 	uxth.w	lr, lr
    8f3e:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    8f42:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    8f46:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    8f4a:	3519      	adds	r5, #25
    8f4c:	b2ad      	uxth	r5, r5
    8f4e:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8f52:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8f56:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8f5a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    8f5e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8f62:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8f64:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    8f68:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    8f6a:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8f6c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8f70:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8f74:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    8f76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    8f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8f7e:	1236      	asrs	r6, r6, #8
    8f80:	b2bf      	uxth	r7, r7
    8f82:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8f84:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    8f88:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    8f8a:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8f8c:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    8f8e:	3220      	adds	r2, #32
    8f90:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    8f92:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    8f96:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    8f9a:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    8f9e:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    8fa0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8fa4:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    8fa8:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    8fac:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8fb0:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8fb2:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    8fb4:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    8fb8:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    8fba:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    8fbe:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    8fc2:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    8fc6:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    8fca:	f884 0236 	strb.w	r0, [r4, #566]	; 0x236
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    8fce:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    8fd2:	2d00      	cmp	r5, #0
    8fd4:	f47f af79 	bne.w	8eca <switch_mode(LEDStruct&)+0x522>
    8fd8:	e5e9      	b.n	8bae <switch_mode(LEDStruct&)+0x206>
    8fda:	bf00      	nop
    8fdc:	1fff8784 	.word	0x1fff8784
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    8fe0:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    8fe4:	2a00      	cmp	r2, #0
    8fe6:	f47f ade2 	bne.w	8bae <switch_mode(LEDStruct&)+0x206>
    8fea:	49c3      	ldr	r1, [pc, #780]	; (92f8 <switch_mode(LEDStruct&)+0x950>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    8fec:	f880 222d 	strb.w	r2, [r0, #557]	; 0x22d
    8ff0:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    8ff2:	f880 2236 	strb.w	r2, [r0, #566]	; 0x236
    8ff6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    8ffa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8ffe:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9002:	3319      	adds	r3, #25
    9004:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9008:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    900c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9010:	3319      	adds	r3, #25
    9012:	b29b      	uxth	r3, r3
    9014:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    9018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    901c:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9020:	3019      	adds	r0, #25
    9022:	b280      	uxth	r0, r0
    9024:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    9028:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    902c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9030:	3219      	adds	r2, #25
    9032:	b292      	uxth	r2, r2
    9034:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    9038:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    903c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    9040:	f10e 0e19 	add.w	lr, lr, #25
    9044:	fa1f fe8e 	uxth.w	lr, lr
    9048:	eb0e 254e 	add.w	r5, lr, lr, lsl #9
    904c:	eb0e 0585 	add.w	r5, lr, r5, lsl #2
    9050:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    9054:	3519      	adds	r5, #25
    9056:	b2ad      	uxth	r5, r5
    9058:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    905c:	eb03 2613 	add.w	r6, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9060:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9064:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9068:	eb02 2212 	add.w	r2, r2, r2, lsr #8
	leds.juggle_numdots 	 = jn;
    906c:	b2f6      	uxtb	r6, r6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    906e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    9072:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    9074:	b2d2      	uxtb	r2, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9076:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    907a:	eb0e 231e 	add.w	r3, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    907e:	3719      	adds	r7, #25
	leds.juggle_beat		 = jb;
    9080:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.juggle_fade		 = jf;
    9084:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    9088:	1236      	asrs	r6, r6, #8
    908a:	b2bf      	uxth	r7, r7
    908c:	3601      	adds	r6, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    908e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.juggle_beat		 = jb;
    9092:	1180      	asrs	r0, r0, #6
	leds.juggle_fade		 = jf;
    9094:	1112      	asrs	r2, r2, #4
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    9096:	3008      	adds	r0, #8
	leds.juggle_fade		 = jf;
    9098:	3220      	adds	r2, #32
    909a:	3301      	adds	r3, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    909c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    90a0:	f884 6230 	strb.w	r6, [r4, #560]	; 0x230
    90a4:	eb07 2617 	add.w	r6, r7, r7, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    90a8:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    90aa:	f3c5 15c0 	ubfx	r5, r5, #7, #1
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    90ae:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    90b2:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
	leds.juggle_fade		 = jf;
    90b6:	f884 2232 	strb.w	r2, [r4, #562]	; 0x232
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    90ba:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    90bc:	220f      	movs	r2, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    90be:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    90c2:	800f      	strh	r7, [r1, #0]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    90c4:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    90c8:	f884 5234 	strb.w	r5, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    90cc:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    90d0:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    90d4:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    90d8:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    90dc:	2d00      	cmp	r5, #0
    90de:	f47f aef4 	bne.w	8eca <switch_mode(LEDStruct&)+0x522>
    90e2:	e564      	b.n	8bae <switch_mode(LEDStruct&)+0x206>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    90e4:	b005      	add	sp, #20
    90e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			lightsaber(leds);
			break;

		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
    90ea:	f7ff ba4b 	b.w	8584 <twinkle(LEDStruct&)>
			break;
	}
}
    90ee:	b005      	add	sp, #20
    90f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			bounce(leds);
			break;

		// Lightsaber Functions ---------------------------------------------------------------------
		case LIGHTSABER:
			lightsaber(leds);
    90f4:	f7fe bfc0 	b.w	8078 <lightsaber(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    90f8:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    90fc:	2a00      	cmp	r2, #0
    90fe:	f47f acc9 	bne.w	8a94 <switch_mode(LEDStruct&)+0xec>
    9102:	4d7d      	ldr	r5, [pc, #500]	; (92f8 <switch_mode(LEDStruct&)+0x950>)
    9104:	882b      	ldrh	r3, [r5, #0]
    9106:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    910a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    910e:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9112:	3019      	adds	r0, #25
    9114:	b280      	uxth	r0, r0
    9116:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    911a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    911e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9122:	3119      	adds	r1, #25
    9124:	b289      	uxth	r1, r1
    9126:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    912a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    912e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9132:	3319      	adds	r3, #25
    9134:	b29b      	uxth	r3, r3
    9136:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    913a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    913e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9142:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9146:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    914a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    914e:	b2c7      	uxtb	r7, r0
    9150:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9152:	3619      	adds	r6, #25
    9154:	b2db      	uxtb	r3, r3
    9156:	b2b6      	uxth	r6, r6
    9158:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    915c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    9160:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9164:	1188      	asrs	r0, r1, #6
    9166:	1199      	asrs	r1, r3, #6
    9168:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    916c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9170:	3032      	adds	r0, #50	; 0x32
    9172:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9176:	313c      	adds	r1, #60	; 0x3c
    9178:	121b      	asrs	r3, r3, #8
    917a:	b2c0      	uxtb	r0, r0
    917c:	3701      	adds	r7, #1
    917e:	b2c9      	uxtb	r1, r1
    9180:	3314      	adds	r3, #20
    9182:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    9186:	b2db      	uxtb	r3, r3
    9188:	2101      	movs	r1, #1
    918a:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    918c:	802e      	strh	r6, [r5, #0]
    918e:	f7fb f905 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    9192:	e47f      	b.n	8a94 <switch_mode(LEDStruct&)+0xec>
		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
			break;

		case RAINBOW_1:		// custom 1, rainbows slowly emanating from center
			if (!leds.mode_initialized) { leds.this_dir = 0; rainbow_init(leds, 1, 4, 2, 0); }
    9194:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    9198:	2b00      	cmp	r3, #0
    919a:	f47f ad5d 	bne.w	8c58 <switch_mode(LEDStruct&)+0x2b0>
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    919e:	2201      	movs	r2, #1
	leds.mode_type			= RAINBOW_MARCH;
    91a0:	2606      	movs	r6, #6
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    91a2:	250f      	movs	r5, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    91a4:	2004      	movs	r0, #4
    leds.rainbow_rot    = rr;
    91a6:	2102      	movs	r1, #2

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    91a8:	f884 0279 	strb.w	r0, [r4, #633]	; 0x279
    91ac:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    91b0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    91b4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    91b8:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    91bc:	f884 227b 	strb.w	r2, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    91c0:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    91c4:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    91c8:	f884 1278 	strb.w	r1, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    91cc:	4620      	mov	r0, r4
    91ce:	f7f9 f809 	bl	21e4 <LEDDebug(LEDStruct&)>
    91d2:	e541      	b.n	8c58 <switch_mode(LEDStruct&)+0x2b0>
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    91d4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    91d8:	2b00      	cmp	r3, #0
    91da:	f47f ac5b 	bne.w	8a94 <switch_mode(LEDStruct&)+0xec>
    91de:	4d46      	ldr	r5, [pc, #280]	; (92f8 <switch_mode(LEDStruct&)+0x950>)
    91e0:	882b      	ldrh	r3, [r5, #0]
    91e2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    91e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    91ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    91ee:	3319      	adds	r3, #25
    91f0:	b29b      	uxth	r3, r3
    91f2:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    91f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    91fa:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    91fe:	3119      	adds	r1, #25
    9200:	b289      	uxth	r1, r1
    9202:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    9206:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    920a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    920e:	3219      	adds	r2, #25
    9210:	b292      	uxth	r2, r2
    9212:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    9216:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    921a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    921e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9222:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9226:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    922a:	b2db      	uxtb	r3, r3
    922c:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    922e:	3619      	adds	r6, #25
    9230:	b2d2      	uxtb	r2, r2
    9232:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    9236:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    923a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    923e:	b2b6      	uxth	r6, r6
    9240:	1188      	asrs	r0, r1, #6
    9242:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9246:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9248:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    924c:	3032      	adds	r0, #50	; 0x32
    924e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9252:	313c      	adds	r1, #60	; 0x3c
    9254:	121b      	asrs	r3, r3, #8
    9256:	b2c0      	uxtb	r0, r0
    9258:	3701      	adds	r7, #1
    925a:	b2c9      	uxtb	r1, r1
    925c:	3314      	adds	r3, #20
    925e:	2201      	movs	r2, #1
    9260:	e410      	b.n	8a84 <switch_mode(LEDStruct&)+0xdc>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    9262:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    9266:	2b00      	cmp	r3, #0
    9268:	f47f acf6 	bne.w	8c58 <switch_mode(LEDStruct&)+0x2b0>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    926c:	4822      	ldr	r0, [pc, #136]	; (92f8 <switch_mode(LEDStruct&)+0x950>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    926e:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    9272:	8803      	ldrh	r3, [r0, #0]
    9274:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9278:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    927c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9280:	3319      	adds	r3, #25
    9282:	b29b      	uxth	r3, r3
    9284:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    9288:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    928c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9290:	3219      	adds	r2, #25
    9292:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9294:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    9298:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    929a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    929e:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    92a2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    92a6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    92aa:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    92ae:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    92b0:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    92b2:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    92b4:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    92b6:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    92b8:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    92bc:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    92be:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    92c2:	2706      	movs	r7, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    92c4:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    92c6:	42b3      	cmp	r3, r6

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    92c8:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    92cc:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    92d0:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    92d4:	f884 627b 	strb.w	r6, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    92d8:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    92dc:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    92e0:	f000 8134 	beq.w	954c <switch_mode(LEDStruct&)+0xba4>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    92e4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    92e8:	b2d2      	uxtb	r2, r2
    92ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    92ee:	1212      	asrs	r2, r2, #8
    92f0:	4432      	add	r2, r6
    92f2:	b2d2      	uxtb	r2, r2
    92f4:	e4a9      	b.n	8c4a <switch_mode(LEDStruct&)+0x2a2>
    92f6:	bf00      	nop
    92f8:	1fff8784 	.word	0x1fff8784
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    92fc:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
    9300:	2900      	cmp	r1, #0
    9302:	f47f abc7 	bne.w	8a94 <switch_mode(LEDStruct&)+0xec>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9306:	4d93      	ldr	r5, [pc, #588]	; (9554 <switch_mode(LEDStruct&)+0xbac>)
    9308:	882b      	ldrh	r3, [r5, #0]
    930a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    930e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9312:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9316:	3019      	adds	r0, #25
    9318:	b280      	uxth	r0, r0
    931a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    931e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    9322:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    9326:	3219      	adds	r2, #25
    9328:	b292      	uxth	r2, r2
    932a:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    932e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9332:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9336:	3319      	adds	r3, #25
    9338:	b29b      	uxth	r3, r3
    933a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    933e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9342:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9346:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    934a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    934e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9352:	b2c7      	uxtb	r7, r0
    9354:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9356:	3619      	adds	r6, #25
    9358:	b2db      	uxtb	r3, r3
    935a:	b2b6      	uxth	r6, r6
    935c:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    9360:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    9364:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9368:	1190      	asrs	r0, r2, #6
    936a:	119a      	asrs	r2, r3, #6
    936c:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9370:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9374:	3032      	adds	r0, #50	; 0x32
    9376:	f3c7 1781 	ubfx	r7, r7, #6, #2
    937a:	323c      	adds	r2, #60	; 0x3c
    937c:	121b      	asrs	r3, r3, #8
    937e:	b2c0      	uxtb	r0, r0
    9380:	3701      	adds	r7, #1
    9382:	b2d2      	uxtb	r2, r2
    9384:	3314      	adds	r3, #20
    9386:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    938a:	b2db      	uxtb	r3, r3
    938c:	2201      	movs	r2, #1
    938e:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9390:	802e      	strh	r6, [r5, #0]
    9392:	f7fb f803 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    9396:	f7ff bb7d 	b.w	8a94 <switch_mode(LEDStruct&)+0xec>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror must be off
    939a:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    939e:	2a00      	cmp	r2, #0
    93a0:	d147      	bne.n	9432 <switch_mode(LEDStruct&)+0xa8a>
    93a2:	4d6c      	ldr	r5, [pc, #432]	; (9554 <switch_mode(LEDStruct&)+0xbac>)
    93a4:	882b      	ldrh	r3, [r5, #0]
    93a6:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    93aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    93ae:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    93b2:	3019      	adds	r0, #25
    93b4:	b280      	uxth	r0, r0
    93b6:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    93ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    93be:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    93c2:	3119      	adds	r1, #25
    93c4:	b289      	uxth	r1, r1
    93c6:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    93ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    93ce:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    93d2:	3319      	adds	r3, #25
    93d4:	b29b      	uxth	r3, r3
    93d6:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    93da:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    93de:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    93e2:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    93e6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    93ea:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    93ee:	b2c7      	uxtb	r7, r0
    93f0:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    93f2:	3619      	adds	r6, #25
    93f4:	b2db      	uxtb	r3, r3
    93f6:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    93fa:	b2b6      	uxth	r6, r6
    93fc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    9400:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    9404:	1188      	asrs	r0, r1, #6
    9406:	1199      	asrs	r1, r3, #6
    9408:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    940c:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    9410:	3032      	adds	r0, #50	; 0x32
    9412:	f3c7 1781 	ubfx	r7, r7, #6, #2
    9416:	313c      	adds	r1, #60	; 0x3c
    9418:	121b      	asrs	r3, r3, #8
    941a:	b2c0      	uxtb	r0, r0
    941c:	b2c9      	uxtb	r1, r1
    941e:	3701      	adds	r7, #1
    9420:	3314      	adds	r3, #20
    9422:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    9426:	b2db      	uxtb	r3, r3
    9428:	2101      	movs	r1, #1
    942a:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    942c:	802e      	strh	r6, [r5, #0]
    942e:	f7fa ffb5 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
    9432:	4620      	mov	r0, r4
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9434:	b005      	add	sp, #20
    9436:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
			torch(leds);
    943a:	f7fb bb47 	b.w	4acc <torch(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror must be off
    943e:	f890 222e 	ldrb.w	r2, [r0, #558]	; 0x22e
    9442:	2a00      	cmp	r2, #0
    9444:	d1f5      	bne.n	9432 <switch_mode(LEDStruct&)+0xa8a>
    9446:	4d43      	ldr	r5, [pc, #268]	; (9554 <switch_mode(LEDStruct&)+0xbac>)
    9448:	882b      	ldrh	r3, [r5, #0]
    944a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    944e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9452:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    9456:	3019      	adds	r0, #25
    9458:	b280      	uxth	r0, r0
    945a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    945e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    9462:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    9466:	3119      	adds	r1, #25
    9468:	b289      	uxth	r1, r1
    946a:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    946e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    9472:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    9476:	3319      	adds	r3, #25
    9478:	b29b      	uxth	r3, r3
    947a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    947e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    9482:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    9486:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    948a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    948e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    9492:	b2c7      	uxtb	r7, r0
    9494:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    9496:	3619      	adds	r6, #25
    9498:	b2db      	uxtb	r3, r3
    949a:	b2b6      	uxth	r6, r6
    949c:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    94a0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    94a4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    94a8:	1188      	asrs	r0, r1, #6
    94aa:	1199      	asrs	r1, r3, #6
    94ac:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    94b0:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    94b4:	3032      	adds	r0, #50	; 0x32
    94b6:	f3c7 1781 	ubfx	r7, r7, #6, #2
    94ba:	313c      	adds	r1, #60	; 0x3c
    94bc:	121b      	asrs	r3, r3, #8
    94be:	b2c0      	uxtb	r0, r0
    94c0:	3701      	adds	r7, #1
    94c2:	b2c9      	uxtb	r1, r1
    94c4:	3314      	adds	r3, #20
    94c6:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    94ca:	b2db      	uxtb	r3, r3
    94cc:	4611      	mov	r1, r2
    94ce:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    94d0:	802e      	strh	r6, [r5, #0]
    94d2:	f7fa ff63 	bl	439c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    94d6:	e7ac      	b.n	9432 <switch_mode(LEDStruct&)+0xa8a>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    94d8:	b005      	add	sp, #20
    94da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Bouncing Functions -----------------------------------------------------------------------
		case BOUNCING_BALLS:
			bouncing_balls(leds);
    94de:	f7fe bc6b 	b.w	7db8 <bouncing_balls(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    94e2:	b005      	add	sp, #20
    94e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case BOUNCING_BALLS:
			bouncing_balls(leds);
			break;

		case BOUNCE:
			bounce(leds);
    94e8:	f7fe b9e2 	b.w	78b0 <bounce(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    94ec:	b005      	add	sp, #20
    94ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case NOISE:
			noise(leds);
			break;

		case NOISE_MOVER:
			noise_mover(leds);
    94f2:	f7fc bff1 	b.w	64d8 <noise_mover(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    94f6:	b005      	add	sp, #20
    94f8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Noise Functions -----------------------------------------------------------------------
		case NOISE:
			noise(leds);
    94fc:	f7fc bee8 	b.w	62d0 <noise(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9500:	b005      	add	sp, #20
    9502:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Shooting Pole -----------------------------------------------------------------------
		case SHOOTING_POLE:
			shooting_pole(leds);
    9506:	f7fc bacb 	b.w	5aa0 <shooting_pole(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    950a:	b005      	add	sp, #20
    950c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Fireworks Functions -----------------------------------------------------------------------
		case FIREWORKS:
			fireworks(leds);
    9510:	f7fc ba22 	b.w	5958 <fireworks(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9514:	b005      	add	sp, #20
    9516:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case ONE_SIN:
			one_sin(leds);
			break;

		case TWO_SIN:
			two_sin(leds);
    951a:	f7fc bcad 	b.w	5e78 <two_sin(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    951e:	b005      	add	sp, #20
    9520:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Sin Functions -----------------------------------------------------------------------
		case ONE_SIN:
			one_sin(leds);
    9524:	f7fb be4a 	b.w	51bc <one_sin(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9528:	b005      	add	sp, #20
    952a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			break;


		// Confetti Functions -----------------------------------------------------------------------
		case CONFETTI:
			confetti(leds);
    952e:	f7fb bd57 	b.w	4fe0 <confetti(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9532:	b005      	add	sp, #20
    9534:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case PRIDE:
			pride(leds);
			break;

		case PACIFICA:
			pacifica(leds);
    9538:	f7fd be5e 	b.w	71f8 <pacifica(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    953c:	b005      	add	sp, #20
    953e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    9542:	f7fd ba65 	b.w	6a10 <pride(LEDStruct&)>
		// Twinkle Functions ---------------------------------------------------------------------
		case TWINKLE:
			twinkle(leds);
			break;
	}
}
    9546:	b005      	add	sp, #20
    9548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    954c:	461a      	mov	r2, r3
    954e:	f7ff bb7c 	b.w	8c4a <switch_mode(LEDStruct&)+0x2a2>
    9552:	bf00      	nop
    9554:	1fff8784 	.word	0x1fff8784

00009558 <change_mode(unsigned char)>:
}

void begin_transition(); // Forward declaration

// Change mode - consider how to handle this.  Random, specific path, etc.
void change_mode(uint8_t mn = 255) {
    9558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    955a:	2134      	movs	r1, #52	; 0x34
    955c:	4604      	mov	r4, r0
    955e:	4831      	ldr	r0, [pc, #196]	; (9624 <change_mode(unsigned char)+0xcc>)
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    9560:	4e31      	ldr	r6, [pc, #196]	; (9628 <change_mode(unsigned char)+0xd0>)
    9562:	f003 fa3f 	bl	c9e4 <usb_serial_write>
    9566:	4831      	ldr	r0, [pc, #196]	; (962c <change_mode(unsigned char)+0xd4>)
    9568:	f003 fc40 	bl	cdec <Print::println()>
    956c:	2133      	movs	r1, #51	; 0x33
    956e:	4830      	ldr	r0, [pc, #192]	; (9630 <change_mode(unsigned char)+0xd8>)
    9570:	f003 fa38 	bl	c9e4 <usb_serial_write>
    9574:	482d      	ldr	r0, [pc, #180]	; (962c <change_mode(unsigned char)+0xd4>)
    9576:	f003 fc39 	bl	cdec <Print::println()>
    957a:	2133      	movs	r1, #51	; 0x33
    957c:	482d      	ldr	r0, [pc, #180]	; (9634 <change_mode(unsigned char)+0xdc>)
    957e:	f003 fa31 	bl	c9e4 <usb_serial_write>
    9582:	482a      	ldr	r0, [pc, #168]	; (962c <change_mode(unsigned char)+0xd4>)
    9584:	f003 fc32 	bl	cdec <Print::println()>
	if (DEBUG) {
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
    9588:	f7f7 fcec 	bl	f64 <begin_transition()>
    958c:	492a      	ldr	r1, [pc, #168]	; (9638 <change_mode(unsigned char)+0xe0>)
	number_of_mode_changes++;
    958e:	8830      	ldrh	r0, [r6, #0]
    9590:	880b      	ldrh	r3, [r1, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    9592:	4a2a      	ldr	r2, [pc, #168]	; (963c <change_mode(unsigned char)+0xe4>)
    9594:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    9598:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    959c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    95a0:	3319      	adds	r3, #25
    95a2:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    95a4:	eb03 2513 	add.w	r5, r3, r3, lsr #8
	next_leds.this_dir = random8(2);
    95a8:	f3c5 15c0 	ubfx	r5, r5, #7, #1
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    95ac:	3001      	adds	r0, #1

	// Next LED Variables
	next_leds.mode_initialized = 0;
    95ae:	2700      	movs	r7, #0
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    95b0:	2cff      	cmp	r4, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    95b2:	800b      	strh	r3, [r1, #0]
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    95b4:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
	}
	begin_transition();
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    95b8:	f882 722e 	strb.w	r7, [r2, #558]	; 0x22e
		Serial.println("\n***************************************************"); 
		Serial.println("*******************Changing Mode*******************"); 
		Serial.println("***************************************************");
	}
	begin_transition();
	number_of_mode_changes++;
    95bc:	8030      	strh	r0, [r6, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
    95be:	d00a      	beq.n	95d6 <change_mode(unsigned char)+0x7e>
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
    95c0:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
	next_leds.mode_name = ModeList[next_leds.mode_number];
    95c4:	4b1e      	ldr	r3, [pc, #120]	; (9640 <change_mode(unsigned char)+0xe8>)
	switch_mode(next_leds);
    95c6:	481d      	ldr	r0, [pc, #116]	; (963c <change_mode(unsigned char)+0xe4>)
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
    95c8:	5d1b      	ldrb	r3, [r3, r4]
    95ca:	f882 322c 	strb.w	r3, [r2, #556]	; 0x22c
	switch_mode(next_leds);
}
    95ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
	}
	else { next_leds.mode_number = mn; }
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    95d2:	f7ff b9e9 	b.w	89a8 <switch_mode(LEDStruct&)>

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (mn == 255) {					// large number to avoid interfering with read_keyboard mode sends
		if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    95d6:	481b      	ldr	r0, [pc, #108]	; (9644 <change_mode(unsigned char)+0xec>)
    95d8:	7800      	ldrb	r0, [r0, #0]
    95da:	b190      	cbz	r0, 9602 <change_mode(unsigned char)+0xaa>
    95dc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    95e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    95e4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    95e8:	3319      	adds	r3, #25
    95ea:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    95ec:	eb03 2413 	add.w	r4, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    95f0:	b2e4      	uxtb	r4, r4
    95f2:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
    95f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    95fa:	800b      	strh	r3, [r1, #0]
    95fc:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
    9600:	e7e0      	b.n	95c4 <change_mode(unsigned char)+0x6c>
		else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList); }
    9602:	f892 322b 	ldrb.w	r3, [r2, #555]	; 0x22b
    9606:	4810      	ldr	r0, [pc, #64]	; (9648 <change_mode(unsigned char)+0xf0>)
    9608:	3301      	adds	r3, #1
    960a:	fba3 0100 	umull	r0, r1, r3, r0
    960e:	1a5c      	subs	r4, r3, r1
    9610:	eb01 0454 	add.w	r4, r1, r4, lsr #1
    9614:	0924      	lsrs	r4, r4, #4
    9616:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
    961a:	1b1c      	subs	r4, r3, r4
    961c:	b2e4      	uxtb	r4, r4
    961e:	f882 422b 	strb.w	r4, [r2, #555]	; 0x22b
    9622:	e7cf      	b.n	95c4 <change_mode(unsigned char)+0x6c>
    9624:	0000f87c 	.word	0x0000f87c
    9628:	1fff8cac 	.word	0x1fff8cac
    962c:	1fff878c 	.word	0x1fff878c
    9630:	0000f8b4 	.word	0x0000f8b4
    9634:	0000f8e8 	.word	0x0000f8e8
    9638:	1fff8784 	.word	0x1fff8784
    963c:	1fff8cb0 	.word	0x1fff8cb0
    9640:	1fff8724 	.word	0x1fff8724
    9644:	1fff874a 	.word	0x1fff874a
    9648:	08421085 	.word	0x08421085

0000964c <read_keyboard()>:
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    9650:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 9928 <read_keyboard()+0x2dc>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
    9654:	b08d      	sub	sp, #52	; 0x34
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9656:	f003 f99b 	bl	c990 <usb_serial_available>
	while (Serial.available() > 0) {
    965a:	2800      	cmp	r0, #0
    965c:	f340 8086 	ble.w	976c <read_keyboard()+0x120>
        virtual int read() { return usb_serial_getchar(); }
    9660:	f003 f95a 	bl	c918 <usb_serial_getchar>
		in_byte = Serial.read();
    9664:	b2c0      	uxtb	r0, r0

		if (in_byte != 10) {
    9666:	280a      	cmp	r0, #10
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
		in_byte = Serial.read();
    9668:	f88a 0000 	strb.w	r0, [sl]

		if (in_byte != 10) {
    966c:	d00e      	beq.n	968c <read_keyboard()+0x40>
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    966e:	2102      	movs	r1, #2
    9670:	48ac      	ldr	r0, [pc, #688]	; (9924 <read_keyboard()+0x2d8>)
    9672:	f003 f9b7 	bl	c9e4 <usb_serial_write>
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    9676:	4bac      	ldr	r3, [pc, #688]	; (9928 <read_keyboard()+0x2dc>)
    9678:	7818      	ldrb	r0, [r3, #0]
    967a:	f003 fa37 	bl	caec <usb_serial_putchar>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    967e:	2101      	movs	r1, #1
    9680:	48aa      	ldr	r0, [pc, #680]	; (992c <read_keyboard()+0x2e0>)
    9682:	f003 f9af 	bl	c9e4 <usb_serial_write>
    9686:	48aa      	ldr	r0, [pc, #680]	; (9930 <read_keyboard()+0x2e4>)
    9688:	f003 fbb0 	bl	cdec <Print::println()>
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    968c:	48a8      	ldr	r0, [pc, #672]	; (9930 <read_keyboard()+0x2e4>)
		keyboard_update = 1;
    968e:	4fa9      	ldr	r7, [pc, #676]	; (9934 <read_keyboard()+0x2e8>)
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    9690:	4ca9      	ldr	r4, [pc, #676]	; (9938 <read_keyboard()+0x2ec>)
    9692:	f003 fc67 	bl	cf64 <Stream::parseInt()>
		keyboard_update = 1;
		switch (in_byte) {
    9696:	f89a 3000 	ldrb.w	r3, [sl]
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    969a:	b282      	uxth	r2, r0
		keyboard_update = 1;
    969c:	2101      	movs	r1, #1
		switch (in_byte) {
    969e:	3b42      	subs	r3, #66	; 0x42
			Serial.print("# ");
			Serial.print(char(in_byte));
			Serial.println(" ");
		}

		update_arg = Serial.parseInt();
    96a0:	8022      	strh	r2, [r4, #0]
		keyboard_update = 1;
    96a2:	7039      	strb	r1, [r7, #0]
		switch (in_byte) {
    96a4:	2b2a      	cmp	r3, #42	; 0x2a
    96a6:	d8d6      	bhi.n	9656 <read_keyboard()+0xa>
    96a8:	a101      	add	r1, pc, #4	; (adr r1, 96b0 <read_keyboard()+0x64>)
    96aa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    96ae:	bf00      	nop
    96b0:	0000990d 	.word	0x0000990d
    96b4:	00009657 	.word	0x00009657
    96b8:	00009909 	.word	0x00009909
    96bc:	000098f7 	.word	0x000098f7
    96c0:	00009657 	.word	0x00009657
    96c4:	00009657 	.word	0x00009657
    96c8:	00009657 	.word	0x00009657
    96cc:	00009657 	.word	0x00009657
    96d0:	00009657 	.word	0x00009657
    96d4:	00009657 	.word	0x00009657
    96d8:	00009657 	.word	0x00009657
    96dc:	000098e5 	.word	0x000098e5
    96e0:	000098cd 	.word	0x000098cd
    96e4:	00009657 	.word	0x00009657
    96e8:	000097f9 	.word	0x000097f9
    96ec:	000097f5 	.word	0x000097f5
    96f0:	000097f1 	.word	0x000097f1
    96f4:	000097db 	.word	0x000097db
    96f8:	000097cb 	.word	0x000097cb
    96fc:	00009657 	.word	0x00009657
    9700:	00009657 	.word	0x00009657
    9704:	00009657 	.word	0x00009657
    9708:	00009657 	.word	0x00009657
    970c:	00009657 	.word	0x00009657
    9710:	00009657 	.word	0x00009657
    9714:	00009657 	.word	0x00009657
    9718:	00009657 	.word	0x00009657
    971c:	00009657 	.word	0x00009657
    9720:	00009657 	.word	0x00009657
    9724:	00009657 	.word	0x00009657
    9728:	00009657 	.word	0x00009657
    972c:	000097c3 	.word	0x000097c3
    9730:	000097bb 	.word	0x000097bb
    9734:	000097b3 	.word	0x000097b3
    9738:	000097ab 	.word	0x000097ab
    973c:	000097a3 	.word	0x000097a3
    9740:	0000979b 	.word	0x0000979b
    9744:	00009793 	.word	0x00009793
    9748:	0000978b 	.word	0x0000978b
    974c:	00009783 	.word	0x00009783
    9750:	0000977b 	.word	0x0000977b
    9754:	00009773 	.word	0x00009773
    9758:	0000975d 	.word	0x0000975d

			// k
			case 107: update_var = 10;	break;

			// l
			case 108: update_var = 11;	break;
    975c:	4b77      	ldr	r3, [pc, #476]	; (993c <read_keyboard()+0x2f0>)
    975e:	220b      	movs	r2, #11
    9760:	701a      	strb	r2, [r3, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    9762:	f003 f915 	bl	c990 <usb_serial_available>
#ifndef READ_KEYBOARD_H
#define READ_KEYBOARD_H

void read_keyboard() {
	while (Serial.available() > 0) {
    9766:	2800      	cmp	r0, #0
    9768:	f73f af7a 	bgt.w	9660 <read_keyboard()+0x14>
			default: break;
		}


	}
}
    976c:	b00d      	add	sp, #52	; 0x34
    976e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

			// j
			case 106: update_var = 9;	break;

			// k
			case 107: update_var = 10;	break;
    9772:	4b72      	ldr	r3, [pc, #456]	; (993c <read_keyboard()+0x2f0>)
    9774:	220a      	movs	r2, #10
    9776:	701a      	strb	r2, [r3, #0]
    9778:	e76d      	b.n	9656 <read_keyboard()+0xa>

			// i
			case 105: update_var = 8;	break;

			// j
			case 106: update_var = 9;	break;
    977a:	4b70      	ldr	r3, [pc, #448]	; (993c <read_keyboard()+0x2f0>)
    977c:	2209      	movs	r2, #9
    977e:	701a      	strb	r2, [r3, #0]
    9780:	e769      	b.n	9656 <read_keyboard()+0xa>

			// h
			case 104: update_var = 7;	break;

			// i
			case 105: update_var = 8;	break;
    9782:	4b6e      	ldr	r3, [pc, #440]	; (993c <read_keyboard()+0x2f0>)
    9784:	2208      	movs	r2, #8
    9786:	701a      	strb	r2, [r3, #0]
    9788:	e765      	b.n	9656 <read_keyboard()+0xa>

			// g
			case 103: update_var = 6;	break;

			// h
			case 104: update_var = 7;	break;
    978a:	4b6c      	ldr	r3, [pc, #432]	; (993c <read_keyboard()+0x2f0>)
    978c:	2207      	movs	r2, #7
    978e:	701a      	strb	r2, [r3, #0]
    9790:	e761      	b.n	9656 <read_keyboard()+0xa>

			// f 
			case 102: update_var = 5;	break;

			// g
			case 103: update_var = 6;	break;
    9792:	4b6a      	ldr	r3, [pc, #424]	; (993c <read_keyboard()+0x2f0>)
    9794:	2206      	movs	r2, #6
    9796:	701a      	strb	r2, [r3, #0]
    9798:	e75d      	b.n	9656 <read_keyboard()+0xa>

			// e
			case 101: update_var = 4;	break;

			// f 
			case 102: update_var = 5;	break;
    979a:	4b68      	ldr	r3, [pc, #416]	; (993c <read_keyboard()+0x2f0>)
    979c:	2205      	movs	r2, #5
    979e:	701a      	strb	r2, [r3, #0]
    97a0:	e759      	b.n	9656 <read_keyboard()+0xa>

			// d 
			case 100: update_var = 3;	break;

			// e
			case 101: update_var = 4;	break;
    97a2:	4b66      	ldr	r3, [pc, #408]	; (993c <read_keyboard()+0x2f0>)
    97a4:	2204      	movs	r2, #4
    97a6:	701a      	strb	r2, [r3, #0]
    97a8:	e755      	b.n	9656 <read_keyboard()+0xa>

			// c
			case 99: update_var = 2;	break;

			// d 
			case 100: update_var = 3;	break;
    97aa:	4b64      	ldr	r3, [pc, #400]	; (993c <read_keyboard()+0x2f0>)
    97ac:	2203      	movs	r2, #3
    97ae:	701a      	strb	r2, [r3, #0]
    97b0:	e751      	b.n	9656 <read_keyboard()+0xa>

			// b
			case 98: update_var = 1;	break;

			// c
			case 99: update_var = 2;	break;
    97b2:	4b62      	ldr	r3, [pc, #392]	; (993c <read_keyboard()+0x2f0>)
    97b4:	2202      	movs	r2, #2
    97b6:	701a      	strb	r2, [r3, #0]
    97b8:	e74d      	b.n	9656 <read_keyboard()+0xa>

			// a
			case 97: update_var = 0;	break;

			// b
			case 98: update_var = 1;	break;
    97ba:	4b60      	ldr	r3, [pc, #384]	; (993c <read_keyboard()+0x2f0>)
    97bc:	2201      	movs	r2, #1
    97be:	701a      	strb	r2, [r3, #0]
    97c0:	e749      	b.n	9656 <read_keyboard()+0xa>

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;

			// a
			case 97: update_var = 0;	break;
    97c2:	4b5e      	ldr	r3, [pc, #376]	; (993c <read_keyboard()+0x2f0>)
    97c4:	2200      	movs	r2, #0
    97c6:	701a      	strb	r2, [r3, #0]
    97c8:	e745      	b.n	9656 <read_keyboard()+0xa>

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// T - mode change timer (how often to change modes, if mode_change is set)
			case 84: mode_change_time = update_arg; keyboard_update = 0; update_var = 255; break;
    97ca:	4b5d      	ldr	r3, [pc, #372]	; (9940 <read_keyboard()+0x2f4>)
    97cc:	495b      	ldr	r1, [pc, #364]	; (993c <read_keyboard()+0x2f0>)
    97ce:	801a      	strh	r2, [r3, #0]
    97d0:	22ff      	movs	r2, #255	; 0xff
    97d2:	2300      	movs	r3, #0
    97d4:	700a      	strb	r2, [r1, #0]
    97d6:	703b      	strb	r3, [r7, #0]
    97d8:	e73d      	b.n	9656 <read_keyboard()+0xa>

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// S - change modes		(change modes every T seconds)
			case 83: mode_change = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    97da:	4c5a      	ldr	r4, [pc, #360]	; (9944 <read_keyboard()+0x2f8>)

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// R - random mode		(when changing modes, do so randomly)
			case 82: random_mode = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    97dc:	4957      	ldr	r1, [pc, #348]	; (993c <read_keyboard()+0x2f0>)
    97de:	3200      	adds	r2, #0
    97e0:	bf18      	it	ne
    97e2:	2201      	movne	r2, #1
    97e4:	20ff      	movs	r0, #255	; 0xff
    97e6:	2300      	movs	r3, #0
    97e8:	7022      	strb	r2, [r4, #0]
    97ea:	7008      	strb	r0, [r1, #0]
    97ec:	703b      	strb	r3, [r7, #0]
    97ee:	e732      	b.n	9656 <read_keyboard()+0xa>
    97f0:	4c55      	ldr	r4, [pc, #340]	; (9948 <read_keyboard()+0x2fc>)
    97f2:	e7f3      	b.n	97dc <read_keyboard()+0x190>
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
				keyboard_update = 0; 
				break;

			// Q - random palette change	(change palettes randomly every 30 seconds)
			case 81: random_palette = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    97f4:	4c55      	ldr	r4, [pc, #340]	; (994c <read_keyboard()+0x300>)
    97f6:	e7f1      	b.n	97dc <read_keyboard()+0x190>
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    97f8:	4b55      	ldr	r3, [pc, #340]	; (9950 <read_keyboard()+0x304>)
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    97fa:	4956      	ldr	r1, [pc, #344]	; (9954 <read_keyboard()+0x308>)
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    97fc:	b2c2      	uxtb	r2, r0
			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;

			// P - palette
			case 80: 
				curr_leds.palette_index = (uint8_t)update_arg; 
    97fe:	f881 0229 	strb.w	r0, [r1, #553]	; 0x229
				curr_leds.target_palette = palettes[curr_leds.palette_index]; 
    9802:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    9806:	f04f 0900 	mov.w	r9, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    980a:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
            count++;;
        } while ( u.index != 255);
    980e:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    9810:	f109 0901 	add.w	r9, r9, #1
        } while ( u.index != 255);
    9814:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    9816:	fa1f f989 	uxth.w	r9, r9
        } while ( u.index != 255);
    981a:	d1f6      	bne.n	980a <read_keyboard()+0x1be>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    981c:	f8d8 3000 	ldr.w	r3, [r8]
    9820:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    9824:	f04f 32ff 	mov.w	r2, #4294967295
    9828:	9208      	str	r2, [sp, #32]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
    982a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    982e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    9832:	0e1b      	lsrs	r3, r3, #24
    9834:	9204      	str	r2, [sp, #16]
    9836:	9305      	str	r3, [sp, #20]

        int indexstart = 0;
    9838:	2400      	movs	r4, #0
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    983a:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    983e:	4846      	ldr	r0, [pc, #280]	; (9958 <read_keyboard()+0x30c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    9840:	f3c5 2e07 	ubfx	lr, r5, #8, #8
            istart8 = indexstart / 16;
    9844:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    9848:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    984c:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    984e:	fa5f f18e 	uxtb.w	r1, lr
    9852:	f3c5 6507 	ubfx	r5, r5, #24, #8
    9856:	9106      	str	r1, [sp, #24]
    9858:	b2e9      	uxtb	r1, r5
    985a:	9107      	str	r1, [sp, #28]
            istart8 = indexstart / 16;
    985c:	fa5f f18c 	uxtb.w	r1, ip
    9860:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    9862:	9909      	ldr	r1, [sp, #36]	; 0x24
    9864:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    9866:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    9868:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    986c:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    9870:	d80c      	bhi.n	988c <read_keyboard()+0x240>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    9872:	9908      	ldr	r1, [sp, #32]
    9874:	458c      	cmp	ip, r1
    9876:	dc07      	bgt.n	9888 <read_keyboard()+0x23c>
    9878:	290f      	cmp	r1, #15
    987a:	d005      	beq.n	9888 <read_keyboard()+0x23c>
                    istart8 = lastSlotUsed + 1;
    987c:	3101      	adds	r1, #1
    987e:	b2c9      	uxtb	r1, r1
    9880:	428b      	cmp	r3, r1
    9882:	9103      	str	r1, [sp, #12]
    9884:	bf38      	it	cc
    9886:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    9888:	b259      	sxtb	r1, r3
    988a:	9108      	str	r1, [sp, #32]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    988c:	f89d c010 	ldrb.w	ip, [sp, #16]
    9890:	f88d c029 	strb.w	ip, [sp, #41]	; 0x29
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    9894:	a90b      	add	r1, sp, #44	; 0x2c
    9896:	9100      	str	r1, [sp, #0]
        b = rhs.b;
    9898:	f89d c014 	ldrb.w	ip, [sp, #20]
    989c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    989e:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
        b = rhs.b;
    98a2:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    98a6:	f88d e02c 	strb.w	lr, [sp, #44]	; 0x2c
        g = rhs.g;
    98aa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    98ae:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    98b2:	f000 fff3 	bl	a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    98b6:	9b07      	ldr	r3, [sp, #28]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    98b8:	f8dd b018 	ldr.w	fp, [sp, #24]
        g = rhs.g;
    98bc:	f8cd 9010 	str.w	r9, [sp, #16]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    98c0:	2cff      	cmp	r4, #255	; 0xff
        b = rhs.b;
    98c2:	9305      	str	r3, [sp, #20]
    98c4:	d1b9      	bne.n	983a <read_keyboard()+0x1ee>
				keyboard_update = 0; 
    98c6:	2300      	movs	r3, #0
    98c8:	703b      	strb	r3, [r7, #0]
				break;
    98ca:	e6c4      	b.n	9656 <read_keyboard()+0xa>

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;

			// N - direction
			case 78: curr_leds.this_dir = (bool)update_arg; keyboard_update = 0; update_var = 255; break;
    98cc:	3200      	adds	r2, #0
    98ce:	4c21      	ldr	r4, [pc, #132]	; (9954 <read_keyboard()+0x308>)
    98d0:	491a      	ldr	r1, [pc, #104]	; (993c <read_keyboard()+0x2f0>)
    98d2:	bf18      	it	ne
    98d4:	2201      	movne	r2, #1
    98d6:	20ff      	movs	r0, #255	; 0xff
    98d8:	2300      	movs	r3, #0
    98da:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
    98de:	7008      	strb	r0, [r1, #0]
    98e0:	703b      	strb	r3, [r7, #0]
    98e2:	e6b8      	b.n	9656 <read_keyboard()+0xa>

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = update_arg; keyboard_update = 0; update_var = 255; break;

			// M - mode
			case 77: change_mode((uint8_t)update_arg); keyboard_update = 0; update_var = 255; break;
    98e4:	b2c0      	uxtb	r0, r0
    98e6:	f7ff fe37 	bl	9558 <change_mode(unsigned char)>
    98ea:	4a14      	ldr	r2, [pc, #80]	; (993c <read_keyboard()+0x2f0>)
    98ec:	21ff      	movs	r1, #255	; 0xff
    98ee:	2300      	movs	r3, #0
    98f0:	7011      	strb	r1, [r2, #0]
    98f2:	703b      	strb	r3, [r7, #0]
    98f4:	e6af      	b.n	9656 <read_keyboard()+0xa>

			// D - delay
			case 68: curr_leds.delay_time = update_arg; keyboard_update = 0; update_var = 255; break;

			// E - next_leds delay, beta
			case 69: next_leds.delay_time = update_arg; keyboard_update = 0; update_var = 255; break;
    98f6:	4b19      	ldr	r3, [pc, #100]	; (995c <read_keyboard()+0x310>)
    98f8:	4a10      	ldr	r2, [pc, #64]	; (993c <read_keyboard()+0x2f0>)
    98fa:	f883 01c3 	strb.w	r0, [r3, #451]	; 0x1c3
    98fe:	21ff      	movs	r1, #255	; 0xff
    9900:	2300      	movs	r3, #0
    9902:	7011      	strb	r1, [r2, #0]
    9904:	703b      	strb	r3, [r7, #0]
    9906:	e6a6      	b.n	9656 <read_keyboard()+0xa>
				keyboard_update = 0;
				update_var = 255;
				break;

			// D - delay
			case 68: curr_leds.delay_time = update_arg; keyboard_update = 0; update_var = 255; break;
    9908:	4b12      	ldr	r3, [pc, #72]	; (9954 <read_keyboard()+0x308>)
    990a:	e7f5      	b.n	98f8 <read_keyboard()+0x2ac>
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    990c:	4d14      	ldr	r5, [pc, #80]	; (9960 <read_keyboard()+0x314>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    990e:	4c15      	ldr	r4, [pc, #84]	; (9964 <read_keyboard()+0x318>)
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    9910:	4a0a      	ldr	r2, [pc, #40]	; (993c <read_keyboard()+0x2f0>)
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    9912:	b2c0      	uxtb	r0, r0
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    9914:	21ff      	movs	r1, #255	; 0xff

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    9916:	2300      	movs	r3, #0
		keyboard_update = 1;
		switch (in_byte) {

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
    9918:	7028      	strb	r0, [r5, #0]
    991a:	7020      	strb	r0, [r4, #0]
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
				update_var = 255;
    991c:	7011      	strb	r1, [r2, #0]

			// B - brigthness
			case 66: 
				max_bright = (uint8_t)update_arg; 
				LEDS.setBrightness(max_bright); 
				keyboard_update = 0;
    991e:	703b      	strb	r3, [r7, #0]
				update_var = 255;
				break;
    9920:	e699      	b.n	9656 <read_keyboard()+0xa>
    9922:	bf00      	nop
    9924:	0000f91c 	.word	0x0000f91c
    9928:	1fff954c 	.word	0x1fff954c
    992c:	0000f920 	.word	0x0000f920
    9930:	1fff878c 	.word	0x1fff878c
    9934:	1fff9605 	.word	0x1fff9605
    9938:	1fff9e54 	.word	0x1fff9e54
    993c:	1fff9e5c 	.word	0x1fff9e5c
    9940:	1fff8720 	.word	0x1fff8720
    9944:	1fff8783 	.word	0x1fff8783
    9948:	1fff874a 	.word	0x1fff874a
    994c:	1fff8722 	.word	0x1fff8722
    9950:	00010358 	.word	0x00010358
    9954:	1fff9e74 	.word	0x1fff9e74
    9958:	1fffa06c 	.word	0x1fffa06c
    995c:	1fff8cb0 	.word	0x1fff8cb0
    9960:	1fff8723 	.word	0x1fff8723
    9964:	1fffa880 	.word	0x1fffa880

00009968 <setup>:

Mode start_mode = TWINKLE;

// ================ SETUP ================

void setup() {
    9968:	b570      	push	{r4, r5, r6, lr}
    996a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    996e:	b082      	sub	sp, #8
    9970:	4864      	ldr	r0, [pc, #400]	; (9b04 <setup+0x19c>)
    9972:	f001 fd05 	bl	b380 <VisualMicroDebug::init(unsigned long)>
    9976:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    997a:	4862      	ldr	r0, [pc, #392]	; (9b04 <setup+0x19c>)
    997c:	f001 fcfc 	bl	b378 <VisualMicroDebug::begin(unsigned long)>
    9980:	2101      	movs	r1, #1
    9982:	4860      	ldr	r0, [pc, #384]	; (9b04 <setup+0x19c>)
    9984:	f001 fcd2 	bl	b32c <VisualMicroDebug::outPacketStart(bool)>
    9988:	b150      	cbz	r0, 99a0 <setup+0x38>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    998a:	2110      	movs	r1, #16
    998c:	485e      	ldr	r0, [pc, #376]	; (9b08 <setup+0x1a0>)
    998e:	f003 f829 	bl	c9e4 <usb_serial_write>
    9992:	485c      	ldr	r0, [pc, #368]	; (9b04 <setup+0x19c>)
    9994:	210a      	movs	r1, #10
    9996:	f001 fcb7 	bl	b308 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    999a:	485a      	ldr	r0, [pc, #360]	; (9b04 <setup+0x19c>)
    999c:	f001 fcea 	bl	b374 <VisualMicroDebug::outPacketEnd()>
    99a0:	2201      	movs	r2, #1
    99a2:	2100      	movs	r1, #0
    99a4:	4857      	ldr	r0, [pc, #348]	; (9b04 <setup+0x19c>)
    99a6:	f001 fd97 	bl	b4d8 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(500); Serial.println("DEBUG ON"); }
    99aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    99ae:	4857      	ldr	r0, [pc, #348]	; (9b0c <setup+0x1a4>)
    99b0:	f003 faa8 	bl	cf04 <Stream::setTimeout(unsigned long)>
    99b4:	2108      	movs	r1, #8
    99b6:	4856      	ldr	r0, [pc, #344]	; (9b10 <setup+0x1a8>)
    99b8:	f003 f814 	bl	c9e4 <usb_serial_write>
    99bc:	4853      	ldr	r0, [pc, #332]	; (9b0c <setup+0x1a4>)
    99be:	f003 fa15 	bl	cdec <Print::println()>

	delay(1000);
    99c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    99c6:	f001 fff5 	bl	b9b4 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    99ca:	4852      	ldr	r0, [pc, #328]	; (9b14 <setup+0x1ac>)
    99cc:	6803      	ldr	r3, [r0, #0]
    99ce:	f013 0401 	ands.w	r4, r3, #1
    99d2:	d073      	beq.n	9abc <setup+0x154>
    99d4:	2300      	movs	r3, #0
    99d6:	2296      	movs	r2, #150	; 0x96
    99d8:	494f      	ldr	r1, [pc, #316]	; (9b18 <setup+0x1b0>)
    99da:	4850      	ldr	r0, [pc, #320]	; (9b1c <setup+0x1b4>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    99dc:	4c50      	ldr	r4, [pc, #320]	; (9b20 <setup+0x1b8>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    99de:	4d51      	ldr	r5, [pc, #324]	; (9b24 <setup+0x1bc>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    99e0:	f001 f8d6 	bl	ab90 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(max_bright);
    99e4:	4b50      	ldr	r3, [pc, #320]	; (9b28 <setup+0x1c0>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    99e6:	781b      	ldrb	r3, [r3, #0]
    99e8:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    99ea:	22b0      	movs	r2, #176	; 0xb0
    99ec:	26ff      	movs	r6, #255	; 0xff
    99ee:	23f0      	movs	r3, #240	; 0xf0
	FastLED.setCorrection(TypicalLEDStrip);
    99f0:	4620      	mov	r0, r4
    99f2:	a901      	add	r1, sp, #4
    99f4:	f88d 2005 	strb.w	r2, [sp, #5]
    99f8:	f88d 3006 	strb.w	r3, [sp, #6]
    99fc:	f88d 6004 	strb.w	r6, [sp, #4]
    9a00:	f001 f906 	bl	ac10 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    9a04:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9a08:	2005      	movs	r0, #5
    9a0a:	f001 fc71 	bl	b2f0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    9a0e:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    9a12:	2002      	movs	r0, #2
    9a14:	802b      	strh	r3, [r5, #0]
    9a16:	f001 fe9f 	bl	b758 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    9a1a:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    9a1c:	2100      	movs	r1, #0
    9a1e:	4403      	add	r3, r0
    9a20:	4620      	mov	r0, r4
    9a22:	802b      	strh	r3, [r5, #0]
    9a24:	f001 fa08 	bl	ae38 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    9a28:	7821      	ldrb	r1, [r4, #0]
    9a2a:	4620      	mov	r0, r4
    9a2c:	f001 f92a 	bl	ac84 <CFastLED::show(unsigned char)>
    9a30:	4620      	mov	r0, r4
    9a32:	2132      	movs	r1, #50	; 0x32
    9a34:	f001 f988 	bl	ad48 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    9a38:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    9a3a:	aa01      	add	r2, sp, #4
    9a3c:	2196      	movs	r1, #150	; 0x96
    9a3e:	4836      	ldr	r0, [pc, #216]	; (9b18 <setup+0x1b0>)
    9a40:	f88d 6004 	strb.w	r6, [sp, #4]
    9a44:	f88d 5005 	strb.w	r5, [sp, #5]
    9a48:	f88d 5006 	strb.w	r5, [sp, #6]
    9a4c:	f000 fef6 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
    9a50:	4620      	mov	r0, r4
    9a52:	21fa      	movs	r1, #250	; 0xfa
    9a54:	f001 f978 	bl	ad48 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    9a58:	aa01      	add	r2, sp, #4
    9a5a:	2196      	movs	r1, #150	; 0x96
    9a5c:	482e      	ldr	r0, [pc, #184]	; (9b18 <setup+0x1b0>)
    9a5e:	f88d 6006 	strb.w	r6, [sp, #6]
    9a62:	f88d 5004 	strb.w	r5, [sp, #4]
    9a66:	f88d 5005 	strb.w	r5, [sp, #5]
    9a6a:	f000 fee7 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
    9a6e:	4620      	mov	r0, r4
    9a70:	21fa      	movs	r1, #250	; 0xfa
    9a72:	f001 f969 	bl	ad48 <CFastLED::delay(unsigned long)>
    9a76:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    9a78:	aa01      	add	r2, sp, #4
    9a7a:	2196      	movs	r1, #150	; 0x96
    9a7c:	4826      	ldr	r0, [pc, #152]	; (9b18 <setup+0x1b0>)
    9a7e:	f88d 3005 	strb.w	r3, [sp, #5]
    9a82:	f88d 5004 	strb.w	r5, [sp, #4]
    9a86:	f88d 5006 	strb.w	r5, [sp, #6]
    9a8a:	f000 fed7 	bl	a83c <fill_solid(CRGB*, int, CRGB const&)>
    9a8e:	4620      	mov	r0, r4
    9a90:	21fa      	movs	r1, #250	; 0xfa
    9a92:	f001 f959 	bl	ad48 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    9a96:	4629      	mov	r1, r5
    9a98:	4620      	mov	r0, r4
    9a9a:	f001 f9cd 	bl	ae38 <CFastLED::clear(bool)>
    9a9e:	4620      	mov	r0, r4
    9aa0:	21fa      	movs	r1, #250	; 0xfa
    9aa2:	f001 f951 	bl	ad48 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    9aa6:	f7f7 f8ab 	bl	c00 <initialize()>
    9aaa:	210e      	movs	r1, #14
    9aac:	481f      	ldr	r0, [pc, #124]	; (9b2c <setup+0x1c4>)
    9aae:	f002 ff99 	bl	c9e4 <usb_serial_write>
    9ab2:	4816      	ldr	r0, [pc, #88]	; (9b0c <setup+0x1a4>)
    9ab4:	f003 f99a 	bl	cdec <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    9ab8:	b002      	add	sp, #8
    9aba:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    9abc:	f001 fefa 	bl	b8b4 <__cxa_guard_acquire>
    9ac0:	2800      	cmp	r0, #0
    9ac2:	d087      	beq.n	99d4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9ac4:	491a      	ldr	r1, [pc, #104]	; (9b30 <setup+0x1c8>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    9ac6:	4b15      	ldr	r3, [pc, #84]	; (9b1c <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9ac8:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    9aca:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    9acc:	22ff      	movs	r2, #255	; 0xff
    9ace:	2501      	movs	r5, #1
    9ad0:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    9ad2:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    9ad4:	749d      	strb	r5, [r3, #18]
    9ad6:	731a      	strb	r2, [r3, #12]
    9ad8:	735a      	strb	r2, [r3, #13]
    9ada:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    9adc:	73da      	strb	r2, [r3, #15]
    9ade:	741a      	strb	r2, [r3, #16]
    9ae0:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9ae2:	b160      	cbz	r0, 9afe <setup+0x196>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    9ae4:	4a13      	ldr	r2, [pc, #76]	; (9b34 <setup+0x1cc>)
    9ae6:	6811      	ldr	r1, [r2, #0]
    9ae8:	b101      	cbz	r1, 9aec <setup+0x184>
    9aea:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    9aec:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    9aee:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    9af0:	4911      	ldr	r1, [pc, #68]	; (9b38 <setup+0x1d0>)
    9af2:	4808      	ldr	r0, [pc, #32]	; (9b14 <setup+0x1ac>)
    9af4:	619a      	str	r2, [r3, #24]
    9af6:	6019      	str	r1, [r3, #0]
    9af8:	f001 fee2 	bl	b8c0 <__cxa_guard_release>
    9afc:	e76a      	b.n	99d4 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    9afe:	600b      	str	r3, [r1, #0]
    9b00:	e7f0      	b.n	9ae4 <setup+0x17c>
    9b02:	bf00      	nop
    9b04:	1fffa8a8 	.word	0x1fffa8a8
    9b08:	0000f924 	.word	0x0000f924
    9b0c:	1fff878c 	.word	0x1fff878c
    9b10:	0000f938 	.word	0x0000f938
    9b14:	1fff8c8c 	.word	0x1fff8c8c
    9b18:	1fffa6b8 	.word	0x1fffa6b8
    9b1c:	1fff8c90 	.word	0x1fff8c90
    9b20:	1fffa880 	.word	0x1fffa880
    9b24:	1fff8784 	.word	0x1fff8784
    9b28:	1fff8723 	.word	0x1fff8723
    9b2c:	0000f944 	.word	0x0000f944
    9b30:	1fffa890 	.word	0x1fffa890
    9b34:	1fffa8a0 	.word	0x1fffa8a0
    9b38:	0000e5a0 	.word	0x0000e5a0

00009b3c <loop>:



// ================ LOOP ================

void loop() {
    9b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b40:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    9b42:	f004 fc79 	bl	e438 <random>
    9b46:	4aa2      	ldr	r2, [pc, #648]	; (9dd0 <loop+0x294>)
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    9b48:	4da2      	ldr	r5, [pc, #648]	; (9dd4 <loop+0x298>)
    9b4a:	8813      	ldrh	r3, [r2, #0]
    9b4c:	4418      	add	r0, r3
    9b4e:	8010      	strh	r0, [r2, #0]
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());
	
	// Check for keyboard updates
	read_keyboard();
    9b50:	f7ff fd7c 	bl	964c <read_keyboard()>

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    9b54:	682b      	ldr	r3, [r5, #0]
    9b56:	07db      	lsls	r3, r3, #31
    9b58:	f140 81a1 	bpl.w	9e9e <loop+0x362>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9b5c:	4e9e      	ldr	r6, [pc, #632]	; (9dd8 <loop+0x29c>)
    9b5e:	4c9f      	ldr	r4, [pc, #636]	; (9ddc <loop+0x2a0>)
    9b60:	6833      	ldr	r3, [r6, #0]
    9b62:	9303      	str	r3, [sp, #12]
	return ret;
    9b64:	9a03      	ldr	r2, [sp, #12]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9b66:	489e      	ldr	r0, [pc, #632]	; (9de0 <loop+0x2a4>)
    9b68:	8823      	ldrh	r3, [r4, #0]
    9b6a:	8861      	ldrh	r1, [r4, #2]
    9b6c:	fba0 0202 	umull	r0, r2, r0, r2
    9b70:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    9b74:	b29b      	uxth	r3, r3
    9b76:	4299      	cmp	r1, r3
    9b78:	d80f      	bhi.n	9b9a <loop+0x5e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9b7a:	6833      	ldr	r3, [r6, #0]
    9b7c:	9302      	str	r3, [sp, #8]
	return ret;
    9b7e:	9b02      	ldr	r3, [sp, #8]
    9b80:	4997      	ldr	r1, [pc, #604]	; (9de0 <loop+0x2a4>)
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    9b82:	4a98      	ldr	r2, [pc, #608]	; (9de4 <loop+0x2a8>)
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
    9b84:	4898      	ldr	r0, [pc, #608]	; (9de8 <loop+0x2ac>)
		if (mode_change) { change_mode(); }
    9b86:	7812      	ldrb	r2, [r2, #0]
    9b88:	8800      	ldrh	r0, [r0, #0]
    9b8a:	8060      	strh	r0, [r4, #2]
    9b8c:	fba1 1303 	umull	r1, r3, r1, r3
    9b90:	099b      	lsrs	r3, r3, #6
    9b92:	8023      	strh	r3, [r4, #0]
    9b94:	2a00      	cmp	r2, #0
    9b96:	f040 81b7 	bne.w	9f08 <loop+0x3cc>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    9b9a:	4d94      	ldr	r5, [pc, #592]	; (9dec <loop+0x2b0>)
    9b9c:	682b      	ldr	r3, [r5, #0]
    9b9e:	07df      	lsls	r7, r3, #31
    9ba0:	f140 8193 	bpl.w	9eca <loop+0x38e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ba4:	6833      	ldr	r3, [r6, #0]
    9ba6:	4c92      	ldr	r4, [pc, #584]	; (9df0 <loop+0x2b4>)
    9ba8:	9306      	str	r3, [sp, #24]
	return ret;
    9baa:	9a06      	ldr	r2, [sp, #24]
    9bac:	488c      	ldr	r0, [pc, #560]	; (9de0 <loop+0x2a4>)
    9bae:	8823      	ldrh	r3, [r4, #0]
    9bb0:	8861      	ldrh	r1, [r4, #2]
    9bb2:	fba0 0202 	umull	r0, r2, r0, r2
    9bb6:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    9bba:	b29b      	uxth	r3, r3
    9bbc:	4299      	cmp	r1, r3
    9bbe:	f240 8149 	bls.w	9e54 <loop+0x318>
    9bc2:	4f8c      	ldr	r7, [pc, #560]	; (9df4 <loop+0x2b8>)
    9bc4:	f8df 927c 	ldr.w	r9, [pc, #636]	; 9e44 <loop+0x308>
    9bc8:	f8df a244 	ldr.w	sl, [pc, #580]	; 9e10 <loop+0x2d4>
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    9bcc:	4d8a      	ldr	r5, [pc, #552]	; (9df8 <loop+0x2bc>)
    9bce:	682b      	ldr	r3, [r5, #0]
    9bd0:	07dc      	lsls	r4, r3, #31
    9bd2:	f140 80ae 	bpl.w	9d32 <loop+0x1f6>
    9bd6:	4c89      	ldr	r4, [pc, #548]	; (9dfc <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9bd8:	6833      	ldr	r3, [r6, #0]
    9bda:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9bdc:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    9be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9be2:	1a5b      	subs	r3, r3, r1
    9be4:	429a      	cmp	r2, r3
    9be6:	f240 80b4 	bls.w	9d52 <loop+0x216>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9bea:	f8df 825c 	ldr.w	r8, [pc, #604]	; 9e48 <loop+0x30c>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    9bee:	4d84      	ldr	r5, [pc, #528]	; (9e00 <loop+0x2c4>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9bf0:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    9bf4:	f8df b254 	ldr.w	fp, [pc, #596]	; 9e4c <loop+0x310>
    9bf8:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    9bfc:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
    9c00:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9c02:	07d8      	lsls	r0, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    9c04:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9c08:	f140 80b8 	bpl.w	9d7c <loop+0x240>
    9c0c:	4c7d      	ldr	r4, [pc, #500]	; (9e04 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c0e:	6833      	ldr	r3, [r6, #0]
    9c10:	930c      	str	r3, [sp, #48]	; 0x30
    9c12:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    9c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9c18:	1a1b      	subs	r3, r3, r0
    9c1a:	428b      	cmp	r3, r1
    9c1c:	f080 80c0 	bcs.w	9da0 <loop+0x264>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    9c20:	f8df 822c 	ldr.w	r8, [pc, #556]	; 9e50 <loop+0x314>
    9c24:	f8d8 3000 	ldr.w	r3, [r8]
    9c28:	07d9      	lsls	r1, r3, #31
    9c2a:	f140 80c8 	bpl.w	9dbe <loop+0x282>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c2e:	6833      	ldr	r3, [r6, #0]
    9c30:	4c75      	ldr	r4, [pc, #468]	; (9e08 <loop+0x2cc>)
    9c32:	930f      	str	r3, [sp, #60]	; 0x3c
    9c34:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    9c38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9c3a:	1a5b      	subs	r3, r3, r1
    9c3c:	4293      	cmp	r3, r2
    9c3e:	d309      	bcc.n	9c54 <loop+0x118>
		if (!keyboard_update) {
    9c40:	4b72      	ldr	r3, [pc, #456]	; (9e0c <loop+0x2d0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c42:	6832      	ldr	r2, [r6, #0]
    9c44:	920e      	str	r2, [sp, #56]	; 0x38
    9c46:	781b      	ldrb	r3, [r3, #0]
	return ret;
    9c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9c4a:	6022      	str	r2, [r4, #0]
    9c4c:	4a6e      	ldr	r2, [pc, #440]	; (9e08 <loop+0x2cc>)
    9c4e:	2b00      	cmp	r3, #0
    9c50:	f000 811b 	beq.w	9e8a <loop+0x34e>
			}
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
    9c54:	783b      	ldrb	r3, [r7, #0]
    9c56:	b123      	cbz	r3, 9c62 <loop+0x126>
    9c58:	4b6c      	ldr	r3, [pc, #432]	; (9e0c <loop+0x2d0>)
    9c5a:	781b      	ldrb	r3, [r3, #0]
    9c5c:	2b00      	cmp	r3, #0
    9c5e:	f000 814e 	beq.w	9efe <loop+0x3c2>
    9c62:	4b6b      	ldr	r3, [pc, #428]	; (9e10 <loop+0x2d4>)
    9c64:	4a6b      	ldr	r2, [pc, #428]	; (9e14 <loop+0x2d8>)
    9c66:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9c6a:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    9c6c:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    9c6e:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    9c70:	7014      	strb	r4, [r2, #0]
    9c72:	3303      	adds	r3, #3
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    9c74:	429d      	cmp	r5, r3
        g = rhs.g;
    9c76:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    9c78:	7091      	strb	r1, [r2, #2]
    9c7a:	f102 0203 	add.w	r2, r2, #3
    9c7e:	d1f4      	bne.n	9c6a <loop+0x12e>
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    9c80:	4d65      	ldr	r5, [pc, #404]	; (9e18 <loop+0x2dc>)
    9c82:	682b      	ldr	r3, [r5, #0]
    9c84:	07da      	lsls	r2, r3, #31
    9c86:	f140 8131 	bpl.w	9eec <loop+0x3b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c8a:	6833      	ldr	r3, [r6, #0]
    9c8c:	4c63      	ldr	r4, [pc, #396]	; (9e1c <loop+0x2e0>)
    9c8e:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    9c90:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    9c92:	4863      	ldr	r0, [pc, #396]	; (9e20 <loop+0x2e4>)
    9c94:	8823      	ldrh	r3, [r4, #0]
    9c96:	8861      	ldrh	r1, [r4, #2]
    9c98:	fba0 0202 	umull	r0, r2, r0, r2
    9c9c:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    9ca0:	b29b      	uxth	r3, r3
    9ca2:	4299      	cmp	r1, r3
    9ca4:	d80b      	bhi.n	9cbe <loop+0x182>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ca6:	6833      	ldr	r3, [r6, #0]
    9ca8:	495e      	ldr	r1, [pc, #376]	; (9e24 <loop+0x2e8>)
    9caa:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    9cac:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9cae:	485c      	ldr	r0, [pc, #368]	; (9e20 <loop+0x2e4>)
    9cb0:	880a      	ldrh	r2, [r1, #0]
    9cb2:	fba0 0303 	umull	r0, r3, r0, r3
    9cb6:	0b9b      	lsrs	r3, r3, #14
    9cb8:	3201      	adds	r2, #1
    9cba:	8023      	strh	r3, [r4, #0]
    9cbc:	800a      	strh	r2, [r1, #0]
		EVERY_N_SECONDS(5) {
    9cbe:	4d5a      	ldr	r5, [pc, #360]	; (9e28 <loop+0x2ec>)
    9cc0:	682b      	ldr	r3, [r5, #0]
    9cc2:	07db      	lsls	r3, r3, #31
    9cc4:	f140 810a 	bpl.w	9edc <loop+0x3a0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9cc8:	6833      	ldr	r3, [r6, #0]
    9cca:	4c58      	ldr	r4, [pc, #352]	; (9e2c <loop+0x2f0>)
    9ccc:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    9cce:	9a15      	ldr	r2, [sp, #84]	; 0x54
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9cd0:	4843      	ldr	r0, [pc, #268]	; (9de0 <loop+0x2a4>)
    9cd2:	8823      	ldrh	r3, [r4, #0]
    9cd4:	8861      	ldrh	r1, [r4, #2]
    9cd6:	fba0 0202 	umull	r0, r2, r0, r2
    9cda:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    9cde:	b29b      	uxth	r3, r3
    9ce0:	4299      	cmp	r1, r3
    9ce2:	d81f      	bhi.n	9d24 <loop+0x1e8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ce4:	6833      	ldr	r3, [r6, #0]
    9ce6:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    9ce8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9cea:	4a3d      	ldr	r2, [pc, #244]	; (9de0 <loop+0x2a4>)
			LEDDebug(curr_leds);
    9cec:	4848      	ldr	r0, [pc, #288]	; (9e10 <loop+0x2d4>)
    9cee:	fba2 2303 	umull	r2, r3, r2, r3
    9cf2:	099b      	lsrs	r3, r3, #6
    9cf4:	8023      	strh	r3, [r4, #0]
    9cf6:	f7f8 fa75 	bl	21e4 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    9cfa:	783b      	ldrb	r3, [r7, #0]
    9cfc:	2b00      	cmp	r3, #0
    9cfe:	f040 8107 	bne.w	9f10 <loop+0x3d4>
				LEDDebug(next_leds);
			}
			number_of_sec_on = (number_of_sec_on + 5) % 60;
    9d02:	4c4b      	ldr	r4, [pc, #300]	; (9e30 <loop+0x2f4>)
    9d04:	484b      	ldr	r0, [pc, #300]	; (9e34 <loop+0x2f8>)
    9d06:	7823      	ldrb	r3, [r4, #0]
    9d08:	3305      	adds	r3, #5
    9d0a:	fb83 0100 	smull	r0, r1, r3, r0
    9d0e:	4419      	add	r1, r3
    9d10:	17da      	asrs	r2, r3, #31
    9d12:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    9d16:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    9d1a:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
    9d1e:	7023      	strb	r3, [r4, #0]
			global_debug();
    9d20:	f7f7 f8a0 	bl	e64 <global_debug()>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    9d24:	4844      	ldr	r0, [pc, #272]	; (9e38 <loop+0x2fc>)
    9d26:	7801      	ldrb	r1, [r0, #0]
    9d28:	f000 ffac 	bl	ac84 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    9d2c:	b017      	add	sp, #92	; 0x5c
    9d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    9d32:	4628      	mov	r0, r5
    9d34:	f001 fdbe 	bl	b8b4 <__cxa_guard_acquire>
    9d38:	2800      	cmp	r0, #0
    9d3a:	f040 8118 	bne.w	9f6e <loop+0x432>
    9d3e:	4c2f      	ldr	r4, [pc, #188]	; (9dfc <loop+0x2c0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d40:	6833      	ldr	r3, [r6, #0]
    9d42:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9d44:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    9d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9d4a:	1a5b      	subs	r3, r3, r1
    9d4c:	4293      	cmp	r3, r2
    9d4e:	f4ff af4c 	bcc.w	9bea <loop+0xae>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d52:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    9d54:	4939      	ldr	r1, [pc, #228]	; (9e3c <loop+0x300>)
    9d56:	9308      	str	r3, [sp, #32]
	return ret;
    9d58:	9b08      	ldr	r3, [sp, #32]
    9d5a:	6023      	str	r3, [r4, #0]
    9d5c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    9d60:	2218      	movs	r2, #24
    9d62:	f000 feed 	bl	ab40 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    9d66:	783b      	ldrb	r3, [r7, #0]
    9d68:	2b00      	cmp	r3, #0
    9d6a:	f43f af3e 	beq.w	9bea <loop+0xae>
    9d6e:	4934      	ldr	r1, [pc, #208]	; (9e40 <loop+0x304>)
    9d70:	2218      	movs	r2, #24
    9d72:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    9d76:	f000 fee3 	bl	ab40 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    9d7a:	e736      	b.n	9bea <loop+0xae>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9d7c:	4640      	mov	r0, r8
    9d7e:	f001 fd99 	bl	b8b4 <__cxa_guard_acquire>
    9d82:	2800      	cmp	r0, #0
    9d84:	f040 810d 	bne.w	9fa2 <loop+0x466>
    9d88:	4c1e      	ldr	r4, [pc, #120]	; (9e04 <loop+0x2c8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9d8a:	6833      	ldr	r3, [r6, #0]
    9d8c:	930c      	str	r3, [sp, #48]	; 0x30
    9d8e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    9d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9d94:	1a5b      	subs	r3, r3, r1
    9d96:	4293      	cmp	r3, r2
    9d98:	f4ff af42 	bcc.w	9c20 <loop+0xe4>
    9d9c:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9da0:	6833      	ldr	r3, [r6, #0]
    9da2:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    9da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    9da6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9e50 <loop+0x314>
    9daa:	6023      	str	r3, [r4, #0]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    9dac:	4818      	ldr	r0, [pc, #96]	; (9e10 <loop+0x2d4>)
    9dae:	6062      	str	r2, [r4, #4]
    9db0:	f7fe fdfa 	bl	89a8 <switch_mode(LEDStruct&)>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    9db4:	f8d8 3000 	ldr.w	r3, [r8]
    9db8:	07d9      	lsls	r1, r3, #31
    9dba:	f53f af38 	bmi.w	9c2e <loop+0xf2>
    9dbe:	4640      	mov	r0, r8
    9dc0:	f001 fd78 	bl	b8b4 <__cxa_guard_acquire>
    9dc4:	2800      	cmp	r0, #0
    9dc6:	f040 80f8 	bne.w	9fba <loop+0x47e>
    9dca:	4c0f      	ldr	r4, [pc, #60]	; (9e08 <loop+0x2cc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9dcc:	6833      	ldr	r3, [r6, #0]
    9dce:	e730      	b.n	9c32 <loop+0xf6>
    9dd0:	1fff8784 	.word	0x1fff8784
    9dd4:	1fff9e58 	.word	0x1fff9e58
    9dd8:	1fffa8f8 	.word	0x1fffa8f8
    9ddc:	1fffa87c 	.word	0x1fffa87c
    9de0:	10624dd3 	.word	0x10624dd3
    9de4:	1fff8783 	.word	0x1fff8783
    9de8:	1fff8720 	.word	0x1fff8720
    9dec:	1fff9550 	.word	0x1fff9550
    9df0:	1fff9524 	.word	0x1fff9524
    9df4:	1fff9504 	.word	0x1fff9504
    9df8:	1fff9554 	.word	0x1fff9554
    9dfc:	1fff9528 	.word	0x1fff9528
    9e00:	1fff9560 	.word	0x1fff9560
    9e04:	1fff94fc 	.word	0x1fff94fc
    9e08:	1fff94f4 	.word	0x1fff94f4
    9e0c:	1fff9605 	.word	0x1fff9605
    9e10:	1fff9e74 	.word	0x1fff9e74
    9e14:	1fffa6b8 	.word	0x1fffa6b8
    9e18:	1fff9558 	.word	0x1fff9558
    9e1c:	1fff9e70 	.word	0x1fff9e70
    9e20:	45e7b273 	.word	0x45e7b273
    9e24:	1fff9608 	.word	0x1fff9608
    9e28:	1fff955c 	.word	0x1fff955c
    9e2c:	1fff9534 	.word	0x1fff9534
    9e30:	1fff9561 	.word	0x1fff9561
    9e34:	88888889 	.word	0x88888889
    9e38:	1fffa880 	.word	0x1fffa880
    9e3c:	1fffa06c 	.word	0x1fffa06c
    9e40:	1fff8ea8 	.word	0x1fff8ea8
    9e44:	1fff8cb0 	.word	0x1fff8cb0
    9e48:	1fff9e6c 	.word	0x1fff9e6c
    9e4c:	1fff9604 	.word	0x1fff9604
    9e50:	1fff9e68 	.word	0x1fff9e68
    9e54:	6833      	ldr	r3, [r6, #0]
    9e56:	9305      	str	r3, [sp, #20]
	return ret;
    9e58:	9b05      	ldr	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9e5a:	495f      	ldr	r1, [pc, #380]	; (9fd8 <loop+0x49c>)
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    9e5c:	4a5f      	ldr	r2, [pc, #380]	; (9fdc <loop+0x4a0>)
			if (in_transition) { change_palette(next_leds); }
    9e5e:	4f60      	ldr	r7, [pc, #384]	; (9fe0 <loop+0x4a4>)
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (random_palette) {
    9e60:	7812      	ldrb	r2, [r2, #0]
    9e62:	fba1 1303 	umull	r1, r3, r1, r3
    9e66:	099b      	lsrs	r3, r3, #6
    9e68:	8023      	strh	r3, [r4, #0]
    9e6a:	2a00      	cmp	r2, #0
    9e6c:	f43f aeaa 	beq.w	9bc4 <loop+0x88>
			if (in_transition) { change_palette(next_leds); }
    9e70:	783b      	ldrb	r3, [r7, #0]
    9e72:	2b00      	cmp	r3, #0
    9e74:	d150      	bne.n	9f18 <loop+0x3dc>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    9e76:	f8df a198 	ldr.w	sl, [pc, #408]	; a010 <loop+0x4d4>
    9e7a:	f89a 322a 	ldrb.w	r3, [sl, #554]	; 0x22a
    9e7e:	2b00      	cmp	r3, #0
    9e80:	f040 80a6 	bne.w	9fd0 <loop+0x494>
    9e84:	f8df 915c 	ldr.w	r9, [pc, #348]	; 9fe4 <loop+0x4a8>
    9e88:	e6a0      	b.n	9bcc <loop+0x90>
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if (!keyboard_update) {
			if (in_transition) {
    9e8a:	783b      	ldrb	r3, [r7, #0]
    9e8c:	2b00      	cmp	r3, #0
    9e8e:	f43f aee8 	beq.w	9c62 <loop+0x126>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9e92:	782b      	ldrb	r3, [r5, #0]
				next_timer.setPeriod(next_delay);
				switch_mode(next_leds);
    9e94:	4853      	ldr	r0, [pc, #332]	; (9fe4 <loop+0x4a8>)
    9e96:	6053      	str	r3, [r2, #4]
    9e98:	f7fe fd86 	bl	89a8 <switch_mode(LEDStruct&)>
    9e9c:	e6da      	b.n	9c54 <loop+0x118>
	
	// Check for keyboard updates
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
    9e9e:	4628      	mov	r0, r5
    9ea0:	f001 fd08 	bl	b8b4 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ea4:	4e50      	ldr	r6, [pc, #320]	; (9fe8 <loop+0x4ac>)
    9ea6:	2800      	cmp	r0, #0
    9ea8:	f43f ae59 	beq.w	9b5e <loop+0x22>
    9eac:	6833      	ldr	r3, [r6, #0]
    9eae:	9301      	str	r3, [sp, #4]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    9eb0:	4a49      	ldr	r2, [pc, #292]	; (9fd8 <loop+0x49c>)
	return ret;
    9eb2:	9b01      	ldr	r3, [sp, #4]
    9eb4:	4c4d      	ldr	r4, [pc, #308]	; (9fec <loop+0x4b0>)
    9eb6:	fba2 2303 	umull	r2, r3, r2, r3
    9eba:	099b      	lsrs	r3, r3, #6
    9ebc:	2214      	movs	r2, #20
    9ebe:	4628      	mov	r0, r5
    9ec0:	8023      	strh	r3, [r4, #0]
    9ec2:	8062      	strh	r2, [r4, #2]
    9ec4:	f001 fcfc 	bl	b8c0 <__cxa_guard_release>
    9ec8:	e64a      	b.n	9b60 <loop+0x24>
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    9eca:	4628      	mov	r0, r5
    9ecc:	f001 fcf2 	bl	b8b4 <__cxa_guard_acquire>
    9ed0:	2800      	cmp	r0, #0
    9ed2:	d13d      	bne.n	9f50 <loop+0x414>
    9ed4:	4c46      	ldr	r4, [pc, #280]	; (9ff0 <loop+0x4b4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9ed6:	6833      	ldr	r3, [r6, #0]
    9ed8:	9306      	str	r3, [sp, #24]
    9eda:	e666      	b.n	9baa <loop+0x6e>
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    9edc:	4628      	mov	r0, r5
    9ede:	f001 fce9 	bl	b8b4 <__cxa_guard_acquire>
    9ee2:	bb30      	cbnz	r0, 9f32 <loop+0x3f6>
    9ee4:	4c43      	ldr	r4, [pc, #268]	; (9ff4 <loop+0x4b8>)
    9ee6:	6833      	ldr	r3, [r6, #0]
    9ee8:	9315      	str	r3, [sp, #84]	; 0x54
    9eea:	e6f0      	b.n	9cce <loop+0x192>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    9eec:	4628      	mov	r0, r5
    9eee:	f001 fce1 	bl	b8b4 <__cxa_guard_acquire>
    9ef2:	2800      	cmp	r0, #0
    9ef4:	d146      	bne.n	9f84 <loop+0x448>
    9ef6:	4c40      	ldr	r4, [pc, #256]	; (9ff8 <loop+0x4bc>)
    9ef8:	6833      	ldr	r3, [r6, #0]
    9efa:	9312      	str	r3, [sp, #72]	; 0x48
    9efc:	e6c8      	b.n	9c90 <loop+0x154>
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if (in_transition && !keyboard_update) {
		switch_transition(transition_type);
    9efe:	4b3f      	ldr	r3, [pc, #252]	; (9ffc <loop+0x4c0>)
    9f00:	7818      	ldrb	r0, [r3, #0]
    9f02:	f7f7 fe55 	bl	1bb0 <switch_transition(TransitionType)>
    9f06:	e6bb      	b.n	9c80 <loop+0x144>
	read_keyboard();

	// Change patterns
	EVERY_N_SECONDS_I(modeTimer,20){
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
    9f08:	20ff      	movs	r0, #255	; 0xff
    9f0a:	f7ff fb25 	bl	9558 <change_mode(unsigned char)>
    9f0e:	e644      	b.n	9b9a <loop+0x5e>
	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    9f10:	4834      	ldr	r0, [pc, #208]	; (9fe4 <loop+0x4a8>)
    9f12:	f7f8 f967 	bl	21e4 <LEDDebug(LEDStruct&)>
    9f16:	e6f4      	b.n	9d02 <loop+0x1c6>
    9f18:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 9fe4 <loop+0x4a8>
    9f1c:	f899 322a 	ldrb.w	r3, [r9, #554]	; 0x22a
    9f20:	2b00      	cmp	r3, #0
    9f22:	f43f ae51 	beq.w	9bc8 <loop+0x8c>
    9f26:	4648      	mov	r0, r9
    9f28:	f7f8 ffee 	bl	2f08 <change_palette(LEDStruct&) [clone .part.12]>
    9f2c:	f8df a0e0 	ldr.w	sl, [pc, #224]	; a010 <loop+0x4d4>
    9f30:	e64c      	b.n	9bcc <loop+0x90>
    9f32:	6833      	ldr	r3, [r6, #0]
    9f34:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    9f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f38:	4a27      	ldr	r2, [pc, #156]	; (9fd8 <loop+0x49c>)
    9f3a:	4c2e      	ldr	r4, [pc, #184]	; (9ff4 <loop+0x4b8>)
    9f3c:	fba2 2303 	umull	r2, r3, r2, r3
    9f40:	099b      	lsrs	r3, r3, #6
    9f42:	2205      	movs	r2, #5
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
		EVERY_N_SECONDS(5) {
    9f44:	4628      	mov	r0, r5
    9f46:	8023      	strh	r3, [r4, #0]
    9f48:	8062      	strh	r2, [r4, #2]
    9f4a:	f001 fcb9 	bl	b8c0 <__cxa_guard_release>
    9f4e:	e7ca      	b.n	9ee6 <loop+0x3aa>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9f50:	6833      	ldr	r3, [r6, #0]
    9f52:	9304      	str	r3, [sp, #16]
	return ret;
    9f54:	9b04      	ldr	r3, [sp, #16]
    9f56:	4a20      	ldr	r2, [pc, #128]	; (9fd8 <loop+0x49c>)
    9f58:	4c25      	ldr	r4, [pc, #148]	; (9ff0 <loop+0x4b4>)
    9f5a:	fba2 2303 	umull	r2, r3, r2, r3
    9f5e:	099b      	lsrs	r3, r3, #6
    9f60:	221e      	movs	r2, #30
		modeTimer.setPeriod(mode_change_time);
		if (mode_change) { change_mode(); }
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    9f62:	4628      	mov	r0, r5
    9f64:	8023      	strh	r3, [r4, #0]
    9f66:	8062      	strh	r2, [r4, #2]
    9f68:	f001 fcaa 	bl	b8c0 <__cxa_guard_release>
    9f6c:	e7b3      	b.n	9ed6 <loop+0x39a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9f6e:	6833      	ldr	r3, [r6, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9f70:	4c23      	ldr	r4, [pc, #140]	; (a000 <loop+0x4c4>)
    9f72:	9307      	str	r3, [sp, #28]
	return ret;
    9f74:	9b07      	ldr	r3, [sp, #28]
    9f76:	6023      	str	r3, [r4, #0]
    9f78:	2332      	movs	r3, #50	; 0x32
			else { change_palette(curr_leds); }
		}
	}

	// Blend palettes
	EVERY_N_MILLISECONDS(50) {
    9f7a:	4628      	mov	r0, r5
    9f7c:	6063      	str	r3, [r4, #4]
    9f7e:	f001 fc9f 	bl	b8c0 <__cxa_guard_release>
    9f82:	e6dd      	b.n	9d40 <loop+0x204>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9f84:	6833      	ldr	r3, [r6, #0]
    9f86:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    9f88:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    9f8a:	4a1e      	ldr	r2, [pc, #120]	; (a004 <loop+0x4c8>)
    9f8c:	4c1a      	ldr	r4, [pc, #104]	; (9ff8 <loop+0x4bc>)
    9f8e:	fba2 2303 	umull	r2, r3, r2, r3
    9f92:	0b9b      	lsrs	r3, r3, #14
    9f94:	2201      	movs	r2, #1
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_MINUTES(1) { number_of_min_on++; }
    9f96:	4628      	mov	r0, r5
    9f98:	8023      	strh	r3, [r4, #0]
    9f9a:	8062      	strh	r2, [r4, #2]
    9f9c:	f001 fc90 	bl	b8c0 <__cxa_guard_release>
    9fa0:	e7aa      	b.n	9ef8 <loop+0x3bc>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9fa2:	6833      	ldr	r3, [r6, #0]
    9fa4:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    9fa6:	4c18      	ldr	r4, [pc, #96]	; (a008 <loop+0x4cc>)
	return ret;
    9fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    9faa:	f89b 3000 	ldrb.w	r3, [fp]
    9fae:	6022      	str	r2, [r4, #0]
    9fb0:	4640      	mov	r0, r8
    9fb2:	6063      	str	r3, [r4, #4]
    9fb4:	f001 fc84 	bl	b8c0 <__cxa_guard_release>
    9fb8:	e6e7      	b.n	9d8a <loop+0x24e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9fba:	6833      	ldr	r3, [r6, #0]
    9fbc:	930d      	str	r3, [sp, #52]	; 0x34
    9fbe:	4c13      	ldr	r4, [pc, #76]	; (a00c <loop+0x4d0>)
	return ret;
    9fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    9fc2:	782b      	ldrb	r3, [r5, #0]
    9fc4:	6022      	str	r2, [r4, #0]
    9fc6:	4640      	mov	r0, r8
    9fc8:	6063      	str	r3, [r4, #4]
    9fca:	f001 fc79 	bl	b8c0 <__cxa_guard_release>
    9fce:	e6fd      	b.n	9dcc <loop+0x290>
    9fd0:	4650      	mov	r0, sl
    9fd2:	f7f8 ff99 	bl	2f08 <change_palette(LEDStruct&) [clone .part.12]>
    9fd6:	e755      	b.n	9e84 <loop+0x348>
    9fd8:	10624dd3 	.word	0x10624dd3
    9fdc:	1fff8722 	.word	0x1fff8722
    9fe0:	1fff9504 	.word	0x1fff9504
    9fe4:	1fff8cb0 	.word	0x1fff8cb0
    9fe8:	1fffa8f8 	.word	0x1fffa8f8
    9fec:	1fffa87c 	.word	0x1fffa87c
    9ff0:	1fff9524 	.word	0x1fff9524
    9ff4:	1fff9534 	.word	0x1fff9534
    9ff8:	1fff9e70 	.word	0x1fff9e70
    9ffc:	1fff9518 	.word	0x1fff9518
    a000:	1fff9528 	.word	0x1fff9528
    a004:	45e7b273 	.word	0x45e7b273
    a008:	1fff94fc 	.word	0x1fff94fc
    a00c:	1fff94f4 	.word	0x1fff94f4
    a010:	1fff9e74 	.word	0x1fff9e74

0000a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    a014:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    a016:	0604      	lsls	r4, r0, #24
    a018:	f100 8119 	bmi.w	a24e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a01c:	4b48      	ldr	r3, [pc, #288]	; (a140 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a01e:	4949      	ldr	r1, [pc, #292]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a020:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a022:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a024:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a026:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a028:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a02a:	bf00      	nop
    a02c:	bf00      	nop
    a02e:	bf00      	nop
    a030:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a032:	601a      	str	r2, [r3, #0]
    a034:	bf00      	nop
    a036:	bf00      	nop
    a038:	bf00      	nop
    a03a:	bf00      	nop
    a03c:	0641      	lsls	r1, r0, #25
    a03e:	f140 8083 	bpl.w	a148 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a042:	4a40      	ldr	r2, [pc, #256]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a044:	2102      	movs	r1, #2
    a046:	2304      	movs	r3, #4
    a048:	6011      	str	r1, [r2, #0]
    a04a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a04c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a04e:	bf00      	nop
    a050:	bf00      	nop
    a052:	bf00      	nop
    a054:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a056:	6053      	str	r3, [r2, #4]
    a058:	bf00      	nop
    a05a:	bf00      	nop
    a05c:	bf00      	nop
    a05e:	bf00      	nop
    a060:	0682      	lsls	r2, r0, #26
    a062:	f140 8084 	bpl.w	a16e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a066:	4a37      	ldr	r2, [pc, #220]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a068:	2102      	movs	r1, #2
    a06a:	2304      	movs	r3, #4
    a06c:	6011      	str	r1, [r2, #0]
    a06e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a070:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a072:	bf00      	nop
    a074:	bf00      	nop
    a076:	bf00      	nop
    a078:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a07a:	6053      	str	r3, [r2, #4]
    a07c:	bf00      	nop
    a07e:	bf00      	nop
    a080:	bf00      	nop
    a082:	bf00      	nop
    a084:	06c3      	lsls	r3, r0, #27
    a086:	f140 8085 	bpl.w	a194 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a08a:	4a2e      	ldr	r2, [pc, #184]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a08c:	2102      	movs	r1, #2
    a08e:	2304      	movs	r3, #4
    a090:	6011      	str	r1, [r2, #0]
    a092:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a094:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a096:	bf00      	nop
    a098:	bf00      	nop
    a09a:	bf00      	nop
    a09c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a09e:	6053      	str	r3, [r2, #4]
    a0a0:	bf00      	nop
    a0a2:	bf00      	nop
    a0a4:	bf00      	nop
    a0a6:	bf00      	nop
    a0a8:	0704      	lsls	r4, r0, #28
    a0aa:	f140 8086 	bpl.w	a1ba <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a0ae:	4a25      	ldr	r2, [pc, #148]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a0b0:	2102      	movs	r1, #2
    a0b2:	2304      	movs	r3, #4
    a0b4:	6011      	str	r1, [r2, #0]
    a0b6:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a0b8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a0ba:	bf00      	nop
    a0bc:	bf00      	nop
    a0be:	bf00      	nop
    a0c0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a0c2:	6053      	str	r3, [r2, #4]
    a0c4:	bf00      	nop
    a0c6:	bf00      	nop
    a0c8:	bf00      	nop
    a0ca:	bf00      	nop
    a0cc:	0741      	lsls	r1, r0, #29
    a0ce:	f140 8087 	bpl.w	a1e0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a0d2:	4a1c      	ldr	r2, [pc, #112]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a0d4:	2102      	movs	r1, #2
    a0d6:	2304      	movs	r3, #4
    a0d8:	6011      	str	r1, [r2, #0]
    a0da:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a0dc:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a0de:	bf00      	nop
    a0e0:	bf00      	nop
    a0e2:	bf00      	nop
    a0e4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a0e6:	6053      	str	r3, [r2, #4]
    a0e8:	bf00      	nop
    a0ea:	bf00      	nop
    a0ec:	bf00      	nop
    a0ee:	bf00      	nop
    a0f0:	0782      	lsls	r2, r0, #30
    a0f2:	f140 8088 	bpl.w	a206 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a0f6:	4a13      	ldr	r2, [pc, #76]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    a0f8:	2102      	movs	r1, #2
    a0fa:	2304      	movs	r3, #4
    a0fc:	6011      	str	r1, [r2, #0]
    a0fe:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a100:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a102:	bf00      	nop
    a104:	bf00      	nop
    a106:	bf00      	nop
    a108:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a10a:	6053      	str	r3, [r2, #4]
    a10c:	bf00      	nop
    a10e:	bf00      	nop
    a110:	bf00      	nop
    a112:	bf00      	nop
    a114:	07c3      	lsls	r3, r0, #31
    a116:	f100 8089 	bmi.w	a22c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    a11a:	4b09      	ldr	r3, [pc, #36]	; (a140 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a11c:	4909      	ldr	r1, [pc, #36]	; (a144 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a11e:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a120:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a122:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a124:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a126:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a128:	bf00      	nop
    a12a:	bf00      	nop
    a12c:	bf00      	nop
    a12e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a130:	601a      	str	r2, [r3, #0]
    a132:	bf00      	nop
    a134:	bf00      	nop
    a136:	bf00      	nop
    a138:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    a13a:	bc10      	pop	{r4}
    a13c:	4770      	bx	lr
    a13e:	bf00      	nop
    a140:	400ff0c8 	.word	0x400ff0c8
    a144:	400ff0c4 	.word	0x400ff0c4
    a148:	4b49      	ldr	r3, [pc, #292]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a14a:	494a      	ldr	r1, [pc, #296]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a14c:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a14e:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a150:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a152:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a154:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a156:	bf00      	nop
    a158:	bf00      	nop
    a15a:	bf00      	nop
    a15c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a15e:	601a      	str	r2, [r3, #0]
    a160:	bf00      	nop
    a162:	bf00      	nop
    a164:	bf00      	nop
    a166:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    a168:	0682      	lsls	r2, r0, #26
    a16a:	f53f af7c 	bmi.w	a066 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    a16e:	4b40      	ldr	r3, [pc, #256]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a170:	4940      	ldr	r1, [pc, #256]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a172:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a174:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a176:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a178:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a17a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a17c:	bf00      	nop
    a17e:	bf00      	nop
    a180:	bf00      	nop
    a182:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a184:	601a      	str	r2, [r3, #0]
    a186:	bf00      	nop
    a188:	bf00      	nop
    a18a:	bf00      	nop
    a18c:	bf00      	nop
    a18e:	06c3      	lsls	r3, r0, #27
    a190:	f53f af7b 	bmi.w	a08a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    a194:	4b36      	ldr	r3, [pc, #216]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a196:	4937      	ldr	r1, [pc, #220]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a198:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a19a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a19c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a19e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a1a0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a1a2:	bf00      	nop
    a1a4:	bf00      	nop
    a1a6:	bf00      	nop
    a1a8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1aa:	601a      	str	r2, [r3, #0]
    a1ac:	bf00      	nop
    a1ae:	bf00      	nop
    a1b0:	bf00      	nop
    a1b2:	bf00      	nop
    a1b4:	0704      	lsls	r4, r0, #28
    a1b6:	f53f af7a 	bmi.w	a0ae <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    a1ba:	4b2d      	ldr	r3, [pc, #180]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1bc:	492d      	ldr	r1, [pc, #180]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1be:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1c0:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1c2:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1c4:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a1c6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a1c8:	bf00      	nop
    a1ca:	bf00      	nop
    a1cc:	bf00      	nop
    a1ce:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1d0:	601a      	str	r2, [r3, #0]
    a1d2:	bf00      	nop
    a1d4:	bf00      	nop
    a1d6:	bf00      	nop
    a1d8:	bf00      	nop
    a1da:	0741      	lsls	r1, r0, #29
    a1dc:	f53f af79 	bmi.w	a0d2 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    a1e0:	4b23      	ldr	r3, [pc, #140]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1e2:	4924      	ldr	r1, [pc, #144]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1e4:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1e6:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1e8:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a1ea:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a1ec:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a1ee:	bf00      	nop
    a1f0:	bf00      	nop
    a1f2:	bf00      	nop
    a1f4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a1f6:	601a      	str	r2, [r3, #0]
    a1f8:	bf00      	nop
    a1fa:	bf00      	nop
    a1fc:	bf00      	nop
    a1fe:	bf00      	nop
    a200:	0782      	lsls	r2, r0, #30
    a202:	f53f af78 	bmi.w	a0f6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    a206:	4b1a      	ldr	r3, [pc, #104]	; (a270 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a208:	491a      	ldr	r1, [pc, #104]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a20a:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a20c:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a20e:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a210:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a212:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a214:	bf00      	nop
    a216:	bf00      	nop
    a218:	bf00      	nop
    a21a:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a21c:	601a      	str	r2, [r3, #0]
    a21e:	bf00      	nop
    a220:	bf00      	nop
    a222:	bf00      	nop
    a224:	bf00      	nop
    a226:	07c3      	lsls	r3, r0, #31
    a228:	f57f af77 	bpl.w	a11a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a22c:	4a11      	ldr	r2, [pc, #68]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    a22e:	2102      	movs	r1, #2
    a230:	2304      	movs	r3, #4
    a232:	6011      	str	r1, [r2, #0]
    a234:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a236:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a238:	bf00      	nop
    a23a:	bf00      	nop
    a23c:	bf00      	nop
    a23e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a240:	6053      	str	r3, [r2, #4]
    a242:	bf00      	nop
    a244:	bf00      	nop
    a246:	bf00      	nop
    a248:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    a24a:	bc10      	pop	{r4}
    a24c:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    a24e:	4a09      	ldr	r2, [pc, #36]	; (a274 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    a250:	2102      	movs	r1, #2
    a252:	2304      	movs	r3, #4
    a254:	6011      	str	r1, [r2, #0]
    a256:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    a258:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    a25a:	bf00      	nop
    a25c:	bf00      	nop
    a25e:	bf00      	nop
    a260:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    a262:	6053      	str	r3, [r2, #4]
    a264:	bf00      	nop
    a266:	bf00      	nop
    a268:	bf00      	nop
    a26a:	bf00      	nop
    a26c:	e6e6      	b.n	a03c <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    a26e:	bf00      	nop
    a270:	400ff0c8 	.word	0x400ff0c8
    a274:	400ff0c4 	.word	0x400ff0c4

0000a278 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a27c:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    a27e:	6980      	ldr	r0, [r0, #24]
    a280:	b081      	sub	sp, #4
    a282:	460c      	mov	r4, r1
    a284:	b150      	cbz	r0, a29c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    a286:	6803      	ldr	r3, [r0, #0]
    a288:	4a46      	ldr	r2, [pc, #280]	; (a3a4 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    a28a:	681b      	ldr	r3, [r3, #0]
    a28c:	4293      	cmp	r3, r2
    a28e:	f040 8087 	bne.w	a3a0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    a292:	6842      	ldr	r2, [r0, #4]
    a294:	7b01      	ldrb	r1, [r0, #12]
    a296:	7813      	ldrb	r3, [r2, #0]
    a298:	430b      	orrs	r3, r1
    a29a:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    a29c:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    a29e:	7d27      	ldrb	r7, [r4, #20]
    a2a0:	f894 8013 	ldrb.w	r8, [r4, #19]
    a2a4:	f894 9012 	ldrb.w	r9, [r4, #18]
    a2a8:	f7ff feb4 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a2ac:	2000      	movs	r0, #0
    a2ae:	f7ff feb1 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a2b2:	2000      	movs	r0, #0
    a2b4:	f7ff feae 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a2b8:	2000      	movs	r0, #0
    a2ba:	f7ff feab 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    a2be:	68a3      	ldr	r3, [r4, #8]
    a2c0:	2b00      	cmp	r3, #0
    a2c2:	dd44      	ble.n	a34e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    a2c4:	6822      	ldr	r2, [r4, #0]
    a2c6:	f109 0901 	add.w	r9, r9, #1
    a2ca:	f108 0801 	add.w	r8, r8, #1
    a2ce:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    a2d0:	69a1      	ldr	r1, [r4, #24]
    a2d2:	1853      	adds	r3, r2, r1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    a2d4:	5c56      	ldrb	r6, [r2, r1]
    a2d6:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    a2d8:	f893 b002 	ldrb.w	fp, [r3, #2]
    a2dc:	fb08 f505 	mul.w	r5, r8, r5
    a2e0:	122d      	asrs	r5, r5, #8
    a2e2:	fb07 fb0b 	mul.w	fp, r7, fp
    a2e6:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    a2ea:	022d      	lsls	r5, r5, #8
    a2ec:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    a2ee:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    a2f2:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    a2f4:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    a2f8:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    a2fa:	4335      	orrs	r5, r6
    a2fc:	f7ff fe8a 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a300:	b2ad      	uxth	r5, r5
    a302:	fa5f f08b 	uxtb.w	r0, fp
    a306:	f7ff fe85 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a30a:	0a28      	lsrs	r0, r5, #8
    a30c:	f7ff fe82 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a310:	b2e8      	uxtb	r0, r5
    a312:	f7ff fe7f 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    a316:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    a318:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    a31a:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    a31c:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    a320:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    a322:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    a326:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    a32a:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    a32c:	f994 2015 	ldrsb.w	r2, [r4, #21]
    a330:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    a332:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    a336:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    a33a:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    a33e:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    a340:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    a342:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    a344:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    a346:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    a348:	6022      	str	r2, [r4, #0]
    a34a:	60a3      	str	r3, [r4, #8]
    a34c:	dcc0      	bgt.n	a2d0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    a34e:	6864      	ldr	r4, [r4, #4]
    a350:	2c00      	cmp	r4, #0
    a352:	bfb8      	it	lt
    a354:	341f      	addlt	r4, #31
    a356:	1164      	asrs	r4, r4, #5
    a358:	20ff      	movs	r0, #255	; 0xff
    a35a:	f7ff fe5b 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a35e:	2000      	movs	r0, #0
    a360:	f7ff fe58 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a364:	2000      	movs	r0, #0
    a366:	f7ff fe55 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a36a:	3c01      	subs	r4, #1
    a36c:	2000      	movs	r0, #0
    a36e:	f7ff fe51 	bl	a014 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    a372:	1c63      	adds	r3, r4, #1
    a374:	d1f0      	bne.n	a358 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    a376:	f8da 0018 	ldr.w	r0, [sl, #24]
    a37a:	b150      	cbz	r0, a392 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    a37c:	6803      	ldr	r3, [r0, #0]
    a37e:	4a0a      	ldr	r2, [pc, #40]	; (a3a8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    a380:	685b      	ldr	r3, [r3, #4]
    a382:	4293      	cmp	r3, r2
    a384:	d108      	bne.n	a398 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    a386:	6842      	ldr	r2, [r0, #4]
    a388:	7b01      	ldrb	r1, [r0, #12]
    a38a:	7813      	ldrb	r3, [r2, #0]
    a38c:	ea23 0301 	bic.w	r3, r3, r1
    a390:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    a392:	b001      	add	sp, #4
    a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a398:	b001      	add	sp, #4
    a39a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a39e:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    a3a0:	4798      	blx	r3
    a3a2:	e77b      	b.n	a29c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    a3a4:	00000475 	.word	0x00000475
    a3a8:	00000481 	.word	0x00000481

0000a3ac <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    a3b0:	4bdd      	ldr	r3, [pc, #884]	; (a728 <_GLOBAL__sub_I_ib_jul01_gp+0x37c>)
    a3b2:	49de      	ldr	r1, [pc, #888]	; (a72c <_GLOBAL__sub_I_ib_jul01_gp+0x380>)
    a3b4:	4ade      	ldr	r2, [pc, #888]	; (a730 <_GLOBAL__sub_I_ib_jul01_gp+0x384>)
#ifndef PACIFIC_WAVES_H
#define PACIFIC_WAVES_H


CRGBPalette16 pacifica_palette_1 =
    a3b6:	48df      	ldr	r0, [pc, #892]	; (a734 <_GLOBAL__sub_I_ib_jul01_gp+0x388>)
    a3b8:	b09f      	sub	sp, #124	; 0x7c
    a3ba:	2400      	movs	r4, #0
    a3bc:	2501      	movs	r5, #1
    a3be:	f04f 0e0f 	mov.w	lr, #15
    a3c2:	f04f 36ff 	mov.w	r6, #4294967295
    a3c6:	f883 e1c3 	strb.w	lr, [r3, #451]	; 0x1c3
    a3ca:	f883 61c2 	strb.w	r6, [r3, #450]	; 0x1c2
    a3ce:	f883 51c4 	strb.w	r5, [r3, #452]	; 0x1c4
    a3d2:	f883 51c5 	strb.w	r5, [r3, #453]	; 0x1c5
    a3d6:	f883 41c7 	strb.w	r4, [r3, #455]	; 0x1c7
    a3da:	f883 5228 	strb.w	r5, [r3, #552]	; 0x228
    a3de:	f883 522a 	strb.w	r5, [r3, #554]	; 0x22a
    a3e2:	f883 422e 	strb.w	r4, [r3, #558]	; 0x22e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    a3e6:	f04f 0305 	mov.w	r3, #5
    a3ea:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    a3ee:	f04f 0307 	mov.w	r3, #7
    a3f2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    a3f6:	f04f 0304 	mov.w	r3, #4
    a3fa:	f04f 0903 	mov.w	r9, #3
    a3fe:	f881 61c2 	strb.w	r6, [r1, #450]	; 0x1c2
    a402:	f881 e1c3 	strb.w	lr, [r1, #451]	; 0x1c3
    a406:	f881 51c4 	strb.w	r5, [r1, #452]	; 0x1c4
    a40a:	f881 51c5 	strb.w	r5, [r1, #453]	; 0x1c5
    a40e:	f881 5228 	strb.w	r5, [r1, #552]	; 0x228
    a412:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    a416:	f881 41c7 	strb.w	r4, [r1, #455]	; 0x1c7
    a41a:	f881 422e 	strb.w	r4, [r1, #558]	; 0x22e
    a41e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    a422:	f04f 010d 	mov.w	r1, #13
    a426:	f04f 0309 	mov.w	r3, #9
    a42a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    a42e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    a432:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    a436:	f882 61c2 	strb.w	r6, [r2, #450]	; 0x1c2
    a43a:	f882 e1c3 	strb.w	lr, [r2, #451]	; 0x1c3
    a43e:	f882 51c4 	strb.w	r5, [r2, #452]	; 0x1c4
    a442:	f882 51c5 	strb.w	r5, [r2, #453]	; 0x1c5
    a446:	f882 41c7 	strb.w	r4, [r2, #455]	; 0x1c7
    a44a:	f882 5228 	strb.w	r5, [r2, #552]	; 0x228
    a44e:	f882 522a 	strb.w	r5, [r2, #554]	; 0x22a
    a452:	f882 422e 	strb.w	r4, [r2, #558]	; 0x22e
    a456:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    a45a:	f88d 9041 	strb.w	r9, [sp, #65]	; 0x41
    a45e:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
    a462:	f04f 0110 	mov.w	r1, #16
    a466:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
    a46a:	f04f 0112 	mov.w	r1, #18
    a46e:	f88d 104e 	strb.w	r1, [sp, #78]	; 0x4e
    a472:	f04f 011c 	mov.w	r1, #28
    a476:	f88d 105e 	strb.w	r1, [sp, #94]	; 0x5e
    a47a:	f04f 0126 	mov.w	r1, #38	; 0x26
    a47e:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    a482:	f04f 0131 	mov.w	r1, #49	; 0x31
    a486:	f04f 0a02 	mov.w	sl, #2
    a48a:	f04f 0814 	mov.w	r8, #20
    a48e:	2719      	movs	r7, #25
    a490:	f04f 0b17 	mov.w	fp, #23
    a494:	f88d 1066 	strb.w	r1, [sp, #102]	; 0x66
    a498:	f04f 020b 	mov.w	r2, #11
    a49c:	f04f 013b 	mov.w	r1, #59	; 0x3b
    a4a0:	f04f 0646 	mov.w	r6, #70	; 0x46
    a4a4:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    a4a8:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    a4ac:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
    a4b0:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    a4b4:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    a4b8:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    a4bc:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    a4c0:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    a4c4:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    a4c8:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    a4cc:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    a4d0:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    a4d4:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    a4d8:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    a4dc:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    a4e0:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    a4e4:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    a4e8:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    a4ec:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    a4f0:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    a4f4:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    a4f8:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    a4fc:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    a500:	f88d 8052 	strb.w	r8, [sp, #82]	; 0x52
    a504:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
    a508:	f88d 705a 	strb.w	r7, [sp, #90]	; 0x5a
    a50c:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a
    a510:	f88d 606e 	strb.w	r6, [sp, #110]	; 0x6e
    a514:	ae1d      	add	r6, sp, #116	; 0x74
    a516:	960c      	str	r6, [sp, #48]	; 0x30
    a518:	ae1c      	add	r6, sp, #112	; 0x70
    a51a:	960b      	str	r6, [sp, #44]	; 0x2c
    a51c:	ae1b      	add	r6, sp, #108	; 0x6c
    a51e:	960a      	str	r6, [sp, #40]	; 0x28
    a520:	ae1a      	add	r6, sp, #104	; 0x68
    a522:	9609      	str	r6, [sp, #36]	; 0x24
    a524:	ae19      	add	r6, sp, #100	; 0x64
    a526:	9608      	str	r6, [sp, #32]
    a528:	ae18      	add	r6, sp, #96	; 0x60
    a52a:	9607      	str	r6, [sp, #28]
    a52c:	ae17      	add	r6, sp, #92	; 0x5c
    a52e:	9606      	str	r6, [sp, #24]
    a530:	ae16      	add	r6, sp, #88	; 0x58
    a532:	9605      	str	r6, [sp, #20]
    a534:	ae15      	add	r6, sp, #84	; 0x54
    a536:	9604      	str	r6, [sp, #16]
    a538:	ae14      	add	r6, sp, #80	; 0x50
    a53a:	9603      	str	r6, [sp, #12]
    a53c:	ae13      	add	r6, sp, #76	; 0x4c
    a53e:	9602      	str	r6, [sp, #8]
    a540:	ae12      	add	r6, sp, #72	; 0x48
    a542:	9601      	str	r6, [sp, #4]
    a544:	f04f 0c55 	mov.w	ip, #85	; 0x55
    a548:	ae11      	add	r6, sp, #68	; 0x44
    a54a:	f04f 0e4b 	mov.w	lr, #75	; 0x4b
    a54e:	ab10      	add	r3, sp, #64	; 0x40
    a550:	aa0f      	add	r2, sp, #60	; 0x3c
    a552:	a90e      	add	r1, sp, #56	; 0x38
    a554:	9600      	str	r6, [sp, #0]
    a556:	f88d c071 	strb.w	ip, [sp, #113]	; 0x71
    a55a:	f88d e072 	strb.w	lr, [sp, #114]	; 0x72
    a55e:	f04f 0c28 	mov.w	ip, #40	; 0x28
    a562:	f04f 0eaa 	mov.w	lr, #170	; 0xaa
    a566:	f04f 0650 	mov.w	r6, #80	; 0x50
    a56a:	f88d 8070 	strb.w	r8, [sp, #112]	; 0x70
    a56e:	f88d c074 	strb.w	ip, [sp, #116]	; 0x74
    a572:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    a576:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
    a57a:	f7f6 f9a1 	bl	8c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    a57e:	f04f 0307 	mov.w	r3, #7
    a582:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    a586:	f04f 0305 	mov.w	r3, #5
    a58a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    a58e:	f04f 0304 	mov.w	r3, #4
    a592:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
    a596:	f04f 0309 	mov.w	r3, #9
    a59a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    a59e:	f04f 030b 	mov.w	r3, #11
    a5a2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    a5a6:	f04f 030d 	mov.w	r3, #13
    a5aa:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
    a5ae:	f04f 0310 	mov.w	r3, #16
    a5b2:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    a5b6:	f04f 0312 	mov.w	r3, #18
    a5ba:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
    a5be:	f04f 0226 	mov.w	r2, #38	; 0x26
    a5c2:	f04f 031c 	mov.w	r3, #28
    a5c6:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    a5ca:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    a5ce:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    a5d2:	f88d 9041 	strb.w	r9, [sp, #65]	; 0x41
    a5d6:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    a5da:	f88d 9045 	strb.w	r9, [sp, #69]	; 0x45
    a5de:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    a5e2:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
    a5e6:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    a5ea:	f88d a04d 	strb.w	sl, [sp, #77]	; 0x4d
    a5ee:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    a5f2:	f88d 5051 	strb.w	r5, [sp, #81]	; 0x51
    a5f6:	f88d 8052 	strb.w	r8, [sp, #82]	; 0x52
    a5fa:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    a5fe:	f88d 5055 	strb.w	r5, [sp, #85]	; 0x55
    a602:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
    a606:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    a60a:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
    a60e:	f88d 705a 	strb.w	r7, [sp, #90]	; 0x5a
    a612:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    a616:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
    a61a:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
    a61e:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    a622:	f88d 4061 	strb.w	r4, [sp, #97]	; 0x61
    a626:	f88d 2062 	strb.w	r2, [sp, #98]	; 0x62
    a62a:	f88d 7074 	strb.w	r7, [sp, #116]	; 0x74
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x14554B, 0x28AA50 };
CRGBPalette16 pacifica_palette_2 =
    a62e:	af1d      	add	r7, sp, #116	; 0x74
    a630:	970c      	str	r7, [sp, #48]	; 0x30
    a632:	af1c      	add	r7, sp, #112	; 0x70
    a634:	970b      	str	r7, [sp, #44]	; 0x2c
    a636:	af1b      	add	r7, sp, #108	; 0x6c
    a638:	970a      	str	r7, [sp, #40]	; 0x28
    a63a:	af1a      	add	r7, sp, #104	; 0x68
    a63c:	9709      	str	r7, [sp, #36]	; 0x24
    a63e:	af19      	add	r7, sp, #100	; 0x64
    a640:	a914      	add	r1, sp, #80	; 0x50
    a642:	9708      	str	r7, [sp, #32]
    a644:	af18      	add	r7, sp, #96	; 0x60
    a646:	9103      	str	r1, [sp, #12]
    a648:	9707      	str	r7, [sp, #28]
    a64a:	a913      	add	r1, sp, #76	; 0x4c
    a64c:	af17      	add	r7, sp, #92	; 0x5c
    a64e:	9102      	str	r1, [sp, #8]
    a650:	9706      	str	r7, [sp, #24]
    a652:	a912      	add	r1, sp, #72	; 0x48
    a654:	af16      	add	r7, sp, #88	; 0x58
    a656:	f04f 0c31 	mov.w	ip, #49	; 0x31
    a65a:	9101      	str	r1, [sp, #4]
    a65c:	f88d c066 	strb.w	ip, [sp, #102]	; 0x66
    a660:	a911      	add	r1, sp, #68	; 0x44
    a662:	9705      	str	r7, [sp, #20]
    a664:	f04f 0c3b 	mov.w	ip, #59	; 0x3b
    a668:	af15      	add	r7, sp, #84	; 0x54
    a66a:	ab10      	add	r3, sp, #64	; 0x40
    a66c:	aa0f      	add	r2, sp, #60	; 0x3c
    a66e:	9100      	str	r1, [sp, #0]
    a670:	255f      	movs	r5, #95	; 0x5f
    a672:	a90e      	add	r1, sp, #56	; 0x38
    a674:	f04f 0e52 	mov.w	lr, #82	; 0x52
    a678:	f88d c06a 	strb.w	ip, [sp, #106]	; 0x6a
    a67c:	9704      	str	r7, [sp, #16]
    a67e:	f04f 0c46 	mov.w	ip, #70	; 0x46
    a682:	26be      	movs	r6, #190	; 0xbe
    a684:	f04f 070c 	mov.w	r7, #12
    a688:	482b      	ldr	r0, [pc, #172]	; (a738 <_GLOBAL__sub_I_ib_jul01_gp+0x38c>)
    a68a:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    a68e:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
    a692:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    a696:	f88d 4069 	strb.w	r4, [sp, #105]	; 0x69
    a69a:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    a69e:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    a6a2:	f88d c06e 	strb.w	ip, [sp, #110]	; 0x6e
    a6a6:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
    a6aa:	f88d 5071 	strb.w	r5, [sp, #113]	; 0x71
    a6ae:	f88d 5076 	strb.w	r5, [sp, #118]	; 0x76
    a6b2:	f88d e072 	strb.w	lr, [sp, #114]	; 0x72
    a6b6:	f88d 6075 	strb.w	r6, [sp, #117]	; 0x75
    a6ba:	f7f6 f901 	bl	8c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    a6be:	200e      	movs	r0, #14
    a6c0:	f04f 0305 	mov.w	r3, #5
    a6c4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    a6c8:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    a6cc:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    a6d0:	f04f 0309 	mov.w	r3, #9
    a6d4:	f04f 001a 	mov.w	r0, #26
    a6d8:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
    a6dc:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    a6e0:	f04f 030b 	mov.w	r3, #11
    a6e4:	f04f 0027 	mov.w	r0, #39	; 0x27
    a6e8:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    a6ec:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    a6f0:	f04f 030c 	mov.w	r3, #12
    a6f4:	f04f 002d 	mov.w	r0, #45	; 0x2d
    a6f8:	2520      	movs	r5, #32
    a6fa:	2640      	movs	r6, #64	; 0x40
    a6fc:	2708      	movs	r7, #8
    a6fe:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
    a702:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    a706:	f04f 0b06 	mov.w	fp, #6
    a70a:	f04f 0c33 	mov.w	ip, #51	; 0x33
    a70e:	f04f 0e39 	mov.w	lr, #57	; 0x39
    a712:	f04f 0310 	mov.w	r3, #16
    a716:	f04f 0050 	mov.w	r0, #80	; 0x50
    a71a:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
    a71e:	f88d a039 	strb.w	sl, [sp, #57]	; 0x39
    a722:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
    a726:	e009      	b.n	a73c <_GLOBAL__sub_I_ib_jul01_gp+0x390>
    a728:	1fff960c 	.word	0x1fff960c
    a72c:	1fff9e74 	.word	0x1fff9e74
    a730:	1fff8cb0 	.word	0x1fff8cb0
    a734:	1fff9564 	.word	0x1fff9564
    a738:	1fff9594 	.word	0x1fff9594
    a73c:	f88d 903d 	strb.w	r9, [sp, #61]	; 0x3d
    a740:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    a744:	f88d 8042 	strb.w	r8, [sp, #66]	; 0x42
    a748:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
    a74c:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
    a750:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
    a754:	f88d 4050 	strb.w	r4, [sp, #80]	; 0x50
    a758:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
    a75c:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
    a760:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
    a764:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
    a768:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
    a76c:	f88d 8061 	strb.w	r8, [sp, #97]	; 0x61
    a770:	f88d 703a 	strb.w	r7, [sp, #58]	; 0x3a
    a774:	f88d 7049 	strb.w	r7, [sp, #73]	; 0x49
    a778:	f88d c056 	strb.w	ip, [sp, #86]	; 0x56
    a77c:	f88d e05a 	strb.w	lr, [sp, #90]	; 0x5a
    a780:	f88d b045 	strb.w	fp, [sp, #69]	; 0x45
    a784:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
    a788:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
    a78c:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a790:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
    a794:	f88d 4068 	strb.w	r4, [sp, #104]	; 0x68
    a798:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
    a79c:	f04f 0410 	mov.w	r4, #16
    a7a0:	f04f 0970 	mov.w	r9, #112	; 0x70
    a7a4:	f88d 4070 	strb.w	r4, [sp, #112]	; 0x70
{ 0x000507, 0x000409, 0x00030B, 0x00030D, 0x000210, 0x000212, 0x000114, 0x000117,
  0x000019, 0x00001C, 0x000026, 0x000031, 0x00003B, 0x000046, 0x0C5F52, 0x19BE5F };
CRGBPalette16 pacifica_palette_3 =
    a7a8:	ac1d      	add	r4, sp, #116	; 0x74
    a7aa:	940c      	str	r4, [sp, #48]	; 0x30
    a7ac:	eb0d 0409 	add.w	r4, sp, r9
    a7b0:	940b      	str	r4, [sp, #44]	; 0x2c
    a7b2:	ac1b      	add	r4, sp, #108	; 0x6c
    a7b4:	940a      	str	r4, [sp, #40]	; 0x28
    a7b6:	ac1a      	add	r4, sp, #104	; 0x68
    a7b8:	f04f 0e60 	mov.w	lr, #96	; 0x60
    a7bc:	a814      	add	r0, sp, #80	; 0x50
    a7be:	9409      	str	r4, [sp, #36]	; 0x24
    a7c0:	ac19      	add	r4, sp, #100	; 0x64
    a7c2:	9003      	str	r0, [sp, #12]
    a7c4:	9408      	str	r4, [sp, #32]
    a7c6:	a813      	add	r0, sp, #76	; 0x4c
    a7c8:	eb0d 040e 	add.w	r4, sp, lr
    a7cc:	9002      	str	r0, [sp, #8]
    a7ce:	9407      	str	r4, [sp, #28]
    a7d0:	a812      	add	r0, sp, #72	; 0x48
    a7d2:	ac15      	add	r4, sp, #84	; 0x54
    a7d4:	9001      	str	r0, [sp, #4]
    a7d6:	9404      	str	r4, [sp, #16]
    a7d8:	a811      	add	r0, sp, #68	; 0x44
    a7da:	ac16      	add	r4, sp, #88	; 0x58
    a7dc:	f04f 3aff 	mov.w	sl, #4294967295
    a7e0:	9000      	str	r0, [sp, #0]
    a7e2:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
    a7e6:	f88d a076 	strb.w	sl, [sp, #118]	; 0x76
    a7ea:	9405      	str	r4, [sp, #20]
    a7ec:	eb0d 0306 	add.w	r3, sp, r6
    a7f0:	aa0f      	add	r2, sp, #60	; 0x3c
    a7f2:	a90e      	add	r1, sp, #56	; 0x38
    a7f4:	2718      	movs	r7, #24
    a7f6:	f04f 0880 	mov.w	r8, #128	; 0x80
    a7fa:	f04f 0a1c 	mov.w	sl, #28
    a7fe:	ac17      	add	r4, sp, #92	; 0x5c
    a800:	480d      	ldr	r0, [pc, #52]	; (a838 <_GLOBAL__sub_I_ib_jul01_gp+0x48c>)
    a802:	f88d a069 	strb.w	sl, [sp, #105]	; 0x69
    a806:	f88d 506d 	strb.w	r5, [sp, #109]	; 0x6d
    a80a:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
    a80e:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
    a812:	9406      	str	r4, [sp, #24]
    a814:	f88d 7065 	strb.w	r7, [sp, #101]	; 0x65
    a818:	f88d e066 	strb.w	lr, [sp, #102]	; 0x66
    a81c:	f88d e075 	strb.w	lr, [sp, #117]	; 0x75
    a820:	f88d 906a 	strb.w	r9, [sp, #106]	; 0x6a
    a824:	f88d 806e 	strb.w	r8, [sp, #110]	; 0x6e
    a828:	f88d c072 	strb.w	ip, [sp, #114]	; 0x72
    a82c:	f7f6 f848 	bl	8c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>
    a830:	b01f      	add	sp, #124	; 0x7c
    a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a836:	bf00      	nop
    a838:	1fff95c4 	.word	0x1fff95c4

0000a83c <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    a83c:	2900      	cmp	r1, #0
    a83e:	dd0b      	ble.n	a858 <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    a840:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a844:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a846:	7813      	ldrb	r3, [r2, #0]
    a848:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    a84a:	7853      	ldrb	r3, [r2, #1]
    a84c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    a84e:	7893      	ldrb	r3, [r2, #2]
    a850:	7083      	strb	r3, [r0, #2]
    a852:	3003      	adds	r0, #3
    a854:	4288      	cmp	r0, r1
    a856:	d1f6      	bne.n	a846 <fill_solid(CRGB*, int, CRGB const&)+0xa>
    a858:	4770      	bx	lr
    a85a:	bf00      	nop

0000a85c <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    a85c:	b570      	push	{r4, r5, r6, lr}
    a85e:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    a860:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    a862:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    a864:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    a866:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    a86a:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    a86e:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    a872:	dd10      	ble.n	a896 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    a874:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a878:	461e      	mov	r6, r3
    a87a:	4604      	mov	r4, r0
    a87c:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    a87e:	4621      	mov	r1, r4
    a880:	a801      	add	r0, sp, #4
    a882:	f000 fafb 	bl	ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    a886:	f89d 2004 	ldrb.w	r2, [sp, #4]
    a88a:	3403      	adds	r4, #3
    a88c:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    a88e:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    a890:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    a894:	d1f3      	bne.n	a87e <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    a896:	b002      	add	sp, #8
    a898:	bd70      	pop	{r4, r5, r6, pc}
    a89a:	bf00      	nop

0000a89c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    a8a0:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    a8a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    a8a4:	d352      	bcc.n	a94c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    a8a6:	f896 e000 	ldrb.w	lr, [r6]
    a8aa:	7815      	ldrb	r5, [r2, #0]
    a8ac:	7877      	ldrb	r7, [r6, #1]
    a8ae:	f896 8002 	ldrb.w	r8, [r6, #2]
    a8b2:	7854      	ldrb	r4, [r2, #1]
    a8b4:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    a8b8:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    a8bc:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    a8c0:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    a8c4:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    a8c8:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    a8cc:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    a8d0:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    a8d4:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    a8d6:	b3b2      	cbz	r2, a946 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    a8d8:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a8dc:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    a8e0:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a8e4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    a8e8:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    a8ec:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a8f0:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    a8f2:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    a8f6:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    a8fa:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    a8fe:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    a902:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    a906:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    a90a:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    a90e:	d818      	bhi.n	a942 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    a910:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a914:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    a916:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a918:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a91a:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    a91e:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    a922:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    a926:	4475      	add	r5, lr
        g88 += gdelta87;
    a928:	4454      	add	r4, sl
        b88 += bdelta87;
    a92a:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a92c:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a92e:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    a932:	b2ad      	uxth	r5, r5
        g = rhs.g;
    a934:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    a938:	b2a4      	uxth	r4, r4
        b = rhs.b;
    a93a:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    a93e:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    a940:	d2e6      	bcs.n	a910 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    a942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a946:	f04f 0b01 	mov.w	fp, #1
    a94a:	e7c7      	b.n	a8dc <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    a94c:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a94e:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a950:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    a954:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    a956:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a958:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    a95c:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    a960:	7015      	strb	r5, [r2, #0]
    a962:	4619      	mov	r1, r3
    a964:	f886 e000 	strb.w	lr, [r6]
    a968:	464b      	mov	r3, r9
        g = rhs.g;
    a96a:	7054      	strb	r4, [r2, #1]
    a96c:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    a96e:	f882 c002 	strb.w	ip, [r2, #2]
    a972:	f886 8002 	strb.w	r8, [r6, #2]
    a976:	e79f      	b.n	a8b8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

0000a978 <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    a978:	b309      	cbz	r1, a9be <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    a97a:	b430      	push	{r4, r5}
    a97c:	1e4d      	subs	r5, r1, #1
    a97e:	b2ad      	uxth	r5, r5
    a980:	43d2      	mvns	r2, r2
    a982:	3501      	adds	r5, #1
    a984:	b2d2      	uxtb	r2, r2
    a986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    a98a:	4405      	add	r5, r0
    a98c:	3201      	adds	r2, #1
    a98e:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    a990:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    a994:	fb02 f303 	mul.w	r3, r2, r3
    a998:	121b      	asrs	r3, r3, #8
    a99a:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a99e:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a9a0:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a9a2:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a9a6:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a9aa:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a9ac:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    a9ae:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    a9b0:	7083      	strb	r3, [r0, #2]
    a9b2:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    a9b4:	4285      	cmp	r5, r0
    a9b6:	f104 0403 	add.w	r4, r4, #3
    a9ba:	d1e9      	bne.n	a990 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    a9bc:	bc30      	pop	{r4, r5}
    a9be:	4770      	bx	lr

0000a9c0 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    a9c0:	f7ff bfda 	b.w	a978 <fade_raw(CRGB*, unsigned short, unsigned char)>

0000a9c4 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    a9c4:	b322      	cbz	r2, aa10 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    a9c6:	2aff      	cmp	r2, #255	; 0xff
    a9c8:	d023      	beq.n	aa12 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    a9ca:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a9cc:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a9ce:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a9d0:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a9d2:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    a9d4:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a9d6:	43d2      	mvns	r2, r2
    a9d8:	fb06 7605 	mla	r6, r6, r5, r7
    a9dc:	b2d2      	uxtb	r2, r2
    a9de:	fb04 6402 	mla	r4, r4, r2, r6
    a9e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
    a9e6:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a9e8:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    a9ea:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    a9ec:	191f      	adds	r7, r3, r4
    a9ee:	fb04 7405 	mla	r4, r4, r5, r7
    a9f2:	fb03 4302 	mla	r3, r3, r2, r4
    a9f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    a9fa:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    a9fc:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    a9fe:	18f1      	adds	r1, r6, r3
    aa00:	fb03 1505 	mla	r5, r3, r5, r1
    aa04:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    aa08:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    aa0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    aa0e:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    aa10:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    aa12:	780b      	ldrb	r3, [r1, #0]
    aa14:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    aa16:	784b      	ldrb	r3, [r1, #1]
    aa18:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    aa1a:	788b      	ldrb	r3, [r1, #2]
    aa1c:	7083      	strb	r3, [r0, #2]
    aa1e:	4770      	bx	lr

0000aa20 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    aa20:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    aa22:	780d      	ldrb	r5, [r1, #0]
    aa24:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    aa26:	784d      	ldrb	r5, [r1, #1]
    aa28:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    aa2a:	7889      	ldrb	r1, [r1, #2]
    aa2c:	7081      	strb	r1, [r0, #2]
    aa2e:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    aa30:	4611      	mov	r1, r2
    aa32:	461a      	mov	r2, r3
    aa34:	f7ff ffc6 	bl	a9c4 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    aa38:	4620      	mov	r0, r4
    aa3a:	bd38      	pop	{r3, r4, r5, pc}

0000aa3c <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    aa3c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    aa40:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    aa44:	3100      	adds	r1, #0
    aa46:	bf18      	it	ne
    aa48:	2101      	movne	r1, #1
    aa4a:	eb01 2123 	add.w	r1, r1, r3, asr #8
    aa4e:	b2c9      	uxtb	r1, r1
    aa50:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    aa52:	060a      	lsls	r2, r1, #24
    aa54:	b2db      	uxtb	r3, r3
    aa56:	d40e      	bmi.n	aa76 <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    aa58:	f001 0140 	and.w	r1, r1, #64	; 0x40
    aa5c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    aa60:	b919      	cbnz	r1, aa6a <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    aa62:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    aa64:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    aa66:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    aa68:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    aa6a:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    aa6c:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    aa6e:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    aa70:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    aa72:	7082      	strb	r2, [r0, #2]
    aa74:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    aa76:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    aa78:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    aa7a:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    aa7c:	7042      	strb	r2, [r0, #1]
    aa7e:	4770      	bx	lr

0000aa80 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    aa80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    aa84:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    aa86:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    aa8a:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    aa8e:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    aa90:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    aa94:	d000      	beq.n	aa98 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    aa96:	b9e6      	cbnz	r6, aad2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    aa98:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    aa9a:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    aa9c:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    aa9e:	2bff      	cmp	r3, #255	; 0xff
    aaa0:	d012      	beq.n	aac8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	d043      	beq.n	ab2e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    aaa6:	3301      	adds	r3, #1
    aaa8:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    aaaa:	b11c      	cbz	r4, aab4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    aaac:	fb03 4404 	mla	r4, r3, r4, r4
    aab0:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    aab4:	b119      	cbz	r1, aabe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    aab6:	fb03 1101 	mla	r1, r3, r1, r1
    aaba:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    aabe:	b11a      	cbz	r2, aac8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    aac0:	fb03 2202 	mla	r2, r3, r2, r2
    aac4:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    aac8:	7004      	strb	r4, [r0, #0]
    aaca:	7041      	strb	r1, [r0, #1]
    aacc:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    aace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    aad2:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    aad4:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    aad6:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    aada:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    aadc:	d000      	beq.n	aae0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    aade:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    aae0:	0112      	lsls	r2, r2, #4
    aae2:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    aae6:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    aae8:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    aaec:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    aaf0:	f891 8002 	ldrb.w	r8, [r1, #2]
    aaf4:	fb04 f606 	mul.w	r6, r4, r6
    aaf8:	1c51      	adds	r1, r2, #1
    aafa:	fb04 f509 	mul.w	r5, r4, r9
    aafe:	fb04 f407 	mul.w	r4, r4, r7
    ab02:	f3c4 2407 	ubfx	r4, r4, #8, #8
    ab06:	f3c6 2707 	ubfx	r7, r6, #8, #8
    ab0a:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    ab0e:	fb01 f60c 	mul.w	r6, r1, ip
    ab12:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    ab16:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    ab1a:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    ab1e:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    ab22:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    ab26:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    ab28:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    ab2a:	b2d2      	uxtb	r2, r2
    ab2c:	e7b7      	b.n	aa9e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    ab2e:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    ab30:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    ab32:	461c      	mov	r4, r3
    ab34:	7004      	strb	r4, [r0, #0]
    ab36:	7041      	strb	r1, [r0, #1]
    ab38:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    ab3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ab3e:	bf00      	nop

0000ab40 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab42:	3901      	subs	r1, #1
    ab44:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    ab46:	2500      	movs	r5, #0
    ab48:	302f      	adds	r0, #47	; 0x2f
    ab4a:	e001      	b.n	ab50 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    ab4c:	4284      	cmp	r4, r0
    ab4e:	d01e      	beq.n	ab8e <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    ab50:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    ab54:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    ab58:	42b3      	cmp	r3, r6
    ab5a:	d0f7      	beq.n	ab4c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    ab5c:	f103 0701 	add.w	r7, r3, #1
    ab60:	d204      	bcs.n	ab6c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    ab62:	b2fb      	uxtb	r3, r7
    ab64:	7023      	strb	r3, [r4, #0]
    ab66:	3501      	adds	r5, #1
    ab68:	780e      	ldrb	r6, [r1, #0]
    ab6a:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    ab6c:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    ab6e:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    ab70:	b2ff      	uxtb	r7, r7
    ab72:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    ab76:	d208      	bcs.n	ab8a <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    ab78:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    ab7a:	780e      	ldrb	r6, [r1, #0]
    ab7c:	42be      	cmp	r6, r7
    ab7e:	bf38      	it	cc
    ab80:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    ab82:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    ab86:	bf38      	it	cc
    ab88:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    ab8a:	4295      	cmp	r5, r2
    ab8c:	d3de      	bcc.n	ab4c <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    ab8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ab90 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    ab92:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    ab94:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    ab96:	4604      	mov	r4, r0
    ab98:	bfcc      	ite	gt
    ab9a:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    ab9e:	2500      	movle	r5, #0
    aba0:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    aba2:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    aba4:	bfd8      	it	le
    aba6:	4616      	movle	r6, r2

	pLed->init();
    aba8:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    abaa:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    abac:	6823      	ldr	r3, [r4, #0]
    abae:	6062      	str	r2, [r4, #4]
    abb0:	695b      	ldr	r3, [r3, #20]
    abb2:	4a0a      	ldr	r2, [pc, #40]	; (abdc <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    abb4:	6166      	str	r6, [r4, #20]
    abb6:	4293      	cmp	r3, r2
    abb8:	d101      	bne.n	abbe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    abba:	4620      	mov	r0, r4
    abbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    abbe:	4620      	mov	r0, r4
    abc0:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    abc2:	2800      	cmp	r0, #0
    abc4:	d0f9      	beq.n	abba <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    abc6:	4a06      	ldr	r2, [pc, #24]	; (abe0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    abc8:	4b06      	ldr	r3, [pc, #24]	; (abe4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    abca:	6851      	ldr	r1, [r2, #4]
    abcc:	fb93 f0f0 	sdiv	r0, r3, r0
    abd0:	4288      	cmp	r0, r1
    abd2:	bf38      	it	cc
    abd4:	4608      	movcc	r0, r1
    abd6:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    abd8:	4620      	mov	r0, r4
    abda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abdc:	00000471 	.word	0x00000471
    abe0:	1fffa880 	.word	0x1fffa880
    abe4:	000f4240 	.word	0x000f4240

0000abe8 <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    abe8:	4b08      	ldr	r3, [pc, #32]	; (ac0c <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    abea:	b510      	push	{r4, lr}
    abec:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    abee:	b15c      	cbz	r4, ac08 <CFastLED::clearData()+0x20>
    abf0:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    abf2:	2100      	movs	r1, #0
    abf4:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    abf6:	b123      	cbz	r3, ac02 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    abf8:	6962      	ldr	r2, [r4, #20]
    abfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    abfe:	f003 fbcd 	bl	e39c <memset>
    ac02:	68a4      	ldr	r4, [r4, #8]
    ac04:	2c00      	cmp	r4, #0
    ac06:	d1f3      	bne.n	abf0 <CFastLED::clearData()+0x8>
    ac08:	bd10      	pop	{r4, pc}
    ac0a:	bf00      	nop
    ac0c:	1fffa890 	.word	0x1fffa890

0000ac10 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    ac10:	4b07      	ldr	r3, [pc, #28]	; (ac30 <CFastLED::setCorrection(CRGB const&)+0x20>)
    ac12:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ac14:	b153      	cbz	r3, ac2c <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    ac16:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    ac18:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    ac1a:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    ac1c:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    ac1e:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    ac20:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    ac22:	735a      	strb	r2, [r3, #13]
    ac24:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ac26:	2b00      	cmp	r3, #0
    ac28:	d1f6      	bne.n	ac18 <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    ac2a:	bc10      	pop	{r4}
    ac2c:	4770      	bx	lr
    ac2e:	bf00      	nop
    ac30:	1fffa890 	.word	0x1fffa890

0000ac34 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    ac34:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    ac36:	4c10      	ldr	r4, [pc, #64]	; (ac78 <CFastLED::countFPS(int)+0x44>)
    ac38:	6825      	ldr	r5, [r4, #0]
    ac3a:	1c6e      	adds	r6, r5, #1
    ac3c:	428d      	cmp	r5, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    ac3e:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    ac40:	6026      	str	r6, [r4, #0]
    ac42:	db16      	blt.n	ac72 <CFastLED::countFPS(int)+0x3e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ac44:	4d0d      	ldr	r5, [pc, #52]	; (ac7c <CFastLED::countFPS(int)+0x48>)
      uint32_t now = millis();
      now -= lastframe;
    ac46:	490e      	ldr	r1, [pc, #56]	; (ac80 <CFastLED::countFPS(int)+0x4c>)
    ac48:	682b      	ldr	r3, [r5, #0]
    ac4a:	9300      	str	r3, [sp, #0]
	return ret;
    ac4c:	9a00      	ldr	r2, [sp, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ac4e:	682d      	ldr	r5, [r5, #0]
    ac50:	680b      	ldr	r3, [r1, #0]
    ac52:	9501      	str	r5, [sp, #4]
	return ret;
    ac54:	9d01      	ldr	r5, [sp, #4]
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    lastframe = millis();
    ac56:	600d      	str	r5, [r1, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
    ac58:	1ad3      	subs	r3, r2, r3
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    br = 0;
    ac5a:	f04f 0100 	mov.w	r1, #0
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    ac5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

  if(br++ >= nFrames) {
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
    ac62:	bf08      	it	eq
    ac64:	2301      	moveq	r3, #1
      }
      m_nFPS = (br * 1000) / now;
    ac66:	fb02 f206 	mul.w	r2, r2, r6
    br = 0;
    ac6a:	6021      	str	r1, [r4, #0]
      uint32_t now = millis();
      now -= lastframe;
      if( now == 0 ) {
          now = 1; // prevent division by zero below
      }
      m_nFPS = (br * 1000) / now;
    ac6c:	fbb2 f3f3 	udiv	r3, r2, r3
    ac70:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    ac72:	b003      	add	sp, #12
    ac74:	bc70      	pop	{r4, r5, r6}
    ac76:	4770      	bx	lr
    ac78:	1fffa894 	.word	0x1fffa894
    ac7c:	1fffa8f8 	.word	0x1fffa8f8
    ac80:	1fffa89c 	.word	0x1fffa89c

0000ac84 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac88:	6843      	ldr	r3, [r0, #4]
    ac8a:	4c2d      	ldr	r4, [pc, #180]	; (ad40 <CFastLED::show(unsigned char)+0xbc>)
    ac8c:	b083      	sub	sp, #12
    ac8e:	4606      	mov	r6, r0
    ac90:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ac92:	2b00      	cmp	r3, #0
    ac94:	d14b      	bne.n	ad2e <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    ac96:	f000 fe6b 	bl	b970 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    ac9a:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    ac9c:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    ac9e:	b11b      	cbz	r3, aca8 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    aca0:	4648      	mov	r0, r9
    aca2:	68b1      	ldr	r1, [r6, #8]
    aca4:	4798      	blx	r3
    aca6:	4681      	mov	r9, r0
    aca8:	4b26      	ldr	r3, [pc, #152]	; (ad44 <CFastLED::show(unsigned char)+0xc0>)
    acaa:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    acac:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    acae:	2c00      	cmp	r4, #0
    acb0:	d036      	beq.n	ad20 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    acb2:	8873      	ldrh	r3, [r6, #2]
    acb4:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    acb6:	6861      	ldr	r1, [r4, #4]
    acb8:	6962      	ldr	r2, [r4, #20]
    acba:	2b63      	cmp	r3, #99	; 0x63
    acbc:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    acbe:	bf98      	it	ls
    acc0:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    acc2:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    acc6:	f88d 5004 	strb.w	r5, [sp, #4]
    acca:	f88d 5005 	strb.w	r5, [sp, #5]
    acce:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    acd2:	f1b9 0f00 	cmp.w	r9, #0
    acd6:	d01c      	beq.n	ad12 <CFastLED::show(unsigned char)+0x8e>
    acd8:	f104 030b 	add.w	r3, r4, #11
    acdc:	f10d 0e04 	add.w	lr, sp, #4
    ace0:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    ace4:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    ace8:	f1bb 0f00 	cmp.w	fp, #0
    acec:	d00d      	beq.n	ad0a <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    acee:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    acf2:	f10a 0001 	add.w	r0, sl, #1
    acf6:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    acfa:	f1ba 0f00 	cmp.w	sl, #0
    acfe:	d004      	beq.n	ad0a <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    ad00:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    ad04:	0c00      	lsrs	r0, r0, #16
    ad06:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    ad0a:	4563      	cmp	r3, ip
    ad0c:	f10e 0e01 	add.w	lr, lr, #1
    ad10:	d1e8      	bne.n	ace4 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    ad12:	4620      	mov	r0, r4
    ad14:	ab01      	add	r3, sp, #4
    ad16:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ad18:	74a7      	strb	r7, [r4, #18]
    ad1a:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ad1c:	2c00      	cmp	r4, #0
    ad1e:	d1c8      	bne.n	acb2 <CFastLED::show(unsigned char)+0x2e>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showLeds(scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    ad20:	4630      	mov	r0, r6
    ad22:	2119      	movs	r1, #25
    ad24:	f7ff ff86 	bl	ac34 <CFastLED::countFPS(int)>
}
    ad28:	b003      	add	sp, #12
    ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ad2e:	f000 fe1f 	bl	b970 <micros>
    ad32:	6822      	ldr	r2, [r4, #0]
    ad34:	6873      	ldr	r3, [r6, #4]
    ad36:	1a80      	subs	r0, r0, r2
    ad38:	4298      	cmp	r0, r3
    ad3a:	d3aa      	bcc.n	ac92 <CFastLED::show(unsigned char)+0xe>
    ad3c:	e7ab      	b.n	ac96 <CFastLED::show(unsigned char)+0x12>
    ad3e:	bf00      	nop
    ad40:	1fffa898 	.word	0x1fffa898
    ad44:	1fffa890 	.word	0x1fffa890

0000ad48 <CFastLED::delay(unsigned long)>:
		pCur->clearLedData();
		pCur = pCur->next();
	}
}

void CFastLED::delay(unsigned long ms) {
    ad48:	b5f0      	push	{r4, r5, r6, r7, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad4a:	4d0a      	ldr	r5, [pc, #40]	; (ad74 <CFastLED::delay(unsigned long)+0x2c>)
    ad4c:	b083      	sub	sp, #12
    ad4e:	682b      	ldr	r3, [r5, #0]
    ad50:	9300      	str	r3, [sp, #0]
	return ret;
    ad52:	9f00      	ldr	r7, [sp, #0]
    ad54:	4604      	mov	r4, r0
    ad56:	460e      	mov	r6, r1
    ad58:	7821      	ldrb	r1, [r4, #0]
    ad5a:	4620      	mov	r0, r4
    ad5c:	f7ff ff92 	bl	ac84 <CFastLED::show(unsigned char)>
		// make sure to allow at least one ms to pass to ensure the clock moves
		// forward
		::delay(1);
#endif
		show();
		yield();
    ad60:	f002 f95c 	bl	d01c <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ad64:	682b      	ldr	r3, [r5, #0]
    ad66:	9301      	str	r3, [sp, #4]
	return ret;
    ad68:	9b01      	ldr	r3, [sp, #4]
	}
}

void CFastLED::delay(unsigned long ms) {
	unsigned long start = millis();
        do {
    ad6a:	1bdb      	subs	r3, r3, r7
    ad6c:	42b3      	cmp	r3, r6
    ad6e:	d3f3      	bcc.n	ad58 <CFastLED::delay(unsigned long)+0x10>
#endif
		show();
		yield();
	}
	while((millis()-start) < ms);
}
    ad70:	b003      	add	sp, #12
    ad72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad74:	1fffa8f8 	.word	0x1fffa8f8

0000ad78 <CFastLED::showColor(CRGB const&, unsigned char)>:
	} else {
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad7c:	6843      	ldr	r3, [r0, #4]
    ad7e:	4c2c      	ldr	r4, [pc, #176]	; (ae30 <CFastLED::showColor(CRGB const&, unsigned char)+0xb8>)
    ad80:	b083      	sub	sp, #12
    ad82:	4606      	mov	r6, r0
    ad84:	468a      	mov	sl, r1
    ad86:	4691      	mov	r9, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ad88:	2b00      	cmp	r3, #0
    ad8a:	d149      	bne.n	ae20 <CFastLED::showColor(CRGB const&, unsigned char)+0xa8>
	lastshow = micros();
    ad8c:	f000 fdf0 	bl	b970 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    ad90:	68f3      	ldr	r3, [r6, #12]
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    ad92:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    ad94:	b11b      	cbz	r3, ad9e <CFastLED::showColor(CRGB const&, unsigned char)+0x26>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    ad96:	4648      	mov	r0, r9
    ad98:	68b1      	ldr	r1, [r6, #8]
    ad9a:	4798      	blx	r3
    ad9c:	4681      	mov	r9, r0
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    ad9e:	4b25      	ldr	r3, [pc, #148]	; (ae34 <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    ada0:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ada2:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ada4:	2c00      	cmp	r4, #0
    ada6:	d034      	beq.n	ae12 <CFastLED::showColor(CRGB const&, unsigned char)+0x9a>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    ada8:	8873      	ldrh	r3, [r6, #2]
    adaa:	7ca7      	ldrb	r7, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    adac:	6962      	ldr	r2, [r4, #20]
    adae:	2b63      	cmp	r3, #99	; 0x63
    adb0:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    adb2:	bf98      	it	ls
    adb4:	74a5      	strbls	r5, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    adb6:	f8d3 8000 	ldr.w	r8, [r3]
    adba:	f88d 5004 	strb.w	r5, [sp, #4]
    adbe:	f88d 5005 	strb.w	r5, [sp, #5]
    adc2:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    adc6:	f1b9 0f00 	cmp.w	r9, #0
    adca:	d01a      	beq.n	ae02 <CFastLED::showColor(CRGB const&, unsigned char)+0x8a>
    adcc:	f104 030b 	add.w	r3, r4, #11
    add0:	a801      	add	r0, sp, #4
    add2:	f104 0e0e 	add.w	lr, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    add6:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    adda:	f1bb 0f00 	cmp.w	fp, #0
    adde:	d00c      	beq.n	adfa <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    ade0:	f893 c003 	ldrb.w	ip, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    ade4:	f10c 0101 	add.w	r1, ip, #1
    ade8:	fb0b 1101 	mla	r1, fp, r1, r1

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    adec:	f1bc 0f00 	cmp.w	ip, #0
    adf0:	d003      	beq.n	adfa <CFastLED::showColor(CRGB const&, unsigned char)+0x82>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    adf2:	fb09 f101 	mul.w	r1, r9, r1
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    adf6:	0c09      	lsrs	r1, r1, #16
    adf8:	7001      	strb	r1, [r0, #0]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    adfa:	4573      	cmp	r3, lr
    adfc:	f100 0001 	add.w	r0, r0, #1
    ae00:	d1e9      	bne.n	add6 <CFastLED::showColor(CRGB const&, unsigned char)+0x5e>
        show(m_Data, m_nLeds, getAdjustment(brightness));
    }

	/// show the given color on the led strip
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    ae02:	4620      	mov	r0, r4
    ae04:	ab01      	add	r3, sp, #4
    ae06:	4651      	mov	r1, sl
    ae08:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ae0a:	74a7      	strb	r7, [r4, #18]
    ae0c:	68a4      	ldr	r4, [r4, #8]
	if(m_pPowerFunc) {
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    ae0e:	2c00      	cmp	r4, #0
    ae10:	d1ca      	bne.n	ada8 <CFastLED::showColor(CRGB const&, unsigned char)+0x30>
		if(m_nFPS < 100) { pCur->setDither(0); }
		pCur->showColor(color, scale);
		pCur->setDither(d);
		pCur = pCur->next();
	}
	countFPS();
    ae12:	4630      	mov	r0, r6
    ae14:	2119      	movs	r1, #25
    ae16:	f7ff ff0d 	bl	ac34 <CFastLED::countFPS(int)>
}
    ae1a:	b003      	add	sp, #12
    ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return *pCur;
	}
}

void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ae20:	f000 fda6 	bl	b970 <micros>
    ae24:	6822      	ldr	r2, [r4, #0]
    ae26:	6873      	ldr	r3, [r6, #4]
    ae28:	1a80      	subs	r0, r0, r2
    ae2a:	4298      	cmp	r0, r3
    ae2c:	d3ac      	bcc.n	ad88 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
    ae2e:	e7ad      	b.n	ad8c <CFastLED::showColor(CRGB const&, unsigned char)+0x14>
    ae30:	1fffa898 	.word	0x1fffa898
    ae34:	1fffa890 	.word	0x1fffa890

0000ae38 <CFastLED::clear(bool)>:
		pCur = pCur->next();
	}
	countFPS();
}

void CFastLED::clear(bool writeData) {
    ae38:	b510      	push	{r4, lr}
    ae3a:	4604      	mov	r4, r0
    ae3c:	b082      	sub	sp, #8
	if(writeData) {
    ae3e:	b151      	cbz	r1, ae56 <CFastLED::clear(bool)+0x1e>
    ae40:	2300      	movs	r3, #0
		showColor(CRGB(0,0,0), 0);
    ae42:	461a      	mov	r2, r3
    ae44:	a901      	add	r1, sp, #4
    ae46:	f88d 3004 	strb.w	r3, [sp, #4]
    ae4a:	f88d 3005 	strb.w	r3, [sp, #5]
    ae4e:	f88d 3006 	strb.w	r3, [sp, #6]
    ae52:	f7ff ff91 	bl	ad78 <CFastLED::showColor(CRGB const&, unsigned char)>
	}
    clearData();
    ae56:	4620      	mov	r0, r4
    ae58:	f7ff fec6 	bl	abe8 <CFastLED::clearData()>
}
    ae5c:	b002      	add	sp, #8
    ae5e:	bd10      	pop	{r4, pc}

0000ae60 <atexit>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    ae60:	2000      	movs	r0, #0
    ae62:	4770      	bx	lr

0000ae64 <_GLOBAL__sub_I_pSmartMatrix>:
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    ae64:	4b04      	ldr	r3, [pc, #16]	; (ae78 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
	m_nFPS = 0;
    ae66:	2200      	movs	r2, #0
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    ae68:	20ff      	movs	r0, #255	; 0xff
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    ae6a:	f04f 31ff 	mov.w	r1, #4294967295
// uint32_t CRGB::Squant = ((uint32_t)((__TIME__[4]-'0') * 28))<<16 | ((__TIME__[6]-'0')*50)<<8 | ((__TIME__[7]-'0')*28);

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
    ae6e:	7018      	strb	r0, [r3, #0]
	m_nFPS = 0;
	m_pPowerFunc = NULL;
	m_nPowerData = 0xFFFFFFFF;
    ae70:	6099      	str	r1, [r3, #8]

CFastLED::CFastLED() {
	// clear out the array of led controllers
	// m_nControllers = 0;
	m_Scale = 255;
	m_nFPS = 0;
    ae72:	805a      	strh	r2, [r3, #2]
	m_pPowerFunc = NULL;
    ae74:	60da      	str	r2, [r3, #12]
    ae76:	4770      	bx	lr
    ae78:	1fffa880 	.word	0x1fffa880

0000ae7c <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    ae7c:	b4f0      	push	{r4, r5, r6, r7}
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    ae7e:	7804      	ldrb	r4, [r0, #0]
    uint8_t sat = hsv.sat;
    ae80:	7846      	ldrb	r6, [r0, #1]
    uint8_t val = hsv.val;
    ae82:	7882      	ldrb	r2, [r0, #2]
    ae84:	00e0      	lsls	r0, r4, #3
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    ae86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
    ae8a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    ae8e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    ae92:	4403      	add	r3, r0
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    ae94:	0625      	lsls	r5, r4, #24
    ae96:	f3c3 2307 	ubfx	r3, r3, #8, #8
    ae9a:	d45f      	bmi.n	af5c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xe0>
        // 0XX
        if( ! (hue & 0x40) ) {
    ae9c:	f004 0540 	and.w	r5, r4, #64	; 0x40
    aea0:	f005 07ff 	and.w	r7, r5, #255	; 0xff
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    aea4:	f004 0420 	and.w	r4, r4, #32
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
        // 0XX
        if( ! (hue & 0x40) ) {
    aea8:	2d00      	cmp	r5, #0
    aeaa:	d146      	bne.n	af3a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xbe>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    aeac:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    aeb0:	2c00      	cmp	r4, #0
    aeb2:	d06c      	beq.n	af8e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x112>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    aeb4:	3355      	adds	r3, #85	; 0x55
    aeb6:	b2dd      	uxtb	r5, r3
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    aeb8:	24ab      	movs	r4, #171	; 0xab
                    g = K85 + third ;
                    b = 0;
    aeba:	463b      	mov	r3, r7
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    aebc:	2eff      	cmp	r6, #255	; 0xff
    aebe:	d01c      	beq.n	aefa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
        if( sat == 0) {
    aec0:	2e00      	cmp	r6, #0
    aec2:	d079      	beq.n	afb8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x13c>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    aec4:	b11c      	cbz	r4, aece <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x52>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    aec6:	fb06 4404 	mla	r4, r6, r4, r4
    aeca:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    aece:	b11d      	cbz	r5, aed8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    aed0:	fb06 5505 	mla	r5, r6, r5, r5
    aed4:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    aed8:	b11b      	cbz	r3, aee2 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x66>
    aeda:	fb06 3303 	mla	r3, r6, r3, r3
    aede:	f3c3 2307 	ubfx	r3, r3, #8, #8
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    aee2:	43f0      	mvns	r0, r6
    aee4:	b2c0      	uxtb	r0, r0
    aee6:	fb00 0000 	mla	r0, r0, r0, r0
    aeea:	f3c0 2007 	ubfx	r0, r0, #8, #8
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    aeee:	4404      	add	r4, r0
            g += brightness_floor;
    aef0:	4405      	add	r5, r0
            b += brightness_floor;
    aef2:	4403      	add	r3, r0
            
            uint8_t desat = 255 - sat;
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    aef4:	b2e4      	uxtb	r4, r4
            g += brightness_floor;
    aef6:	b2ed      	uxtb	r5, r5
            b += brightness_floor;
    aef8:	b2db      	uxtb	r3, r3
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    aefa:	2aff      	cmp	r2, #255	; 0xff
    aefc:	d018      	beq.n	af30 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
/// If you are doing several 'scale8_video's in a row, use this, and
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    aefe:	fb12 f002 	smulbb	r0, r2, r2
    af02:	3200      	adds	r2, #0
    af04:	bf18      	it	ne
    af06:	2201      	movne	r2, #1
    af08:	eb02 2210 	add.w	r2, r2, r0, lsr #8
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    af0c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    af10:	d056      	beq.n	afc0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x144>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    af12:	b11c      	cbz	r4, af1c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa0>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    af14:	fb02 4404 	mla	r4, r2, r4, r4
    af18:	f3c4 2407 	ubfx	r4, r4, #8, #8
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    af1c:	b11d      	cbz	r5, af26 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xaa>
    af1e:	fb02 5505 	mla	r5, r2, r5, r5
    af22:	f3c5 2507 	ubfx	r5, r5, #8, #8
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    af26:	b11b      	cbz	r3, af30 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xb4>
    af28:	fb02 3303 	mla	r3, r2, r3, r3
    af2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    af30:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    af32:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    af34:	708b      	strb	r3, [r1, #2]
}
    af36:	bcf0      	pop	{r4, r5, r6, r7}
    af38:	4770      	bx	lr
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    af3a:	f004 07ff 	and.w	r7, r4, #255	; 0xff
    af3e:	bb5c      	cbnz	r4, af98 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x11c>
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    af40:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
    af44:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    af48:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    af4c:	1204      	asrs	r4, r0, #8
                    g = K170 + third;
    af4e:	3b56      	subs	r3, #86	; 0x56
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    af50:	f1c4 04ab 	rsb	r4, r4, #171	; 0xab
                    g = K170 + third;
    af54:	b2dd      	uxtb	r5, r3
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    af56:	b2e4      	uxtb	r4, r4
                    g = K170 + third;
                    b = 0;
    af58:	463b      	mov	r3, r7
    af5a:	e7af      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    af5c:	f004 0740 	and.w	r7, r4, #64	; 0x40
    af60:	f007 05ff 	and.w	r5, r7, #255	; 0xff
    af64:	b9e7      	cbnz	r7, afa0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x124>
            // 10X
            if( ! ( hue & 0x20) ) {
    af66:	f004 0720 	and.w	r7, r4, #32
    af6a:	f007 04ff 	and.w	r4, r7, #255	; 0xff
    af6e:	2f00      	cmp	r7, #0
    af70:	d136      	bne.n	afe0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x164>
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    af72:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    af76:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    af7a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    af7e:	f3c0 2007 	ubfx	r0, r0, #8, #8
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    af82:	f1c0 05ab 	rsb	r5, r0, #171	; 0xab
                b = K85  + twothirds;
    af86:	3055      	adds	r0, #85	; 0x55
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    af88:	b2ed      	uxtb	r5, r5
                b = K85  + twothirds;
    af8a:	b2c3      	uxtb	r3, r0
    af8c:	e796      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
                // 000
                //case 0: // R -> O
                r = K255 - third;
    af8e:	43dc      	mvns	r4, r3
    af90:	b2e4      	uxtb	r4, r4
                g = third;
    af92:	461d      	mov	r5, r3
                b = 0;
    af94:	4603      	mov	r3, r0
    af96:	e791      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    af98:	2400      	movs	r4, #0
                g = K255 - third;
    af9a:	43dd      	mvns	r5, r3
    af9c:	b2ed      	uxtb	r5, r5
    af9e:	e78d      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    afa0:	f004 0420 	and.w	r4, r4, #32
    afa4:	f004 05ff 	and.w	r5, r4, #255	; 0xff
    afa8:	b994      	cbnz	r4, afd0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x154>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    afaa:	f103 0455 	add.w	r4, r3, #85	; 0x55
    afae:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    afb0:	f1c3 03ab 	rsb	r3, r3, #171	; 0xab
    afb4:	b2db      	uxtb	r3, r3
    afb6:	e781      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    afb8:	23ff      	movs	r3, #255	; 0xff
    afba:	461d      	mov	r5, r3
    afbc:	461c      	mov	r4, r3
    afbe:	e79c      	b.n	aefa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x7e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    afc0:	4615      	mov	r5, r2
    afc2:	4614      	mov	r4, r2
    afc4:	4613      	mov	r3, r2
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    afc6:	700c      	strb	r4, [r1, #0]
    rgb.g = g;
    afc8:	704d      	strb	r5, [r1, #1]
    rgb.b = b;
    afca:	708b      	strb	r3, [r1, #2]
}
    afcc:	bcf0      	pop	{r4, r5, r6, r7}
    afce:	4770      	bx	lr
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    afd0:	f1a3 0456 	sub.w	r4, r3, #86	; 0x56
    afd4:	b2e4      	uxtb	r4, r4
                g = 0;
                FORCE_REFERENCE(g);
    afd6:	2500      	movs	r5, #0
                b = K85 - third;
    afd8:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
    afdc:	b2db      	uxtb	r3, r3
    afde:	e76d      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    afe0:	43d8      	mvns	r0, r3
                b = K85  + twothirds;
                
            } else {
                // 101
                //case 5: // B -> P
                r = third;
    afe2:	461c      	mov	r4, r3
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    afe4:	b2c3      	uxtb	r3, r0
    afe6:	e769      	b.n	aebc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x40>

0000afe8 <inoise8_raw(unsigned short, unsigned short)>:
    uint8_t ans = qadd8( n, n);        //   0..255
    return ans;
}

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
    afe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
    afec:	4f76      	ldr	r7, [pc, #472]	; (b1c8 <inoise8_raw(unsigned short, unsigned short)+0x1e0>)
    afee:	1203      	asrs	r3, r0, #8
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
    aff0:	18fa      	adds	r2, r7, r3
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    aff2:	5cfb      	ldrb	r3, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aff4:	7852      	ldrb	r2, [r2, #1]

int8_t inoise8_raw(uint16_t x, uint16_t y)
{
  // Find the unit cube containing the point
  uint8_t X = x>>8;
  uint8_t Y = y>>8;
    aff6:	0a0c      	lsrs	r4, r1, #8
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    aff8:	4422      	add	r2, r4
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    affa:	4423      	add	r3, r4
    affc:	b2db      	uxtb	r3, r3
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    affe:	b2d2      	uxtb	r2, r2
  uint8_t BB = P(B+1);
    b000:	eb07 0c02 	add.w	ip, r7, r2
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    b004:	eb07 0e03 	add.w	lr, r7, r3
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);

  // Get the relative position of the point in the cube
  uint8_t u = x;
    b008:	b2c5      	uxtb	r5, r0
  uint8_t v = y;
    b00a:	b2cc      	uxtb	r4, r1

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    b00c:	ea4f 0b55 	mov.w	fp, r5, lsr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    b010:	0866      	lsrs	r6, r4, #1
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    b012:	0600      	lsls	r0, r0, #24
  uint8_t X = x>>8;
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
    b014:	f817 8003 	ldrb.w	r8, [r7, r3]
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
  uint8_t BB = P(B+1);
    b018:	f89c c001 	ldrb.w	ip, [ip, #1]
  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
  uint8_t B = P(X+1)+Y;
  uint8_t BA = P(B);
    b01c:	5cba      	ldrb	r2, [r7, r2]
  uint8_t Y = y>>8;

  // Hash cube corner coordinates
  uint8_t A = P(X)+Y;
  uint8_t AA = P(A);
  uint8_t AB = P(A+1);
    b01e:	f89e e001 	ldrb.w	lr, [lr, #1]
  // Get the relative position of the point in the cube
  uint8_t u = x;
  uint8_t v = y;

  // Get a signed version of the above for the grad function
  int8_t xx = ((uint8_t)(x)>>1) & 0x7F;
    b022:	fa4f f38b 	sxtb.w	r3, fp
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
    b026:	fa4f f986 	sxtb.w	r9, r6
    b02a:	f100 80c3 	bmi.w	b1b4 <inoise8_raw(unsigned short, unsigned short)+0x1cc>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    b02e:	fb05 5505 	mla	r5, r5, r5, r5
    b032:	09ed      	lsrs	r5, r5, #7
    b034:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
///                Takes around 13 cycles on AVR
#if EASE8_C == 1
LIB8STATIC uint8_t ease8InOutQuad( uint8_t i)
{
    uint8_t j = i;
    if( j & 0x80 ) {
    b038:	0609      	lsls	r1, r1, #24
    b03a:	f100 80b1 	bmi.w	b1a0 <inoise8_raw(unsigned short, unsigned short)+0x1b8>
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    b03e:	fb04 4404 	mla	r4, r4, r4, r4
    b042:	09e4      	lsrs	r4, r4, #7
    b044:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    b048:	f817 1008 	ldrb.w	r1, [r7, r8]
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    b04c:	0748      	lsls	r0, r1, #29
	  u = y; v = x;
    b04e:	bf4b      	itete	mi
    b050:	46ca      	movmi	sl, r9
  } else {
	  u = x; v = y;
    b052:	46c8      	movpl	r8, r9
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    b054:	4698      	movmi	r8, r3
  } else {
	  u = x; v = y;
    b056:	469a      	movpl	sl, r3
  }

  if(hash&1) { u = -u; }
    b058:	07c8      	lsls	r0, r1, #31
    b05a:	bf44      	itt	mi
    b05c:	f1ca 0a00 	rsbmi	sl, sl, #0
    b060:	fa4f fa8a 	sxtbmi.w	sl, sl
  if(hash&2) { v = -v; }
    b064:	0789      	lsls	r1, r1, #30
    b066:	bf44      	itt	mi
    b068:	f1c8 0800 	rsbmi	r8, r8, #0
    b06c:	fa4f f888 	sxtbmi.w	r8, r8
///       If the first argument is even, result is rounded down.
///       If the first argument is odd, result is result up.
LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
{
#if AVG7_C == 1
    return ((i + j) >> 1) + (i & 0x1);
    b070:	44d0      	add	r8, sl
    b072:	f00a 0a01 	and.w	sl, sl, #1
    b076:	eb0a 0868 	add.w	r8, sl, r8, asr #1
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    b07a:	f817 a002 	ldrb.w	sl, [r7, r2]
    b07e:	f1ab 0280 	sub.w	r2, fp, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    b082:	f01a 0f04 	tst.w	sl, #4
  int8_t yy = ((uint8_t)(y)>>1) & 0x7F;
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
    b086:	b252      	sxtb	r2, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    b088:	bf16      	itet	ne
    b08a:	4649      	movne	r1, r9
  } else {
	  u = x; v = y;
    b08c:	4611      	moveq	r1, r2
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    b08e:	4691      	movne	r9, r2
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    b090:	f01a 0f01 	tst.w	sl, #1
    b094:	bf1c      	itt	ne
    b096:	4249      	negne	r1, r1
    b098:	b249      	sxtbne	r1, r1
  if(hash&2) { v = -v; }
    b09a:	f01a 0f02 	tst.w	sl, #2
    b09e:	bf1c      	itt	ne
    b0a0:	f1c9 0900 	rsbne	r9, r9, #0
    b0a4:	fa4f f989 	sxtbne.w	r9, r9
    b0a8:	4489      	add	r9, r1
    b0aa:	f001 0101 	and.w	r1, r1, #1
    b0ae:	eb01 0169 	add.w	r1, r1, r9, asr #1
    b0b2:	fa5f f888 	uxtb.w	r8, r8
    b0b6:	b2c9      	uxtb	r1, r1
    b0b8:	fa4f f088 	sxtb.w	r0, r8
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b0bc:	fa4f f981 	sxtb.w	r9, r1
    b0c0:	4581      	cmp	r9, r0
    b0c2:	dd50      	ble.n	b166 <inoise8_raw(unsigned short, unsigned short)+0x17e>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    b0c4:	ebc8 0001 	rsb	r0, r8, r1
    b0c8:	b2c0      	uxtb	r0, r0
    b0ca:	3501      	adds	r5, #1
    b0cc:	fb05 f000 	mul.w	r0, r5, r0
    b0d0:	eb08 2020 	add.w	r0, r8, r0, asr #8
    b0d4:	b240      	sxtb	r0, r0
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    b0d6:	f817 e00e 	ldrb.w	lr, [r7, lr]
    b0da:	f817 700c 	ldrb.w	r7, [r7, ip]
    b0de:	3e80      	subs	r6, #128	; 0x80
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    b0e0:	f01e 0f04 	tst.w	lr, #4
  uint8_t N = 0x80;

  u = EASE8(u); v = EASE8(v);
  
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);
    b0e4:	b276      	sxtb	r6, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    b0e6:	bf16      	itet	ne
    b0e8:	4619      	movne	r1, r3
  } else {
	  u = x; v = y;
    b0ea:	4631      	moveq	r1, r6
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
	  u = y; v = x;
    b0ec:	4633      	movne	r3, r6
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    b0ee:	f01e 0f01 	tst.w	lr, #1
    b0f2:	bf1c      	itt	ne
    b0f4:	425b      	negne	r3, r3
    b0f6:	b25b      	sxtbne	r3, r3
  if(hash&2) { v = -v; }
    b0f8:	f01e 0f02 	tst.w	lr, #2
    b0fc:	bf1c      	itt	ne
    b0fe:	4249      	negne	r1, r1
    b100:	b249      	sxtbne	r1, r1
    b102:	4419      	add	r1, r3
    b104:	f003 0301 	and.w	r3, r3, #1
    b108:	eb03 0161 	add.w	r1, r3, r1, asr #1
    b10c:	b2cb      	uxtb	r3, r1
  // since the tests below can be done bit-wise on the bottom
  // three bits, there's no need to mask off the higher bits
  //  hash = hash & 7;

  int8_t u,v;
  if( hash & 4) {
    b10e:	f017 0f04 	tst.w	r7, #4
    b112:	b259      	sxtb	r1, r3
    b114:	d002      	beq.n	b11c <inoise8_raw(unsigned short, unsigned short)+0x134>
    b116:	4696      	mov	lr, r2
	  u = y; v = x;
    b118:	4632      	mov	r2, r6
    b11a:	4676      	mov	r6, lr
  } else {
	  u = x; v = y;
  }

  if(hash&1) { u = -u; }
    b11c:	f017 0f01 	tst.w	r7, #1
    b120:	bf1c      	itt	ne
    b122:	4252      	negne	r2, r2
    b124:	b252      	sxtbne	r2, r2
  if(hash&2) { v = -v; }
    b126:	07bf      	lsls	r7, r7, #30
    b128:	bf44      	itt	mi
    b12a:	4276      	negmi	r6, r6
    b12c:	b276      	sxtbmi	r6, r6
    b12e:	4416      	add	r6, r2
    b130:	f002 0201 	and.w	r2, r2, #1
    b134:	eb02 0266 	add.w	r2, r2, r6, asr #1
    b138:	b2d2      	uxtb	r2, r2
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b13a:	b256      	sxtb	r6, r2
    b13c:	428e      	cmp	r6, r1
    b13e:	dd1c      	ble.n	b17a <inoise8_raw(unsigned short, unsigned short)+0x192>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    b140:	1ad2      	subs	r2, r2, r3
    b142:	b2d1      	uxtb	r1, r2
    b144:	fb05 f201 	mul.w	r2, r5, r1
    b148:	eb03 2322 	add.w	r3, r3, r2, asr #8
    b14c:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b14e:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    b150:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b152:	dc1c      	bgt.n	b18e <inoise8_raw(unsigned short, unsigned short)+0x1a6>
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    b154:	1ac3      	subs	r3, r0, r3
    b156:	b2db      	uxtb	r3, r3
    b158:	fb04 3303 	mla	r3, r4, r3, r3
    b15c:	eba0 2023 	sub.w	r0, r0, r3, asr #8
    b160:	b240      	sxtb	r0, r0
  int8_t X1 = lerp7by8(grad8(P(AA), xx, yy), grad8(P(BA), xx - N, yy), u);
  int8_t X2 = lerp7by8(grad8(P(AB), xx, yy-N), grad8(P(BB), xx - N, yy - N), u);

  int8_t ans = lerp7by8(X1,X2,v);

  return ans;
    b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    } else {
        uint8_t delta = a - b;
        uint8_t scaled = scale8( delta, frac);
        result = a - scaled;
    b166:	ebc1 0108 	rsb	r1, r1, r8
    b16a:	b2c9      	uxtb	r1, r1
    b16c:	3501      	adds	r5, #1
    b16e:	fb05 f101 	mul.w	r1, r5, r1
    b172:	eba8 2021 	sub.w	r0, r8, r1, asr #8
    b176:	b240      	sxtb	r0, r0
    b178:	e7ad      	b.n	b0d6 <inoise8_raw(unsigned short, unsigned short)+0xee>
    b17a:	1a9a      	subs	r2, r3, r2
    b17c:	b2d2      	uxtb	r2, r2
    b17e:	fb05 f202 	mul.w	r2, r5, r2
    b182:	eba3 2322 	sub.w	r3, r3, r2, asr #8
    b186:	b25b      	sxtb	r3, r3
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b188:	4283      	cmp	r3, r0
        uint8_t delta = b - a;
    b18a:	b2c0      	uxtb	r0, r0
    // int16_t prod = (uint16_t)delta * (uint16_t)frac;
    // int8_t scaled = prod >> 8;
    // int8_t result = a + scaled;
    // return result;
    int8_t result;
    if( b > a) {
    b18c:	dde2      	ble.n	b154 <inoise8_raw(unsigned short, unsigned short)+0x16c>
        uint8_t delta = b - a;
        uint8_t scaled = scale8( delta, frac);
        result = a + scaled;
    b18e:	1a1b      	subs	r3, r3, r0
    b190:	b2db      	uxtb	r3, r3
    b192:	fb04 3303 	mla	r3, r4, r3, r3
    b196:	eb00 2023 	add.w	r0, r0, r3, asr #8
    b19a:	b240      	sxtb	r0, r0
    b19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1a0:	43e4      	mvns	r4, r4
    b1a2:	b2e4      	uxtb	r4, r4
    b1a4:	fb04 4404 	mla	r4, r4, r4, r4
    b1a8:	09e4      	lsrs	r4, r4, #7
    b1aa:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    b1ae:	f084 04ff 	eor.w	r4, r4, #255	; 0xff
    b1b2:	e749      	b.n	b048 <inoise8_raw(unsigned short, unsigned short)+0x60>
    b1b4:	43ed      	mvns	r5, r5
    b1b6:	b2ed      	uxtb	r5, r5
    uint8_t j = i;
    if( j & 0x80 ) {
        j = 255 - j;
    }
    uint8_t jj  = scale8(  j, j);
    uint8_t jj2 = jj << 1;
    b1b8:	fb05 5505 	mla	r5, r5, r5, r5
    b1bc:	09ed      	lsrs	r5, r5, #7
    b1be:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if( i & 0x80 ) {
        jj2 = 255 - jj2;
    b1c2:	f085 05ff 	eor.w	r5, r5, #255	; 0xff
    b1c6:	e737      	b.n	b038 <inoise8_raw(unsigned short, unsigned short)+0x50>
    b1c8:	000113c4 	.word	0x000113c4

0000b1cc <inoise8(unsigned short, unsigned short)>:
  // return scale8((70+(ans)),234)<<1;
}



uint8_t inoise8(uint16_t x, uint16_t y) {
    b1cc:	b508      	push	{r3, lr}
  //return scale8(69+inoise8_raw(x,y),237)<<1;
    int8_t n = inoise8_raw( x, y);  // -64..+64
    b1ce:	f7ff ff0b 	bl	afe8 <inoise8_raw(unsigned short, unsigned short)>
    n+= 64;                         //   0..128
    b1d2:	3040      	adds	r0, #64	; 0x40
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    b1d4:	4603      	mov	r3, r0
    b1d6:	fa83 f350 	uqadd8	r3, r3, r0
    uint8_t ans = qadd8( n, n);     //   0..255
    return ans;
}
    b1da:	b2d8      	uxtb	r0, r3
    b1dc:	bd08      	pop	{r3, pc}
    b1de:	bf00      	nop

0000b1e0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>:

static uint8_t  gMaxPowerIndicatorLEDPinNumber = 0; // default = Arduino onboard LED pin.  set to zero to skip this.


uint32_t calculate_unscaled_power_mW( const CRGB* ledbuffer, uint16_t numLeds ) //25354
{
    b1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    b1e2:	b361      	cbz	r1, b23e <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x5e>
    b1e4:	f101 3eff 	add.w	lr, r1, #4294967295
    b1e8:	fa1f fe8e 	uxth.w	lr, lr
    b1ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    b1f0:	2200      	movs	r2, #0
    b1f2:	f10e 0e06 	add.w	lr, lr, #6
    b1f6:	4486      	add	lr, r0
    b1f8:	1cc3      	adds	r3, r0, #3
    b1fa:	4615      	mov	r5, r2
    b1fc:	4614      	mov	r4, r2
        red32   += *p++;
    b1fe:	f813 7c03 	ldrb.w	r7, [r3, #-3]
        green32 += *p++;
    b202:	f813 0c02 	ldrb.w	r0, [r3, #-2]
        blue32  += *p++;
    b206:	f813 6c01 	ldrb.w	r6, [r3, #-1]
    b20a:	3303      	adds	r3, #3
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    b20c:	4573      	cmp	r3, lr
        red32   += *p++;
    b20e:	443c      	add	r4, r7
        green32 += *p++;
    b210:	4405      	add	r5, r0
        blue32  += *p++;
    b212:	4432      	add	r2, r6
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    b214:	d1f3      	bne.n	b1fe <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x1e>
    b216:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    b21a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    b21e:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    b222:	f3c4 1317 	ubfx	r3, r4, #4, #24
    b226:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    b22a:	ebc5 04c0 	rsb	r4, r5, r0, lsl #3
    b22e:	0a12      	lsrs	r2, r2, #8
    b230:	eb03 2414 	add.w	r4, r3, r4, lsr #8
    green32 >>= 8;
    blue32  >>= 8;

    uint32_t total = red32 + green32 + blue32 + (gDark_mW * numLeds);

    return total;
    b234:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    b238:	1910      	adds	r0, r2, r4
}
    b23a:	4408      	add	r0, r1
    b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t* p = (uint8_t*)(firstled);

    uint16_t count = numLeds;

    // This loop might benefit from an AVR assembly version -MEK
    while( count) {
    b23e:	460c      	mov	r4, r1
    b240:	460a      	mov	r2, r1
    b242:	e7f7      	b.n	b234 <calculate_unscaled_power_mW(CRGB const*, unsigned short)+0x54>

0000b244 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)>:

// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    b244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    b248:	4b25      	ldr	r3, [pc, #148]	; (b2e0 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x9c>)
    b24a:	681c      	ldr	r4, [r3, #0]
    b24c:	b085      	sub	sp, #20
    b24e:	4607      	mov	r7, r0
    b250:	4688      	mov	r8, r1
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    b252:	b19c      	cbz	r4, b27c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x38>
    b254:	f8df 9094 	ldr.w	r9, [pc, #148]	; b2ec <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa8>
    b258:	257d      	movs	r5, #125	; 0x7d
    b25a:	e007      	b.n	b26c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x28>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
    b25c:	6960      	ldr	r0, [r4, #20]
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    b25e:	b281      	uxth	r1, r0
    b260:	4630      	mov	r0, r6
    b262:	f7ff ffbd 	bl	b1e0 <calculate_unscaled_power_mW(CRGB const*, unsigned short)>
    b266:	68a4      	ldr	r4, [r4, #8]
    b268:	4405      	add	r5, r0
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;

    CLEDController *pCur = CLEDController::head();
	while(pCur) {
    b26a:	b144      	cbz	r4, b27e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x3a>
    b26c:	e894 0048 	ldmia.w	r4, {r3, r6}
        total_mW += calculate_unscaled_power_mW( pCur->leds(), pCur->size());
    b270:	691b      	ldr	r3, [r3, #16]
    b272:	454b      	cmp	r3, r9
    b274:	d0f2      	beq.n	b25c <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x18>
    b276:	4620      	mov	r0, r4
    b278:	4798      	blx	r3
    b27a:	e7f0      	b.n	b25e <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x1a>
// sets brightness to
//  - no more than target_brightness
//  - no more than max_mW milliwatts
uint8_t calculate_max_brightness_for_power_mW( uint8_t target_brightness, uint32_t max_power_mW)
{
    uint32_t total_mW = gMCU_mW;
    b27c:	257d      	movs	r5, #125	; 0x7d
#if POWER_DEBUG_PRINT == 1
    Serial.print("power demand at full brightness mW = ");
    Serial.println( total_mW);
#endif

    uint32_t requested_power_mW = ((uint32_t)total_mW * target_brightness) / 256;
    b27e:	fb05 f507 	mul.w	r5, r5, r7
    b282:	0a2d      	lsrs	r5, r5, #8
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    b284:	4b17      	ldr	r3, [pc, #92]	; (b2e4 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa0>)
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    b286:	4545      	cmp	r5, r8
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    b288:	781b      	ldrb	r3, [r3, #0]
    }
    Serial.print("power limit mW = ");
    Serial.println( max_power_mW);
#endif

    if( requested_power_mW < max_power_mW) {
    b28a:	d210      	bcs.n	b2ae <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x6a>
#if POWER_LED > 0
        if( gMaxPowerIndicatorLEDPinNumber ) {
    b28c:	b323      	cbz	r3, b2d8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    b28e:	4a16      	ldr	r2, [pc, #88]	; (b2e8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    b290:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    b292:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    b296:	f88d 100c 	strb.w	r1, [sp, #12]

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    b29a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b29e:	7813      	ldrb	r3, [r2, #0]
            Pin(gMaxPowerIndicatorLEDPinNumber).lo(); // turn the LED off
    b2a0:	4638      	mov	r0, r7
    b2a2:	ea23 0301 	bic.w	r3, r3, r1
    b2a6:	7013      	strb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
}
    b2a8:	b005      	add	sp, #20
    b2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Serial.print("demand is under the limit");
#endif
        return target_brightness;
    }

    uint8_t recommended_brightness = (uint32_t)((uint8_t)(target_brightness) * (uint32_t)(max_power_mW)) / ((uint32_t)(requested_power_mW));
    b2ae:	fb08 f707 	mul.w	r7, r8, r7
    b2b2:	fbb7 f0f5 	udiv	r0, r7, r5
    b2b6:	b2c7      	uxtb	r7, r0

    Serial.println();
#endif

#if POWER_LED > 0
    if( gMaxPowerIndicatorLEDPinNumber ) {
    b2b8:	b173      	cbz	r3, b2d8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0x94>
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    b2ba:	4a0b      	ldr	r2, [pc, #44]	; (b2e8 <calculate_max_brightness_for_power_mW(unsigned char, unsigned long)+0xa4>)
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    b2bc:	2101      	movs	r1, #1
		mPort = (volatile RwReg*)portOutputRegister(digitalPinToPort(mPin));
    b2be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
	volatile RoReg *mInPort;
	RwReg mPinMask;
	uint8_t mPin;

	void _init() {
		mPinMask = digitalPinToBitMask(mPin);
    b2c2:	f88d 100c 	strb.w	r1, [sp, #12]
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    b2c6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b2ca:	7813      	ldrb	r3, [r2, #0]
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    b2cc:	4638      	mov	r0, r7
    b2ce:	430b      	orrs	r3, r1
    b2d0:	7013      	strb	r3, [r2, #0]
}
    b2d2:	b005      	add	sp, #20
    b2d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( gMaxPowerIndicatorLEDPinNumber ) {
        Pin(gMaxPowerIndicatorLEDPinNumber).hi(); // turn the LED on
    }
#endif

    return recommended_brightness;
    b2d8:	4638      	mov	r0, r7
}
    b2da:	b005      	add	sp, #20
    b2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b2e0:	1fffa890 	.word	0x1fffa890
    b2e4:	1fffa8a4 	.word	0x1fffa8a4
    b2e8:	00011564 	.word	0x00011564
    b2ec:	0000046d 	.word	0x0000046d

0000b2f0 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>:
	/// @param milliamps - the maximum milliamps of power draw you want
	inline void setMaxPowerInVoltsAndMilliamps(uint8_t volts, uint32_t milliamps) { setMaxPowerInMilliWatts(volts * milliamps); }

	/// Set the maximum power to be used, given in milliwatts
	/// @param milliwatts - the max power draw desired, in milliwatts
	inline void setMaxPowerInMilliWatts(uint32_t milliwatts) { m_pPowerFunc = &calculate_max_brightness_for_power_mW; m_nPowerData = milliwatts; }
    b2f0:	4b03      	ldr	r3, [pc, #12]	; (b300 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x10>)
    b2f2:	4a04      	ldr	r2, [pc, #16]	; (b304 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)+0x14>)
    b2f4:	60da      	str	r2, [r3, #12]
    b2f6:	fb01 f100 	mul.w	r1, r1, r0
    b2fa:	6099      	str	r1, [r3, #8]
    b2fc:	4770      	bx	lr
    b2fe:	bf00      	nop
    b300:	1fffa880 	.word	0x1fffa880
    b304:	0000b245 	.word	0x0000b245

0000b308 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>:
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b308:	4807      	ldr	r0, [pc, #28]	; (b328 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x20>)
#if VM_DEBUG_MEM_CHECK == VM_DEBUG_ENABLE
//#include "VM_mem_check.h"
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
    b30a:	b082      	sub	sp, #8
    b30c:	6803      	ldr	r3, [r0, #0]
    b30e:	9301      	str	r3, [sp, #4]
	return ret;
    b310:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    b312:	4411      	add	r1, r2
    b314:	e001      	b.n	b31a <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x12>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    b316:	4299      	cmp	r1, r3
    b318:	d304      	bcc.n	b324 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0x1c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b31a:	6803      	ldr	r3, [r0, #0]
    b31c:	9300      	str	r3, [sp, #0]
	return ret;
    b31e:	9b00      	ldr	r3, [sp, #0]
    b320:	429a      	cmp	r2, r3
    b322:	d9f8      	bls.n	b316 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)+0xe>
#endif

void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms)
{
	DBG_YieldAndWait(ms, true);
}
    b324:	b002      	add	sp, #8
    b326:	4770      	bx	lr
    b328:	1fffa8f8 	.word	0x1fffa8f8

0000b32c <VisualMicroDebug::outPacketStart(bool)>:
	return outPacketStart(false);
}


bool VisualMicroDebug::outPacketStart(bool noWait)
{
    b32c:	b410      	push	{r4}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b32e:	4a10      	ldr	r2, [pc, #64]	; (b370 <VisualMicroDebug::outPacketStart(bool)+0x44>)
    b330:	b085      	sub	sp, #20
	yield();
#endif


#if defined(VM_DEBUG_BANDWIDTH_THROTTLE_MS)
	if (!noWait)
    b332:	b9a1      	cbnz	r1, b35e <VisualMicroDebug::outPacketStart(bool)+0x32>
    b334:	6813      	ldr	r3, [r2, #0]
    b336:	9300      	str	r3, [sp, #0]
	{

		unsigned long ms_wait;
		ms_wait = (DBG_Millis() - lastPacketMS);
    b338:	6841      	ldr	r1, [r0, #4]
	return ret;
    b33a:	9b00      	ldr	r3, [sp, #0]
    b33c:	1a59      	subs	r1, r3, r1
		if (ms_wait < VM_DEBUG_BANDWIDTH_THROTTLE_MS)
    b33e:	2931      	cmp	r1, #49	; 0x31
    b340:	d80d      	bhi.n	b35e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b342:	6813      	ldr	r3, [r2, #0]
    b344:	9302      	str	r3, [sp, #8]
	return ret;
    b346:	9c02      	ldr	r4, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    b348:	f104 0332 	add.w	r3, r4, #50	; 0x32
    b34c:	1a59      	subs	r1, r3, r1
    b34e:	e001      	b.n	b354 <VisualMicroDebug::outPacketStart(bool)+0x28>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    b350:	4299      	cmp	r1, r3
    b352:	d304      	bcc.n	b35e <VisualMicroDebug::outPacketStart(bool)+0x32>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b354:	6813      	ldr	r3, [r2, #0]
    b356:	9301      	str	r3, [sp, #4]
	return ret;
    b358:	9b01      	ldr	r3, [sp, #4]
    b35a:	429c      	cmp	r4, r3
    b35c:	d9f8      	bls.n	b350 <VisualMicroDebug::outPacketStart(bool)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b35e:	6813      	ldr	r3, [r2, #0]
    b360:	9303      	str	r3, [sp, #12]
	return ret;
    b362:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    b364:	6043      	str	r3, [r0, #4]
	transport->beginPacket(ip, 10112);
#endif


	return true;
}
    b366:	2001      	movs	r0, #1
    b368:	b005      	add	sp, #20
    b36a:	bc10      	pop	{r4}
    b36c:	4770      	bx	lr
    b36e:	bf00      	nop
    b370:	1fffa8f8 	.word	0x1fffa8f8

0000b374 <VisualMicroDebug::outPacketEnd()>:
    b374:	4770      	bx	lr
    b376:	bf00      	nop

0000b378 <VisualMicroDebug::begin(unsigned long)>:
{

	//todo: detect usb type ports that need a delay
	//don't wait for the port unless we add a timeout and disable debug. because we might be discntected
	//todo: see if esp can handle this delay wuith wifi also connecting!
	delay(1000);
    b378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    b37c:	f000 bb1a 	b.w	b9b4 <delay>

0000b380 <VisualMicroDebug::init(unsigned long)>:
	vmdebug.init();
	vmdebug.stats();
#endif


	baudRate = 0L; //gets a value later if required, only used by cosa for a re-begin!
    b380:	2300      	movs	r3, #0
    b382:	6443      	str	r3, [r0, #68]	; 0x44

	lastPacketMS = 0L;
    b384:	6043      	str	r3, [r0, #4]

	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
    b386:	b171      	cbz	r1, b3a6 <VisualMicroDebug::init(unsigned long)+0x26>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b388:	4807      	ldr	r0, [pc, #28]	; (b3a8 <VisualMicroDebug::init(unsigned long)+0x28>)

}
#endif
#else
void VisualMicroDebug::init(unsigned long delayMs)
{
    b38a:	b082      	sub	sp, #8
    b38c:	6803      	ldr	r3, [r0, #0]
    b38e:	9301      	str	r3, [sp, #4]
	return ret;
    b390:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    b392:	4411      	add	r1, r2
    b394:	e001      	b.n	b39a <VisualMicroDebug::init(unsigned long)+0x1a>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    b396:	4299      	cmp	r1, r3
    b398:	d304      	bcc.n	b3a4 <VisualMicroDebug::init(unsigned long)+0x24>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b39a:	6803      	ldr	r3, [r0, #0]
    b39c:	9300      	str	r3, [sp, #0]
	return ret;
    b39e:	9b00      	ldr	r3, [sp, #0]
    b3a0:	429a      	cmp	r2, r3
    b3a2:	d9f8      	bls.n	b396 <VisualMicroDebug::init(unsigned long)+0x16>
	//note: a delay at start causes esp8266 wifi to fail to connect!!
	//		the delay can also be switched off via board/platform.txt property=
	if (delayMs > 0)
		DBG_YieldAndWait(delayMs);

}
    b3a4:	b002      	add	sp, #8
    b3a6:	4770      	bx	lr
    b3a8:	1fffa8f8 	.word	0x1fffa8f8

0000b3ac <VisualMicroDebug::sendContinuedACK(unsigned char)>:
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    b3ac:	b530      	push	{r4, r5, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3ae:	4c13      	ldr	r4, [pc, #76]	; (b3fc <VisualMicroDebug::sendContinuedACK(unsigned char)+0x50>)
    b3b0:	b085      	sub	sp, #20
    b3b2:	6823      	ldr	r3, [r4, #0]
    b3b4:	9303      	str	r3, [sp, #12]
	return ret;
    b3b6:	9b03      	ldr	r3, [sp, #12]
			//DBG_YieldAndWait(3)
		//}
	}
	//XXX: this should really be after packet end!
	//1501 for cosa - lastPacketMS=millis();
	lastPacketMS = DBG_Millis();
    b3b8:	6043      	str	r3, [r0, #4]
#endif
*/


void VisualMicroDebug::sendContinuedACK(uint8_t breakPointId)
{
    b3ba:	460d      	mov	r5, r1
    b3bc:	4810      	ldr	r0, [pc, #64]	; (b400 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x54>)
    b3be:	2106      	movs	r1, #6
    b3c0:	f001 fb10 	bl	c9e4 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    b3c4:	2300      	movs	r3, #0
    b3c6:	220a      	movs	r2, #10
    b3c8:	4629      	mov	r1, r5
    b3ca:	480e      	ldr	r0, [pc, #56]	; (b404 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    b3cc:	f001 fd1e 	bl	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    b3d0:	2106      	movs	r1, #6
    b3d2:	480d      	ldr	r0, [pc, #52]	; (b408 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x5c>)
    b3d4:	f001 fb06 	bl	c9e4 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    b3d8:	480a      	ldr	r0, [pc, #40]	; (b404 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x58>)
    b3da:	f001 fd07 	bl	cdec <Print::println()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3de:	6823      	ldr	r3, [r4, #0]
    b3e0:	9302      	str	r3, [sp, #8]
	return ret;
    b3e2:	9a02      	ldr	r2, [sp, #8]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    b3e4:	f102 0132 	add.w	r1, r2, #50	; 0x32
    b3e8:	e001      	b.n	b3ee <VisualMicroDebug::sendContinuedACK(unsigned char)+0x42>

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    b3ea:	4299      	cmp	r1, r3
    b3ec:	d304      	bcc.n	b3f8 <VisualMicroDebug::sendContinuedACK(unsigned char)+0x4c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b3ee:	6823      	ldr	r3, [r4, #0]
    b3f0:	9301      	str	r3, [sp, #4]
	return ret;
    b3f2:	9b01      	ldr	r3, [sp, #4]
    b3f4:	429a      	cmp	r2, r3
    b3f6:	d9f8      	bls.n	b3ea <VisualMicroDebug::sendContinuedACK(unsigned char)+0x3e>
	//#endif

		//nb: 2560 looses some chars of 2nd and third print statements after startup. todo: look into this!
		//the following delay seems to sort it out sometimes!
	DBG_YieldAndWait(50);
}
    b3f8:	b005      	add	sp, #20
    b3fa:	bd30      	pop	{r4, r5, pc}
    b3fc:	1fffa8f8 	.word	0x1fffa8f8
    b400:	000114e0 	.word	0x000114e0
    b404:	1fff878c 	.word	0x1fff878c
    b408:	000114e8 	.word	0x000114e8

0000b40c <VisualMicroDebug::breakWait(unsigned char)>:
#if defined(VM_DEBUGGER_TYPE) //&& ( VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_HARDWARESERIAL || VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_FASTSERIAL)
//TODO: implement sturcture serial com!
//we never get called if break was not set during compliation
//return _vm_cmd so that we can setVariable if required (caller needs to know result)
uint8_t VisualMicroDebug::breakWait(uint8_t breakPointId)
{
    b40c:	b538      	push	{r3, r4, r5, lr}
	//console write not working yet
#if defined(VM_DEBUGGER_TYPE) && (VM_DEBUGGER_TYPE == VM_DEBUGGER_TYPE_NET_CONSOLE)
	return 'c';
#endif

	if (!alwaysBreak)
    b40e:	7e03      	ldrb	r3, [r0, #24]
    b410:	b90b      	cbnz	r3, b416 <VisualMicroDebug::breakWait(unsigned char)+0xa>
			break;


		case 'h':
			//Serial.println("Remote debug session started");
			return 'c';
    b412:	2063      	movs	r0, #99	; 0x63
	//return 'c'; //if we get here we are continuing!

	//	return '?'; //software serial rubbish detected?

	return 'e';
}
    b414:	bd38      	pop	{r3, r4, r5, pc}
    b416:	460d      	mov	r5, r1
    b418:	4604      	mov	r4, r0
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    b41a:	f001 fab9 	bl	c990 <usb_serial_available>


	uint8_t b;

	//break/pause until we get a command
	while (available() == 0)
    b41e:	f010 0fff 	tst.w	r0, #255	; 0xff
    b422:	d101      	bne.n	b428 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
		//Serial.println(breakPointId);
			//ArduinoOTA.handle();
		DBG_YieldAndWait(5, true); //ota
#endif

		return 'e';
    b424:	2065      	movs	r0, #101	; 0x65
    b426:	bd38      	pop	{r3, r4, r5, pc}
    b428:	f001 fab2 	bl	c990 <usb_serial_available>
	//doh!  better if we have any key to continue so users data doesn't get lost so much. 
	//NOTE. pause/breakpoints are best used with dedicated port!
	//while(true)
	//{

	while (available() > 0)
    b42c:	f010 0fff 	tst.w	r0, #255	; 0xff
    b430:	d0f8      	beq.n	b424 <VisualMicroDebug::breakWait(unsigned char)+0x18>
        virtual int read() { return usb_serial_getchar(); }
    b432:	f001 fa71 	bl	c918 <usb_serial_getchar>
		//		while(VM_DEBUGGER_SOFT_TRANSPORT.available()>0)
		//		{
		//			b = VM_DEBUGGER_SOFT_TRANSPORT.read();
		//#endif
		//debug break commands
		switch (b)
    b436:	b2c0      	uxtb	r0, r0
    b438:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
    b43c:	2b1e      	cmp	r3, #30
    b43e:	d8f3      	bhi.n	b428 <VisualMicroDebug::breakWait(unsigned char)+0x1c>
    b440:	a201      	add	r2, pc, #4	; (adr r2, b448 <VisualMicroDebug::breakWait(unsigned char)+0x3c>)
    b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b446:	bf00      	nop
    b448:	0000b4d1 	.word	0x0000b4d1
    b44c:	0000b429 	.word	0x0000b429
    b450:	0000b429 	.word	0x0000b429
    b454:	0000b429 	.word	0x0000b429
    b458:	0000b429 	.word	0x0000b429
    b45c:	0000b429 	.word	0x0000b429
    b460:	0000b429 	.word	0x0000b429
    b464:	0000b429 	.word	0x0000b429
    b468:	0000b429 	.word	0x0000b429
    b46c:	0000b429 	.word	0x0000b429
    b470:	0000b429 	.word	0x0000b429
    b474:	0000b4c5 	.word	0x0000b4c5
    b478:	0000b429 	.word	0x0000b429
    b47c:	0000b429 	.word	0x0000b429
    b480:	0000b429 	.word	0x0000b429
    b484:	0000b429 	.word	0x0000b429
    b488:	0000b413 	.word	0x0000b413
    b48c:	0000b429 	.word	0x0000b429
    b490:	0000b429 	.word	0x0000b429
    b494:	0000b429 	.word	0x0000b429
    b498:	0000b429 	.word	0x0000b429
    b49c:	0000b429 	.word	0x0000b429
    b4a0:	0000b429 	.word	0x0000b429
    b4a4:	0000b429 	.word	0x0000b429
    b4a8:	0000b429 	.word	0x0000b429
    b4ac:	0000b413 	.word	0x0000b413
    b4b0:	0000b429 	.word	0x0000b429
    b4b4:	0000b429 	.word	0x0000b429
    b4b8:	0000b429 	.word	0x0000b429
    b4bc:	0000b429 	.word	0x0000b429
    b4c0:	0000b415 	.word	0x0000b415
		{

		case 'c':
			sendContinuedACK(breakPointId);
    b4c4:	4620      	mov	r0, r4
    b4c6:	4629      	mov	r1, r5
    b4c8:	f7ff ff70 	bl	b3ac <VisualMicroDebug::sendContinuedACK(unsigned char)>
			return 'c'; //if we get here we are continuing!
    b4cc:	2063      	movs	r0, #99	; 0x63
    b4ce:	bd38      	pop	{r3, r4, r5, pc}
					  //	sendContinuedACK(breakPointId);
					  //	return;

					  //switch off break until re-start. for dev/testing
		case 'X':
			alwaysBreak = false;
    b4d0:	2300      	movs	r3, #0
    b4d2:	7623      	strb	r3, [r4, #24]
			return 'c';
    b4d4:	2063      	movs	r0, #99	; 0x63
    b4d6:	bd38      	pop	{r3, r4, r5, pc}

0000b4d8 <VisualMicroDebug::start(bool, bool)>:
}
#endif


void VisualMicroDebug::start(bool waitForKeyToStart, bool _alwaysBreak)
{
    b4d8:	b570      	push	{r4, r5, r6, lr}
    b4da:	4605      	mov	r5, r0
    b4dc:	b082      	sub	sp, #8
    b4de:	4616      	mov	r6, r2
#if defined (VM_DEBUG_BREAKPAUSE)
	if (waitForKeyToStart)
    b4e0:	b1c9      	cbz	r1, b516 <VisualMicroDebug::start(bool, bool)+0x3e>
	{
		alwaysBreak = true;
    b4e2:	2301      	movs	r3, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b4e4:	4c0d      	ldr	r4, [pc, #52]	; (b51c <VisualMicroDebug::start(bool, bool)+0x44>)
    b4e6:	7603      	strb	r3, [r0, #24]

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    b4e8:	2100      	movs	r1, #0
    b4ea:	4628      	mov	r0, r5
    b4ec:	f7ff ff8e 	bl	b40c <VisualMicroDebug::breakWait(unsigned char)>
    b4f0:	2863      	cmp	r0, #99	; 0x63
    b4f2:	d010      	beq.n	b516 <VisualMicroDebug::start(bool, bool)+0x3e>
    b4f4:	6823      	ldr	r3, [r4, #0]
    b4f6:	9301      	str	r3, [sp, #4]
	return ret;
    b4f8:	9a01      	ldr	r2, [sp, #4]
	DBG_YieldAndWait(ms, true);
}
void VisualMicroDebug::DBG_YieldAndWait(unsigned long ms, bool handle_events)
{
	unsigned long ms_start = DBG_Millis();
	unsigned long ms_end = ms_start + ms;
    b4fa:	1c51      	adds	r1, r2, #1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    b4fc:	6823      	ldr	r3, [r4, #0]
    b4fe:	9300      	str	r3, [sp, #0]
	return ret;
    b500:	9b00      	ldr	r3, [sp, #0]

		//delay(1);

		ms_curr = DBG_Millis();

		if (ms_curr<ms_start || ms_curr>ms_end) {
    b502:	429a      	cmp	r2, r3
    b504:	d8f0      	bhi.n	b4e8 <VisualMicroDebug::start(bool, bool)+0x10>
    b506:	4299      	cmp	r1, r3
    b508:	d2f8      	bcs.n	b4fc <VisualMicroDebug::start(bool, bool)+0x24>
	if (waitForKeyToStart)
	{
		alwaysBreak = true;

		//server should know we are waiting sendMessage("Press any key to continue");
		while (breakWait(0) != 'c') {
    b50a:	2100      	movs	r1, #0
    b50c:	4628      	mov	r0, r5
    b50e:	f7ff ff7d 	bl	b40c <VisualMicroDebug::breakWait(unsigned char)>
    b512:	2863      	cmp	r0, #99	; 0x63
    b514:	d1ee      	bne.n	b4f4 <VisualMicroDebug::start(bool, bool)+0x1c>
			DBG_YieldAndWait(1);
		}
		//breakWait(0);
	}
	alwaysBreak = _alwaysBreak;
    b516:	762e      	strb	r6, [r5, #24]
#endif

}
    b518:	b002      	add	sp, #8
    b51a:	bd70      	pop	{r4, r5, r6, pc}
    b51c:	1fffa8f8 	.word	0x1fffa8f8

0000b520 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm>:
	//wait if we have to
	//try to prevent new users from overloading bandwidth and filling windows buffer
	//can be overriden via preferences
	//defaults to 50ms; needs to allow time for windows to recover if it pauses, so we need to be slower than the extensions and debugger can process + a bit

	BreakStartMillis = 0L;
    b520:	4b03      	ldr	r3, [pc, #12]	; (b530 <_GLOBAL__sub_I__ZN16VisualMicroDebug16DBG_YieldAndWaitEm+0x10>)
    b522:	2200      	movs	r2, #0
    b524:	609a      	str	r2, [r3, #8]
	BreakPrevMillis = 0L;
    b526:	60da      	str	r2, [r3, #12]
	InBreakMsgRepeatMS = 0L;
    b528:	611a      	str	r2, [r3, #16]
	InBreakMsgSent = 0L;
    b52a:	615a      	str	r2, [r3, #20]
    b52c:	4770      	bx	lr
    b52e:	bf00      	nop
    b530:	1fffa8a8 	.word	0x1fffa8a8

0000b534 <wait_for_cal>:
{
	uint16_t sum;

	//serial_print("wait_for_cal\n");
#if defined(HAS_KINETIS_ADC0) && defined(HAS_KINETIS_ADC1)
	while ((ADC0_SC3 & ADC_SC3_CAL) || (ADC1_SC3 & ADC_SC3_CAL)) {
    b534:	4a37      	ldr	r2, [pc, #220]	; (b614 <wait_for_cal+0xe0>)
    b536:	4938      	ldr	r1, [pc, #224]	; (b618 <wait_for_cal+0xe4>)
    b538:	6813      	ldr	r3, [r2, #0]
    b53a:	061b      	lsls	r3, r3, #24
    b53c:	d4fc      	bmi.n	b538 <wait_for_cal+0x4>
    b53e:	680b      	ldr	r3, [r1, #0]
    b540:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    b544:	d1f8      	bne.n	b538 <wait_for_cal+0x4>
#elif defined(HAS_KINETIS_ADC0)
	while (ADC0_SC3 & ADC_SC3_CAL) {
		// wait
	}
#endif
	__disable_irq();
    b546:	b672      	cpsid	i
	if (calibrating) {
    b548:	4934      	ldr	r1, [pc, #208]	; (b61c <wait_for_cal+0xe8>)
    b54a:	780a      	ldrb	r2, [r1, #0]
    b54c:	2a00      	cmp	r2, #0
    b54e:	d05f      	beq.n	b610 <wait_for_cal+0xdc>
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    b550:	4a33      	ldr	r2, [pc, #204]	; (b620 <wait_for_cal+0xec>)
    b552:	4834      	ldr	r0, [pc, #208]	; (b624 <wait_for_cal+0xf0>)
	}
	calibrating = 1;
}

static void wait_for_cal(void)
{
    b554:	b4f0      	push	{r4, r5, r6, r7}
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    b556:	4c34      	ldr	r4, [pc, #208]	; (b628 <wait_for_cal+0xf4>)
    b558:	6817      	ldr	r7, [r2, #0]
    b55a:	6806      	ldr	r6, [r0, #0]
    b55c:	6825      	ldr	r5, [r4, #0]
    b55e:	68d4      	ldr	r4, [r2, #12]
    b560:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    b562:	443e      	add	r6, r7
	}
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
    b564:	3214      	adds	r2, #20
    b566:	6800      	ldr	r0, [r0, #0]
    b568:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    b56a:	4f30      	ldr	r7, [pc, #192]	; (b62c <wait_for_cal+0xf8>)
#endif
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
    b56c:	4435      	add	r5, r6
    b56e:	442c      	add	r4, r5
    b570:	4420      	add	r0, r4
    b572:	4402      	add	r2, r0
    b574:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    b578:	4e2d      	ldr	r6, [pc, #180]	; (b630 <wait_for_cal+0xfc>)
    b57a:	482e      	ldr	r0, [pc, #184]	; (b634 <wait_for_cal+0x100>)
    b57c:	4d2e      	ldr	r5, [pc, #184]	; (b638 <wait_for_cal+0x104>)
    b57e:	4c2f      	ldr	r4, [pc, #188]	; (b63c <wait_for_cal+0x108>)
	__disable_irq();
	if (calibrating) {
		//serial_print("\n");
		sum = ADC0_CLPS + ADC0_CLP4 + ADC0_CLP3 + ADC0_CLP2 + ADC0_CLP1 + ADC0_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
    b580:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b584:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    b586:	6837      	ldr	r7, [r6, #0]
    b588:	6806      	ldr	r6, [r0, #0]
    b58a:	682d      	ldr	r5, [r5, #0]
    b58c:	4a2c      	ldr	r2, [pc, #176]	; (b640 <wait_for_cal+0x10c>)
    b58e:	6824      	ldr	r4, [r4, #0]
    b590:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    b592:	443e      	add	r6, r7
		sum = (sum / 2) | 0x8000;
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
    b594:	6800      	ldr	r0, [r0, #0]
    b596:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    b598:	4f2a      	ldr	r7, [pc, #168]	; (b644 <wait_for_cal+0x110>)
		ADC0_PG = sum;
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
    b59a:	4435      	add	r5, r6
    b59c:	442c      	add	r4, r5
    b59e:	4420      	add	r0, r4
    b5a0:	4402      	add	r2, r0
    b5a2:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    b5a6:	4e28      	ldr	r6, [pc, #160]	; (b648 <wait_for_cal+0x114>)
    b5a8:	4828      	ldr	r0, [pc, #160]	; (b64c <wait_for_cal+0x118>)
    b5aa:	4d29      	ldr	r5, [pc, #164]	; (b650 <wait_for_cal+0x11c>)
    b5ac:	4c29      	ldr	r4, [pc, #164]	; (b654 <wait_for_cal+0x120>)
		//serial_print("ADC0_PG = ");
		//serial_phex16(sum);
		//serial_print("\n");
		sum = ADC0_CLMS + ADC0_CLM4 + ADC0_CLM3 + ADC0_CLM2 + ADC0_CLM1 + ADC0_CLM0;
		sum = (sum / 2) | 0x8000;
		ADC0_MG = sum;
    b5ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b5b2:	603a      	str	r2, [r7, #0]
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    b5b4:	6837      	ldr	r7, [r6, #0]
    b5b6:	6806      	ldr	r6, [r0, #0]
    b5b8:	682d      	ldr	r5, [r5, #0]
    b5ba:	4a27      	ldr	r2, [pc, #156]	; (b658 <wait_for_cal+0x124>)
    b5bc:	6824      	ldr	r4, [r4, #0]
    b5be:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    b5c0:	443e      	add	r6, r7
		ADC0_MG = sum;
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
    b5c2:	6800      	ldr	r0, [r0, #0]
    b5c4:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    b5c6:	4f25      	ldr	r7, [pc, #148]	; (b65c <wait_for_cal+0x128>)
		//serial_print("ADC0_MG = ");
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
    b5c8:	4435      	add	r5, r6
    b5ca:	442c      	add	r4, r5
    b5cc:	4420      	add	r0, r4
    b5ce:	4402      	add	r2, r0
    b5d0:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    b5d4:	4e22      	ldr	r6, [pc, #136]	; (b660 <wait_for_cal+0x12c>)
    b5d6:	4823      	ldr	r0, [pc, #140]	; (b664 <wait_for_cal+0x130>)
    b5d8:	4d23      	ldr	r5, [pc, #140]	; (b668 <wait_for_cal+0x134>)
    b5da:	4c24      	ldr	r4, [pc, #144]	; (b66c <wait_for_cal+0x138>)
		//serial_phex16(sum);
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
    b5dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b5e0:	603a      	str	r2, [r7, #0]
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    b5e2:	6837      	ldr	r7, [r6, #0]
    b5e4:	6806      	ldr	r6, [r0, #0]
    b5e6:	682d      	ldr	r5, [r5, #0]
    b5e8:	4a21      	ldr	r2, [pc, #132]	; (b670 <wait_for_cal+0x13c>)
    b5ea:	6824      	ldr	r4, [r4, #0]
    b5ec:	300c      	adds	r0, #12
		sum = (sum / 2) | 0x8000;
    b5ee:	443e      	add	r6, r7
		//serial_print("\n");
#ifdef HAS_KINETIS_ADC1
		sum = ADC1_CLPS + ADC1_CLP4 + ADC1_CLP3 + ADC1_CLP2 + ADC1_CLP1 + ADC1_CLP0;
		sum = (sum / 2) | 0x8000;
		ADC1_PG = sum;
		sum = ADC1_CLMS + ADC1_CLM4 + ADC1_CLM3 + ADC1_CLM2 + ADC1_CLM1 + ADC1_CLM0;
    b5f0:	6800      	ldr	r0, [r0, #0]
    b5f2:	6812      	ldr	r2, [r2, #0]
		sum = (sum / 2) | 0x8000;
    b5f4:	4435      	add	r5, r6
    b5f6:	442c      	add	r4, r5
    b5f8:	4420      	add	r0, r4
    b5fa:	4402      	add	r2, r0
    b5fc:	f3c2 024e 	ubfx	r2, r2, #1, #15
		ADC1_MG = sum;
    b600:	481c      	ldr	r0, [pc, #112]	; (b674 <wait_for_cal+0x140>)
    b602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    b606:	6002      	str	r2, [r0, #0]
#endif
		calibrating = 0;
    b608:	700b      	strb	r3, [r1, #0]
	}
	__enable_irq();
    b60a:	b662      	cpsie	i
}
    b60c:	bcf0      	pop	{r4, r5, r6, r7}
    b60e:	4770      	bx	lr
		sum = (sum / 2) | 0x8000;
		ADC1_MG = sum;
#endif
		calibrating = 0;
	}
	__enable_irq();
    b610:	b662      	cpsie	i
    b612:	4770      	bx	lr
    b614:	4003b024 	.word	0x4003b024
    b618:	400bb024 	.word	0x400bb024
    b61c:	1fffa8f1 	.word	0x1fffa8f1
    b620:	4003b038 	.word	0x4003b038
    b624:	4003b03c 	.word	0x4003b03c
    b628:	4003b040 	.word	0x4003b040
    b62c:	4003b02c 	.word	0x4003b02c
    b630:	4003b058 	.word	0x4003b058
    b634:	4003b05c 	.word	0x4003b05c
    b638:	4003b060 	.word	0x4003b060
    b63c:	4003b064 	.word	0x4003b064
    b640:	4003b06c 	.word	0x4003b06c
    b644:	4003b030 	.word	0x4003b030
    b648:	400bb038 	.word	0x400bb038
    b64c:	400bb03c 	.word	0x400bb03c
    b650:	400bb040 	.word	0x400bb040
    b654:	400bb044 	.word	0x400bb044
    b658:	400bb04c 	.word	0x400bb04c
    b65c:	400bb02c 	.word	0x400bb02c
    b660:	400bb058 	.word	0x400bb058
    b664:	400bb05c 	.word	0x400bb05c
    b668:	400bb060 	.word	0x400bb060
    b66c:	400bb064 	.word	0x400bb064
    b670:	400bb06c 	.word	0x400bb06c
    b674:	400bb030 	.word	0x400bb030

0000b678 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    b678:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b67a:	4829      	ldr	r0, [pc, #164]	; (b720 <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b67c:	4a29      	ldr	r2, [pc, #164]	; (b724 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    b67e:	4b2a      	ldr	r3, [pc, #168]	; (b728 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b680:	4d2a      	ldr	r5, [pc, #168]	; (b72c <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b682:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b684:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    b686:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    b688:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    b68a:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b68c:	4c28      	ldr	r4, [pc, #160]	; (b730 <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    b68e:	2b08      	cmp	r3, #8
    b690:	d030      	beq.n	b6f4 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b692:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b694:	4827      	ldr	r0, [pc, #156]	; (b734 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b696:	4928      	ldr	r1, [pc, #160]	; (b738 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    b698:	d037      	beq.n	b70a <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    b69a:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    b69c:	bf0c      	ite	eq
    b69e:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b6a0:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b6a2:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b6a4:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b6a6:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    b6a8:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    b6aa:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b6ac:	4b23      	ldr	r3, [pc, #140]	; (b73c <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b6ae:	4924      	ldr	r1, [pc, #144]	; (b740 <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b6b0:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b6b2:	4a24      	ldr	r2, [pc, #144]	; (b744 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    b6b4:	b1bb      	cbz	r3, b6e6 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b6b6:	2301      	movs	r3, #1
    b6b8:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    b6ba:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b6bc:	4b22      	ldr	r3, [pc, #136]	; (b748 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b6be:	4923      	ldr	r1, [pc, #140]	; (b74c <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    b6c0:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b6c2:	4a23      	ldr	r2, [pc, #140]	; (b750 <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    b6c4:	2b01      	cmp	r3, #1
    b6c6:	d926      	bls.n	b716 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    b6c8:	2b04      	cmp	r3, #4
    b6ca:	d90f      	bls.n	b6ec <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    b6cc:	2b08      	cmp	r3, #8
    b6ce:	d91e      	bls.n	b70e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    b6d0:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    b6d2:	bf94      	ite	ls
    b6d4:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b6d6:	2387      	movhi	r3, #135	; 0x87
    b6d8:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    b6da:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    b6dc:	4b1d      	ldr	r3, [pc, #116]	; (b754 <analog_init+0xdc>)
    b6de:	2201      	movs	r2, #1
    b6e0:	701a      	strb	r2, [r3, #0]
}
    b6e2:	bc30      	pop	{r4, r5}
    b6e4:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b6e6:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    b6e8:	6013      	str	r3, [r2, #0]
    b6ea:	e7e7      	b.n	b6bc <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b6ec:	2384      	movs	r3, #132	; 0x84
    b6ee:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    b6f0:	6013      	str	r3, [r2, #0]
    b6f2:	e7f3      	b.n	b6dc <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b6f4:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b6f8:	490f      	ldr	r1, [pc, #60]	; (b738 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b6fa:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    b6fc:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b6fe:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b700:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b702:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b704:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    b706:	600b      	str	r3, [r1, #0]
    b708:	e7d0      	b.n	b6ac <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    b70a:	2239      	movs	r2, #57	; 0x39
    b70c:	e7f7      	b.n	b6fe <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b70e:	2385      	movs	r3, #133	; 0x85
    b710:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    b712:	6013      	str	r3, [r2, #0]
    b714:	e7e2      	b.n	b6dc <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    b716:	2380      	movs	r3, #128	; 0x80
    b718:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    b71a:	6013      	str	r3, [r2, #0]
    b71c:	e7de      	b.n	b6dc <analog_init+0x64>
    b71e:	bf00      	nop
    b720:	40074000 	.word	0x40074000
    b724:	40074001 	.word	0x40074001
    b728:	1fff8786 	.word	0x1fff8786
    b72c:	4003b008 	.word	0x4003b008
    b730:	4003b00c 	.word	0x4003b00c
    b734:	400bb008 	.word	0x400bb008
    b738:	400bb00c 	.word	0x400bb00c
    b73c:	1fffa8f4 	.word	0x1fffa8f4
    b740:	4003b020 	.word	0x4003b020
    b744:	400bb020 	.word	0x400bb020
    b748:	1fff8787 	.word	0x1fff8787
    b74c:	4003b024 	.word	0x4003b024
    b750:	400bb024 	.word	0x400bb024
    b754:	1fffa8f1 	.word	0x1fffa8f1

0000b758 <analogRead>:
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b758:	2828      	cmp	r0, #40	; 0x28
    b75a:	d82f      	bhi.n	b7bc <analogRead+0x64>
	channel = pin2sc1a[pin];
    b75c:	4b33      	ldr	r3, [pc, #204]	; (b82c <analogRead+0xd4>)
#ifdef HAS_KINETIS_ADC1
static volatile uint8_t analogReadBusyADC1 = 0;
#endif

int analogRead(uint8_t pin)
{
    b75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
    b762:	5c1e      	ldrb	r6, [r3, r0]
	if (channel == 255) return 0;
    b764:	2eff      	cmp	r6, #255	; 0xff
    b766:	d02b      	beq.n	b7c0 <analogRead+0x68>

	if (calibrating) wait_for_cal();
    b768:	4b31      	ldr	r3, [pc, #196]	; (b830 <analogRead+0xd8>)
    b76a:	781b      	ldrb	r3, [r3, #0]
    b76c:	2b00      	cmp	r3, #0
    b76e:	d12a      	bne.n	b7c6 <analogRead+0x6e>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    b770:	0632      	lsls	r2, r6, #24
    b772:	d42c      	bmi.n	b7ce <analogRead+0x76>
#endif

	__disable_irq();
    b774:	b672      	cpsid	i
    b776:	4d2f      	ldr	r5, [pc, #188]	; (b834 <analogRead+0xdc>)
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    b778:	4c2f      	ldr	r4, [pc, #188]	; (b838 <analogRead+0xe0>)
	analogReadBusyADC0 = 1;
    b77a:	462f      	mov	r7, r5
    b77c:	2301      	movs	r3, #1
		channel &= 0x3F;
	} else {
		ADC0_CFG2 |= ADC_CFG2_MUXSEL;
	}
#endif
	ADC0_SC1A = channel;
    b77e:	6026      	str	r6, [r4, #0]
	analogReadBusyADC0 = 1;
    b780:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    b782:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    b784:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    b786:	6823      	ldr	r3, [r4, #0]
    b788:	061b      	lsls	r3, r3, #24
    b78a:	d40c      	bmi.n	b7a6 <analogRead+0x4e>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC0) goto startADC0;
    b78c:	783b      	ldrb	r3, [r7, #0]
    b78e:	b91b      	cbnz	r3, b798 <analogRead+0x40>
    b790:	e7f4      	b.n	b77c <analogRead+0x24>
    b792:	782b      	ldrb	r3, [r5, #0]
    b794:	2b00      	cmp	r3, #0
    b796:	d0f1      	beq.n	b77c <analogRead+0x24>
		__enable_irq();
    b798:	b662      	cpsie	i
		yield();
    b79a:	f001 fc3f 	bl	d01c <yield>
#endif
	ADC0_SC1A = channel;
	analogReadBusyADC0 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    b79e:	b672      	cpsid	i
		if ((ADC0_SC1A & ADC_SC1_COCO)) {
    b7a0:	6823      	ldr	r3, [r4, #0]
    b7a2:	0618      	lsls	r0, r3, #24
    b7a4:	d5f5      	bpl.n	b792 <analogRead+0x3a>
			result = ADC0_RA;
    b7a6:	4b25      	ldr	r3, [pc, #148]	; (b83c <analogRead+0xe4>)
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
			result = ADC1_RA;
    b7a8:	681b      	ldr	r3, [r3, #0]
			analogReadBusyADC1 = 0;
    b7aa:	2200      	movs	r2, #0
    b7ac:	702a      	strb	r2, [r5, #0]
			__enable_irq();
    b7ae:	b662      	cpsie	i
			result >>= analog_right_shift;
    b7b0:	4a23      	ldr	r2, [pc, #140]	; (b840 <analogRead+0xe8>)
    b7b2:	7810      	ldrb	r0, [r2, #0]
    b7b4:	fa43 f000 	asr.w	r0, r3, r0
			return result;
    b7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b7bc:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    b7be:	4770      	bx	lr
	uint8_t channel;

	//serial_phex(pin);
	//serial_print(" ");

	if (pin >= sizeof(pin2sc1a)) return 0;
    b7c0:	2000      	movs	r0, #0
		if (!analogReadBusyADC1) goto startADC1;
		__enable_irq();
		yield();
	}
#endif
}
    b7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (pin >= sizeof(pin2sc1a)) return 0;
	channel = pin2sc1a[pin];
	if (channel == 255) return 0;

	if (calibrating) wait_for_cal();
    b7c6:	f7ff feb5 	bl	b534 <wait_for_cal>

#ifdef HAS_KINETIS_ADC1
	if (channel & 0x80) goto beginADC1;
    b7ca:	0632      	lsls	r2, r6, #24
    b7cc:	d5d2      	bpl.n	b774 <analogRead+0x1c>
		yield();
	}

#ifdef HAS_KINETIS_ADC1
beginADC1:
	__disable_irq();
    b7ce:	b672      	cpsid	i
    b7d0:	4d1c      	ldr	r5, [pc, #112]	; (b844 <analogRead+0xec>)
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    b7d2:	f8df 807c 	ldr.w	r8, [pc, #124]	; b850 <analogRead+0xf8>
	}
	ADC1_SC1A = channel & 0x3F;
    b7d6:	4c1c      	ldr	r4, [pc, #112]	; (b848 <analogRead+0xf0>)
    b7d8:	f006 0740 	and.w	r7, r6, #64	; 0x40
    b7dc:	b2ff      	uxtb	r7, r7
    b7de:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    b7e2:	f8d8 3000 	ldr.w	r3, [r8]
beginADC1:
	__disable_irq();
startADC1:
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
    b7e6:	b1df      	cbz	r7, b820 <analogRead+0xc8>
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
    b7e8:	f023 0310 	bic.w	r3, r3, #16
    b7ec:	f8c8 3000 	str.w	r3, [r8]
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
    b7f0:	2301      	movs	r3, #1
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
	}
	ADC1_SC1A = channel & 0x3F;
    b7f2:	6026      	str	r6, [r4, #0]
	analogReadBusyADC1 = 1;
    b7f4:	4a13      	ldr	r2, [pc, #76]	; (b844 <analogRead+0xec>)
    b7f6:	702b      	strb	r3, [r5, #0]
	__enable_irq();
    b7f8:	b662      	cpsie	i
	while (1) {
		__disable_irq();
    b7fa:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    b7fc:	6823      	ldr	r3, [r4, #0]
    b7fe:	0619      	lsls	r1, r3, #24
    b800:	d40c      	bmi.n	b81c <analogRead+0xc4>
			return result;
		}
		// detect if analogRead was used from an interrupt
		// if so, our analogRead got canceled, so it must
		// be restarted.
		if (!analogReadBusyADC1) goto startADC1;
    b802:	7813      	ldrb	r3, [r2, #0]
    b804:	b91b      	cbnz	r3, b80e <analogRead+0xb6>
    b806:	e7ec      	b.n	b7e2 <analogRead+0x8a>
    b808:	782b      	ldrb	r3, [r5, #0]
    b80a:	2b00      	cmp	r3, #0
    b80c:	d0e9      	beq.n	b7e2 <analogRead+0x8a>
		__enable_irq();
    b80e:	b662      	cpsie	i
		yield();
    b810:	f001 fc04 	bl	d01c <yield>
	}
	ADC1_SC1A = channel & 0x3F;
	analogReadBusyADC1 = 1;
	__enable_irq();
	while (1) {
		__disable_irq();
    b814:	b672      	cpsid	i
		if ((ADC1_SC1A & ADC_SC1_COCO)) {
    b816:	6823      	ldr	r3, [r4, #0]
    b818:	061b      	lsls	r3, r3, #24
    b81a:	d5f5      	bpl.n	b808 <analogRead+0xb0>
			result = ADC1_RA;
    b81c:	4b0b      	ldr	r3, [pc, #44]	; (b84c <analogRead+0xf4>)
    b81e:	e7c3      	b.n	b7a8 <analogRead+0x50>
	//serial_print("startADC1\n");
	// ADC1_CFG2[MUXSEL] bit selects between ADCx_SEn channels a and b.
	if (channel & 0x40) {
		ADC1_CFG2 &= ~ADC_CFG2_MUXSEL;
	} else {
		ADC1_CFG2 |= ADC_CFG2_MUXSEL;
    b820:	f043 0310 	orr.w	r3, r3, #16
    b824:	f8c8 3000 	str.w	r3, [r8]
    b828:	e7e2      	b.n	b7f0 <analogRead+0x98>
    b82a:	bf00      	nop
    b82c:	00011538 	.word	0x00011538
    b830:	1fffa8f1 	.word	0x1fffa8f1
    b834:	1fffa8f3 	.word	0x1fffa8f3
    b838:	4003b000 	.word	0x4003b000
    b83c:	4003b010 	.word	0x4003b010
    b840:	1fffa8f0 	.word	0x1fffa8f0
    b844:	1fffa8f2 	.word	0x1fffa8f2
    b848:	400bb000 	.word	0x400bb000
    b84c:	400bb010 	.word	0x400bb010
    b850:	400bb00c 	.word	0x400bb00c

0000b854 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    b854:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b856:	4c10      	ldr	r4, [pc, #64]	; (b898 <fault_isr+0x44>)
    b858:	e008      	b.n	b86c <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b85a:	6823      	ldr	r3, [r4, #0]
    b85c:	0559      	lsls	r1, r3, #21
    b85e:	d40d      	bmi.n	b87c <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b860:	6823      	ldr	r3, [r4, #0]
    b862:	051a      	lsls	r2, r3, #20
    b864:	d40f      	bmi.n	b886 <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b866:	6823      	ldr	r3, [r4, #0]
    b868:	04db      	lsls	r3, r3, #19
    b86a:	d411      	bmi.n	b890 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    b86c:	6823      	ldr	r3, [r4, #0]
    b86e:	0358      	lsls	r0, r3, #13
    b870:	d5f3      	bpl.n	b85a <fault_isr+0x6>
    b872:	f000 fa37 	bl	bce4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    b876:	6823      	ldr	r3, [r4, #0]
    b878:	0559      	lsls	r1, r3, #21
    b87a:	d5f1      	bpl.n	b860 <fault_isr+0xc>
    b87c:	f001 fc52 	bl	d124 <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    b880:	6823      	ldr	r3, [r4, #0]
    b882:	051a      	lsls	r2, r3, #20
    b884:	d5ef      	bpl.n	b866 <fault_isr+0x12>
    b886:	f001 fce3 	bl	d250 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    b88a:	6823      	ldr	r3, [r4, #0]
    b88c:	04db      	lsls	r3, r3, #19
    b88e:	d5ed      	bpl.n	b86c <fault_isr+0x18>
    b890:	f001 fd74 	bl	d37c <uart2_status_isr>
    b894:	e7ea      	b.n	b86c <fault_isr+0x18>
    b896:	bf00      	nop
    b898:	40048034 	.word	0x40048034

0000b89c <unused_isr>:
	}
}

void unused_isr(void)
{
    b89c:	b508      	push	{r3, lr}
	fault_isr();
    b89e:	f7ff ffd9 	bl	b854 <fault_isr>
    b8a2:	bf00      	nop

0000b8a4 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    b8a4:	4b01      	ldr	r3, [pc, #4]	; (b8ac <startup_early_hook+0x8>)
    b8a6:	2210      	movs	r2, #16
    b8a8:	801a      	strh	r2, [r3, #0]
    b8aa:	4770      	bx	lr
    b8ac:	40052000 	.word	0x40052000

0000b8b0 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    b8b0:	4770      	bx	lr
    b8b2:	bf00      	nop

0000b8b4 <__cxa_guard_acquire>:
}

__attribute__((weak)) 
int __cxa_guard_acquire (char *g) 
{
	return !(*g);
    b8b4:	7800      	ldrb	r0, [r0, #0]
}
    b8b6:	fab0 f080 	clz	r0, r0
    b8ba:	0940      	lsrs	r0, r0, #5
    b8bc:	4770      	bx	lr
    b8be:	bf00      	nop

0000b8c0 <__cxa_guard_release>:

__attribute__((weak)) 
void __cxa_guard_release(char *g)
{
	*g = 1;
    b8c0:	2301      	movs	r3, #1
    b8c2:	7003      	strb	r3, [r0, #0]
    b8c4:	4770      	bx	lr
    b8c6:	bf00      	nop

0000b8c8 <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    b8c8:	4a1c      	ldr	r2, [pc, #112]	; (b93c <pinMode.part.2+0x74>)
    b8ca:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b8ce:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    b8d0:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    b8d2:	d011      	beq.n	b8f8 <pinMode.part.2+0x30>
    b8d4:	2904      	cmp	r1, #4
    b8d6:	d01b      	beq.n	b910 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    b8d8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    b8dc:	2200      	movs	r2, #0
    b8de:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    b8e2:	b129      	cbz	r1, b8f0 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    b8e4:	2902      	cmp	r1, #2
    b8e6:	d020      	beq.n	b92a <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    b8e8:	2903      	cmp	r1, #3
    b8ea:	d022      	beq.n	b932 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    b8ec:	601a      	str	r2, [r3, #0]
    b8ee:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    b8f0:	f44f 7280 	mov.w	r2, #256	; 0x100
    b8f4:	601a      	str	r2, [r3, #0]
    b8f6:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b8f8:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b8fc:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b900:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b904:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    b906:	681a      	ldr	r2, [r3, #0]
    b908:	f022 0220 	bic.w	r2, r2, #32
    b90c:	601a      	str	r2, [r3, #0]
    b90e:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b910:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b914:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    b918:	2001      	movs	r0, #1
    b91a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    b91e:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    b920:	681a      	ldr	r2, [r3, #0]
    b922:	f042 0220 	orr.w	r2, r2, #32
    b926:	601a      	str	r2, [r3, #0]
    b928:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    b92a:	f240 1203 	movw	r2, #259	; 0x103
    b92e:	601a      	str	r2, [r3, #0]
    b930:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    b932:	f44f 7281 	mov.w	r2, #258	; 0x102
    b936:	601a      	str	r2, [r3, #0]
    b938:	4770      	bx	lr
    b93a:	bf00      	nop
    b93c:	00011564 	.word	0x00011564

0000b940 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    b940:	b430      	push	{r4, r5}
	RTC_SR = 0;
    b942:	4b05      	ldr	r3, [pc, #20]	; (b958 <rtc_set+0x18>)
	RTC_TPR = 0;
    b944:	4d05      	ldr	r5, [pc, #20]	; (b95c <rtc_set+0x1c>)
	RTC_TSR = t;
    b946:	4c06      	ldr	r4, [pc, #24]	; (b960 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b948:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    b94a:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    b94c:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    b94e:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    b950:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    b952:	6019      	str	r1, [r3, #0]
}
    b954:	bc30      	pop	{r4, r5}
    b956:	4770      	bx	lr
    b958:	4003d014 	.word	0x4003d014
    b95c:	4003d004 	.word	0x4003d004
    b960:	4003d000 	.word	0x4003d000

0000b964 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    b964:	2821      	cmp	r0, #33	; 0x21
    b966:	d801      	bhi.n	b96c <pinMode+0x8>
    b968:	f7ff bfae 	b.w	b8c8 <pinMode.part.2>
    b96c:	4770      	bx	lr
    b96e:	bf00      	nop

0000b970 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b970:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b972:	490c      	ldr	r1, [pc, #48]	; (b9a4 <micros+0x34>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b974:	4b0c      	ldr	r3, [pc, #48]	; (b9a8 <micros+0x38>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b976:	4a0d      	ldr	r2, [pc, #52]	; (b9ac <micros+0x3c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b978:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b97a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b97c:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    b97e:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b980:	0152      	lsls	r2, r2, #5
    b982:	d502      	bpl.n	b98a <micros+0x1a>
    b984:	2b32      	cmp	r3, #50	; 0x32
    b986:	bf88      	it	hi
    b988:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b98a:	4909      	ldr	r1, [pc, #36]	; (b9b0 <micros+0x40>)
    b98c:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    b990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b994:	33ff      	adds	r3, #255	; 0xff
    b996:	fba1 1303 	umull	r1, r3, r1, r3
    b99a:	fb02 f000 	mul.w	r0, r2, r0
}
    b99e:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    b9a2:	4770      	bx	lr
    b9a4:	1fffa8f8 	.word	0x1fffa8f8
    b9a8:	e000e018 	.word	0xe000e018
    b9ac:	e000ed04 	.word	0xe000ed04
    b9b0:	aaaaaaab 	.word	0xaaaaaaab

0000b9b4 <delay>:

void delay(uint32_t ms)
{
    b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b8:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b9ba:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    b9bc:	4f20      	ldr	r7, [pc, #128]	; (ba40 <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b9be:	4b21      	ldr	r3, [pc, #132]	; (ba44 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b9c0:	4a21      	ldr	r2, [pc, #132]	; (ba48 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b9c2:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    b9c4:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b9c6:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    b9c8:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    b9ca:	0152      	lsls	r2, r2, #5
    b9cc:	d502      	bpl.n	b9d4 <delay+0x20>
    b9ce:	2b32      	cmp	r3, #50	; 0x32
    b9d0:	bf88      	it	hi
    b9d2:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    b9d4:	b395      	cbz	r5, ba3c <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b9d6:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    b9da:	4e1c      	ldr	r6, [pc, #112]	; (ba4c <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    b9dc:	f8df 9064 	ldr.w	r9, [pc, #100]	; ba44 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b9e0:	f8df 8064 	ldr.w	r8, [pc, #100]	; ba48 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    b9e4:	33ff      	adds	r3, #255	; 0xff
    b9e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b9ea:	fba6 1303 	umull	r1, r3, r6, r3
    b9ee:	fb02 f404 	mul.w	r4, r2, r4
    b9f2:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    b9f6:	b672      	cpsid	i
	current = SYST_CVR;
    b9f8:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    b9fc:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    b9fe:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    ba02:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ba04:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    ba08:	33ff      	adds	r3, #255	; 0xff
    ba0a:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ba0e:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ba12:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    ba16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    ba1a:	d002      	beq.n	ba22 <delay+0x6e>
    ba1c:	2932      	cmp	r1, #50	; 0x32
    ba1e:	bf88      	it	hi
    ba20:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    ba22:	fb00 3302 	mla	r3, r0, r2, r3
    ba26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    ba2a:	d304      	bcc.n	ba36 <delay+0x82>
				ms--;
				if (ms == 0) return;
    ba2c:	3d01      	subs	r5, #1
    ba2e:	d005      	beq.n	ba3c <delay+0x88>
				start += 1000;
    ba30:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    ba34:	e7df      	b.n	b9f6 <delay+0x42>
			}
			yield();
    ba36:	f001 faf1 	bl	d01c <yield>
		}
    ba3a:	e7dc      	b.n	b9f6 <delay+0x42>
    ba3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba40:	1fffa8f8 	.word	0x1fffa8f8
    ba44:	e000e018 	.word	0xe000e018
    ba48:	e000ed04 	.word	0xe000ed04
    ba4c:	aaaaaaab 	.word	0xaaaaaaab

0000ba50 <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    ba52:	4b2d      	ldr	r3, [pc, #180]	; (bb08 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    ba54:	492d      	ldr	r1, [pc, #180]	; (bb0c <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ba56:	f8df e0d0 	ldr.w	lr, [pc, #208]	; bb28 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    ba5a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; bb2c <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    ba5e:	4e2c      	ldr	r6, [pc, #176]	; (bb10 <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    ba60:	4d2c      	ldr	r5, [pc, #176]	; (bb14 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    ba62:	4c2d      	ldr	r4, [pc, #180]	; (bb18 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    ba64:	4a2d      	ldr	r2, [pc, #180]	; (bb1c <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    ba66:	4f2e      	ldr	r7, [pc, #184]	; (bb20 <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    ba68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    ba6c:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    ba6e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba72:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    ba74:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    ba78:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    ba7a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    ba7e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    ba80:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ba84:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    ba86:	2000      	movs	r0, #0
    ba88:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ba8a:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    ba8c:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    ba90:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    ba94:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    ba98:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    ba9a:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    ba9c:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    ba9e:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    baa0:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    baa2:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    baa4:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    baa6:	2209      	movs	r2, #9
    baa8:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    baac:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    bab0:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    bab4:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    bab8:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    babc:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    bac0:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    bac4:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    bac6:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    baca:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    bace:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    bad2:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    bad6:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    bad8:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    badc:	4811      	ldr	r0, [pc, #68]	; (bb24 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    bade:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    bae0:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    bae4:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    bae8:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    baea:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    baec:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    baee:	f7ff fdc3 	bl	b678 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
    baf2:	2019      	movs	r0, #25
    baf4:	f7ff ff5e 	bl	b9b4 <delay>
	usb_init();
    baf8:	f000 fe5c 	bl	c7b4 <usb_init>
	delay(275);
    bafc:	f240 1013 	movw	r0, #275	; 0x113
#else
	delay(50);
	usb_init();
	delay(350);
#endif
}
    bb00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
#if TEENSYDUINO >= 142
	delay(25);
	usb_init();
	delay(275);
    bb04:	f7ff bf56 	b.w	b9b4 <delay>
    bb08:	e000e108 	.word	0xe000e108
    bb0c:	40038004 	.word	0x40038004
    bb10:	40038014 	.word	0x40038014
    bb14:	40038024 	.word	0x40038024
    bb18:	4003802c 	.word	0x4003802c
    bb1c:	4003801c 	.word	0x4003801c
    bb20:	40038034 	.word	0x40038034
    bb24:	400b8000 	.word	0x400b8000
    bb28:	4003800c 	.word	0x4003800c
    bb2c:	40038008 	.word	0x40038008

0000bb30 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    bb30:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    bb32:	2b03      	cmp	r3, #3
    bb34:	d814      	bhi.n	bb60 <usb_rx+0x30>
	__disable_irq();
    bb36:	b672      	cpsid	i
	ret = rx_first[endpoint];
    bb38:	490a      	ldr	r1, [pc, #40]	; (bb64 <usb_rx+0x34>)
    bb3a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    bb3e:	b168      	cbz	r0, bb5c <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    bb40:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    bb42:	4c09      	ldr	r4, [pc, #36]	; (bb68 <usb_rx+0x38>)
    bb44:	8805      	ldrh	r5, [r0, #0]
    bb46:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    bb4a:	6846      	ldr	r6, [r0, #4]
    bb4c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    bb50:	1b52      	subs	r2, r2, r5
    bb52:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    bb56:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    bb58:	bc70      	pop	{r4, r5, r6}
    bb5a:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    bb5c:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    bb5e:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    bb60:	2000      	movs	r0, #0
    bb62:	4770      	bx	lr
    bb64:	1fffa954 	.word	0x1fffa954
    bb68:	1fffaba8 	.word	0x1fffaba8

0000bb6c <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    bb6c:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    bb6e:	2803      	cmp	r0, #3
    bb70:	d80b      	bhi.n	bb8a <usb_tx_packet_count+0x1e>
	__disable_irq();
    bb72:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    bb74:	4b07      	ldr	r3, [pc, #28]	; (bb94 <usb_tx_packet_count+0x28>)
    bb76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    bb7a:	b143      	cbz	r3, bb8e <usb_tx_packet_count+0x22>
    bb7c:	2000      	movs	r0, #0
    bb7e:	685b      	ldr	r3, [r3, #4]
    bb80:	3001      	adds	r0, #1
    bb82:	2b00      	cmp	r3, #0
    bb84:	d1fb      	bne.n	bb7e <usb_tx_packet_count+0x12>
	__enable_irq();
    bb86:	b662      	cpsie	i
	return count;
    bb88:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    bb8a:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    bb8c:	4770      	bx	lr
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    bb8e:	4618      	mov	r0, r3
    bb90:	e7f9      	b.n	bb86 <usb_tx_packet_count+0x1a>
    bb92:	bf00      	nop
    bb94:	1fffa9a8 	.word	0x1fffa9a8

0000bb98 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    bb98:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    bb9a:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bb9c:	4a2b      	ldr	r2, [pc, #172]	; (bc4c <usb_rx_memory+0xb4>)
    bb9e:	7813      	ldrb	r3, [r2, #0]
    bba0:	071d      	lsls	r5, r3, #28
    bba2:	d506      	bpl.n	bbb2 <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    bba4:	4b2a      	ldr	r3, [pc, #168]	; (bc50 <usb_rx_memory+0xb8>)
    bba6:	6a19      	ldr	r1, [r3, #32]
    bba8:	2900      	cmp	r1, #0
    bbaa:	d036      	beq.n	bc1a <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bbac:	6a99      	ldr	r1, [r3, #40]	; 0x28
    bbae:	2900      	cmp	r1, #0
    bbb0:	d041      	beq.n	bc36 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bbb2:	7853      	ldrb	r3, [r2, #1]
    bbb4:	071c      	lsls	r4, r3, #28
    bbb6:	d506      	bpl.n	bbc6 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    bbb8:	4b25      	ldr	r3, [pc, #148]	; (bc50 <usb_rx_memory+0xb8>)
    bbba:	6c19      	ldr	r1, [r3, #64]	; 0x40
    bbbc:	2900      	cmp	r1, #0
    bbbe:	d03e      	beq.n	bc3e <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bbc0:	6c99      	ldr	r1, [r3, #72]	; 0x48
    bbc2:	2900      	cmp	r1, #0
    bbc4:	d039      	beq.n	bc3a <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bbc6:	7893      	ldrb	r3, [r2, #2]
    bbc8:	0719      	lsls	r1, r3, #28
    bbca:	d505      	bpl.n	bbd8 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    bbcc:	4b20      	ldr	r3, [pc, #128]	; (bc50 <usb_rx_memory+0xb8>)
    bbce:	6e19      	ldr	r1, [r3, #96]	; 0x60
    bbd0:	2900      	cmp	r1, #0
    bbd2:	d036      	beq.n	bc42 <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bbd4:	6e99      	ldr	r1, [r3, #104]	; 0x68
    bbd6:	b189      	cbz	r1, bbfc <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    bbd8:	78d3      	ldrb	r3, [r2, #3]
    bbda:	071b      	lsls	r3, r3, #28
    bbdc:	d507      	bpl.n	bbee <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    bbde:	4b1c      	ldr	r3, [pc, #112]	; (bc50 <usb_rx_memory+0xb8>)
    bbe0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    bbe4:	b37a      	cbz	r2, bc46 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bbe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    bbea:	2111      	movs	r1, #17
    bbec:	b13a      	cbz	r2, bbfe <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    bbee:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    bbf0:	4b18      	ldr	r3, [pc, #96]	; (bc54 <usb_rx_memory+0xbc>)
    bbf2:	2200      	movs	r2, #0
    bbf4:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    bbf6:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    bbf8:	f000 be68 	b.w	c8cc <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bbfc:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    bbfe:	4c15      	ldr	r4, [pc, #84]	; (bc54 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bc00:	4d15      	ldr	r5, [pc, #84]	; (bc58 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    bc02:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bc04:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    bc08:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    bc0c:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    bc0e:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    bc10:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    bc12:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    bc14:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    bc16:	bc30      	pop	{r4, r5}
    bc18:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    bc1a:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    bc1c:	4c0d      	ldr	r4, [pc, #52]	; (bc54 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bc1e:	4d0f      	ldr	r5, [pc, #60]	; (bc5c <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    bc20:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bc22:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    bc26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bc2a:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    bc2c:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    bc2e:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    bc30:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    bc32:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    bc34:	e7ef      	b.n	bc16 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    bc36:	2105      	movs	r1, #5
    bc38:	e7e1      	b.n	bbfe <usb_rx_memory+0x66>
    bc3a:	2109      	movs	r1, #9
    bc3c:	e7df      	b.n	bbfe <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    bc3e:	2208      	movs	r2, #8
    bc40:	e7ec      	b.n	bc1c <usb_rx_memory+0x84>
    bc42:	220c      	movs	r2, #12
    bc44:	e7ea      	b.n	bc1c <usb_rx_memory+0x84>
    bc46:	2210      	movs	r2, #16
    bc48:	e7e8      	b.n	bc1c <usb_rx_memory+0x84>
    bc4a:	bf00      	nop
    bc4c:	000116a0 	.word	0x000116a0
    bc50:	1fff8000 	.word	0x1fff8000
    bc54:	1fffa9d1 	.word	0x1fffa9d1
    bc58:	004000c8 	.word	0x004000c8
    bc5c:	00400088 	.word	0x00400088

0000bc60 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    bc60:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    bc62:	2b03      	cmp	r3, #3
    bc64:	d81d      	bhi.n	bca2 <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    bc66:	4a1b      	ldr	r2, [pc, #108]	; (bcd4 <usb_tx+0x74>)
    bc68:	0140      	lsls	r0, r0, #5
    bc6a:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    bc6e:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    bc70:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    bc72:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    bc74:	4c18      	ldr	r4, [pc, #96]	; (bcd8 <usb_tx+0x78>)
    bc76:	5ce2      	ldrb	r2, [r4, r3]
    bc78:	2a03      	cmp	r2, #3
    bc7a:	d81b      	bhi.n	bcb4 <usb_tx+0x54>
    bc7c:	e8df f002 	tbb	[pc, r2]
    bc80:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    bc84:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bc86:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    bc88:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bc8a:	f010 0f08 	tst.w	r0, #8
    bc8e:	bf14      	ite	ne
    bc90:	23c8      	movne	r3, #200	; 0xc8
    bc92:	2388      	moveq	r3, #136	; 0x88
    bc94:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    bc98:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bc9a:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    bc9c:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    bc9e:	b662      	cpsie	i
}
    bca0:	bc30      	pop	{r4, r5}
    bca2:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    bca4:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    bca6:	2202      	movs	r2, #2
		break;
    bca8:	e7ed      	b.n	bc86 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    bcaa:	2205      	movs	r2, #5
    bcac:	e7eb      	b.n	bc86 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    bcae:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    bcb0:	2204      	movs	r2, #4
		break;
    bcb2:	e7e8      	b.n	bc86 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    bcb4:	4a09      	ldr	r2, [pc, #36]	; (bcdc <usb_tx+0x7c>)
    bcb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    bcba:	b138      	cbz	r0, bccc <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    bcbc:	4a08      	ldr	r2, [pc, #32]	; (bce0 <usb_tx+0x80>)
    bcbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    bcc2:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    bcc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    bcc8:	b662      	cpsie	i
		return;
    bcca:	e7e9      	b.n	bca0 <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    bccc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    bcd0:	4a03      	ldr	r2, [pc, #12]	; (bce0 <usb_tx+0x80>)
    bcd2:	e7f7      	b.n	bcc4 <usb_tx+0x64>
    bcd4:	1fff8000 	.word	0x1fff8000
    bcd8:	1fffa9e0 	.word	0x1fffa9e0
    bcdc:	1fffa9a8 	.word	0x1fffa9a8
    bce0:	1fffa9b8 	.word	0x1fffa9b8

0000bce4 <usb_isr>:
}



void usb_isr(void)
{
    bce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    bce8:	f8df b30c 	ldr.w	fp, [pc, #780]	; bff8 <usb_isr+0x314>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    bcec:	f8df a30c 	ldr.w	sl, [pc, #780]	; bffc <usb_isr+0x318>
}



void usb_isr(void)
{
    bcf0:	b087      	sub	sp, #28
    bcf2:	e044      	b.n	bd7e <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    bcf4:	4fab      	ldr	r7, [pc, #684]	; (bfa4 <usb_isr+0x2c0>)
    bcf6:	ea4f 0893 	mov.w	r8, r3, lsr #2
    bcfa:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    bcfe:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    bd00:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    bd04:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    bd08:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    bd0a:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    bd0e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    bd12:	2b00      	cmp	r3, #0
    bd14:	f040 8102 	bne.w	bf1c <usb_isr+0x238>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    bd18:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    bd1c:	0c1b      	lsrs	r3, r3, #16
    bd1e:	b299      	uxth	r1, r3
    bd20:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    bd24:	2b00      	cmp	r3, #0
    bd26:	f000 80f0 	beq.w	bf0a <usb_isr+0x226>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    bd2a:	4b9f      	ldr	r3, [pc, #636]	; (bfa8 <usb_isr+0x2c4>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    bd2c:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    bd30:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    bd34:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    bd38:	2a00      	cmp	r2, #0
    bd3a:	f000 82c5 	beq.w	c2c8 <usb_isr+0x5e4>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    bd3e:	4d9b      	ldr	r5, [pc, #620]	; (bfac <usb_isr+0x2c8>)
    bd40:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    bd44:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    bd46:	4c9a      	ldr	r4, [pc, #616]	; (bfb0 <usb_isr+0x2cc>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    bd48:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    bd4c:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    bd50:	4419      	add	r1, r3
    bd52:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    bd56:	f000 fd99 	bl	c88c <usb_malloc>
					if (packet) {
    bd5a:	2800      	cmp	r0, #0
    bd5c:	f000 82ad 	beq.w	c2ba <usb_isr+0x5d6>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    bd60:	4a94      	ldr	r2, [pc, #592]	; (bfb4 <usb_isr+0x2d0>)
    bd62:	4b95      	ldr	r3, [pc, #596]	; (bfb8 <usb_isr+0x2d4>)
    bd64:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    bd68:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    bd6c:	bf18      	it	ne
    bd6e:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    bd70:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    bd74:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    bd78:	2308      	movs	r3, #8
    bd7a:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    bd7e:	f89b 4000 	ldrb.w	r4, [fp]
    bd82:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    bd84:	0761      	lsls	r1, r4, #29
    bd86:	d51a      	bpl.n	bdbe <usb_isr+0xda>
		if (usb_configuration) {
    bd88:	4b8c      	ldr	r3, [pc, #560]	; (bfbc <usb_isr+0x2d8>)
    bd8a:	781b      	ldrb	r3, [r3, #0]
    bd8c:	b1a3      	cbz	r3, bdb8 <usb_isr+0xd4>
			t = usb_reboot_timer;
    bd8e:	498c      	ldr	r1, [pc, #560]	; (bfc0 <usb_isr+0x2dc>)
    bd90:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    bd92:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    bd96:	b122      	cbz	r2, bda2 <usb_isr+0xbe>
				usb_reboot_timer = --t;
    bd98:	3b01      	subs	r3, #1
    bd9a:	b2db      	uxtb	r3, r3
    bd9c:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    bd9e:	b903      	cbnz	r3, bda2 <usb_isr+0xbe>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    bda0:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    bda2:	4988      	ldr	r1, [pc, #544]	; (bfc4 <usb_isr+0x2e0>)
    bda4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    bda6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    bdaa:	b12a      	cbz	r2, bdb8 <usb_isr+0xd4>
				usb_cdc_transmit_flush_timer = --t;
    bdac:	3b01      	subs	r3, #1
    bdae:	b2db      	uxtb	r3, r3
    bdb0:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    bdb2:	2b00      	cmp	r3, #0
    bdb4:	f000 8257 	beq.w	c266 <usb_isr+0x582>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    bdb8:	2304      	movs	r3, #4
    bdba:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    bdbe:	f004 0308 	and.w	r3, r4, #8
    bdc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	f000 80cc 	beq.w	bf64 <usb_isr+0x280>
		uint8_t endpoint;
		stat = USB0_STAT;
    bdcc:	f89a 3000 	ldrb.w	r3, [sl]
    bdd0:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    bdd2:	091e      	lsrs	r6, r3, #4
    bdd4:	d18e      	bne.n	bcf4 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    bdd6:	089c      	lsrs	r4, r3, #2
    bdd8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; bfa4 <usb_isr+0x2c0>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bddc:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    bde0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bde4:	f3c2 0283 	ubfx	r2, r2, #2, #4
    bde8:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    bdea:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    bdec:	2a0c      	cmp	r2, #12
    bdee:	f200 8088 	bhi.w	bf02 <usb_isr+0x21e>
    bdf2:	e8df f002 	tbb	[pc, r2]
    bdf6:	7c7c      	.short	0x7c7c
    bdf8:	86868686 	.word	0x86868686
    bdfc:	86478686 	.word	0x86478686
    be00:	8686      	.short	0x8686
    be02:	07          	.byte	0x07
    be03:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    be04:	6808      	ldr	r0, [r1, #0]
    be06:	4d70      	ldr	r5, [pc, #448]	; (bfc8 <usb_isr+0x2e4>)
		setup.word2 = *(uint32_t *)(buf + 4);
    be08:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    be0a:	4f70      	ldr	r7, [pc, #448]	; (bfcc <usb_isr+0x2e8>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    be0c:	4e70      	ldr	r6, [pc, #448]	; (bfd0 <usb_isr+0x2ec>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    be0e:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    be10:	b281      	uxth	r1, r0
    be12:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    be16:	4b67      	ldr	r3, [pc, #412]	; (bfb4 <usb_isr+0x2d0>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    be18:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    be1a:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    be1e:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    be20:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    be22:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    be26:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    be28:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    be2c:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    be30:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    be34:	4c5b      	ldr	r4, [pc, #364]	; (bfa4 <usb_isr+0x2c0>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    be36:	f200 80e3 	bhi.w	c000 <usb_isr+0x31c>
    be3a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    be3e:	f080 8346 	bcs.w	c4ce <usb_isr+0x7ea>
    be42:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    be46:	f000 82fc 	beq.w	c442 <usb_isr+0x75e>
    be4a:	f200 828d 	bhi.w	c368 <usb_isr+0x684>
    be4e:	2980      	cmp	r1, #128	; 0x80
    be50:	f000 8377 	beq.w	c542 <usb_isr+0x85e>
    be54:	2982      	cmp	r1, #130	; 0x82
    be56:	f040 82fa 	bne.w	c44e <usb_isr+0x76a>
    be5a:	88a9      	ldrh	r1, [r5, #4]
    be5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    be60:	2904      	cmp	r1, #4
    be62:	f200 82f4 	bhi.w	c44e <usb_isr+0x76a>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    be66:	485b      	ldr	r0, [pc, #364]	; (bfd4 <usb_isr+0x2f0>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    be68:	4c5b      	ldr	r4, [pc, #364]	; (bfd8 <usb_isr+0x2f4>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    be6a:	0089      	lsls	r1, r1, #2
    be6c:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    be6e:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    be70:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    be72:	7802      	ldrb	r2, [r0, #0]
    be74:	0793      	lsls	r3, r2, #30
    be76:	f140 8458 	bpl.w	c72a <usb_isr+0xa46>
    be7a:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    be7e:	f04f 0e02 	mov.w	lr, #2
    be82:	e342      	b.n	c50a <usb_isr+0x826>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    be84:	4f51      	ldr	r7, [pc, #324]	; (bfcc <usb_isr+0x2e8>)
    be86:	683a      	ldr	r2, [r7, #0]
		if (data) {
    be88:	b332      	cbz	r2, bed8 <usb_isr+0x1f4>
			size = ep0_tx_len;
    be8a:	4b54      	ldr	r3, [pc, #336]	; (bfdc <usb_isr+0x2f8>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be8c:	4e50      	ldr	r6, [pc, #320]	; (bfd0 <usb_isr+0x2ec>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    be8e:	4954      	ldr	r1, [pc, #336]	; (bfe0 <usb_isr+0x2fc>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    be90:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be92:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    be94:	780d      	ldrb	r5, [r1, #0]
    be96:	2840      	cmp	r0, #64	; 0x40
    be98:	4686      	mov	lr, r0
    be9a:	f045 0802 	orr.w	r8, r5, #2
    be9e:	bf28      	it	cs
    bea0:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bea4:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    bea6:	f084 0401 	eor.w	r4, r4, #1
    beaa:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    beac:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beb0:	bf0c      	ite	eq
    beb2:	2488      	moveq	r4, #136	; 0x88
    beb4:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    beb6:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    beba:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bebc:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bec4:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    bec6:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bec8:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    becc:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    bece:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bed0:	2800      	cmp	r0, #0
    bed2:	f000 8145 	beq.w	c160 <usb_isr+0x47c>
    bed6:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    bed8:	4b3b      	ldr	r3, [pc, #236]	; (bfc8 <usb_isr+0x2e4>)
    beda:	881a      	ldrh	r2, [r3, #0]
    bedc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    bee0:	d10f      	bne.n	bf02 <usb_isr+0x21e>
			setup.bRequest = 0;
    bee2:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    bee4:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    bee6:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    bee8:	4b3e      	ldr	r3, [pc, #248]	; (bfe4 <usb_isr+0x300>)
    beea:	701a      	strb	r2, [r3, #0]
    beec:	e009      	b.n	bf02 <usb_isr+0x21e>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    beee:	4a36      	ldr	r2, [pc, #216]	; (bfc8 <usb_isr+0x2e4>)
    bef0:	8810      	ldrh	r0, [r2, #0]
    bef2:	f242 0221 	movw	r2, #8225	; 0x2021
    bef6:	4290      	cmp	r0, r2
    bef8:	f000 8137 	beq.w	c16a <usb_isr+0x486>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    befc:	4a2d      	ldr	r2, [pc, #180]	; (bfb4 <usb_isr+0x2d0>)
    befe:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bf02:	4a39      	ldr	r2, [pc, #228]	; (bfe8 <usb_isr+0x304>)
    bf04:	2301      	movs	r3, #1
    bf06:	7013      	strb	r3, [r2, #0]
    bf08:	e736      	b.n	bd78 <usb_isr+0x94>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    bf0a:	4a2a      	ldr	r2, [pc, #168]	; (bfb4 <usb_isr+0x2d0>)
    bf0c:	4b2a      	ldr	r3, [pc, #168]	; (bfb8 <usb_isr+0x2d4>)
    bf0e:	f019 0f08 	tst.w	r9, #8
    bf12:	bf18      	it	ne
    bf14:	4613      	movne	r3, r2
    bf16:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    bf1a:	e72d      	b.n	bd78 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    bf1c:	f000 fcd6 	bl	c8cc <usb_free>
				packet = tx_first[endpoint];
    bf20:	4a32      	ldr	r2, [pc, #200]	; (bfec <usb_isr+0x308>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    bf22:	4933      	ldr	r1, [pc, #204]	; (bff0 <usb_isr+0x30c>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    bf24:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    bf28:	2b00      	cmp	r3, #0
    bf2a:	f000 81d1 	beq.w	c2d0 <usb_isr+0x5ec>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    bf2e:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    bf30:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    bf32:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    bf36:	f103 0208 	add.w	r2, r3, #8
    bf3a:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    bf3e:	2c03      	cmp	r4, #3
    bf40:	d805      	bhi.n	bf4e <usb_isr+0x26a>
    bf42:	e8df f004 	tbb	[pc, r4]
    bf46:	022c      	.short	0x022c
    bf48:	2629      	.short	0x2629
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    bf4a:	2202      	movs	r2, #2
    bf4c:	558a      	strb	r2, [r1, r6]
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    bf4e:	881a      	ldrh	r2, [r3, #0]
    bf50:	f019 0f08 	tst.w	r9, #8
    bf54:	bf0c      	ite	eq
    bf56:	2388      	moveq	r3, #136	; 0x88
    bf58:	23c8      	movne	r3, #200	; 0xc8
    bf5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    bf5e:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    bf62:	e709      	b.n	bd78 <usb_isr+0x94>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    bf64:	07e0      	lsls	r0, r4, #31
    bf66:	f100 8181 	bmi.w	c26c <usb_isr+0x588>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    bf6a:	0621      	lsls	r1, r4, #24
    bf6c:	f100 81f2 	bmi.w	c354 <usb_isr+0x670>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bf70:	07a2      	lsls	r2, r4, #30
    bf72:	d506      	bpl.n	bf82 <usb_isr+0x29e>
		uint8_t err = USB0_ERRSTAT;
    bf74:	4a1f      	ldr	r2, [pc, #124]	; (bff4 <usb_isr+0x310>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bf76:	4920      	ldr	r1, [pc, #128]	; (bff8 <usb_isr+0x314>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    bf78:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bf7a:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    bf7c:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    bf7e:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bf80:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    bf82:	06e3      	lsls	r3, r4, #27
    bf84:	d502      	bpl.n	bf8c <usb_isr+0x2a8>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    bf86:	4b1c      	ldr	r3, [pc, #112]	; (bff8 <usb_isr+0x314>)
    bf88:	2210      	movs	r2, #16
    bf8a:	701a      	strb	r2, [r3, #0]
	}

}
    bf8c:	b007      	add	sp, #28
    bf8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    bf92:	2204      	movs	r2, #4
    bf94:	558a      	strb	r2, [r1, r6]
						break;
    bf96:	e7da      	b.n	bf4e <usb_isr+0x26a>
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    bf98:	2205      	movs	r2, #5
    bf9a:	558a      	strb	r2, [r1, r6]
						break;
    bf9c:	e7d7      	b.n	bf4e <usb_isr+0x26a>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    bf9e:	2203      	movs	r2, #3
    bfa0:	558a      	strb	r2, [r1, r6]
						break;
    bfa2:	e7d4      	b.n	bf4e <usb_isr+0x26a>
    bfa4:	1fff8000 	.word	0x1fff8000
    bfa8:	1fffa954 	.word	0x1fffa954
    bfac:	1fffa900 	.word	0x1fffa900
    bfb0:	1fffaba8 	.word	0x1fffaba8
    bfb4:	004000c8 	.word	0x004000c8
    bfb8:	00400088 	.word	0x00400088
    bfbc:	1fffa9dc 	.word	0x1fffa9dc
    bfc0:	1fffa965 	.word	0x1fffa965
    bfc4:	1fffa9e4 	.word	0x1fffa9e4
    bfc8:	1fffa9c8 	.word	0x1fffa9c8
    bfcc:	1fffa8fc 	.word	0x1fffa8fc
    bfd0:	1fffa964 	.word	0x1fffa964
    bfd4:	400720c0 	.word	0x400720c0
    bfd8:	1fffa9d4 	.word	0x1fffa9d4
    bfdc:	1fffa910 	.word	0x1fffa910
    bfe0:	1fffa9d0 	.word	0x1fffa9d0
    bfe4:	40072098 	.word	0x40072098
    bfe8:	40072094 	.word	0x40072094
    bfec:	1fffa9a8 	.word	0x1fffa9a8
    bff0:	1fffa9e0 	.word	0x1fffa9e0
    bff4:	40072088 	.word	0x40072088
    bff8:	40072080 	.word	0x40072080
    bffc:	40072090 	.word	0x40072090
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c000:	f242 0021 	movw	r0, #8225	; 0x2021
    c004:	4281      	cmp	r1, r0
    c006:	f000 812a 	beq.w	c25e <usb_isr+0x57a>
    c00a:	f200 80d8 	bhi.w	c1be <usb_isr+0x4da>
    c00e:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    c012:	f000 8276 	beq.w	c502 <usb_isr+0x81e>
    c016:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    c01a:	f040 8218 	bne.w	c44e <usb_isr+0x76a>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    c01e:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    c020:	49b3      	ldr	r1, [pc, #716]	; (c2f0 <usb_isr+0x60c>)
    c022:	78a8      	ldrb	r0, [r5, #2]
    c024:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    c026:	0612      	lsls	r2, r2, #24
    c028:	f100 833a 	bmi.w	c6a0 <usb_isr+0x9bc>
    c02c:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    c030:	49b0      	ldr	r1, [pc, #704]	; (c2f4 <usb_isr+0x610>)
    c032:	0613      	lsls	r3, r2, #24
    c034:	f100 830c 	bmi.w	c650 <usb_isr+0x96c>
    c038:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    c03c:	49ad      	ldr	r1, [pc, #692]	; (c2f4 <usb_isr+0x610>)
    c03e:	0615      	lsls	r5, r2, #24
    c040:	f100 8301 	bmi.w	c646 <usb_isr+0x962>
    c044:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    c048:	49aa      	ldr	r1, [pc, #680]	; (c2f4 <usb_isr+0x610>)
    c04a:	0614      	lsls	r4, r2, #24
    c04c:	f100 82f6 	bmi.w	c63c <usb_isr+0x958>
    c050:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    c054:	49a7      	ldr	r1, [pc, #668]	; (c2f4 <usb_isr+0x610>)
    c056:	0610      	lsls	r0, r2, #24
    c058:	f100 834a 	bmi.w	c6f0 <usb_isr+0xa0c>
    c05c:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    c060:	49a4      	ldr	r1, [pc, #656]	; (c2f4 <usb_isr+0x610>)
    c062:	0612      	lsls	r2, r2, #24
    c064:	f100 833f 	bmi.w	c6e6 <usb_isr+0xa02>
    c068:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    c06c:	49a1      	ldr	r1, [pc, #644]	; (c2f4 <usb_isr+0x610>)
    c06e:	0613      	lsls	r3, r2, #24
    c070:	f100 8334 	bmi.w	c6dc <usb_isr+0x9f8>
    c074:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    c078:	499e      	ldr	r1, [pc, #632]	; (c2f4 <usb_isr+0x610>)
    c07a:	0615      	lsls	r5, r2, #24
    c07c:	f100 8329 	bmi.w	c6d2 <usb_isr+0x9ee>
    c080:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    c084:	499b      	ldr	r1, [pc, #620]	; (c2f4 <usb_isr+0x610>)
    c086:	0614      	lsls	r4, r2, #24
    c088:	f100 831e 	bmi.w	c6c8 <usb_isr+0x9e4>
    c08c:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    c090:	4998      	ldr	r1, [pc, #608]	; (c2f4 <usb_isr+0x610>)
    c092:	0610      	lsls	r0, r2, #24
    c094:	f100 8313 	bmi.w	c6be <usb_isr+0x9da>
    c098:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    c09c:	4995      	ldr	r1, [pc, #596]	; (c2f4 <usb_isr+0x610>)
    c09e:	0612      	lsls	r2, r2, #24
    c0a0:	f100 8308 	bmi.w	c6b4 <usb_isr+0x9d0>
    c0a4:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    c0a8:	4992      	ldr	r1, [pc, #584]	; (c2f4 <usb_isr+0x610>)
    c0aa:	0613      	lsls	r3, r2, #24
    c0ac:	f100 82fd 	bmi.w	c6aa <usb_isr+0x9c6>
    c0b0:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    c0b4:	498f      	ldr	r1, [pc, #572]	; (c2f4 <usb_isr+0x610>)
    c0b6:	0615      	lsls	r5, r2, #24
    c0b8:	f100 8331 	bmi.w	c71e <usb_isr+0xa3a>
    c0bc:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    c0c0:	498c      	ldr	r1, [pc, #560]	; (c2f4 <usb_isr+0x610>)
    c0c2:	0614      	lsls	r4, r2, #24
    c0c4:	f100 8325 	bmi.w	c712 <usb_isr+0xa2e>
    c0c8:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    c0cc:	4989      	ldr	r1, [pc, #548]	; (c2f4 <usb_isr+0x610>)
    c0ce:	0610      	lsls	r0, r2, #24
    c0d0:	f100 8319 	bmi.w	c706 <usb_isr+0xa22>
    c0d4:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    c0d8:	4986      	ldr	r1, [pc, #536]	; (c2f4 <usb_isr+0x610>)
    c0da:	0612      	lsls	r2, r2, #24
    c0dc:	f100 830d 	bmi.w	c6fa <usb_isr+0xa16>
    c0e0:	4885      	ldr	r0, [pc, #532]	; (c2f8 <usb_isr+0x614>)
    c0e2:	4a86      	ldr	r2, [pc, #536]	; (c2fc <usb_isr+0x618>)
    c0e4:	4986      	ldr	r1, [pc, #536]	; (c300 <usb_isr+0x61c>)
    c0e6:	9001      	str	r0, [sp, #4]
    c0e8:	4886      	ldr	r0, [pc, #536]	; (c304 <usb_isr+0x620>)
    c0ea:	4d87      	ldr	r5, [pc, #540]	; (c308 <usb_isr+0x624>)
    c0ec:	4c87      	ldr	r4, [pc, #540]	; (c30c <usb_isr+0x628>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c0ee:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    c0f0:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c0f2:	9605      	str	r6, [sp, #20]
    c0f4:	9502      	str	r5, [sp, #8]
    c0f6:	4680      	mov	r8, r0
    c0f8:	460f      	mov	r7, r1
    c0fa:	4616      	mov	r6, r2
    c0fc:	461d      	mov	r5, r3
    c0fe:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    c100:	6830      	ldr	r0, [r6, #0]
			while (p) {
    c102:	b128      	cbz	r0, c110 <usb_isr+0x42c>
				n = p->next;
    c104:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    c106:	f000 fbe1 	bl	c8cc <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    c10a:	4620      	mov	r0, r4
    c10c:	2c00      	cmp	r4, #0
    c10e:	d1f9      	bne.n	c104 <usb_isr+0x420>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    c110:	2300      	movs	r3, #0
    c112:	6033      	str	r3, [r6, #0]
			rx_last[i] = NULL;
    c114:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    c116:	6838      	ldr	r0, [r7, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    c118:	461a      	mov	r2, r3
    c11a:	2300      	movs	r3, #0
    c11c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    c120:	b128      	cbz	r0, c12e <usb_isr+0x44a>
				n = p->next;
    c122:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    c124:	f000 fbd2 	bl	c8cc <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    c128:	4620      	mov	r0, r4
    c12a:	2c00      	cmp	r4, #0
    c12c:	d1f9      	bne.n	c122 <usb_isr+0x43e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    c12e:	2200      	movs	r2, #0
    c130:	603a      	str	r2, [r7, #0]
			tx_last[i] = NULL;
    c132:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    c134:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    c138:	4611      	mov	r1, r2
    c13a:	2200      	movs	r2, #0
    c13c:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    c140:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    c142:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    c144:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    c146:	f04f 0100 	mov.w	r1, #0
    c14a:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    c14e:	2b03      	cmp	r3, #3
    c150:	f200 812b 	bhi.w	c3aa <usb_isr+0x6c6>
    c154:	e8df f013 	tbh	[pc, r3, lsl #1]
    c158:	01250170 	.word	0x01250170
    c15c:	01250170 	.word	0x01250170
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    c160:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    c164:	bf18      	it	ne
    c166:	2200      	movne	r2, #0
    c168:	e6b5      	b.n	bed6 <usb_isr+0x1f2>
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    c16a:	4a69      	ldr	r2, [pc, #420]	; (c310 <usb_isr+0x62c>)
    c16c:	780d      	ldrb	r5, [r1, #0]
    c16e:	7848      	ldrb	r0, [r1, #1]
    c170:	7015      	strb	r5, [r2, #0]
    c172:	7050      	strb	r0, [r2, #1]
    c174:	788d      	ldrb	r5, [r1, #2]
    c176:	78c8      	ldrb	r0, [r1, #3]
    c178:	7095      	strb	r5, [r2, #2]
    c17a:	70d0      	strb	r0, [r2, #3]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    c17c:	6810      	ldr	r0, [r2, #0]
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    c17e:	790d      	ldrb	r5, [r1, #4]
    c180:	7115      	strb	r5, [r2, #4]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    c182:	2886      	cmp	r0, #134	; 0x86
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    c184:	794d      	ldrb	r5, [r1, #5]
    c186:	7989      	ldrb	r1, [r1, #6]
    c188:	7155      	strb	r5, [r2, #5]
    c18a:	7191      	strb	r1, [r2, #6]
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    c18c:	f000 819b 	beq.w	c4c6 <usb_isr+0x7e2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c190:	4960      	ldr	r1, [pc, #384]	; (c314 <usb_isr+0x630>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c192:	4e61      	ldr	r6, [pc, #388]	; (c318 <usb_isr+0x634>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c194:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c196:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c198:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c19c:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c19e:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c1a2:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1a4:	bf0c      	ite	eq
    c1a6:	2188      	moveq	r1, #136	; 0x88
    c1a8:	21c8      	movne	r1, #200	; 0xc8
    c1aa:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c1ae:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    c1b2:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c1b6:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    c1b8:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c1ba:	6051      	str	r1, [r2, #4]
    c1bc:	e69e      	b.n	befc <usb_isr+0x218>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c1be:	f242 2021 	movw	r0, #8737	; 0x2221
    c1c2:	4281      	cmp	r1, r0
    c1c4:	f040 81cb 	bne.w	c55e <usb_isr+0x87a>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c1c8:	4b54      	ldr	r3, [pc, #336]	; (c31c <usb_isr+0x638>)
    c1ca:	4c55      	ldr	r4, [pc, #340]	; (c320 <usb_isr+0x63c>)
		usb_cdc_line_rtsdtr = setup.wValue;
    c1cc:	4955      	ldr	r1, [pc, #340]	; (c324 <usb_isr+0x640>)
    c1ce:	78a8      	ldrb	r0, [r5, #2]
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    c1d0:	681d      	ldr	r5, [r3, #0]
    c1d2:	6025      	str	r5, [r4, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    c1d4:	f8cd e004 	str.w	lr, [sp, #4]
    c1d8:	7008      	strb	r0, [r1, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c1da:	2000      	movs	r0, #0
    c1dc:	9002      	str	r0, [sp, #8]
    c1de:	4680      	mov	r8, r0
    c1e0:	4684      	mov	ip, r0
    c1e2:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c1e4:	494b      	ldr	r1, [pc, #300]	; (c314 <usb_isr+0x630>)
    c1e6:	780d      	ldrb	r5, [r1, #0]
    c1e8:	f045 0e02 	orr.w	lr, r5, #2
    c1ec:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    c1f0:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1f2:	9b01      	ldr	r3, [sp, #4]
    c1f4:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c1f6:	9b03      	ldr	r3, [sp, #12]
    c1f8:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c1fa:	bf0c      	ite	eq
    c1fc:	2488      	moveq	r4, #136	; 0x88
    c1fe:	24c8      	movne	r4, #200	; 0xc8
    c200:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c204:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c208:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    c20c:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    c20e:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c210:	f8df e0e0 	ldr.w	lr, [pc, #224]	; c2f4 <usb_isr+0x610>
	ep0_tx_data_toggle ^= 1;
    c214:	4b40      	ldr	r3, [pc, #256]	; (c318 <usb_isr+0x634>)
	ep0_tx_bdt_bank ^= 1;
    c216:	f8df 80fc 	ldr.w	r8, [pc, #252]	; c314 <usb_isr+0x630>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    c21a:	2800      	cmp	r0, #0
    c21c:	f040 811e 	bne.w	c45c <usb_isr+0x778>
    c220:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    c224:	d11b      	bne.n	c25e <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c226:	f044 0c02 	orr.w	ip, r4, #2
    c22a:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    c22e:	9c02      	ldr	r4, [sp, #8]
    c230:	f8df e0c0 	ldr.w	lr, [pc, #192]	; c2f4 <usb_isr+0x610>
    c234:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c236:	2a00      	cmp	r2, #0
    c238:	f040 8126 	bne.w	c488 <usb_isr+0x7a4>
    c23c:	0402      	lsls	r2, r0, #16
    c23e:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    c242:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c246:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c24a:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    c24c:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    c24e:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c250:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    c252:	2840      	cmp	r0, #64	; 0x40
    c254:	d103      	bne.n	c25e <usb_isr+0x57a>
    c256:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    c258:	4a33      	ldr	r2, [pc, #204]	; (c328 <usb_isr+0x644>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    c25a:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    c25c:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c25e:	4a33      	ldr	r2, [pc, #204]	; (c32c <usb_isr+0x648>)
    c260:	2301      	movs	r3, #1
    c262:	7013      	strb	r3, [r2, #0]
    c264:	e64d      	b.n	bf02 <usb_isr+0x21e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    c266:	f000 fc9d 	bl	cba4 <usb_serial_flush_callback>
    c26a:	e5a5      	b.n	bdb8 <usb_isr+0xd4>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    c26c:	4b21      	ldr	r3, [pc, #132]	; (c2f4 <usb_isr+0x610>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    c26e:	482f      	ldr	r0, [pc, #188]	; (c32c <usb_isr+0x648>)
		ep0_tx_bdt_bank = 0;
    c270:	4928      	ldr	r1, [pc, #160]	; (c314 <usb_isr+0x630>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    c272:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    c274:	f04f 0e02 	mov.w	lr, #2
    c278:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c27c:	4f2c      	ldr	r7, [pc, #176]	; (c330 <usb_isr+0x64c>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    c27e:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    c280:	492c      	ldr	r1, [pc, #176]	; (c334 <usb_isr+0x650>)
    c282:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    c284:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    c286:	4e2c      	ldr	r6, [pc, #176]	; (c338 <usb_isr+0x654>)
		USB0_ISTAT = 0xFF;
    c288:	4d2c      	ldr	r5, [pc, #176]	; (c33c <usb_isr+0x658>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    c28a:	4c2d      	ldr	r4, [pc, #180]	; (c340 <usb_isr+0x65c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    c28c:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c28e:	210d      	movs	r1, #13
    c290:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    c292:	21ff      	movs	r1, #255	; 0xff
    c294:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    c296:	f8df e0b8 	ldr.w	lr, [pc, #184]	; c350 <usb_isr+0x66c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    c29a:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    c29c:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c29e:	4d29      	ldr	r5, [pc, #164]	; (c344 <usb_isr+0x660>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c2a0:	4a29      	ldr	r2, [pc, #164]	; (c348 <usb_isr+0x664>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    c2a2:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c2a6:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    c2a8:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    c2aa:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    c2ae:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    c2b0:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    c2b2:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    c2b4:	b007      	add	sp, #28
    c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    c2ba:	4a24      	ldr	r2, [pc, #144]	; (c34c <usb_isr+0x668>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    c2bc:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    c2c0:	7813      	ldrb	r3, [r2, #0]
    c2c2:	3301      	adds	r3, #1
    c2c4:	7013      	strb	r3, [r2, #0]
    c2c6:	e557      	b.n	bd78 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    c2c8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    c2cc:	4d0e      	ldr	r5, [pc, #56]	; (c308 <usb_isr+0x624>)
    c2ce:	e53a      	b.n	bd46 <usb_isr+0x62>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    c2d0:	5d8b      	ldrb	r3, [r1, r6]
    c2d2:	2b03      	cmp	r3, #3
    c2d4:	f200 80f0 	bhi.w	c4b8 <usb_isr+0x7d4>
    c2d8:	a201      	add	r2, pc, #4	; (adr r2, c2e0 <usb_isr+0x5fc>)
    c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c2de:	bf00      	nop
    c2e0:	0000bd79 	.word	0x0000bd79
    c2e4:	0000bd79 	.word	0x0000bd79
    c2e8:	0000c39d 	.word	0x0000c39d
    c2ec:	0000c397 	.word	0x0000c397
    c2f0:	1fffa9dc 	.word	0x1fffa9dc
    c2f4:	1fff8000 	.word	0x1fff8000
    c2f8:	1fffa9b8 	.word	0x1fffa9b8
    c2fc:	1fffa954 	.word	0x1fffa954
    c300:	1fffa9a8 	.word	0x1fffa9a8
    c304:	1fffa9e0 	.word	0x1fffa9e0
    c308:	1fffa900 	.word	0x1fffa900
    c30c:	1fffaba8 	.word	0x1fffaba8
    c310:	1fffabb0 	.word	0x1fffabb0
    c314:	1fffa9d0 	.word	0x1fffa9d0
    c318:	1fffa964 	.word	0x1fffa964
    c31c:	1fffa8f8 	.word	0x1fffa8f8
    c320:	1fffabb8 	.word	0x1fffabb8
    c324:	1fffa9f4 	.word	0x1fffa9f4
    c328:	1fffa910 	.word	0x1fffa910
    c32c:	40072094 	.word	0x40072094
    c330:	400720c0 	.word	0x400720c0
    c334:	00400088 	.word	0x00400088
    c338:	40072088 	.word	0x40072088
    c33c:	40072080 	.word	0x40072080
    c340:	40072098 	.word	0x40072098
    c344:	1fffa914 	.word	0x1fffa914
    c348:	1fffa968 	.word	0x1fffa968
    c34c:	1fffa9d1 	.word	0x1fffa9d1
    c350:	4007208c 	.word	0x4007208c
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c354:	49c1      	ldr	r1, [pc, #772]	; (c65c <usb_isr+0x978>)
		USB0_ISTAT = USB_ISTAT_STALL;
    c356:	4bc2      	ldr	r3, [pc, #776]	; (c660 <usb_isr+0x97c>)
    c358:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c35a:	200d      	movs	r0, #13
    c35c:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    c35e:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    c360:	07a2      	lsls	r2, r4, #30
    c362:	f57f ae0e 	bpl.w	bf82 <usb_isr+0x29e>
    c366:	e605      	b.n	bf74 <usb_isr+0x290>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c368:	f240 3202 	movw	r2, #770	; 0x302
    c36c:	4291      	cmp	r1, r2
    c36e:	f040 80ee 	bne.w	c54e <usb_isr+0x86a>
    c372:	88a9      	ldrh	r1, [r5, #4]
    c374:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c378:	2904      	cmp	r1, #4
    c37a:	d868      	bhi.n	c44e <usb_isr+0x76a>
    c37c:	886a      	ldrh	r2, [r5, #2]
    c37e:	2a00      	cmp	r2, #0
    c380:	d165      	bne.n	c44e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    c382:	48b6      	ldr	r0, [pc, #728]	; (c65c <usb_isr+0x978>)
    c384:	f8cd e004 	str.w	lr, [sp, #4]
    c388:	0089      	lsls	r1, r1, #2
    c38a:	4408      	add	r0, r1
    c38c:	7801      	ldrb	r1, [r0, #0]
    c38e:	f041 0102 	orr.w	r1, r1, #2
    c392:	7001      	strb	r1, [r0, #0]
    c394:	e721      	b.n	c1da <usb_isr+0x4f6>
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c396:	2301      	movs	r3, #1
    c398:	558b      	strb	r3, [r1, r6]
						break;
    c39a:	e4ed      	b.n	bd78 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    c39c:	2300      	movs	r3, #0
    c39e:	558b      	strb	r3, [r1, r6]
						break;
    c3a0:	e4ea      	b.n	bd78 <usb_isr+0x94>
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    c3a2:	f04f 0301 	mov.w	r3, #1
    c3a6:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    c3aa:	3501      	adds	r5, #1
    c3ac:	2d04      	cmp	r5, #4
    c3ae:	f106 0604 	add.w	r6, r6, #4
    c3b2:	f107 0704 	add.w	r7, r7, #4
    c3b6:	f108 0801 	add.w	r8, r8, #1
    c3ba:	f47f aea1 	bne.w	c100 <usb_isr+0x41c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c3be:	4ca9      	ldr	r4, [pc, #676]	; (c664 <usb_isr+0x980>)
			*reg = epconf;
    c3c0:	4ba9      	ldr	r3, [pc, #676]	; (c668 <usb_isr+0x984>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c3c2:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    c3c4:	4da9      	ldr	r5, [pc, #676]	; (c66c <usb_isr+0x988>)
    c3c6:	9f04      	ldr	r7, [sp, #16]
    c3c8:	9e05      	ldr	r6, [sp, #20]
    c3ca:	2100      	movs	r1, #0
    c3cc:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c3ce:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c3d0:	0713      	lsls	r3, r2, #28
    c3d2:	f100 8105 	bmi.w	c5e0 <usb_isr+0x8fc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c3d6:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    c3d8:	49a5      	ldr	r1, [pc, #660]	; (c670 <usb_isr+0x98c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c3da:	f8df 82a0 	ldr.w	r8, [pc, #672]	; c67c <usb_isr+0x998>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c3de:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c3e0:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c3e2:	f04f 0100 	mov.w	r1, #0
    c3e6:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    c3ea:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c3ee:	f100 80e0 	bmi.w	c5b2 <usb_isr+0x8ce>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c3f2:	49a0      	ldr	r1, [pc, #640]	; (c674 <usb_isr+0x990>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c3f4:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    c3f6:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c3f8:	2100      	movs	r1, #0
    c3fa:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    c3fe:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c402:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c404:	f8df 8274 	ldr.w	r8, [pc, #628]	; c67c <usb_isr+0x998>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c408:	f100 8101 	bmi.w	c60e <usb_isr+0x92a>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    c40c:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    c40e:	499a      	ldr	r1, [pc, #616]	; (c678 <usb_isr+0x994>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c410:	4c9a      	ldr	r4, [pc, #616]	; (c67c <usb_isr+0x998>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    c412:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c414:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c416:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c418:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    c41c:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    c420:	f100 80b0 	bmi.w	c584 <usb_isr+0x8a0>
    c424:	7833      	ldrb	r3, [r6, #0]
    c426:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    c428:	2100      	movs	r1, #0
    c42a:	f083 0201 	eor.w	r2, r3, #1
    c42e:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    c432:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
    c436:	e6d0      	b.n	c1da <usb_isr+0x4f6>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    c438:	f04f 0300 	mov.w	r3, #0
    c43c:	f888 3000 	strb.w	r3, [r8]
    c440:	e7b3      	b.n	c3aa <usb_isr+0x6c6>
    c442:	88a9      	ldrh	r1, [r5, #4]
    c444:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c448:	2904      	cmp	r1, #4
    c44a:	f240 808d 	bls.w	c568 <usb_isr+0x884>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    c44e:	4a83      	ldr	r2, [pc, #524]	; (c65c <usb_isr+0x978>)
    c450:	230f      	movs	r3, #15
    c452:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    c454:	4a8a      	ldr	r2, [pc, #552]	; (c680 <usb_isr+0x99c>)
    c456:	2301      	movs	r3, #1
    c458:	7013      	strb	r3, [r2, #0]
    c45a:	e552      	b.n	bf02 <usb_isr+0x21e>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    c45c:	2840      	cmp	r0, #64	; 0x40
    c45e:	f67f aee2 	bls.w	c226 <usb_isr+0x542>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c462:	f044 0402 	orr.w	r4, r4, #2
    c466:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    c46a:	9e02      	ldr	r6, [sp, #8]
    c46c:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c46e:	b1ba      	cbz	r2, c4a0 <usb_isr+0x7bc>
	ep0_tx_data_toggle ^= 1;
    c470:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c474:	4a83      	ldr	r2, [pc, #524]	; (c684 <usb_isr+0x9a0>)
	ep0_tx_data_toggle ^= 1;
    c476:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c478:	4633      	mov	r3, r6
    c47a:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c47c:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c480:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c482:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    c486:	e6e7      	b.n	c258 <usb_isr+0x574>
	ep0_tx_data_toggle ^= 1;
    c488:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c48c:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c48e:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c490:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c492:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c494:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c498:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c49a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    c49e:	e6d8      	b.n	c252 <usb_isr+0x56e>
	ep0_tx_data_toggle ^= 1;
    c4a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    c4a4:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c4a6:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c4a8:	4a77      	ldr	r2, [pc, #476]	; (c688 <usb_isr+0x9a4>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    c4aa:	f888 5000 	strb.w	r5, [r8]
    c4ae:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    c4b0:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c4b2:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    c4b6:	e6cf      	b.n	c258 <usb_isr+0x574>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    c4b8:	f019 0f08 	tst.w	r9, #8
    c4bc:	bf0c      	ite	eq
    c4be:	2302      	moveq	r3, #2
    c4c0:	2303      	movne	r3, #3
    c4c2:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    c4c4:	e458      	b.n	bd78 <usb_isr+0x94>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    c4c6:	4a71      	ldr	r2, [pc, #452]	; (c68c <usb_isr+0x9a8>)
    c4c8:	210f      	movs	r1, #15
    c4ca:	7011      	strb	r1, [r2, #0]
    c4cc:	e660      	b.n	c190 <usb_isr+0x4ac>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    c4ce:	4a70      	ldr	r2, [pc, #448]	; (c690 <usb_isr+0x9ac>)
    c4d0:	6854      	ldr	r4, [r2, #4]
    c4d2:	2c00      	cmp	r4, #0
    c4d4:	d0bb      	beq.n	c44e <usb_isr+0x76a>
    c4d6:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c4d8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    c4dc:	e003      	b.n	c4e6 <usb_isr+0x802>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    c4de:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    c4e0:	6854      	ldr	r4, [r2, #4]
    c4e2:	2c00      	cmp	r4, #0
    c4e4:	d0b3      	beq.n	c44e <usb_isr+0x76a>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    c4e6:	8813      	ldrh	r3, [r2, #0]
    c4e8:	4283      	cmp	r3, r0
    c4ea:	d1f8      	bne.n	c4de <usb_isr+0x7fa>
    c4ec:	8853      	ldrh	r3, [r2, #2]
    c4ee:	4573      	cmp	r3, lr
    c4f0:	d1f5      	bne.n	c4de <usb_isr+0x7fa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    c4f2:	0a00      	lsrs	r0, r0, #8
    c4f4:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    c4f6:	bf0c      	ite	eq
    c4f8:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    c4fc:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    c500:	e003      	b.n	c50a <usb_isr+0x826>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    c502:	4a64      	ldr	r2, [pc, #400]	; (c694 <usb_isr+0x9b0>)
    c504:	4c64      	ldr	r4, [pc, #400]	; (c698 <usb_isr+0x9b4>)
    c506:	7812      	ldrb	r2, [r2, #0]
    c508:	7022      	strb	r2, [r4, #0]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c50a:	88e8      	ldrh	r0, [r5, #6]
    c50c:	4570      	cmp	r0, lr
    c50e:	f080 813f 	bcs.w	c790 <usb_isr+0xaac>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    c512:	4962      	ldr	r1, [pc, #392]	; (c69c <usb_isr+0x9b8>)
    c514:	780d      	ldrb	r5, [r1, #0]
    c516:	2840      	cmp	r0, #64	; 0x40
    c518:	4684      	mov	ip, r0
    c51a:	f045 0e02 	orr.w	lr, r5, #2
    c51e:	bf28      	it	cs
    c520:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    c524:	eb04 030c 	add.w	r3, r4, ip
    c528:	eb09 02ce 	add.w	r2, r9, lr, lsl #3
    c52c:	9302      	str	r3, [sp, #8]
    c52e:	2301      	movs	r3, #1
    c530:	6054      	str	r4, [r2, #4]
    c532:	ebcc 0000 	rsb	r0, ip, r0
    c536:	ea4f 480c 	mov.w	r8, ip, lsl #16
    c53a:	2200      	movs	r2, #0
    c53c:	9301      	str	r3, [sp, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    c53e:	24c8      	movs	r4, #200	; 0xc8
    c540:	e65e      	b.n	c200 <usb_isr+0x51c>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c542:	4c55      	ldr	r4, [pc, #340]	; (c698 <usb_isr+0x9b4>)
		reply_buffer[1] = 0;
		datalen = 2;
    c544:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    c548:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    c54a:	7062      	strb	r2, [r4, #1]
    c54c:	e7dd      	b.n	c50a <usb_isr+0x826>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    c54e:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    c552:	f47f af7c 	bne.w	c44e <usb_isr+0x76a>
    c556:	2301      	movs	r3, #1
    c558:	2200      	movs	r2, #0
    c55a:	9301      	str	r3, [sp, #4]
    c55c:	e63d      	b.n	c1da <usb_isr+0x4f6>
    c55e:	f242 3221 	movw	r2, #8993	; 0x2321
    c562:	4291      	cmp	r1, r2
    c564:	d0f7      	beq.n	c556 <usb_isr+0x872>
    c566:	e772      	b.n	c44e <usb_isr+0x76a>
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    c568:	886a      	ldrh	r2, [r5, #2]
    c56a:	2a00      	cmp	r2, #0
    c56c:	f47f af6f 	bne.w	c44e <usb_isr+0x76a>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    c570:	483a      	ldr	r0, [pc, #232]	; (c65c <usb_isr+0x978>)
    c572:	f8cd e004 	str.w	lr, [sp, #4]
    c576:	0089      	lsls	r1, r1, #2
    c578:	4408      	add	r0, r1
    c57a:	7801      	ldrb	r1, [r0, #0]
    c57c:	f021 0102 	bic.w	r1, r1, #2
    c580:	7001      	strb	r1, [r0, #0]
    c582:	e62a      	b.n	c1da <usb_isr+0x4f6>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c584:	f000 f982 	bl	c88c <usb_malloc>
				if (p) {
    c588:	2800      	cmp	r0, #0
    c58a:	f000 80ef 	beq.w	c76c <usb_isr+0xa88>
					table[index(i, RX, EVEN)].addr = p->buf;
    c58e:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c590:	4a3d      	ldr	r2, [pc, #244]	; (c688 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c592:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c596:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c59a:	f000 f977 	bl	c88c <usb_malloc>
				if (p) {
    c59e:	2800      	cmp	r0, #0
    c5a0:	f000 80de 	beq.w	c760 <usb_isr+0xa7c>
					table[index(i, RX, ODD)].addr = p->buf;
    c5a4:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c5a6:	4a37      	ldr	r2, [pc, #220]	; (c684 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c5a8:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c5ac:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    c5b0:	e738      	b.n	c424 <usb_isr+0x740>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c5b2:	f000 f96b 	bl	c88c <usb_malloc>
				if (p) {
    c5b6:	2800      	cmp	r0, #0
    c5b8:	f000 80c0 	beq.w	c73c <usb_isr+0xa58>
					table[index(i, RX, EVEN)].addr = p->buf;
    c5bc:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c5be:	4a32      	ldr	r2, [pc, #200]	; (c688 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c5c0:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c5c4:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c5c8:	f000 f960 	bl	c88c <usb_malloc>
				if (p) {
    c5cc:	2800      	cmp	r0, #0
    c5ce:	f000 80af 	beq.w	c730 <usb_isr+0xa4c>
					table[index(i, RX, ODD)].addr = p->buf;
    c5d2:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c5d4:	4a2b      	ldr	r2, [pc, #172]	; (c684 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c5d6:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c5da:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    c5de:	e708      	b.n	c3f2 <usb_isr+0x70e>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c5e0:	f000 f954 	bl	c88c <usb_malloc>
				if (p) {
    c5e4:	2800      	cmp	r0, #0
    c5e6:	f000 80cd 	beq.w	c784 <usb_isr+0xaa0>
					table[index(i, RX, EVEN)].addr = p->buf;
    c5ea:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c5ec:	4a26      	ldr	r2, [pc, #152]	; (c688 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c5ee:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c5f2:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c5f6:	f000 f949 	bl	c88c <usb_malloc>
				if (p) {
    c5fa:	2800      	cmp	r0, #0
    c5fc:	f000 80bc 	beq.w	c778 <usb_isr+0xa94>
					table[index(i, RX, ODD)].addr = p->buf;
    c600:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c602:	4a20      	ldr	r2, [pc, #128]	; (c684 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c604:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c608:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    c60c:	e6e3      	b.n	c3d6 <usb_isr+0x6f2>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    c60e:	f000 f93d 	bl	c88c <usb_malloc>
				if (p) {
    c612:	2800      	cmp	r0, #0
    c614:	f000 809e 	beq.w	c754 <usb_isr+0xa70>
					table[index(i, RX, EVEN)].addr = p->buf;
    c618:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c61a:	4a1b      	ldr	r2, [pc, #108]	; (c688 <usb_isr+0x9a4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    c61c:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    c620:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    c624:	f000 f932 	bl	c88c <usb_malloc>
				if (p) {
    c628:	2800      	cmp	r0, #0
    c62a:	f000 808d 	beq.w	c748 <usb_isr+0xa64>
					table[index(i, RX, ODD)].addr = p->buf;
    c62e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c630:	4a14      	ldr	r2, [pc, #80]	; (c684 <usb_isr+0x9a0>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    c632:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    c636:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    c63a:	e6e7      	b.n	c40c <usb_isr+0x728>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    c63c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    c63e:	3808      	subs	r0, #8
    c640:	f000 f944 	bl	c8cc <usb_free>
    c644:	e504      	b.n	c050 <usb_isr+0x36c>
    c646:	6b48      	ldr	r0, [r1, #52]	; 0x34
    c648:	3808      	subs	r0, #8
    c64a:	f000 f93f 	bl	c8cc <usb_free>
    c64e:	e4f9      	b.n	c044 <usb_isr+0x360>
    c650:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    c652:	3808      	subs	r0, #8
    c654:	f000 f93a 	bl	c8cc <usb_free>
    c658:	e4ee      	b.n	c038 <usb_isr+0x354>
    c65a:	bf00      	nop
    c65c:	400720c0 	.word	0x400720c0
    c660:	40072080 	.word	0x40072080
    c664:	000116a0 	.word	0x000116a0
    c668:	400720c4 	.word	0x400720c4
    c66c:	1fffa9d1 	.word	0x1fffa9d1
    c670:	400720c8 	.word	0x400720c8
    c674:	400720cc 	.word	0x400720cc
    c678:	400720d0 	.word	0x400720d0
    c67c:	1fff8000 	.word	0x1fff8000
    c680:	40072094 	.word	0x40072094
    c684:	004000c8 	.word	0x004000c8
    c688:	00400088 	.word	0x00400088
    c68c:	1fffa965 	.word	0x1fffa965
    c690:	000116a4 	.word	0x000116a4
    c694:	1fffa9dc 	.word	0x1fffa9dc
    c698:	1fffa9d4 	.word	0x1fffa9d4
    c69c:	1fffa9d0 	.word	0x1fffa9d0
    c6a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c6a2:	3808      	subs	r0, #8
    c6a4:	f000 f912 	bl	c8cc <usb_free>
    c6a8:	e4c0      	b.n	c02c <usb_isr+0x348>
    c6aa:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    c6ac:	3808      	subs	r0, #8
    c6ae:	f000 f90d 	bl	c8cc <usb_free>
    c6b2:	e4fd      	b.n	c0b0 <usb_isr+0x3cc>
    c6b4:	6f48      	ldr	r0, [r1, #116]	; 0x74
    c6b6:	3808      	subs	r0, #8
    c6b8:	f000 f908 	bl	c8cc <usb_free>
    c6bc:	e4f2      	b.n	c0a4 <usb_isr+0x3c0>
    c6be:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    c6c0:	3808      	subs	r0, #8
    c6c2:	f000 f903 	bl	c8cc <usb_free>
    c6c6:	e4e7      	b.n	c098 <usb_isr+0x3b4>
    c6c8:	6e48      	ldr	r0, [r1, #100]	; 0x64
    c6ca:	3808      	subs	r0, #8
    c6cc:	f000 f8fe 	bl	c8cc <usb_free>
    c6d0:	e4dc      	b.n	c08c <usb_isr+0x3a8>
    c6d2:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    c6d4:	3808      	subs	r0, #8
    c6d6:	f000 f8f9 	bl	c8cc <usb_free>
    c6da:	e4d1      	b.n	c080 <usb_isr+0x39c>
    c6dc:	6d48      	ldr	r0, [r1, #84]	; 0x54
    c6de:	3808      	subs	r0, #8
    c6e0:	f000 f8f4 	bl	c8cc <usb_free>
    c6e4:	e4c6      	b.n	c074 <usb_isr+0x390>
    c6e6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    c6e8:	3808      	subs	r0, #8
    c6ea:	f000 f8ef 	bl	c8cc <usb_free>
    c6ee:	e4bb      	b.n	c068 <usb_isr+0x384>
    c6f0:	6c48      	ldr	r0, [r1, #68]	; 0x44
    c6f2:	3808      	subs	r0, #8
    c6f4:	f000 f8ea 	bl	c8cc <usb_free>
    c6f8:	e4b0      	b.n	c05c <usb_isr+0x378>
    c6fa:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    c6fe:	3808      	subs	r0, #8
    c700:	f000 f8e4 	bl	c8cc <usb_free>
    c704:	e4ec      	b.n	c0e0 <usb_isr+0x3fc>
    c706:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    c70a:	3808      	subs	r0, #8
    c70c:	f000 f8de 	bl	c8cc <usb_free>
    c710:	e4e0      	b.n	c0d4 <usb_isr+0x3f0>
    c712:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    c716:	3808      	subs	r0, #8
    c718:	f000 f8d8 	bl	c8cc <usb_free>
    c71c:	e4d4      	b.n	c0c8 <usb_isr+0x3e4>
    c71e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    c722:	3808      	subs	r0, #8
    c724:	f000 f8d2 	bl	c8cc <usb_free>
    c728:	e4c8      	b.n	c0bc <usb_isr+0x3d8>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    c72a:	f04f 0e02 	mov.w	lr, #2
    c72e:	e6ec      	b.n	c50a <usb_isr+0x826>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c730:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c732:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    c736:	3201      	adds	r2, #1
    c738:	702a      	strb	r2, [r5, #0]
    c73a:	e65a      	b.n	c3f2 <usb_isr+0x70e>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c73c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c73e:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    c742:	3201      	adds	r2, #1
    c744:	702a      	strb	r2, [r5, #0]
    c746:	e73f      	b.n	c5c8 <usb_isr+0x8e4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c748:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c74a:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    c74e:	3201      	adds	r2, #1
    c750:	702a      	strb	r2, [r5, #0]
    c752:	e65b      	b.n	c40c <usb_isr+0x728>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c754:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c756:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    c75a:	3201      	adds	r2, #1
    c75c:	702a      	strb	r2, [r5, #0]
    c75e:	e761      	b.n	c624 <usb_isr+0x940>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c760:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c762:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    c766:	3201      	adds	r2, #1
    c768:	702a      	strb	r2, [r5, #0]
    c76a:	e65b      	b.n	c424 <usb_isr+0x740>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c76c:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c76e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    c772:	3201      	adds	r2, #1
    c774:	702a      	strb	r2, [r5, #0]
    c776:	e710      	b.n	c59a <usb_isr+0x8b6>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    c778:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    c77a:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    c77e:	3201      	adds	r2, #1
    c780:	702a      	strb	r2, [r5, #0]
    c782:	e628      	b.n	c3d6 <usb_isr+0x6f2>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    c784:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    c786:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    c78a:	3201      	adds	r2, #1
    c78c:	702a      	strb	r2, [r5, #0]
    c78e:	e732      	b.n	c5f6 <usb_isr+0x912>
    c790:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    c794:	46f4      	mov	ip, lr
    c796:	bf28      	it	cs
    c798:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    c79c:	eb04 030c 	add.w	r3, r4, ip
    c7a0:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    c7a2:	2301      	movs	r3, #1
    c7a4:	ebcc 000e 	rsb	r0, ip, lr
    c7a8:	ea4f 480c 	mov.w	r8, ip, lsl #16
    c7ac:	2200      	movs	r2, #0
    c7ae:	9301      	str	r3, [sp, #4]
    c7b0:	e518      	b.n	c1e4 <usb_isr+0x500>
    c7b2:	bf00      	nop

0000c7b4 <usb_init>:
}



void usb_init(void)
{
    c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    c7b6:	f000 fe4d 	bl	d454 <usb_init_serialnumber>

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7ba:	4b29      	ldr	r3, [pc, #164]	; (c860 <usb_init+0xac>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c7bc:	4829      	ldr	r0, [pc, #164]	; (c864 <usb_init+0xb0>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c7be:	4c2a      	ldr	r4, [pc, #168]	; (c868 <usb_init+0xb4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c7c0:	4f2a      	ldr	r7, [pc, #168]	; (c86c <usb_init+0xb8>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c7c2:	4d2b      	ldr	r5, [pc, #172]	; (c870 <usb_init+0xbc>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c7c4:	f8df c0bc 	ldr.w	ip, [pc, #188]	; c884 <usb_init+0xd0>
	USB0_ERRSTAT = 0xFF;
    c7c8:	f8df e0bc 	ldr.w	lr, [pc, #188]	; c888 <usb_init+0xd4>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c7cc:	4e29      	ldr	r6, [pc, #164]	; (c874 <usb_init+0xc0>)
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7ce:	2200      	movs	r2, #0
    c7d0:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    c7d2:	605a      	str	r2, [r3, #4]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7d4:	609a      	str	r2, [r3, #8]
		table[i].addr = 0;
    c7d6:	60da      	str	r2, [r3, #12]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7d8:	611a      	str	r2, [r3, #16]
		table[i].addr = 0;
    c7da:	615a      	str	r2, [r3, #20]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7dc:	619a      	str	r2, [r3, #24]
		table[i].addr = 0;
    c7de:	61da      	str	r2, [r3, #28]
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7e0:	621a      	str	r2, [r3, #32]
		table[i].addr = 0;
    c7e2:	625a      	str	r2, [r3, #36]	; 0x24
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7e4:	629a      	str	r2, [r3, #40]	; 0x28
		table[i].addr = 0;
    c7e6:	62da      	str	r2, [r3, #44]	; 0x2c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7e8:	631a      	str	r2, [r3, #48]	; 0x30
		table[i].addr = 0;
    c7ea:	635a      	str	r2, [r3, #52]	; 0x34
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7ec:	639a      	str	r2, [r3, #56]	; 0x38
		table[i].addr = 0;
    c7ee:	63da      	str	r2, [r3, #60]	; 0x3c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7f0:	641a      	str	r2, [r3, #64]	; 0x40
		table[i].addr = 0;
    c7f2:	645a      	str	r2, [r3, #68]	; 0x44
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7f4:	649a      	str	r2, [r3, #72]	; 0x48
		table[i].addr = 0;
    c7f6:	64da      	str	r2, [r3, #76]	; 0x4c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7f8:	651a      	str	r2, [r3, #80]	; 0x50
		table[i].addr = 0;
    c7fa:	655a      	str	r2, [r3, #84]	; 0x54
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c7fc:	659a      	str	r2, [r3, #88]	; 0x58
		table[i].addr = 0;
    c7fe:	65da      	str	r2, [r3, #92]	; 0x5c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c800:	661a      	str	r2, [r3, #96]	; 0x60
		table[i].addr = 0;
    c802:	665a      	str	r2, [r3, #100]	; 0x64
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c804:	669a      	str	r2, [r3, #104]	; 0x68
		table[i].addr = 0;
    c806:	66da      	str	r2, [r3, #108]	; 0x6c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c808:	671a      	str	r2, [r3, #112]	; 0x70
		table[i].addr = 0;
    c80a:	675a      	str	r2, [r3, #116]	; 0x74
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c80c:	679a      	str	r2, [r3, #120]	; 0x78
		table[i].addr = 0;
    c80e:	67da      	str	r2, [r3, #124]	; 0x7c
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    c810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c814:	6801      	ldr	r1, [r0, #0]

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
		table[i].addr = 0;
    c816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c81a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    c81e:	6001      	str	r1, [r0, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c820:	f3c3 2107 	ubfx	r1, r3, #8, #8
    c824:	7021      	strb	r1, [r4, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c826:	f3c3 4007 	ubfx	r0, r3, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    c82a:	4913      	ldr	r1, [pc, #76]	; (c878 <usb_init+0xc4>)
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c82c:	7038      	strb	r0, [r7, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c82e:	0e1b      	lsrs	r3, r3, #24
    c830:	702b      	strb	r3, [r5, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    c832:	23ff      	movs	r3, #255	; 0xff
    c834:	f88c 3000 	strb.w	r3, [ip]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c838:	4d10      	ldr	r5, [pc, #64]	; (c87c <usb_init+0xc8>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    c83a:	f88e 3000 	strb.w	r3, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c83e:	4810      	ldr	r0, [pc, #64]	; (c880 <usb_init+0xcc>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    c840:	700b      	strb	r3, [r1, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    c842:	2301      	movs	r3, #1
    c844:	7033      	strb	r3, [r6, #0]
	USB0_USBCTRL = 0;
    c846:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c84a:	2670      	movs	r6, #112	; 0x70
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c84c:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c850:	2210      	movs	r2, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    c852:	f807 3c2c 	strb.w	r3, [r7, #-44]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c856:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c858:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c85a:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
    c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c860:	1fff8000 	.word	0x1fff8000
    c864:	40048034 	.word	0x40048034
    c868:	4007209c 	.word	0x4007209c
    c86c:	400720b0 	.word	0x400720b0
    c870:	400720b4 	.word	0x400720b4
    c874:	40072094 	.word	0x40072094
    c878:	40072010 	.word	0x40072010
    c87c:	e000e449 	.word	0xe000e449
    c880:	e000e108 	.word	0xe000e108
    c884:	40072080 	.word	0x40072080
    c888:	40072088 	.word	0x40072088

0000c88c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    c88c:	b672      	cpsid	i
	avail = usb_buffer_available;
    c88e:	480d      	ldr	r0, [pc, #52]	; (c8c4 <usb_malloc+0x38>)
    c890:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    c892:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    c896:	2b0b      	cmp	r3, #11
    c898:	dc10      	bgt.n	c8bc <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    c89a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    c89e:	40d9      	lsrs	r1, r3
    c8a0:	ea22 0201 	bic.w	r2, r2, r1
    c8a4:	6002      	str	r2, [r0, #0]
	__enable_irq();
    c8a6:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    c8a8:	4807      	ldr	r0, [pc, #28]	; (c8c8 <usb_malloc+0x3c>)
    c8aa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    c8ae:	00db      	lsls	r3, r3, #3
    c8b0:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    c8b2:	2100      	movs	r1, #0
    c8b4:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    c8b6:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    c8b8:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    c8ba:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    c8bc:	b662      	cpsie	i
		return NULL;
    c8be:	2000      	movs	r0, #0
    c8c0:	4770      	bx	lr
    c8c2:	bf00      	nop
    c8c4:	1fff8788 	.word	0x1fff8788
    c8c8:	1fff83bc 	.word	0x1fff83bc

0000c8cc <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c8cc:	4b0d      	ldr	r3, [pc, #52]	; (c904 <usb_free+0x38>)
    c8ce:	4a0e      	ldr	r2, [pc, #56]	; (c908 <usb_free+0x3c>)
    c8d0:	1ac3      	subs	r3, r0, r3
    c8d2:	fba2 2303 	umull	r2, r3, r2, r3
    c8d6:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    c8d8:	2b0b      	cmp	r3, #11
    c8da:	d80c      	bhi.n	c8f6 <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c8dc:	4a0b      	ldr	r2, [pc, #44]	; (c90c <usb_free+0x40>)
    c8de:	7812      	ldrb	r2, [r2, #0]
    c8e0:	b952      	cbnz	r2, c8f8 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    c8e2:	b672      	cpsid	i
	usb_buffer_available |= mask;
    c8e4:	480a      	ldr	r0, [pc, #40]	; (c910 <usb_free+0x44>)
    c8e6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    c8ea:	6802      	ldr	r2, [r0, #0]
    c8ec:	fa21 f303 	lsr.w	r3, r1, r3
    c8f0:	431a      	orrs	r2, r3
    c8f2:	6002      	str	r2, [r0, #0]
	__enable_irq();
    c8f4:	b662      	cpsie	i
    c8f6:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c8f8:	4a06      	ldr	r2, [pc, #24]	; (c914 <usb_free+0x48>)
    c8fa:	7812      	ldrb	r2, [r2, #0]
    c8fc:	2a00      	cmp	r2, #0
    c8fe:	d0f0      	beq.n	c8e2 <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    c900:	f7ff b94a 	b.w	bb98 <usb_rx_memory>
    c904:	1fff83bc 	.word	0x1fff83bc
    c908:	38e38e39 	.word	0x38e38e39
    c90c:	1fffa9d1 	.word	0x1fffa9d1
    c910:	1fff8788 	.word	0x1fff8788
    c914:	1fffa9dc 	.word	0x1fffa9dc

0000c918 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c918:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c91a:	4d0f      	ldr	r5, [pc, #60]	; (c958 <usb_serial_getchar+0x40>)
    c91c:	6828      	ldr	r0, [r5, #0]
    c91e:	b178      	cbz	r0, c940 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c920:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c922:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c924:	18c1      	adds	r1, r0, r3
    c926:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    c928:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    c92a:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    c92c:	d202      	bcs.n	c934 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c92e:	8043      	strh	r3, [r0, #2]
	}
	return c;
    c930:	4620      	mov	r0, r4
}
    c932:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    c934:	f7ff ffca 	bl	c8cc <usb_free>
		rx_packet = NULL;
    c938:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    c93a:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c93c:	602b      	str	r3, [r5, #0]
    c93e:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c940:	4b06      	ldr	r3, [pc, #24]	; (c95c <usb_serial_getchar+0x44>)
    c942:	781b      	ldrb	r3, [r3, #0]
    c944:	b12b      	cbz	r3, c952 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c946:	2003      	movs	r0, #3
    c948:	f7ff f8f2 	bl	bb30 <usb_rx>
    c94c:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    c94e:	2800      	cmp	r0, #0
    c950:	d1e6      	bne.n	c920 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c952:	f04f 30ff 	mov.w	r0, #4294967295
    c956:	bd38      	pop	{r3, r4, r5, pc}
    c958:	1fffa9f0 	.word	0x1fffa9f0
    c95c:	1fffa9dc 	.word	0x1fffa9dc

0000c960 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c960:	b510      	push	{r4, lr}
	if (!rx_packet) {
    c962:	4c09      	ldr	r4, [pc, #36]	; (c988 <usb_serial_peekchar+0x28>)
    c964:	6820      	ldr	r0, [r4, #0]
    c966:	b118      	cbz	r0, c970 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c968:	8843      	ldrh	r3, [r0, #2]
    c96a:	4418      	add	r0, r3
    c96c:	7a00      	ldrb	r0, [r0, #8]
}
    c96e:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c970:	4b06      	ldr	r3, [pc, #24]	; (c98c <usb_serial_peekchar+0x2c>)
    c972:	781b      	ldrb	r3, [r3, #0]
    c974:	b12b      	cbz	r3, c982 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c976:	2003      	movs	r0, #3
    c978:	f7ff f8da 	bl	bb30 <usb_rx>
    c97c:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c97e:	2800      	cmp	r0, #0
    c980:	d1f2      	bne.n	c968 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    c982:	f04f 30ff 	mov.w	r0, #4294967295
    c986:	bd10      	pop	{r4, pc}
    c988:	1fffa9f0 	.word	0x1fffa9f0
    c98c:	1fffa9dc 	.word	0x1fffa9dc

0000c990 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c990:	4b04      	ldr	r3, [pc, #16]	; (c9a4 <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c992:	4a05      	ldr	r2, [pc, #20]	; (c9a8 <usb_serial_available+0x18>)
    c994:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c996:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c998:	b11b      	cbz	r3, c9a2 <usb_serial_available+0x12>
    c99a:	881a      	ldrh	r2, [r3, #0]
    c99c:	885b      	ldrh	r3, [r3, #2]
    c99e:	1ad3      	subs	r3, r2, r3
    c9a0:	4418      	add	r0, r3
	return count;
}
    c9a2:	4770      	bx	lr
    c9a4:	1fffa9f0 	.word	0x1fffa9f0
    c9a8:	1fffaba8 	.word	0x1fffaba8

0000c9ac <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c9ac:	4b0b      	ldr	r3, [pc, #44]	; (c9dc <usb_serial_flush_input+0x30>)
    c9ae:	781b      	ldrb	r3, [r3, #0]
    c9b0:	b19b      	cbz	r3, c9da <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    c9b2:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    c9b4:	4c0a      	ldr	r4, [pc, #40]	; (c9e0 <usb_serial_flush_input+0x34>)
    c9b6:	6820      	ldr	r0, [r4, #0]
    c9b8:	b148      	cbz	r0, c9ce <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c9ba:	f7ff ff87 	bl	c8cc <usb_free>
		rx_packet = NULL;
    c9be:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c9c0:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    c9c2:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c9c4:	f7ff f8b4 	bl	bb30 <usb_rx>
		if (!rx) break;
    c9c8:	b130      	cbz	r0, c9d8 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c9ca:	f7ff ff7f 	bl	c8cc <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c9ce:	2003      	movs	r0, #3
    c9d0:	f7ff f8ae 	bl	bb30 <usb_rx>
		if (!rx) break;
    c9d4:	2800      	cmp	r0, #0
    c9d6:	d1f8      	bne.n	c9ca <usb_serial_flush_input+0x1e>
    c9d8:	bd10      	pop	{r4, pc}
    c9da:	4770      	bx	lr
    c9dc:	1fffa9dc 	.word	0x1fffa9dc
    c9e0:	1fffa9f0 	.word	0x1fffa9f0

0000c9e4 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c9e8:	f8df 90f8 	ldr.w	r9, [pc, #248]	; cae4 <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c9ec:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c9ee:	2201      	movs	r2, #1
    c9f0:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c9f4:	9101      	str	r1, [sp, #4]
    c9f6:	b369      	cbz	r1, ca54 <usb_serial_write+0x70>
    c9f8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; cae8 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c9fc:	4f36      	ldr	r7, [pc, #216]	; (cad8 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    c9fe:	9e01      	ldr	r6, [sp, #4]
    ca00:	4683      	mov	fp, r0
		if (!tx_packet) {
    ca02:	f8d8 0000 	ldr.w	r0, [r8]
    ca06:	b3b0      	cbz	r0, ca76 <usb_serial_write+0x92>
    ca08:	4d34      	ldr	r5, [pc, #208]	; (cadc <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    ca0a:	8844      	ldrh	r4, [r0, #2]
    ca0c:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    ca10:	42b1      	cmp	r1, r6
    ca12:	bf28      	it	cs
    ca14:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    ca16:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    ca1a:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    ca1c:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    ca20:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    ca22:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    ca24:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    ca28:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    ca2c:	b151      	cbz	r1, ca44 <usb_serial_write+0x60>
    ca2e:	3c01      	subs	r4, #1
    ca30:	4422      	add	r2, r4
    ca32:	4459      	add	r1, fp
    ca34:	f81b 4b01 	ldrb.w	r4, [fp], #1
    ca38:	f802 4f01 	strb.w	r4, [r2, #1]!
    ca3c:	458b      	cmp	fp, r1
    ca3e:	d1f9      	bne.n	ca34 <usb_serial_write+0x50>
    ca40:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    ca44:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    ca48:	d80b      	bhi.n	ca62 <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    ca4a:	4a25      	ldr	r2, [pc, #148]	; (cae0 <usb_serial_write+0xfc>)
    ca4c:	2105      	movs	r1, #5
    ca4e:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    ca50:	2e00      	cmp	r6, #0
    ca52:	d1d6      	bne.n	ca02 <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    ca54:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    ca56:	2300      	movs	r3, #0
    ca58:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    ca5c:	b003      	add	sp, #12
    ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    ca62:	2240      	movs	r2, #64	; 0x40
    ca64:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    ca66:	4601      	mov	r1, r0
    ca68:	2004      	movs	r0, #4
    ca6a:	f7ff f8f9 	bl	bc60 <usb_tx>
			tx_packet = NULL;
    ca6e:	2200      	movs	r2, #0
    ca70:	f8c8 2000 	str.w	r2, [r8]
    ca74:	e7e9      	b.n	ca4a <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    ca76:	783a      	ldrb	r2, [r7, #0]
    ca78:	b32a      	cbz	r2, cac6 <usb_serial_write+0xe2>
    ca7a:	4d18      	ldr	r5, [pc, #96]	; (cadc <usb_serial_write+0xf8>)
    ca7c:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    ca80:	f04f 0a01 	mov.w	sl, #1
    ca84:	e007      	b.n	ca96 <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    ca86:	3c01      	subs	r4, #1
    ca88:	d016      	beq.n	cab8 <usb_serial_write+0xd4>
    ca8a:	782a      	ldrb	r2, [r5, #0]
    ca8c:	b9a2      	cbnz	r2, cab8 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    ca8e:	f000 fac5 	bl	d01c <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    ca92:	783a      	ldrb	r2, [r7, #0]
    ca94:	b1ba      	cbz	r2, cac6 <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    ca96:	2004      	movs	r0, #4
    ca98:	f7ff f868 	bl	bb6c <usb_tx_packet_count>
    ca9c:	2807      	cmp	r0, #7
    ca9e:	d8f2      	bhi.n	ca86 <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    caa0:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    caa4:	f7ff fef2 	bl	c88c <usb_malloc>
    caa8:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    caac:	2800      	cmp	r0, #0
    caae:	d1ac      	bne.n	ca0a <usb_serial_write+0x26>
					tx_noautoflush = 0;
    cab0:	4b0c      	ldr	r3, [pc, #48]	; (cae4 <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    cab2:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    cab4:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    cab6:	d1e8      	bne.n	ca8a <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    cab8:	2301      	movs	r3, #1
					return -1;
    caba:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    cabe:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    cac0:	b003      	add	sp, #12
    cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    cac6:	2300      	movs	r3, #0
					return -1;
    cac8:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    cacc:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    cad0:	b003      	add	sp, #12
    cad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cad6:	bf00      	nop
    cad8:	1fffa9dc 	.word	0x1fffa9dc
    cadc:	1fffa9ec 	.word	0x1fffa9ec
    cae0:	1fffa9e4 	.word	0x1fffa9e4
    cae4:	1fffa9e5 	.word	0x1fffa9e5
    cae8:	1fffa9e8 	.word	0x1fffa9e8

0000caec <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    caec:	b500      	push	{lr}
    caee:	b083      	sub	sp, #12
    caf0:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    caf2:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    caf4:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    caf8:	4618      	mov	r0, r3
    cafa:	f7ff ff73 	bl	c9e4 <usb_serial_write>
}
    cafe:	b003      	add	sp, #12
    cb00:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb04 <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    cb04:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    cb06:	4d0e      	ldr	r5, [pc, #56]	; (cb40 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    cb08:	4c0e      	ldr	r4, [pc, #56]	; (cb44 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    cb0a:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    cb0c:	2301      	movs	r3, #1
    cb0e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    cb10:	b128      	cbz	r0, cb1e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    cb12:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    cb14:	2300      	movs	r3, #0
    cb16:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    cb18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    cb1c:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    cb1e:	4b0a      	ldr	r3, [pc, #40]	; (cb48 <usb_serial_write_buffer_free+0x44>)
    cb20:	781b      	ldrb	r3, [r3, #0]
    cb22:	b913      	cbnz	r3, cb2a <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    cb24:	2000      	movs	r0, #0
    cb26:	7020      	strb	r0, [r4, #0]
			return 0;
    cb28:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    cb2a:	2004      	movs	r0, #4
    cb2c:	f7ff f81e 	bl	bb6c <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    cb30:	2807      	cmp	r0, #7
    cb32:	d8f7      	bhi.n	cb24 <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    cb34:	f7ff feaa 	bl	c88c <usb_malloc>
    cb38:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    cb3a:	2800      	cmp	r0, #0
    cb3c:	d1e9      	bne.n	cb12 <usb_serial_write_buffer_free+0xe>
    cb3e:	e7f1      	b.n	cb24 <usb_serial_write_buffer_free+0x20>
    cb40:	1fffa9e8 	.word	0x1fffa9e8
    cb44:	1fffa9e5 	.word	0x1fffa9e5
    cb48:	1fffa9dc 	.word	0x1fffa9dc

0000cb4c <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    cb4e:	4b11      	ldr	r3, [pc, #68]	; (cb94 <usb_serial_flush_output+0x48>)
    cb50:	781b      	ldrb	r3, [r3, #0]
    cb52:	b18b      	cbz	r3, cb78 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    cb54:	4e10      	ldr	r6, [pc, #64]	; (cb98 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    cb56:	4d11      	ldr	r5, [pc, #68]	; (cb9c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    cb58:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    cb5a:	2701      	movs	r7, #1
    cb5c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    cb5e:	b164      	cbz	r4, cb7a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    cb60:	4a0f      	ldr	r2, [pc, #60]	; (cba0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    cb62:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    cb64:	2700      	movs	r7, #0
    cb66:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cb68:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    cb6a:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cb6c:	2004      	movs	r0, #4
    cb6e:	f7ff f877 	bl	bc60 <usb_tx>
		tx_packet = NULL;
    cb72:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    cb74:	2300      	movs	r3, #0
    cb76:	702b      	strb	r3, [r5, #0]
    cb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    cb7a:	f7ff fe87 	bl	c88c <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    cb7e:	4b08      	ldr	r3, [pc, #32]	; (cba0 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    cb80:	b128      	cbz	r0, cb8e <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    cb82:	4601      	mov	r1, r0
    cb84:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    cb86:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    cb88:	f7ff f86a 	bl	bc60 <usb_tx>
    cb8c:	e7f2      	b.n	cb74 <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    cb8e:	701f      	strb	r7, [r3, #0]
    cb90:	e7f0      	b.n	cb74 <usb_serial_flush_output+0x28>
    cb92:	bf00      	nop
    cb94:	1fffa9dc 	.word	0x1fffa9dc
    cb98:	1fffa9e8 	.word	0x1fffa9e8
    cb9c:	1fffa9e5 	.word	0x1fffa9e5
    cba0:	1fffa9e4 	.word	0x1fffa9e4

0000cba4 <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    cba4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    cba6:	4b0e      	ldr	r3, [pc, #56]	; (cbe0 <usb_serial_flush_callback+0x3c>)
    cba8:	781b      	ldrb	r3, [r3, #0]
    cbaa:	b973      	cbnz	r3, cbca <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    cbac:	4c0d      	ldr	r4, [pc, #52]	; (cbe4 <usb_serial_flush_callback+0x40>)
    cbae:	6821      	ldr	r1, [r4, #0]
    cbb0:	b161      	cbz	r1, cbcc <usb_serial_flush_callback+0x28>
    cbb2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    cbb6:	884b      	ldrh	r3, [r1, #2]
    cbb8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    cbba:	2004      	movs	r0, #4
    cbbc:	f7ff f850 	bl	bc60 <usb_tx>
		tx_packet = NULL;
    cbc0:	6025      	str	r5, [r4, #0]
    cbc2:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    cbc4:	4b08      	ldr	r3, [pc, #32]	; (cbe8 <usb_serial_flush_callback+0x44>)
    cbc6:	2201      	movs	r2, #1
    cbc8:	701a      	strb	r2, [r3, #0]
    cbca:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    cbcc:	f7ff fe5e 	bl	c88c <usb_malloc>
		if (tx) {
    cbd0:	2800      	cmp	r0, #0
    cbd2:	d0f7      	beq.n	cbc4 <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    cbd4:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    cbd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    cbda:	2004      	movs	r0, #4
    cbdc:	f7ff b840 	b.w	bc60 <usb_tx>
    cbe0:	1fffa9e5 	.word	0x1fffa9e5
    cbe4:	1fffa9e8 	.word	0x1fffa9e8
    cbe8:	1fffa9e4 	.word	0x1fffa9e4

0000cbec <EventResponder::triggerEventNotImmediate()>:
bool EventResponder::runningFromYield = false;

// TODO: interrupt disable/enable needed in many places!!!

void EventResponder::triggerEventNotImmediate()
{
    cbec:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cbee:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    cbf2:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    cbf4:	7f43      	ldrb	r3, [r0, #29]
    cbf6:	b933      	cbnz	r3, cc06 <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    cbf8:	7f01      	ldrb	r1, [r0, #28]
    cbfa:	2901      	cmp	r1, #1
    cbfc:	d007      	beq.n	cc0e <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    cbfe:	2903      	cmp	r1, #3
    cc00:	d00f      	beq.n	cc22 <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    cc02:	2301      	movs	r3, #1
    cc04:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cc06:	b902      	cbnz	r2, cc0a <EventResponder::triggerEventNotImmediate()+0x1e>
    cc08:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    cc0a:	bc10      	pop	{r4}
    cc0c:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    cc0e:	4c12      	ldr	r4, [pc, #72]	; (cc58 <EventResponder::triggerEventNotImmediate()+0x6c>)
    cc10:	6821      	ldr	r1, [r4, #0]
    cc12:	b1a1      	cbz	r1, cc3e <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    cc14:	4911      	ldr	r1, [pc, #68]	; (cc5c <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    cc16:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    cc18:	680b      	ldr	r3, [r1, #0]
    cc1a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    cc1c:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    cc1e:	6158      	str	r0, [r3, #20]
    cc20:	e7ef      	b.n	cc02 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    cc22:	4c0f      	ldr	r4, [pc, #60]	; (cc60 <EventResponder::triggerEventNotImmediate()+0x74>)
    cc24:	6821      	ldr	r1, [r4, #0]
    cc26:	b181      	cbz	r1, cc4a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    cc28:	490e      	ldr	r1, [pc, #56]	; (cc64 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    cc2a:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    cc2c:	680b      	ldr	r3, [r1, #0]
    cc2e:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    cc30:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    cc32:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    cc34:	4b0c      	ldr	r3, [pc, #48]	; (cc68 <EventResponder::triggerEventNotImmediate()+0x7c>)
    cc36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    cc3a:	6019      	str	r1, [r3, #0]
    cc3c:	e7e1      	b.n	cc02 <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    cc3e:	4b07      	ldr	r3, [pc, #28]	; (cc5c <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    cc40:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    cc42:	6181      	str	r1, [r0, #24]
				firstYield = this;
    cc44:	6020      	str	r0, [r4, #0]
				lastYield = this;
    cc46:	6018      	str	r0, [r3, #0]
    cc48:	e7db      	b.n	cc02 <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    cc4a:	4b06      	ldr	r3, [pc, #24]	; (cc64 <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    cc4c:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    cc4e:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    cc50:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    cc52:	6018      	str	r0, [r3, #0]
    cc54:	e7ee      	b.n	cc34 <EventResponder::triggerEventNotImmediate()+0x48>
    cc56:	bf00      	nop
    cc58:	1fffaa08 	.word	0x1fffaa08
    cc5c:	1fffaa04 	.word	0x1fffaa04
    cc60:	1fffa9f8 	.word	0x1fffa9f8
    cc64:	1fffa9fc 	.word	0x1fffa9fc
    cc68:	e000ed04 	.word	0xe000ed04

0000cc6c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    cc6c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    cc6e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    cc70:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    cc72:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    cc74:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    cc76:	d002      	beq.n	cc7e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    cc78:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    cc7a:	f7ff bfb7 	b.w	cbec <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cc7e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    cc80:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cc82:	4718      	bx	r3

0000cc84 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    cc84:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cc86:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    cc8a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    cc8c:	4c0c      	ldr	r4, [pc, #48]	; (ccc0 <EventResponder::runFromInterrupt()+0x3c>)
    cc8e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    cc90:	b180      	cbz	r0, ccb4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    cc92:	4e0c      	ldr	r6, [pc, #48]	; (ccc4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    cc94:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    cc96:	6943      	ldr	r3, [r0, #20]
    cc98:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    cc9a:	b173      	cbz	r3, ccba <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    cc9c:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    cc9e:	b902      	cbnz	r2, cca2 <EventResponder::runFromInterrupt()+0x1e>
    cca0:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    cca2:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    cca4:	6883      	ldr	r3, [r0, #8]
    cca6:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cca8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    ccac:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    ccae:	6820      	ldr	r0, [r4, #0]
		if (first) {
    ccb0:	2800      	cmp	r0, #0
    ccb2:	d1f0      	bne.n	cc96 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ccb4:	b902      	cbnz	r2, ccb8 <EventResponder::runFromInterrupt()+0x34>
    ccb6:	b662      	cpsie	i
    ccb8:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    ccba:	6033      	str	r3, [r6, #0]
    ccbc:	e7ef      	b.n	cc9e <EventResponder::runFromInterrupt()+0x1a>
    ccbe:	bf00      	nop
    ccc0:	1fffa9f8 	.word	0x1fffa9f8
    ccc4:	1fffa9fc 	.word	0x1fffa9fc

0000ccc8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    ccc8:	f7ff bfdc 	b.w	cc84 <EventResponder::runFromInterrupt()>

0000cccc <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    cccc:	4a18      	ldr	r2, [pc, #96]	; (cd30 <MillisTimer::addToActiveList()+0x64>)
	_state = TimerWaiting;
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
    ccce:	b430      	push	{r4, r5}
	if (listActive == nullptr) {
    ccd0:	6814      	ldr	r4, [r2, #0]
    ccd2:	2c00      	cmp	r4, #0
    ccd4:	d027      	beq.n	cd26 <MillisTimer::addToActiveList()+0x5a>
		// list is empty, easy case
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
    ccd6:	6803      	ldr	r3, [r0, #0]
    ccd8:	6821      	ldr	r1, [r4, #0]
    ccda:	428b      	cmp	r3, r1
    ccdc:	d20e      	bcs.n	ccfc <MillisTimer::addToActiveList()+0x30>
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    ccde:	1acb      	subs	r3, r1, r3
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
    cce0:	2100      	movs	r1, #0
		_next = nullptr;
		_prev = nullptr;
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
    cce2:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    cce4:	60c1      	str	r1, [r0, #12]
		listActive->_prev = this;
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    cce6:	6023      	str	r3, [r4, #0]
		listActive = this;
	} else if (_ms < listActive->_ms) {
		// this timer triggers before any on the list
		_next = listActive;
		_prev = nullptr;
		listActive->_prev = this;
    cce8:	60e0      	str	r0, [r4, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
		listActive = this;
    ccea:	6010      	str	r0, [r2, #0]
		_ms -= timer->_ms;
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
    ccec:	2302      	movs	r3, #2
    ccee:	7503      	strb	r3, [r0, #20]
}
    ccf0:	bc30      	pop	{r4, r5}
    ccf2:	4770      	bx	lr
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
    ccf4:	6811      	ldr	r1, [r2, #0]
    ccf6:	428b      	cmp	r3, r1
    ccf8:	4614      	mov	r4, r2
    ccfa:	d308      	bcc.n	cd0e <MillisTimer::addToActiveList()+0x42>
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    ccfc:	68a2      	ldr	r2, [r4, #8]
				_state = TimerActive;
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    ccfe:	1a5b      	subs	r3, r3, r1
    cd00:	6003      	str	r3, [r0, #0]
		listActive->_ms -= _ms;	
		listActive = this;
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    cd02:	2a00      	cmp	r2, #0
    cd04:	d1f6      	bne.n	ccf4 <MillisTimer::addToActiveList()+0x28>
				return;
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
		_next = nullptr;
    cd06:	6082      	str	r2, [r0, #8]
		_prev = timer;
    cd08:	60c4      	str	r4, [r0, #12]
		timer->_next = this;
    cd0a:	60a0      	str	r0, [r4, #8]
    cd0c:	e7ee      	b.n	ccec <MillisTimer::addToActiveList()+0x20>
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
    cd0e:	68d2      	ldr	r2, [r2, #12]
    cd10:	60c2      	str	r2, [r0, #12]
		while (timer->_next) {
			_ms -= timer->_ms;
			timer = timer->_next;
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
    cd12:	6084      	str	r4, [r0, #8]
				_prev = timer->_prev;
				timer->_prev = this;
    cd14:	60e0      	str	r0, [r4, #12]
				_prev->_next = this;
    cd16:	68c5      	ldr	r5, [r0, #12]
				timer->_ms -= _ms;
    cd18:	1acb      	subs	r3, r1, r3
				_state = TimerActive;
    cd1a:	2202      	movs	r2, #2
			if (_ms < timer->_ms) {
				// found the right place in the middle of list
				_next = timer;
				_prev = timer->_prev;
				timer->_prev = this;
				_prev->_next = this;
    cd1c:	60a8      	str	r0, [r5, #8]
				timer->_ms -= _ms;
    cd1e:	6023      	str	r3, [r4, #0]
				_state = TimerActive;
    cd20:	7502      	strb	r2, [r0, #20]
		_next = nullptr;
		_prev = timer;
		timer->_next = this;
	}
	_state = TimerActive;
}
    cd22:	bc30      	pop	{r4, r5}
    cd24:	4770      	bx	lr

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
		// list is empty, easy case
		_next = nullptr;
    cd26:	6084      	str	r4, [r0, #8]
		_prev = nullptr;
    cd28:	60c4      	str	r4, [r0, #12]
		listActive = this;
    cd2a:	6010      	str	r0, [r2, #0]
    cd2c:	e7de      	b.n	ccec <MillisTimer::addToActiveList()+0x20>
    cd2e:	bf00      	nop
    cd30:	1fffaa00 	.word	0x1fffaa00

0000cd34 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    cd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	MillisTimer *timer = listActive;
    cd36:	4e22      	ldr	r6, [pc, #136]	; (cdc0 <MillisTimer::runFromTimer()+0x8c>)
    cd38:	6834      	ldr	r4, [r6, #0]
	while (timer) {
    cd3a:	b32c      	cbz	r4, cd88 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    cd3c:	6823      	ldr	r3, [r4, #0]
    cd3e:	2b00      	cmp	r3, #0
    cd40:	d13a      	bne.n	cdb8 <MillisTimer::runFromTimer()+0x84>
    cd42:	4f20      	ldr	r7, [pc, #128]	; (cdc4 <MillisTimer::runFromTimer()+0x90>)
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    cd44:	461d      	mov	r5, r3
    cd46:	e004      	b.n	cd52 <MillisTimer::runFromTimer()+0x1e>
			event.triggerEvent(0, timer);
			if (timer->_reload) {
				timer->_ms = timer->_reload;
				timer->addToActiveList();
			}
			timer = listActive;
    cd48:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    cd4a:	b1ec      	cbz	r4, cd88 <MillisTimer::runFromTimer()+0x54>
		if (timer->_ms > 0) {
    cd4c:	6823      	ldr	r3, [r4, #0]
    cd4e:	2b00      	cmp	r3, #0
    cd50:	d132      	bne.n	cdb8 <MillisTimer::runFromTimer()+0x84>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
    cd52:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    cd54:	b103      	cbz	r3, cd58 <MillisTimer::runFromTimer()+0x24>
    cd56:	60dd      	str	r5, [r3, #12]
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
    cd58:	6920      	ldr	r0, [r4, #16]
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
    cd5a:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cd5c:	6803      	ldr	r3, [r0, #0]
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
    cd5e:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cd60:	681b      	ldr	r3, [r3, #0]
    cd62:	42bb      	cmp	r3, r7
    cd64:	d121      	bne.n	cdaa <MillisTimer::runFromTimer()+0x76>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    cd66:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    cd68:	6045      	str	r5, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    cd6a:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    cd6c:	60c4      	str	r4, [r0, #12]
		if (_type == EventTypeImmediate) {
    cd6e:	d020      	beq.n	cdb2 <MillisTimer::runFromTimer()+0x7e>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    cd70:	f7ff ff3c 	bl	cbec <EventResponder::triggerEventNotImmediate()>
			if (timer->_reload) {
    cd74:	6863      	ldr	r3, [r4, #4]
    cd76:	2b00      	cmp	r3, #0
    cd78:	d0e6      	beq.n	cd48 <MillisTimer::runFromTimer()+0x14>
				timer->_ms = timer->_reload;
    cd7a:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    cd7c:	4620      	mov	r0, r4
    cd7e:	f7ff ffa5 	bl	cccc <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    cd82:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    cd84:	2c00      	cmp	r4, #0
    cd86:	d1e1      	bne.n	cd4c <MillisTimer::runFromTimer()+0x18>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cd88:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    cd8c:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    cd8e:	4a0e      	ldr	r2, [pc, #56]	; (cdc8 <MillisTimer::runFromTimer()+0x94>)
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    cd90:	2100      	movs	r1, #0
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    cd92:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    cd94:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    cd96:	b903      	cbnz	r3, cd9a <MillisTimer::runFromTimer()+0x66>
    cd98:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    cd9a:	b128      	cbz	r0, cda8 <MillisTimer::runFromTimer()+0x74>
		MillisTimer *next = waiting->_next;
    cd9c:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    cd9e:	f7ff ff95 	bl	cccc <MillisTimer::addToActiveList()>
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    cda2:	4620      	mov	r0, r4
    cda4:	2800      	cmp	r0, #0
    cda6:	d1f9      	bne.n	cd9c <MillisTimer::runFromTimer()+0x68>
    cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
			listActive = next;
			timer->_state = TimerOff;
			EventResponderRef event = *(timer->_event);
			event.triggerEvent(0, timer);
    cdaa:	4622      	mov	r2, r4
    cdac:	2100      	movs	r1, #0
    cdae:	4798      	blx	r3
    cdb0:	e7e0      	b.n	cd74 <MillisTimer::runFromTimer()+0x40>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    cdb2:	6883      	ldr	r3, [r0, #8]
    cdb4:	4798      	blx	r3
    cdb6:	e7dd      	b.n	cd74 <MillisTimer::runFromTimer()+0x40>
void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
    cdb8:	3b01      	subs	r3, #1
    cdba:	6023      	str	r3, [r4, #0]
			break;
    cdbc:	e7e4      	b.n	cd88 <MillisTimer::runFromTimer()+0x54>
    cdbe:	bf00      	nop
    cdc0:	1fffaa00 	.word	0x1fffaa00
    cdc4:	0000cc6d 	.word	0x0000cc6d
    cdc8:	1fffaa10 	.word	0x1fffaa10

0000cdcc <systick_isr>:
// with libraries using mid-to-high priority interrupts.

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
	systick_millis_count++;
    cdcc:	4a02      	ldr	r2, [pc, #8]	; (cdd8 <systick_isr+0xc>)
    cdce:	6813      	ldr	r3, [r2, #0]
    cdd0:	3301      	adds	r3, #1
    cdd2:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    cdd4:	f7ff bfae 	b.w	cd34 <MillisTimer::runFromTimer()>
    cdd8:	1fffa8f8 	.word	0x1fffa8f8

0000cddc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    cddc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    cdde:	f7fc fdc3 	bl	9968 <setup>
	while (1) {
		loop();
    cde2:	f7fc feab 	bl	9b3c <loop>
		yield();
    cde6:	f000 f919 	bl	d01c <yield>
    cdea:	e7fa      	b.n	cde2 <main+0x6>

0000cdec <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    cdec:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    cdee:	4a06      	ldr	r2, [pc, #24]	; (ce08 <Print::println()+0x1c>)
	return write(buf, 2);
    cdf0:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    cdf2:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    cdf4:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    cdf6:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    cdf8:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    cdfa:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    cdfe:	2202      	movs	r2, #2
    ce00:	4798      	blx	r3
}
    ce02:	b003      	add	sp, #12
    ce04:	f85d fb04 	ldr.w	pc, [sp], #4
    ce08:	00011674 	.word	0x00011674

0000ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    ce0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce0e:	4607      	mov	r7, r0
    ce10:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    ce12:	2a00      	cmp	r2, #0
    ce14:	d033      	beq.n	ce7e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    ce16:	2a01      	cmp	r2, #1
    ce18:	bf08      	it	eq
    ce1a:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    ce1c:	b351      	cbz	r1, ce74 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    ce1e:	2421      	movs	r4, #33	; 0x21
    ce20:	e000      	b.n	ce24 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    ce22:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    ce24:	fbb1 f5f2 	udiv	r5, r1, r2
    ce28:	fb02 1115 	mls	r1, r2, r5, r1
    ce2c:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ce2e:	2909      	cmp	r1, #9
    ce30:	f100 0130 	add.w	r1, r0, #48	; 0x30
    ce34:	bf98      	it	ls
    ce36:	b2c8      	uxtbls	r0, r1
    ce38:	a90a      	add	r1, sp, #40	; 0x28
    ce3a:	bf88      	it	hi
    ce3c:	3037      	addhi	r0, #55	; 0x37
    ce3e:	4421      	add	r1, r4
    ce40:	bf88      	it	hi
    ce42:	b2c0      	uxtbhi	r0, r0
    ce44:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    ce48:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    ce4a:	4629      	mov	r1, r5
    ce4c:	2d00      	cmp	r5, #0
    ce4e:	d1e8      	bne.n	ce22 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    ce50:	b133      	cbz	r3, ce60 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    ce52:	3c01      	subs	r4, #1
    ce54:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    ce56:	ab0a      	add	r3, sp, #40	; 0x28
    ce58:	4423      	add	r3, r4
    ce5a:	222d      	movs	r2, #45	; 0x2d
    ce5c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    ce60:	683b      	ldr	r3, [r7, #0]
    ce62:	aa01      	add	r2, sp, #4
    ce64:	1911      	adds	r1, r2, r4
    ce66:	685b      	ldr	r3, [r3, #4]
    ce68:	4638      	mov	r0, r7
    ce6a:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    ce6e:	4798      	blx	r3
}
    ce70:	b00b      	add	sp, #44	; 0x2c
    ce72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    ce74:	2230      	movs	r2, #48	; 0x30
    ce76:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    ce7a:	2421      	movs	r4, #33	; 0x21
    ce7c:	e7e8      	b.n	ce50 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    ce7e:	6803      	ldr	r3, [r0, #0]
    ce80:	b2c9      	uxtb	r1, r1
    ce82:	681b      	ldr	r3, [r3, #0]
    ce84:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    ce86:	b00b      	add	sp, #44	; 0x2c
    ce88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ce8a:	bf00      	nop

0000ce8c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    ce8c:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    ce8e:	bfba      	itte	lt
    ce90:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    ce92:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    ce94:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    ce96:	220a      	movs	r2, #10
    ce98:	f7ff bfb8 	b.w	ce0c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000ce9c <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    ce9c:	b570      	push	{r4, r5, r6, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ce9e:	4d0e      	ldr	r5, [pc, #56]	; (ced8 <Stream::timedPeek()+0x3c>)
    cea0:	b082      	sub	sp, #8
    cea2:	682b      	ldr	r3, [r5, #0]
    cea4:	9300      	str	r3, [sp, #0]
	return ret;
    cea6:	9e00      	ldr	r6, [sp, #0]
    cea8:	4604      	mov	r4, r0
    ceaa:	e008      	b.n	cebe <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    ceac:	f000 f8b6 	bl	d01c <yield>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    ceb0:	682b      	ldr	r3, [r5, #0]
    ceb2:	9301      	str	r3, [sp, #4]
	return ret;
    ceb4:	9b01      	ldr	r3, [sp, #4]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    ceb6:	68a2      	ldr	r2, [r4, #8]
    ceb8:	1b9b      	subs	r3, r3, r6
    ceba:	4293      	cmp	r3, r2
    cebc:	d207      	bcs.n	cece <Stream::timedPeek()+0x32>
    c = peek();
    cebe:	6823      	ldr	r3, [r4, #0]
    cec0:	4620      	mov	r0, r4
    cec2:	699b      	ldr	r3, [r3, #24]
    cec4:	4798      	blx	r3
    if (c >= 0) return c;
    cec6:	2800      	cmp	r0, #0
    cec8:	dbf0      	blt.n	ceac <Stream::timedPeek()+0x10>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    ceca:	b002      	add	sp, #8
    cecc:	bd70      	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    cece:	f04f 30ff 	mov.w	r0, #4294967295
}
    ced2:	b002      	add	sp, #8
    ced4:	bd70      	pop	{r4, r5, r6, pc}
    ced6:	bf00      	nop
    ced8:	1fffa8f8 	.word	0x1fffa8f8

0000cedc <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    cedc:	b510      	push	{r4, lr}
    cede:	4604      	mov	r4, r0
    cee0:	e006      	b.n	cef0 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    cee2:	2b2d      	cmp	r3, #45	; 0x2d
    cee4:	d00c      	beq.n	cf00 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    cee6:	2a09      	cmp	r2, #9
    cee8:	d90a      	bls.n	cf00 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    ceea:	6823      	ldr	r3, [r4, #0]
    ceec:	695b      	ldr	r3, [r3, #20]
    ceee:	4798      	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    cef0:	4620      	mov	r0, r4
    cef2:	f7ff ffd3 	bl	ce9c <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    cef6:	1e03      	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    cef8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    cefc:	4620      	mov	r0, r4
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    cefe:	daf0      	bge.n	cee2 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    cf00:	4618      	mov	r0, r3
    cf02:	bd10      	pop	{r4, pc}

0000cf04 <Stream::setTimeout(unsigned long)>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    cf04:	6081      	str	r1, [r0, #8]
    cf06:	4770      	bx	lr

0000cf08 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf0a:	460d      	mov	r5, r1
    cf0c:	4604      	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    cf0e:	f7ff ffe5 	bl	cedc <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    cf12:	2800      	cmp	r0, #0
    cf14:	db23      	blt.n	cf5e <Stream::parseInt(char)+0x56>
    cf16:	2600      	movs	r6, #0
    cf18:	4637      	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    cf1a:	42a8      	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    cf1c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    cf20:	d009      	beq.n	cf36 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    cf22:	282d      	cmp	r0, #45	; 0x2d
    cf24:	d017      	beq.n	cf56 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    cf26:	eb06 0386 	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    cf2a:	2a09      	cmp	r2, #9
      value = value * 10 + c - '0';
    cf2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    cf30:	d801      	bhi.n	cf36 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    cf32:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    cf36:	6823      	ldr	r3, [r4, #0]
    cf38:	4620      	mov	r0, r4
    cf3a:	695b      	ldr	r3, [r3, #20]
    cf3c:	4798      	blx	r3
    c = timedPeek();
    cf3e:	4620      	mov	r0, r4
    cf40:	f7ff ffac 	bl	ce9c <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    cf44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    cf48:	2b09      	cmp	r3, #9
    cf4a:	d9e6      	bls.n	cf1a <Stream::parseInt(char)+0x12>
    cf4c:	42a8      	cmp	r0, r5
    cf4e:	d0e4      	beq.n	cf1a <Stream::parseInt(char)+0x12>

  if(isNegative)
    cf50:	b11f      	cbz	r7, cf5a <Stream::parseInt(char)+0x52>
    value = -value;
    cf52:	4270      	negs	r0, r6
    cf54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    cf56:	2701      	movs	r7, #1
    cf58:	e7ed      	b.n	cf36 <Stream::parseInt(char)+0x2e>
    cf5a:	4630      	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    cf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    cf5e:	2000      	movs	r0, #0
    cf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf62:	bf00      	nop

0000cf64 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    cf64:	2101      	movs	r1, #1
    cf66:	f7ff bfcf 	b.w	cf08 <Stream::parseInt(char)>
    cf6a:	bf00      	nop

0000cf6c <usb_serial_class::clear()>:
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    cf6c:	f7ff bd1e 	b.w	c9ac <usb_serial_flush_input>

0000cf70 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    cf70:	f7ff bcf6 	b.w	c960 <usb_serial_peekchar>

0000cf74 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    cf74:	f7ff bcd0 	b.w	c918 <usb_serial_getchar>

0000cf78 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    cf78:	f7ff bd0a 	b.w	c990 <usb_serial_available>

0000cf7c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    cf7c:	f7ff bde6 	b.w	cb4c <usb_serial_flush_output>

0000cf80 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    cf80:	f7ff bdc0 	b.w	cb04 <usb_serial_write_buffer_free>

0000cf84 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cf84:	4608      	mov	r0, r1
    cf86:	4611      	mov	r1, r2
    cf88:	f7ff bd2c 	b.w	c9e4 <usb_serial_write>

0000cf8c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cf8c:	4608      	mov	r0, r1
    cf8e:	f7ff bdad 	b.w	caec <usb_serial_putchar>
    cf92:	bf00      	nop

0000cf94 <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    cf94:	4770      	bx	lr
    cf96:	bf00      	nop

0000cf98 <random(unsigned long) [clone .part.0]>:
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
	return x;
}

uint32_t random(uint32_t howbig)
    cf98:	b5f0      	push	{r4, r5, r6, r7, lr}
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
    cf9a:	4d16      	ldr	r5, [pc, #88]	; (cff4 <random(unsigned long) [clone .part.0]+0x5c>)
    cf9c:	682a      	ldr	r2, [r5, #0]
	if (x == 0) x = 123459876;
    cf9e:	b30a      	cbz	r2, cfe4 <random(unsigned long) [clone .part.0]+0x4c>
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
    cfa0:	4915      	ldr	r1, [pc, #84]	; (cff8 <random(unsigned long) [clone .part.0]+0x60>)
    cfa2:	4b16      	ldr	r3, [pc, #88]	; (cffc <random(unsigned long) [clone .part.0]+0x64>)
    cfa4:	f8df e05c 	ldr.w	lr, [pc, #92]	; d004 <random(unsigned long) [clone .part.0]+0x6c>
    cfa8:	fb82 6701 	smull	r6, r7, r2, r1
    cfac:	fb81 1402 	smull	r1, r4, r1, r2
    cfb0:	17d6      	asrs	r6, r2, #31
    cfb2:	19d1      	adds	r1, r2, r7
    cfb4:	4414      	add	r4, r2
    cfb6:	ebc6 4121 	rsb	r1, r6, r1, asr #16
    cfba:	ebc6 4424 	rsb	r4, r6, r4, asr #16
    cfbe:	fb03 f404 	mul.w	r4, r3, r4
    cfc2:	fb0e 2211 	mls	r2, lr, r1, r2
    cfc6:	f244 13a7 	movw	r3, #16807	; 0x41a7
    cfca:	fb03 4302 	mla	r3, r3, r2, r4
	if (x < 0) x += 0x7FFFFFFF;
    cfce:	2b00      	cmp	r3, #0
    cfd0:	da02      	bge.n	cfd8 <random(unsigned long) [clone .part.0]+0x40>
    cfd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    cfd6:	3b01      	subs	r3, #1
    cfd8:	fbb3 f2f0 	udiv	r2, r3, r0
	seed = x;
    cfdc:	602b      	str	r3, [r5, #0]

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    cfde:	fb00 3012 	mls	r0, r0, r2, r3
    cfe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
	if (x == 0) x = 123459876;
    cfe4:	4b06      	ldr	r3, [pc, #24]	; (d000 <random(unsigned long) [clone .part.0]+0x68>)
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
    cfe6:	602b      	str	r3, [r5, #0]
    cfe8:	fbb3 f2f0 	udiv	r2, r3, r0

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
	return random() % howbig;
}
    cfec:	fb00 3012 	mls	r0, r0, r2, r3
    cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cff2:	bf00      	nop
    cff4:	1fffaa14 	.word	0x1fffaa14
    cff8:	834e0b5f 	.word	0x834e0b5f
    cffc:	fffff4ec 	.word	0xfffff4ec
    d000:	1f0cce42 	.word	0x1f0cce42
    d004:	0001f31d 	.word	0x0001f31d

0000d008 <random(long, long)>:

int32_t random(int32_t howsmall, int32_t howbig)
{
	if (howsmall >= howbig) return howsmall;
    d008:	4288      	cmp	r0, r1
    d00a:	da06      	bge.n	d01a <random(long, long)+0x12>
	if (howbig == 0) return 0;
	return random() % howbig;
}

int32_t random(int32_t howsmall, int32_t howbig)
{
    d00c:	b510      	push	{r4, lr}
    d00e:	4604      	mov	r4, r0
    d010:	1a08      	subs	r0, r1, r0
    d012:	f7ff ffc1 	bl	cf98 <random(unsigned long) [clone .part.0]>
	if (howsmall >= howbig) return howsmall;
	int32_t diff = howbig - howsmall;
	return random(diff) + howsmall;
    d016:	4420      	add	r0, r4
}
    d018:	bd10      	pop	{r4, pc}
    d01a:	4770      	bx	lr

0000d01c <yield>:
#include <Arduino.h>
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    d01c:	b538      	push	{r3, r4, r5, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    d01e:	4c22      	ldr	r4, [pc, #136]	; (d0a8 <yield+0x8c>)
    d020:	7823      	ldrb	r3, [r4, #0]
    d022:	b103      	cbz	r3, d026 <yield+0xa>
    d024:	bd38      	pop	{r3, r4, r5, pc}
	running = 1;
    d026:	2301      	movs	r3, #1
    d028:	7023      	strb	r3, [r4, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    d02a:	f7ff fcb1 	bl	c990 <usb_serial_available>
	if (Serial.available()) serialEvent();
    d02e:	bb70      	cbnz	r0, d08e <yield+0x72>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    d030:	f000 f868 	bl	d104 <serial_available>
	if (Serial1.available()) serialEvent1();
    d034:	bb40      	cbnz	r0, d088 <yield+0x6c>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    d036:	f000 f8fb 	bl	d230 <serial2_available>
	if (Serial2.available()) serialEvent2();
    d03a:	bb10      	cbnz	r0, d082 <yield+0x66>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    d03c:	f000 f98e 	bl	d35c <serial3_available>
	if (Serial3.available()) serialEvent3();
    d040:	b9e0      	cbnz	r0, d07c <yield+0x60>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    d042:	2300      	movs	r3, #0
    d044:	7023      	strb	r3, [r4, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    d046:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    d04a:	2b00      	cmp	r3, #0
    d04c:	d1ea      	bne.n	d024 <yield+0x8>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    d04e:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    d052:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    d054:	4b15      	ldr	r3, [pc, #84]	; (d0ac <yield+0x90>)
    d056:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    d058:	b1e0      	cbz	r0, d094 <yield+0x78>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    d05a:	4c15      	ldr	r4, [pc, #84]	; (d0b0 <yield+0x94>)
    d05c:	7822      	ldrb	r2, [r4, #0]
    d05e:	b9ca      	cbnz	r2, d094 <yield+0x78>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    d060:	6945      	ldr	r5, [r0, #20]
    d062:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    d064:	2301      	movs	r3, #1
    d066:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    d068:	b1c5      	cbz	r5, d09c <yield+0x80>
			firstYield->_prev = nullptr;
    d06a:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d06c:	b901      	cbnz	r1, d070 <yield+0x54>
    d06e:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    d070:	2500      	movs	r5, #0
    d072:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    d074:	6883      	ldr	r3, [r0, #8]
    d076:	4798      	blx	r3
		runningFromYield = false;
    d078:	7025      	strb	r5, [r4, #0]
    d07a:	e7d3      	b.n	d024 <yield+0x8>
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
	if (Serial3.available()) serialEvent3();
    d07c:	f000 fa30 	bl	d4e0 <serialEvent3()>
    d080:	e7df      	b.n	d042 <yield+0x26>

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
	if (Serial2.available()) serialEvent2();
    d082:	f000 fa2b 	bl	d4dc <serialEvent2()>
    d086:	e7d9      	b.n	d03c <yield+0x20>
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
	if (Serial1.available()) serialEvent1();
    d088:	f000 fa26 	bl	d4d8 <serialEvent1()>
    d08c:	e7d3      	b.n	d036 <yield+0x1a>
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
	if (Serial.available()) serialEvent();
    d08e:	f7ff ff81 	bl	cf94 <serialEvent()>
    d092:	e7cd      	b.n	d030 <yield+0x14>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d094:	2900      	cmp	r1, #0
    d096:	d1c5      	bne.n	d024 <yield+0x8>
    d098:	b662      	cpsie	i
    d09a:	bd38      	pop	{r3, r4, r5, pc}
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    d09c:	4b05      	ldr	r3, [pc, #20]	; (d0b4 <yield+0x98>)
    d09e:	601d      	str	r5, [r3, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    d0a0:	2900      	cmp	r1, #0
    d0a2:	d1e5      	bne.n	d070 <yield+0x54>
    d0a4:	e7e3      	b.n	d06e <yield+0x52>
    d0a6:	bf00      	nop
    d0a8:	1fffaa18 	.word	0x1fffaa18
    d0ac:	1fffaa08 	.word	0x1fffaa08
    d0b0:	1fffaa0c 	.word	0x1fffaa0c
    d0b4:	1fffaa04 	.word	0x1fffaa04

0000d0b8 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    d0b8:	b4f0      	push	{r4, r5, r6, r7}
    d0ba:	1e4d      	subs	r5, r1, #1
    d0bc:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    d0be:	2400      	movs	r4, #0
    d0c0:	e000      	b.n	d0c4 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    d0c2:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    d0c4:	fbb0 f3f2 	udiv	r3, r0, r2
    d0c8:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    d0cc:	2809      	cmp	r0, #9
    d0ce:	f100 0730 	add.w	r7, r0, #48	; 0x30
    d0d2:	bf8a      	itet	hi
    d0d4:	3037      	addhi	r0, #55	; 0x37
    d0d6:	b2f8      	uxtbls	r0, r7
    d0d8:	b2c0      	uxtbhi	r0, r0
    d0da:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    d0de:	4618      	mov	r0, r3
    d0e0:	2b00      	cmp	r3, #0
    d0e2:	d1ee      	bne.n	d0c2 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    d0e4:	190a      	adds	r2, r1, r4
    d0e6:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    d0e8:	b14c      	cbz	r4, d0fe <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    d0ea:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    d0ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    d0f0:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d0f2:	3301      	adds	r3, #1
    d0f4:	1ae0      	subs	r0, r4, r3
    d0f6:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    d0f8:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    d0fc:	dbf5      	blt.n	d0ea <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    d0fe:	4608      	mov	r0, r1
    d100:	bcf0      	pop	{r4, r5, r6, r7}
    d102:	4770      	bx	lr

0000d104 <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d104:	4a05      	ldr	r2, [pc, #20]	; (d11c <serial_available+0x18>)
	tail = rx_buffer_tail;
    d106:	4b06      	ldr	r3, [pc, #24]	; (d120 <serial_available+0x1c>)

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d108:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    d10a:	781b      	ldrb	r3, [r3, #0]

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d10c:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    d10e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    d110:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    d112:	bf38      	it	cc
    d114:	3040      	addcc	r0, #64	; 0x40
    d116:	1ac0      	subs	r0, r0, r3
}
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	1fffaa20 	.word	0x1fffaa20
    d120:	1fffaa21 	.word	0x1fffaa21

0000d124 <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    d124:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    d126:	4b38      	ldr	r3, [pc, #224]	; (d208 <uart0_status_isr+0xe4>)
    d128:	791a      	ldrb	r2, [r3, #4]
    d12a:	f012 0f30 	tst.w	r2, #48	; 0x30
    d12e:	d02c      	beq.n	d18a <uart0_status_isr+0x66>
		__disable_irq();
    d130:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    d132:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    d134:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d138:	2900      	cmp	r1, #0
    d13a:	d03d      	beq.n	d1b8 <uart0_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    d13c:	b662      	cpsie	i
			head = rx_buffer_head;
    d13e:	4f33      	ldr	r7, [pc, #204]	; (d20c <uart0_status_isr+0xe8>)
			tail = rx_buffer_tail;
    d140:	4933      	ldr	r1, [pc, #204]	; (d210 <uart0_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    d142:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    d144:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    d146:	4e33      	ldr	r6, [pc, #204]	; (d214 <uart0_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    d148:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    d14a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    d14c:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
				}
				newhead = head + 1;
    d14e:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    d150:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    d152:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    d154:	bf28      	it	cs
    d156:	2300      	movcs	r3, #0
				if (newhead != tail) {
    d158:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    d15a:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    d15e:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    d160:	bf1c      	itt	ne
    d162:	54f1      	strbne	r1, [r6, r3]
    d164:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    d166:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    d16a:	d1f0      	bne.n	d14e <uart0_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    d16c:	4b2a      	ldr	r3, [pc, #168]	; (d218 <uart0_status_isr+0xf4>)
    d16e:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    d170:	b2c2      	uxtb	r2, r0
    d172:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    d174:	b14b      	cbz	r3, d18a <uart0_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    d176:	42a8      	cmp	r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    d178:	bf36      	itet	cc
    d17a:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    d17e:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    d180:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    d182:	2827      	cmp	r0, #39	; 0x27
    d184:	bfc4      	itt	gt
    d186:	2201      	movgt	r2, #1
    d188:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    d18a:	491f      	ldr	r1, [pc, #124]	; (d208 <uart0_status_isr+0xe4>)
    d18c:	78ca      	ldrb	r2, [r1, #3]
    d18e:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    d190:	0615      	lsls	r5, r2, #24
    d192:	d416      	bmi.n	d1c2 <uart0_status_isr+0x9e>
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    d194:	0652      	lsls	r2, r2, #25
    d196:	d50d      	bpl.n	d1b4 <uart0_status_isr+0x90>
    d198:	4b1b      	ldr	r3, [pc, #108]	; (d208 <uart0_status_isr+0xe4>)
    d19a:	791b      	ldrb	r3, [r3, #4]
    d19c:	065b      	lsls	r3, r3, #25
    d19e:	d509      	bpl.n	d1b4 <uart0_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    d1a0:	4b1e      	ldr	r3, [pc, #120]	; (d21c <uart0_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    d1a2:	491f      	ldr	r1, [pc, #124]	; (d220 <uart0_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    d1a4:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
		transmitting = 0;
    d1a6:	2200      	movs	r2, #0
    d1a8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    d1aa:	b103      	cbz	r3, d1ae <uart0_status_isr+0x8a>
    d1ac:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    d1ae:	4b16      	ldr	r3, [pc, #88]	; (d208 <uart0_status_isr+0xe4>)
    d1b0:	223c      	movs	r2, #60	; 0x3c
    d1b2:	70da      	strb	r2, [r3, #3]
	}
}
    d1b4:	bcf0      	pop	{r4, r5, r6, r7}
    d1b6:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    d1b8:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    d1ba:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    d1bc:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    d1be:	b662      	cpsie	i
    d1c0:	e7e3      	b.n	d18a <uart0_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    d1c2:	790b      	ldrb	r3, [r1, #4]
    d1c4:	061c      	lsls	r4, r3, #24
    d1c6:	d5e5      	bpl.n	d194 <uart0_status_isr+0x70>
		head = tx_buffer_head;
    d1c8:	4b16      	ldr	r3, [pc, #88]	; (d224 <uart0_status_isr+0x100>)
		tail = tx_buffer_tail;
    d1ca:	4e17      	ldr	r6, [pc, #92]	; (d228 <uart0_status_isr+0x104>)
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    d1cc:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    d1ce:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    d1d0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    d1d2:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    d1d4:	429c      	cmp	r4, r3
    d1d6:	d00e      	beq.n	d1f6 <uart0_status_isr+0xd2>
    d1d8:	4d14      	ldr	r5, [pc, #80]	; (d22c <uart0_status_isr+0x108>)
    d1da:	e001      	b.n	d1e0 <uart0_status_isr+0xbc>
    d1dc:	42a3      	cmp	r3, r4
    d1de:	d00a      	beq.n	d1f6 <uart0_status_isr+0xd2>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    d1e0:	3301      	adds	r3, #1
    d1e2:	2b40      	cmp	r3, #64	; 0x40
    d1e4:	bf28      	it	cs
    d1e6:	2300      	movcs	r3, #0
			avail = UART0_S1;
    d1e8:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    d1ea:	5ce8      	ldrb	r0, [r5, r3]
    d1ec:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    d1ee:	71c8      	strb	r0, [r1, #7]
		} while (UART0_TCFIFO < 8);
    d1f0:	7d08      	ldrb	r0, [r1, #20]
    d1f2:	2807      	cmp	r0, #7
    d1f4:	d9f2      	bls.n	d1dc <uart0_status_isr+0xb8>
		tx_buffer_tail = tail;
    d1f6:	b2db      	uxtb	r3, r3
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    d1f8:	4903      	ldr	r1, [pc, #12]	; (d208 <uart0_status_isr+0xe4>)
			avail = UART0_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
		} while (UART0_TCFIFO < 8);
		tx_buffer_tail = tail;
    d1fa:	7033      	strb	r3, [r6, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    d1fc:	790b      	ldrb	r3, [r1, #4]
    d1fe:	0618      	lsls	r0, r3, #24
    d200:	bf44      	itt	mi
    d202:	237c      	movmi	r3, #124	; 0x7c
    d204:	70cb      	strbmi	r3, [r1, #3]
    d206:	e7c5      	b.n	d194 <uart0_status_isr+0x70>
    d208:	4006a000 	.word	0x4006a000
    d20c:	1fffaa20 	.word	0x1fffaa20
    d210:	1fffaa21 	.word	0x1fffaa21
    d214:	1fffaa64 	.word	0x1fffaa64
    d218:	1fffaa1c 	.word	0x1fffaa1c
    d21c:	1fffaaa8 	.word	0x1fffaaa8
    d220:	1fffaaa4 	.word	0x1fffaaa4
    d224:	1fffaaac 	.word	0x1fffaaac
    d228:	1fffaaa5 	.word	0x1fffaaa5
    d22c:	1fffaa24 	.word	0x1fffaa24

0000d230 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d230:	4a05      	ldr	r2, [pc, #20]	; (d248 <serial2_available+0x18>)
	tail = rx_buffer_tail;
    d232:	4b06      	ldr	r3, [pc, #24]	; (d24c <serial2_available+0x1c>)

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d234:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    d236:	781b      	ldrb	r3, [r3, #0]

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d238:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    d23a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    d23c:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    d23e:	bf38      	it	cc
    d240:	3040      	addcc	r0, #64	; 0x40
    d242:	1ac0      	subs	r0, r0, r3
}
    d244:	4770      	bx	lr
    d246:	bf00      	nop
    d248:	1fffab20 	.word	0x1fffab20
    d24c:	1fffaab5 	.word	0x1fffaab5

0000d250 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    d250:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    d252:	4b38      	ldr	r3, [pc, #224]	; (d334 <uart1_status_isr+0xe4>)
    d254:	791a      	ldrb	r2, [r3, #4]
    d256:	f012 0f30 	tst.w	r2, #48	; 0x30
    d25a:	d02c      	beq.n	d2b6 <uart1_status_isr+0x66>
		__disable_irq();
    d25c:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    d25e:	7d99      	ldrb	r1, [r3, #22]
		if (avail == 0) {
    d260:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    d264:	2900      	cmp	r1, #0
    d266:	d03d      	beq.n	d2e4 <uart1_status_isr+0x94>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    d268:	b662      	cpsie	i
			head = rx_buffer_head;
    d26a:	4f33      	ldr	r7, [pc, #204]	; (d338 <uart1_status_isr+0xe8>)
			tail = rx_buffer_tail;
    d26c:	4933      	ldr	r1, [pc, #204]	; (d33c <uart1_status_isr+0xec>)
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    d26e:	7838      	ldrb	r0, [r7, #0]
			tail = rx_buffer_tail;
    d270:	780d      	ldrb	r5, [r1, #0]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    d272:	4e33      	ldr	r6, [pc, #204]	; (d340 <uart1_status_isr+0xf0>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    d274:	461c      	mov	r4, r3
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
			head = rx_buffer_head;
    d276:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    d278:	b2ed      	uxtb	r5, r5
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
    d27a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    d27c:	2b40      	cmp	r3, #64	; 0x40
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    d27e:	79e1      	ldrb	r1, [r4, #7]
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    d280:	bf28      	it	cs
    d282:	2300      	movcs	r3, #0
				if (newhead != tail) {
    d284:	42ab      	cmp	r3, r5
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    d286:	f102 32ff 	add.w	r2, r2, #4294967295
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    d28a:	b2c9      	uxtb	r1, r1
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    d28c:	bf1c      	itt	ne
    d28e:	54f1      	strbne	r1, [r6, r3]
    d290:	4618      	movne	r0, r3
				}
			} while (--avail > 0);
    d292:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    d296:	d1f0      	bne.n	d27a <uart1_status_isr+0x2a>
			rx_buffer_head = head;
			if (rts_pin) {
    d298:	4b2a      	ldr	r3, [pc, #168]	; (d344 <uart1_status_isr+0xf4>)
    d29a:	681b      	ldr	r3, [r3, #0]
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
			rx_buffer_head = head;
    d29c:	b2c2      	uxtb	r2, r0
    d29e:	703a      	strb	r2, [r7, #0]
			if (rts_pin) {
    d2a0:	b14b      	cbz	r3, d2b6 <uart1_status_isr+0x66>
				int avail;
				if (head >= tail) avail = head - tail;
    d2a2:	42a8      	cmp	r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    d2a4:	bf36      	itet	cc
    d2a6:	f1c5 0540 	rsbcc	r5, r5, #64	; 0x40
				}
			} while (--avail > 0);
			rx_buffer_head = head;
			if (rts_pin) {
				int avail;
				if (head >= tail) avail = head - tail;
    d2aa:	1b40      	subcs	r0, r0, r5
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    d2ac:	1940      	addcc	r0, r0, r5
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    d2ae:	2827      	cmp	r0, #39	; 0x27
    d2b0:	bfc4      	itt	gt
    d2b2:	2201      	movgt	r2, #1
    d2b4:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    d2b6:	491f      	ldr	r1, [pc, #124]	; (d334 <uart1_status_isr+0xe4>)
    d2b8:	78ca      	ldrb	r2, [r1, #3]
    d2ba:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    d2bc:	0615      	lsls	r5, r2, #24
    d2be:	d416      	bmi.n	d2ee <uart1_status_isr+0x9e>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    d2c0:	0652      	lsls	r2, r2, #25
    d2c2:	d50d      	bpl.n	d2e0 <uart1_status_isr+0x90>
    d2c4:	4b1b      	ldr	r3, [pc, #108]	; (d334 <uart1_status_isr+0xe4>)
    d2c6:	791b      	ldrb	r3, [r3, #4]
    d2c8:	065b      	lsls	r3, r3, #25
    d2ca:	d509      	bpl.n	d2e0 <uart1_status_isr+0x90>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    d2cc:	4b1e      	ldr	r3, [pc, #120]	; (d348 <uart1_status_isr+0xf8>)
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    d2ce:	491f      	ldr	r1, [pc, #124]	; (d34c <uart1_status_isr+0xfc>)
		if (transmit_pin) transmit_deassert();
    d2d0:	681b      	ldr	r3, [r3, #0]
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
		transmitting = 0;
    d2d2:	2200      	movs	r2, #0
    d2d4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    d2d6:	b103      	cbz	r3, d2da <uart1_status_isr+0x8a>
    d2d8:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    d2da:	4b16      	ldr	r3, [pc, #88]	; (d334 <uart1_status_isr+0xe4>)
    d2dc:	223c      	movs	r2, #60	; 0x3c
    d2de:	70da      	strb	r2, [r3, #3]
	}
}
    d2e0:	bcf0      	pop	{r4, r5, r6, r7}
    d2e2:	4770      	bx	lr
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    d2e4:	2240      	movs	r2, #64	; 0x40
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    d2e6:	79d9      	ldrb	r1, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    d2e8:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    d2ea:	b662      	cpsie	i
    d2ec:	e7e3      	b.n	d2b6 <uart1_status_isr+0x66>
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    d2ee:	790b      	ldrb	r3, [r1, #4]
    d2f0:	061c      	lsls	r4, r3, #24
    d2f2:	d5e5      	bpl.n	d2c0 <uart1_status_isr+0x70>
		head = tx_buffer_head;
    d2f4:	4b16      	ldr	r3, [pc, #88]	; (d350 <uart1_status_isr+0x100>)
		tail = tx_buffer_tail;
    d2f6:	4e17      	ldr	r6, [pc, #92]	; (d354 <uart1_status_isr+0x104>)
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    d2f8:	781c      	ldrb	r4, [r3, #0]
		tail = tx_buffer_tail;
    d2fa:	7833      	ldrb	r3, [r6, #0]
			}
		}
	}
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    d2fc:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    d2fe:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    d300:	429c      	cmp	r4, r3
    d302:	d00e      	beq.n	d322 <uart1_status_isr+0xd2>
    d304:	4d14      	ldr	r5, [pc, #80]	; (d358 <uart1_status_isr+0x108>)
    d306:	e001      	b.n	d30c <uart1_status_isr+0xbc>
    d308:	42a3      	cmp	r3, r4
    d30a:	d00a      	beq.n	d322 <uart1_status_isr+0xd2>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    d30c:	3301      	adds	r3, #1
    d30e:	2b28      	cmp	r3, #40	; 0x28
    d310:	bf28      	it	cs
    d312:	2300      	movcs	r3, #0
			avail = UART1_S1;
    d314:	7908      	ldrb	r0, [r1, #4]
			n = tx_buffer[tail];
    d316:	5ce8      	ldrb	r0, [r5, r3]
    d318:	b2c0      	uxtb	r0, r0
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    d31a:	71c8      	strb	r0, [r1, #7]
		} while (UART1_TCFIFO < 8);
    d31c:	7d08      	ldrb	r0, [r1, #20]
    d31e:	2807      	cmp	r0, #7
    d320:	d9f2      	bls.n	d308 <uart1_status_isr+0xb8>
		tx_buffer_tail = tail;
    d322:	b2db      	uxtb	r3, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    d324:	4903      	ldr	r1, [pc, #12]	; (d334 <uart1_status_isr+0xe4>)
			avail = UART1_S1;
			n = tx_buffer[tail];
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
		} while (UART1_TCFIFO < 8);
		tx_buffer_tail = tail;
    d326:	7033      	strb	r3, [r6, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    d328:	790b      	ldrb	r3, [r1, #4]
    d32a:	0618      	lsls	r0, r3, #24
    d32c:	bf44      	itt	mi
    d32e:	237c      	movmi	r3, #124	; 0x7c
    d330:	70cb      	strbmi	r3, [r1, #3]
    d332:	e7c5      	b.n	d2c0 <uart1_status_isr+0x70>
    d334:	4006b000 	.word	0x4006b000
    d338:	1fffab20 	.word	0x1fffab20
    d33c:	1fffaab5 	.word	0x1fffaab5
    d340:	1fffaae0 	.word	0x1fffaae0
    d344:	1fffaab0 	.word	0x1fffaab0
    d348:	1fffab24 	.word	0x1fffab24
    d34c:	1fffaab4 	.word	0x1fffaab4
    d350:	1fffab28 	.word	0x1fffab28
    d354:	1fffab21 	.word	0x1fffab21
    d358:	1fffaab8 	.word	0x1fffaab8

0000d35c <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d35c:	4a05      	ldr	r2, [pc, #20]	; (d374 <serial3_available+0x18>)
	tail = rx_buffer_tail;
    d35e:	4b06      	ldr	r3, [pc, #24]	; (d378 <serial3_available+0x1c>)

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d360:	7810      	ldrb	r0, [r2, #0]
	tail = rx_buffer_tail;
    d362:	781b      	ldrb	r3, [r3, #0]

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    d364:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    d366:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    d368:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    d36a:	bf38      	it	cc
    d36c:	3040      	addcc	r0, #64	; 0x40
    d36e:	1ac0      	subs	r0, r0, r3
}
    d370:	4770      	bx	lr
    d372:	bf00      	nop
    d374:	1fffab30 	.word	0x1fffab30
    d378:	1fffab31 	.word	0x1fffab31

0000d37c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    d37c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    d37e:	4b2b      	ldr	r3, [pc, #172]	; (d42c <uart2_status_isr+0xb0>)
    d380:	791a      	ldrb	r2, [r3, #4]
    d382:	0694      	lsls	r4, r2, #26
    d384:	d51f      	bpl.n	d3c6 <uart2_status_isr+0x4a>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    d386:	482a      	ldr	r0, [pc, #168]	; (d430 <uart2_status_isr+0xb4>)

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    d388:	79da      	ldrb	r2, [r3, #7]
		}
		head = rx_buffer_head + 1;
    d38a:	7803      	ldrb	r3, [r0, #0]
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    d38c:	4929      	ldr	r1, [pc, #164]	; (d434 <uart2_status_isr+0xb8>)
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    d38e:	3301      	adds	r3, #1
    d390:	2b3f      	cmp	r3, #63	; 0x3f
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    d392:	7809      	ldrb	r1, [r1, #0]
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    d394:	bfc8      	it	gt
    d396:	2300      	movgt	r3, #0
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    d398:	428b      	cmp	r3, r1

	if (UART2_S1 & UART_S1_RDRF) {
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    d39a:	b2d2      	uxtb	r2, r2
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
    d39c:	d003      	beq.n	d3a6 <uart2_status_isr+0x2a>
			rx_buffer[head] = n;
    d39e:	4c26      	ldr	r4, [pc, #152]	; (d438 <uart2_status_isr+0xbc>)
			rx_buffer_head = head;
    d3a0:	b2d9      	uxtb	r1, r3
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
		if (head != rx_buffer_tail) {
			rx_buffer[head] = n;
    d3a2:	54e2      	strb	r2, [r4, r3]
			rx_buffer_head = head;
    d3a4:	7001      	strb	r1, [r0, #0]
		}
		if (rts_pin) {
    d3a6:	4a25      	ldr	r2, [pc, #148]	; (d43c <uart2_status_isr+0xc0>)
    d3a8:	6811      	ldr	r1, [r2, #0]
    d3aa:	b161      	cbz	r1, d3c6 <uart2_status_isr+0x4a>
			int avail;
			tail = tx_buffer_tail;
    d3ac:	4a24      	ldr	r2, [pc, #144]	; (d440 <uart2_status_isr+0xc4>)
    d3ae:	7812      	ldrb	r2, [r2, #0]
    d3b0:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    d3b2:	4293      	cmp	r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    d3b4:	bf36      	itet	cc
    d3b6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
			rx_buffer_head = head;
		}
		if (rts_pin) {
			int avail;
			tail = tx_buffer_tail;
			if (head >= tail) avail = head - tail;
    d3ba:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    d3bc:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    d3be:	2b27      	cmp	r3, #39	; 0x27
    d3c0:	bfc4      	itt	gt
    d3c2:	2301      	movgt	r3, #1
    d3c4:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    d3c6:	4a19      	ldr	r2, [pc, #100]	; (d42c <uart2_status_isr+0xb0>)
    d3c8:	78d3      	ldrb	r3, [r2, #3]
    d3ca:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    d3cc:	0618      	lsls	r0, r3, #24
    d3ce:	d411      	bmi.n	d3f4 <uart2_status_isr+0x78>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    d3d0:	065a      	lsls	r2, r3, #25
    d3d2:	d50d      	bpl.n	d3f0 <uart2_status_isr+0x74>
    d3d4:	4b15      	ldr	r3, [pc, #84]	; (d42c <uart2_status_isr+0xb0>)
    d3d6:	791b      	ldrb	r3, [r3, #4]
    d3d8:	065b      	lsls	r3, r3, #25
    d3da:	d509      	bpl.n	d3f0 <uart2_status_isr+0x74>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    d3dc:	4b19      	ldr	r3, [pc, #100]	; (d444 <uart2_status_isr+0xc8>)
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    d3de:	491a      	ldr	r1, [pc, #104]	; (d448 <uart2_status_isr+0xcc>)
		if (transmit_pin) transmit_deassert();
    d3e0:	681b      	ldr	r3, [r3, #0]
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
		transmitting = 0;
    d3e2:	2200      	movs	r2, #0
    d3e4:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    d3e6:	b103      	cbz	r3, d3ea <uart2_status_isr+0x6e>
    d3e8:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    d3ea:	4b10      	ldr	r3, [pc, #64]	; (d42c <uart2_status_isr+0xb0>)
    d3ec:	222c      	movs	r2, #44	; 0x2c
    d3ee:	70da      	strb	r2, [r3, #3]
	}
}
    d3f0:	bc30      	pop	{r4, r5}
    d3f2:	4770      	bx	lr
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    d3f4:	7911      	ldrb	r1, [r2, #4]
    d3f6:	0609      	lsls	r1, r1, #24
    d3f8:	d5ea      	bpl.n	d3d0 <uart2_status_isr+0x54>
		head = tx_buffer_head;
    d3fa:	4914      	ldr	r1, [pc, #80]	; (d44c <uart2_status_isr+0xd0>)
		tail = tx_buffer_tail;
    d3fc:	4810      	ldr	r0, [pc, #64]	; (d440 <uart2_status_isr+0xc4>)
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
		}
	}
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
    d3fe:	780c      	ldrb	r4, [r1, #0]
		tail = tx_buffer_tail;
    d400:	7801      	ldrb	r1, [r0, #0]
    d402:	b2c9      	uxtb	r1, r1
		if (head == tail) {
    d404:	428c      	cmp	r4, r1
    d406:	d00d      	beq.n	d424 <uart2_status_isr+0xa8>
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    d408:	1c4a      	adds	r2, r1, #1
    d40a:	2a27      	cmp	r2, #39	; 0x27
    d40c:	bf84      	itt	hi
    d40e:	2100      	movhi	r1, #0
    d410:	460a      	movhi	r2, r1
			n = tx_buffer[tail];
    d412:	4d0f      	ldr	r5, [pc, #60]	; (d450 <uart2_status_isr+0xd4>)
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    d414:	4c05      	ldr	r4, [pc, #20]	; (d42c <uart2_status_isr+0xb0>)
    d416:	bf98      	it	ls
    d418:	b2d1      	uxtbls	r1, r2
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
			n = tx_buffer[tail];
    d41a:	5caa      	ldrb	r2, [r5, r2]
    d41c:	b2d2      	uxtb	r2, r2
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    d41e:	71e2      	strb	r2, [r4, #7]
			tx_buffer_tail = tail;
    d420:	7001      	strb	r1, [r0, #0]
    d422:	e7d5      	b.n	d3d0 <uart2_status_isr+0x54>
	c = UART2_C2;
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		if (head == tail) {
			UART2_C2 = C2_TX_COMPLETING;
    d424:	216c      	movs	r1, #108	; 0x6c
    d426:	70d1      	strb	r1, [r2, #3]
    d428:	e7d2      	b.n	d3d0 <uart2_status_isr+0x54>
    d42a:	bf00      	nop
    d42c:	4006c000 	.word	0x4006c000
    d430:	1fffab30 	.word	0x1fffab30
    d434:	1fffab31 	.word	0x1fffab31
    d438:	1fffab5c 	.word	0x1fffab5c
    d43c:	1fffab2c 	.word	0x1fffab2c
    d440:	1fffab9d 	.word	0x1fffab9d
    d444:	1fffaba0 	.word	0x1fffaba0
    d448:	1fffab9c 	.word	0x1fffab9c
    d44c:	1fffaba4 	.word	0x1fffaba4
    d450:	1fffab34 	.word	0x1fffab34

0000d454 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    d454:	b570      	push	{r4, r5, r6, lr}
    d456:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    d458:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d45a:	4b19      	ldr	r3, [pc, #100]	; (d4c0 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    d45c:	4d19      	ldr	r5, [pc, #100]	; (d4c4 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    d45e:	481a      	ldr	r0, [pc, #104]	; (d4c8 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d460:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    d462:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    d464:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d466:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    d468:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    d46a:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    d46c:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    d46e:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    d470:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    d472:	7813      	ldrb	r3, [r2, #0]
    d474:	061b      	lsls	r3, r3, #24
    d476:	d5fc      	bpl.n	d472 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    d478:	4b14      	ldr	r3, [pc, #80]	; (d4cc <usb_init_serialnumber+0x78>)
    d47a:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    d47c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d47e:	4b14      	ldr	r3, [pc, #80]	; (d4d0 <usb_init_serialnumber+0x7c>)
    d480:	4c14      	ldr	r4, [pc, #80]	; (d4d4 <usb_init_serialnumber+0x80>)
    d482:	4298      	cmp	r0, r3
    d484:	bf98      	it	ls
    d486:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    d48a:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    d48c:	bf98      	it	ls
    d48e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    d490:	220a      	movs	r2, #10
    d492:	f7ff fe11 	bl	d0b8 <ultoa>
    d496:	a901      	add	r1, sp, #4
    d498:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    d49a:	2300      	movs	r3, #0
		char c = buf[i];
    d49c:	f811 2b01 	ldrb.w	r2, [r1], #1
    d4a0:	3301      	adds	r3, #1
		if (!c) break;
    d4a2:	b13a      	cbz	r2, d4b4 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d4a4:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    d4a6:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    d4aa:	d1f7      	bne.n	d49c <usb_init_serialnumber+0x48>
    d4ac:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d4ae:	7023      	strb	r3, [r4, #0]
}
    d4b0:	b004      	add	sp, #16
    d4b2:	bd70      	pop	{r4, r5, r6, pc}
    d4b4:	005b      	lsls	r3, r3, #1
    d4b6:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    d4b8:	7023      	strb	r3, [r4, #0]
}
    d4ba:	b004      	add	sp, #16
    d4bc:	bd70      	pop	{r4, r5, r6, pc}
    d4be:	bf00      	nop
    d4c0:	40020000 	.word	0x40020000
    d4c4:	40020007 	.word	0x40020007
    d4c8:	40020006 	.word	0x40020006
    d4cc:	40020008 	.word	0x40020008
    d4d0:	0098967f 	.word	0x0098967f
    d4d4:	1fff8828 	.word	0x1fff8828

0000d4d8 <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    d4d8:	4770      	bx	lr
    d4da:	bf00      	nop

0000d4dc <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    d4dc:	4770      	bx	lr
    d4de:	bf00      	nop

0000d4e0 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    d4e0:	4770      	bx	lr
    d4e2:	bf00      	nop

0000d4e4 <__aeabi_drsub>:
    d4e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    d4e8:	e002      	b.n	d4f0 <__adddf3>
    d4ea:	bf00      	nop

0000d4ec <__aeabi_dsub>:
    d4ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000d4f0 <__adddf3>:
    d4f0:	b530      	push	{r4, r5, lr}
    d4f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    d4f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    d4fa:	ea94 0f05 	teq	r4, r5
    d4fe:	bf08      	it	eq
    d500:	ea90 0f02 	teqeq	r0, r2
    d504:	bf1f      	itttt	ne
    d506:	ea54 0c00 	orrsne.w	ip, r4, r0
    d50a:	ea55 0c02 	orrsne.w	ip, r5, r2
    d50e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    d512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d516:	f000 80e2 	beq.w	d6de <__adddf3+0x1ee>
    d51a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    d51e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    d522:	bfb8      	it	lt
    d524:	426d      	neglt	r5, r5
    d526:	dd0c      	ble.n	d542 <__adddf3+0x52>
    d528:	442c      	add	r4, r5
    d52a:	ea80 0202 	eor.w	r2, r0, r2
    d52e:	ea81 0303 	eor.w	r3, r1, r3
    d532:	ea82 0000 	eor.w	r0, r2, r0
    d536:	ea83 0101 	eor.w	r1, r3, r1
    d53a:	ea80 0202 	eor.w	r2, r0, r2
    d53e:	ea81 0303 	eor.w	r3, r1, r3
    d542:	2d36      	cmp	r5, #54	; 0x36
    d544:	bf88      	it	hi
    d546:	bd30      	pophi	{r4, r5, pc}
    d548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d54c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    d554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    d558:	d002      	beq.n	d560 <__adddf3+0x70>
    d55a:	4240      	negs	r0, r0
    d55c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    d564:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    d56c:	d002      	beq.n	d574 <__adddf3+0x84>
    d56e:	4252      	negs	r2, r2
    d570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d574:	ea94 0f05 	teq	r4, r5
    d578:	f000 80a7 	beq.w	d6ca <__adddf3+0x1da>
    d57c:	f1a4 0401 	sub.w	r4, r4, #1
    d580:	f1d5 0e20 	rsbs	lr, r5, #32
    d584:	db0d      	blt.n	d5a2 <__adddf3+0xb2>
    d586:	fa02 fc0e 	lsl.w	ip, r2, lr
    d58a:	fa22 f205 	lsr.w	r2, r2, r5
    d58e:	1880      	adds	r0, r0, r2
    d590:	f141 0100 	adc.w	r1, r1, #0
    d594:	fa03 f20e 	lsl.w	r2, r3, lr
    d598:	1880      	adds	r0, r0, r2
    d59a:	fa43 f305 	asr.w	r3, r3, r5
    d59e:	4159      	adcs	r1, r3
    d5a0:	e00e      	b.n	d5c0 <__adddf3+0xd0>
    d5a2:	f1a5 0520 	sub.w	r5, r5, #32
    d5a6:	f10e 0e20 	add.w	lr, lr, #32
    d5aa:	2a01      	cmp	r2, #1
    d5ac:	fa03 fc0e 	lsl.w	ip, r3, lr
    d5b0:	bf28      	it	cs
    d5b2:	f04c 0c02 	orrcs.w	ip, ip, #2
    d5b6:	fa43 f305 	asr.w	r3, r3, r5
    d5ba:	18c0      	adds	r0, r0, r3
    d5bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    d5c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d5c4:	d507      	bpl.n	d5d6 <__adddf3+0xe6>
    d5c6:	f04f 0e00 	mov.w	lr, #0
    d5ca:	f1dc 0c00 	rsbs	ip, ip, #0
    d5ce:	eb7e 0000 	sbcs.w	r0, lr, r0
    d5d2:	eb6e 0101 	sbc.w	r1, lr, r1
    d5d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    d5da:	d31b      	bcc.n	d614 <__adddf3+0x124>
    d5dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    d5e0:	d30c      	bcc.n	d5fc <__adddf3+0x10c>
    d5e2:	0849      	lsrs	r1, r1, #1
    d5e4:	ea5f 0030 	movs.w	r0, r0, rrx
    d5e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    d5ec:	f104 0401 	add.w	r4, r4, #1
    d5f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    d5f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    d5f8:	f080 809a 	bcs.w	d730 <__adddf3+0x240>
    d5fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d600:	bf08      	it	eq
    d602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d606:	f150 0000 	adcs.w	r0, r0, #0
    d60a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d60e:	ea41 0105 	orr.w	r1, r1, r5
    d612:	bd30      	pop	{r4, r5, pc}
    d614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    d618:	4140      	adcs	r0, r0
    d61a:	eb41 0101 	adc.w	r1, r1, r1
    d61e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d622:	f1a4 0401 	sub.w	r4, r4, #1
    d626:	d1e9      	bne.n	d5fc <__adddf3+0x10c>
    d628:	f091 0f00 	teq	r1, #0
    d62c:	bf04      	itt	eq
    d62e:	4601      	moveq	r1, r0
    d630:	2000      	moveq	r0, #0
    d632:	fab1 f381 	clz	r3, r1
    d636:	bf08      	it	eq
    d638:	3320      	addeq	r3, #32
    d63a:	f1a3 030b 	sub.w	r3, r3, #11
    d63e:	f1b3 0220 	subs.w	r2, r3, #32
    d642:	da0c      	bge.n	d65e <__adddf3+0x16e>
    d644:	320c      	adds	r2, #12
    d646:	dd08      	ble.n	d65a <__adddf3+0x16a>
    d648:	f102 0c14 	add.w	ip, r2, #20
    d64c:	f1c2 020c 	rsb	r2, r2, #12
    d650:	fa01 f00c 	lsl.w	r0, r1, ip
    d654:	fa21 f102 	lsr.w	r1, r1, r2
    d658:	e00c      	b.n	d674 <__adddf3+0x184>
    d65a:	f102 0214 	add.w	r2, r2, #20
    d65e:	bfd8      	it	le
    d660:	f1c2 0c20 	rsble	ip, r2, #32
    d664:	fa01 f102 	lsl.w	r1, r1, r2
    d668:	fa20 fc0c 	lsr.w	ip, r0, ip
    d66c:	bfdc      	itt	le
    d66e:	ea41 010c 	orrle.w	r1, r1, ip
    d672:	4090      	lslle	r0, r2
    d674:	1ae4      	subs	r4, r4, r3
    d676:	bfa2      	ittt	ge
    d678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    d67c:	4329      	orrge	r1, r5
    d67e:	bd30      	popge	{r4, r5, pc}
    d680:	ea6f 0404 	mvn.w	r4, r4
    d684:	3c1f      	subs	r4, #31
    d686:	da1c      	bge.n	d6c2 <__adddf3+0x1d2>
    d688:	340c      	adds	r4, #12
    d68a:	dc0e      	bgt.n	d6aa <__adddf3+0x1ba>
    d68c:	f104 0414 	add.w	r4, r4, #20
    d690:	f1c4 0220 	rsb	r2, r4, #32
    d694:	fa20 f004 	lsr.w	r0, r0, r4
    d698:	fa01 f302 	lsl.w	r3, r1, r2
    d69c:	ea40 0003 	orr.w	r0, r0, r3
    d6a0:	fa21 f304 	lsr.w	r3, r1, r4
    d6a4:	ea45 0103 	orr.w	r1, r5, r3
    d6a8:	bd30      	pop	{r4, r5, pc}
    d6aa:	f1c4 040c 	rsb	r4, r4, #12
    d6ae:	f1c4 0220 	rsb	r2, r4, #32
    d6b2:	fa20 f002 	lsr.w	r0, r0, r2
    d6b6:	fa01 f304 	lsl.w	r3, r1, r4
    d6ba:	ea40 0003 	orr.w	r0, r0, r3
    d6be:	4629      	mov	r1, r5
    d6c0:	bd30      	pop	{r4, r5, pc}
    d6c2:	fa21 f004 	lsr.w	r0, r1, r4
    d6c6:	4629      	mov	r1, r5
    d6c8:	bd30      	pop	{r4, r5, pc}
    d6ca:	f094 0f00 	teq	r4, #0
    d6ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    d6d2:	bf06      	itte	eq
    d6d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    d6d8:	3401      	addeq	r4, #1
    d6da:	3d01      	subne	r5, #1
    d6dc:	e74e      	b.n	d57c <__adddf3+0x8c>
    d6de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d6e2:	bf18      	it	ne
    d6e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d6e8:	d029      	beq.n	d73e <__adddf3+0x24e>
    d6ea:	ea94 0f05 	teq	r4, r5
    d6ee:	bf08      	it	eq
    d6f0:	ea90 0f02 	teqeq	r0, r2
    d6f4:	d005      	beq.n	d702 <__adddf3+0x212>
    d6f6:	ea54 0c00 	orrs.w	ip, r4, r0
    d6fa:	bf04      	itt	eq
    d6fc:	4619      	moveq	r1, r3
    d6fe:	4610      	moveq	r0, r2
    d700:	bd30      	pop	{r4, r5, pc}
    d702:	ea91 0f03 	teq	r1, r3
    d706:	bf1e      	ittt	ne
    d708:	2100      	movne	r1, #0
    d70a:	2000      	movne	r0, #0
    d70c:	bd30      	popne	{r4, r5, pc}
    d70e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    d712:	d105      	bne.n	d720 <__adddf3+0x230>
    d714:	0040      	lsls	r0, r0, #1
    d716:	4149      	adcs	r1, r1
    d718:	bf28      	it	cs
    d71a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    d71e:	bd30      	pop	{r4, r5, pc}
    d720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    d724:	bf3c      	itt	cc
    d726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    d72a:	bd30      	popcc	{r4, r5, pc}
    d72c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    d734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d738:	f04f 0000 	mov.w	r0, #0
    d73c:	bd30      	pop	{r4, r5, pc}
    d73e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d742:	bf1a      	itte	ne
    d744:	4619      	movne	r1, r3
    d746:	4610      	movne	r0, r2
    d748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    d74c:	bf1c      	itt	ne
    d74e:	460b      	movne	r3, r1
    d750:	4602      	movne	r2, r0
    d752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d756:	bf06      	itte	eq
    d758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    d75c:	ea91 0f03 	teqeq	r1, r3
    d760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    d764:	bd30      	pop	{r4, r5, pc}
    d766:	bf00      	nop

0000d768 <__aeabi_ui2d>:
    d768:	f090 0f00 	teq	r0, #0
    d76c:	bf04      	itt	eq
    d76e:	2100      	moveq	r1, #0
    d770:	4770      	bxeq	lr
    d772:	b530      	push	{r4, r5, lr}
    d774:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d778:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d77c:	f04f 0500 	mov.w	r5, #0
    d780:	f04f 0100 	mov.w	r1, #0
    d784:	e750      	b.n	d628 <__adddf3+0x138>
    d786:	bf00      	nop

0000d788 <__aeabi_i2d>:
    d788:	f090 0f00 	teq	r0, #0
    d78c:	bf04      	itt	eq
    d78e:	2100      	moveq	r1, #0
    d790:	4770      	bxeq	lr
    d792:	b530      	push	{r4, r5, lr}
    d794:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d798:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d79c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    d7a0:	bf48      	it	mi
    d7a2:	4240      	negmi	r0, r0
    d7a4:	f04f 0100 	mov.w	r1, #0
    d7a8:	e73e      	b.n	d628 <__adddf3+0x138>
    d7aa:	bf00      	nop

0000d7ac <__aeabi_f2d>:
    d7ac:	0042      	lsls	r2, r0, #1
    d7ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d7b2:	ea4f 0131 	mov.w	r1, r1, rrx
    d7b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d7ba:	bf1f      	itttt	ne
    d7bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d7c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d7c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d7c8:	4770      	bxne	lr
    d7ca:	f092 0f00 	teq	r2, #0
    d7ce:	bf14      	ite	ne
    d7d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d7d4:	4770      	bxeq	lr
    d7d6:	b530      	push	{r4, r5, lr}
    d7d8:	f44f 7460 	mov.w	r4, #896	; 0x380
    d7dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d7e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d7e4:	e720      	b.n	d628 <__adddf3+0x138>
    d7e6:	bf00      	nop

0000d7e8 <__aeabi_ul2d>:
    d7e8:	ea50 0201 	orrs.w	r2, r0, r1
    d7ec:	bf08      	it	eq
    d7ee:	4770      	bxeq	lr
    d7f0:	b530      	push	{r4, r5, lr}
    d7f2:	f04f 0500 	mov.w	r5, #0
    d7f6:	e00a      	b.n	d80e <__aeabi_l2d+0x16>

0000d7f8 <__aeabi_l2d>:
    d7f8:	ea50 0201 	orrs.w	r2, r0, r1
    d7fc:	bf08      	it	eq
    d7fe:	4770      	bxeq	lr
    d800:	b530      	push	{r4, r5, lr}
    d802:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d806:	d502      	bpl.n	d80e <__aeabi_l2d+0x16>
    d808:	4240      	negs	r0, r0
    d80a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d80e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d812:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d816:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d81a:	f43f aedc 	beq.w	d5d6 <__adddf3+0xe6>
    d81e:	f04f 0203 	mov.w	r2, #3
    d822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d826:	bf18      	it	ne
    d828:	3203      	addne	r2, #3
    d82a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d82e:	bf18      	it	ne
    d830:	3203      	addne	r2, #3
    d832:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d836:	f1c2 0320 	rsb	r3, r2, #32
    d83a:	fa00 fc03 	lsl.w	ip, r0, r3
    d83e:	fa20 f002 	lsr.w	r0, r0, r2
    d842:	fa01 fe03 	lsl.w	lr, r1, r3
    d846:	ea40 000e 	orr.w	r0, r0, lr
    d84a:	fa21 f102 	lsr.w	r1, r1, r2
    d84e:	4414      	add	r4, r2
    d850:	e6c1      	b.n	d5d6 <__adddf3+0xe6>
    d852:	bf00      	nop

0000d854 <__aeabi_dmul>:
    d854:	b570      	push	{r4, r5, r6, lr}
    d856:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d85a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    d85e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    d862:	bf1d      	ittte	ne
    d864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    d868:	ea94 0f0c 	teqne	r4, ip
    d86c:	ea95 0f0c 	teqne	r5, ip
    d870:	f000 f8de 	bleq	da30 <__aeabi_dmul+0x1dc>
    d874:	442c      	add	r4, r5
    d876:	ea81 0603 	eor.w	r6, r1, r3
    d87a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    d87e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    d882:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d886:	bf18      	it	ne
    d888:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d894:	d038      	beq.n	d908 <__aeabi_dmul+0xb4>
    d896:	fba0 ce02 	umull	ip, lr, r0, r2
    d89a:	f04f 0500 	mov.w	r5, #0
    d89e:	fbe1 e502 	umlal	lr, r5, r1, r2
    d8a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d8a6:	fbe0 e503 	umlal	lr, r5, r0, r3
    d8aa:	f04f 0600 	mov.w	r6, #0
    d8ae:	fbe1 5603 	umlal	r5, r6, r1, r3
    d8b2:	f09c 0f00 	teq	ip, #0
    d8b6:	bf18      	it	ne
    d8b8:	f04e 0e01 	orrne.w	lr, lr, #1
    d8bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d8c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d8c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d8c8:	d204      	bcs.n	d8d4 <__aeabi_dmul+0x80>
    d8ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    d8ce:	416d      	adcs	r5, r5
    d8d0:	eb46 0606 	adc.w	r6, r6, r6
    d8d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d8d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d8dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d8e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    d8e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    d8e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    d8ec:	bf88      	it	hi
    d8ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    d8f2:	d81e      	bhi.n	d932 <__aeabi_dmul+0xde>
    d8f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    d8f8:	bf08      	it	eq
    d8fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    d8fe:	f150 0000 	adcs.w	r0, r0, #0
    d902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d906:	bd70      	pop	{r4, r5, r6, pc}
    d908:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d90c:	ea46 0101 	orr.w	r1, r6, r1
    d910:	ea40 0002 	orr.w	r0, r0, r2
    d914:	ea81 0103 	eor.w	r1, r1, r3
    d918:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    d91c:	bfc2      	ittt	gt
    d91e:	ebd4 050c 	rsbsgt	r5, r4, ip
    d922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d926:	bd70      	popgt	{r4, r5, r6, pc}
    d928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d92c:	f04f 0e00 	mov.w	lr, #0
    d930:	3c01      	subs	r4, #1
    d932:	f300 80ab 	bgt.w	da8c <__aeabi_dmul+0x238>
    d936:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d93a:	bfde      	ittt	le
    d93c:	2000      	movle	r0, #0
    d93e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d942:	bd70      	pople	{r4, r5, r6, pc}
    d944:	f1c4 0400 	rsb	r4, r4, #0
    d948:	3c20      	subs	r4, #32
    d94a:	da35      	bge.n	d9b8 <__aeabi_dmul+0x164>
    d94c:	340c      	adds	r4, #12
    d94e:	dc1b      	bgt.n	d988 <__aeabi_dmul+0x134>
    d950:	f104 0414 	add.w	r4, r4, #20
    d954:	f1c4 0520 	rsb	r5, r4, #32
    d958:	fa00 f305 	lsl.w	r3, r0, r5
    d95c:	fa20 f004 	lsr.w	r0, r0, r4
    d960:	fa01 f205 	lsl.w	r2, r1, r5
    d964:	ea40 0002 	orr.w	r0, r0, r2
    d968:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d96c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d970:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d974:	fa21 f604 	lsr.w	r6, r1, r4
    d978:	eb42 0106 	adc.w	r1, r2, r6
    d97c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d980:	bf08      	it	eq
    d982:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d986:	bd70      	pop	{r4, r5, r6, pc}
    d988:	f1c4 040c 	rsb	r4, r4, #12
    d98c:	f1c4 0520 	rsb	r5, r4, #32
    d990:	fa00 f304 	lsl.w	r3, r0, r4
    d994:	fa20 f005 	lsr.w	r0, r0, r5
    d998:	fa01 f204 	lsl.w	r2, r1, r4
    d99c:	ea40 0002 	orr.w	r0, r0, r2
    d9a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d9a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d9a8:	f141 0100 	adc.w	r1, r1, #0
    d9ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d9b0:	bf08      	it	eq
    d9b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d9b6:	bd70      	pop	{r4, r5, r6, pc}
    d9b8:	f1c4 0520 	rsb	r5, r4, #32
    d9bc:	fa00 f205 	lsl.w	r2, r0, r5
    d9c0:	ea4e 0e02 	orr.w	lr, lr, r2
    d9c4:	fa20 f304 	lsr.w	r3, r0, r4
    d9c8:	fa01 f205 	lsl.w	r2, r1, r5
    d9cc:	ea43 0302 	orr.w	r3, r3, r2
    d9d0:	fa21 f004 	lsr.w	r0, r1, r4
    d9d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d9d8:	fa21 f204 	lsr.w	r2, r1, r4
    d9dc:	ea20 0002 	bic.w	r0, r0, r2
    d9e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d9e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    d9e8:	bf08      	it	eq
    d9ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d9ee:	bd70      	pop	{r4, r5, r6, pc}
    d9f0:	f094 0f00 	teq	r4, #0
    d9f4:	d10f      	bne.n	da16 <__aeabi_dmul+0x1c2>
    d9f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d9fa:	0040      	lsls	r0, r0, #1
    d9fc:	eb41 0101 	adc.w	r1, r1, r1
    da00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    da04:	bf08      	it	eq
    da06:	3c01      	subeq	r4, #1
    da08:	d0f7      	beq.n	d9fa <__aeabi_dmul+0x1a6>
    da0a:	ea41 0106 	orr.w	r1, r1, r6
    da0e:	f095 0f00 	teq	r5, #0
    da12:	bf18      	it	ne
    da14:	4770      	bxne	lr
    da16:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    da1a:	0052      	lsls	r2, r2, #1
    da1c:	eb43 0303 	adc.w	r3, r3, r3
    da20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    da24:	bf08      	it	eq
    da26:	3d01      	subeq	r5, #1
    da28:	d0f7      	beq.n	da1a <__aeabi_dmul+0x1c6>
    da2a:	ea43 0306 	orr.w	r3, r3, r6
    da2e:	4770      	bx	lr
    da30:	ea94 0f0c 	teq	r4, ip
    da34:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    da38:	bf18      	it	ne
    da3a:	ea95 0f0c 	teqne	r5, ip
    da3e:	d00c      	beq.n	da5a <__aeabi_dmul+0x206>
    da40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    da44:	bf18      	it	ne
    da46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    da4a:	d1d1      	bne.n	d9f0 <__aeabi_dmul+0x19c>
    da4c:	ea81 0103 	eor.w	r1, r1, r3
    da50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    da54:	f04f 0000 	mov.w	r0, #0
    da58:	bd70      	pop	{r4, r5, r6, pc}
    da5a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    da5e:	bf06      	itte	eq
    da60:	4610      	moveq	r0, r2
    da62:	4619      	moveq	r1, r3
    da64:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    da68:	d019      	beq.n	da9e <__aeabi_dmul+0x24a>
    da6a:	ea94 0f0c 	teq	r4, ip
    da6e:	d102      	bne.n	da76 <__aeabi_dmul+0x222>
    da70:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    da74:	d113      	bne.n	da9e <__aeabi_dmul+0x24a>
    da76:	ea95 0f0c 	teq	r5, ip
    da7a:	d105      	bne.n	da88 <__aeabi_dmul+0x234>
    da7c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    da80:	bf1c      	itt	ne
    da82:	4610      	movne	r0, r2
    da84:	4619      	movne	r1, r3
    da86:	d10a      	bne.n	da9e <__aeabi_dmul+0x24a>
    da88:	ea81 0103 	eor.w	r1, r1, r3
    da8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    da90:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    da94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    da98:	f04f 0000 	mov.w	r0, #0
    da9c:	bd70      	pop	{r4, r5, r6, pc}
    da9e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    daa2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    daa6:	bd70      	pop	{r4, r5, r6, pc}

0000daa8 <__aeabi_ddiv>:
    daa8:	b570      	push	{r4, r5, r6, lr}
    daaa:	f04f 0cff 	mov.w	ip, #255	; 0xff
    daae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    dab2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    dab6:	bf1d      	ittte	ne
    dab8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    dabc:	ea94 0f0c 	teqne	r4, ip
    dac0:	ea95 0f0c 	teqne	r5, ip
    dac4:	f000 f8a7 	bleq	dc16 <__aeabi_ddiv+0x16e>
    dac8:	eba4 0405 	sub.w	r4, r4, r5
    dacc:	ea81 0e03 	eor.w	lr, r1, r3
    dad0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    dad4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    dad8:	f000 8088 	beq.w	dbec <__aeabi_ddiv+0x144>
    dadc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    dae0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    dae4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    dae8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    daec:	ea4f 2202 	mov.w	r2, r2, lsl #8
    daf0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    daf4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    daf8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    dafc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    db00:	429d      	cmp	r5, r3
    db02:	bf08      	it	eq
    db04:	4296      	cmpeq	r6, r2
    db06:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    db0a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    db0e:	d202      	bcs.n	db16 <__aeabi_ddiv+0x6e>
    db10:	085b      	lsrs	r3, r3, #1
    db12:	ea4f 0232 	mov.w	r2, r2, rrx
    db16:	1ab6      	subs	r6, r6, r2
    db18:	eb65 0503 	sbc.w	r5, r5, r3
    db1c:	085b      	lsrs	r3, r3, #1
    db1e:	ea4f 0232 	mov.w	r2, r2, rrx
    db22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    db26:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    db2a:	ebb6 0e02 	subs.w	lr, r6, r2
    db2e:	eb75 0e03 	sbcs.w	lr, r5, r3
    db32:	bf22      	ittt	cs
    db34:	1ab6      	subcs	r6, r6, r2
    db36:	4675      	movcs	r5, lr
    db38:	ea40 000c 	orrcs.w	r0, r0, ip
    db3c:	085b      	lsrs	r3, r3, #1
    db3e:	ea4f 0232 	mov.w	r2, r2, rrx
    db42:	ebb6 0e02 	subs.w	lr, r6, r2
    db46:	eb75 0e03 	sbcs.w	lr, r5, r3
    db4a:	bf22      	ittt	cs
    db4c:	1ab6      	subcs	r6, r6, r2
    db4e:	4675      	movcs	r5, lr
    db50:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    db54:	085b      	lsrs	r3, r3, #1
    db56:	ea4f 0232 	mov.w	r2, r2, rrx
    db5a:	ebb6 0e02 	subs.w	lr, r6, r2
    db5e:	eb75 0e03 	sbcs.w	lr, r5, r3
    db62:	bf22      	ittt	cs
    db64:	1ab6      	subcs	r6, r6, r2
    db66:	4675      	movcs	r5, lr
    db68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    db6c:	085b      	lsrs	r3, r3, #1
    db6e:	ea4f 0232 	mov.w	r2, r2, rrx
    db72:	ebb6 0e02 	subs.w	lr, r6, r2
    db76:	eb75 0e03 	sbcs.w	lr, r5, r3
    db7a:	bf22      	ittt	cs
    db7c:	1ab6      	subcs	r6, r6, r2
    db7e:	4675      	movcs	r5, lr
    db80:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    db84:	ea55 0e06 	orrs.w	lr, r5, r6
    db88:	d018      	beq.n	dbbc <__aeabi_ddiv+0x114>
    db8a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    db8e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    db92:	ea4f 1606 	mov.w	r6, r6, lsl #4
    db96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    db9a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    db9e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    dba2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    dba6:	d1c0      	bne.n	db2a <__aeabi_ddiv+0x82>
    dba8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    dbac:	d10b      	bne.n	dbc6 <__aeabi_ddiv+0x11e>
    dbae:	ea41 0100 	orr.w	r1, r1, r0
    dbb2:	f04f 0000 	mov.w	r0, #0
    dbb6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dbba:	e7b6      	b.n	db2a <__aeabi_ddiv+0x82>
    dbbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    dbc0:	bf04      	itt	eq
    dbc2:	4301      	orreq	r1, r0
    dbc4:	2000      	moveq	r0, #0
    dbc6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    dbca:	bf88      	it	hi
    dbcc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    dbd0:	f63f aeaf 	bhi.w	d932 <__aeabi_dmul+0xde>
    dbd4:	ebb5 0c03 	subs.w	ip, r5, r3
    dbd8:	bf04      	itt	eq
    dbda:	ebb6 0c02 	subseq.w	ip, r6, r2
    dbde:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    dbe2:	f150 0000 	adcs.w	r0, r0, #0
    dbe6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    dbea:	bd70      	pop	{r4, r5, r6, pc}
    dbec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    dbf0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    dbf4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    dbf8:	bfc2      	ittt	gt
    dbfa:	ebd4 050c 	rsbsgt	r5, r4, ip
    dbfe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    dc02:	bd70      	popgt	{r4, r5, r6, pc}
    dc04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    dc08:	f04f 0e00 	mov.w	lr, #0
    dc0c:	3c01      	subs	r4, #1
    dc0e:	e690      	b.n	d932 <__aeabi_dmul+0xde>
    dc10:	ea45 0e06 	orr.w	lr, r5, r6
    dc14:	e68d      	b.n	d932 <__aeabi_dmul+0xde>
    dc16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    dc1a:	ea94 0f0c 	teq	r4, ip
    dc1e:	bf08      	it	eq
    dc20:	ea95 0f0c 	teqeq	r5, ip
    dc24:	f43f af3b 	beq.w	da9e <__aeabi_dmul+0x24a>
    dc28:	ea94 0f0c 	teq	r4, ip
    dc2c:	d10a      	bne.n	dc44 <__aeabi_ddiv+0x19c>
    dc2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    dc32:	f47f af34 	bne.w	da9e <__aeabi_dmul+0x24a>
    dc36:	ea95 0f0c 	teq	r5, ip
    dc3a:	f47f af25 	bne.w	da88 <__aeabi_dmul+0x234>
    dc3e:	4610      	mov	r0, r2
    dc40:	4619      	mov	r1, r3
    dc42:	e72c      	b.n	da9e <__aeabi_dmul+0x24a>
    dc44:	ea95 0f0c 	teq	r5, ip
    dc48:	d106      	bne.n	dc58 <__aeabi_ddiv+0x1b0>
    dc4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    dc4e:	f43f aefd 	beq.w	da4c <__aeabi_dmul+0x1f8>
    dc52:	4610      	mov	r0, r2
    dc54:	4619      	mov	r1, r3
    dc56:	e722      	b.n	da9e <__aeabi_dmul+0x24a>
    dc58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    dc5c:	bf18      	it	ne
    dc5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    dc62:	f47f aec5 	bne.w	d9f0 <__aeabi_dmul+0x19c>
    dc66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    dc6a:	f47f af0d 	bne.w	da88 <__aeabi_dmul+0x234>
    dc6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    dc72:	f47f aeeb 	bne.w	da4c <__aeabi_dmul+0x1f8>
    dc76:	e712      	b.n	da9e <__aeabi_dmul+0x24a>

0000dc78 <__aeabi_d2f>:
    dc78:	ea4f 0241 	mov.w	r2, r1, lsl #1
    dc7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    dc80:	bf24      	itt	cs
    dc82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    dc86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    dc8a:	d90d      	bls.n	dca8 <__aeabi_d2f+0x30>
    dc8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    dc90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    dc94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    dc98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    dc9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    dca0:	bf08      	it	eq
    dca2:	f020 0001 	biceq.w	r0, r0, #1
    dca6:	4770      	bx	lr
    dca8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    dcac:	d121      	bne.n	dcf2 <__aeabi_d2f+0x7a>
    dcae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    dcb2:	bfbc      	itt	lt
    dcb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    dcb8:	4770      	bxlt	lr
    dcba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    dcbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
    dcc2:	f1c2 0218 	rsb	r2, r2, #24
    dcc6:	f1c2 0c20 	rsb	ip, r2, #32
    dcca:	fa10 f30c 	lsls.w	r3, r0, ip
    dcce:	fa20 f002 	lsr.w	r0, r0, r2
    dcd2:	bf18      	it	ne
    dcd4:	f040 0001 	orrne.w	r0, r0, #1
    dcd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    dcdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    dce0:	fa03 fc0c 	lsl.w	ip, r3, ip
    dce4:	ea40 000c 	orr.w	r0, r0, ip
    dce8:	fa23 f302 	lsr.w	r3, r3, r2
    dcec:	ea4f 0343 	mov.w	r3, r3, lsl #1
    dcf0:	e7cc      	b.n	dc8c <__aeabi_d2f+0x14>
    dcf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    dcf6:	d107      	bne.n	dd08 <__aeabi_d2f+0x90>
    dcf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    dcfc:	bf1e      	ittt	ne
    dcfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    dd02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    dd06:	4770      	bxne	lr
    dd08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    dd0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    dd10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dd14:	4770      	bx	lr
    dd16:	bf00      	nop

0000dd18 <__aeabi_frsub>:
    dd18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    dd1c:	e002      	b.n	dd24 <__addsf3>
    dd1e:	bf00      	nop

0000dd20 <__aeabi_fsub>:
    dd20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000dd24 <__addsf3>:
    dd24:	0042      	lsls	r2, r0, #1
    dd26:	bf1f      	itttt	ne
    dd28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    dd2c:	ea92 0f03 	teqne	r2, r3
    dd30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    dd34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    dd38:	d06a      	beq.n	de10 <__addsf3+0xec>
    dd3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    dd3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    dd42:	bfc1      	itttt	gt
    dd44:	18d2      	addgt	r2, r2, r3
    dd46:	4041      	eorgt	r1, r0
    dd48:	4048      	eorgt	r0, r1
    dd4a:	4041      	eorgt	r1, r0
    dd4c:	bfb8      	it	lt
    dd4e:	425b      	neglt	r3, r3
    dd50:	2b19      	cmp	r3, #25
    dd52:	bf88      	it	hi
    dd54:	4770      	bxhi	lr
    dd56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    dd5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dd5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    dd62:	bf18      	it	ne
    dd64:	4240      	negne	r0, r0
    dd66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    dd6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    dd6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    dd72:	bf18      	it	ne
    dd74:	4249      	negne	r1, r1
    dd76:	ea92 0f03 	teq	r2, r3
    dd7a:	d03f      	beq.n	ddfc <__addsf3+0xd8>
    dd7c:	f1a2 0201 	sub.w	r2, r2, #1
    dd80:	fa41 fc03 	asr.w	ip, r1, r3
    dd84:	eb10 000c 	adds.w	r0, r0, ip
    dd88:	f1c3 0320 	rsb	r3, r3, #32
    dd8c:	fa01 f103 	lsl.w	r1, r1, r3
    dd90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    dd94:	d502      	bpl.n	dd9c <__addsf3+0x78>
    dd96:	4249      	negs	r1, r1
    dd98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    dd9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    dda0:	d313      	bcc.n	ddca <__addsf3+0xa6>
    dda2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    dda6:	d306      	bcc.n	ddb6 <__addsf3+0x92>
    dda8:	0840      	lsrs	r0, r0, #1
    ddaa:	ea4f 0131 	mov.w	r1, r1, rrx
    ddae:	f102 0201 	add.w	r2, r2, #1
    ddb2:	2afe      	cmp	r2, #254	; 0xfe
    ddb4:	d251      	bcs.n	de5a <__addsf3+0x136>
    ddb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    ddba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ddbe:	bf08      	it	eq
    ddc0:	f020 0001 	biceq.w	r0, r0, #1
    ddc4:	ea40 0003 	orr.w	r0, r0, r3
    ddc8:	4770      	bx	lr
    ddca:	0049      	lsls	r1, r1, #1
    ddcc:	eb40 0000 	adc.w	r0, r0, r0
    ddd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    ddd4:	f1a2 0201 	sub.w	r2, r2, #1
    ddd8:	d1ed      	bne.n	ddb6 <__addsf3+0x92>
    ddda:	fab0 fc80 	clz	ip, r0
    ddde:	f1ac 0c08 	sub.w	ip, ip, #8
    dde2:	ebb2 020c 	subs.w	r2, r2, ip
    dde6:	fa00 f00c 	lsl.w	r0, r0, ip
    ddea:	bfaa      	itet	ge
    ddec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    ddf0:	4252      	neglt	r2, r2
    ddf2:	4318      	orrge	r0, r3
    ddf4:	bfbc      	itt	lt
    ddf6:	40d0      	lsrlt	r0, r2
    ddf8:	4318      	orrlt	r0, r3
    ddfa:	4770      	bx	lr
    ddfc:	f092 0f00 	teq	r2, #0
    de00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    de04:	bf06      	itte	eq
    de06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    de0a:	3201      	addeq	r2, #1
    de0c:	3b01      	subne	r3, #1
    de0e:	e7b5      	b.n	dd7c <__addsf3+0x58>
    de10:	ea4f 0341 	mov.w	r3, r1, lsl #1
    de14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    de18:	bf18      	it	ne
    de1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    de1e:	d021      	beq.n	de64 <__addsf3+0x140>
    de20:	ea92 0f03 	teq	r2, r3
    de24:	d004      	beq.n	de30 <__addsf3+0x10c>
    de26:	f092 0f00 	teq	r2, #0
    de2a:	bf08      	it	eq
    de2c:	4608      	moveq	r0, r1
    de2e:	4770      	bx	lr
    de30:	ea90 0f01 	teq	r0, r1
    de34:	bf1c      	itt	ne
    de36:	2000      	movne	r0, #0
    de38:	4770      	bxne	lr
    de3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    de3e:	d104      	bne.n	de4a <__addsf3+0x126>
    de40:	0040      	lsls	r0, r0, #1
    de42:	bf28      	it	cs
    de44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    de48:	4770      	bx	lr
    de4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    de4e:	bf3c      	itt	cc
    de50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    de54:	4770      	bxcc	lr
    de56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    de5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    de5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    de62:	4770      	bx	lr
    de64:	ea7f 6222 	mvns.w	r2, r2, asr #24
    de68:	bf16      	itet	ne
    de6a:	4608      	movne	r0, r1
    de6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    de70:	4601      	movne	r1, r0
    de72:	0242      	lsls	r2, r0, #9
    de74:	bf06      	itte	eq
    de76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    de7a:	ea90 0f01 	teqeq	r0, r1
    de7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    de82:	4770      	bx	lr

0000de84 <__aeabi_ui2f>:
    de84:	f04f 0300 	mov.w	r3, #0
    de88:	e004      	b.n	de94 <__aeabi_i2f+0x8>
    de8a:	bf00      	nop

0000de8c <__aeabi_i2f>:
    de8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    de90:	bf48      	it	mi
    de92:	4240      	negmi	r0, r0
    de94:	ea5f 0c00 	movs.w	ip, r0
    de98:	bf08      	it	eq
    de9a:	4770      	bxeq	lr
    de9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    dea0:	4601      	mov	r1, r0
    dea2:	f04f 0000 	mov.w	r0, #0
    dea6:	e01c      	b.n	dee2 <__aeabi_l2f+0x2a>

0000dea8 <__aeabi_ul2f>:
    dea8:	ea50 0201 	orrs.w	r2, r0, r1
    deac:	bf08      	it	eq
    deae:	4770      	bxeq	lr
    deb0:	f04f 0300 	mov.w	r3, #0
    deb4:	e00a      	b.n	decc <__aeabi_l2f+0x14>
    deb6:	bf00      	nop

0000deb8 <__aeabi_l2f>:
    deb8:	ea50 0201 	orrs.w	r2, r0, r1
    debc:	bf08      	it	eq
    debe:	4770      	bxeq	lr
    dec0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    dec4:	d502      	bpl.n	decc <__aeabi_l2f+0x14>
    dec6:	4240      	negs	r0, r0
    dec8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    decc:	ea5f 0c01 	movs.w	ip, r1
    ded0:	bf02      	ittt	eq
    ded2:	4684      	moveq	ip, r0
    ded4:	4601      	moveq	r1, r0
    ded6:	2000      	moveq	r0, #0
    ded8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    dedc:	bf08      	it	eq
    dede:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    dee2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    dee6:	fabc f28c 	clz	r2, ip
    deea:	3a08      	subs	r2, #8
    deec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    def0:	db10      	blt.n	df14 <__aeabi_l2f+0x5c>
    def2:	fa01 fc02 	lsl.w	ip, r1, r2
    def6:	4463      	add	r3, ip
    def8:	fa00 fc02 	lsl.w	ip, r0, r2
    defc:	f1c2 0220 	rsb	r2, r2, #32
    df00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    df04:	fa20 f202 	lsr.w	r2, r0, r2
    df08:	eb43 0002 	adc.w	r0, r3, r2
    df0c:	bf08      	it	eq
    df0e:	f020 0001 	biceq.w	r0, r0, #1
    df12:	4770      	bx	lr
    df14:	f102 0220 	add.w	r2, r2, #32
    df18:	fa01 fc02 	lsl.w	ip, r1, r2
    df1c:	f1c2 0220 	rsb	r2, r2, #32
    df20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    df24:	fa21 f202 	lsr.w	r2, r1, r2
    df28:	eb43 0002 	adc.w	r0, r3, r2
    df2c:	bf08      	it	eq
    df2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    df32:	4770      	bx	lr

0000df34 <__aeabi_fmul>:
    df34:	f04f 0cff 	mov.w	ip, #255	; 0xff
    df38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    df3c:	bf1e      	ittt	ne
    df3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    df42:	ea92 0f0c 	teqne	r2, ip
    df46:	ea93 0f0c 	teqne	r3, ip
    df4a:	d06f      	beq.n	e02c <__aeabi_fmul+0xf8>
    df4c:	441a      	add	r2, r3
    df4e:	ea80 0c01 	eor.w	ip, r0, r1
    df52:	0240      	lsls	r0, r0, #9
    df54:	bf18      	it	ne
    df56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    df5a:	d01e      	beq.n	df9a <__aeabi_fmul+0x66>
    df5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    df60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    df64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    df68:	fba0 3101 	umull	r3, r1, r0, r1
    df6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    df70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    df74:	bf3e      	ittt	cc
    df76:	0049      	lslcc	r1, r1, #1
    df78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    df7c:	005b      	lslcc	r3, r3, #1
    df7e:	ea40 0001 	orr.w	r0, r0, r1
    df82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    df86:	2afd      	cmp	r2, #253	; 0xfd
    df88:	d81d      	bhi.n	dfc6 <__aeabi_fmul+0x92>
    df8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    df8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    df92:	bf08      	it	eq
    df94:	f020 0001 	biceq.w	r0, r0, #1
    df98:	4770      	bx	lr
    df9a:	f090 0f00 	teq	r0, #0
    df9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    dfa2:	bf08      	it	eq
    dfa4:	0249      	lsleq	r1, r1, #9
    dfa6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    dfaa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    dfae:	3a7f      	subs	r2, #127	; 0x7f
    dfb0:	bfc2      	ittt	gt
    dfb2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    dfb6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    dfba:	4770      	bxgt	lr
    dfbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dfc0:	f04f 0300 	mov.w	r3, #0
    dfc4:	3a01      	subs	r2, #1
    dfc6:	dc5d      	bgt.n	e084 <__aeabi_fmul+0x150>
    dfc8:	f112 0f19 	cmn.w	r2, #25
    dfcc:	bfdc      	itt	le
    dfce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    dfd2:	4770      	bxle	lr
    dfd4:	f1c2 0200 	rsb	r2, r2, #0
    dfd8:	0041      	lsls	r1, r0, #1
    dfda:	fa21 f102 	lsr.w	r1, r1, r2
    dfde:	f1c2 0220 	rsb	r2, r2, #32
    dfe2:	fa00 fc02 	lsl.w	ip, r0, r2
    dfe6:	ea5f 0031 	movs.w	r0, r1, rrx
    dfea:	f140 0000 	adc.w	r0, r0, #0
    dfee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    dff2:	bf08      	it	eq
    dff4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    dff8:	4770      	bx	lr
    dffa:	f092 0f00 	teq	r2, #0
    dffe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    e002:	bf02      	ittt	eq
    e004:	0040      	lsleq	r0, r0, #1
    e006:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    e00a:	3a01      	subeq	r2, #1
    e00c:	d0f9      	beq.n	e002 <__aeabi_fmul+0xce>
    e00e:	ea40 000c 	orr.w	r0, r0, ip
    e012:	f093 0f00 	teq	r3, #0
    e016:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    e01a:	bf02      	ittt	eq
    e01c:	0049      	lsleq	r1, r1, #1
    e01e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    e022:	3b01      	subeq	r3, #1
    e024:	d0f9      	beq.n	e01a <__aeabi_fmul+0xe6>
    e026:	ea41 010c 	orr.w	r1, r1, ip
    e02a:	e78f      	b.n	df4c <__aeabi_fmul+0x18>
    e02c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    e030:	ea92 0f0c 	teq	r2, ip
    e034:	bf18      	it	ne
    e036:	ea93 0f0c 	teqne	r3, ip
    e03a:	d00a      	beq.n	e052 <__aeabi_fmul+0x11e>
    e03c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    e040:	bf18      	it	ne
    e042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    e046:	d1d8      	bne.n	dffa <__aeabi_fmul+0xc6>
    e048:	ea80 0001 	eor.w	r0, r0, r1
    e04c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    e050:	4770      	bx	lr
    e052:	f090 0f00 	teq	r0, #0
    e056:	bf17      	itett	ne
    e058:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    e05c:	4608      	moveq	r0, r1
    e05e:	f091 0f00 	teqne	r1, #0
    e062:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    e066:	d014      	beq.n	e092 <__aeabi_fmul+0x15e>
    e068:	ea92 0f0c 	teq	r2, ip
    e06c:	d101      	bne.n	e072 <__aeabi_fmul+0x13e>
    e06e:	0242      	lsls	r2, r0, #9
    e070:	d10f      	bne.n	e092 <__aeabi_fmul+0x15e>
    e072:	ea93 0f0c 	teq	r3, ip
    e076:	d103      	bne.n	e080 <__aeabi_fmul+0x14c>
    e078:	024b      	lsls	r3, r1, #9
    e07a:	bf18      	it	ne
    e07c:	4608      	movne	r0, r1
    e07e:	d108      	bne.n	e092 <__aeabi_fmul+0x15e>
    e080:	ea80 0001 	eor.w	r0, r0, r1
    e084:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    e088:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    e08c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    e090:	4770      	bx	lr
    e092:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    e096:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    e09a:	4770      	bx	lr

0000e09c <__aeabi_fdiv>:
    e09c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    e0a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    e0a4:	bf1e      	ittt	ne
    e0a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    e0aa:	ea92 0f0c 	teqne	r2, ip
    e0ae:	ea93 0f0c 	teqne	r3, ip
    e0b2:	d069      	beq.n	e188 <__aeabi_fdiv+0xec>
    e0b4:	eba2 0203 	sub.w	r2, r2, r3
    e0b8:	ea80 0c01 	eor.w	ip, r0, r1
    e0bc:	0249      	lsls	r1, r1, #9
    e0be:	ea4f 2040 	mov.w	r0, r0, lsl #9
    e0c2:	d037      	beq.n	e134 <__aeabi_fdiv+0x98>
    e0c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e0c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    e0cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    e0d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    e0d4:	428b      	cmp	r3, r1
    e0d6:	bf38      	it	cc
    e0d8:	005b      	lslcc	r3, r3, #1
    e0da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    e0de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    e0e2:	428b      	cmp	r3, r1
    e0e4:	bf24      	itt	cs
    e0e6:	1a5b      	subcs	r3, r3, r1
    e0e8:	ea40 000c 	orrcs.w	r0, r0, ip
    e0ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    e0f0:	bf24      	itt	cs
    e0f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    e0f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    e0fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    e0fe:	bf24      	itt	cs
    e100:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    e104:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    e108:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    e10c:	bf24      	itt	cs
    e10e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    e112:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    e116:	011b      	lsls	r3, r3, #4
    e118:	bf18      	it	ne
    e11a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    e11e:	d1e0      	bne.n	e0e2 <__aeabi_fdiv+0x46>
    e120:	2afd      	cmp	r2, #253	; 0xfd
    e122:	f63f af50 	bhi.w	dfc6 <__aeabi_fmul+0x92>
    e126:	428b      	cmp	r3, r1
    e128:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    e12c:	bf08      	it	eq
    e12e:	f020 0001 	biceq.w	r0, r0, #1
    e132:	4770      	bx	lr
    e134:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    e138:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    e13c:	327f      	adds	r2, #127	; 0x7f
    e13e:	bfc2      	ittt	gt
    e140:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    e144:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    e148:	4770      	bxgt	lr
    e14a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    e14e:	f04f 0300 	mov.w	r3, #0
    e152:	3a01      	subs	r2, #1
    e154:	e737      	b.n	dfc6 <__aeabi_fmul+0x92>
    e156:	f092 0f00 	teq	r2, #0
    e15a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    e15e:	bf02      	ittt	eq
    e160:	0040      	lsleq	r0, r0, #1
    e162:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    e166:	3a01      	subeq	r2, #1
    e168:	d0f9      	beq.n	e15e <__aeabi_fdiv+0xc2>
    e16a:	ea40 000c 	orr.w	r0, r0, ip
    e16e:	f093 0f00 	teq	r3, #0
    e172:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    e176:	bf02      	ittt	eq
    e178:	0049      	lsleq	r1, r1, #1
    e17a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    e17e:	3b01      	subeq	r3, #1
    e180:	d0f9      	beq.n	e176 <__aeabi_fdiv+0xda>
    e182:	ea41 010c 	orr.w	r1, r1, ip
    e186:	e795      	b.n	e0b4 <__aeabi_fdiv+0x18>
    e188:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    e18c:	ea92 0f0c 	teq	r2, ip
    e190:	d108      	bne.n	e1a4 <__aeabi_fdiv+0x108>
    e192:	0242      	lsls	r2, r0, #9
    e194:	f47f af7d 	bne.w	e092 <__aeabi_fmul+0x15e>
    e198:	ea93 0f0c 	teq	r3, ip
    e19c:	f47f af70 	bne.w	e080 <__aeabi_fmul+0x14c>
    e1a0:	4608      	mov	r0, r1
    e1a2:	e776      	b.n	e092 <__aeabi_fmul+0x15e>
    e1a4:	ea93 0f0c 	teq	r3, ip
    e1a8:	d104      	bne.n	e1b4 <__aeabi_fdiv+0x118>
    e1aa:	024b      	lsls	r3, r1, #9
    e1ac:	f43f af4c 	beq.w	e048 <__aeabi_fmul+0x114>
    e1b0:	4608      	mov	r0, r1
    e1b2:	e76e      	b.n	e092 <__aeabi_fmul+0x15e>
    e1b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    e1b8:	bf18      	it	ne
    e1ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    e1be:	d1ca      	bne.n	e156 <__aeabi_fdiv+0xba>
    e1c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    e1c4:	f47f af5c 	bne.w	e080 <__aeabi_fmul+0x14c>
    e1c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    e1cc:	f47f af3c 	bne.w	e048 <__aeabi_fmul+0x114>
    e1d0:	e75f      	b.n	e092 <__aeabi_fmul+0x15e>
    e1d2:	bf00      	nop

0000e1d4 <__gesf2>:
    e1d4:	f04f 3cff 	mov.w	ip, #4294967295
    e1d8:	e006      	b.n	e1e8 <__cmpsf2+0x4>
    e1da:	bf00      	nop

0000e1dc <__lesf2>:
    e1dc:	f04f 0c01 	mov.w	ip, #1
    e1e0:	e002      	b.n	e1e8 <__cmpsf2+0x4>
    e1e2:	bf00      	nop

0000e1e4 <__cmpsf2>:
    e1e4:	f04f 0c01 	mov.w	ip, #1
    e1e8:	f84d cd04 	str.w	ip, [sp, #-4]!
    e1ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
    e1f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    e1f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    e1f8:	bf18      	it	ne
    e1fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    e1fe:	d011      	beq.n	e224 <__cmpsf2+0x40>
    e200:	b001      	add	sp, #4
    e202:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    e206:	bf18      	it	ne
    e208:	ea90 0f01 	teqne	r0, r1
    e20c:	bf58      	it	pl
    e20e:	ebb2 0003 	subspl.w	r0, r2, r3
    e212:	bf88      	it	hi
    e214:	17c8      	asrhi	r0, r1, #31
    e216:	bf38      	it	cc
    e218:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    e21c:	bf18      	it	ne
    e21e:	f040 0001 	orrne.w	r0, r0, #1
    e222:	4770      	bx	lr
    e224:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    e228:	d102      	bne.n	e230 <__cmpsf2+0x4c>
    e22a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    e22e:	d105      	bne.n	e23c <__cmpsf2+0x58>
    e230:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    e234:	d1e4      	bne.n	e200 <__cmpsf2+0x1c>
    e236:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    e23a:	d0e1      	beq.n	e200 <__cmpsf2+0x1c>
    e23c:	f85d 0b04 	ldr.w	r0, [sp], #4
    e240:	4770      	bx	lr
    e242:	bf00      	nop

0000e244 <__aeabi_cfrcmple>:
    e244:	4684      	mov	ip, r0
    e246:	4608      	mov	r0, r1
    e248:	4661      	mov	r1, ip
    e24a:	e7ff      	b.n	e24c <__aeabi_cfcmpeq>

0000e24c <__aeabi_cfcmpeq>:
    e24c:	b50f      	push	{r0, r1, r2, r3, lr}
    e24e:	f7ff ffc9 	bl	e1e4 <__cmpsf2>
    e252:	2800      	cmp	r0, #0
    e254:	bf48      	it	mi
    e256:	f110 0f00 	cmnmi.w	r0, #0
    e25a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000e25c <__aeabi_fcmpeq>:
    e25c:	f84d ed08 	str.w	lr, [sp, #-8]!
    e260:	f7ff fff4 	bl	e24c <__aeabi_cfcmpeq>
    e264:	bf0c      	ite	eq
    e266:	2001      	moveq	r0, #1
    e268:	2000      	movne	r0, #0
    e26a:	f85d fb08 	ldr.w	pc, [sp], #8
    e26e:	bf00      	nop

0000e270 <__aeabi_fcmplt>:
    e270:	f84d ed08 	str.w	lr, [sp, #-8]!
    e274:	f7ff ffea 	bl	e24c <__aeabi_cfcmpeq>
    e278:	bf34      	ite	cc
    e27a:	2001      	movcc	r0, #1
    e27c:	2000      	movcs	r0, #0
    e27e:	f85d fb08 	ldr.w	pc, [sp], #8
    e282:	bf00      	nop

0000e284 <__aeabi_fcmple>:
    e284:	f84d ed08 	str.w	lr, [sp, #-8]!
    e288:	f7ff ffe0 	bl	e24c <__aeabi_cfcmpeq>
    e28c:	bf94      	ite	ls
    e28e:	2001      	movls	r0, #1
    e290:	2000      	movhi	r0, #0
    e292:	f85d fb08 	ldr.w	pc, [sp], #8
    e296:	bf00      	nop

0000e298 <__aeabi_fcmpge>:
    e298:	f84d ed08 	str.w	lr, [sp, #-8]!
    e29c:	f7ff ffd2 	bl	e244 <__aeabi_cfrcmple>
    e2a0:	bf94      	ite	ls
    e2a2:	2001      	movls	r0, #1
    e2a4:	2000      	movhi	r0, #0
    e2a6:	f85d fb08 	ldr.w	pc, [sp], #8
    e2aa:	bf00      	nop

0000e2ac <__aeabi_fcmpgt>:
    e2ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    e2b0:	f7ff ffc8 	bl	e244 <__aeabi_cfrcmple>
    e2b4:	bf34      	ite	cc
    e2b6:	2001      	movcc	r0, #1
    e2b8:	2000      	movcs	r0, #0
    e2ba:	f85d fb08 	ldr.w	pc, [sp], #8
    e2be:	bf00      	nop

0000e2c0 <__aeabi_f2iz>:
    e2c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    e2c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    e2c8:	d30f      	bcc.n	e2ea <__aeabi_f2iz+0x2a>
    e2ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
    e2ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    e2d2:	d90d      	bls.n	e2f0 <__aeabi_f2iz+0x30>
    e2d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    e2d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e2dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    e2e0:	fa23 f002 	lsr.w	r0, r3, r2
    e2e4:	bf18      	it	ne
    e2e6:	4240      	negne	r0, r0
    e2e8:	4770      	bx	lr
    e2ea:	f04f 0000 	mov.w	r0, #0
    e2ee:	4770      	bx	lr
    e2f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    e2f4:	d101      	bne.n	e2fa <__aeabi_f2iz+0x3a>
    e2f6:	0242      	lsls	r2, r0, #9
    e2f8:	d105      	bne.n	e306 <__aeabi_f2iz+0x46>
    e2fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    e2fe:	bf08      	it	eq
    e300:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    e304:	4770      	bx	lr
    e306:	f04f 0000 	mov.w	r0, #0
    e30a:	4770      	bx	lr

0000e30c <__aeabi_f2uiz>:
    e30c:	0042      	lsls	r2, r0, #1
    e30e:	d20e      	bcs.n	e32e <__aeabi_f2uiz+0x22>
    e310:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    e314:	d30b      	bcc.n	e32e <__aeabi_f2uiz+0x22>
    e316:	f04f 039e 	mov.w	r3, #158	; 0x9e
    e31a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    e31e:	d409      	bmi.n	e334 <__aeabi_f2uiz+0x28>
    e320:	ea4f 2300 	mov.w	r3, r0, lsl #8
    e324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e328:	fa23 f002 	lsr.w	r0, r3, r2
    e32c:	4770      	bx	lr
    e32e:	f04f 0000 	mov.w	r0, #0
    e332:	4770      	bx	lr
    e334:	f112 0f61 	cmn.w	r2, #97	; 0x61
    e338:	d101      	bne.n	e33e <__aeabi_f2uiz+0x32>
    e33a:	0242      	lsls	r2, r0, #9
    e33c:	d102      	bne.n	e344 <__aeabi_f2uiz+0x38>
    e33e:	f04f 30ff 	mov.w	r0, #4294967295
    e342:	4770      	bx	lr
    e344:	f04f 0000 	mov.w	r0, #0
    e348:	4770      	bx	lr
    e34a:	bf00      	nop

0000e34c <__libc_init_array>:
    e34c:	b570      	push	{r4, r5, r6, lr}
    e34e:	4e0f      	ldr	r6, [pc, #60]	; (e38c <__libc_init_array+0x40>)
    e350:	4d0f      	ldr	r5, [pc, #60]	; (e390 <__libc_init_array+0x44>)
    e352:	1b76      	subs	r6, r6, r5
    e354:	10b6      	asrs	r6, r6, #2
    e356:	bf18      	it	ne
    e358:	2400      	movne	r4, #0
    e35a:	d005      	beq.n	e368 <__libc_init_array+0x1c>
    e35c:	3401      	adds	r4, #1
    e35e:	f855 3b04 	ldr.w	r3, [r5], #4
    e362:	4798      	blx	r3
    e364:	42a6      	cmp	r6, r4
    e366:	d1f9      	bne.n	e35c <__libc_init_array+0x10>
    e368:	4e0a      	ldr	r6, [pc, #40]	; (e394 <__libc_init_array+0x48>)
    e36a:	4d0b      	ldr	r5, [pc, #44]	; (e398 <__libc_init_array+0x4c>)
    e36c:	1b76      	subs	r6, r6, r5
    e36e:	f003 f9c3 	bl	116f8 <_init>
    e372:	10b6      	asrs	r6, r6, #2
    e374:	bf18      	it	ne
    e376:	2400      	movne	r4, #0
    e378:	d006      	beq.n	e388 <__libc_init_array+0x3c>
    e37a:	3401      	adds	r4, #1
    e37c:	f855 3b04 	ldr.w	r3, [r5], #4
    e380:	4798      	blx	r3
    e382:	42a6      	cmp	r6, r4
    e384:	d1f9      	bne.n	e37a <__libc_init_array+0x2e>
    e386:	bd70      	pop	{r4, r5, r6, pc}
    e388:	bd70      	pop	{r4, r5, r6, pc}
    e38a:	bf00      	nop
    e38c:	00011704 	.word	0x00011704
    e390:	00011704 	.word	0x00011704
    e394:	00011718 	.word	0x00011718
    e398:	00011704 	.word	0x00011704

0000e39c <memset>:
    e39c:	b470      	push	{r4, r5, r6}
    e39e:	0784      	lsls	r4, r0, #30
    e3a0:	d046      	beq.n	e430 <memset+0x94>
    e3a2:	1e54      	subs	r4, r2, #1
    e3a4:	2a00      	cmp	r2, #0
    e3a6:	d041      	beq.n	e42c <memset+0x90>
    e3a8:	b2cd      	uxtb	r5, r1
    e3aa:	4603      	mov	r3, r0
    e3ac:	e002      	b.n	e3b4 <memset+0x18>
    e3ae:	1e62      	subs	r2, r4, #1
    e3b0:	b3e4      	cbz	r4, e42c <memset+0x90>
    e3b2:	4614      	mov	r4, r2
    e3b4:	f803 5b01 	strb.w	r5, [r3], #1
    e3b8:	079a      	lsls	r2, r3, #30
    e3ba:	d1f8      	bne.n	e3ae <memset+0x12>
    e3bc:	2c03      	cmp	r4, #3
    e3be:	d92e      	bls.n	e41e <memset+0x82>
    e3c0:	b2cd      	uxtb	r5, r1
    e3c2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e3c6:	2c0f      	cmp	r4, #15
    e3c8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e3cc:	d919      	bls.n	e402 <memset+0x66>
    e3ce:	f103 0210 	add.w	r2, r3, #16
    e3d2:	4626      	mov	r6, r4
    e3d4:	3e10      	subs	r6, #16
    e3d6:	2e0f      	cmp	r6, #15
    e3d8:	f842 5c10 	str.w	r5, [r2, #-16]
    e3dc:	f842 5c0c 	str.w	r5, [r2, #-12]
    e3e0:	f842 5c08 	str.w	r5, [r2, #-8]
    e3e4:	f842 5c04 	str.w	r5, [r2, #-4]
    e3e8:	f102 0210 	add.w	r2, r2, #16
    e3ec:	d8f2      	bhi.n	e3d4 <memset+0x38>
    e3ee:	f1a4 0210 	sub.w	r2, r4, #16
    e3f2:	f022 020f 	bic.w	r2, r2, #15
    e3f6:	f004 040f 	and.w	r4, r4, #15
    e3fa:	3210      	adds	r2, #16
    e3fc:	2c03      	cmp	r4, #3
    e3fe:	4413      	add	r3, r2
    e400:	d90d      	bls.n	e41e <memset+0x82>
    e402:	461e      	mov	r6, r3
    e404:	4622      	mov	r2, r4
    e406:	3a04      	subs	r2, #4
    e408:	2a03      	cmp	r2, #3
    e40a:	f846 5b04 	str.w	r5, [r6], #4
    e40e:	d8fa      	bhi.n	e406 <memset+0x6a>
    e410:	1f22      	subs	r2, r4, #4
    e412:	f022 0203 	bic.w	r2, r2, #3
    e416:	3204      	adds	r2, #4
    e418:	4413      	add	r3, r2
    e41a:	f004 0403 	and.w	r4, r4, #3
    e41e:	b12c      	cbz	r4, e42c <memset+0x90>
    e420:	b2c9      	uxtb	r1, r1
    e422:	441c      	add	r4, r3
    e424:	f803 1b01 	strb.w	r1, [r3], #1
    e428:	42a3      	cmp	r3, r4
    e42a:	d1fb      	bne.n	e424 <memset+0x88>
    e42c:	bc70      	pop	{r4, r5, r6}
    e42e:	4770      	bx	lr
    e430:	4614      	mov	r4, r2
    e432:	4603      	mov	r3, r0
    e434:	e7c2      	b.n	e3bc <memset+0x20>
    e436:	bf00      	nop

0000e438 <random>:
    e438:	b410      	push	{r4}
    e43a:	4b0c      	ldr	r3, [pc, #48]	; (e46c <random+0x34>)
    e43c:	4c0c      	ldr	r4, [pc, #48]	; (e470 <random+0x38>)
    e43e:	6819      	ldr	r1, [r3, #0]
    e440:	4a0c      	ldr	r2, [pc, #48]	; (e474 <random+0x3c>)
    e442:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
    e446:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
    e44a:	fb04 f403 	mul.w	r4, r4, r3
    e44e:	fb02 4000 	mla	r0, r2, r0, r4
    e452:	fba3 2302 	umull	r2, r3, r3, r2
    e456:	4403      	add	r3, r0
    e458:	3201      	adds	r2, #1
    e45a:	f143 0300 	adc.w	r3, r3, #0
    e45e:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    e462:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    e466:	bc10      	pop	{r4}
    e468:	4770      	bx	lr
    e46a:	bf00      	nop
    e46c:	1fff8c68 	.word	0x1fff8c68
    e470:	5851f42d 	.word	0x5851f42d
    e474:	4c957f2d 	.word	0x4c957f2d
    e478:	ffffffff 	.word	0xffffffff
    e47c:	ffffffff 	.word	0xffffffff

0000e480 <strlen>:
    e480:	f890 f000 	pld	[r0]
    e484:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e488:	f020 0107 	bic.w	r1, r0, #7
    e48c:	f06f 0c00 	mvn.w	ip, #0
    e490:	f010 0407 	ands.w	r4, r0, #7
    e494:	f891 f020 	pld	[r1, #32]
    e498:	f040 8049 	bne.w	e52e <strlen+0xae>
    e49c:	f04f 0400 	mov.w	r4, #0
    e4a0:	f06f 0007 	mvn.w	r0, #7
    e4a4:	e9d1 2300 	ldrd	r2, r3, [r1]
    e4a8:	f891 f040 	pld	[r1, #64]	; 0x40
    e4ac:	f100 0008 	add.w	r0, r0, #8
    e4b0:	fa82 f24c 	uadd8	r2, r2, ip
    e4b4:	faa4 f28c 	sel	r2, r4, ip
    e4b8:	fa83 f34c 	uadd8	r3, r3, ip
    e4bc:	faa2 f38c 	sel	r3, r2, ip
    e4c0:	bb4b      	cbnz	r3, e516 <strlen+0x96>
    e4c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e4c6:	fa82 f24c 	uadd8	r2, r2, ip
    e4ca:	f100 0008 	add.w	r0, r0, #8
    e4ce:	faa4 f28c 	sel	r2, r4, ip
    e4d2:	fa83 f34c 	uadd8	r3, r3, ip
    e4d6:	faa2 f38c 	sel	r3, r2, ip
    e4da:	b9e3      	cbnz	r3, e516 <strlen+0x96>
    e4dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e4e0:	fa82 f24c 	uadd8	r2, r2, ip
    e4e4:	f100 0008 	add.w	r0, r0, #8
    e4e8:	faa4 f28c 	sel	r2, r4, ip
    e4ec:	fa83 f34c 	uadd8	r3, r3, ip
    e4f0:	faa2 f38c 	sel	r3, r2, ip
    e4f4:	b97b      	cbnz	r3, e516 <strlen+0x96>
    e4f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e4fa:	f101 0120 	add.w	r1, r1, #32
    e4fe:	fa82 f24c 	uadd8	r2, r2, ip
    e502:	f100 0008 	add.w	r0, r0, #8
    e506:	faa4 f28c 	sel	r2, r4, ip
    e50a:	fa83 f34c 	uadd8	r3, r3, ip
    e50e:	faa2 f38c 	sel	r3, r2, ip
    e512:	2b00      	cmp	r3, #0
    e514:	d0c6      	beq.n	e4a4 <strlen+0x24>
    e516:	2a00      	cmp	r2, #0
    e518:	bf04      	itt	eq
    e51a:	3004      	addeq	r0, #4
    e51c:	461a      	moveq	r2, r3
    e51e:	ba12      	rev	r2, r2
    e520:	fab2 f282 	clz	r2, r2
    e524:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e528:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e52c:	4770      	bx	lr
    e52e:	e9d1 2300 	ldrd	r2, r3, [r1]
    e532:	f004 0503 	and.w	r5, r4, #3
    e536:	f1c4 0000 	rsb	r0, r4, #0
    e53a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e53e:	f014 0f04 	tst.w	r4, #4
    e542:	f891 f040 	pld	[r1, #64]	; 0x40
    e546:	fa0c f505 	lsl.w	r5, ip, r5
    e54a:	ea62 0205 	orn	r2, r2, r5
    e54e:	bf1c      	itt	ne
    e550:	ea63 0305 	ornne	r3, r3, r5
    e554:	4662      	movne	r2, ip
    e556:	f04f 0400 	mov.w	r4, #0
    e55a:	e7a9      	b.n	e4b0 <strlen+0x30>

0000e55c <register_fini>:
    e55c:	4b02      	ldr	r3, [pc, #8]	; (e568 <register_fini+0xc>)
    e55e:	b113      	cbz	r3, e566 <register_fini+0xa>
    e560:	4802      	ldr	r0, [pc, #8]	; (e56c <register_fini+0x10>)
    e562:	f7fc bc7d 	b.w	ae60 <atexit>
    e566:	4770      	bx	lr
    e568:	00000000 	.word	0x00000000
    e56c:	0000e571 	.word	0x0000e571

0000e570 <__libc_fini_array>:
    e570:	b538      	push	{r3, r4, r5, lr}
    e572:	4d07      	ldr	r5, [pc, #28]	; (e590 <__libc_fini_array+0x20>)
    e574:	4c07      	ldr	r4, [pc, #28]	; (e594 <__libc_fini_array+0x24>)
    e576:	1b2c      	subs	r4, r5, r4
    e578:	10a4      	asrs	r4, r4, #2
    e57a:	d005      	beq.n	e588 <__libc_fini_array+0x18>
    e57c:	3c01      	subs	r4, #1
    e57e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    e582:	4798      	blx	r3
    e584:	2c00      	cmp	r4, #0
    e586:	d1f9      	bne.n	e57c <__libc_fini_array+0xc>
    e588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e58c:	f003 b8c4 	b.w	11718 <__init_array_end>
	...

0000e598 <vtable for APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>>:
	...
    e5a0:	06f9 0000 07bd 0000 05c1 0000 05fd 0000     ................
    e5b0:	046d 0000 0471 0000 a279 0000               m...q...y...

0000e5bc <stratosphere_sunset_gp>:
    e5bc:	0100 0902 0104 0902 0108 0a02 010d 0b02     ................
    e5cc:	0111 0b02 0115 0d03 011a 0f03 011e 1003     ................
    e5dc:	0123 1204 0127 1304 012b 1504 0130 1705     #...'...+...0...
    e5ec:	0134 1b05 0139 2006 013d 2607 0141 3109     4...9.. =..&A..1
    e5fc:	0146 3d0b 014a 5011 014f 6717 0153 871f     F..=J..PO..gS...
    e60c:	0257 ac2a 045c be30 0960 d236 0b65 d637     W.*.\.0.`.6.e.7.
    e61c:	0d69 dd3a 106d db3c 1372 d83e 1876 d242     i.:.m.<.r.>.v.B.
    e62c:	1e7b c945 237f b446 2783 a246 4088 9054     {.E..#F..'F..@T.
    e63c:	618c 8061 9491 7b79 d295 7792 b899 5c7a     .aa...y{...w..z\
    e64c:	9f9e 4564 85a2 2144 6ea7 0b2a 98ab 0635     ..dE..D!.n*...5.
    e65c:	cbaf 0341 deb4 0563 f2b8 078e debd 057a     ..A...c.......z.
    e66c:	cbc1 0369 d0c5 0149 d2ca 0130 dece 012d     ..i...I...0...-.
    e67c:	ead3 012a 96d7 0117 56db 010a 23e0 0103     ..*......V...#..
    e68c:	09e4 0101 04e9 0101 01ed 0101 01f1 0101     ................
    e69c:	01f6 0101 01fa 0101 01ff 0101               ............

0000e6a8 <Orange_to_Purple_gp>:
    e6a8:	d000 0132 927f 2d1b 61ff b20c 5328 2029     ..2....-.a..(S) 
    e6b8:	6843 6e61 6567 6d20 646f 7365 093a 0000     Change modes:...
    e6c8:	5228 2029 6152 646e 6d6f 4d20 646f 3a65     (R) Random Mode:
    e6d8:	0009 0000 5128 2029 6843 6e61 6567 5020     ....(Q) Change P
    e6e8:	6c61 7465 6574 3a73 0009 0000 6f4d 6564     alettes:....Mode
    e6f8:	6320 6168 676e 2065 756e 626d 7265 093a      change number:.
    e708:	0000 0000 7552 6e6e 6e69 2067 6974 656d     ....Running time
    e718:	093a 0009 206d 0000 0073 0000 7953 7473     :...m ..s...Syst
    e728:	6d65 7420 6d69 3a65 0909 0000 7c7c 2820     em time:....|| (
    e738:	2950 5020 6c61 7465 6574 2820 0000 0000     P) Palette (....
    e748:	2029 0000 6269 6a5f 6c75 3130 675f 0070     ) ..ib_jul01_gp.
    e758:	6772 5f69 3531 675f 0070 0000 6e41 6c61     rgi_15_gp...Anal
    e768:	676f 756f 5f73 5f31 7067 0000 7365 705f     ogous_1_gp..es_p
    e778:	6e69 736b 6c70 7361 5f68 3830 675f 0070     inksplash_08_gp.
    e788:	7365 705f 6e69 736b 6c70 7361 5f68 3730     es_pinksplash_07
    e798:	675f 0070 6f43 6172 5f6c 6572 6665 675f     _gp.Coral_reef_g
    e7a8:	0070 0000 7365 6f5f 6563 6e61 625f 6572     p...es_ocean_bre
    e7b8:	7a65 5f65 3630 5f38 7067 0000 7365 6f5f     eze_068_gp..es_o
    e7c8:	6563 6e61 625f 6572 7a65 5f65 3330 5f36     cean_breeze_036_
    e7d8:	7067 0000 7365 6c5f 6e61 7364 6163 6570     gp..es_landscape
    e7e8:	365f 5f34 7067 0000 7365 6c5f 6e61 7364     _64_gp..es_lands
    e7f8:	6163 6570 335f 5f33 7067 0000 6172 6e69     cape_33_gp..rain
    e808:	6f62 7377 6568 6272 7465 675f 0070 0000     bowsherbet_gp...
    e818:	7267 3536 685f 6c75 5f74 7067 0000 0000     gr65_hult_gp....
    e828:	7267 3436 685f 6c75 5f74 7067 0000 0000     gr64_hult_gp....
    e838:	4d47 5f54 7264 7779 7465 675f 0070 0000     GMT_drywet_gp...
    e848:	6269 3531 675f 0070 7546 6373 6968 5f61     ib15_gp.Fuschia_
    e858:	5f37 7067 0000 0000 7365 655f 656d 6172     7_gp....es_emera
    e868:	646c 645f 6172 6f67 5f6e 3830 675f 0070     ld_dragon_08_gp.
    e878:	616c 6176 675f 0070 6966 6572 675f 0070     lava_gp.fire_gp.
    e888:	6f43 6f6c 6672 6c75 5f6c 7067 0000 0000     Colorfull_gp....
    e898:	614d 6567 746e 5f61 7645 6e65 6e69 5f67     Magenta_Evening_
    e8a8:	7067 0000 7553 736e 7465 525f 6165 5f6c     gp..Sunset_Real_
    e8b8:	7067 0000 7365 615f 7475 6d75 5f6e 3931     gp..es_autumn_19
    e8c8:	675f 0070 6c42 6361 5f4b 6c42 6575 4d5f     _gp.BlacK_Blue_M
    e8d8:	6761 6e65 6174 575f 6968 6574 675f 0070     agenta_White_gp.
    e8e8:	6c42 6361 5f4b 614d 6567 746e 5f61 6552     BlacK_Magenta_Re
    e8f8:	5f64 7067 0000 0000 6c42 6361 5f4b 6552     d_gp....BlacK_Re
    e908:	5f64 614d 6567 746e 5f61 6559 6c6c 776f     d_Magenta_Yellow
    e918:	675f 0070 6c42 6575 435f 6179 5f6e 6559     _gp.Blue_Cyan_Ye
    e928:	6c6c 776f 675f 0070 6862 3177 675f 6572     llow_gp.bhw1_gre
    e938:	6e65 5f79 7067 0000 6862 3177 325f 5f36     eny_gp..bhw1_26_
    e948:	7067 0000 6862 3177 325f 5f38 7067 0000     gp..bhw1_28_gp..
    e958:	6862 3277 325f 5f33 7067 0000 6862 3277     bhw2_23_gp..bhw2
    e968:	325f 5f32 7067 0000 6862 3277 345f 5f39     _22_gp..bhw2_49_
    e978:	7067 0000 6862 3277 315f 5f30 7067 0000     gp..bhw2_10_gp..
    e988:	6862 3277 315f 5f34 7067 0000 6862 3377     bhw2_14_gp..bhw3
    e998:	325f 5f31 7067 0000 6862 3377 335f 5f30     _21_gp..bhw3_30_
    e9a8:	7067 0000 6976 7262 6e61 5f74 7067 0000     gp..vibrant_gp..
    e9b8:	7763 5f31 3230 5f39 7067 0000 6c61 7261     cw1_029_gp..alar
    e9c8:	5f6d 3470 305f 325f 675f 0070 6952 6262     m_p4_0_2_gp.Ribb
    e9d8:	6e6f 435f 6c6f 726f 5f73 7067 0000 0000     on_Colors_gp....
    e9e8:	724f 6e61 6567 745f 5f6f 7550 7072 656c     Orange_to_Purple
    e9f8:	675f 0070 6946 6572 315f 675f 0070 0000     _gp.Fire_1_gp...
    ea08:	7473 6e61 6164 6472 675f 0070 5f62 7067     standard_gp.b_gp
    ea18:	0000 0000 7365 655f 656d 6172 646c 645f     ....es_emerald_d
    ea28:	6172 6f67 5f6e 3130 675f 0070 7266 746f     ragon_01_gp.frot
    ea38:	3368 3631 675f 0070 6b53 6479 6579 3131     h316_gp.Skydye11
    ea48:	675f 0070 6957 7a7a 306c 3931 675f 0070     _gp.Wizzl019_gp.
    ea58:	7254 706f 6369 6c61 435f 6c6f 726f 5f73     Tropical_Colors_
    ea68:	7067 0000 6c73 706f 5f65 7067 0000 0000     gp..slope_gp....
    ea78:	666f 7561 6f72 6172 675f 0070 6168 6c6c     ofaurora_gp.hall
    ea88:	776f 5f73 7067 0000 6573 5f61 7274 6165     ows_gp..sea_trea
    ea98:	7573 6572 675f 0070 6553 6f63 646e 7261     sure_gp.Secondar
    eaa8:	5f79 3130 5f61 7067 0000 0000 7053 696c     y_01a_gp....Spli
    eab8:	5f74 3330 675f 0070 4d47 5f54 6573 6661     t_03_gp.GMT_seaf
    eac8:	6f6c 726f 675f 0070 6172 6e69 6f62 5f77     loor_gp.rainbow_
    ead8:	7067 0000 6c63 756f 6364 6c6f 726f 5f73     gp..cloudcolors_
    eae8:	7067 0000 6563 7571 6c61 675f 0070 0000     gp..cequal_gp...
    eaf8:	7570 7072 656c 665f 6f6c 6577 5f72 7067     purple_flower_gp
    eb08:	0000 0000 6966 7265 6563 695f 6563 675f     ....fierce_ice_g
    eb18:	0070 0000 6c62 6575 6369 5f65 7067 0000     p...blueice_gp..
    eb28:	7774 6c69 6769 7468 675f 0070 7267 6565     twilight_gp.gree
    eb38:	5f6e 7067 0000 0000 6c75 7274 7661 6f69     n_gp....ultravio
    eb48:	656c 5f74 6f6d 646c 675f 0070 7061 6c70     let_mold_gp.appl
    eb58:	5f65 7267 6565 5f6e 7067 0000 6166 6e69     e_green_gp..fain
    eb68:	5f74 6172 6e69 6f62 5f77 7067 0000 0000     t_rainbow_gp....
    eb78:	746f 7369 675f 0070 6170 7272 746f 675f     otis_gp.parrot_g
    eb88:	0070 0000 6373 756f 6974 5f65 7067 0000     p...scoutie_gp..
    eb98:	7573 6c6e 7469 6177 6576 675f 0070 0000     sunlitwave_gp...
    eba8:	4d47 5f54 6f63 6c6f 675f 0070 6862 3177     GMT_cool_gp.bhw1
    ebb8:	735f 6e75 6f63 756e 6572 675f 0070 0000     _sunconure_gp...
    ebc8:	6862 3177 305f 5f35 7067 0000 6862 3277     bhw1_05_gp..bhw2
    ebd8:	745f 7275 5f71 7067 0000 0000 6862 3377     _turq_gp....bhw3
    ebe8:	315f 5f33 7067 0000 6862 3377 365f 5f31     _13_gp..bhw3_61_
    ebf8:	7067 0000 6862 3477 305f 3930 675f 0070     gp..bhw4_009_gp.
    ec08:	6862 3377 335f 5f34 7067 0000 7365 655f     bhw3_34_gp..es_e
    ec18:	656d 6172 646c 645f 6172 6f67 5f6e 3930     merald_dragon_09
    ec28:	675f 0070 6178 696e 7564 325f 675f 0070     _gp.xanidu_2_gp.
    ec38:	6177 6574 3172 675f 0070 0000 7473 6172     water1_gp...stra
    ec48:	6f74 7073 6568 6572 735f 6e75 6573 5f74     tosphere_sunset_
    ec58:	7067 0000 6552 7364 6e61 4364 6179 736e     gp..RedsandCyans
    ec68:	675f 0070 7943 6e61 4d5f 6761 6e65 6174     _gp.Cyan_Magenta
    ec78:	425f 756c 5f65 7067 0000 0000 6f43 706d     _Blue_gp....Comp
    ec88:	656c 656d 746e 7261 5f79 3130 5f61 7067     lementary_01a_gp
    ec98:	0000 0000 7963 6562 7072 6e75 5f6b 656e     ....cyberpunk_ne
    eca8:	6e6f 675f 0070 0000 6c62 6575 665f 7269     on_gp...blue_fir
    ecb8:	5f65 7067 0000 0000 7570 7072 656c 6c66     e_gp....purplefl
    ecc8:	5f79 7067 0000 0000 6172 6e69 6f62 3277     y_gp....rainbow2
    ecd8:	675f 0070 6c62 6461 5f65 7572 6e6e 7265     _gp.blade_runner
    ece8:	325f 3430 5f39 7067 0000 0000 6f4e 2074     _2049_gp....Not 
    ecf8:	2061 7267 6461 6569 746e 7020 6c61 7465     a gradient palet
    ed08:	6574 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     te..============
    ed18:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    ed28:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
    ed38:	3d3d 3d3d 3d3d 5543 5252 4e45 3d54 3d3d     ======CURRENT===
    ed48:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7e7e 7e7e     ==========..~~~~
    ed58:	7e7e 7e7e 7e7e 7e7e 7e7e 4e7e 5845 7e54     ~~~~~~~~~~~NEXT~
    ed68:	7e7e 7e7e 7e7e 7e7e 7e7e 7e7e 7e7e 0000     ~~~~~~~~~~~~~~..
    ed78:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 4f3d 4556     =============OVE
    ed88:	4c52 5941 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     RLAY============
    ed98:	3d3d 0000 7c7c 2820 2942 4220 6972 6867     ==..|| (B) Brigh
    eda8:	6e74 7365 3a73 0009 7c09 007c 7c7c 2820     tness:...||.|| (
    edb8:	2944 6420 6c65 7961 745f 6d69 3a65 0009     D) delay_time:..
    edc8:	7c7c 2820 294e 7420 6968 5f73 6964 3a72     || (N) this_dir:
    edd8:	0009 0000 7c7c 2820 294d 6d20 646f 5f65     ....|| (M) mode_
    ede8:	756e 626d 7265 093a 0000 0000 7c7c 6d20     number:.....|| m
    edf8:	646f 5f65 6e69 7469 6169 696c 657a 3a64     ode_initialized:
    ee08:	0009 0000 7c7c 7520 6573 705f 6c61 7465     ....|| use_palet
    ee18:	6574 093a 0009 0000 3d3d 3d3d 3d3d 3d3d     te:.....========
    ee28:	3d3d 3d3d 554a 4747 454c 4820 4c41 3d46     ====JUGGLE HALF=
    ee38:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
    ee48:	3d3d 3d3d 3d3d 3d3d 3d3d 554a 4747 454c     ==========JUGGLE
    ee58:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
    ee68:	7c7c 2820 2961 7520 6573 665f 6c75 5f6c     || (a) use_full_
    ee78:	6172 676e 3a65 0009 7c7c 2820 2962 6f20     range:..|| (b) o
    ee88:	656e 645f 7269 093a 0009 0000 7c7c 2820     ne_dir:.....|| (
    ee98:	2963 7020 6168 6573 3a64 0909 0000 0000     c) phased:......
    eea8:	7c7c 2820 2964 6e20 6d75 6f64 7374 093a     || (d) numdots:.
    eeb8:	0009 0000 7c7c 2820 2965 6220 6165 3a74     ....|| (e) beat:
    eec8:	0909 0000 7c7c 2820 2966 6620 6461 3a65     ....|| (f) fade:
    eed8:	0909 0000 7c7c 2820 2967 6420 6669 3a66     ....|| (g) diff:
    eee8:	0909 0000 7c7c 2820 2968 6920 646e 7865     ....|| (h) index
    eef8:	725f 7365 7465 093a 0000 0000 3d3d 3d3d     _reset:.....====
    ef08:	3d3d 3d3d 3d3d 4152 4e49 4f42 2057 414d     ======RAINBOW MA
    ef18:	4352 3d48 3d3d 3d3d 3d3d 3d3d 3d3d 0000     RCH===========..
    ef28:	3d3d 3d3d 3d3d 523d 4941 424e 574f 4d20     =======RAINBOW M
    ef38:	5241 4843 5320 4c50 5449 3d3d 3d3d 3d3d     ARCH SPLIT======
    ef48:	3d3d 0000 7c7c 2820 2962 7320 6c70 7469     ==..|| (b) split
    ef58:	093a 0009 7c7c 2820 2963 6420 6669 3a66     :...|| (c) diff:
    ef68:	0909 0000 7c7c 2820 2964 7220 746f 093a     ....|| (d) rot:.
    ef78:	0009 0000 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ....============
    ef88:	3d3d 4f54 4352 3d48 3d3d 3d3d 3d3d 3d3d     ==TORCH=========
    ef98:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
    efa8:	3d3d 3d3d 4f54 4352 2048 5953 434e 3d3d     ====TORCH SYNC==
    efb8:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
    efc8:	3d3d 3d3d 3d3d 3d3d 3d3d 4946 4552 3d3d     ==========FIRE==
    efd8:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
    efe8:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 4946 4552     ============FIRE
    eff8:	5320 4e59 3d43 3d3d 3d3d 3d3d 3d3d 3d3d      SYNC===========
    f008:	3d3d 0000 3d3d 3d3d 3d3d 3d3d 3d3d 463d     ==..===========F
    f018:	5249 2045 494d 5252 524f 3d3d 3d3d 3d3d     IRE MIRROR======
    f028:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
    f038:	4946 4552 4d20 5249 4f52 2052 5953 434e     FIRE MIRROR SYNC
    f048:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
    f058:	3d3d 3d3d 3d3d 463d 5249 2045 4152 444e     =======FIRE RAND
    f068:	4d4f 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     OM============..
    f078:	7c7c 2820 2961 7320 6170 6b72 6e69 3a67     || (a) sparking:
    f088:	0009 0000 7c7c 2820 2962 6320 6f6f 696c     ....|| (b) cooli
    f098:	676e 093a 0009 0000 7c7c 2820 2963 7320     ng:.....|| (c) s
    f0a8:	6170 6b72 6e69 3267 093a 0000 7c7c 2820     parking2:...|| (
    f0b8:	2964 6320 6f6f 696c 676e 3a32 0009 0000     d) cooling2:....
    f0c8:	7c7c 2820 2965 7320 6e79 3a63 0909 0000     || (e) sync:....
    f0d8:	7c7c 2820 2966 7420 726f 6863 645f 6669     || (f) torch_dif
    f0e8:	3a66 0009 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     f:..============
    f0f8:	4f43 4f4c 5752 5641 3d45 3d3d 3d3d 3d3d     COLORWAVE=======
    f108:	3d3d 3d3d 3d3d 0000 3d3d 3d3d 3d3d 3d3d     ======..========
    f118:	3d3d 3d3d 3d3d 5250 4449 3d45 3d3d 3d3d     ======PRIDE=====
    f128:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 3d3d 3d3d     ==========..====
    f138:	3d3d 3d3d 3d3d 3d3d 503d 4341 4649 4943     =========PACIFCI
    f148:	3d41 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     A=============..
    f158:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 433d 4e4f     =============CON
    f168:	4546 5454 3d49 3d3d 3d3d 3d3d 3d3d 3d3d     FETTI===========
    f178:	3d3d 0000 7c7c 2820 2962 6320 6e6f 6566     ==..|| (b) confe
    f188:	7474 5f69 6166 6564 093a 0000 3d3d 3d3d     tti_fade:...====
    f198:	3d3d 3d3d 3d3d 3d3d 4946 4552 4f57 4b52     ========FIREWORK
    f1a8:	3d53 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     S=============..
    f1b8:	7c7c 4320 7275 6572 746e 5320 6174 6567     || Current Stage
    f1c8:	093a 0000 4157 5449 4e49 0047 4146 4544     :...WAITING.FADE
    f1d8:	5055 0000 5845 4c50 534f 4f49 7c4e 0000     UP..EXPLOSION|..
    f1e8:	7c7c 6620 7269 7765 726f 5f6b 6f70 6973     || firework_posi
    f1f8:	6974 6e6f 093a 0000 7c7c 4e20 6d75 6562     tion:...|| Numbe
    f208:	2072 666f 7320 6170 6b72 3a73 0009 0000     r of sparks:....
    f218:	7c7c 4220 6972 6867 6574 7473 7320 6170     || Brightest spa
    f228:	6b72 093a 0000 0000 7c7c 4e20 7865 2074     rk:.....|| Next 
    f238:	7865 6c70 736f 6f69 206e 6974 656d 093a     explosion time:.
    f248:	0000 0000 7c7c 2820 2961 7520 6573 6f5f     ....|| (a) use_o
    f258:	6576 6c72 7961 093a 0000 0000 3d3d 3d3d     verlay:.....====
    f268:	3d3d 3d3d 3d3d 3d3d 4f3d 454e 5320 4e49     =========ONE SIN
    f278:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ==============..
    f288:	7c7c 2820 2962 7320 6e69 695f 636e 093a     || (b) sin_inc:.
    f298:	0009 0000 7c7c 2820 2963 7320 6e69 735f     ....|| (c) sin_s
    f2a8:	6570 6465 093a 0000 7c7c 2820 2964 7320     peed:...|| (d) s
    f2b8:	6e69 635f 7475 666f 3a66 0009 7c7c 2820     in_cutoff:..|| (
    f2c8:	2965 7320 6e69 725f 746f 093a 0009 0000     e) sin_rot:.....
    f2d8:	7c7c 2820 2966 7320 6e69 705f 6168 6573     || (f) sin_phase
    f2e8:	093a 0000 7c7c 2820 2967 6120 6c6c 665f     :...|| (g) all_f
    f2f8:	6572 3a71 0009 0000 7c7c 2820 2968 6220     req:....|| (h) b
    f308:	5f67 6c63 3a72 0909 0000 0000 7c7c 2820     g_clr:......|| (
    f318:	2969 6220 5f67 7262 3a69 0909 0000 0000     i) bg_bri:......
    f328:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 543d 4f57     =============TWO
    f338:	5320 4e49 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d      SIN============
    f348:	3d3d 0000 7c7c 2820 2962 7320 6e69 685f     ==..|| (b) sin_h
    f358:	6575 093a 0009 0000 7c7c 2820 2963 7420     ue:.....|| (c) t
    f368:	6f77 685f 6575 093a 0009 0000 7c7c 2820     wo_hue:.....|| (
    f378:	2964 7320 6e69 735f 6570 6465 093a 0000     d) sin_speed:...
    f388:	7c7c 2820 2965 7420 6f77 735f 6570 6465     || (e) two_speed
    f398:	093a 0000 7c7c 2820 2966 7320 6e69 725f     :...|| (f) sin_r
    f3a8:	746f 093a 0009 0000 7c7c 2820 2967 7420     ot:.....|| (g) t
    f3b8:	6f77 725f 746f 093a 0009 0000 7c7c 2820     wo_rot:.....|| (
    f3c8:	2968 7320 6e69 635f 7475 666f 3a66 0009     h) sin_cutoff:..
    f3d8:	7c7c 2820 2969 7420 6f77 635f 7475 666f     || (i) two_cutof
    f3e8:	3a66 0009 7c7c 2820 296a 7320 6e69 705f     f:..|| (j) sin_p
    f3f8:	6168 6573 093a 0000 7c7c 2820 296b 7420     hase:...|| (k) t
    f408:	6f77 705f 6168 6573 093a 0000 7c7c 2820     wo_phase:...|| (
    f418:	296c 6120 6c6c 665f 6572 3a71 0009 0000     l) all_freq:....
    f428:	3d3d 3d3d 3d3d 3d3d 3d3d 4853 4f4f 4954     ==========SHOOTI
    f438:	474e 5020 4c4f 3d45 3d3d 3d3d 3d3d 3d3d     NG POLE=========
    f448:	3d3d 0000 7c7c 2820 2961 7320 7274 7069     ==..|| (a) strip
    f458:	725f 6e61 6567 093a 0000 0000 7c7c 2820     _range:.....|| (
    f468:	2962 7020 6c6f 5f65 6964 6666 093a 0000     b) pole_diff:...
    f478:	7c7c 2820 2963 6a20 6775 6c67 5f65 6166     || (c) juggle_fa
    f488:	6564 093a 0000 0000 7c7c 2820 2964 6a20     de:.....|| (d) j
    f498:	6775 6c67 5f65 6562 7461 093a 0000 0000     uggle_beat:.....
    f4a8:	7c7c 2820 2965 6a20 6775 6c67 5f65 6964     || (e) juggle_di
    f4b8:	6666 093a 0000 0000 3d3d 3d3d 3d3d 3d3d     ff:.....========
    f4c8:	3d3d 3d3d 3d3d 4e3d 494f 4553 3d3d 3d3d     =======NOISE====
    f4d8:	3d3d 3d3d 3d3d 3d3d 3d3d 0000 7c7c 2820     ==========..|| (
    f4e8:	2962 6e20 696f 6573 735f 6163 656c 093a     b) noise_scale:.
    f4f8:	0000 0000 7c7c 2820 2963 6e20 696f 6573     ....|| (c) noise
    f508:	795f 6373 6c61 3a65 0009 0000 7c7c 2820     _yscale:....|| (
    f518:	2964 6e20 696f 6573 645f 7369 3a74 0009     d) noise_dist:..
    f528:	7c7c 2820 2965 6e20 696f 6573 665f 6461     || (e) noise_fad
    f538:	3a65 0009 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     e:..============
    f548:	3d3d 4f42 4e55 4543 3d3d 3d3d 3d3d 3d3d     ==BOUNCE========
    f558:	3d3d 3d3d 3d3d 0000 7c7c 2820 2961 6a20     ======..|| (a) j
    f568:	6775 6c67 5f65 6166 6564 093a 0000 0000     uggle_fade:.....
    f578:	7c7c 2820 2962 6220 756f 636e 5f65 656c     || (b) bounce_le
    f588:	676e 6874 093a 0000 7c7c 2820 2963 6a20     ngth:...|| (c) j
    f598:	6775 6c67 5f65 6562 7461 093a 0000 0000     uggle_beat:.....
    f5a8:	7c7c 2820 2964 7220 6961 626e 776f 645f     || (d) rainbow_d
    f5b8:	6669 3a66 0009 0000 7c7c 2820 2965 7320     iff:....|| (e) s
    f5c8:	6174 7472 625f 6165 3a74 0009 7c7c 2820     tart_beat:..|| (
    f5d8:	2966 6220 756f 636e 5f65 6172 6e69 6f62     f) bounce_rainbo
    f5e8:	3a77 0009 3d3d 3d3d 3d3d 3d3d 3d3d 4f42     w:..==========BO
    f5f8:	4e55 4943 474e 4220 4c41 534c 3d3d 3d3d     UNCING BALLS====
    f608:	3d3d 3d3d 3d3d 0000 7c7c 2820 2961 6620     ======..|| (a) f
    f618:	6461 3a65 0909 0000 7c7c 2820 2962 6e20     ade:....|| (b) n
    f628:	6d75 6562 2072 666f 6220 6c61 736c 093a     umber of balls:.
    f638:	0000 0000 7c7c 2820 2963 7520 6573 705f     ....|| (c) use_p
    f648:	6c61 7465 6574 093a 0000 0000 3d3d 3d3d     alette:.....====
    f658:	3d3d 3d3d 3d3d 3d3d 494c 4847 5354 4241     ========LIGHTSAB
    f668:	5245 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 0000     ER============..
    f678:	7c7c 2820 2961 7520 6573 705f 6c61 7465     || (a) use_palet
    f688:	6574 093a 0000 0000 7c7c 2820 2962 6220     te:.....|| (b) b
    f698:	616c 6564 635f 6c6f 726f 093a 0000 0000     lade_color:.....
    f6a8:	7c7c 2820 2963 6420 6c65 6174 625f 6972     || (c) delta_bri
    f6b8:	6867 3a74 0009 0000 7c7c 2820 2964 6820     ght:....|| (d) h
    f6c8:	6c6f 5f64 6974 656d 093a 0000 7c7c 7320     old_time:...|| s
    f6d8:	6261 7265 735f 6174 6567 093a 0009 0000     aber_stage:.....
    f6e8:	4f44 4e57 0000 0000 4157 5449 0000 0000     DOWN....WAIT....
    f6f8:	7c7c 7420 7069 705f 736f 093a 0009 0000     || tip_pos:.....
    f708:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 543d 4957     =============TWI
    f718:	4b4e 454c 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     NKLE============
    f728:	3d3d 0000 7c7c 2820 2962 7420 6977 6b6e     ==..|| (b) twink
    f738:	656c 735f 6570 6465 093a 0000 7c7c 2820     le_speed:...|| (
    f748:	2963 7420 6977 6b6e 656c 645f 6e65 6973     c) twinkle_densi
    f758:	7974 093a 0000 0000 7c7c 2820 2964 6320     ty:.....|| (d) c
    f768:	6f6f 5f6c 696c 656b 695f 636e 6e61 093a     ool_like_incan:.
    f778:	0000 0000 7c7c 2820 2965 6120 7475 5f6f     ....|| (e) auto_
    f788:	6573 656c 7463 625f 3a67 0009 3d3d 3d3d     select_bg:..====
    f798:	3d3d 3d3d 3d3d 4f4d 4544 5420 5059 2045     ======MODE TYPE 
    f7a8:	5245 4f52 3d52 3d3d 3d3d 3d3d 3d3d 0000     ERROR=========..
    f7b8:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    f7c8:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
    f7d8:	3d3d 000a 5e0a 5e5e 5e5e 5e5e 5e5e 5e5e     ==...^^^^^^^^^^^
    f7e8:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
    f7f8:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
    f808:	5e5e 5e5e 5e5e 5e5e 0000 0000 5e5e 5e5e     ^^^^^^^^....^^^^
    f818:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 435e 6168     ^^^^^^^^^^^^^Cha
    f828:	676e 6e69 2067 6150 656c 7474 5e65 5e5e     nging Palette^^^
    f838:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 005e     ^^^^^^^^^^^^^^^.
    f848:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
    f858:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
    f868:	5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e 5e5e     ^^^^^^^^^^^^^^^^
    f878:	5e5e 005e 2a0a 2a2a 2a2a 2a2a 2a2a 2a2a     ^^^..***********
    f888:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    f898:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    f8a8:	2a2a 2a2a 2a2a 2a2a 0000 0000 2a2a 2a2a     ********....****
    f8b8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 432a     ***************C
    f8c8:	6168 676e 6e69 2067 6f4d 6564 2a2a 2a2a     hanging Mode****
    f8d8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 002a     ***************.
    f8e8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    f8f8:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    f908:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
    f918:	2a2a 002a 2023 0000 0020 0000 4d56 5044     ***.# .. ...VMDP
    f928:	5f56 7c31 5f31 4d56 5044 0a56 0000 0000     V_1|1_VMDPV.....
    f938:	4544 5542 2047 4e4f 0000 0000 4553 5554     DEBUG ON....SETU
    f948:	2050 4f43 504d 454c 4554 ff00               P COMPLETE..

0000f954 <vibrant_gp>:
    f954:	ff00 ffff 011e 1d90 e547 0cf6 ff77 0801     ........G...w...
    f964:	b8a5 cb01 03d6 fa1c 00ff 0000               ............

0000f970 <es_landscape_64_gp>:
    f970:	0000 0000 0225 0119 0f4c 0573 4f7f 01d5     ....%...L.s..O..
    f980:	7e80 2fd3 bc82 f7d1 9099 cdb6 3bcc fa75     .~./.........;u.
    f990:	01ff c025                                   ..%.

0000f994 <Skydye11_gp>:
    f994:	0800 0400 0801 0400 0c02 0800 1003 0c00     ................
    f9a4:	1404 0c00 1405 1000 1806 1000 1c07 1400     ................
    f9b4:	1c09 1400 200a 1800 240b 1800 240c 1c00     ..... ...$...$..
    f9c4:	280d 1c00 2c0e 2000 300f 2400 3410 2400     .(...,. .0.$.4.$
    f9d4:	3811 2800 3c12 2c00 3c14 2c00 4015 3000     .8.(.<.,.<.,.@.0
    f9e4:	4416 3400 4817 3400 4c18 3800 4c19 3804     .D.4.H.4.L.8.L.8
    f9f4:	501a 3c04 541b 3c04 581c 4004 5c1d 4404     .P.<.T.<.X.@.\.D
    fa04:	601e 4808 601f 4c08 5c20 5008 5821 5408     .`.H.`.L \.P!X.T
    fa14:	5422 5c08 5423 6008 5024 6808 4c25 6c08     "T.\#T.`$P.h%L.l
    fa24:	4826 7008 4827 7808 4428 7c08 4029 8408     &H.p'H.x(D.|)@..
    fa34:	3c2a 8808 3c2b 9008 382c 9408 342d 9808     *<..+<..,8..-4..
    fa44:	302e a008 302f a404 2c30 ac04 2831 b004     .0../0..0,..1(..
    fa54:	2432 b404 2433 bc04 2034 c004 1c35 c804     2$..3$..4 ..5...
    fa64:	1836 cc04 1837 d404 1438 d804 1039 dc04     6...7...8...9...
    fa74:	0c3a e404 0c3b e804 083c f004 043d f404     :...;...<...=...
    fa84:	003e fc00 003f f804 0040 f40c 0041 f014     >...?...@...A...
    fa94:	0042 ec1c 0043 e824 0044 e42c 0045 e034     B...C.$.D.,.E.4.
    faa4:	0046 dc3c 0047 d844 0048 d44c 0049 d054     F.<.G.D.H.L.I.T.
    fab4:	004a cc5c 004b c864 004c c46c 004d c074     J.\.K.d.L.l.M.t.
    fac4:	004e bc7c 004f b884 0050 b48c 0051 b094     N.|.O...P...Q...
    fad4:	0052 ac9c 0053 a8a4 0054 a4ac 0055 a0b4     R...S...T...U...
    fae4:	0056 9cbc 0057 98c4 0058 94cc 0059 90d4     V...W...X...Y...
    faf4:	005a 8cdc 005b 88e4 005c 84ec 005d 7ce8     Z...[...\...]..|
    fb04:	005e 78e0 005f 70dc 0060 68d8 0061 60d0     ^..x_..p`..ha..`
    fb14:	0062 5cc8 0063 58c0 0064 50b8 0065 4cac     b..\c..Xd..Pe..L
    fb24:	0066 44a4 0067 409c 0068 3894 0069 348c     f..Dg..@h..8i..4
    fb34:	006a 2c80 006b 2878 006c 2070 006d 1c68     j..,k.x(l.p m.h.
    fb44:	006e 145c 006f 1054 0070 084c 0071 0040     n.\.o.T.p.L.q.@.
    fb54:	0072 003c 0073 0038 0074 0034 0075 0030     r.<.s.8.t.4.u.0.
    fb64:	0076 002c 0077 0028 0078 0024 0479 0020     v.,.w.(.x.$.y. .
    fb74:	047a 001c 047b 0018 047c 0014 047d 0010     z...{...|...}...
    fb84:	047e 000c 047f 0008 0480 0004 0881 0400     ~...............
    fb94:	0c82 0800 1083 0c00 1484 0c00 1485 1000     ................
    fba4:	1886 1000 1c87 1400 2088 1400 2089 1800     ......... ... ..
    fbb4:	248a 1800 288b 1c00 2c8c 2000 308d 2400     .$...(...,. .0.$
    fbc4:	348e 2404 388f 2804 3891 2804 3c92 2c04     .4.$.8.(.8.(.<.,
    fbd4:	4093 3004 4494 3004 4495 3404 4896 3404     .@.0.D.0.D.4.H.4
    fbe4:	4c97 3804 5098 3804 5099 3c04 549a 3c04     .L.8.P.8.P.<.T.<
    fbf4:	589b 4004 5c9c 4404 609d 4808 609e 4c08     .X.@.\.D.`.H.`.L
    fc04:	689f 4808 70a0 4408 7ca1 4008 84a2 3c08     .h.H.p.D.|.@...<
    fc14:	90a3 3408 98a4 3008 a4a5 2c08 aca6 2808     ...4...0...,...(
    fc24:	b4a7 2404 c0a8 2004 c8a9 1c04 d4aa 1404     ...$... ........
    fc34:	dcab 1004 e8ac 0c04 f0ad 0804 fcae 0000     ................
    fc44:	fcaf 0008 fcb0 0014 fcb1 001c fcb2 0028     ..............(.
    fc54:	fcb3 0030 fcb4 003c fcb5 0044 fcb6 0050     ..0...<...D...P.
    fc64:	fcb7 0058 fcb8 0064 fcb9 006c fcba 0078     ..X...d...l...x.
    fc74:	fcbb 0084 fcbc 008c fcbd 0098 fcbe 00a0     ................
    fc84:	fcbf 00ac fcc0 00b4 fcc1 00c0 fcc2 00c8     ................
    fc94:	fcc3 00d4 fcc4 00dc fcc5 00e8 fcc6 00f0     ................
    fca4:	fcc7 00fc fcc8 00f0 fcc9 00e8 fcca 00dc     ................
    fcb4:	fccb 00d0 fccc 00c4 fccd 00bc fcce 00b0     ................
    fcc4:	fccf 00a4 fcd0 0098 fcd1 0090 fcd2 0084     ................
    fcd4:	fcd3 0078 fcd4 0070 fcd5 0064 fcd6 0058     ..x...p...d...X.
    fce4:	fcd7 004c fcd8 0044 fcd9 0038 fcda 002c     ..L...D...8...,.
    fcf4:	fcdb 0020 fcdc 0018 fcdd 000c fcde 0000     .. .............
    fd04:	f4df 0400 ece0 0800 e0e1 0c00 d8e2 1000     ................
    fd14:	cce3 1800 c4e4 1c00 b8e5 2000 b0e6 2404     ........... ...$
    fd24:	a8e7 2804 9ce8 2c04 94e9 3004 88ea 3804     ...(...,...0...8
    fd34:	80eb 3c04 74ec 4004 6ced 4404 60ee 4c08     ...<.t.@.l.D.`.L
    fd44:	5cef 4808 54f0 4408 50f1 4008 48f2 3808     .\.H.T.D.P.@.H.8
    fd54:	44f3 3404 3cf4 3004 38f5 2c04 30f6 2804     .D.4.<.0.8.,.0.(
    fd64:	2cf7 2004 24f8 1c04 20f9 1804 18fa 1404     .,. .$... ......
    fd74:	14fb 1000 0cfc 0800 00fd 0000 04fe 0400     ................
    fd84:	04ff 0400                                   ....

0000fd88 <sin16_C(unsigned short)::base>:
    fd88:	0000 18f9 30fb 471c 5a82 6a6d 7641 7d89     .....0.G.ZmjAv.}

0000fd98 <bhw4_009_gp>:
    fd98:	4200 c0ba 012b 4716 024f 8e68 4275 c0ba     .B..+..GO.h.uB..
    fda8:	0293 8e68 01ba 4716 02e0 8e68 04ff 1c1b     ..h....G..h.....

0000fdb8 <twilight_gp>:
    fdb8:	0000 0000 0102 0101 0105 0101 0107 0101     ................
    fdc8:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    fdd8:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    fde8:	011e 0101 0120 0102 0123 0102 0125 0102     .... ...#...%...
    fdf8:	0228 0203 022a 0203 022d 0203 032f 0304     (...*...-.../...
    fe08:	0332 0304 0435 0405 0437 0405 053a 0505     2...5...7...:...
    fe18:	063c 0606 063f 0606 0741 0707 0844 0807     <...?...A...D...
    fe28:	0946 0908 0949 0a08 0a4b 0b08 0b4e 0d09     F...I...K...N...
    fe38:	0c50 0e09 0d53 0f09 0e55 100a 0e58 110a     P...S...U...X...
    fe48:	1185 330e 1088 340e 0f8a 370e 0e8d 390e     ...3...4...7...9
    fe58:	0d8f 3d0e 0c92 3f0e 0c95 420e 0a97 450d     ...=...?...B...E
    fe68:	0a9a 480d 099c 4b0d 089f 4e0d 07a1 520e     ...H...K...N...R
    fe78:	07a4 5410 07a6 5811 07a9 5b13 07ab 5f15     ...T...X...[..._
    fe88:	07ae 6216 07b0 6619 06b3 691b 06b5 6d1d     ...b...f...i...m
    fe98:	06b8 7020 07ba 7525 08bd 782a 09bf 7d2f     .. p..%u..*x../}
    fea8:	0ac2 8036 0bc4 843b 0cc7 8942 0ec9 8c49     ..6...;...B...I.
    feb8:	10cc 9150 12ce 9557 14d0 995f 16d3 9e67     ..P...W..._...g.
    fec8:	18d5 a26f 1bd8 a877 1eda ac80 20dd b08a     ..o...w...... ..
    fed8:	23df b693 27e2 ba9c 2ae4 c0a6 2ee7 c5b0     .#...'...*......
    fee8:	34e9 c9b6 3aeb cfbb 41ee d4c1 49f0 dbc7     .4...:...A...I..
    fef8:	50f2 dfcd 5af5 e6d5 64f7 ebdb 6dfa f2e1     .P...Z...d...m..
    ff08:	78fc f7e7 84ff ffed                         .x......

0000ff10 <b_m16_interleave>:
    ff10:	3100 2931 1b5a 0a75                         .11)Z.u.

0000ff18 <water1_gp>:
    ff18:	0100 2e01 4f1c be88 1035 b851 4f49 be88     .....O..5.Q.IO..
    ff28:	4b63 e9c9 067c 670c 4b9e e9c9 54ba 6c6d     cK..|..g.K...Tml
    ff38:	10c6 b851 4fe8 be88 01ff 2e01               ..Q..O......

0000ff44 <ib15_gp>:
    ff44:	7100 935b 9d48 4e58 d059 2155 ff6b 0b1d     .q[.H.XNY.U!k...
    ff54:	898d 271f 3bff 5921                         ...'.;!Y

0000ff5c <apple_green_gp>:
    ff5c:	0000 0000 0102 0101 0104 0101 0107 0101     ................
    ff6c:	010a 0101 010c 0101 010f 0101 0111 0101     ................
    ff7c:	0114 0101 0116 0101 0119 0101 011b 0101     ................
    ff8c:	011e 0102 0120 0102 0123 0103 0125 0103     .... ...#...%...
    ff9c:	0128 0104 012a 0105 012d 0105 012f 0106     (...*...-.../...
    ffac:	0132 0107 0134 0108 0137 0108 0139 0209     2...4...7...9...
    ffbc:	013c 020a 013e 030b 0141 040c 0143 050d     <...>...A...C...
    ffcc:	0146 070e 0148 0710 014b 0811 014d 0812     F...H...K...M...
    ffdc:	0150 0813 0152 0915 0155 0916 0157 0918     P...R...U...W...
    ffec:	0182 083a 0185 073c 0187 073f 018a 0642     ..:...<...?...B.
    fffc:	018d 0645 018f 0547 0192 054a 0194 044e     ..E...G...J...N.
   1000c:	0197 0450 0199 0354 019c 0356 019e 025a     ..P...T...V...Z.
   1001c:	01a1 025c 01a3 0160 01a6 0163 01a8 0167     ..\...`...c...g.
   1002c:	01ab 0169 02ad 016d 02b0 0170 03b3 0175     ..i...m...p...u.
   1003c:	03b5 0177 04b8 017c 05ba 0180 05bd 0183     ..w...|.........
   1004c:	06bf 0188 07c2 018b 09c4 0190 0ac7 0193     ................
   1005c:	0bc9 0198 0dcc 019c 0fce 01a1 11d1 01a4     ................
   1006c:	13d3 01a9 16d6 01ad 18d9 01b2 1bdb 01b8     ................
   1007c:	1fde 01bb 23e0 01c1 27e3 01c5 2ce5 01cb     .....#...'...,..
   1008c:	31e8 01cf 36ea 01d5 3ced 01d9 43ef 01df     .1...6...<...C..
   1009c:	4af2 01e3 52f4 01e9 5bf7 01ed 64f9 01f4     .J...R...[...d..
   100ac:	6efc 01f8 79ff 00ff                         .n...y..

000100b4 <RedsandCyans_gp>:
   100b4:	0f00 8760 284e 4a57 5366 2250 7172 1d47     ..`.N(WJfSP"rqG.
   100c4:	967f 193f 3c8f 424f 0fb6 8760 0fdf 8760     ..?..<OB..`...`.
   100d4:	0fff 8760                                   ..`.

000100d8 <b_gp>:
   100d8:	0000 0000 003f ff00 ff7f 0000 ffbf 00ff     ....?...........
   100e8:	ffff ffff                                   ....

000100ec <es_pinksplash_07_gp>:
   100ec:	e500 0101 f23d 3f04 ff65 ff0c f97f fc51     ....=..?e.....Q.
   100fc:	ff99 eb0b f4c1 4405 e8ff 0501               .......D....

00010108 <faint_rainbow_gp>:
   10108:	4300 4700 4502 4101 4805 3b01 4a07 3501     .C.G.E.A.H.;.J.5
   10118:	4d0a 3001 4e0c 2b01 500f 2601 5311 2201     .M.0.N.+.P.&.S."
   10128:	5614 1d01 5816 1901 5b19 1601 5e1b 1201     .V...X...[...^..
   10138:	611e 0f01 6220 0c01 6523 0a01 6825 0701     .a.. b..#e..%h..
   10148:	6b28 0501 6e2a 0401 712d 0201 752f 0101     (k..*n..-q../u..
   10158:	7832 0101 7935 0101 7d37 0101 803a 0101     2x..5y..7}..:...
   10168:	843c 0103 873f 0105 8b41 0108 8e44 010c     <...?...A...D...
   10178:	9046 010e 9049 0110 924b 0111 944e 0113     F...I...K...N...
   10188:	9450 0116 9653 0117 9855 011a af83 0158     P...S...U.....X.
   10198:	b185 015d b388 0163 b38a 0168 b68d 016c     ..]...c...h...l.
   101a8:	b88f 0172 b892 0177 ba94 017d bc97 0183     ..r...w...}.....
   101b8:	bc9a 018a be9c 0190 c09f 0197 c0a1 019d     ................
   101c8:	c2a4 01a4 c5a6 01ab c7a9 01b2 c7ab 01ba     ................
   101d8:	c9ae 01c1 cbb0 02c9 cbb3 02d1 c9b5 02d5     ................
   101e8:	c5b8 02d7 beba 02d7 b8bd 02d9 b3bf 02db     ................
   101f8:	adc2 02db a7c4 02dd a1c7 02df 9dc9 02df     ................
   10208:	98cc 02e1 92cf 02e3 8ed1 02e5 89d4 02e5     ................
   10218:	84d6 03e7 7ed9 03e9 79db 03e9 76de 03eb     .....~...y...v..
   10228:	71e0 03ed 6de3 03ed 68e5 03ef 65e8 03f1     .q...m...h...e..
   10238:	61ea 03f1 5ced 03f4 58ef 03f6 54f2 04f8     .a...\...X...T..
   10248:	50f4 04f8 4ef7 04fa 4af9 04fc 47fc 04fc     .P...N...J...G..
   10258:	43ff 04ff                                   .C..

0001025c <bhw2_22_gp>:
   1025c:	0000 0000 e363 0101 f982 5fc7 e39b 0101     ....c......_....
   1026c:	00ff 0000                                   ....

00010270 <bhw1_28_gp>:
   10270:	4b00 dd01 fc1e ff49 a930 f200 0077 f295     .K....I.0...w...
   10280:	2baa f200 fcce ff49 4ee8 d60c 00ff f295     .+....I..N......

00010290 <blue_fire_gp>:
   10290:	0000 0000 0040 ff00 00c8 ffff ffff ffff     ....@...........

000102a0 <Cyan_Magenta_Blue_gp>:
   102a0:	0000 ffff 2a3f ff37 ff7f ff00 2abf ff00     ....?*7......*..
   102b0:	00ff ff00                                   ....

000102b4 <Fuschia_7_gp>:
   102b4:	2b00 9903 643f 6704 bc7f 4205 a1bf 730b     .+..?d.g...B...s
   102c4:	87ff b614                                   ....

000102c8 <lava_gp>:
   102c8:	0000 0000 122e 0000 7160 0000 8e6c 0103     ........`q..l...
   102d8:	af77 0111 d592 022c ffae 0452 ffbc 0473     w.....,...R...s.
   102e8:	ffca 049c ffda 04cb ffea 04ff fff4 47ff     ...............G
   102f8:	ffff ffff                                   ....

000102fc <bhw2_turq_gp>:
   102fc:	0100 5f21 0126 256b 2a4c 2dff ff7f 2dff     ..!_&.k%L*.-...-
   1030c:	2ab2 2dff 01d8 256b 01ff 5f21               .*.-..k%..!_

00010318 <rainbow_gp>:
   10318:	ff00 0000 ab20 0055 ab40 00ab 0060 00ff     .... .U.@...`...
   10328:	0080 55ab 00a0 ff00 55c0 ab00 abe0 5500     ...U.....U.....U
   10338:	ffff 0000                                   ....

0001033c <purple_flower_gp>:
   1033c:	0000 0000 1442 2d04 7984 ff14 b3b4 ff49     ....B..-.y....I.
   1034c:	ffe4 ffa4 fff1 ffcf ffff ffff               ............

00010358 <palettes>:
   10358:	0ee4 0001 106c 0001 129c 0001 0590 0001     ....l...........
   10368:	00ec 0001 0ecc 0001 10e0 0001 08dc 0001     ................
   10378:	f970 0000 05d4 0001 1320 0001 0520 0001     p....... ... ...
   10388:	074c 0001 1304 0001 ff44 0000 02b4 0001     L.......D.......
   10398:	0600 0001 02c8 0001 0f0c 0001 101c 0001     ................
   103a8:	10a4 0001 070c 0001 114c 0001 076c 0001     ........L...l...
   103b8:	05ec 0001 04cc 0001 0920 0001 1090 0001     ........ .......
   103c8:	0e98 0001 0270 0001 0980 0001 025c 0001     ....p.......\...
   103d8:	04fc 0001 054c 0001 05b8 0001 06cc 0001     ....L...........
   103e8:	08ec 0001 f954 0000 12c8 0001 10f8 0001     ....T...........
   103f8:	1048 0001 e6a8 0000 11a4 0001 1004 0001     H...............
   10408:	1228 0001 00d8 0001 0e84 0001 11b0 0001     (...............
   10418:	f994 0000 0a58 0001 09bc 0001 10c0 0001     ....X...........
   10428:	1348 0001 065c 0001 0950 0001 05a4 0001     H...\...P.......
   10438:	04e8 0001 1244 0001 0318 0001 0610 0001     ....D...........
   10448:	1180 0001 033c 0001 0640 0001 0f28 0001     ....<...@...(...
   10458:	fdb8 0000 0e58 0001 0788 0001 ff5c 0000     ....X.......\...
   10468:	0108 0001 06bc 0001 0728 0001 0a48 0001     ........(...H...
   10478:	099c 0001 06b4 0001 0ef4 0001 0f04 0001     ................
   10488:	02fc 0001 0a30 0001 12b0 0001 fd98 0000     ....0...........
   10498:	0934 0001 0e74 0001 06f0 0001 ff18 0000     4...t...........
   104a8:	e5bc 0000 00b4 0001 02a0 0001 133c 0001     ............<...
   104b8:	0538 0001 0290 0001 073c 0001 12d4 0001     8.......<.......
   104c8:	0568 0001                                   h...

000104cc <BlacK_Red_Magenta_Yellow_gp>:
   104cc:	0000 0000 2a2a 0000 ff54 0000 ff7f 2d00     ....**..T......-
   104dc:	ffaa ff00 ffd4 2d37 ffff 00ff               ......7-....

000104e8 <Split_03_gp>:
   104e8:	0000 7b12 003f 1d4b 007f 01b2 1bbf 0130     ...{?.K.......0.
   104f8:	a7ff 0201                                   ....

000104fc <bhw2_49_gp>:
   104fc:	0900 0f0f 0028 2d37 0956 0f0f 1d82 3e29     ....(.7-V.....)>
   1050c:	09aa 0f0f 40d3 c708 06ff 1601               .....@......

00010518 <sin16_C(unsigned short)::slope>:
   10518:	3031 262c 171f 040e                         10,&....

00010520 <gr65_hult_gp>:
   10520:	f700 f7b0 ff30 ff88 dc59 e21d 07a0 b252     ....0...Y.....R.
   10530:	01d8 6d7c 01ff 6d7c                         ..|m..|m

00010538 <cyberpunk_neon_gp>:
   10538:	7100 911c ea3f d900 0a7f c6bd 13bf 7c3e     .q..?.........>|
   10548:	09ff 3318                                   ...3

0001054c <bhw2_10_gp>:
   1054c:	0000 000c 993d 70ef 007f 000c 6aa5 02ef     ....=..p.....j..
   1055c:	a7c4 47e5 6ae5 02ef 00ff 000c               ...G.j......

00010568 <blade_runner_2049_gp>:
   10568:	c900 ad50 ab19 9b39 6832 7323 5e4b 6e21     ..P...9.2h#sK^!n
   10578:	7f64 ac78 4d7d a98d 74a0 b255 14aa 731b     d.x.}M...tU....s
   10588:	4bc8 4915 2cff 2a09                         .K.I.,.*

00010590 <es_pinksplash_08_gp>:
   10590:	7e00 ff0b c57f 1601 d2af ac9d 9ddd 7003     .~.............p
   105a0:	9dff 7003                                   ...p

000105a4 <Secondary_01a_gp>:
   105a4:	0300 ff00 433f 2d07 ff7f 0021 2abf 0173     ....?C.-..!..*s.
   105b4:	00ff 01ff                                   ....

000105b8 <bhw2_14_gp>:
   105b8:	0000 0800 002d 2d00 074f ff0c 2a77 ff37     ....-..-O...w*7.
   105c8:	079e ff0c 00d1 2d00 00ff 0800               .......-....

000105d4 <es_landscape_33_gp>:
   105d4:	0100 0005 2013 0117 a126 0137 e53f 0190     ..... ..&.7.?...
   105e4:	2742 4a8e 01ff 0104                         B'.J....

000105ec <BlacK_Magenta_Red_gp>:
   105ec:	0000 0000 2a3f 2d00 ff7f ff00 ffbf 2d00     ....?*.-.......-
   105fc:	ffff 0000                                   ....

00010600 <es_emerald_dragon_08_gp>:
   10600:	6100 01ff 2f65 0185 0db2 012b 02ff 010a     .a..e/....+.....

00010610 <cloudcolors_gp>:
   10610:	0000 ff00 000f 8b00 006f 8b00 007f ff00     ........o.......
   10620:	008f 8b00 879f face 87af face adbf e6d8     ................
   10630:	c8cf c8c8 addf e6d8 87ef ebce 00ff ffbf     ................

00010640 <fierce_ice_gp>:
   10640:	0000 0000 003b 2d07 0077 ff21 0395 ff52     ....;..-w.!...R.
   10650:	17b4 ff9c 64d9 ffcb ffff ffff               .....d......

0001065c <hallows_gp>:
   1065c:	0100 0101 f714 011c ea19 0388 0123 0101     ............#...
   1066c:	f730 011c ea33 0388 013d 0101 f74c 011c     0...3...=...L...
   1067c:	f45b 01b0 ea6b 0388 017a 0101 ea8c 0388     [...k...z.......
   1068c:	f499 01b0 f7a8 011c 01ba 0101 f7c4 011c     ................
   1069c:	eacc 0388 01d8 0101 eae5 0388 f7ef 011c     ................
   106ac:	01f9 0101 01ff 0101                         ........

000106b4 <GMT_cool_gp>:
   106b4:	0000 ffff ffff ff00                         ........

000106bc <otis_gp>:
   106bc:	1a00 5901 117f 00c1 00d8 6222 00ff 6222     ...Y......"b.."b

000106cc <bhw3_21_gp>:
   106cc:	0100 6228 0130 4441 024c 60a1 0068 1951     ..(b0.ADL..`h.Q.
   106dc:	4182 52b6 0099 aa56 11b5 b6cf 11cc b6cf     .A.R..V.........
   106ec:	01ff 2e17                                   ....

000106f0 <xanidu_2_gp>:
   106f0:	7600 e2a1 4f35 a201 435e 0701 0184 9c37     .v..5O..^C....7.
   10700:	01ad 3d7f 27d3 482d 76ff e2a1               ...=.'-H.v..

0001070c <Sunset_Real_gp>:
   1070c:	7800 0000 b316 0016 ff33 0068 a755 1216     .x......3.h.U...
   1071c:	6487 6700 10c6 8200 00ff a000               .d.g........

00010728 <parrot_gp>:
   10728:	7e00 0100 c572 10a8 c58c 10a8 00d8 2002     .~..r.......... 
   10738:	00ff 2002                                   ... 

0001073c <purplefly_gp>:
   1073c:	0000 0000 ef3f 7a00 fcbf 4eff 00ff 0000     ....?..z...N....

0001074c <gr64_hult_gp>:
   1074c:	0100 6d7c 0142 4f5d 3468 0141 7382 017f     ..|mB.]Oh4A..s..
   1075c:	3496 0141 01c9 4856 00ef 2d37 00ff 2d37     .4A...VH..7-..7-

0001076c <BlacK_Blue_Magenta_White_gp>:
   1076c:	0000 0000 002a 2d00 0054 ff00 2a7f ff00     ....*..-T....*..
   1077c:	ffaa ff00 ffd4 ff37 ffff ffff               ......7.....

00010788 <ultraviolet_mold_gp>:
   10788:	0000 0000 0102 0101 0105 0101 0107 0101     ................
   10798:	010a 0101 010c 0101 010f 0101 0111 0101     ................
   107a8:	0114 0101 0116 0101 0119 0101 011b 0101     ................
   107b8:	011e 0101 0120 0102 0123 0102 0125 0202     .... ...#...%...
   107c8:	0228 0203 022a 0203 022d 0303 032f 0304     (...*...-.../...
   107d8:	0332 0404 0335 0504 0437 0505 043a 0605     2...5...7...:...
   107e8:	043c 0705 053f 0706 0541 0806 0544 0907     <...?...A...D...
   107f8:	0546 0a07 0649 0b08 064b 0c08 064e 0d08     F...I...K...N...
   10808:	0650 0e09 0653 0f09 0655 1009 0783 3034     P...S...U.....40
   10818:	0785 3339 0788 343f 078a 3443 078d 3245     ..93..?4..C4..E2
   10828:	078f 3048 0792 2e4a 0794 2b4e 0697 2950     ..H0..J...N+..P)
   10838:	069a 2554 069c 2257 069f 1f5a 06a1 1c5d     ..T%..W"..Z...].
   10848:	05a4 1960 05a6 1664 05a9 1267 05ab 0f6b     ..`...d...g...k.
   10858:	05ae 0d6d 05b0 0a72 04b3 0775 04b5 0579     ..m...r...u...y.
   10868:	05b8 057c 07ba 0480 09bd 0483 0cbf 0488     ..|.............
   10878:	10c2 048b 14c4 0390 19c7 0393 1ec9 0398     ................
   10888:	26cc 039d 2ecf 02a1 37d1 02a6 43d4 02a9     .&.......7...C..
   10898:	50d6 02af 5fd9 01b2 71db 01b8 85de 01bb     .P..._...q......
   108a8:	9de0 01c1 b8e3 01c5 c2e5 01b8 c7e8 01a8     ................
   108b8:	ceea 0198 d2ed 0187 d9ef 0177 def2 0167     ..........w...g.
   108c8:	e5f4 0158 eaf7 0149 f2f9 013b f7fc 012f     ..X...I...;.../.
   108d8:	ffff 0124                                   ..$.

000108dc <es_ocean_breeze_036_gp>:
   108dc:	0100 0706 0159 6f63 9099 ffd1 00ff 5249     ....Y.co......IR

000108ec <bhw3_30_gp>:
   108ec:	0100 0104 010c 021c 101c 0b44 123a 1c0b     ..........D.:...
   108fc:	1f4f 301b 0260 220d 1e75 7b56 0287 3e2a     O..0`.."u.V{..*>
   1090c:	4a99 9b80 3cb5 291f a7d6 dfd3 b3ed 4e46     .J...<.)......FN
   1091c:	39ff 0702                                   .9..

00010920 <Blue_Cyan_Yellow_gp>:
   10920:	0000 ff00 003f ff37 007f ffff 2abf 2dff     ....?.7......*.-
   10930:	ffff 00ff                                   ....

00010934 <bhw3_34_gp>:
   10934:	1d00 cd70 5c30 faff 345b 0cdf 047c 150d     ..p.0\..[4..|...
   10944:	09b7 0f67 0ad8 0250 26ff 34ff               ..g...P..&.4

00010950 <sea_treasure_gp>:
   10950:	0100 050d 0319 1939 122d acbf 023d 0c1d     ......9.-...=...
   10960:	034c 1939 1265 acbf 0a7c 1436 0199 0c1e     L.9.e...|.6.....
   10970:	0ab2 160e 09d1 2f5d 08e8 1637 01ff 050d     ......]/..7.....

00010980 <bhw2_23_gp>:
   10980:	0000 0000 3942 e9e3 ff60 08ff ff7c ffff     ....B9..`...|...
   10990:	ff99 08ff 39bc e9e3 00ff 0000               .....9......

0001099c <sunlitwave_gp>:
   1099c:	0500 5409 252d 6f18 1051 3b05 1870 1401     ...T-%.oQ..;p...
   109ac:	2296 0201 afc6 0724 d0ed 1068 efff 9ed3     ."....$...h.....

000109bc <Tropical_Colors_gp>:
   109bc:	0100 0104 010e 010a 0115 0013 0123 012a     ............#.*.
   109cc:	0331 014b 383b 0167 d046 0487 d954 0236     1.K.;8g.F...T.6.
   109dc:	e062 010a 7582 030f 308d 0614 2a9b 4d12     b....u...0...*.M
   109ec:	24aa ff11 37c5 f261 50d2 e4ff 2fdc 4ddb     .$...7a..P.../.M
   109fc:	18e1 0abb 18e4 09b4 18e6 08ab 17e8 06a1     ................
   10a0c:	17eb 0595 16ed 0488 16f0 027c 15f2 0170     ..........|...p.
   10a1c:	15f5 0164 14f7 0158 13fa 014d 13fc 0142     ..d...X...M...B.
   10a2c:	12ff 0037                                   ..7.

00010a30 <bhw3_13_gp>:
   10a30:	0300 4806 0c26 bc32 d96d 0123 f287 0caf     ...H&.2.m.#.....
   10a40:	a1b2 5720 18ff 6c06                         .. W...l

00010a48 <scoutie_gp>:
   10a48:	ff00 009c 007f 12c3 01d8 2700 01ff 2700     ...........'...'

00010a58 <Wizzl019_gp>:
   10a58:	8c00 ac14 8c01 ac14 9402 b814 a003 c810     ................
   10a68:	9c04 c410 9805 bc10 9406 b410 8c07 ac0c     ................
   10a78:	8808 a40c 8409 9c0c 800a 940c 780b 8c08     .............x..
   10a88:	740c 8808 700d 8008 6c0e 7808 640f 7004     .t...p...l.x.d.p
   10a98:	6010 6804 5c11 6004 5812 5804 5013 5000     .`.h.\.`.X.X.P.P
   10aa8:	5414 4c04 5c15 480c 6416 4414 6c17 3c1c     .T.L.\.H.d.D.l.<
   10ab8:	7418 3824 7c19 342c 841a 3034 8c1b 283c     .t$8.|,4..40..<(
   10ac8:	901c 2440 981d 2048 a01e 1c50 a81f 1458     ..@$..H ..P...X.
   10ad8:	b020 1060 b821 0c68 c022 0870 c823 0078      .`.!.h.".p.#.x.
   10ae8:	c424 0074 bc25 0070 b426 006c ac27 0064     $.t.%.p.&.l.'.d.
   10af8:	a428 0060 9c29 005c 942a 0058 8c2b 0050     (.`.).\.*.X.+.P.
   10b08:	882c 004c 802d 0048 782e 0044 702f 003c     ,.L.-.H..xD./p<.
   10b18:	6830 0038 6031 0034 5832 0030 5033 0028     0h8.1`4.2X0.3P(.
   10b28:	4c34 0430 4835 083c 4436 0c44 3c37 1450     4L0.5H<.6DD.7<P.
   10b38:	3838 1858 3439 1c64 303a 206c 283b 2878     88X.94d.:0l ;(x(
   10b48:	243c 2c80 203d 308c 1c3e 3494 143f 3ca0     <$.,= .0>..4?..<
   10b58:	1040 40a8 0c41 44b4 0842 48bc 0043 50c8     @..@A..DB..HC..P
   10b68:	0044 4cc0 0045 48b4 0046 44ac 0047 3ca0     D..LE..HF..DG..<
   10b78:	0048 3898 0049 348c 004a 3084 004b 2878     H..8I..4J..0K.x(
   10b88:	004c 2470 004d 2064 004e 1c5c 004f 1450     L.p$M.d N.\.O.P.
   10b98:	0050 1048 0051 0c3c 0052 0834 0053 0028     P.H.Q.<.R.4.S.(.
   10ba8:	0054 0c28 0455 1c24 0456 2c24 0857 3c20     T.(.U.$.V.$,W. <
   10bb8:	0c58 481c 0c59 581c 105a 6818 145b 7814     X..HY..XZ..h[..x
   10bc8:	145c 8414 185d 9410 185e a410 1c5f b40c     \...]...^..._...
   10bd8:	2060 c008 2061 d008 2462 e004 2863 f000     ` ..a ..b$..c(..
   10be8:	2864 e800 2465 dc00 2466 d400 2067 c800     d(..e$..f$..g ..
   10bf8:	1c68 c000 1c69 b400 186a ac00 146b a000     h...i...j...k...
   10c08:	146c 9800 106d 8c00 106e 8400 0c6f 7800     l...m...n...o..x
   10c18:	0870 7000 0871 6400 0472 5c00 0073 5000     p..pq..dr..\s..P
   10c28:	0c74 5400 1875 5c00 2476 6400 3077 6c00     t..Tu..\v$.dw0.l
   10c38:	3c78 7400 4879 7c00 547a 8400 647b 8c00     x<.tyH.|zT..{d..
   10c48:	707c 9000 7c7d 9800 887e a000 947f a800     |p..}|..~.......
   10c58:	a080 b000 ac81 b800 b882 c000 c883 c800     ................
   10c68:	c084 c000 b485 b400 ac86 ac00 a087 a000     ................
   10c78:	9888 9800 8c89 8c00 848a 8400 788b 7800     .............x.x
   10c88:	708c 7000 648d 6400 5c8e 5c00 508f 5000     .p.p.d.d.\.\.P.P
   10c98:	4890 4800 3c91 3c00 3492 3400 2893 2800     .H.H.<.<.4.4.(.(
   10ca8:	3494 2800 4095 2800 4c96 2800 5897 2800     .4.(.@.(.L.(.X.(
   10cb8:	6498 2800 7099 2800 7c9a 2800 8c9b 2400     .d.(.p.(.|.(...$
   10cc8:	989c 2400 a49d 2400 b09e 2400 bc9f 2400     ...$...$...$...$
   10cd8:	c8a0 2400 d4a1 2400 e0a2 2400 f0a3 2000     ...$...$...$... 
   10ce8:	e8a4 2000 dca5 1c00 d4a6 1c00 c8a7 1800     ... ............
   10cf8:	c0a8 1800 b4a9 1400 acaa 1400 a0ab 1000     ................
   10d08:	98ac 1000 8cad 0c00 84ae 0c00 78af 0800     .............x..
   10d18:	70b0 0800 64b1 0400 5cb2 0400 50b3 0000     .p...d...\...P..
   10d28:	58b4 0008 60b5 0010 68b6 0018 74b7 0020     .X...`...h...t .
   10d38:	7cb8 0028 84b9 0030 8cba 0038 98bb 0040     .|(...0...8...@.
   10d48:	a0bc 0048 a8bd 0050 b0be 0058 bcbf 0060     ..H...P...X...`.
   10d58:	c4c0 0068 ccc1 0070 d4c2 0078 e0c3 0080     ..h...p...x.....
   10d68:	d8c4 007c ccc5 0074 c0c6 0070 b4c7 0068     ..|...t...p...h.
   10d78:	a8c8 0064 a0c9 005c 94ca 0058 88cb 0050     ..d...\...X...P.
   10d88:	7ccc 0048 70cd 0044 68ce 003c 5ccf 0038     .|H..pD..h<..\8.
   10d98:	50d0 0030 44d1 002c 38d2 0024 40d3 0824     .P0..D,..8$..@$.
   10da8:	4cd4 1424 58d5 1c24 64d6 2820 70d7 3020     .L$..X$..d (.p 0
   10db8:	7cd8 3c20 88d9 4420 94da 501c 9cdb 581c     .| <.. D...P...X
   10dc8:	a8dc 641c b4dd 6c1c c0de 7818 ccdf 8018     ...d...l...x....
   10dd8:	d8e0 8c18 e4e1 9418 f0e2 a014 e4e3 9814     ................
   10de8:	d4e4 8c14 c4e5 8418 b4e6 7818 a8e7 7018     ...........x...p
   10df8:	98e8 641c 88e9 5c1c 78ea 5020 6ceb 4820     ...d...\.x P.l H
   10e08:	5cec 3c20 4ced 3424 3cee 2824 30ef 2024     .\ <.L$4.<$(.0$ 
   10e18:	20f0 1428 10f1 0c28 00f2 002c 08f3 0c2c     . (...(...,...,.
   10e28:	14f4 182c 1cf5 2428 28f6 3028 30f7 3c24     ..,...($.((0.0$<
   10e38:	3cf8 4824 44f9 5420 50fa 6420 58fb 7020     .<$H.D T.P d.X p
   10e48:	64fc 7c1c 6cfd 881c 78fe 9418 80ff a018     .d.|.l...x......

00010e58 <green_gp>:
   10e58:	0000 0000 003f 0011 007e 0052 009b 0080     ....?...~.R.....
   10e68:	00b8 00ba 2adb 2ddb ffff ffff               .....*.-....

00010e74 <es_emerald_dragon_09_gp>:
   10e74:	0100 0101 014c 0102 0a99 012f 61ff 01ff     ....L...../..a..

00010e84 <es_emerald_dragon_01_gp>:
   10e84:	0100 0101 014f 0713 0182 193b 1ce5 ffff     ....O.....;.....
   10e94:	1cff ffff                                   ....

00010e98 <bhw1_26_gp>:
   10e98:	6b00 cd01 ff23 ffff 6b49 cd01 0a6b d295     .k..#...Ik..k...
   10ea8:	ff82 ffff 0a99 d295 1baa 77af 35c6 38cb     ...........w.5.8
   10eb8:	84cf 87e5 ffdb ffff 84e7 87e5 35fc 38cb     .............5.8
   10ec8:	35ff 38cb                                   .5.8

00010ecc <Coral_reef_gp>:
   10ecc:	2800 c5c7 0a32 9b98 0160 786f 2b60 a27f     .(..2...`.ox`+..
   10edc:	0a8b 6f49 01ff 4722                         ..Io.."G

00010ee4 <ib_jul01_gp>:
   10ee4:	c200 0101 015e 121d 3984 1c83 71ff 0101     ....^....9...q..

00010ef4 <bhw1_sunconure_gp>:
   10ef4:	1400 0ddf e8a0 0141 e8fc 0105 e8ff 0105     ......A.........

00010f04 <bhw1_05_gp>:
   10f04:	0100 35dd 49ff b203                         ...5.I..

00010f0c <fire_gp>:
   10f0c:	0100 0001 204c 0005 c092 0018 dcc5 0569     ....L ........i.
   10f1c:	fcf0 1fff fcfa 6fff ffff ffff               .......o....

00010f28 <blueice_gp>:
   10f28:	0000 0000 011f 0f02 013f 590a 0142 5d0c     ........?..YB..]
   10f38:	0144 600d 0147 640f 0149 6910 014c 6c12     D..`G..dI..iL..l
   10f48:	014e 7014 0151 7316 0153 7817 0156 7b1a     N..pQ..sS..xV..{
   10f58:	0158 801d 015b 841f 015d 8921 0160 8c24     X...[...].!.`.$.
   10f68:	0162 9128 0165 972b 0167 9b2e 016a a032     b.(.e.+.g...j.2.
   10f78:	016c a436 016f a638 0171 aa3c 0174 ac41     l.6.o.8.q.<.t.A.
   10f88:	0176 ae45 0179 b248 017b b44d 017e b651     v.E.y.H.{.M.~.Q.
   10f98:	0180 b856 0183 bc5b 0186 be60 0188 c065     ..V...[...`...e.
   10fa8:	018b c56b 018d c770 0190 c976 0192 cb7c     ..k...p...v...|.
   10fb8:	0195 cf82 0197 d28a 019a d490 019c d697     ................
   10fc8:	019f db9f 01a1 dda6 01a4 dfad 01a6 e4b6     ................
   10fd8:	01a9 e6bd 01ab e9c7 01ae ebcf 01b0 f0d9     ................
   10fe8:	01b3 f2e1 01b5 f5eb 02b8 f7f6 02ba f7fc     ................
   10ff8:	02bd f2ff 3dde f7ff ffff ffff               .....=......

00011004 <standard_gp>:
   11004:	0000 0000 0a54 ff11 0054 0011 0aa9 0cff     ....T...T.......
   11014:	0aa9 0000 ffff 0c11                         ........

0001101c <Colorfull_gp>:
   1101c:	0a00 0555 1d19 126d 3b3c 2a8a 535d 3463     ..U...m.<;.*]Sc4
   1102c:	6e6a 4042 7b6d 4131 8b71 4223 c074 6275     jnB@m{1Aq.#Bt.ub
   1103c:	ff7c 89ff 64a8 9bb4 16ff ae79               |....d....y.

00011048 <Ribbon_Colors_gp>:
   11048:	e300 0902 c21f 0933 a73f 08af 1b5f 4ed1     ......3.?..._..N
   11058:	017f f7f8 019f a64e 01bf 6605 2adf 124f     ......N....f.*O.
   11068:	ffff 00ff                                   ....

0001106c <rgi_15_gp>:
   1106c:	0400 1f01 371f 1001 c53f 0703 3b5f 1102     .....7..?..._;..
   1107c:	067f 2202 279f 2106 70bf 200d 38df 2309     ...".'.!.p. .8.#
   1108c:	16ff 2606                                   ...&

00011090 <bhw1_greeny_gp>:
   11090:	0000 0000 0727 0837 2a63 2dff 0799 0837     ....'.7.c*.-..7.
   110a0:	00ff 0000                                   ....

000110a4 <Magenta_Evening_gp>:
   110a4:	4700 271b 821f 330b d53f 4002 e846 4201     .G.'...3?..@F..B
   110b4:	fc4c 4501 7b6c 3302 2eff 2309               L..El{.3...#

000110c0 <slope_gp>:
   110c0:	ff00 ffff ff05 00ff 000e 00ff 001c ffff     ................
   110d0:	002a ff00 ff54 ff00 ff8d 0000 00ff 0000     *...T...........

000110e0 <es_ocean_breeze_068_gp>:
   110e0:	6400 999c 0133 8963 0165 5444 2368 a88e     .d..3.c.e.DTh#..
   110f0:	00b2 753f 01ff 0a0a                         ..?u....

000110f8 <alarm_p4_0_2_gp>:
   110f8:	e300 dfff ff0c 0424 ff19 0102 ff26 1001     ......$.....&...
   11108:	ff33 6201 ff3f e601 8c4c ff01 3f59 ff01     3..b?...L...Y?..
   11118:	1866 ff01 0572 ff01 017f ff01 018c ff04     f...r...........
   11128:	0199 ff10 01a5 ff24 01b2 ff3e 01bf ff5f     ......$...>..._.
   11138:	01cc ff83 01d8 ffad 01e5 ffdd 01f2 ebff     ................
   11148:	01ff baff                                   ....

0001114c <es_autumn_19_gp>:
   1114c:	1a00 0101 4333 0104 7654 010e 8968 3498     ....3C..Tv..h..4
   1115c:	7170 0141 857a 3b95 897c 3498 7187 0141     pqA.z..;|..4.qA.
   1116c:	8b8e 2e9a 71a3 010d 37cc 0103 11f9 0101     .....q...7......
   1117c:	11ff 0101                                   ....

00011180 <cequal_gp>:
   11180:	0100 0101 0124 0103 014c 7b29 3b70 fc01     ....$...L.){p;..
   11190:	757f b401 efac 0151 fcc3 01b4 fcde 93fa     .u....Q.........
   111a0:	fcff fcfc                                   ....

000111a4 <Fire_1_gp>:
   111a4:	ff00 0000 ff7f 0037 ffff 00ff               ......7.....

000111b0 <froth316_gp>:
   111b0:	f700 0000 f711 0000 9d11 0000 9d21 0000     ............!...
   111c0:	5621 0000 5633 0000 2733 0000 2744 0000     !V..3V..3'..D'..
   111d0:	0c44 0000 0c54 0000 0054 00f8 0066 00f8     D...T...T...f...
   111e0:	0066 00a9 0077 00a9 0077 0065 0087 0065     f...w...w.e...e.
   111f0:	0087 0034 0099 0034 0099 0013 00aa 0013     ..4...4.........
   11200:	00aa f700 00ba f700 00ba a000 00cc a000     ................
   11210:	00cc 5900 00dd 5900 00dd 2a00 00ed 2a00     ...Y...Y...*...*
   11220:	00ed 0e00 00ff 0e00                         ........

00011228 <a_gp>:
   11228:	0000 0000 001f 0037 003f 2dff ff7f ff00     ......7.?..-....
   11238:	ffa3 2d00 ffc4 0000 ffff 00ff               ...-........

00011244 <GMT_seafloor_gp>:
   11244:	1900 6d00 1c0a 7700 2015 7f00 231f 8c00     ...m...w. ...#..
   11254:	1b2a 9101 1435 9701 0e4a 9c04 0954 a409     *...5...J...T...
   11264:	055f aa0f 026a b018 0174 b623 018a bc31     _...j...t.#...1.
   11274:	0094 c542 019f cb4f 03aa d25d 0ab4 d86d     ..B...O...]...m.
   11284:	18bf df80 2bd4 e695 48df f0ad 70e9 f7c5     .....+...H...p..
   11294:	a3f4 ffe1 dcff fff8                         ........

0001129c <Analogous_1_gp>:
   1129c:	0300 ff00 173f ff00 437f ff00 8ebf 2d00     ....?....C.....-
   112ac:	ffff 0000                                   ....

000112b0 <bhw3_61_gp>:
   112b0:	0e00 1b01 1130 5801 0168 9c58 01a0 2a36     ....0..Xh.X...6*
   112c0:	09db 34eb 8bff e9eb                         ...4....

000112c8 <cw1_029_gp>:
   112c8:	0c00 d250 ff7f 13eb e0ff 0f42               ..P.......B.

000112d4 <rainbow2_gp>:
   112d4:	7e00 8e01 ab19 1a01 e030 0109 ed47 018a     .~......0...G...
   112e4:	345e 01ad 0175 01c9 018c 36d3 01a3 a87c     ^4..u......6..|.
   112f4:	01ba 9508 0cd1 9701 0ce8 9701 abff be01     ................

00011304 <GMT_drywet_gp>:
   11304:	2f00 021e d52a 1893 6754 34db 037f cfdb     ./..*...Tg.4....
   11314:	01aa d630 01d4 6f01 01ff 2107               ..0....o...!

00011320 <rainbowsherbet_gp>:
   11320:	ff00 0421 ff2b 1944 ff56 1907 ff7f 6752     ..!.+.D.V.....Rg
   11330:	ffaa f2ff 2ad1 16ff 57ff 41ff               .....*...W.A

0001133c <Complementary_01a_gp>:
   1133c:	0000 ff21 2a7f 2d21 ffff 0021               ..!..*!-..!.

00011348 <ofaurora_gp>:
   11348:	ff00 f2f1 ed0a 0901 2a0f 0201 0116 0101     .........*......
   11358:	ed23 0901 ff30 f2f1 ef3a 0139 0142 0101     #...0...:.9.B...
   11368:	ef4c 0139 ff54 f2f1 f25e 01d9 0165 0101     L.9.T...^...e...
   11378:	f26d 01d9 ff77 f2f1 097f 2490 0184 0101     m...w......$....
   11388:	098c 2490 ff93 f2f1 019e ba9c 01a8 0101     ...$............
   11398:	01b2 ba9c ffba f2f1 10c6 ff0d 01ce 0101     ................
   113a8:	10d8 ff0d ffe0 f2f1 4eea 9c01 0eed 1e01     .........N......
   113b8:	01ef 0101 4ef4 9c01 ffff f2f1               .....N......

000113c4 <p>:
   113c4:	a097 5b89 0f5a 0d83 5fc9 3560 e9c2 e107     ...[Z...._`5....
   113d4:	248c 1e67 8e45 6308 f025 0a15 be17 9406     .$g.E..c%.......
   113e4:	78f7 4bea 1a00 3ec5 fc5e cbdb 2375 200b     .x.K...>^...u#. 
   113f4:	b139 5821 95ed 5738 14ae 887d a8ab af44     9.!X..8W..}...D.
   11404:	a54a 8647 308b a61b 924d e79e 6f53 7ae5     J.G..0..M...So.z
   11414:	d33c e685 69dc 295c 2e37 28f5 66f4 368f     <....i\)7..(.f.6
   11424:	1941 a13f d801 4950 4cd1 bb84 59d0 a912     A.?...PI.L...Y..
   11434:	c4c8 8287 bc74 569f 64a4 c66d baad 4003     ....t..V.dm....@
   11444:	d934 fae2 7b7c ca05 9326 7e76 52ff d455     4...|{..&.v~.RU.
   11454:	cecf e33b 102f 113a bdb6 2a1c b7df d5aa     ..;./.:....*....
   11464:	f877 0298 9a2c 46a3 99dd 9b65 2ba7 09ac     w...,..F..e..+..
   11474:	1681 fd27 6213 6e6c 714f e8e0 b9b2 6870     ..'..blnOq....ph
   11484:	f6da e461 22fb c1f2 d2ee 0c90 b3bf f1a2     ..a.."..........
   11494:	3351 eb91 0ef9 6bef c031 1fd6 c7b5 9d6a     Q3.....k1.....j.
   114a4:	54b8 b0cc 7973 2d32 047f fe96 ec8a 5dcd     .T..sy2-.......]
   114b4:	72de 1d43 4818 8df3 c380 424e 3dd7 b49c     .rC..H....NB.=..
   114c4:	ff97 ffff 4d56 5044 5f45 0000 323a 003a     ....VMDPE_..:2:.
   114d4:	003a 0000 565f 444d 4550 0000 4d56 5044     :..._VMDPE..VMDP
   114e4:	5f43 0000 565f 444d 4350 0000 7245 6f72     C_.._VMDPC..Erro
   114f4:	3a72 4120 7474 6d65 7470 7420 206f 6573     r: Attempt to se
   11504:	2074 2061 6572 6461 6f2d 6c6e 2079 6176     t a read-only va
   11514:	6972 6261 656c 6f20 2072 6164 6174 7420     riable or data t
   11524:	7079 2065 6f6e 2074 7573 7070 726f 6574     ype not supporte
   11534:	0d64 000a                                   d...

00011538 <pin2sc1a>:
   11538:	0e05 0908 0c0d 0706 040f 1300 9303 0e05     ................
   11548:	0908 0c0d 0706 040f ffff 85c5 8684 c487     ................
   11558:	ffff 1300 9303 921a ff17 ffff               ............

00011564 <digital_pin_to_info_PGM>:
   11564:	0840 43fe a040 4004 0844 43fe a044 4004     @..C@..@D..CD..@
   11574:	1800 43fe c000 4004 0030 43fe 9030 4004     ...C...@0..C0..@
   11584:	0034 43fe 9034 4004 181c 43fe c01c 4004     4..C4..@...C...@
   11594:	1810 43fe c010 4004 1808 43fe c008 4004     ...C...@...C...@
   115a4:	180c 43fe c00c 4004 100c 43fe b00c 4004     ...C...@...C...@
   115b4:	1010 43fe b010 4004 1018 43fe b018 4004     ...C...@...C...@
   115c4:	101c 43fe b01c 4004 1014 43fe b014 4004     ...C...@...C...@
   115d4:	1804 43fe c004 4004 1000 43fe b000 4004     ...C...@...C...@
   115e4:	0800 43fe a000 4004 0804 43fe a004 4004     ...C...@...C...@
   115f4:	080c 43fe a00c 4004 0808 43fe a008 4004     ...C...@...C...@
   11604:	1814 43fe c014 4004 1818 43fe c018 4004     ...C...@...C...@
   11614:	1004 43fe b004 4004 1008 43fe b008 4004     ...C...@...C...@
   11624:	0014 43fe 9014 4004 084c 43fe a04c 4004     ...C...@L..CL..@
   11634:	2004 43fe d004 4004 1024 43fe b024 4004     . .C...@$..C$..@
   11644:	1020 43fe b020 4004 1028 43fe b028 4004      ..C ..@(..C(..@
   11654:	102c 43fe b02c 4004 2000 43fe d000 4004     ,..C,..@. .C...@
   11664:	0848 43fe a048 4004 0010 43fe 9010 4004     H..CH..@...C...@
   11674:	0a0d ffff                                   ....

00011678 <vtable for usb_serial_class>:
	...
   11680:	cf8d 0000 cf85 0000 cf81 0000 cf7d 0000     ............}...
   11690:	cf79 0000 cf75 0000 cf71 0000 cf6d 0000     y...u...q...m...

000116a0 <usb_endpoint_config_table>:
   116a0:	1500 1519                                   ....

000116a4 <usb_descriptor_list>:
   116a4:	0100 0000 879c 1fff 0012 0000 0200 0000     ................
   116b4:	87c8 1fff 0043 0000 0300 0000 8824 1fff     ....C.......$...
   116c4:	0000 0000 0301 0409 87b0 1fff 0000 0000     ................
   116d4:	0302 0409 880c 1fff 0000 0000 0303 0409     ................
   116e4:	8828 1fff 0000 0000 0000 0000 0000 0000     (...............
   116f4:	0000 0000                                   ....

000116f8 <_init>:
   116f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116fa:	bf00      	nop
   116fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   116fe:	bc08      	pop	{r3}
   11700:	469e      	mov	lr, r3
   11702:	4770      	bx	lr

00011704 <__init_array_start>:
   11704:	0000e55d 	.word	0x0000e55d

00011708 <__frame_dummy_init_array_entry>:
   11708:	00000435 0000a3ad 0000ae65 0000b521     5.......e...!...

Disassembly of section .fini:

00011718 <_fini>:
   11718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1171a:	bf00      	nop
