
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 81 b8 00 00 39 b8 00 00     ... ........9...
      10:	39 b8 00 00 39 b8 00 00 39 b8 00 00 39 b8 00 00     9...9...9...9...
      20:	39 b8 00 00 39 b8 00 00 39 b8 00 00 81 b8 00 00     9...9...9.......
      30:	81 b8 00 00 39 b8 00 00 ad cc 00 00 b1 cd 00 00     ....9...........
      40:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      50:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      60:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      70:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      80:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      90:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      a0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      b0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      c0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      d0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      e0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
      f0:	81 b8 00 00 09 d1 00 00 81 b8 00 00 35 d2 00 00     ............5...
     100:	81 b8 00 00 61 d3 00 00 81 b8 00 00 81 b8 00 00     ....a...........
     110:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     120:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     130:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     140:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     150:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     160:	81 b8 00 00 c9 bc 00 00 81 b8 00 00 81 b8 00 00     ................
     170:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     180:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     190:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     1a0:	81 b8 00 00 81 b8 00 00 81 b8 00 00 81 b8 00 00     ................
     1b0:	81 b8 00 00 81 b8 00 00 81 b8 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00b fb5a 	bl	b888 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00b fbae 	bl	ba34 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00b fb1f 	bl	b924 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00b fb10 	bl	b924 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00e f812 	bl	e330 <__libc_init_array>

	startup_late_hook();
     30c:	f00b fac2 	bl	b894 <startup_late_hook>
	main();
     310:	f00c fd56 	bl	cdc0 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	000116f4 	.word	0x000116f4
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fffabbc 	.word	0x1fffabbc
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e3dc2a9 	.word	0x5e3dc2a9
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	000116f8 	.word	0x000116f8

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	000116f8 	.word	0x000116f8
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.18]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     490:	3980      	subs	r1, #128	; 0x80
     492:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     494:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     496:	004b      	lsls	r3, r1, #1
     498:	7844      	ldrb	r4, [r0, #1]
     49a:	7882      	ldrb	r2, [r0, #2]
     49c:	b2c9      	uxtb	r1, r1
     49e:	b2db      	uxtb	r3, r3
     4a0:	1a61      	subs	r1, r4, r1
     4a2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4a4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ac:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ae:	7083      	strb	r3, [r0, #2]
}
     4b0:	bc10      	pop	{r4}
     4b2:	4770      	bx	lr

000004b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4b4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4b6:	4c1d      	ldr	r4, [pc, #116]	; (52c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x78>)
     4b8:	b083      	sub	sp, #12
     4ba:	6824      	ldr	r4, [r4, #0]
     4bc:	9401      	str	r4, [sp, #4]
	return ret;
     4be:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     4c0:	28ff      	cmp	r0, #255	; 0xff
     4c2:	bf98      	it	ls
     4c4:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     4c6:	f44f 748c 	mov.w	r4, #280	; 0x118
     4ca:	eba5 0303 	sub.w	r3, r5, r3
     4ce:	fb04 f303 	mul.w	r3, r4, r3
     4d2:	bf98      	it	ls
     4d4:	b280      	uxthls	r0, r0
     4d6:	fb00 f003 	mul.w	r0, r0, r3
     4da:	f3c0 400e 	ubfx	r0, r0, #16, #15
     4de:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e2:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     4e4:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     4e8:	d503      	bpl.n	4f2 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x3e>
     4ea:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     4ee:	3307      	adds	r3, #7
     4f0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f2:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     4f4:	4e0e      	ldr	r6, [pc, #56]	; (530 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     4f6:	4c0f      	ldr	r4, [pc, #60]	; (534 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     4f8:	5d76      	ldrb	r6, [r6, r5]
     4fa:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     4fe:	f3c3 0546 	ubfx	r5, r3, #1, #7
     502:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     506:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     508:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     50a:	bf4a      	itet	mi
     50c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     50e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     510:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     512:	1a52      	subs	r2, r2, r1
     514:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     518:	b292      	uxth	r2, r2
     51a:	b2a3      	uxth	r3, r4
     51c:	fb02 3303 	mla	r3, r2, r3, r3
     520:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     524:	b280      	uxth	r0, r0
     526:	b003      	add	sp, #12
     528:	bc70      	pop	{r4, r5, r6}
     52a:	4770      	bx	lr
     52c:	1fffa8f8 	.word	0x1fffa8f8
     530:	000104f4 	.word	0x000104f4
     534:	0000fd64 	.word	0x0000fd64

00000538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     538:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     53a:	4c1e      	ldr	r4, [pc, #120]	; (5b4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x7c>)
     53c:	b083      	sub	sp, #12
     53e:	6824      	ldr	r4, [r4, #0]
     540:	9401      	str	r4, [sp, #4]
	return ret;
     542:	9d01      	ldr	r5, [sp, #4]
     544:	28ff      	cmp	r0, #255	; 0xff
     546:	bf98      	it	ls
     548:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     54a:	f44f 748c 	mov.w	r4, #280	; 0x118
     54e:	eba5 0303 	sub.w	r3, r5, r3
     552:	fb04 f303 	mul.w	r3, r4, r3
     556:	bf98      	it	ls
     558:	b280      	uxthls	r0, r0
     55a:	fb00 f003 	mul.w	r0, r0, r3
     55e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     566:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     568:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     56a:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     56e:	d503      	bpl.n	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x40>
     570:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     574:	3307      	adds	r3, #7
     576:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     578:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     57a:	4e0f      	ldr	r6, [pc, #60]	; (5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     57c:	4c0f      	ldr	r4, [pc, #60]	; (5bc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     57e:	5d76      	ldrb	r6, [r6, r5]
     580:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     584:	f3c3 0546 	ubfx	r5, r3, #1, #7
     588:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     58c:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     58e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     590:	bf4a      	itet	mi
     592:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     594:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     596:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     598:	1a52      	subs	r2, r2, r1
     59a:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     59e:	b292      	uxth	r2, r2
     5a0:	b2a3      	uxth	r3, r4
     5a2:	fb02 3303 	mla	r3, r2, r3, r3
     5a6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5aa:	b280      	uxth	r0, r0
     5ac:	b003      	add	sp, #12
     5ae:	bc70      	pop	{r4, r5, r6}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	1fffa8f8 	.word	0x1fffa8f8
     5b8:	000104f4 	.word	0x000104f4
     5bc:	0000fd64 	.word	0x0000fd64

000005c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     5c0:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     5c2:	2101      	movs	r1, #1
     5c4:	4604      	mov	r4, r0
     5c6:	200e      	movs	r0, #14
     5c8:	f00b f9be 	bl	b948 <pinMode>
     5cc:	2007      	movs	r0, #7
     5ce:	2101      	movs	r1, #1
     5d0:	f00b f9ba 	bl	b948 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     5d4:	69a0      	ldr	r0, [r4, #24]
     5d6:	b158      	cbz	r0, 5f0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     5d8:	6803      	ldr	r3, [r0, #0]
     5da:	4a07      	ldr	r2, [pc, #28]	; (5f8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     5dc:	685b      	ldr	r3, [r3, #4]
     5de:	4293      	cmp	r3, r2
     5e0:	d107      	bne.n	5f2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     5e2:	6842      	ldr	r2, [r0, #4]
     5e4:	7b01      	ldrb	r1, [r0, #12]
     5e6:	7813      	ldrb	r3, [r2, #0]
     5e8:	ea23 0301 	bic.w	r3, r3, r1
     5ec:	7013      	strb	r3, [r2, #0]
     5ee:	bd10      	pop	{r4, pc}
     5f0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     5f6:	4718      	bx	r3
     5f8:	00000481 	.word	0x00000481

000005fc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5fe:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     600:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     602:	6805      	ldr	r5, [r0, #0]
     604:	f88d 3004 	strb.w	r3, [sp, #4]
     608:	f88d 3005 	strb.w	r3, [sp, #5]
     60c:	f88d 3006 	strb.w	r3, [sp, #6]
     610:	682e      	ldr	r6, [r5, #0]
     612:	4a37      	ldr	r2, [pc, #220]	; (6f0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     614:	f88d 3008 	strb.w	r3, [sp, #8]
     618:	4296      	cmp	r6, r2
     61a:	f88d 3009 	strb.w	r3, [sp, #9]
     61e:	f88d 300a 	strb.w	r3, [sp, #10]
     622:	d15f      	bne.n	6e4 <CLEDController::clearLeds(int)+0xe8>
     624:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     626:	9104      	str	r1, [sp, #16]
     628:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     62a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     62c:	a801      	add	r0, sp, #4
     62e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     630:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     634:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     638:	f88d 3020 	strb.w	r3, [sp, #32]
     63c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     63e:	d015      	beq.n	66c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     640:	f88d 301d 	strb.w	r3, [sp, #29]
     644:	f88d 301c 	strb.w	r3, [sp, #28]
     648:	f88d 301b 	strb.w	r3, [sp, #27]
     64c:	f88d 301a 	strb.w	r3, [sp, #26]
     650:	f88d 3019 	strb.w	r3, [sp, #25]
     654:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     658:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     65a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     65c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     660:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     662:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     664:	a903      	add	r1, sp, #12
     666:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     668:	b00b      	add	sp, #44	; 0x2c
     66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     66c:	4a21      	ldr	r2, [pc, #132]	; (6f4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     66e:	7813      	ldrb	r3, [r2, #0]
     670:	3301      	adds	r3, #1
     672:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     676:	f013 0f01 	tst.w	r3, #1
     67a:	bf14      	ite	ne
     67c:	2180      	movne	r1, #128	; 0x80
     67e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     680:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     682:	079a      	lsls	r2, r3, #30
     684:	bf44      	itt	mi
     686:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     68a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     68c:	075b      	lsls	r3, r3, #29
     68e:	bf48      	it	mi
     690:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     694:	3110      	adds	r1, #16
     696:	2200      	movs	r2, #0
     698:	b2c9      	uxtb	r1, r1
     69a:	f10d 031b 	add.w	r3, sp, #27
     69e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6a2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6a6:	b1aa      	cbz	r2, 6d4 <CLEDController::clearLeds(int)+0xd8>
     6a8:	fb9e f2f2 	sdiv	r2, lr, r2
     6ac:	b2d2      	uxtb	r2, r2
     6ae:	1c50      	adds	r0, r2, #1
     6b0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     6b2:	fb00 1501 	mla	r5, r0, r1, r1
     6b6:	122d      	asrs	r5, r5, #8
     6b8:	7018      	strb	r0, [r3, #0]
     6ba:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6bc:	b105      	cbz	r5, 6c0 <CLEDController::clearLeds(int)+0xc4>
     6be:	3e01      	subs	r6, #1
     6c0:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     6c4:	b100      	cbz	r0, 6c8 <CLEDController::clearLeds(int)+0xcc>
     6c6:	701a      	strb	r2, [r3, #0]
     6c8:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6ca:	429f      	cmp	r7, r3
     6cc:	d008      	beq.n	6e0 <CLEDController::clearLeds(int)+0xe4>
     6ce:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6d0:	2a00      	cmp	r2, #0
     6d2:	d1e9      	bne.n	6a8 <CLEDController::clearLeds(int)+0xac>
     6d4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     6d6:	f803 2c03 	strb.w	r2, [r3, #-3]
     6da:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     6dc:	429f      	cmp	r7, r3
     6de:	d1f6      	bne.n	6ce <CLEDController::clearLeds(int)+0xd2>
     6e0:	6825      	ldr	r5, [r4, #0]
     6e2:	e7b9      	b.n	658 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     6e4:	460a      	mov	r2, r1
     6e6:	ab02      	add	r3, sp, #8
     6e8:	a901      	add	r1, sp, #4
     6ea:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6ec:	b00b      	add	sp, #44	; 0x2c
     6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6f0:	000007bd 	.word	0x000007bd
     6f4:	1fff8c88 	.word	0x1fff8c88

000006f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6fa:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6fc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     6fe:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     700:	789b      	ldrb	r3, [r3, #2]
     702:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     704:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     706:	9101      	str	r1, [sp, #4]
     708:	9202      	str	r2, [sp, #8]
     70a:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     70c:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     710:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     714:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     718:	d017      	beq.n	74a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     71a:	2300      	movs	r3, #0
     71c:	f88d 3015 	strb.w	r3, [sp, #21]
     720:	f88d 3014 	strb.w	r3, [sp, #20]
     724:	f88d 3013 	strb.w	r3, [sp, #19]
     728:	f88d 3012 	strb.w	r3, [sp, #18]
     72c:	f88d 3011 	strb.w	r3, [sp, #17]
     730:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     734:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     736:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     738:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     73a:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     73c:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     740:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     742:	a901      	add	r1, sp, #4
     744:	4798      	blx	r3
  }
     746:	b009      	add	sp, #36	; 0x24
     748:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     74a:	4a1b      	ldr	r2, [pc, #108]	; (7b8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     74c:	7813      	ldrb	r3, [r2, #0]
     74e:	3301      	adds	r3, #1
     750:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     754:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     758:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     75a:	bf14      	ite	ne
     75c:	2280      	movne	r2, #128	; 0x80
     75e:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     760:	0799      	lsls	r1, r3, #30
     762:	bf44      	itt	mi
     764:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     768:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     76a:	075b      	lsls	r3, r3, #29
     76c:	bf48      	it	mi
     76e:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     772:	3210      	adds	r2, #16
     774:	b2d2      	uxtb	r2, r2
     776:	f10d 0313 	add.w	r3, sp, #19
     77a:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     77e:	f44f 7e80 	mov.w	lr, #256	; 0x100
     782:	b1ac      	cbz	r4, 7b0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     784:	fb9e f4f4 	sdiv	r4, lr, r4
     788:	b2e4      	uxtb	r4, r4
     78a:	1c61      	adds	r1, r4, #1
     78c:	b2c9      	uxtb	r1, r1
     78e:	fb01 2502 	mla	r5, r1, r2, r2
     792:	122d      	asrs	r5, r5, #8
     794:	7019      	strb	r1, [r3, #0]
     796:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     798:	b105      	cbz	r5, 79c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     79a:	3e01      	subs	r6, #1
     79c:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     7a0:	b101      	cbz	r1, 7a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     7a2:	701c      	strb	r4, [r3, #0]
     7a4:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     7a6:	42bb      	cmp	r3, r7
     7a8:	d0c4      	beq.n	734 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     7aa:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     7ac:	2c00      	cmp	r4, #0
     7ae:	d1e9      	bne.n	784 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     7b0:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     7b2:	f803 4c03 	strb.w	r4, [r3, #-3]
     7b6:	e7f5      	b.n	7a4 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     7b8:	1fff8c88 	.word	0x1fff8c88

000007bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7c0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7c2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7c4:	789b      	ldrb	r3, [r3, #2]
     7c6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7c8:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     7ca:	9101      	str	r1, [sp, #4]
     7cc:	9202      	str	r2, [sp, #8]
     7ce:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7d0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     7d4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     7d8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7dc:	d016      	beq.n	80c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7de:	2300      	movs	r3, #0
     7e0:	f88d 3015 	strb.w	r3, [sp, #21]
     7e4:	f88d 3014 	strb.w	r3, [sp, #20]
     7e8:	f88d 3013 	strb.w	r3, [sp, #19]
     7ec:	f88d 3012 	strb.w	r3, [sp, #18]
     7f0:	f88d 3011 	strb.w	r3, [sp, #17]
     7f4:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7f8:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7fa:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7fc:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     7fe:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     802:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     804:	a901      	add	r1, sp, #4
     806:	4790      	blx	r2
  }
     808:	b009      	add	sp, #36	; 0x24
     80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     80c:	4a1b      	ldr	r2, [pc, #108]	; (87c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     80e:	7813      	ldrb	r3, [r2, #0]
     810:	3301      	adds	r3, #1
     812:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     816:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     81a:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     81c:	bf14      	ite	ne
     81e:	2280      	movne	r2, #128	; 0x80
     820:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     822:	0799      	lsls	r1, r3, #30
     824:	bf44      	itt	mi
     826:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     82a:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     82c:	075b      	lsls	r3, r3, #29
     82e:	bf48      	it	mi
     830:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     834:	3210      	adds	r2, #16
     836:	b2d2      	uxtb	r2, r2
     838:	f10d 0313 	add.w	r3, sp, #19
     83c:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     840:	f44f 7e80 	mov.w	lr, #256	; 0x100
     844:	b1ac      	cbz	r4, 872 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     846:	fb9e f4f4 	sdiv	r4, lr, r4
     84a:	b2e4      	uxtb	r4, r4
     84c:	1c61      	adds	r1, r4, #1
     84e:	b2c9      	uxtb	r1, r1
     850:	fb01 2502 	mla	r5, r1, r2, r2
     854:	122d      	asrs	r5, r5, #8
     856:	7019      	strb	r1, [r3, #0]
     858:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     85a:	b105      	cbz	r5, 85e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     85c:	3e01      	subs	r6, #1
     85e:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     862:	b101      	cbz	r1, 866 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     864:	701c      	strb	r4, [r3, #0]
     866:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     868:	42bb      	cmp	r3, r7
     86a:	d0c5      	beq.n	7f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     86c:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     86e:	2c00      	cmp	r4, #0
     870:	d1e9      	bne.n	846 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     872:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     874:	f803 4c03 	strb.w	r4, [r3, #-3]
     878:	e7f5      	b.n	866 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     87a:	bf00      	nop
     87c:	1fff8c88 	.word	0x1fff8c88

00000880 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     880:	b570      	push	{r4, r5, r6, lr}
     882:	4604      	mov	r4, r0
     884:	4608      	mov	r0, r1
     886:	460d      	mov	r5, r1
     888:	f00d fdfa 	bl	e480 <strlen>
     88c:	6823      	ldr	r3, [r4, #0]
     88e:	4602      	mov	r2, r0
     890:	4629      	mov	r1, r5
     892:	4620      	mov	r0, r4
     894:	685b      	ldr	r3, [r3, #4]
     896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     89a:	4718      	bx	r3

0000089c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     89c:	b538      	push	{r3, r4, r5, lr}
     89e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a0:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8a2:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8a4:	f00d fdec 	bl	e480 <strlen>
     8a8:	6823      	ldr	r3, [r4, #0]
     8aa:	4602      	mov	r2, r0
     8ac:	4629      	mov	r1, r5
     8ae:	685b      	ldr	r3, [r3, #4]
     8b0:	4620      	mov	r0, r4
     8b2:	4798      	blx	r3
     8b4:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8b6:	4620      	mov	r0, r4
     8b8:	f00c fa8a 	bl	cdd0 <Print::println()>
     8bc:	4428      	add	r0, r5
     8be:	bd38      	pop	{r3, r4, r5, pc}

000008c0 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8c4:	780d      	ldrb	r5, [r1, #0]
     8c6:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     8c8:	784d      	ldrb	r5, [r1, #1]
     8ca:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     8cc:	7889      	ldrb	r1, [r1, #2]
     8ce:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8d0:	7811      	ldrb	r1, [r2, #0]
     8d2:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     8d4:	7851      	ldrb	r1, [r2, #1]
     8d6:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     8d8:	7892      	ldrb	r2, [r2, #2]
     8da:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8dc:	781a      	ldrb	r2, [r3, #0]
     8de:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     8e0:	785a      	ldrb	r2, [r3, #1]
     8e2:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     8e4:	789b      	ldrb	r3, [r3, #2]
     8e6:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     8ea:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     8ec:	f89a b000 	ldrb.w	fp, [sl]
     8f0:	f880 b009 	strb.w	fp, [r0, #9]
     8f4:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     8f8:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     8fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     900:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     902:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     904:	9d10      	ldr	r5, [sp, #64]	; 0x40
     906:	9911      	ldr	r1, [sp, #68]	; 0x44
     908:	9a12      	ldr	r2, [sp, #72]	; 0x48
     90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     90c:	f89a b001 	ldrb.w	fp, [sl, #1]
     910:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     914:	f89a a002 	ldrb.w	sl, [sl, #2]
     918:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91c:	f899 a000 	ldrb.w	sl, [r9]
     920:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     924:	f899 a001 	ldrb.w	sl, [r9, #1]
     928:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     92c:	f899 9002 	ldrb.w	r9, [r9, #2]
     930:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     934:	f898 9000 	ldrb.w	r9, [r8]
     938:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     93c:	f898 9001 	ldrb.w	r9, [r8, #1]
     940:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     944:	f898 8002 	ldrb.w	r8, [r8, #2]
     948:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     94c:	f89c 8000 	ldrb.w	r8, [ip]
     950:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     954:	f89c 8001 	ldrb.w	r8, [ip, #1]
     958:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     95c:	f89c c002 	ldrb.w	ip, [ip, #2]
     960:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     964:	f89e c000 	ldrb.w	ip, [lr]
     968:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     96c:	f89e c001 	ldrb.w	ip, [lr, #1]
     970:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     974:	f89e e002 	ldrb.w	lr, [lr, #2]
     978:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     97c:	f897 e000 	ldrb.w	lr, [r7]
     980:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     984:	f897 e001 	ldrb.w	lr, [r7, #1]
     988:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     98c:	78bf      	ldrb	r7, [r7, #2]
     98e:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     990:	7837      	ldrb	r7, [r6, #0]
     992:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     994:	7877      	ldrb	r7, [r6, #1]
     996:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     998:	78b6      	ldrb	r6, [r6, #2]
     99a:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     99c:	782e      	ldrb	r6, [r5, #0]
     99e:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     9a0:	786e      	ldrb	r6, [r5, #1]
     9a2:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     9a4:	78ad      	ldrb	r5, [r5, #2]
     9a6:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9aa:	780d      	ldrb	r5, [r1, #0]
     9ac:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     9b0:	784d      	ldrb	r5, [r1, #1]
     9b2:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     9b6:	7889      	ldrb	r1, [r1, #2]
     9b8:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9bc:	7811      	ldrb	r1, [r2, #0]
     9be:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     9c2:	7851      	ldrb	r1, [r2, #1]
     9c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     9c8:	7892      	ldrb	r2, [r2, #2]
     9ca:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d0:	7812      	ldrb	r2, [r2, #0]
     9d2:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     9d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9d8:	7852      	ldrb	r2, [r2, #1]
     9da:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     9de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     9e0:	7892      	ldrb	r2, [r2, #2]
     9e2:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9e8:	7812      	ldrb	r2, [r2, #0]
     9ea:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     9ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f0:	7852      	ldrb	r2, [r2, #1]
     9f2:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     9f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
     9f8:	7892      	ldrb	r2, [r2, #2]
     9fa:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9fe:	781a      	ldrb	r2, [r3, #0]
     a00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     a04:	785a      	ldrb	r2, [r3, #1]
     a06:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     a0a:	789b      	ldrb	r3, [r3, #2]
     a0c:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000a14 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a18:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     a1a:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     a1c:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     a1e:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     a22:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a24:	3701      	adds	r7, #1
        } while ( u.index != 255);
     a26:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     a28:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     a2a:	d1f8      	bne.n	a1e <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a2c:	680b      	ldr	r3, [r1, #0]
     a2e:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     a30:	ea4f 6813 	mov.w	r8, r3, lsr #24
     a34:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     a38:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a3c:	f04f 33ff 	mov.w	r3, #4294967295
     a40:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     a42:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     a44:	9305      	str	r3, [sp, #20]
     a46:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     a48:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a4c:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a4e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     a52:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a56:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     a5a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     a5c:	b2f9      	uxtb	r1, r7
     a5e:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a62:	9103      	str	r1, [sp, #12]
     a64:	b2e9      	uxtb	r1, r5
     a66:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     a68:	fa5f f18c 	uxtb.w	r1, ip
     a6c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     a6e:	9907      	ldr	r1, [sp, #28]
     a70:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a72:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a74:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a78:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a7c:	d80c      	bhi.n	a98 <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a7e:	9905      	ldr	r1, [sp, #20]
     a80:	458c      	cmp	ip, r1
     a82:	dc07      	bgt.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     a84:	290f      	cmp	r1, #15
     a86:	d005      	beq.n	a94 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     a88:	3101      	adds	r1, #1
     a8a:	b2c9      	uxtb	r1, r1
     a8c:	428b      	cmp	r3, r1
     a8e:	9102      	str	r1, [sp, #8]
     a90:	bf38      	it	cc
     a92:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a94:	b259      	sxtb	r1, r3
     a96:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a98:	a909      	add	r1, sp, #36	; 0x24
     a9a:	9100      	str	r1, [sp, #0]
     a9c:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a9e:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     aa2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     aa6:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aaa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     aae:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     ab2:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     ab6:	f009 fee3 	bl	a880 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     aba:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     abc:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac0:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     ac4:	46d1      	mov	r9, sl
     ac6:	d1bf      	bne.n	a48 <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     ac8:	9806      	ldr	r0, [sp, #24]
     aca:	b00b      	add	sp, #44	; 0x2c
     acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ad0 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     ad0:	4b48      	ldr	r3, [pc, #288]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     ad2:	781b      	ldrb	r3, [r3, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	f000 808b 	beq.w	bf0 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ade:	b09b      	sub	sp, #108	; 0x6c
     ae0:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     ae4:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     ae6:	2300      	movs	r3, #0
     ae8:	4a43      	ldr	r2, [pc, #268]	; (bf8 <updatePaletteIndex(LEDStruct&)+0x128>)
     aea:	9307      	str	r3, [sp, #28]
     aec:	f8df 910c 	ldr.w	r9, [pc, #268]	; bfc <updatePaletteIndex(LEDStruct&)+0x12c>
     af0:	9009      	str	r0, [sp, #36]	; 0x24
     af2:	f200 2327 	addw	r3, r0, #551	; 0x227
     af6:	9208      	str	r2, [sp, #32]
     af8:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     afa:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     afc:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     b00:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b02:	3701      	adds	r7, #1
        } while ( u.index != 255);
     b04:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     b06:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     b08:	d1f8      	bne.n	afc <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b0a:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b0e:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b10:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b14:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b18:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     b1a:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     b1e:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     b22:	2400      	movs	r4, #0
     b24:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b26:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     b2e:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b32:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b36:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b38:	b2f1      	uxtb	r1, r6
     b3a:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b3e:	9103      	str	r1, [sp, #12]
     b40:	b2e9      	uxtb	r1, r5
     b42:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b44:	fa5f f18c 	uxtb.w	r1, ip
     b48:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b4a:	9906      	ldr	r1, [sp, #24]
     b4c:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b4e:	aa0c      	add	r2, sp, #48	; 0x30
     b50:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b52:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b56:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b5a:	d80c      	bhi.n	b76 <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b5c:	9905      	ldr	r1, [sp, #20]
     b5e:	458c      	cmp	ip, r1
     b60:	dc07      	bgt.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
     b62:	290f      	cmp	r1, #15
     b64:	d005      	beq.n	b72 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     b66:	3101      	adds	r1, #1
     b68:	b2c9      	uxtb	r1, r1
     b6a:	428b      	cmp	r3, r1
     b6c:	9102      	str	r1, [sp, #8]
     b6e:	bf38      	it	cc
     b70:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b72:	b259      	sxtb	r1, r3
     b74:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b76:	a90d      	add	r1, sp, #52	; 0x34
     b78:	9100      	str	r1, [sp, #0]
     b7a:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b7c:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     b80:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     b84:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b88:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     b8c:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     b90:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     b94:	f009 fe74 	bl	a880 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b98:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b9a:	46d3      	mov	fp, sl
        g = rhs.g;
     b9c:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     ba0:	f8dd 8010 	ldr.w	r8, [sp, #16]
     ba4:	d1bf      	bne.n	b26 <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ba8:	aa0e      	add	r2, sp, #56	; 0x38
     baa:	4293      	cmp	r3, r2
     bac:	d018      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
     bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
     bb0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     bb2:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     bb6:	e001      	b.n	bbc <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     bb8:	42a3      	cmp	r3, r4
     bba:	d011      	beq.n	be0 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     bbc:	f812 1b01 	ldrb.w	r1, [r2], #1
     bc0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     bc4:	4288      	cmp	r0, r1
     bc6:	d0f7      	beq.n	bb8 <updatePaletteIndex(LEDStruct&)+0xe8>
     bc8:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <updatePaletteIndex(LEDStruct&)+0x124>)
     bca:	9a07      	ldr	r2, [sp, #28]
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	3201      	adds	r2, #1
     bd0:	4293      	cmp	r3, r2
     bd2:	9207      	str	r2, [sp, #28]
     bd4:	dd09      	ble.n	bea <updatePaletteIndex(LEDStruct&)+0x11a>
     bd6:	9b08      	ldr	r3, [sp, #32]
     bd8:	f853 9f04 	ldr.w	r9, [r3, #4]!
     bdc:	9308      	str	r3, [sp, #32]
     bde:	e78c      	b.n	afa <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
     be2:	f89d 201c 	ldrb.w	r2, [sp, #28]
     be6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     bea:	b01b      	add	sp, #108	; 0x6c
     bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bf0:	4770      	bx	lr
     bf2:	bf00      	nop
     bf4:	1fff8750 	.word	0x1fff8750
     bf8:	00010334 	.word	0x00010334
     bfc:	00010ec0 	.word	0x00010ec0

00000c00 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c04:	b08b      	sub	sp, #44	; 0x2c
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     c06:	aa09      	add	r2, sp, #36	; 0x24
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     c08:	2400      	movs	r4, #0
     c0a:	488b      	ldr	r0, [pc, #556]	; (e38 <initialize()+0x238>)
     c0c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
     c10:	2196      	movs	r1, #150	; 0x96
     c12:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
     c16:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
     c1a:	f009 fe01 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     c1e:	4b86      	ldr	r3, [pc, #536]	; (e38 <initialize()+0x238>)
     c20:	4986      	ldr	r1, [pc, #536]	; (e3c <initialize()+0x23c>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     c22:	f883 41c6 	strb.w	r4, [r3, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     c26:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
     c2a:	f7ff fef3 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     c2e:	4b82      	ldr	r3, [pc, #520]	; (e38 <initialize()+0x238>)
     c30:	4983      	ldr	r1, [pc, #524]	; (e40 <initialize()+0x240>)
     c32:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
     c36:	f7ff feed 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     c3a:	487f      	ldr	r0, [pc, #508]	; (e38 <initialize()+0x238>)
     c3c:	f7ff ff48 	bl	ad0 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     c40:	4b80      	ldr	r3, [pc, #512]	; (e44 <initialize()+0x244>)
     c42:	4a81      	ldr	r2, [pc, #516]	; (e48 <initialize()+0x248>)
     c44:	7818      	ldrb	r0, [r3, #0]
     c46:	4b7c      	ldr	r3, [pc, #496]	; (e38 <initialize()+0x238>)
     c48:	f883 022c 	strb.w	r0, [r3, #556]	; 0x22c
     c4c:	4623      	mov	r3, r4
     c4e:	e001      	b.n	c54 <initialize()+0x54>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     c50:	2b1e      	cmp	r3, #30
     c52:	d009      	beq.n	c68 <initialize()+0x68>
		if (leds.mode_name == ModeList[i]) {
     c54:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     c58:	4281      	cmp	r1, r0
     c5a:	b2dc      	uxtb	r4, r3
     c5c:	f103 0301 	add.w	r3, r3, #1
     c60:	d1f6      	bne.n	c50 <initialize()+0x50>
			leds.mode_number = i;
     c62:	4b75      	ldr	r3, [pc, #468]	; (e38 <initialize()+0x238>)
     c64:	f883 422b 	strb.w	r4, [r3, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     c68:	4c78      	ldr	r4, [pc, #480]	; (e4c <initialize()+0x24c>)
     c6a:	2700      	movs	r7, #0
     c6c:	2196      	movs	r1, #150	; 0x96
     c6e:	4620      	mov	r0, r4
     c70:	aa09      	add	r2, sp, #36	; 0x24
     c72:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     c76:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     c7a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     c7e:	f009 fdcf 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     c82:	2301      	movs	r3, #1
     c84:	4972      	ldr	r1, [pc, #456]	; (e50 <initialize()+0x250>)
     c86:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     c8a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     c8e:	4a70      	ldr	r2, [pc, #448]	; (e50 <initialize()+0x250>)
            count++;;
        } while ( u.index != 255);
     c90:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c92:	3701      	adds	r7, #1
        } while ( u.index != 255);
     c94:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     c96:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     c98:	d1f7      	bne.n	c8a <initialize()+0x8a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     c9a:	6813      	ldr	r3, [r2, #0]
     c9c:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     c9e:	ea4f 6813 	mov.w	r8, r3, lsr #24
     ca2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     ca6:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     caa:	f04f 33ff 	mov.w	r3, #4294967295
     cae:	46c6      	mov	lr, r8
     cb0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     cb2:	2400      	movs	r4, #0
     cb4:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     cb6:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     cba:	4866      	ldr	r0, [pc, #408]	; (e54 <initialize()+0x254>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cbc:	f3c5 2707 	ubfx	r7, r5, #8, #8
     cc0:	f3c5 4607 	ubfx	r6, r5, #16, #8
     cc4:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     cc6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cca:	9104      	str	r1, [sp, #16]
     ccc:	b2f1      	uxtb	r1, r6
     cce:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     cd0:	fa5f f18c 	uxtb.w	r1, ip
     cd4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     cd6:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     cd8:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     cda:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     cdc:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     ce0:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     ce2:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     ce6:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     cea:	d80c      	bhi.n	d06 <initialize()+0x106>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     cec:	9906      	ldr	r1, [sp, #24]
     cee:	458c      	cmp	ip, r1
     cf0:	dc07      	bgt.n	d02 <initialize()+0x102>
     cf2:	290f      	cmp	r1, #15
     cf4:	d005      	beq.n	d02 <initialize()+0x102>
                    istart8 = lastSlotUsed + 1;
     cf6:	3101      	adds	r1, #1
     cf8:	b2c9      	uxtb	r1, r1
     cfa:	428b      	cmp	r3, r1
     cfc:	9103      	str	r1, [sp, #12]
     cfe:	bf38      	it	cc
     d00:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     d02:	b259      	sxtb	r1, r3
     d04:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d06:	a909      	add	r1, sp, #36	; 0x24
     d08:	9100      	str	r1, [sp, #0]
     d0a:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d0c:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     d10:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     d14:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d18:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     d1c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     d20:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     d24:	f009 fdac 	bl	a880 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     d28:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d2a:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     d2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     d32:	46d6      	mov	lr, sl
     d34:	d1bf      	bne.n	cb6 <initialize()+0xb6>
     d36:	4948      	ldr	r1, [pc, #288]	; (e58 <initialize()+0x258>)
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     d38:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     d3a:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     d3e:	4a46      	ldr	r2, [pc, #280]	; (e58 <initialize()+0x258>)
            count++;;
        } while ( u.index != 255);
     d40:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d42:	3701      	adds	r7, #1
        } while ( u.index != 255);
     d44:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     d46:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     d48:	d1f7      	bne.n	d3a <initialize()+0x13a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d4a:	6813      	ldr	r3, [r2, #0]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d4c:	9707      	str	r7, [sp, #28]
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     d4e:	ea4f 6813 	mov.w	r8, r3, lsr #24
     d52:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     d56:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d5a:	f04f 33ff 	mov.w	r3, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d5e:	46c6      	mov	lr, r8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     d60:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     d62:	2400      	movs	r4, #0
     d64:	4690      	mov	r8, r2
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     d66:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d6a:	4b38      	ldr	r3, [pc, #224]	; (e4c <initialize()+0x24c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d6c:	f3c5 2707 	ubfx	r7, r5, #8, #8
     d70:	f3c5 4607 	ubfx	r6, r5, #16, #8
     d74:	b2f9      	uxtb	r1, r7
            istart8 = indexstart / 16;
     d76:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d7a:	9104      	str	r1, [sp, #16]
     d7c:	b2f1      	uxtb	r1, r6
     d7e:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     d80:	fa5f f18c 	uxtb.w	r1, ip
     d84:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     d86:	9907      	ldr	r1, [sp, #28]
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     d88:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d8a:	290f      	cmp	r1, #15
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d8c:	f3c5 6507 	ubfx	r5, r5, #24, #8
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     d90:	f503 70fc 	add.w	r0, r3, #504	; 0x1f8
     d94:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     d96:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     d9a:	fa5f fa85 	uxtb.w	sl, r5
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     d9e:	d80c      	bhi.n	dba <initialize()+0x1ba>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     da0:	9906      	ldr	r1, [sp, #24]
     da2:	458c      	cmp	ip, r1
     da4:	dc07      	bgt.n	db6 <initialize()+0x1b6>
     da6:	290f      	cmp	r1, #15
     da8:	d005      	beq.n	db6 <initialize()+0x1b6>
                    istart8 = lastSlotUsed + 1;
     daa:	3101      	adds	r1, #1
     dac:	b2c9      	uxtb	r1, r1
     dae:	428b      	cmp	r3, r1
     db0:	9103      	str	r1, [sp, #12]
     db2:	bf38      	it	cc
     db4:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     db6:	b259      	sxtb	r1, r3
     db8:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     dba:	a909      	add	r1, sp, #36	; 0x24
     dbc:	9100      	str	r1, [sp, #0]
     dbe:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dc0:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     dc4:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     dc8:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dcc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     dd0:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     dd4:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     dd8:	f009 fd52 	bl	a880 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     ddc:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     dde:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
     de2:	f8dd 9014 	ldr.w	r9, [sp, #20]
        b = rhs.b;
     de6:	46d6      	mov	lr, sl
     de8:	d1bd      	bne.n	d66 <initialize()+0x166>
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     dea:	4a18      	ldr	r2, [pc, #96]	; (e4c <initialize()+0x24c>)
     dec:	4b12      	ldr	r3, [pc, #72]	; (e38 <initialize()+0x238>)
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     dee:	4c1b      	ldr	r4, [pc, #108]	; (e5c <initialize()+0x25c>)
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= slope_gp;
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     df0:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
     df4:	f882 322b 	strb.w	r3, [r2, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     df8:	4610      	mov	r0, r2
     dfa:	f7ff fe69 	bl	ad0 <updatePaletteIndex(LEDStruct&)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     dfe:	2300      	movs	r3, #0

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
     e00:	aa09      	add	r2, sp, #36	; 0x24
     e02:	4620      	mov	r0, r4
     e04:	2196      	movs	r1, #150	; 0x96
     e06:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
     e0a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
     e0e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     e12:	f009 fd05 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
	over_leds.array_type		= OVERLAY;
     e16:	2302      	movs	r3, #2
	over_leds.current_palette	= cequal_gp;
     e18:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
     e1c:	4910      	ldr	r1, [pc, #64]	; (e60 <initialize()+0x260>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize over_leds
	fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black);
	over_leds.array_type		= OVERLAY;
     e1e:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	over_leds.current_palette	= cequal_gp;
     e22:	f7ff fdf7 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
	over_leds.target_palette	= cequal_gp;
     e26:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
     e2a:	490d      	ldr	r1, [pc, #52]	; (e60 <initialize()+0x260>)
     e2c:	f7ff fdf2 	bl	a14 <CRGBPalette16::operator=(unsigned char const*)>
}
     e30:	b00b      	add	sp, #44	; 0x2c
     e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e36:	bf00      	nop
     e38:	1fff9e74 	.word	0x1fff9e74
     e3c:	000112fc 	.word	0x000112fc
     e40:	00010998 	.word	0x00010998
     e44:	1fff8749 	.word	0x1fff8749
     e48:	1fff8723 	.word	0x1fff8723
     e4c:	1fff8cb0 	.word	0x1fff8cb0
     e50:	0001109c 	.word	0x0001109c
     e54:	1fff8e78 	.word	0x1fff8e78
     e58:	000102f4 	.word	0x000102f4
     e5c:	1fff960c 	.word	0x1fff960c
     e60:	0001115c 	.word	0x0001115c

00000e64 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e64:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e66:	2112      	movs	r1, #18
     e68:	b082      	sub	sp, #8
     e6a:	482e      	ldr	r0, [pc, #184]	; (f24 <global_debug()+0xc0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e6c:	4c2e      	ldr	r4, [pc, #184]	; (f28 <global_debug()+0xc4>)
     e6e:	f00b fdab 	bl	c9c8 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e72:	4b2e      	ldr	r3, [pc, #184]	; (f2c <global_debug()+0xc8>)
     e74:	4620      	mov	r0, r4
     e76:	7819      	ldrb	r1, [r3, #0]
     e78:	f00b fffa 	bl	ce70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e7c:	4620      	mov	r0, r4
     e7e:	f00b ffa7 	bl	cdd0 <Print::println()>
     e82:	2111      	movs	r1, #17
     e84:	482a      	ldr	r0, [pc, #168]	; (f30 <global_debug()+0xcc>)
     e86:	f00b fd9f 	bl	c9c8 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e8a:	4b2a      	ldr	r3, [pc, #168]	; (f34 <global_debug()+0xd0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e8c:	4620      	mov	r0, r4
     e8e:	7819      	ldrb	r1, [r3, #0]
     e90:	f00b ffee 	bl	ce70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e94:	4620      	mov	r0, r4
     e96:	f00b ff9b 	bl	cdd0 <Print::println()>
     e9a:	2115      	movs	r1, #21
     e9c:	4826      	ldr	r0, [pc, #152]	; (f38 <global_debug()+0xd4>)
     e9e:	f00b fd93 	bl	c9c8 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     ea2:	4b26      	ldr	r3, [pc, #152]	; (f3c <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ea4:	4620      	mov	r0, r4
     ea6:	7819      	ldrb	r1, [r3, #0]
     ea8:	f00b ffe2 	bl	ce70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     eac:	4620      	mov	r0, r4
     eae:	f00b ff8f 	bl	cdd0 <Print::println()>
     eb2:	2114      	movs	r1, #20
     eb4:	4822      	ldr	r0, [pc, #136]	; (f40 <global_debug()+0xdc>)
     eb6:	f00b fd87 	bl	c9c8 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     eba:	4b22      	ldr	r3, [pc, #136]	; (f44 <global_debug()+0xe0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ebc:	4620      	mov	r0, r4
     ebe:	8819      	ldrh	r1, [r3, #0]
     ec0:	f00b ffd6 	bl	ce70 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     ec4:	4620      	mov	r0, r4
     ec6:	f00b ff83 	bl	cdd0 <Print::println()>
     eca:	210f      	movs	r1, #15
     ecc:	481e      	ldr	r0, [pc, #120]	; (f48 <global_debug()+0xe4>)
     ece:	f00b fd7b 	bl	c9c8 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     ed2:	4b1e      	ldr	r3, [pc, #120]	; (f4c <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     ed4:	4620      	mov	r0, r4
     ed6:	8819      	ldrh	r1, [r3, #0]
     ed8:	f00b ffca 	bl	ce70 <Print::print(long)>
     edc:	2102      	movs	r1, #2
     ede:	481c      	ldr	r0, [pc, #112]	; (f50 <global_debug()+0xec>)
     ee0:	f00b fd72 	bl	c9c8 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     ee4:	4b1b      	ldr	r3, [pc, #108]	; (f54 <global_debug()+0xf0>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     ee6:	220a      	movs	r2, #10
     ee8:	7819      	ldrb	r1, [r3, #0]
     eea:	4620      	mov	r0, r4
     eec:	2300      	movs	r3, #0
     eee:	f00b ff7f 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ef2:	2101      	movs	r1, #1
     ef4:	4818      	ldr	r0, [pc, #96]	; (f58 <global_debug()+0xf4>)
     ef6:	f00b fd67 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     efa:	4620      	mov	r0, r4
     efc:	f00b ff68 	bl	cdd0 <Print::println()>
     f00:	210e      	movs	r1, #14
     f02:	4816      	ldr	r0, [pc, #88]	; (f5c <global_debug()+0xf8>)
     f04:	f00b fd60 	bl	c9c8 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     f08:	4b15      	ldr	r3, [pc, #84]	; (f60 <global_debug()+0xfc>)
     f0a:	681b      	ldr	r3, [r3, #0]
     f0c:	9301      	str	r3, [sp, #4]
	return ret;
     f0e:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     f10:	2300      	movs	r3, #0
     f12:	220a      	movs	r2, #10
     f14:	4620      	mov	r0, r4
     f16:	f00b ff6b 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     f1a:	4620      	mov	r0, r4
     f1c:	f00b ff58 	bl	cdd0 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     f20:	b002      	add	sp, #8
     f22:	bd10      	pop	{r4, pc}
     f24:	0000e6b4 	.word	0x0000e6b4
     f28:	1fff878c 	.word	0x1fff878c
     f2c:	1fff8783 	.word	0x1fff8783
     f30:	0000e6c8 	.word	0x0000e6c8
     f34:	1fff874a 	.word	0x1fff874a
     f38:	0000e6dc 	.word	0x0000e6dc
     f3c:	1fff8722 	.word	0x1fff8722
     f40:	0000e6f4 	.word	0x0000e6f4
     f44:	1fff8cac 	.word	0x1fff8cac
     f48:	0000e70c 	.word	0x0000e70c
     f4c:	1fff9608 	.word	0x1fff9608
     f50:	0000e71c 	.word	0x0000e71c
     f54:	1fff9561 	.word	0x1fff9561
     f58:	0000e720 	.word	0x0000e720
     f5c:	0000e724 	.word	0x0000e724
     f60:	1fffa8f8 	.word	0x1fffa8f8

00000f64 <begin_transition()>:
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f64:	491e      	ldr	r1, [pc, #120]	; (fe0 <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f66:	481f      	ldr	r0, [pc, #124]	; (fe4 <begin_transition()+0x80>)
     f68:	880b      	ldrh	r3, [r1, #0]
     f6a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f72:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f76:	3319      	adds	r3, #25
     f78:	b29b      	uxth	r3, r3
     f7a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f7e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f82:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f86:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f8a:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f8c:	b2db      	uxtb	r3, r3
     f8e:	b292      	uxth	r2, r2
     f90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f94:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f96:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f98:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f9c:	4e12      	ldr	r6, [pc, #72]	; (fe8 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f9e:	4d13      	ldr	r5, [pc, #76]	; (fec <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fa0:	5cf3      	ldrb	r3, [r6, r3]
     fa2:	4c13      	ldr	r4, [pc, #76]	; (ff0 <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     fa4:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     fa6:	b2ff      	uxtb	r7, r7
     fa8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fac:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fae:	123f      	asrs	r7, r7, #8
     fb0:	3703      	adds	r7, #3
	switch (transition_type) {
     fb2:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     fb4:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     fb6:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     fb8:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     fba:	d00c      	beq.n	fd6 <begin_transition()+0x72>
     fbc:	d306      	bcc.n	fcc <begin_transition()+0x68>
     fbe:	2b02      	cmp	r3, #2
     fc0:	d102      	bne.n	fc8 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     fc2:	4b0c      	ldr	r3, [pc, #48]	; (ff4 <begin_transition()+0x90>)
     fc4:	2200      	movs	r2, #0
     fc6:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fc8:	bcf0      	pop	{r4, r5, r6, r7}
     fca:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     fcc:	4b0a      	ldr	r3, [pc, #40]	; (ff8 <begin_transition()+0x94>)
     fce:	2200      	movs	r2, #0
     fd0:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fd2:	bcf0      	pop	{r4, r5, r6, r7}
     fd4:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     fd6:	4b07      	ldr	r3, [pc, #28]	; (ff4 <begin_transition()+0x90>)
     fd8:	224a      	movs	r2, #74	; 0x4a
     fda:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     fdc:	bcf0      	pop	{r4, r5, r6, r7}
     fde:	4770      	bx	lr
     fe0:	1fff8784 	.word	0x1fff8784
     fe4:	1fff9504 	.word	0x1fff9504
     fe8:	1fff8754 	.word	0x1fff8754
     fec:	1fff9e5d 	.word	0x1fff9e5d
     ff0:	1fff9518 	.word	0x1fff9518
     ff4:	1fff9540 	.word	0x1fff9540
     ff8:	1fff8cae 	.word	0x1fff8cae

00000ffc <finish_transition()>:

void finish_transition() {
     ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	in_transition = 0;
     ffe:	4cec      	ldr	r4, [pc, #944]	; (13b0 <finish_transition()+0x3b4>)
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1000:	48ec      	ldr	r0, [pc, #944]	; (13b4 <finish_transition()+0x3b8>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    1002:	b083      	sub	sp, #12
	in_transition = 0;
    1004:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1006:	aa01      	add	r2, sp, #4
    1008:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    100a:	7023      	strb	r3, [r4, #0]
    100c:	f88d 3004 	strb.w	r3, [sp, #4]
    1010:	f88d 3005 	strb.w	r3, [sp, #5]
    1014:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1018:	f009 fc02 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
    101c:	4be6      	ldr	r3, [pc, #920]	; (13b8 <finish_transition()+0x3bc>)
    101e:	4ae7      	ldr	r2, [pc, #924]	; (13bc <finish_transition()+0x3c0>)
    1020:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1024:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
    1028:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    102c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1030:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
    1034:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1038:	f803 1c01 	strb.w	r1, [r3, #-1]
    103c:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    103e:	429d      	cmp	r5, r3
    1040:	f102 0203 	add.w	r2, r2, #3
    1044:	d1ee      	bne.n	1024 <finish_transition()+0x28>
    1046:	4cde      	ldr	r4, [pc, #888]	; (13c0 <finish_transition()+0x3c4>)
    1048:	4eda      	ldr	r6, [pc, #872]	; (13b4 <finish_transition()+0x3b8>)
    104a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    104e:	f886 31c2 	strb.w	r3, [r6, #450]	; 0x1c2
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1052:	f504 77e4 	add.w	r7, r4, #456	; 0x1c8
    1056:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1058:	f506 75e4 	add.w	r5, r6, #456	; 0x1c8
    105c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    105e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1062:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    1066:	f894 e1c3 	ldrb.w	lr, [r4, #451]	; 0x1c3
    106a:	f894 71c4 	ldrb.w	r7, [r4, #452]	; 0x1c4
    106e:	f886 e1c3 	strb.w	lr, [r6, #451]	; 0x1c3
    1072:	f886 71c4 	strb.w	r7, [r6, #452]	; 0x1c4
    1076:	f894 e1c5 	ldrb.w	lr, [r4, #453]	; 0x1c5
    107a:	f894 71c6 	ldrb.w	r7, [r4, #454]	; 0x1c6
    107e:	f886 e1c5 	strb.w	lr, [r6, #453]	; 0x1c5
    1082:	f886 71c6 	strb.w	r7, [r6, #454]	; 0x1c6
    1086:	f894 e1c7 	ldrb.w	lr, [r4, #455]	; 0x1c7
    108a:	f886 e1c7 	strb.w	lr, [r6, #455]	; 0x1c7
    108e:	f504 77fc 	add.w	r7, r4, #504	; 0x1f8
    1092:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    1096:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1098:	f506 75fc 	add.w	r5, r6, #504	; 0x1f8
    109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    109e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    10a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    10a2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
    10a6:	f894 e229 	ldrb.w	lr, [r4, #553]	; 0x229
    10aa:	f894 c228 	ldrb.w	ip, [r4, #552]	; 0x228
    10ae:	f894 722a 	ldrb.w	r7, [r4, #554]	; 0x22a
    10b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    10b6:	f886 e229 	strb.w	lr, [r6, #553]	; 0x229
    10ba:	f886 c228 	strb.w	ip, [r6, #552]	; 0x228
    10be:	f886 722a 	strb.w	r7, [r6, #554]	; 0x22a
    10c2:	f894 222b 	ldrb.w	r2, [r4, #555]	; 0x22b
    10c6:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    10ca:	f894 e22d 	ldrb.w	lr, [r4, #557]	; 0x22d
    10ce:	f894 722e 	ldrb.w	r7, [r4, #558]	; 0x22e
    10d2:	f894 522f 	ldrb.w	r5, [r4, #559]	; 0x22f
    10d6:	f894 0230 	ldrb.w	r0, [r4, #560]	; 0x230
    10da:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    10de:	f886 222b 	strb.w	r2, [r6, #555]	; 0x22b
    10e2:	f886 322c 	strb.w	r3, [r6, #556]	; 0x22c
    10e6:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    10ea:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    10ee:	f886 e22d 	strb.w	lr, [r6, #557]	; 0x22d
    10f2:	f886 722e 	strb.w	r7, [r6, #558]	; 0x22e
    10f6:	f894 e234 	ldrb.w	lr, [r4, #564]	; 0x234
    10fa:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
    10fe:	f886 522f 	strb.w	r5, [r6, #559]	; 0x22f
    1102:	f886 0230 	strb.w	r0, [r6, #560]	; 0x230
    1106:	f894 5236 	ldrb.w	r5, [r4, #566]	; 0x236
    110a:	f894 0237 	ldrb.w	r0, [r4, #567]	; 0x237
    110e:	f886 1231 	strb.w	r1, [r6, #561]	; 0x231
    1112:	f886 2232 	strb.w	r2, [r6, #562]	; 0x232
    1116:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    111a:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    111e:	f886 3233 	strb.w	r3, [r6, #563]	; 0x233
    1122:	f894 323a 	ldrb.w	r3, [r4, #570]	; 0x23a
    1126:	f886 7235 	strb.w	r7, [r6, #565]	; 0x235
    112a:	f886 2239 	strb.w	r2, [r6, #569]	; 0x239
    112e:	f886 323a 	strb.w	r3, [r6, #570]	; 0x23a
    1132:	f886 e234 	strb.w	lr, [r6, #564]	; 0x234
    1136:	f886 5236 	strb.w	r5, [r6, #566]	; 0x236
    113a:	f886 0237 	strb.w	r0, [r6, #567]	; 0x237
    113e:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    1142:	f206 233e 	addw	r3, r6, #574	; 0x23e
    1146:	f204 223e 	addw	r2, r4, #574	; 0x23e
    114a:	f206 277a 	addw	r7, r6, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    114e:	f812 5c03 	ldrb.w	r5, [r2, #-3]
        g = rhs.g;
    1152:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
    1156:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    115a:	f803 5c03 	strb.w	r5, [r3, #-3]
        g = rhs.g;
    115e:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
    1162:	f803 1c01 	strb.w	r1, [r3, #-1]
    1166:	3303      	adds	r3, #3
    1168:	429f      	cmp	r7, r3
    116a:	f102 0203 	add.w	r2, r2, #3
    116e:	d1ee      	bne.n	114e <finish_transition()+0x152>
    1170:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    1174:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    1178:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    117c:	f886 2277 	strb.w	r2, [r6, #631]	; 0x277
    1180:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    1184:	4b8f      	ldr	r3, [pc, #572]	; (13c4 <finish_transition()+0x3c8>)
    1186:	f886 0278 	strb.w	r0, [r6, #632]	; 0x278
    118a:	f886 1279 	strb.w	r1, [r6, #633]	; 0x279
    118e:	f894 027b 	ldrb.w	r0, [r4, #635]	; 0x27b
    1192:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    1196:	f886 227a 	strb.w	r2, [r6, #634]	; 0x27a
    119a:	f894 227d 	ldrb.w	r2, [r4, #637]	; 0x27d
    119e:	f886 027b 	strb.w	r0, [r6, #635]	; 0x27b
    11a2:	f886 127c 	strb.w	r1, [r6, #636]	; 0x27c
    11a6:	f894 027e 	ldrb.w	r0, [r4, #638]	; 0x27e
    11aa:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    11ae:	f886 227d 	strb.w	r2, [r6, #637]	; 0x27d
    11b2:	4a85      	ldr	r2, [pc, #532]	; (13c8 <finish_transition()+0x3cc>)
    11b4:	f886 027e 	strb.w	r0, [r6, #638]	; 0x27e
    11b8:	f886 127f 	strb.w	r1, [r6, #639]	; 0x27f
    11bc:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11c0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    11c4:	f803 1b01 	strb.w	r1, [r3], #1
    11c8:	4283      	cmp	r3, r0
    11ca:	d1f9      	bne.n	11c0 <finish_transition()+0x1c4>
    11cc:	497f      	ldr	r1, [pc, #508]	; (13cc <finish_transition()+0x3d0>)
    11ce:	f103 004b 	add.w	r0, r3, #75	; 0x4b
    11d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    11d6:	f803 2b01 	strb.w	r2, [r3], #1
    11da:	4283      	cmp	r3, r0
    11dc:	4a75      	ldr	r2, [pc, #468]	; (13b4 <finish_transition()+0x3b8>)
    11de:	d1f8      	bne.n	11d2 <finish_transition()+0x1d6>
    11e0:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    11e4:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    11e8:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    11ec:	f894 0319 	ldrb.w	r0, [r4, #793]	; 0x319
    11f0:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    11f4:	f882 3316 	strb.w	r3, [r2, #790]	; 0x316
    11f8:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    11fc:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
    1200:	f882 5318 	strb.w	r5, [r2, #792]	; 0x318
    1204:	f8b4 631c 	ldrh.w	r6, [r4, #796]	; 0x31c
    1208:	f8b4 531e 	ldrh.w	r5, [r4, #798]	; 0x31e
    120c:	f882 0319 	strb.w	r0, [r2, #793]	; 0x319
    1210:	f882 131a 	strb.w	r1, [r2, #794]	; 0x31a
    1214:	f8b4 0320 	ldrh.w	r0, [r4, #800]	; 0x320
    1218:	f894 1322 	ldrb.w	r1, [r4, #802]	; 0x322
    121c:	f882 331b 	strb.w	r3, [r2, #795]	; 0x31b
    1220:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
    1224:	f8a2 631c 	strh.w	r6, [r2, #796]	; 0x31c
    1228:	f8a2 531e 	strh.w	r5, [r2, #798]	; 0x31e
    122c:	f894 6324 	ldrb.w	r6, [r4, #804]	; 0x324
    1230:	f894 5325 	ldrb.w	r5, [r4, #805]	; 0x325
    1234:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
    1238:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
    123c:	f894 0326 	ldrb.w	r0, [r4, #806]	; 0x326
    1240:	f894 1327 	ldrb.w	r1, [r4, #807]	; 0x327
    1244:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
    1248:	f8b4 3328 	ldrh.w	r3, [r4, #808]	; 0x328
    124c:	f882 6324 	strb.w	r6, [r2, #804]	; 0x324
    1250:	f882 5325 	strb.w	r5, [r2, #805]	; 0x325
    1254:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
    1258:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
    125c:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
    1260:	f8b4 332a 	ldrh.w	r3, [r4, #810]	; 0x32a
    1264:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
    1268:	f8b4 632c 	ldrh.w	r6, [r4, #812]	; 0x32c
    126c:	f8b4 532e 	ldrh.w	r5, [r4, #814]	; 0x32e
    1270:	f8b4 0330 	ldrh.w	r0, [r4, #816]	; 0x330
    1274:	f8b4 1332 	ldrh.w	r1, [r4, #818]	; 0x332
    1278:	f8b4 3334 	ldrh.w	r3, [r4, #820]	; 0x334
    127c:	f8a2 632c 	strh.w	r6, [r2, #812]	; 0x32c
    1280:	f8a2 532e 	strh.w	r5, [r2, #814]	; 0x32e
    1284:	f8b4 6336 	ldrh.w	r6, [r4, #822]	; 0x336
    1288:	f8b4 5338 	ldrh.w	r5, [r4, #824]	; 0x338
    128c:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
    1290:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
    1294:	f8b4 033a 	ldrh.w	r0, [r4, #826]	; 0x33a
    1298:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    129c:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
    12a0:	f894 333e 	ldrb.w	r3, [r4, #830]	; 0x33e
    12a4:	f8a2 6336 	strh.w	r6, [r2, #822]	; 0x336
    12a8:	f8a2 5338 	strh.w	r5, [r2, #824]	; 0x338
    12ac:	f894 633f 	ldrb.w	r6, [r4, #831]	; 0x33f
    12b0:	f894 5340 	ldrb.w	r5, [r4, #832]	; 0x340
    12b4:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
    12b8:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
    12bc:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341
    12c0:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    12c4:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
    12c8:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    12cc:	f882 633f 	strb.w	r6, [r2, #831]	; 0x33f
    12d0:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
    12d4:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
    12d8:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
    12dc:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
    12e0:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    12e4:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
    12e8:	f894 6345 	ldrb.w	r6, [r4, #837]	; 0x345
    12ec:	f894 5346 	ldrb.w	r5, [r4, #838]	; 0x346
    12f0:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
    12f4:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
    12f8:	f894 3349 	ldrb.w	r3, [r4, #841]	; 0x349
    12fc:	f882 6345 	strb.w	r6, [r2, #837]	; 0x345
    1300:	f882 5346 	strb.w	r5, [r2, #838]	; 0x346
    1304:	f894 634a 	ldrb.w	r6, [r4, #842]	; 0x34a
    1308:	f894 534b 	ldrb.w	r5, [r4, #843]	; 0x34b
    130c:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
    1310:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
    1314:	f894 034c 	ldrb.w	r0, [r4, #844]	; 0x34c
    1318:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    131c:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
    1320:	f894 334e 	ldrb.w	r3, [r4, #846]	; 0x34e
    1324:	f882 634a 	strb.w	r6, [r2, #842]	; 0x34a
    1328:	f882 534b 	strb.w	r5, [r2, #843]	; 0x34b
    132c:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
    1330:	f894 5350 	ldrb.w	r5, [r4, #848]	; 0x350
    1334:	f894 0351 	ldrb.w	r0, [r4, #849]	; 0x351
    1338:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
    133c:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
    1340:	f894 1352 	ldrb.w	r1, [r4, #850]	; 0x352
    1344:	f894 3353 	ldrb.w	r3, [r4, #851]	; 0x353
    1348:	f894 634f 	ldrb.w	r6, [r4, #847]	; 0x34f
    134c:	f882 5350 	strb.w	r5, [r2, #848]	; 0x350
    1350:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
    1354:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
    1358:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
    135c:	f882 634f 	strb.w	r6, [r2, #847]	; 0x34f
    1360:	491b      	ldr	r1, [pc, #108]	; (13d0 <finish_transition()+0x3d4>)
    1362:	f894 6354 	ldrb.w	r6, [r4, #852]	; 0x354
    1366:	f894 335d 	ldrb.w	r3, [r4, #861]	; 0x35d
    136a:	f8d4 5358 	ldr.w	r5, [r4, #856]	; 0x358
    136e:	f894 035c 	ldrb.w	r0, [r4, #860]	; 0x35c
    1372:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
    1376:	f882 6354 	strb.w	r6, [r2, #852]	; 0x354
    137a:	f8c2 5358 	str.w	r5, [r2, #856]	; 0x358
    137e:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
    1382:	f502 7358 	add.w	r3, r2, #864	; 0x360
    1386:	f502 628a 	add.w	r2, r2, #1104	; 0x450
    138a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    138e:	f843 0b04 	str.w	r0, [r3], #4
    1392:	4293      	cmp	r3, r2
    1394:	d1f9      	bne.n	138a <finish_transition()+0x38e>
    1396:	4a0f      	ldr	r2, [pc, #60]	; (13d4 <finish_transition()+0x3d8>)
    1398:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    139c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13a0:	f843 1b04 	str.w	r1, [r3], #4
    13a4:	4283      	cmp	r3, r0
    13a6:	d1f9      	bne.n	139c <finish_transition()+0x3a0>
    13a8:	4a0b      	ldr	r2, [pc, #44]	; (13d8 <finish_transition()+0x3dc>)
    13aa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
    13ae:	e015      	b.n	13dc <finish_transition()+0x3e0>
    13b0:	1fff9504 	.word	0x1fff9504
    13b4:	1fff9e74 	.word	0x1fff9e74
    13b8:	1fff9e77 	.word	0x1fff9e77
    13bc:	1fff8cb3 	.word	0x1fff8cb3
    13c0:	1fff8cb0 	.word	0x1fff8cb0
    13c4:	1fffa0f4 	.word	0x1fffa0f4
    13c8:	1fff8f2f 	.word	0x1fff8f2f
    13cc:	1fff8f7a 	.word	0x1fff8f7a
    13d0:	1fff900c 	.word	0x1fff900c
    13d4:	1fff90fc 	.word	0x1fff90fc
    13d8:	1fff91ef 	.word	0x1fff91ef
    13dc:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    13e0:	f803 1b01 	strb.w	r1, [r3], #1
    13e4:	4283      	cmp	r3, r0
    13e6:	d1f9      	bne.n	13dc <finish_transition()+0x3e0>
    13e8:	4a62      	ldr	r2, [pc, #392]	; (1574 <finish_transition()+0x578>)
    13ea:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    13ee:	f852 1f04 	ldr.w	r1, [r2, #4]!
    13f2:	f843 1b04 	str.w	r1, [r3], #4
    13f6:	4283      	cmp	r3, r0
    13f8:	d1f9      	bne.n	13ee <finish_transition()+0x3f2>
    13fa:	4a5f      	ldr	r2, [pc, #380]	; (1578 <finish_transition()+0x57c>)
    13fc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
    1400:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1404:	f843 1b04 	str.w	r1, [r3], #4
    1408:	4283      	cmp	r3, r0
    140a:	495c      	ldr	r1, [pc, #368]	; (157c <finish_transition()+0x580>)
    140c:	d1f8      	bne.n	1400 <finish_transition()+0x404>
    140e:	f894 375c 	ldrb.w	r3, [r4, #1884]	; 0x75c
    1412:	f894 275d 	ldrb.w	r2, [r4, #1885]	; 0x75d
    1416:	f894 675e 	ldrb.w	r6, [r4, #1886]	; 0x75e
    141a:	f8b4 5760 	ldrh.w	r5, [r4, #1888]	; 0x760
    141e:	f8b4 0762 	ldrh.w	r0, [r4, #1890]	; 0x762
    1422:	f881 375c 	strb.w	r3, [r1, #1884]	; 0x75c
    1426:	f881 275d 	strb.w	r2, [r1, #1885]	; 0x75d
    142a:	f8b4 3764 	ldrh.w	r3, [r4, #1892]	; 0x764
    142e:	f894 2766 	ldrb.w	r2, [r4, #1894]	; 0x766
    1432:	f881 675e 	strb.w	r6, [r1, #1886]	; 0x75e
    1436:	f8a1 5760 	strh.w	r5, [r1, #1888]	; 0x760
    143a:	f8a1 0762 	strh.w	r0, [r1, #1890]	; 0x762
    143e:	f8a1 3764 	strh.w	r3, [r1, #1892]	; 0x764
    1442:	f881 2766 	strb.w	r2, [r1, #1894]	; 0x766
    1446:	f894 376a 	ldrb.w	r3, [r4, #1898]	; 0x76a
    144a:	f894 6767 	ldrb.w	r6, [r4, #1895]	; 0x767
    144e:	f894 5768 	ldrb.w	r5, [r4, #1896]	; 0x768
    1452:	f894 0769 	ldrb.w	r0, [r4, #1897]	; 0x769
    1456:	4a4a      	ldr	r2, [pc, #296]	; (1580 <finish_transition()+0x584>)
    1458:	f881 376a 	strb.w	r3, [r1, #1898]	; 0x76a
    145c:	f881 6767 	strb.w	r6, [r1, #1895]	; 0x767
    1460:	f881 5768 	strb.w	r5, [r1, #1896]	; 0x768
    1464:	f881 0769 	strb.w	r0, [r1, #1897]	; 0x769
    1468:	f201 736c 	addw	r3, r1, #1900	; 0x76c
    146c:	f201 718c 	addw	r1, r1, #1932	; 0x78c
    1470:	f852 0f04 	ldr.w	r0, [r2, #4]!
    1474:	f843 0b04 	str.w	r0, [r3], #4
    1478:	428b      	cmp	r3, r1
    147a:	d1f9      	bne.n	1470 <finish_transition()+0x474>
    147c:	4a41      	ldr	r2, [pc, #260]	; (1584 <finish_transition()+0x588>)
    147e:	f103 0020 	add.w	r0, r3, #32
    1482:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1486:	f843 1b04 	str.w	r1, [r3], #4
    148a:	4283      	cmp	r3, r0
    148c:	d1f9      	bne.n	1482 <finish_transition()+0x486>
    148e:	4a3e      	ldr	r2, [pc, #248]	; (1588 <finish_transition()+0x58c>)
    1490:	f103 0020 	add.w	r0, r3, #32
    1494:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1498:	f843 1b04 	str.w	r1, [r3], #4
    149c:	4283      	cmp	r3, r0
    149e:	d1f9      	bne.n	1494 <finish_transition()+0x498>
    14a0:	4a3a      	ldr	r2, [pc, #232]	; (158c <finish_transition()+0x590>)
    14a2:	f103 0020 	add.w	r0, r3, #32
    14a6:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14aa:	f843 1b04 	str.w	r1, [r3], #4
    14ae:	4283      	cmp	r3, r0
    14b0:	d1f9      	bne.n	14a6 <finish_transition()+0x4aa>
    14b2:	4a37      	ldr	r2, [pc, #220]	; (1590 <finish_transition()+0x594>)
    14b4:	f103 0020 	add.w	r0, r3, #32
    14b8:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14bc:	f843 1b04 	str.w	r1, [r3], #4
    14c0:	4283      	cmp	r3, r0
    14c2:	d1f9      	bne.n	14b8 <finish_transition()+0x4bc>
    14c4:	4a33      	ldr	r2, [pc, #204]	; (1594 <finish_transition()+0x598>)
    14c6:	f103 0020 	add.w	r0, r3, #32
    14ca:	f852 1f04 	ldr.w	r1, [r2, #4]!
    14ce:	f843 1b04 	str.w	r1, [r3], #4
    14d2:	4283      	cmp	r3, r0
    14d4:	4d29      	ldr	r5, [pc, #164]	; (157c <finish_transition()+0x580>)
    14d6:	d1f8      	bne.n	14ca <finish_transition()+0x4ce>
    14d8:	f8b4 382c 	ldrh.w	r3, [r4, #2092]	; 0x82c
    14dc:	f8b4 2830 	ldrh.w	r2, [r4, #2096]	; 0x830
    14e0:	f8d4 1834 	ldr.w	r1, [r4, #2100]	; 0x834
    14e4:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
    14e8:	f894 682e 	ldrb.w	r6, [r4, #2094]	; 0x82e
    14ec:	f8a5 382c 	strh.w	r3, [r5, #2092]	; 0x82c
    14f0:	f8a5 2830 	strh.w	r2, [r5, #2096]	; 0x830
    14f4:	f894 383c 	ldrb.w	r3, [r4, #2108]	; 0x83c
    14f8:	f894 283e 	ldrb.w	r2, [r4, #2110]	; 0x83e
    14fc:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
    1500:	f8c5 0838 	str.w	r0, [r5, #2104]	; 0x838
    1504:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    1508:	f894 0840 	ldrb.w	r0, [r4, #2112]	; 0x840
    150c:	f894 783d 	ldrb.w	r7, [r4, #2109]	; 0x83d
    1510:	f885 682e 	strb.w	r6, [r5, #2094]	; 0x82e
    1514:	f885 383c 	strb.w	r3, [r5, #2108]	; 0x83c
    1518:	f894 6841 	ldrb.w	r6, [r4, #2113]	; 0x841
    151c:	f894 3842 	ldrb.w	r3, [r4, #2114]	; 0x842
    1520:	f885 283e 	strb.w	r2, [r5, #2110]	; 0x83e
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1524:	2400      	movs	r4, #0
    1526:	f885 183f 	strb.w	r1, [r5, #2111]	; 0x83f
    152a:	f885 0840 	strb.w	r0, [r5, #2112]	; 0x840
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    152e:	aa01      	add	r2, sp, #4
    1530:	2196      	movs	r1, #150	; 0x96
    1532:	4819      	ldr	r0, [pc, #100]	; (1598 <finish_transition()+0x59c>)
    1534:	f885 3842 	strb.w	r3, [r5, #2114]	; 0x842
    1538:	f885 783d 	strb.w	r7, [r5, #2109]	; 0x83d
    153c:	f885 6841 	strb.w	r6, [r5, #2113]	; 0x841
    1540:	f88d 4004 	strb.w	r4, [sp, #4]
    1544:	f88d 4005 	strb.w	r4, [sp, #5]
    1548:	f88d 4006 	strb.w	r4, [sp, #6]
    154c:	f009 f968 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1550:	4b12      	ldr	r3, [pc, #72]	; (159c <finish_transition()+0x5a0>)
void finish_transition() {
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds = next_leds;
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type = CURRENT;
    1552:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
    1556:	781b      	ldrb	r3, [r3, #0]
    1558:	b953      	cbnz	r3, 1570 <finish_transition()+0x574>
    155a:	aa01      	add	r2, sp, #4
    155c:	2196      	movs	r1, #150	; 0x96
    155e:	4810      	ldr	r0, [pc, #64]	; (15a0 <finish_transition()+0x5a4>)
    1560:	f88d 3004 	strb.w	r3, [sp, #4]
    1564:	f88d 3005 	strb.w	r3, [sp, #5]
    1568:	f88d 3006 	strb.w	r3, [sp, #6]
    156c:	f009 f958 	bl	a820 <fill_solid(CRGB*, int, CRGB const&)>
}
    1570:	b003      	add	sp, #12
    1572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1574:	1fff9228 	.word	0x1fff9228
    1578:	1fff9318 	.word	0x1fff9318
    157c:	1fff9e74 	.word	0x1fff9e74
    1580:	1fff9418 	.word	0x1fff9418
    1584:	1fff9438 	.word	0x1fff9438
    1588:	1fff9458 	.word	0x1fff9458
    158c:	1fff9478 	.word	0x1fff9478
    1590:	1fff9498 	.word	0x1fff9498
    1594:	1fff94b8 	.word	0x1fff94b8
    1598:	1fff8cb0 	.word	0x1fff8cb0
    159c:	1fff9606 	.word	0x1fff9606
    15a0:	1fff960c 	.word	0x1fff960c

000015a4 <blending()>:

void blending() {
    15a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15a8:	4d2f      	ldr	r5, [pc, #188]	; (1668 <blending()+0xc4>)
    15aa:	4e30      	ldr	r6, [pc, #192]	; (166c <blending()+0xc8>)
    15ac:	4c30      	ldr	r4, [pc, #192]	; (1670 <blending()+0xcc>)
    15ae:	4f31      	ldr	r7, [pc, #196]	; (1674 <blending()+0xd0>)
    15b0:	b085      	sub	sp, #20
    15b2:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    15b6:	4632      	mov	r2, r6
    15b8:	4629      	mov	r1, r5
    15ba:	783b      	ldrb	r3, [r7, #0]
    15bc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1674 <blending()+0xd0>
    15c0:	a803      	add	r0, sp, #12
    15c2:	3503      	adds	r5, #3
    15c4:	f009 fa1e 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15c8:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15cc:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15d0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15d4:	7021      	strb	r1, [r4, #0]
    15d6:	4545      	cmp	r5, r8
        g = rhs.g;
    15d8:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    15da:	70a3      	strb	r3, [r4, #2]
    15dc:	f106 0603 	add.w	r6, r6, #3
    15e0:	f104 0403 	add.w	r4, r4, #3
    15e4:	d1e7      	bne.n	15b6 <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    15e6:	4e24      	ldr	r6, [pc, #144]	; (1678 <blending()+0xd4>)
    15e8:	6833      	ldr	r3, [r6, #0]
    15ea:	07db      	lsls	r3, r3, #31
    15ec:	d51f      	bpl.n	162e <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    15ee:	4d23      	ldr	r5, [pc, #140]	; (167c <blending()+0xd8>)
    15f0:	4c23      	ldr	r4, [pc, #140]	; (1680 <blending()+0xdc>)
    15f2:	682b      	ldr	r3, [r5, #0]
    15f4:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    15f6:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    15fa:	9b03      	ldr	r3, [sp, #12]
    15fc:	1a5b      	subs	r3, r3, r1
    15fe:	4293      	cmp	r3, r2
    1600:	d30c      	bcc.n	161c <blending()+0x78>
    1602:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1604:	682a      	ldr	r2, [r5, #0]
    1606:	9202      	str	r2, [sp, #8]
    1608:	3301      	adds	r3, #1
	return ret;
    160a:	9a02      	ldr	r2, [sp, #8]
    160c:	6022      	str	r2, [r4, #0]
    160e:	b2db      	uxtb	r3, r3
    1610:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    1612:	2bff      	cmp	r3, #255	; 0xff
    1614:	d006      	beq.n	1624 <blending()+0x80>
		finish_transition();
	}
}
    1616:	b005      	add	sp, #20
    1618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    161c:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1620:	2bff      	cmp	r3, #255	; 0xff
    1622:	d1f8      	bne.n	1616 <blending()+0x72>
		finish_transition();
    1624:	f7ff fcea 	bl	ffc <finish_transition()>
	}
}
    1628:	b005      	add	sp, #20
    162a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!overlay_in_use) { fill_solid(over_leds.led_data, NUM_LEDS, CRGB::Black); }
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    162e:	4630      	mov	r0, r6
    1630:	f00a f932 	bl	b898 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1634:	4d11      	ldr	r5, [pc, #68]	; (167c <blending()+0xd8>)
    1636:	b950      	cbnz	r0, 164e <blending()+0xaa>
    1638:	4c11      	ldr	r4, [pc, #68]	; (1680 <blending()+0xdc>)
    163a:	682b      	ldr	r3, [r5, #0]
    163c:	9303      	str	r3, [sp, #12]
    163e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1642:	9b03      	ldr	r3, [sp, #12]
    1644:	1a5b      	subs	r3, r3, r1
    1646:	4293      	cmp	r3, r2
    1648:	d2db      	bcs.n	1602 <blending()+0x5e>
    164a:	783b      	ldrb	r3, [r7, #0]
    164c:	e7e1      	b.n	1612 <blending()+0x6e>
    164e:	4b0d      	ldr	r3, [pc, #52]	; (1684 <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1650:	682a      	ldr	r2, [r5, #0]
    1652:	781b      	ldrb	r3, [r3, #0]
    1654:	4c0a      	ldr	r4, [pc, #40]	; (1680 <blending()+0xdc>)
    1656:	9201      	str	r2, [sp, #4]
	return ret;
    1658:	9a01      	ldr	r2, [sp, #4]
    165a:	6022      	str	r2, [r4, #0]
    165c:	009b      	lsls	r3, r3, #2
    165e:	4630      	mov	r0, r6
    1660:	6063      	str	r3, [r4, #4]
    1662:	f00a f91f 	bl	b8a4 <__cxa_guard_release>
    1666:	e7e8      	b.n	163a <blending()+0x96>
    1668:	1fff9e74 	.word	0x1fff9e74
    166c:	1fff8cb0 	.word	0x1fff8cb0
    1670:	1fffa6b8 	.word	0x1fffa6b8
    1674:	1fff8cae 	.word	0x1fff8cae
    1678:	1fff95f8 	.word	0x1fff95f8
    167c:	1fffa8f8 	.word	0x1fffa8f8
    1680:	1fff9508 	.word	0x1fff9508
    1684:	1fff9e5d 	.word	0x1fff9e5d

00001688 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    1688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    168c:	4e94      	ldr	r6, [pc, #592]	; (18e0 <wipedown()+0x258>)
    168e:	f896 c000 	ldrb.w	ip, [r6]
    1692:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    1696:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1698:	2b00      	cmp	r3, #0
    169a:	f000 811e 	beq.w	18da <wipedown()+0x252>
    169e:	f103 3bff 	add.w	fp, r3, #4294967295
    16a2:	fa1f fb8b 	uxth.w	fp, fp
    16a6:	488f      	ldr	r0, [pc, #572]	; (18e4 <wipedown()+0x25c>)
    16a8:	498f      	ldr	r1, [pc, #572]	; (18e8 <wipedown()+0x260>)
    16aa:	f10b 0b01 	add.w	fp, fp, #1
    16ae:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    16b2:	4483      	add	fp, r0
    16b4:	4602      	mov	r2, r0
    16b6:	460d      	mov	r5, r1
    16b8:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ba:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    16bc:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    16c0:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16c4:	7027      	strb	r7, [r4, #0]
    16c6:	3203      	adds	r2, #3
    16c8:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    16cc:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16d0:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16d4:	f884 a001 	strb.w	sl, [r4, #1]
    16d8:	455a      	cmp	r2, fp
        b = rhs.b;
    16da:	f884 9002 	strb.w	r9, [r4, #2]
    16de:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e2:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    16e6:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    16ea:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    16ee:	f104 0403 	add.w	r4, r4, #3
    16f2:	f1a1 0103 	sub.w	r1, r1, #3
    16f6:	d1e0      	bne.n	16ba <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    16f8:	2b4a      	cmp	r3, #74	; 0x4a
    16fa:	d827      	bhi.n	174c <wipedown()+0xc4>
    16fc:	487b      	ldr	r0, [pc, #492]	; (18ec <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    16fe:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1702:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1706:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    170a:	eb00 0801 	add.w	r8, r0, r1
    170e:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1712:	3301      	adds	r3, #1
    1714:	186f      	adds	r7, r5, r1
    1716:	f810 b001 	ldrb.w	fp, [r0, r1]
    171a:	f805 b001 	strb.w	fp, [r5, r1]
    171e:	18ac      	adds	r4, r5, r2
    1720:	b29b      	uxth	r3, r3
        g = rhs.g;
    1722:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    1726:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    172a:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    172e:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    1732:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1736:	f887 a001 	strb.w	sl, [r7, #1]
    173a:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    173c:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1740:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    1744:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1748:	70a1      	strb	r1, [r4, #2]
    174a:	d1d8      	bne.n	16fe <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    174c:	f10c 3aff 	add.w	sl, ip, #4294967295
    1750:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1754:	2480      	movs	r4, #128	; 0x80
    1756:	eb05 0b0a 	add.w	fp, r5, sl
    175a:	4659      	mov	r1, fp
    175c:	4623      	mov	r3, r4
    175e:	a803      	add	r0, sp, #12
    1760:	aa02      	add	r2, sp, #8
    1762:	2700      	movs	r7, #0
    1764:	f88d 4009 	strb.w	r4, [sp, #9]
    1768:	f88d 400a 	strb.w	r4, [sp, #10]
    176c:	f88d 7008 	strb.w	r7, [sp, #8]
    1770:	f009 f948 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1774:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1778:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    177c:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1780:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1784:	f805 300a 	strb.w	r3, [r5, sl]
    1788:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    178c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    1790:	eb05 0908 	add.w	r9, r5, r8
    1794:	4649      	mov	r1, r9
    1796:	4623      	mov	r3, r4
        g = rhs.g;
    1798:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    179c:	f88b 0002 	strb.w	r0, [fp, #2]
    17a0:	aa02      	add	r2, sp, #8
    17a2:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17a4:	f88d 7008 	strb.w	r7, [sp, #8]
    17a8:	f88d 4009 	strb.w	r4, [sp, #9]
    17ac:	f88d 400a 	strb.w	r4, [sp, #10]
    17b0:	f009 f928 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    17b4:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17ba:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    17be:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    17c2:	f89d 000d 	ldrb.w	r0, [sp, #13]
    17c6:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17ca:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    17ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17d6:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17da:	eb05 0e0c 	add.w	lr, r5, ip
    17de:	1868      	adds	r0, r5, r1
    17e0:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos > ONE_SIDE - 1) {
    17e2:	2a4a      	cmp	r2, #74	; 0x4a
    17e4:	f805 300c 	strb.w	r3, [r5, ip]
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}
	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    17e8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 18e8 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    17ec:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    17f0:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS -1 - (wipe_pos - 1)], CRGB::Teal, 128);
    17f4:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 18e0 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17f8:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    17fa:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    17fc:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
    17fe:	d82e      	bhi.n	185e <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1800:	4f3b      	ldr	r7, [pc, #236]	; (18f0 <wipedown()+0x268>)
    1802:	683b      	ldr	r3, [r7, #0]
    1804:	07db      	lsls	r3, r3, #31
    1806:	d517      	bpl.n	1838 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1808:	4d3a      	ldr	r5, [pc, #232]	; (18f4 <wipedown()+0x26c>)
    180a:	4c3b      	ldr	r4, [pc, #236]	; (18f8 <wipedown()+0x270>)
    180c:	682b      	ldr	r3, [r5, #0]
    180e:	9303      	str	r3, [sp, #12]
    1810:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1814:	9b03      	ldr	r3, [sp, #12]
    1816:	1a5b      	subs	r3, r3, r1
    1818:	4293      	cmp	r3, r2
    181a:	7833      	ldrb	r3, [r6, #0]
    181c:	d306      	bcc.n	182c <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    181e:	682a      	ldr	r2, [r5, #0]
    1820:	9202      	str	r2, [sp, #8]
    1822:	3b01      	subs	r3, #1
	return ret;
    1824:	9a02      	ldr	r2, [sp, #8]
    1826:	6022      	str	r2, [r4, #0]
    1828:	b2db      	uxtb	r3, r3
    182a:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    182c:	b90b      	cbnz	r3, 1832 <wipedown()+0x1aa>
		finish_transition();
    182e:	f7ff fbe5 	bl	ffc <finish_transition()>
	}
}
    1832:	b005      	add	sp, #20
    1834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1838:	4638      	mov	r0, r7
    183a:	f00a f82d 	bl	b898 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    183e:	4d2d      	ldr	r5, [pc, #180]	; (18f4 <wipedown()+0x26c>)
    1840:	2800      	cmp	r0, #0
    1842:	d0e2      	beq.n	180a <wipedown()+0x182>
    1844:	4b2d      	ldr	r3, [pc, #180]	; (18fc <wipedown()+0x274>)
    1846:	682a      	ldr	r2, [r5, #0]
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	4c2b      	ldr	r4, [pc, #172]	; (18f8 <wipedown()+0x270>)
    184c:	9201      	str	r2, [sp, #4]
	return ret;
    184e:	9a01      	ldr	r2, [sp, #4]
    1850:	6022      	str	r2, [r4, #0]
    1852:	009b      	lsls	r3, r3, #2
    1854:	4638      	mov	r0, r7
    1856:	6063      	str	r3, [r4, #4]
    1858:	f00a f824 	bl	b8a4 <__cxa_guard_release>
    185c:	e7d6      	b.n	180c <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos > ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    185e:	1c55      	adds	r5, r2, #1
    1860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1864:	eb08 0a05 	add.w	sl, r8, r5
    1868:	4651      	mov	r1, sl
    186a:	4623      	mov	r3, r4
    186c:	aa02      	add	r2, sp, #8
    186e:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1870:	f88d 7008 	strb.w	r7, [sp, #8]
    1874:	f88d 4009 	strb.w	r4, [sp, #9]
    1878:	f88d 400a 	strb.w	r4, [sp, #10]
    187c:	f009 f8c2 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1880:	f899 3000 	ldrb.w	r3, [r9]
    1884:	f88d 7008 	strb.w	r7, [sp, #8]
    1888:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    188c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    1890:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1894:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    1898:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    189c:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18a0:	f808 c005 	strb.w	ip, [r8, r5]
    18a4:	aa02      	add	r2, sp, #8
    18a6:	4623      	mov	r3, r4
    18a8:	4649      	mov	r1, r9
    18aa:	a803      	add	r0, sp, #12
        g = rhs.g;
    18ac:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    18b0:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18b4:	f88d 4009 	strb.w	r4, [sp, #9]
    18b8:	f88d 400a 	strb.w	r4, [sp, #10]
    18bc:	f009 f8a2 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18c0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18cc:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18d0:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18d4:	f889 3002 	strb.w	r3, [r9, #2]
    18d8:	e792      	b.n	1800 <wipedown()+0x178>
    18da:	4d03      	ldr	r5, [pc, #12]	; (18e8 <wipedown()+0x260>)
    18dc:	e70e      	b.n	16fc <wipedown()+0x74>
    18de:	bf00      	nop
    18e0:	1fff9540 	.word	0x1fff9540
    18e4:	1fff9e74 	.word	0x1fff9e74
    18e8:	1fffa6b8 	.word	0x1fffa6b8
    18ec:	1fff8cb0 	.word	0x1fff8cb0
    18f0:	1fff95fc 	.word	0x1fff95fc
    18f4:	1fffa8f8 	.word	0x1fffa8f8
    18f8:	1fff951c 	.word	0x1fff951c
    18fc:	1fff9e5d 	.word	0x1fff9e5d

00001900 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1904:	4ba2      	ldr	r3, [pc, #648]	; (1b90 <wipeup()+0x290>)
    1906:	781d      	ldrb	r5, [r3, #0]
    1908:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    190a:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    190c:	2b00      	cmp	r3, #0
    190e:	f000 8130 	beq.w	1b72 <wipeup()+0x272>
    1912:	f103 3bff 	add.w	fp, r3, #4294967295
    1916:	fa1f fb8b 	uxth.w	fp, fp
    191a:	489e      	ldr	r0, [pc, #632]	; (1b94 <wipeup()+0x294>)
    191c:	499e      	ldr	r1, [pc, #632]	; (1b98 <wipeup()+0x298>)
    191e:	f10b 0b01 	add.w	fp, fp, #1
    1922:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    1926:	4483      	add	fp, r0
    1928:	4602      	mov	r2, r0
    192a:	460c      	mov	r4, r1
    192c:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    192e:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    1932:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    1936:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    193a:	f886 e000 	strb.w	lr, [r6]
    193e:	3203      	adds	r2, #3
    1940:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    1944:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1948:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    194c:	f886 a001 	strb.w	sl, [r6, #1]
    1950:	455a      	cmp	r2, fp
        b = rhs.b;
    1952:	f886 9002 	strb.w	r9, [r6, #2]
    1956:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    195a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    195e:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    1962:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    1966:	f106 0603 	add.w	r6, r6, #3
    196a:	f1a1 0103 	sub.w	r1, r1, #3
    196e:	d1de      	bne.n	192e <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1970:	2b4a      	cmp	r3, #74	; 0x4a
    1972:	d828      	bhi.n	19c6 <wipeup()+0xc6>
    1974:	4889      	ldr	r0, [pc, #548]	; (1b9c <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    1976:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    197a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    197e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1982:	eb00 0801 	add.w	r8, r0, r1
    1986:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    198a:	3301      	adds	r3, #1
    198c:	eb04 0e01 	add.w	lr, r4, r1
    1990:	f810 b001 	ldrb.w	fp, [r0, r1]
    1994:	f804 b001 	strb.w	fp, [r4, r1]
    1998:	18a6      	adds	r6, r4, r2
    199a:	b29b      	uxth	r3, r3
        g = rhs.g;
    199c:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    19a0:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19a4:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19a8:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    19ac:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19b0:	f88e a001 	strb.w	sl, [lr, #1]
    19b4:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    19b6:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19ba:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    19be:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    19c2:	70b1      	strb	r1, [r6, #2]
    19c4:	d1d7      	bne.n	1976 <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    19c6:	2d00      	cmp	r5, #0
    19c8:	f040 808f 	bne.w	1aea <wipeup()+0x1ea>
    19cc:	f10d 0a0c 	add.w	sl, sp, #12
    19d0:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19d4:	4b6e      	ldr	r3, [pc, #440]	; (1b90 <wipeup()+0x290>)
    19d6:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    19d8:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    19e0:	1c5a      	adds	r2, r3, #1
    19e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    19e6:	eb04 0e03 	add.w	lr, r4, r3
    19ea:	1825      	adds	r5, r4, r0
    19ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19f0:	2680      	movs	r6, #128	; 0x80
    19f2:	eb04 0902 	add.w	r9, r4, r2
    19f6:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    19f8:	22ff      	movs	r2, #255	; 0xff
    19fa:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    19fc:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1a00:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1a04:	f88e 2002 	strb.w	r2, [lr, #2]
    1a08:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a0a:	5422      	strb	r2, [r4, r0]
    1a0c:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a0e:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a10:	70aa      	strb	r2, [r5, #2]
    1a12:	4650      	mov	r0, sl
    1a14:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a16:	f88d 6009 	strb.w	r6, [sp, #9]
    1a1a:	f88d 600a 	strb.w	r6, [sp, #10]
    1a1e:	f88d 8008 	strb.w	r8, [sp, #8]
    1a22:	f008 ffef 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a26:	4b5a      	ldr	r3, [pc, #360]	; (1b90 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a28:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a2c:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a2e:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a32:	f88d 8008 	strb.w	r8, [sp, #8]
    1a36:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a3e:	eb04 0805 	add.w	r8, r4, r5
    1a42:	4633      	mov	r3, r6
    1a44:	f88d 6009 	strb.w	r6, [sp, #9]
    1a48:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a4c:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a50:	55e1      	strb	r1, [r4, r7]
    1a52:	465a      	mov	r2, fp
    1a54:	4650      	mov	r0, sl
    1a56:	4641      	mov	r1, r8
        g = rhs.g;
    1a58:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a5c:	f889 6002 	strb.w	r6, [r9, #2]
    1a60:	f008 ffd0 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a64:	4b4e      	ldr	r3, [pc, #312]	; (1ba0 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a66:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a6a:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a6c:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a70:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a74:	5560      	strb	r0, [r4, r5]
    1a76:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1a78:	4845      	ldr	r0, [pc, #276]	; (1b90 <wipeup()+0x290>)
        g = rhs.g;
    1a7a:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1a7e:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a82:	d520      	bpl.n	1ac6 <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a84:	4d47      	ldr	r5, [pc, #284]	; (1ba4 <wipeup()+0x2a4>)
    1a86:	4c48      	ldr	r4, [pc, #288]	; (1ba8 <wipeup()+0x2a8>)
    1a88:	682b      	ldr	r3, [r5, #0]
    1a8a:	9303      	str	r3, [sp, #12]
    1a8c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	1a5b      	subs	r3, r3, r1
    1a94:	4293      	cmp	r3, r2
    1a96:	d30e      	bcc.n	1ab6 <wipeup()+0x1b6>
    1a98:	4b3d      	ldr	r3, [pc, #244]	; (1b90 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a9a:	682a      	ldr	r2, [r5, #0]
    1a9c:	781b      	ldrb	r3, [r3, #0]
    1a9e:	9202      	str	r2, [sp, #8]
	return ret;
    1aa0:	9a02      	ldr	r2, [sp, #8]
    1aa2:	6022      	str	r2, [r4, #0]
    1aa4:	3301      	adds	r3, #1
    1aa6:	4a3a      	ldr	r2, [pc, #232]	; (1b90 <wipeup()+0x290>)
    1aa8:	b2db      	uxtb	r3, r3
    1aaa:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1aac:	2b4a      	cmp	r3, #74	; 0x4a
    1aae:	d005      	beq.n	1abc <wipeup()+0x1bc>
		finish_transition();
	}
}
    1ab0:	b005      	add	sp, #20
    1ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ab6:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1ab8:	2b4a      	cmp	r3, #74	; 0x4a
    1aba:	d1f9      	bne.n	1ab0 <wipeup()+0x1b0>
		finish_transition();
    1abc:	f7ff fa9e 	bl	ffc <finish_transition()>
	}
}
    1ac0:	b005      	add	sp, #20
    1ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1ac6:	4836      	ldr	r0, [pc, #216]	; (1ba0 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac8:	4d36      	ldr	r5, [pc, #216]	; (1ba4 <wipeup()+0x2a4>)
    1aca:	f009 fee5 	bl	b898 <__cxa_guard_acquire>
    1ace:	2800      	cmp	r0, #0
    1ad0:	d151      	bne.n	1b76 <wipeup()+0x276>
    1ad2:	4c35      	ldr	r4, [pc, #212]	; (1ba8 <wipeup()+0x2a8>)
    1ad4:	682b      	ldr	r3, [r5, #0]
    1ad6:	9303      	str	r3, [sp, #12]
    1ad8:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1adc:	9b03      	ldr	r3, [sp, #12]
    1ade:	1a5b      	subs	r3, r3, r1
    1ae0:	4293      	cmp	r3, r2
    1ae2:	d2d9      	bcs.n	1a98 <wipeup()+0x198>
    1ae4:	4b2a      	ldr	r3, [pc, #168]	; (1b90 <wipeup()+0x290>)
    1ae6:	781b      	ldrb	r3, [r3, #0]
    1ae8:	e7e0      	b.n	1aac <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1aea:	3d01      	subs	r5, #1
    1aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1af0:	2680      	movs	r6, #128	; 0x80
    1af2:	eb04 0905 	add.w	r9, r4, r5
    1af6:	f10d 0a0c 	add.w	sl, sp, #12
    1afa:	f10d 0b08 	add.w	fp, sp, #8
    1afe:	f04f 0800 	mov.w	r8, #0
    1b02:	4649      	mov	r1, r9
    1b04:	4633      	mov	r3, r6
    1b06:	4650      	mov	r0, sl
    1b08:	465a      	mov	r2, fp
    1b0a:	f88d 8008 	strb.w	r8, [sp, #8]
    1b0e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b12:	f88d 600a 	strb.w	r6, [sp, #10]
    1b16:	f008 ff75 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b1a:	4b1d      	ldr	r3, [pc, #116]	; (1b90 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b1c:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b20:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b22:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b26:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b2a:	f88d 8008 	strb.w	r8, [sp, #8]
    1b2e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b36:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b3a:	5562      	strb	r2, [r4, r5]
    1b3c:	461f      	mov	r7, r3
    1b3e:	4641      	mov	r1, r8
    1b40:	4633      	mov	r3, r6
    1b42:	465a      	mov	r2, fp
    1b44:	4650      	mov	r0, sl
        g = rhs.g;
    1b46:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b4a:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b4e:	f88d 6009 	strb.w	r6, [sp, #9]
    1b52:	f88d 600a 	strb.w	r6, [sp, #10]
    1b56:	f008 ff55 	bl	aa04 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b5a:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b62:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b66:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b68:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b6c:	f888 3002 	strb.w	r3, [r8, #2]
    1b70:	e730      	b.n	19d4 <wipeup()+0xd4>
    1b72:	4c09      	ldr	r4, [pc, #36]	; (1b98 <wipeup()+0x298>)
    1b74:	e6fe      	b.n	1974 <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b76:	4b0d      	ldr	r3, [pc, #52]	; (1bac <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1b78:	682a      	ldr	r2, [r5, #0]
    1b7a:	781b      	ldrb	r3, [r3, #0]
    1b7c:	4c0a      	ldr	r4, [pc, #40]	; (1ba8 <wipeup()+0x2a8>)
    1b7e:	9201      	str	r2, [sp, #4]
	return ret;
    1b80:	9a01      	ldr	r2, [sp, #4]
    1b82:	6022      	str	r2, [r4, #0]
    1b84:	009b      	lsls	r3, r3, #2
    1b86:	4806      	ldr	r0, [pc, #24]	; (1ba0 <wipeup()+0x2a0>)
    1b88:	6063      	str	r3, [r4, #4]
    1b8a:	f009 fe8b 	bl	b8a4 <__cxa_guard_release>
    1b8e:	e7a1      	b.n	1ad4 <wipeup()+0x1d4>
    1b90:	1fff9540 	.word	0x1fff9540
    1b94:	1fff8cb0 	.word	0x1fff8cb0
    1b98:	1fffa6b8 	.word	0x1fffa6b8
    1b9c:	1fff9e74 	.word	0x1fff9e74
    1ba0:	1fff9600 	.word	0x1fff9600
    1ba4:	1fffa8f8 	.word	0x1fffa8f8
    1ba8:	1fff9e60 	.word	0x1fff9e60
    1bac:	1fff9e5d 	.word	0x1fff9e5d

00001bb0 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1bb0:	2801      	cmp	r0, #1
    1bb2:	d006      	beq.n	1bc2 <switch_transition(TransitionType)+0x12>
    1bb4:	d303      	bcc.n	1bbe <switch_transition(TransitionType)+0xe>
    1bb6:	2802      	cmp	r0, #2
    1bb8:	d101      	bne.n	1bbe <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1bba:	f7ff bea1 	b.w	1900 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1bbe:	f7ff bcf1 	b.w	15a4 <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1bc2:	f7ff bd61 	b.w	1688 <wipedown()>
    1bc6:	bf00      	nop

00001bc8 <print_palette(unsigned char)>:




// Print palettes
void print_palette(uint8_t pn) {
    1bc8:	b510      	push	{r4, lr}
    1bca:	2110      	movs	r1, #16
    1bcc:	4604      	mov	r4, r0
    1bce:	4894      	ldr	r0, [pc, #592]	; (1e20 <print_palette(unsigned char)+0x258>)
    1bd0:	f00a fefa 	bl	c9c8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1bd4:	4621      	mov	r1, r4
    1bd6:	2300      	movs	r3, #0
    1bd8:	220a      	movs	r2, #10
    1bda:	4892      	ldr	r0, [pc, #584]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1bdc:	f00b f908 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1be0:	2102      	movs	r1, #2
    1be2:	4891      	ldr	r0, [pc, #580]	; (1e28 <print_palette(unsigned char)+0x260>)
    1be4:	f00a fef0 	bl	c9c8 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1be8:	2c5c      	cmp	r4, #92	; 0x5c
    1bea:	f200 8281 	bhi.w	20f0 <print_palette(unsigned char)+0x528>
    1bee:	e8df f014 	tbh	[pc, r4, lsl #1]
    1bf2:	027a      	.short	0x027a
    1bf4:	02700275 	.word	0x02700275
    1bf8:	0266026b 	.word	0x0266026b
    1bfc:	025c0261 	.word	0x025c0261
    1c00:	02520257 	.word	0x02520257
    1c04:	0248024d 	.word	0x0248024d
    1c08:	023e0243 	.word	0x023e0243
    1c0c:	02340239 	.word	0x02340239
    1c10:	022a022f 	.word	0x022a022f
    1c14:	02200225 	.word	0x02200225
    1c18:	0216021b 	.word	0x0216021b
    1c1c:	020c0211 	.word	0x020c0211
    1c20:	02020207 	.word	0x02020207
    1c24:	01f801fd 	.word	0x01f801fd
    1c28:	01ee01f3 	.word	0x01ee01f3
    1c2c:	01e401e9 	.word	0x01e401e9
    1c30:	01da01df 	.word	0x01da01df
    1c34:	01d001d5 	.word	0x01d001d5
    1c38:	01c601cb 	.word	0x01c601cb
    1c3c:	01bc01c1 	.word	0x01bc01c1
    1c40:	01b201b7 	.word	0x01b201b7
    1c44:	01a801ad 	.word	0x01a801ad
    1c48:	019e01a3 	.word	0x019e01a3
    1c4c:	01940199 	.word	0x01940199
    1c50:	018a018f 	.word	0x018a018f
    1c54:	01800185 	.word	0x01800185
    1c58:	0176017b 	.word	0x0176017b
    1c5c:	016c0171 	.word	0x016c0171
    1c60:	01110167 	.word	0x01110167
    1c64:	0107010c 	.word	0x0107010c
    1c68:	00fd0102 	.word	0x00fd0102
    1c6c:	00f300f8 	.word	0x00f300f8
    1c70:	00e900ee 	.word	0x00e900ee
    1c74:	00df00e4 	.word	0x00df00e4
    1c78:	00d500da 	.word	0x00d500da
    1c7c:	00cb00d0 	.word	0x00cb00d0
    1c80:	00c100c6 	.word	0x00c100c6
    1c84:	00b700bc 	.word	0x00b700bc
    1c88:	00ad00b2 	.word	0x00ad00b2
    1c8c:	00a300a8 	.word	0x00a300a8
    1c90:	0099009e 	.word	0x0099009e
    1c94:	008f0094 	.word	0x008f0094
    1c98:	0085008a 	.word	0x0085008a
    1c9c:	007b0080 	.word	0x007b0080
    1ca0:	00710076 	.word	0x00710076
    1ca4:	0067006c 	.word	0x0067006c
    1ca8:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1cac:	495f      	ldr	r1, [pc, #380]	; (1e2c <print_palette(unsigned char)+0x264>)
    1cae:	485d      	ldr	r0, [pc, #372]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cb0:	f7fe fdf4 	bl	89c <Print::println(char const*)>
    1cb4:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1cb6:	495e      	ldr	r1, [pc, #376]	; (1e30 <print_palette(unsigned char)+0x268>)
    1cb8:	485a      	ldr	r0, [pc, #360]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cba:	f7fe fdef 	bl	89c <Print::println(char const*)>
    1cbe:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1cc0:	495c      	ldr	r1, [pc, #368]	; (1e34 <print_palette(unsigned char)+0x26c>)
    1cc2:	4858      	ldr	r0, [pc, #352]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cc4:	f7fe fdea 	bl	89c <Print::println(char const*)>
    1cc8:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1cca:	495b      	ldr	r1, [pc, #364]	; (1e38 <print_palette(unsigned char)+0x270>)
    1ccc:	4855      	ldr	r0, [pc, #340]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cce:	f7fe fde5 	bl	89c <Print::println(char const*)>
    1cd2:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1cd4:	4959      	ldr	r1, [pc, #356]	; (1e3c <print_palette(unsigned char)+0x274>)
    1cd6:	4853      	ldr	r0, [pc, #332]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cd8:	f7fe fde0 	bl	89c <Print::println(char const*)>
    1cdc:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1cde:	4958      	ldr	r1, [pc, #352]	; (1e40 <print_palette(unsigned char)+0x278>)
    1ce0:	4850      	ldr	r0, [pc, #320]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1ce2:	f7fe fddb 	bl	89c <Print::println(char const*)>
    1ce6:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1ce8:	4956      	ldr	r1, [pc, #344]	; (1e44 <print_palette(unsigned char)+0x27c>)
    1cea:	484e      	ldr	r0, [pc, #312]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cec:	f7fe fdd6 	bl	89c <Print::println(char const*)>
    1cf0:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1cf2:	4955      	ldr	r1, [pc, #340]	; (1e48 <print_palette(unsigned char)+0x280>)
    1cf4:	484b      	ldr	r0, [pc, #300]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1cf6:	f7fe fdd1 	bl	89c <Print::println(char const*)>
    1cfa:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1cfc:	4953      	ldr	r1, [pc, #332]	; (1e4c <print_palette(unsigned char)+0x284>)
    1cfe:	4849      	ldr	r0, [pc, #292]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d00:	f7fe fdcc 	bl	89c <Print::println(char const*)>
    1d04:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1d06:	4952      	ldr	r1, [pc, #328]	; (1e50 <print_palette(unsigned char)+0x288>)
    1d08:	4846      	ldr	r0, [pc, #280]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d0a:	f7fe fdc7 	bl	89c <Print::println(char const*)>
    1d0e:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d10:	4950      	ldr	r1, [pc, #320]	; (1e54 <print_palette(unsigned char)+0x28c>)
    1d12:	4844      	ldr	r0, [pc, #272]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d14:	f7fe fdc2 	bl	89c <Print::println(char const*)>
    1d18:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d1a:	494f      	ldr	r1, [pc, #316]	; (1e58 <print_palette(unsigned char)+0x290>)
    1d1c:	4841      	ldr	r0, [pc, #260]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d1e:	f7fe fdbd 	bl	89c <Print::println(char const*)>
    1d22:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d24:	494d      	ldr	r1, [pc, #308]	; (1e5c <print_palette(unsigned char)+0x294>)
    1d26:	483f      	ldr	r0, [pc, #252]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d28:	f7fe fdb8 	bl	89c <Print::println(char const*)>
    1d2c:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d2e:	494c      	ldr	r1, [pc, #304]	; (1e60 <print_palette(unsigned char)+0x298>)
    1d30:	483c      	ldr	r0, [pc, #240]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d32:	f7fe fdb3 	bl	89c <Print::println(char const*)>
    1d36:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d38:	494a      	ldr	r1, [pc, #296]	; (1e64 <print_palette(unsigned char)+0x29c>)
    1d3a:	483a      	ldr	r0, [pc, #232]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d3c:	f7fe fdae 	bl	89c <Print::println(char const*)>
    1d40:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d42:	4949      	ldr	r1, [pc, #292]	; (1e68 <print_palette(unsigned char)+0x2a0>)
    1d44:	4837      	ldr	r0, [pc, #220]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d46:	f7fe fda9 	bl	89c <Print::println(char const*)>
    1d4a:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d4c:	4947      	ldr	r1, [pc, #284]	; (1e6c <print_palette(unsigned char)+0x2a4>)
    1d4e:	4835      	ldr	r0, [pc, #212]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d50:	f7fe fda4 	bl	89c <Print::println(char const*)>
    1d54:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d56:	4946      	ldr	r1, [pc, #280]	; (1e70 <print_palette(unsigned char)+0x2a8>)
    1d58:	4832      	ldr	r0, [pc, #200]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d5a:	f7fe fd9f 	bl	89c <Print::println(char const*)>
    1d5e:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d60:	4944      	ldr	r1, [pc, #272]	; (1e74 <print_palette(unsigned char)+0x2ac>)
    1d62:	4830      	ldr	r0, [pc, #192]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d64:	f7fe fd9a 	bl	89c <Print::println(char const*)>
    1d68:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d6a:	4943      	ldr	r1, [pc, #268]	; (1e78 <print_palette(unsigned char)+0x2b0>)
    1d6c:	482d      	ldr	r0, [pc, #180]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d6e:	f7fe fd95 	bl	89c <Print::println(char const*)>
    1d72:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d74:	4941      	ldr	r1, [pc, #260]	; (1e7c <print_palette(unsigned char)+0x2b4>)
    1d76:	482b      	ldr	r0, [pc, #172]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d78:	f7fe fd90 	bl	89c <Print::println(char const*)>
    1d7c:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1d7e:	4940      	ldr	r1, [pc, #256]	; (1e80 <print_palette(unsigned char)+0x2b8>)
    1d80:	4828      	ldr	r0, [pc, #160]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d82:	f7fe fd8b 	bl	89c <Print::println(char const*)>
    1d86:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1d88:	493e      	ldr	r1, [pc, #248]	; (1e84 <print_palette(unsigned char)+0x2bc>)
    1d8a:	4826      	ldr	r0, [pc, #152]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d8c:	f7fe fd86 	bl	89c <Print::println(char const*)>
    1d90:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1d92:	493d      	ldr	r1, [pc, #244]	; (1e88 <print_palette(unsigned char)+0x2c0>)
    1d94:	4823      	ldr	r0, [pc, #140]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1d96:	f7fe fd81 	bl	89c <Print::println(char const*)>
    1d9a:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1d9c:	493b      	ldr	r1, [pc, #236]	; (1e8c <print_palette(unsigned char)+0x2c4>)
    1d9e:	4821      	ldr	r0, [pc, #132]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1da0:	f7fe fd7c 	bl	89c <Print::println(char const*)>
    1da4:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1da6:	493a      	ldr	r1, [pc, #232]	; (1e90 <print_palette(unsigned char)+0x2c8>)
    1da8:	481e      	ldr	r0, [pc, #120]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1daa:	f7fe fd77 	bl	89c <Print::println(char const*)>
    1dae:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1db0:	4938      	ldr	r1, [pc, #224]	; (1e94 <print_palette(unsigned char)+0x2cc>)
    1db2:	481c      	ldr	r0, [pc, #112]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1db4:	f7fe fd72 	bl	89c <Print::println(char const*)>
    1db8:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1dba:	4937      	ldr	r1, [pc, #220]	; (1e98 <print_palette(unsigned char)+0x2d0>)
    1dbc:	4819      	ldr	r0, [pc, #100]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dbe:	f7fe fd6d 	bl	89c <Print::println(char const*)>
    1dc2:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1dc4:	4935      	ldr	r1, [pc, #212]	; (1e9c <print_palette(unsigned char)+0x2d4>)
    1dc6:	4817      	ldr	r0, [pc, #92]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dc8:	f7fe fd68 	bl	89c <Print::println(char const*)>
    1dcc:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1dce:	4934      	ldr	r1, [pc, #208]	; (1ea0 <print_palette(unsigned char)+0x2d8>)
    1dd0:	4814      	ldr	r0, [pc, #80]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dd2:	f7fe fd63 	bl	89c <Print::println(char const*)>
    1dd6:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1dd8:	4932      	ldr	r1, [pc, #200]	; (1ea4 <print_palette(unsigned char)+0x2dc>)
    1dda:	4812      	ldr	r0, [pc, #72]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1ddc:	f7fe fd5e 	bl	89c <Print::println(char const*)>
    1de0:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1de2:	4931      	ldr	r1, [pc, #196]	; (1ea8 <print_palette(unsigned char)+0x2e0>)
    1de4:	480f      	ldr	r0, [pc, #60]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1de6:	f7fe fd59 	bl	89c <Print::println(char const*)>
    1dea:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1dec:	492f      	ldr	r1, [pc, #188]	; (1eac <print_palette(unsigned char)+0x2e4>)
    1dee:	480d      	ldr	r0, [pc, #52]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1df0:	f7fe fd54 	bl	89c <Print::println(char const*)>
    1df4:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1df6:	492e      	ldr	r1, [pc, #184]	; (1eb0 <print_palette(unsigned char)+0x2e8>)
    1df8:	480a      	ldr	r0, [pc, #40]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1dfa:	f7fe fd4f 	bl	89c <Print::println(char const*)>
    1dfe:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1e00:	492c      	ldr	r1, [pc, #176]	; (1eb4 <print_palette(unsigned char)+0x2ec>)
    1e02:	4808      	ldr	r0, [pc, #32]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e04:	f7fe fd4a 	bl	89c <Print::println(char const*)>
    1e08:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e0a:	492b      	ldr	r1, [pc, #172]	; (1eb8 <print_palette(unsigned char)+0x2f0>)
    1e0c:	4805      	ldr	r0, [pc, #20]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e0e:	f7fe fd45 	bl	89c <Print::println(char const*)>
    1e12:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e14:	4929      	ldr	r1, [pc, #164]	; (1ebc <print_palette(unsigned char)+0x2f4>)
    1e16:	4803      	ldr	r0, [pc, #12]	; (1e24 <print_palette(unsigned char)+0x25c>)
    1e18:	f7fe fd40 	bl	89c <Print::println(char const*)>
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	bf00      	nop
    1e20:	0000e734 	.word	0x0000e734
    1e24:	1fff878c 	.word	0x1fff878c
    1e28:	0000e748 	.word	0x0000e748
    1e2c:	0000ecdc 	.word	0x0000ecdc
    1e30:	0000ecd0 	.word	0x0000ecd0
    1e34:	0000ecc0 	.word	0x0000ecc0
    1e38:	0000ecb0 	.word	0x0000ecb0
    1e3c:	0000ec9c 	.word	0x0000ec9c
    1e40:	0000ec84 	.word	0x0000ec84
    1e44:	0000ec6c 	.word	0x0000ec6c
    1e48:	0000ec5c 	.word	0x0000ec5c
    1e4c:	0000ec44 	.word	0x0000ec44
    1e50:	0000ec38 	.word	0x0000ec38
    1e54:	0000ec2c 	.word	0x0000ec2c
    1e58:	0000ec14 	.word	0x0000ec14
    1e5c:	0000ec08 	.word	0x0000ec08
    1e60:	0000ebfc 	.word	0x0000ebfc
    1e64:	0000ebf0 	.word	0x0000ebf0
    1e68:	0000ebe4 	.word	0x0000ebe4
    1e6c:	0000ebd4 	.word	0x0000ebd4
    1e70:	0000ebc8 	.word	0x0000ebc8
    1e74:	0000ebb4 	.word	0x0000ebb4
    1e78:	0000eba8 	.word	0x0000eba8
    1e7c:	0000eb98 	.word	0x0000eb98
    1e80:	0000eb8c 	.word	0x0000eb8c
    1e84:	0000eb80 	.word	0x0000eb80
    1e88:	0000eb78 	.word	0x0000eb78
    1e8c:	0000eb64 	.word	0x0000eb64
    1e90:	0000eb54 	.word	0x0000eb54
    1e94:	0000eb40 	.word	0x0000eb40
    1e98:	0000eb34 	.word	0x0000eb34
    1e9c:	0000eb28 	.word	0x0000eb28
    1ea0:	0000eb1c 	.word	0x0000eb1c
    1ea4:	0000eb0c 	.word	0x0000eb0c
    1ea8:	0000eaf8 	.word	0x0000eaf8
    1eac:	0000eaec 	.word	0x0000eaec
    1eb0:	0000eadc 	.word	0x0000eadc
    1eb4:	0000ead0 	.word	0x0000ead0
    1eb8:	0000eac0 	.word	0x0000eac0
    1ebc:	0000eab4 	.word	0x0000eab4
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1ec0:	498e      	ldr	r1, [pc, #568]	; (20fc <print_palette(unsigned char)+0x534>)
    1ec2:	488f      	ldr	r0, [pc, #572]	; (2100 <print_palette(unsigned char)+0x538>)
    1ec4:	f7fe fcea 	bl	89c <Print::println(char const*)>
    1ec8:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1eca:	498e      	ldr	r1, [pc, #568]	; (2104 <print_palette(unsigned char)+0x53c>)
    1ecc:	488c      	ldr	r0, [pc, #560]	; (2100 <print_palette(unsigned char)+0x538>)
    1ece:	f7fe fce5 	bl	89c <Print::println(char const*)>
    1ed2:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1ed4:	498c      	ldr	r1, [pc, #560]	; (2108 <print_palette(unsigned char)+0x540>)
    1ed6:	488a      	ldr	r0, [pc, #552]	; (2100 <print_palette(unsigned char)+0x538>)
    1ed8:	f7fe fce0 	bl	89c <Print::println(char const*)>
    1edc:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1ede:	498b      	ldr	r1, [pc, #556]	; (210c <print_palette(unsigned char)+0x544>)
    1ee0:	4887      	ldr	r0, [pc, #540]	; (2100 <print_palette(unsigned char)+0x538>)
    1ee2:	f7fe fcdb 	bl	89c <Print::println(char const*)>
    1ee6:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1ee8:	4989      	ldr	r1, [pc, #548]	; (2110 <print_palette(unsigned char)+0x548>)
    1eea:	4885      	ldr	r0, [pc, #532]	; (2100 <print_palette(unsigned char)+0x538>)
    1eec:	f7fe fcd6 	bl	89c <Print::println(char const*)>
    1ef0:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1ef2:	4988      	ldr	r1, [pc, #544]	; (2114 <print_palette(unsigned char)+0x54c>)
    1ef4:	4882      	ldr	r0, [pc, #520]	; (2100 <print_palette(unsigned char)+0x538>)
    1ef6:	f7fe fcd1 	bl	89c <Print::println(char const*)>
    1efa:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1efc:	4986      	ldr	r1, [pc, #536]	; (2118 <print_palette(unsigned char)+0x550>)
    1efe:	4880      	ldr	r0, [pc, #512]	; (2100 <print_palette(unsigned char)+0x538>)
    1f00:	f7fe fccc 	bl	89c <Print::println(char const*)>
    1f04:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1f06:	4985      	ldr	r1, [pc, #532]	; (211c <print_palette(unsigned char)+0x554>)
    1f08:	487d      	ldr	r0, [pc, #500]	; (2100 <print_palette(unsigned char)+0x538>)
    1f0a:	f7fe fcc7 	bl	89c <Print::println(char const*)>
    1f0e:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f10:	4983      	ldr	r1, [pc, #524]	; (2120 <print_palette(unsigned char)+0x558>)
    1f12:	487b      	ldr	r0, [pc, #492]	; (2100 <print_palette(unsigned char)+0x538>)
    1f14:	f7fe fcc2 	bl	89c <Print::println(char const*)>
    1f18:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f1a:	4982      	ldr	r1, [pc, #520]	; (2124 <print_palette(unsigned char)+0x55c>)
    1f1c:	4878      	ldr	r0, [pc, #480]	; (2100 <print_palette(unsigned char)+0x538>)
    1f1e:	f7fe fcbd 	bl	89c <Print::println(char const*)>
    1f22:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f24:	4980      	ldr	r1, [pc, #512]	; (2128 <print_palette(unsigned char)+0x560>)
    1f26:	4876      	ldr	r0, [pc, #472]	; (2100 <print_palette(unsigned char)+0x538>)
    1f28:	f7fe fcb8 	bl	89c <Print::println(char const*)>
    1f2c:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f2e:	497f      	ldr	r1, [pc, #508]	; (212c <print_palette(unsigned char)+0x564>)
    1f30:	4873      	ldr	r0, [pc, #460]	; (2100 <print_palette(unsigned char)+0x538>)
    1f32:	f7fe fcb3 	bl	89c <Print::println(char const*)>
    1f36:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f38:	497d      	ldr	r1, [pc, #500]	; (2130 <print_palette(unsigned char)+0x568>)
    1f3a:	4871      	ldr	r0, [pc, #452]	; (2100 <print_palette(unsigned char)+0x538>)
    1f3c:	f7fe fcae 	bl	89c <Print::println(char const*)>
    1f40:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f42:	497c      	ldr	r1, [pc, #496]	; (2134 <print_palette(unsigned char)+0x56c>)
    1f44:	486e      	ldr	r0, [pc, #440]	; (2100 <print_palette(unsigned char)+0x538>)
    1f46:	f7fe fca9 	bl	89c <Print::println(char const*)>
    1f4a:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f4c:	497a      	ldr	r1, [pc, #488]	; (2138 <print_palette(unsigned char)+0x570>)
    1f4e:	486c      	ldr	r0, [pc, #432]	; (2100 <print_palette(unsigned char)+0x538>)
    1f50:	f7fe fca4 	bl	89c <Print::println(char const*)>
    1f54:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f56:	4979      	ldr	r1, [pc, #484]	; (213c <print_palette(unsigned char)+0x574>)
    1f58:	4869      	ldr	r0, [pc, #420]	; (2100 <print_palette(unsigned char)+0x538>)
    1f5a:	f7fe fc9f 	bl	89c <Print::println(char const*)>
    1f5e:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f60:	4977      	ldr	r1, [pc, #476]	; (2140 <print_palette(unsigned char)+0x578>)
    1f62:	4867      	ldr	r0, [pc, #412]	; (2100 <print_palette(unsigned char)+0x538>)
    1f64:	f7fe fc9a 	bl	89c <Print::println(char const*)>
    1f68:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f6a:	4976      	ldr	r1, [pc, #472]	; (2144 <print_palette(unsigned char)+0x57c>)
    1f6c:	4864      	ldr	r0, [pc, #400]	; (2100 <print_palette(unsigned char)+0x538>)
    1f6e:	f7fe fc95 	bl	89c <Print::println(char const*)>
    1f72:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f74:	4974      	ldr	r1, [pc, #464]	; (2148 <print_palette(unsigned char)+0x580>)
    1f76:	4862      	ldr	r0, [pc, #392]	; (2100 <print_palette(unsigned char)+0x538>)
    1f78:	f7fe fc90 	bl	89c <Print::println(char const*)>
    1f7c:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1f7e:	4973      	ldr	r1, [pc, #460]	; (214c <print_palette(unsigned char)+0x584>)
    1f80:	485f      	ldr	r0, [pc, #380]	; (2100 <print_palette(unsigned char)+0x538>)
    1f82:	f7fe fc8b 	bl	89c <Print::println(char const*)>
    1f86:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1f88:	4971      	ldr	r1, [pc, #452]	; (2150 <print_palette(unsigned char)+0x588>)
    1f8a:	485d      	ldr	r0, [pc, #372]	; (2100 <print_palette(unsigned char)+0x538>)
    1f8c:	f7fe fc86 	bl	89c <Print::println(char const*)>
    1f90:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1f92:	4970      	ldr	r1, [pc, #448]	; (2154 <print_palette(unsigned char)+0x58c>)
    1f94:	485a      	ldr	r0, [pc, #360]	; (2100 <print_palette(unsigned char)+0x538>)
    1f96:	f7fe fc81 	bl	89c <Print::println(char const*)>
    1f9a:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1f9c:	496e      	ldr	r1, [pc, #440]	; (2158 <print_palette(unsigned char)+0x590>)
    1f9e:	4858      	ldr	r0, [pc, #352]	; (2100 <print_palette(unsigned char)+0x538>)
    1fa0:	f7fe fc7c 	bl	89c <Print::println(char const*)>
    1fa4:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1fa6:	496d      	ldr	r1, [pc, #436]	; (215c <print_palette(unsigned char)+0x594>)
    1fa8:	4855      	ldr	r0, [pc, #340]	; (2100 <print_palette(unsigned char)+0x538>)
    1faa:	f7fe fc77 	bl	89c <Print::println(char const*)>
    1fae:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1fb0:	496b      	ldr	r1, [pc, #428]	; (2160 <print_palette(unsigned char)+0x598>)
    1fb2:	4853      	ldr	r0, [pc, #332]	; (2100 <print_palette(unsigned char)+0x538>)
    1fb4:	f7fe fc72 	bl	89c <Print::println(char const*)>
    1fb8:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1fba:	496a      	ldr	r1, [pc, #424]	; (2164 <print_palette(unsigned char)+0x59c>)
    1fbc:	4850      	ldr	r0, [pc, #320]	; (2100 <print_palette(unsigned char)+0x538>)
    1fbe:	f7fe fc6d 	bl	89c <Print::println(char const*)>
    1fc2:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1fc4:	4968      	ldr	r1, [pc, #416]	; (2168 <print_palette(unsigned char)+0x5a0>)
    1fc6:	484e      	ldr	r0, [pc, #312]	; (2100 <print_palette(unsigned char)+0x538>)
    1fc8:	f7fe fc68 	bl	89c <Print::println(char const*)>
    1fcc:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1fce:	4967      	ldr	r1, [pc, #412]	; (216c <print_palette(unsigned char)+0x5a4>)
    1fd0:	484b      	ldr	r0, [pc, #300]	; (2100 <print_palette(unsigned char)+0x538>)
    1fd2:	f7fe fc63 	bl	89c <Print::println(char const*)>
    1fd6:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    1fd8:	4965      	ldr	r1, [pc, #404]	; (2170 <print_palette(unsigned char)+0x5a8>)
    1fda:	4849      	ldr	r0, [pc, #292]	; (2100 <print_palette(unsigned char)+0x538>)
    1fdc:	f7fe fc5e 	bl	89c <Print::println(char const*)>
    1fe0:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    1fe2:	4964      	ldr	r1, [pc, #400]	; (2174 <print_palette(unsigned char)+0x5ac>)
    1fe4:	4846      	ldr	r0, [pc, #280]	; (2100 <print_palette(unsigned char)+0x538>)
    1fe6:	f7fe fc59 	bl	89c <Print::println(char const*)>
    1fea:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    1fec:	4962      	ldr	r1, [pc, #392]	; (2178 <print_palette(unsigned char)+0x5b0>)
    1fee:	4844      	ldr	r0, [pc, #272]	; (2100 <print_palette(unsigned char)+0x538>)
    1ff0:	f7fe fc54 	bl	89c <Print::println(char const*)>
    1ff4:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    1ff6:	4961      	ldr	r1, [pc, #388]	; (217c <print_palette(unsigned char)+0x5b4>)
    1ff8:	4841      	ldr	r0, [pc, #260]	; (2100 <print_palette(unsigned char)+0x538>)
    1ffa:	f7fe fc4f 	bl	89c <Print::println(char const*)>
    1ffe:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2000:	495f      	ldr	r1, [pc, #380]	; (2180 <print_palette(unsigned char)+0x5b8>)
    2002:	483f      	ldr	r0, [pc, #252]	; (2100 <print_palette(unsigned char)+0x538>)
    2004:	f7fe fc4a 	bl	89c <Print::println(char const*)>
    2008:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    200a:	495e      	ldr	r1, [pc, #376]	; (2184 <print_palette(unsigned char)+0x5bc>)
    200c:	483c      	ldr	r0, [pc, #240]	; (2100 <print_palette(unsigned char)+0x538>)
    200e:	f7fe fc45 	bl	89c <Print::println(char const*)>
    2012:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    2014:	495c      	ldr	r1, [pc, #368]	; (2188 <print_palette(unsigned char)+0x5c0>)
    2016:	483a      	ldr	r0, [pc, #232]	; (2100 <print_palette(unsigned char)+0x538>)
    2018:	f7fe fc40 	bl	89c <Print::println(char const*)>
    201c:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    201e:	495b      	ldr	r1, [pc, #364]	; (218c <print_palette(unsigned char)+0x5c4>)
    2020:	4837      	ldr	r0, [pc, #220]	; (2100 <print_palette(unsigned char)+0x538>)
    2022:	f7fe fc3b 	bl	89c <Print::println(char const*)>
    2026:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2028:	4959      	ldr	r1, [pc, #356]	; (2190 <print_palette(unsigned char)+0x5c8>)
    202a:	4835      	ldr	r0, [pc, #212]	; (2100 <print_palette(unsigned char)+0x538>)
    202c:	f7fe fc36 	bl	89c <Print::println(char const*)>
    2030:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    2032:	4958      	ldr	r1, [pc, #352]	; (2194 <print_palette(unsigned char)+0x5cc>)
    2034:	4832      	ldr	r0, [pc, #200]	; (2100 <print_palette(unsigned char)+0x538>)
    2036:	f7fe fc31 	bl	89c <Print::println(char const*)>
    203a:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    203c:	4956      	ldr	r1, [pc, #344]	; (2198 <print_palette(unsigned char)+0x5d0>)
    203e:	4830      	ldr	r0, [pc, #192]	; (2100 <print_palette(unsigned char)+0x538>)
    2040:	f7fe fc2c 	bl	89c <Print::println(char const*)>
    2044:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    2046:	4955      	ldr	r1, [pc, #340]	; (219c <print_palette(unsigned char)+0x5d4>)
    2048:	482d      	ldr	r0, [pc, #180]	; (2100 <print_palette(unsigned char)+0x538>)
    204a:	f7fe fc27 	bl	89c <Print::println(char const*)>
    204e:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2050:	4953      	ldr	r1, [pc, #332]	; (21a0 <print_palette(unsigned char)+0x5d8>)
    2052:	482b      	ldr	r0, [pc, #172]	; (2100 <print_palette(unsigned char)+0x538>)
    2054:	f7fe fc22 	bl	89c <Print::println(char const*)>
    2058:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    205a:	4952      	ldr	r1, [pc, #328]	; (21a4 <print_palette(unsigned char)+0x5dc>)
    205c:	4828      	ldr	r0, [pc, #160]	; (2100 <print_palette(unsigned char)+0x538>)
    205e:	f7fe fc1d 	bl	89c <Print::println(char const*)>
    2062:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    2064:	4950      	ldr	r1, [pc, #320]	; (21a8 <print_palette(unsigned char)+0x5e0>)
    2066:	4826      	ldr	r0, [pc, #152]	; (2100 <print_palette(unsigned char)+0x538>)
    2068:	f7fe fc18 	bl	89c <Print::println(char const*)>
    206c:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    206e:	494f      	ldr	r1, [pc, #316]	; (21ac <print_palette(unsigned char)+0x5e4>)
    2070:	4823      	ldr	r0, [pc, #140]	; (2100 <print_palette(unsigned char)+0x538>)
    2072:	f7fe fc13 	bl	89c <Print::println(char const*)>
    2076:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    2078:	494d      	ldr	r1, [pc, #308]	; (21b0 <print_palette(unsigned char)+0x5e8>)
    207a:	4821      	ldr	r0, [pc, #132]	; (2100 <print_palette(unsigned char)+0x538>)
    207c:	f7fe fc0e 	bl	89c <Print::println(char const*)>
    2080:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    2082:	494c      	ldr	r1, [pc, #304]	; (21b4 <print_palette(unsigned char)+0x5ec>)
    2084:	481e      	ldr	r0, [pc, #120]	; (2100 <print_palette(unsigned char)+0x538>)
    2086:	f7fe fc09 	bl	89c <Print::println(char const*)>
    208a:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    208c:	494a      	ldr	r1, [pc, #296]	; (21b8 <print_palette(unsigned char)+0x5f0>)
    208e:	481c      	ldr	r0, [pc, #112]	; (2100 <print_palette(unsigned char)+0x538>)
    2090:	f7fe fc04 	bl	89c <Print::println(char const*)>
    2094:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    2096:	4949      	ldr	r1, [pc, #292]	; (21bc <print_palette(unsigned char)+0x5f4>)
    2098:	4819      	ldr	r0, [pc, #100]	; (2100 <print_palette(unsigned char)+0x538>)
    209a:	f7fe fbff 	bl	89c <Print::println(char const*)>
    209e:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    20a0:	4947      	ldr	r1, [pc, #284]	; (21c0 <print_palette(unsigned char)+0x5f8>)
    20a2:	4817      	ldr	r0, [pc, #92]	; (2100 <print_palette(unsigned char)+0x538>)
    20a4:	f7fe fbfa 	bl	89c <Print::println(char const*)>
    20a8:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    20aa:	4946      	ldr	r1, [pc, #280]	; (21c4 <print_palette(unsigned char)+0x5fc>)
    20ac:	4814      	ldr	r0, [pc, #80]	; (2100 <print_palette(unsigned char)+0x538>)
    20ae:	f7fe fbf5 	bl	89c <Print::println(char const*)>
    20b2:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    20b4:	4944      	ldr	r1, [pc, #272]	; (21c8 <print_palette(unsigned char)+0x600>)
    20b6:	4812      	ldr	r0, [pc, #72]	; (2100 <print_palette(unsigned char)+0x538>)
    20b8:	f7fe fbf0 	bl	89c <Print::println(char const*)>
    20bc:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    20be:	4943      	ldr	r1, [pc, #268]	; (21cc <print_palette(unsigned char)+0x604>)
    20c0:	480f      	ldr	r0, [pc, #60]	; (2100 <print_palette(unsigned char)+0x538>)
    20c2:	f7fe fbeb 	bl	89c <Print::println(char const*)>
    20c6:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    20c8:	4941      	ldr	r1, [pc, #260]	; (21d0 <print_palette(unsigned char)+0x608>)
    20ca:	480d      	ldr	r0, [pc, #52]	; (2100 <print_palette(unsigned char)+0x538>)
    20cc:	f7fe fbe6 	bl	89c <Print::println(char const*)>
    20d0:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20d2:	4940      	ldr	r1, [pc, #256]	; (21d4 <print_palette(unsigned char)+0x60c>)
    20d4:	480a      	ldr	r0, [pc, #40]	; (2100 <print_palette(unsigned char)+0x538>)
    20d6:	f7fe fbe1 	bl	89c <Print::println(char const*)>
    20da:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    20dc:	493e      	ldr	r1, [pc, #248]	; (21d8 <print_palette(unsigned char)+0x610>)
    20de:	4808      	ldr	r0, [pc, #32]	; (2100 <print_palette(unsigned char)+0x538>)
    20e0:	f7fe fbdc 	bl	89c <Print::println(char const*)>
    20e4:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    20e6:	493d      	ldr	r1, [pc, #244]	; (21dc <print_palette(unsigned char)+0x614>)
    20e8:	4805      	ldr	r0, [pc, #20]	; (2100 <print_palette(unsigned char)+0x538>)
    20ea:	f7fe fbd7 	bl	89c <Print::println(char const*)>
    20ee:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    20f0:	493b      	ldr	r1, [pc, #236]	; (21e0 <print_palette(unsigned char)+0x618>)
    20f2:	4803      	ldr	r0, [pc, #12]	; (2100 <print_palette(unsigned char)+0x538>)
    20f4:	f7fe fbd2 	bl	89c <Print::println(char const*)>
    20f8:	bd10      	pop	{r4, pc}
    20fa:	bf00      	nop
    20fc:	0000eaa0 	.word	0x0000eaa0
    2100:	1fff878c 	.word	0x1fff878c
    2104:	0000ea90 	.word	0x0000ea90
    2108:	0000ea84 	.word	0x0000ea84
    210c:	0000ea78 	.word	0x0000ea78
    2110:	0000ea6c 	.word	0x0000ea6c
    2114:	0000ea58 	.word	0x0000ea58
    2118:	0000ea4c 	.word	0x0000ea4c
    211c:	0000ea40 	.word	0x0000ea40
    2120:	0000ea34 	.word	0x0000ea34
    2124:	0000ea1c 	.word	0x0000ea1c
    2128:	0000ea14 	.word	0x0000ea14
    212c:	0000eaac 	.word	0x0000eaac
    2130:	0000ea08 	.word	0x0000ea08
    2134:	0000e9fc 	.word	0x0000e9fc
    2138:	0000e9e8 	.word	0x0000e9e8
    213c:	0000e9d4 	.word	0x0000e9d4
    2140:	0000e9c4 	.word	0x0000e9c4
    2144:	0000e9b8 	.word	0x0000e9b8
    2148:	0000e9ac 	.word	0x0000e9ac
    214c:	0000e9a0 	.word	0x0000e9a0
    2150:	0000e994 	.word	0x0000e994
    2154:	0000e988 	.word	0x0000e988
    2158:	0000e97c 	.word	0x0000e97c
    215c:	0000e970 	.word	0x0000e970
    2160:	0000e964 	.word	0x0000e964
    2164:	0000e958 	.word	0x0000e958
    2168:	0000e94c 	.word	0x0000e94c
    216c:	0000e940 	.word	0x0000e940
    2170:	0000e930 	.word	0x0000e930
    2174:	0000e91c 	.word	0x0000e91c
    2178:	0000e900 	.word	0x0000e900
    217c:	0000e8e8 	.word	0x0000e8e8
    2180:	0000e8cc 	.word	0x0000e8cc
    2184:	0000e8bc 	.word	0x0000e8bc
    2188:	0000e8ac 	.word	0x0000e8ac
    218c:	0000e898 	.word	0x0000e898
    2190:	0000e888 	.word	0x0000e888
    2194:	0000e880 	.word	0x0000e880
    2198:	0000e878 	.word	0x0000e878
    219c:	0000e860 	.word	0x0000e860
    21a0:	0000e850 	.word	0x0000e850
    21a4:	0000e848 	.word	0x0000e848
    21a8:	0000e838 	.word	0x0000e838
    21ac:	0000e828 	.word	0x0000e828
    21b0:	0000e818 	.word	0x0000e818
    21b4:	0000e804 	.word	0x0000e804
    21b8:	0000e7f0 	.word	0x0000e7f0
    21bc:	0000e7dc 	.word	0x0000e7dc
    21c0:	0000e7c4 	.word	0x0000e7c4
    21c4:	0000e7ac 	.word	0x0000e7ac
    21c8:	0000e79c 	.word	0x0000e79c
    21cc:	0000e788 	.word	0x0000e788
    21d0:	0000e774 	.word	0x0000e774
    21d4:	0000e764 	.word	0x0000e764
    21d8:	0000e758 	.word	0x0000e758
    21dc:	0000e74c 	.word	0x0000e74c
    21e0:	0000ecf4 	.word	0x0000ecf4

000021e4 <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    21e4:	b538      	push	{r3, r4, r5, lr}
    21e6:	2100      	movs	r1, #0
    21e8:	4604      	mov	r4, r0
    21ea:	4884      	ldr	r0, [pc, #528]	; (23fc <LEDDebug(LEDStruct&)+0x218>)
    21ec:	f00a fbec 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    21f0:	4883      	ldr	r0, [pc, #524]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    21f2:	f00a fded 	bl	cdd0 <Print::println()>
    21f6:	2122      	movs	r1, #34	; 0x22
    21f8:	4882      	ldr	r0, [pc, #520]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    21fa:	f00a fbe5 	bl	c9c8 <usb_serial_write>
    21fe:	4880      	ldr	r0, [pc, #512]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2200:	f00a fde6 	bl	cdd0 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    2204:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2208:	2b00      	cmp	r3, #0
    220a:	f000 80a0 	beq.w	234e <LEDDebug(LEDStruct&)+0x16a>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    220e:	2b01      	cmp	r3, #1
    2210:	f000 8572 	beq.w	2cf8 <LEDDebug(LEDStruct&)+0xb14>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2214:	2b02      	cmp	r3, #2
    2216:	f000 8575 	beq.w	2d04 <LEDDebug(LEDStruct&)+0xb20>
    221a:	2113      	movs	r1, #19
    221c:	487a      	ldr	r0, [pc, #488]	; (2408 <LEDDebug(LEDStruct&)+0x224>)
    221e:	f00a fbd3 	bl	c9c8 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2222:	4b7a      	ldr	r3, [pc, #488]	; (240c <LEDDebug(LEDStruct&)+0x228>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2224:	4876      	ldr	r0, [pc, #472]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2226:	7819      	ldrb	r1, [r3, #0]
    2228:	220a      	movs	r2, #10
    222a:	2300      	movs	r3, #0
    222c:	f00a fde0 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2230:	2103      	movs	r1, #3
    2232:	4877      	ldr	r0, [pc, #476]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    2234:	f00a fbc8 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2238:	4871      	ldr	r0, [pc, #452]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    223a:	f00a fdc9 	bl	cdd0 <Print::println()>
    223e:	2113      	movs	r1, #19
    2240:	4874      	ldr	r0, [pc, #464]	; (2414 <LEDDebug(LEDStruct&)+0x230>)
    2242:	f00a fbc1 	bl	c9c8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2246:	2300      	movs	r3, #0
    2248:	220a      	movs	r2, #10
    224a:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    224e:	486c      	ldr	r0, [pc, #432]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2250:	f00a fdce 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2254:	2103      	movs	r1, #3
    2256:	486e      	ldr	r0, [pc, #440]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    2258:	f00a fbb6 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    225c:	4868      	ldr	r0, [pc, #416]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    225e:	f00a fdb7 	bl	cdd0 <Print::println()>
    2262:	2111      	movs	r1, #17
    2264:	486c      	ldr	r0, [pc, #432]	; (2418 <LEDDebug(LEDStruct&)+0x234>)
    2266:	f00a fbaf 	bl	c9c8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    226a:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    226e:	4864      	ldr	r0, [pc, #400]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2270:	f00a fdfe 	bl	ce70 <Print::print(long)>
    2274:	2103      	movs	r1, #3
    2276:	4866      	ldr	r0, [pc, #408]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    2278:	f00a fba6 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    227c:	4860      	ldr	r0, [pc, #384]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    227e:	f00a fda7 	bl	cdd0 <Print::println()>
    2282:	2114      	movs	r1, #20
    2284:	4865      	ldr	r0, [pc, #404]	; (241c <LEDDebug(LEDStruct&)+0x238>)
    2286:	f00a fb9f 	bl	c9c8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    228a:	2300      	movs	r3, #0
    228c:	220a      	movs	r2, #10
    228e:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    2292:	485b      	ldr	r0, [pc, #364]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2294:	f00a fdac 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2298:	2103      	movs	r1, #3
    229a:	485d      	ldr	r0, [pc, #372]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    229c:	f00a fb94 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22a0:	4857      	ldr	r0, [pc, #348]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22a2:	f00a fd95 	bl	cdd0 <Print::println()>
    22a6:	2115      	movs	r1, #21
    22a8:	485d      	ldr	r0, [pc, #372]	; (2420 <LEDDebug(LEDStruct&)+0x23c>)
    22aa:	f00a fb8d 	bl	c9c8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ae:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22b2:	4853      	ldr	r0, [pc, #332]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22b4:	f00a fddc 	bl	ce70 <Print::print(long)>
    22b8:	2103      	movs	r1, #3
    22ba:	4855      	ldr	r0, [pc, #340]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    22bc:	f00a fb84 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22c0:	484f      	ldr	r0, [pc, #316]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22c2:	f00a fd85 	bl	cdd0 <Print::println()>
    22c6:	2111      	movs	r1, #17
    22c8:	4856      	ldr	r0, [pc, #344]	; (2424 <LEDDebug(LEDStruct&)+0x240>)
    22ca:	f00a fb7d 	bl	c9c8 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22ce:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    22d2:	484b      	ldr	r0, [pc, #300]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22d4:	f00a fdcc 	bl	ce70 <Print::print(long)>
    22d8:	2103      	movs	r1, #3
    22da:	484d      	ldr	r0, [pc, #308]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    22dc:	f00a fb74 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22e0:	4847      	ldr	r0, [pc, #284]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22e2:	f00a fd75 	bl	cdd0 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    22e6:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    22ea:	bb5b      	cbnz	r3, 2344 <LEDDebug(LEDStruct&)+0x160>
    22ec:	2122      	movs	r1, #34	; 0x22
    22ee:	4845      	ldr	r0, [pc, #276]	; (2404 <LEDDebug(LEDStruct&)+0x220>)
    22f0:	f00a fb6a 	bl	c9c8 <usb_serial_write>
    22f4:	4842      	ldr	r0, [pc, #264]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    22f6:	f00a fd6b 	bl	cdd0 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    22fa:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    22fe:	2b1d      	cmp	r3, #29
    2300:	f200 84ec 	bhi.w	2cdc <LEDDebug(LEDStruct&)+0xaf8>
    2304:	e8df f013 	tbh	[pc, r3, lsl #1]
    2308:	04ea00a0 	.word	0x04ea00a0
    230c:	04ea04ea 	.word	0x04ea04ea
    2310:	04ea04ea 	.word	0x04ea04ea
    2314:	04ea0113 	.word	0x04ea0113
    2318:	04ea04ea 	.word	0x04ea04ea
    231c:	04ea014c 	.word	0x04ea014c
    2320:	04ea04ea 	.word	0x04ea04ea
    2324:	04ea04ea 	.word	0x04ea04ea
    2328:	0188015a 	.word	0x0188015a
    232c:	01670165 	.word	0x01670165
    2330:	0248018a 	.word	0x0248018a
    2334:	035202f6 	.word	0x035202f6
    2338:	04ea03d2 	.word	0x04ea03d2
    233c:	04670411 	.word	0x04670411
    2340:	00280491 	.word	0x00280491
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2344:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    2348:	f7ff fc3e 	bl	1bc8 <print_palette(unsigned char)>
    234c:	e7ce      	b.n	22ec <LEDDebug(LEDStruct&)+0x108>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    234e:	4936      	ldr	r1, [pc, #216]	; (2428 <LEDDebug(LEDStruct&)+0x244>)
    2350:	482b      	ldr	r0, [pc, #172]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2352:	f7fe faa3 	bl	89c <Print::println(char const*)>
    2356:	e760      	b.n	221a <LEDDebug(LEDStruct&)+0x36>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2358:	4934      	ldr	r1, [pc, #208]	; (242c <LEDDebug(LEDStruct&)+0x248>)
    235a:	4829      	ldr	r0, [pc, #164]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    235c:	f7fe fa9e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2360:	4933      	ldr	r1, [pc, #204]	; (2430 <LEDDebug(LEDStruct&)+0x24c>)
    2362:	4827      	ldr	r0, [pc, #156]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2364:	f7fe fa8c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2368:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    236c:	4824      	ldr	r0, [pc, #144]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    236e:	f00a fd7f 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2372:	4927      	ldr	r1, [pc, #156]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    2374:	4822      	ldr	r0, [pc, #136]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2376:	f7fe fa91 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    237a:	492e      	ldr	r1, [pc, #184]	; (2434 <LEDDebug(LEDStruct&)+0x250>)
    237c:	4820      	ldr	r0, [pc, #128]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    237e:	f7fe fa7f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2382:	2300      	movs	r3, #0
    2384:	220a      	movs	r2, #10
    2386:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    238a:	481d      	ldr	r0, [pc, #116]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    238c:	f00a fd30 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2390:	491f      	ldr	r1, [pc, #124]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    2392:	481b      	ldr	r0, [pc, #108]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    2394:	f7fe fa82 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2398:	4927      	ldr	r1, [pc, #156]	; (2438 <LEDDebug(LEDStruct&)+0x254>)
    239a:	4819      	ldr	r0, [pc, #100]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    239c:	f7fe fa70 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23a0:	2300      	movs	r3, #0
    23a2:	220a      	movs	r2, #10
    23a4:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    23a8:	4815      	ldr	r0, [pc, #84]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23aa:	f00a fd21 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    23ae:	4918      	ldr	r1, [pc, #96]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    23b0:	4813      	ldr	r0, [pc, #76]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23b2:	f7fe fa73 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23b6:	4921      	ldr	r1, [pc, #132]	; (243c <LEDDebug(LEDStruct&)+0x258>)
    23b8:	4811      	ldr	r0, [pc, #68]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23ba:	f7fe fa61 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23be:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    23c2:	480f      	ldr	r0, [pc, #60]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23c4:	f00a fd54 	bl	ce70 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    23c8:	4911      	ldr	r1, [pc, #68]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    23ca:	480d      	ldr	r0, [pc, #52]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23cc:	f7fe fa66 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23d0:	491b      	ldr	r1, [pc, #108]	; (2440 <LEDDebug(LEDStruct&)+0x25c>)
    23d2:	480b      	ldr	r0, [pc, #44]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23d4:	f7fe fa54 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    23d8:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    23dc:	4808      	ldr	r0, [pc, #32]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23de:	f00a fd47 	bl	ce70 <Print::print(long)>
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    23e2:	490b      	ldr	r1, [pc, #44]	; (2410 <LEDDebug(LEDStruct&)+0x22c>)
    23e4:	4806      	ldr	r0, [pc, #24]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
    23e6:	f7fe fa59 	bl	89c <Print::println(char const*)>
    23ea:	2123      	movs	r1, #35	; 0x23
    23ec:	4815      	ldr	r0, [pc, #84]	; (2444 <LEDDebug(LEDStruct&)+0x260>)
    23ee:	f00a faeb 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    23f2:	4803      	ldr	r0, [pc, #12]	; (2400 <LEDDebug(LEDStruct&)+0x21c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    23f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    23f8:	f00a bcea 	b.w	cdd0 <Print::println()>
    23fc:	0000eea4 	.word	0x0000eea4
    2400:	1fff878c 	.word	0x1fff878c
    2404:	0000ed0c 	.word	0x0000ed0c
    2408:	0000ed9c 	.word	0x0000ed9c
    240c:	1fff8723 	.word	0x1fff8723
    2410:	0000edb0 	.word	0x0000edb0
    2414:	0000edb4 	.word	0x0000edb4
    2418:	0000edc8 	.word	0x0000edc8
    241c:	0000eddc 	.word	0x0000eddc
    2420:	0000edf4 	.word	0x0000edf4
    2424:	0000ee0c 	.word	0x0000ee0c
    2428:	0000ed30 	.word	0x0000ed30
    242c:	0000f6e4 	.word	0x0000f6e4
    2430:	0000ee68 	.word	0x0000ee68
    2434:	0000f708 	.word	0x0000f708
    2438:	0000f720 	.word	0x0000f720
    243c:	0000f73c 	.word	0x0000f73c
    2440:	0000f758 	.word	0x0000f758
    2444:	0000f794 	.word	0x0000f794
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    2448:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    244c:	48b4      	ldr	r0, [pc, #720]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF){ Serial.println("============JUGGLE HALF==========="); }
    244e:	2b04      	cmp	r3, #4
    2450:	bf0c      	ite	eq
    2452:	49b4      	ldreq	r1, [pc, #720]	; (2724 <LEDDebug(LEDStruct&)+0x540>)
			else							 { Serial.println("==============JUGGLE=============="); } // 34 characters
    2454:	49b4      	ldrne	r1, [pc, #720]	; (2728 <LEDDebug(LEDStruct&)+0x544>)
    2456:	f7fe fa21 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    245a:	49b4      	ldr	r1, [pc, #720]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    245c:	48b0      	ldr	r0, [pc, #704]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    245e:	f7fe fa0f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2462:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2466:	48ae      	ldr	r0, [pc, #696]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2468:	f00a fd02 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    246c:	49b0      	ldr	r1, [pc, #704]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    246e:	48ac      	ldr	r0, [pc, #688]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2470:	f7fe fa14 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2474:	49af      	ldr	r1, [pc, #700]	; (2734 <LEDDebug(LEDStruct&)+0x550>)
    2476:	48aa      	ldr	r0, [pc, #680]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2478:	f7fe fa02 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    247c:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    2480:	48a7      	ldr	r0, [pc, #668]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2482:	f00a fcf5 	bl	ce70 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2486:	49aa      	ldr	r1, [pc, #680]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2488:	48a5      	ldr	r0, [pc, #660]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    248a:	f7fe fa07 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    248e:	49aa      	ldr	r1, [pc, #680]	; (2738 <LEDDebug(LEDStruct&)+0x554>)
    2490:	48a3      	ldr	r0, [pc, #652]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2492:	f7fe f9f5 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2496:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    249a:	48a1      	ldr	r0, [pc, #644]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    249c:	f00a fce8 	bl	ce70 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    24a0:	49a3      	ldr	r1, [pc, #652]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    24a2:	489f      	ldr	r0, [pc, #636]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24a4:	f7fe f9fa 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24a8:	49a4      	ldr	r1, [pc, #656]	; (273c <LEDDebug(LEDStruct&)+0x558>)
    24aa:	489d      	ldr	r0, [pc, #628]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24ac:	f7fe f9e8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24b0:	2300      	movs	r3, #0
    24b2:	220a      	movs	r2, #10
    24b4:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    24b8:	4899      	ldr	r0, [pc, #612]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24ba:	f00a fc99 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    24be:	499c      	ldr	r1, [pc, #624]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    24c0:	4897      	ldr	r0, [pc, #604]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24c2:	f7fe f9eb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24c6:	499e      	ldr	r1, [pc, #632]	; (2740 <LEDDebug(LEDStruct&)+0x55c>)
    24c8:	4895      	ldr	r0, [pc, #596]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24ca:	f7fe f9d9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ce:	2300      	movs	r3, #0
    24d0:	220a      	movs	r2, #10
    24d2:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    24d6:	4892      	ldr	r0, [pc, #584]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24d8:	f00a fc8a 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    24dc:	4994      	ldr	r1, [pc, #592]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    24de:	4890      	ldr	r0, [pc, #576]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24e0:	f7fe f9dc 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24e4:	4997      	ldr	r1, [pc, #604]	; (2744 <LEDDebug(LEDStruct&)+0x560>)
    24e6:	488e      	ldr	r0, [pc, #568]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24e8:	f7fe f9ca 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    24ec:	2300      	movs	r3, #0
    24ee:	220a      	movs	r2, #10
    24f0:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    24f4:	488a      	ldr	r0, [pc, #552]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24f6:	f00a fc7b 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    24fa:	498d      	ldr	r1, [pc, #564]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    24fc:	4888      	ldr	r0, [pc, #544]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    24fe:	f7fe f9cd 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2502:	4991      	ldr	r1, [pc, #580]	; (2748 <LEDDebug(LEDStruct&)+0x564>)
    2504:	4886      	ldr	r0, [pc, #536]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2506:	f7fe f9bb 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    250a:	2300      	movs	r3, #0
    250c:	220a      	movs	r2, #10
    250e:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2512:	4883      	ldr	r0, [pc, #524]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2514:	f00a fc6c 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2518:	4985      	ldr	r1, [pc, #532]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    251a:	4881      	ldr	r0, [pc, #516]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    251c:	f7fe f9be 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2520:	498a      	ldr	r1, [pc, #552]	; (274c <LEDDebug(LEDStruct&)+0x568>)
    2522:	487f      	ldr	r0, [pc, #508]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2524:	f7fe f9ac 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2528:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    252c:	e756      	b.n	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    252e:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
    2532:	2b00      	cmp	r3, #0
    2534:	f000 8474 	beq.w	2e20 <LEDDebug(LEDStruct&)+0xc3c>
			else					 { Serial.println("=======RAINBOW MARCH SPLIT========"); }
    2538:	4985      	ldr	r1, [pc, #532]	; (2750 <LEDDebug(LEDStruct&)+0x56c>)
    253a:	4879      	ldr	r0, [pc, #484]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    253c:	f7fe f9ae 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2540:	497a      	ldr	r1, [pc, #488]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    2542:	4877      	ldr	r0, [pc, #476]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2544:	f7fe f99c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2548:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    254c:	4874      	ldr	r0, [pc, #464]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    254e:	f00a fc8f 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2552:	4977      	ldr	r1, [pc, #476]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2554:	4872      	ldr	r0, [pc, #456]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2556:	f7fe f9a1 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    255a:	497e      	ldr	r1, [pc, #504]	; (2754 <LEDDebug(LEDStruct&)+0x570>)
    255c:	4870      	ldr	r0, [pc, #448]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    255e:	f7fe f98f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2562:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    2566:	486e      	ldr	r0, [pc, #440]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2568:	f00a fc82 	bl	ce70 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    256c:	4970      	ldr	r1, [pc, #448]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    256e:	486c      	ldr	r0, [pc, #432]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2570:	f7fe f994 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2574:	4978      	ldr	r1, [pc, #480]	; (2758 <LEDDebug(LEDStruct&)+0x574>)
    2576:	486a      	ldr	r0, [pc, #424]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2578:	f7fe f982 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    257c:	2300      	movs	r3, #0
    257e:	220a      	movs	r2, #10
    2580:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2584:	4866      	ldr	r0, [pc, #408]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2586:	f00a fc33 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    258a:	4969      	ldr	r1, [pc, #420]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    258c:	4864      	ldr	r0, [pc, #400]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    258e:	f7fe f985 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2592:	4972      	ldr	r1, [pc, #456]	; (275c <LEDDebug(LEDStruct&)+0x578>)
    2594:	4862      	ldr	r0, [pc, #392]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2596:	f7fe f973 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    259a:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    259e:	e031      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
    25a0:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25a4:	3b0a      	subs	r3, #10
    25a6:	2b05      	cmp	r3, #5
    25a8:	f200 83b6 	bhi.w	2d18 <LEDDebug(LEDStruct&)+0xb34>
    25ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    25b0:	03b0047b 	.word	0x03b0047b
    25b4:	04710476 	.word	0x04710476
    25b8:	0467046c 	.word	0x0467046c
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    25bc:	4968      	ldr	r1, [pc, #416]	; (2760 <LEDDebug(LEDStruct&)+0x57c>)
    25be:	4858      	ldr	r0, [pc, #352]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25c0:	f7fe f96c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c4:	4959      	ldr	r1, [pc, #356]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    25c6:	4856      	ldr	r0, [pc, #344]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25c8:	f7fe f95a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25cc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25d0:	e704      	b.n	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    25d2:	4964      	ldr	r1, [pc, #400]	; (2764 <LEDDebug(LEDStruct&)+0x580>)
    25d4:	e7f3      	b.n	25be <LEDDebug(LEDStruct&)+0x3da>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    25d6:	4964      	ldr	r1, [pc, #400]	; (2768 <LEDDebug(LEDStruct&)+0x584>)
    25d8:	4851      	ldr	r0, [pc, #324]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25da:	f7fe f95f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25de:	4953      	ldr	r1, [pc, #332]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    25e0:	484f      	ldr	r0, [pc, #316]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25e2:	f7fe f94d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25e6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25ea:	484d      	ldr	r0, [pc, #308]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25ec:	f00a fc40 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25f0:	494f      	ldr	r1, [pc, #316]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    25f2:	484b      	ldr	r0, [pc, #300]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25f4:	f7fe f952 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25f8:	495c      	ldr	r1, [pc, #368]	; (276c <LEDDebug(LEDStruct&)+0x588>)
    25fa:	4849      	ldr	r0, [pc, #292]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    25fc:	f7fe f940 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2600:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    2604:	4846      	ldr	r0, [pc, #280]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2606:	2300      	movs	r3, #0
    2608:	220a      	movs	r2, #10
    260a:	f00a fbf1 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
				Serial.print("|| (f) torch_diff:\t");
				Serial.print(leds.torch_diff);
				Serial.println("\t||");
    260e:	4948      	ldr	r1, [pc, #288]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2610:	4843      	ldr	r0, [pc, #268]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2612:	f7fe f943 	bl	89c <Print::println(char const*)>
    2616:	e6e8      	b.n	23ea <LEDDebug(LEDStruct&)+0x206>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PRIDE:
			Serial.println("==============PRIDE===============");
    2618:	4955      	ldr	r1, [pc, #340]	; (2770 <LEDDebug(LEDStruct&)+0x58c>)
    261a:	e7d0      	b.n	25be <LEDDebug(LEDStruct&)+0x3da>
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    261c:	4955      	ldr	r1, [pc, #340]	; (2774 <LEDDebug(LEDStruct&)+0x590>)
    261e:	4840      	ldr	r0, [pc, #256]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2620:	f7fe f93c 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2624:	4941      	ldr	r1, [pc, #260]	; (272c <LEDDebug(LEDStruct&)+0x548>)
    2626:	483e      	ldr	r0, [pc, #248]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2628:	f7fe f92a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    262c:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2630:	483b      	ldr	r0, [pc, #236]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2632:	f00a fc1d 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2636:	493e      	ldr	r1, [pc, #248]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2638:	4839      	ldr	r0, [pc, #228]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    263a:	f7fe f92f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    263e:	494e      	ldr	r1, [pc, #312]	; (2778 <LEDDebug(LEDStruct&)+0x594>)
    2640:	4837      	ldr	r0, [pc, #220]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2642:	f7fe f91d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2646:	2300      	movs	r3, #0
    2648:	220a      	movs	r2, #10
    264a:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    264e:	4834      	ldr	r0, [pc, #208]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2650:	f00a fbce 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2654:	4936      	ldr	r1, [pc, #216]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2656:	4832      	ldr	r0, [pc, #200]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2658:	f7fe f920 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    265c:	4947      	ldr	r1, [pc, #284]	; (277c <LEDDebug(LEDStruct&)+0x598>)
    265e:	4830      	ldr	r0, [pc, #192]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2660:	f7fe f90e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2664:	2300      	movs	r3, #0
    2666:	220a      	movs	r2, #10
    2668:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    266c:	482c      	ldr	r0, [pc, #176]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    266e:	f00a fbbf 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2672:	492f      	ldr	r1, [pc, #188]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2674:	482a      	ldr	r0, [pc, #168]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2676:	f7fe f911 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    267a:	4941      	ldr	r1, [pc, #260]	; (2780 <LEDDebug(LEDStruct&)+0x59c>)
    267c:	4828      	ldr	r0, [pc, #160]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    267e:	f7fe f8ff 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2682:	2300      	movs	r3, #0
    2684:	220a      	movs	r2, #10
    2686:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    268a:	4825      	ldr	r0, [pc, #148]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    268c:	f00a fbb0 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2690:	4927      	ldr	r1, [pc, #156]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    2692:	4823      	ldr	r0, [pc, #140]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2694:	f7fe f902 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2698:	493a      	ldr	r1, [pc, #232]	; (2784 <LEDDebug(LEDStruct&)+0x5a0>)
    269a:	4821      	ldr	r0, [pc, #132]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    269c:	f7fe f8f0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26a0:	2300      	movs	r3, #0
    26a2:	220a      	movs	r2, #10
    26a4:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    26a8:	481d      	ldr	r0, [pc, #116]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26aa:	f00a fba1 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    26ae:	4920      	ldr	r1, [pc, #128]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    26b0:	481b      	ldr	r0, [pc, #108]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26b2:	f7fe f8f3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26b6:	4934      	ldr	r1, [pc, #208]	; (2788 <LEDDebug(LEDStruct&)+0x5a4>)
    26b8:	4819      	ldr	r0, [pc, #100]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26ba:	f7fe f8e1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26be:	2300      	movs	r3, #0
    26c0:	220a      	movs	r2, #10
    26c2:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    26c6:	4816      	ldr	r0, [pc, #88]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26c8:	f00a fb92 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    26cc:	4918      	ldr	r1, [pc, #96]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    26ce:	4814      	ldr	r0, [pc, #80]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26d0:	f7fe f8e4 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26d4:	492d      	ldr	r1, [pc, #180]	; (278c <LEDDebug(LEDStruct&)+0x5a8>)
    26d6:	4812      	ldr	r0, [pc, #72]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26d8:	f7fe f8d2 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26dc:	2300      	movs	r3, #0
    26de:	220a      	movs	r2, #10
    26e0:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    26e4:	480e      	ldr	r0, [pc, #56]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26e6:	f00a fb83 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    26ea:	4911      	ldr	r1, [pc, #68]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    26ec:	480c      	ldr	r0, [pc, #48]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26ee:	f7fe f8d5 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26f2:	4927      	ldr	r1, [pc, #156]	; (2790 <LEDDebug(LEDStruct&)+0x5ac>)
    26f4:	480a      	ldr	r0, [pc, #40]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    26f6:	f7fe f8c3 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26fa:	2300      	movs	r3, #0
    26fc:	220a      	movs	r2, #10
    26fe:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2702:	4807      	ldr	r0, [pc, #28]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2704:	f00a fb74 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    2708:	4909      	ldr	r1, [pc, #36]	; (2730 <LEDDebug(LEDStruct&)+0x54c>)
    270a:	4805      	ldr	r0, [pc, #20]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    270c:	f7fe f8c6 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2710:	4920      	ldr	r1, [pc, #128]	; (2794 <LEDDebug(LEDStruct&)+0x5b0>)
    2712:	4803      	ldr	r0, [pc, #12]	; (2720 <LEDDebug(LEDStruct&)+0x53c>)
    2714:	f7fe f8b4 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2718:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    271c:	e772      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
    271e:	bf00      	nop
    2720:	1fff878c 	.word	0x1fff878c
    2724:	0000ee20 	.word	0x0000ee20
    2728:	0000ee44 	.word	0x0000ee44
    272c:	0000ee68 	.word	0x0000ee68
    2730:	0000edb0 	.word	0x0000edb0
    2734:	0000ee80 	.word	0x0000ee80
    2738:	0000ee94 	.word	0x0000ee94
    273c:	0000eea8 	.word	0x0000eea8
    2740:	0000eebc 	.word	0x0000eebc
    2744:	0000eecc 	.word	0x0000eecc
    2748:	0000eedc 	.word	0x0000eedc
    274c:	0000eeec 	.word	0x0000eeec
    2750:	0000ef28 	.word	0x0000ef28
    2754:	0000ef4c 	.word	0x0000ef4c
    2758:	0000ef5c 	.word	0x0000ef5c
    275c:	0000ef6c 	.word	0x0000ef6c
    2760:	0000f0c8 	.word	0x0000f0c8
    2764:	0000f110 	.word	0x0000f110
    2768:	0000f134 	.word	0x0000f134
    276c:	0000f158 	.word	0x0000f158
    2770:	0000f0ec 	.word	0x0000f0ec
    2774:	0000f240 	.word	0x0000f240
    2778:	0000f264 	.word	0x0000f264
    277c:	0000f278 	.word	0x0000f278
    2780:	0000f28c 	.word	0x0000f28c
    2784:	0000f2a0 	.word	0x0000f2a0
    2788:	0000f2b4 	.word	0x0000f2b4
    278c:	0000f2c8 	.word	0x0000f2c8
    2790:	0000f2dc 	.word	0x0000f2dc
    2794:	0000f2f0 	.word	0x0000f2f0
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2798:	49a7      	ldr	r1, [pc, #668]	; (2a38 <LEDDebug(LEDStruct&)+0x854>)
    279a:	48a8      	ldr	r0, [pc, #672]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    279c:	f7fe f87e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27a0:	49a7      	ldr	r1, [pc, #668]	; (2a40 <LEDDebug(LEDStruct&)+0x85c>)
    27a2:	48a6      	ldr	r0, [pc, #664]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27a4:	f7fe f86c 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    27a8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    27ac:	48a3      	ldr	r0, [pc, #652]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27ae:	f00a fb5f 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    27b2:	49a4      	ldr	r1, [pc, #656]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    27b4:	48a1      	ldr	r0, [pc, #644]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27b6:	f7fe f871 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ba:	49a3      	ldr	r1, [pc, #652]	; (2a48 <LEDDebug(LEDStruct&)+0x864>)
    27bc:	489f      	ldr	r0, [pc, #636]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27be:	f7fe f85f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27c2:	2300      	movs	r3, #0
    27c4:	220a      	movs	r2, #10
    27c6:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    27ca:	489c      	ldr	r0, [pc, #624]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27cc:	f00a fb10 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    27d0:	499c      	ldr	r1, [pc, #624]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    27d2:	489a      	ldr	r0, [pc, #616]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27d4:	f7fe f862 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27d8:	499c      	ldr	r1, [pc, #624]	; (2a4c <LEDDebug(LEDStruct&)+0x868>)
    27da:	4898      	ldr	r0, [pc, #608]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27dc:	f7fe f850 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27e0:	2300      	movs	r3, #0
    27e2:	220a      	movs	r2, #10
    27e4:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    27e8:	4894      	ldr	r0, [pc, #592]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27ea:	f00a fb01 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    27ee:	4995      	ldr	r1, [pc, #596]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    27f0:	4892      	ldr	r0, [pc, #584]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27f2:	f7fe f853 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27f6:	4996      	ldr	r1, [pc, #600]	; (2a50 <LEDDebug(LEDStruct&)+0x86c>)
    27f8:	4890      	ldr	r0, [pc, #576]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    27fa:	f7fe f841 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27fe:	2300      	movs	r3, #0
    2800:	220a      	movs	r2, #10
    2802:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2806:	488d      	ldr	r0, [pc, #564]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2808:	f00a faf2 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    280c:	498d      	ldr	r1, [pc, #564]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    280e:	488b      	ldr	r0, [pc, #556]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2810:	f7fe f844 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2814:	498f      	ldr	r1, [pc, #572]	; (2a54 <LEDDebug(LEDStruct&)+0x870>)
    2816:	4889      	ldr	r0, [pc, #548]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2818:	f7fe f832 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    281c:	2300      	movs	r3, #0
    281e:	220a      	movs	r2, #10
    2820:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    2824:	4885      	ldr	r0, [pc, #532]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2826:	f00a fae3 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    282a:	4986      	ldr	r1, [pc, #536]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    282c:	4883      	ldr	r0, [pc, #524]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    282e:	f7fe f835 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2832:	4989      	ldr	r1, [pc, #548]	; (2a58 <LEDDebug(LEDStruct&)+0x874>)
    2834:	4881      	ldr	r0, [pc, #516]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2836:	f7fe f823 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    283a:	2300      	movs	r3, #0
    283c:	220a      	movs	r2, #10
    283e:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    2842:	487e      	ldr	r0, [pc, #504]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2844:	f00a fad4 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    2848:	497e      	ldr	r1, [pc, #504]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    284a:	487c      	ldr	r0, [pc, #496]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    284c:	f7fe f826 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2850:	4982      	ldr	r1, [pc, #520]	; (2a5c <LEDDebug(LEDStruct&)+0x878>)
    2852:	487a      	ldr	r0, [pc, #488]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2854:	f7fe f814 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2858:	2300      	movs	r3, #0
    285a:	220a      	movs	r2, #10
    285c:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    2860:	4876      	ldr	r0, [pc, #472]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2862:	f00a fac5 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2866:	4977      	ldr	r1, [pc, #476]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2868:	4874      	ldr	r0, [pc, #464]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    286a:	f7fe f817 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    286e:	497c      	ldr	r1, [pc, #496]	; (2a60 <LEDDebug(LEDStruct&)+0x87c>)
    2870:	4872      	ldr	r0, [pc, #456]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2872:	f7fe f805 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2876:	2300      	movs	r3, #0
    2878:	220a      	movs	r2, #10
    287a:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    287e:	486f      	ldr	r0, [pc, #444]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2880:	f00a fab6 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    2884:	496f      	ldr	r1, [pc, #444]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2886:	486d      	ldr	r0, [pc, #436]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2888:	f7fe f808 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    288c:	4975      	ldr	r1, [pc, #468]	; (2a64 <LEDDebug(LEDStruct&)+0x880>)
    288e:	486b      	ldr	r0, [pc, #428]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2890:	f7fd fff6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2894:	2300      	movs	r3, #0
    2896:	220a      	movs	r2, #10
    2898:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    289c:	4867      	ldr	r0, [pc, #412]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    289e:	f00a faa7 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    28a2:	4968      	ldr	r1, [pc, #416]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    28a4:	4865      	ldr	r0, [pc, #404]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28a6:	f7fd fff9 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28aa:	496f      	ldr	r1, [pc, #444]	; (2a68 <LEDDebug(LEDStruct&)+0x884>)
    28ac:	4863      	ldr	r0, [pc, #396]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28ae:	f7fd ffe7 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28b2:	2300      	movs	r3, #0
    28b4:	220a      	movs	r2, #10
    28b6:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    28ba:	4860      	ldr	r0, [pc, #384]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28bc:	f00a fa98 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    28c0:	4960      	ldr	r1, [pc, #384]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    28c2:	485e      	ldr	r0, [pc, #376]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28c4:	f7fd ffea 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28c8:	4968      	ldr	r1, [pc, #416]	; (2a6c <LEDDebug(LEDStruct&)+0x888>)
    28ca:	485c      	ldr	r0, [pc, #368]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28cc:	f7fd ffd8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28d0:	2300      	movs	r3, #0
    28d2:	220a      	movs	r2, #10
    28d4:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    28d8:	4858      	ldr	r0, [pc, #352]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28da:	f00a fa89 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    28de:	4959      	ldr	r1, [pc, #356]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    28e0:	4856      	ldr	r0, [pc, #344]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28e2:	f7fd ffdb 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28e6:	4962      	ldr	r1, [pc, #392]	; (2a70 <LEDDebug(LEDStruct&)+0x88c>)
    28e8:	4854      	ldr	r0, [pc, #336]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28ea:	f7fd ffc9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28ee:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    28f2:	e687      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    28f4:	495f      	ldr	r1, [pc, #380]	; (2a74 <LEDDebug(LEDStruct&)+0x890>)
    28f6:	4851      	ldr	r0, [pc, #324]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    28f8:	f7fd ffd0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28fc:	495e      	ldr	r1, [pc, #376]	; (2a78 <LEDDebug(LEDStruct&)+0x894>)
    28fe:	484f      	ldr	r0, [pc, #316]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2900:	f7fd ffbe 	bl	880 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2904:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2908:	2b01      	cmp	r3, #1
    290a:	f000 82ae 	beq.w	2e6a <LEDDebug(LEDStruct&)+0xc86>
    290e:	f0c0 82d4 	bcc.w	2eba <LEDDebug(LEDStruct&)+0xcd6>
    2912:	2b02      	cmp	r3, #2
    2914:	d107      	bne.n	2926 <LEDDebug(LEDStruct&)+0x742>
    2916:	4959      	ldr	r1, [pc, #356]	; (2a7c <LEDDebug(LEDStruct&)+0x898>)
    2918:	4848      	ldr	r0, [pc, #288]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    291a:	f7fd ffb1 	bl	880 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    291e:	4949      	ldr	r1, [pc, #292]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2920:	4846      	ldr	r0, [pc, #280]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2922:	f7fd ffbb 	bl	89c <Print::println(char const*)>
    2926:	4956      	ldr	r1, [pc, #344]	; (2a80 <LEDDebug(LEDStruct&)+0x89c>)
    2928:	4844      	ldr	r0, [pc, #272]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    292a:	f7fd ffa9 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    292e:	2300      	movs	r3, #0
    2930:	220a      	movs	r2, #10
    2932:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2936:	4841      	ldr	r0, [pc, #260]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2938:	f00a fa5a 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    293c:	4941      	ldr	r1, [pc, #260]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    293e:	483f      	ldr	r0, [pc, #252]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2940:	f7fd ffac 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2944:	494f      	ldr	r1, [pc, #316]	; (2a84 <LEDDebug(LEDStruct&)+0x8a0>)
    2946:	483d      	ldr	r0, [pc, #244]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2948:	f7fd ff9a 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    294c:	2300      	movs	r3, #0
    294e:	220a      	movs	r2, #10
    2950:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2954:	4839      	ldr	r0, [pc, #228]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2956:	f00a fa4b 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    295a:	493a      	ldr	r1, [pc, #232]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    295c:	4837      	ldr	r0, [pc, #220]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    295e:	f7fd ff9d 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2962:	4949      	ldr	r1, [pc, #292]	; (2a88 <LEDDebug(LEDStruct&)+0x8a4>)
    2964:	4835      	ldr	r0, [pc, #212]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2966:	f7fd ff8b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    296a:	2300      	movs	r3, #0
    296c:	220a      	movs	r2, #10
    296e:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2972:	4832      	ldr	r0, [pc, #200]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2974:	f00a fa3c 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2978:	4932      	ldr	r1, [pc, #200]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    297a:	4830      	ldr	r0, [pc, #192]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    297c:	f7fd ff8e 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2980:	4942      	ldr	r1, [pc, #264]	; (2a8c <LEDDebug(LEDStruct&)+0x8a8>)
    2982:	482e      	ldr	r0, [pc, #184]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2984:	f7fd ff7c 	bl	880 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2988:	2300      	movs	r3, #0
    298a:	220a      	movs	r2, #10
    298c:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2990:	482a      	ldr	r0, [pc, #168]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2992:	f00a fa2d 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2996:	492b      	ldr	r1, [pc, #172]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2998:	4828      	ldr	r0, [pc, #160]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    299a:	f7fd ff7f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    299e:	493c      	ldr	r1, [pc, #240]	; (2a90 <LEDDebug(LEDStruct&)+0x8ac>)
    29a0:	4826      	ldr	r0, [pc, #152]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29a2:	f7fd ff6d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29a6:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    29aa:	e517      	b.n	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    29ac:	4939      	ldr	r1, [pc, #228]	; (2a94 <LEDDebug(LEDStruct&)+0x8b0>)
    29ae:	4823      	ldr	r0, [pc, #140]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29b0:	f7fd ff74 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29b4:	4938      	ldr	r1, [pc, #224]	; (2a98 <LEDDebug(LEDStruct&)+0x8b4>)
    29b6:	4821      	ldr	r0, [pc, #132]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29b8:	f7fd ff62 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    29bc:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    29c0:	481e      	ldr	r0, [pc, #120]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29c2:	f00a fa55 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    29c6:	491f      	ldr	r1, [pc, #124]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    29c8:	481c      	ldr	r0, [pc, #112]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29ca:	f7fd ff67 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29ce:	4933      	ldr	r1, [pc, #204]	; (2a9c <LEDDebug(LEDStruct&)+0x8b8>)
    29d0:	481a      	ldr	r0, [pc, #104]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29d2:	f7fd ff55 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29d6:	2300      	movs	r3, #0
    29d8:	220a      	movs	r2, #10
    29da:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    29de:	4817      	ldr	r0, [pc, #92]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29e0:	f00a fa06 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    29e4:	4917      	ldr	r1, [pc, #92]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    29e6:	4815      	ldr	r0, [pc, #84]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29e8:	f7fd ff58 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29ec:	492c      	ldr	r1, [pc, #176]	; (2aa0 <LEDDebug(LEDStruct&)+0x8bc>)
    29ee:	4813      	ldr	r0, [pc, #76]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29f0:	f7fd ff46 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    29f4:	2300      	movs	r3, #0
    29f6:	220a      	movs	r2, #10
    29f8:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    29fc:	480f      	ldr	r0, [pc, #60]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    29fe:	f00a f9f7 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2a02:	4910      	ldr	r1, [pc, #64]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2a04:	480d      	ldr	r0, [pc, #52]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2a06:	f7fd ff49 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a0a:	4926      	ldr	r1, [pc, #152]	; (2aa4 <LEDDebug(LEDStruct&)+0x8c0>)
    2a0c:	480b      	ldr	r0, [pc, #44]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2a0e:	f7fd ff37 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a12:	2300      	movs	r3, #0
    2a14:	220a      	movs	r2, #10
    2a16:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2a1a:	4808      	ldr	r0, [pc, #32]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2a1c:	f00a f9e8 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2a20:	4908      	ldr	r1, [pc, #32]	; (2a44 <LEDDebug(LEDStruct&)+0x860>)
    2a22:	4806      	ldr	r0, [pc, #24]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2a24:	f7fd ff3a 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a28:	491f      	ldr	r1, [pc, #124]	; (2aa8 <LEDDebug(LEDStruct&)+0x8c4>)
    2a2a:	4804      	ldr	r0, [pc, #16]	; (2a3c <LEDDebug(LEDStruct&)+0x858>)
    2a2c:	f7fd ff28 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a30:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2a34:	e5e6      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
    2a36:	bf00      	nop
    2a38:	0000f304 	.word	0x0000f304
    2a3c:	1fff878c 	.word	0x1fff878c
    2a40:	0000ee68 	.word	0x0000ee68
    2a44:	0000edb0 	.word	0x0000edb0
    2a48:	0000f328 	.word	0x0000f328
    2a4c:	0000f33c 	.word	0x0000f33c
    2a50:	0000f350 	.word	0x0000f350
    2a54:	0000f364 	.word	0x0000f364
    2a58:	0000f378 	.word	0x0000f378
    2a5c:	0000f38c 	.word	0x0000f38c
    2a60:	0000f3a0 	.word	0x0000f3a0
    2a64:	0000f3b4 	.word	0x0000f3b4
    2a68:	0000f3c8 	.word	0x0000f3c8
    2a6c:	0000f3dc 	.word	0x0000f3dc
    2a70:	0000f3f0 	.word	0x0000f3f0
    2a74:	0000f170 	.word	0x0000f170
    2a78:	0000f194 	.word	0x0000f194
    2a7c:	0000f1a8 	.word	0x0000f1a8
    2a80:	0000f1c4 	.word	0x0000f1c4
    2a84:	0000f1dc 	.word	0x0000f1dc
    2a88:	0000f1f4 	.word	0x0000f1f4
    2a8c:	0000f20c 	.word	0x0000f20c
    2a90:	0000f228 	.word	0x0000f228
    2a94:	0000f404 	.word	0x0000f404
    2a98:	0000f428 	.word	0x0000f428
    2a9c:	0000f440 	.word	0x0000f440
    2aa0:	0000f454 	.word	0x0000f454
    2aa4:	0000f46c 	.word	0x0000f46c
    2aa8:	0000f484 	.word	0x0000f484
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2aac:	49b8      	ldr	r1, [pc, #736]	; (2d90 <LEDDebug(LEDStruct&)+0xbac>)
    2aae:	48b9      	ldr	r0, [pc, #740]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ab0:	f7fd fef4 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab4:	49b8      	ldr	r1, [pc, #736]	; (2d98 <LEDDebug(LEDStruct&)+0xbb4>)
    2ab6:	48b7      	ldr	r0, [pc, #732]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ab8:	f7fd fee2 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2abc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2ac0:	48b4      	ldr	r0, [pc, #720]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ac2:	f00a f9d5 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2ac6:	49b5      	ldr	r1, [pc, #724]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2ac8:	48b2      	ldr	r0, [pc, #712]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2aca:	f7fd fee7 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ace:	49b4      	ldr	r1, [pc, #720]	; (2da0 <LEDDebug(LEDStruct&)+0xbbc>)
    2ad0:	48b0      	ldr	r0, [pc, #704]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ad2:	f7fd fed5 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ad6:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2ada:	48ae      	ldr	r0, [pc, #696]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2adc:	f00a f9c8 	bl	ce70 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2ae0:	49ae      	ldr	r1, [pc, #696]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2ae2:	48ac      	ldr	r0, [pc, #688]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ae4:	f7fd feda 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae8:	49ae      	ldr	r1, [pc, #696]	; (2da4 <LEDDebug(LEDStruct&)+0xbc0>)
    2aea:	48aa      	ldr	r0, [pc, #680]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2aec:	f7fd fec8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2af0:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2af4:	48a7      	ldr	r0, [pc, #668]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2af6:	f00a f9bb 	bl	ce70 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2afa:	49a8      	ldr	r1, [pc, #672]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2afc:	48a5      	ldr	r0, [pc, #660]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2afe:	f7fd fecd 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b02:	49a9      	ldr	r1, [pc, #676]	; (2da8 <LEDDebug(LEDStruct&)+0xbc4>)
    2b04:	48a3      	ldr	r0, [pc, #652]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b06:	f7fd febb 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b0a:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2b0e:	48a1      	ldr	r0, [pc, #644]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b10:	f00a f9ae 	bl	ce70 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2b14:	49a1      	ldr	r1, [pc, #644]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2b16:	489f      	ldr	r0, [pc, #636]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b18:	f7fd fec0 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b1c:	49a3      	ldr	r1, [pc, #652]	; (2dac <LEDDebug(LEDStruct&)+0xbc8>)
    2b1e:	489d      	ldr	r0, [pc, #628]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b20:	f7fd feae 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b24:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2b28:	e56c      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2b2a:	49a1      	ldr	r1, [pc, #644]	; (2db0 <LEDDebug(LEDStruct&)+0xbcc>)
    2b2c:	4899      	ldr	r0, [pc, #612]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b2e:	f7fd feb5 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b32:	49a0      	ldr	r1, [pc, #640]	; (2db4 <LEDDebug(LEDStruct&)+0xbd0>)
    2b34:	4897      	ldr	r0, [pc, #604]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b36:	f7fd fea3 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b3a:	2300      	movs	r3, #0
    2b3c:	220a      	movs	r2, #10
    2b3e:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2b42:	4894      	ldr	r0, [pc, #592]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b44:	f00a f954 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2b48:	4994      	ldr	r1, [pc, #592]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2b4a:	4892      	ldr	r0, [pc, #584]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b4c:	f7fd fea6 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b50:	4999      	ldr	r1, [pc, #612]	; (2db8 <LEDDebug(LEDStruct&)+0xbd4>)
    2b52:	4890      	ldr	r0, [pc, #576]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b54:	f7fd fe94 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b58:	2300      	movs	r3, #0
    2b5a:	220a      	movs	r2, #10
    2b5c:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2b60:	488c      	ldr	r0, [pc, #560]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b62:	f00a f945 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2b66:	498d      	ldr	r1, [pc, #564]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2b68:	488a      	ldr	r0, [pc, #552]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b6a:	f7fd fe97 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b6e:	4993      	ldr	r1, [pc, #588]	; (2dbc <LEDDebug(LEDStruct&)+0xbd8>)
    2b70:	4888      	ldr	r0, [pc, #544]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b72:	f7fd fe85 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b76:	2300      	movs	r3, #0
    2b78:	220a      	movs	r2, #10
    2b7a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b7e:	4885      	ldr	r0, [pc, #532]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b80:	f00a f936 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b84:	4985      	ldr	r1, [pc, #532]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2b86:	4883      	ldr	r0, [pc, #524]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b88:	f7fd fe88 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b8c:	498c      	ldr	r1, [pc, #560]	; (2dc0 <LEDDebug(LEDStruct&)+0xbdc>)
    2b8e:	4881      	ldr	r0, [pc, #516]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b90:	f7fd fe76 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b94:	2300      	movs	r3, #0
    2b96:	220a      	movs	r2, #10
    2b98:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2b9c:	487d      	ldr	r0, [pc, #500]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2b9e:	f00a f927 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2ba2:	497e      	ldr	r1, [pc, #504]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2ba4:	487b      	ldr	r0, [pc, #492]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ba6:	f7fd fe79 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2baa:	4986      	ldr	r1, [pc, #536]	; (2dc4 <LEDDebug(LEDStruct&)+0xbe0>)
    2bac:	4879      	ldr	r0, [pc, #484]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bae:	f7fd fe67 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bb2:	2300      	movs	r3, #0
    2bb4:	220a      	movs	r2, #10
    2bb6:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2bba:	4876      	ldr	r0, [pc, #472]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bbc:	f00a f918 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2bc0:	4976      	ldr	r1, [pc, #472]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2bc2:	4874      	ldr	r0, [pc, #464]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bc4:	f7fd fe6a 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bc8:	497f      	ldr	r1, [pc, #508]	; (2dc8 <LEDDebug(LEDStruct&)+0xbe4>)
    2bca:	4872      	ldr	r0, [pc, #456]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bcc:	f7fd fe58 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2bd0:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2bd4:	e402      	b.n	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2bd6:	497d      	ldr	r1, [pc, #500]	; (2dcc <LEDDebug(LEDStruct&)+0xbe8>)
    2bd8:	486e      	ldr	r0, [pc, #440]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bda:	f7fd fe5f 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bde:	497c      	ldr	r1, [pc, #496]	; (2dd0 <LEDDebug(LEDStruct&)+0xbec>)
    2be0:	486c      	ldr	r0, [pc, #432]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2be2:	f7fd fe4d 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2be6:	2300      	movs	r3, #0
    2be8:	220a      	movs	r2, #10
    2bea:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2bee:	4869      	ldr	r0, [pc, #420]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bf0:	f00a f8fe 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2bf4:	4969      	ldr	r1, [pc, #420]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2bf6:	4867      	ldr	r0, [pc, #412]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2bf8:	f7fd fe50 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bfc:	4975      	ldr	r1, [pc, #468]	; (2dd4 <LEDDebug(LEDStruct&)+0xbf0>)
    2bfe:	4865      	ldr	r0, [pc, #404]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c00:	f7fd fe3e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c04:	2300      	movs	r3, #0
    2c06:	220a      	movs	r2, #10
    2c08:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2c0c:	4861      	ldr	r0, [pc, #388]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c0e:	f00a f8ef 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2c12:	4962      	ldr	r1, [pc, #392]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2c14:	485f      	ldr	r0, [pc, #380]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c16:	f7fd fe41 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c1a:	496f      	ldr	r1, [pc, #444]	; (2dd8 <LEDDebug(LEDStruct&)+0xbf4>)
    2c1c:	485d      	ldr	r0, [pc, #372]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c1e:	f7fd fe2f 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c22:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2c26:	f7ff bbd9 	b.w	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2c2a:	496c      	ldr	r1, [pc, #432]	; (2ddc <LEDDebug(LEDStruct&)+0xbf8>)
    2c2c:	4859      	ldr	r0, [pc, #356]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c2e:	f7fd fe35 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c32:	496b      	ldr	r1, [pc, #428]	; (2de0 <LEDDebug(LEDStruct&)+0xbfc>)
    2c34:	4857      	ldr	r0, [pc, #348]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c36:	f7fd fe23 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c3a:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2c3e:	4855      	ldr	r0, [pc, #340]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c40:	f00a f916 	bl	ce70 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2c44:	4955      	ldr	r1, [pc, #340]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2c46:	4853      	ldr	r0, [pc, #332]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c48:	f7fd fe28 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c4c:	4965      	ldr	r1, [pc, #404]	; (2de4 <LEDDebug(LEDStruct&)+0xc00>)
    2c4e:	4851      	ldr	r0, [pc, #324]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c50:	f7fd fe16 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c54:	2300      	movs	r3, #0
    2c56:	220a      	movs	r2, #10
    2c58:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2c5c:	484d      	ldr	r0, [pc, #308]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c5e:	f00a f8c7 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    2c62:	494e      	ldr	r1, [pc, #312]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2c64:	484b      	ldr	r0, [pc, #300]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c66:	f7fd fe19 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c6a:	495f      	ldr	r1, [pc, #380]	; (2de8 <LEDDebug(LEDStruct&)+0xc04>)
    2c6c:	4849      	ldr	r0, [pc, #292]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c6e:	f7fd fe07 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c72:	2300      	movs	r3, #0
    2c74:	220a      	movs	r2, #10
    2c76:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2c7a:	4846      	ldr	r0, [pc, #280]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c7c:	f00a f8b8 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    2c80:	4946      	ldr	r1, [pc, #280]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2c82:	4844      	ldr	r0, [pc, #272]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c84:	f7fd fe0a 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c88:	4958      	ldr	r1, [pc, #352]	; (2dec <LEDDebug(LEDStruct&)+0xc08>)
    2c8a:	4842      	ldr	r0, [pc, #264]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c8c:	f7fd fdf8 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c90:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2c94:	483f      	ldr	r0, [pc, #252]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c96:	f00a f8eb 	bl	ce70 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2c9a:	4940      	ldr	r1, [pc, #256]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2c9c:	483d      	ldr	r0, [pc, #244]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2c9e:	f7fd fdfd 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ca2:	4953      	ldr	r1, [pc, #332]	; (2df0 <LEDDebug(LEDStruct&)+0xc0c>)
    2ca4:	483b      	ldr	r0, [pc, #236]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ca6:	f7fd fdeb 	bl	880 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2caa:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2cae:	2b01      	cmp	r3, #1
    2cb0:	f000 80e0 	beq.w	2e74 <LEDDebug(LEDStruct&)+0xc90>
    2cb4:	f0c0 80fc 	bcc.w	2eb0 <LEDDebug(LEDStruct&)+0xccc>
    2cb8:	2b02      	cmp	r3, #2
    2cba:	d103      	bne.n	2cc4 <LEDDebug(LEDStruct&)+0xae0>
    2cbc:	494d      	ldr	r1, [pc, #308]	; (2df4 <LEDDebug(LEDStruct&)+0xc10>)
    2cbe:	4835      	ldr	r0, [pc, #212]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2cc0:	f7fd fdde 	bl	880 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2cc4:	4935      	ldr	r1, [pc, #212]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2cc6:	4833      	ldr	r0, [pc, #204]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2cc8:	f7fd fde8 	bl	89c <Print::println(char const*)>
    2ccc:	494a      	ldr	r1, [pc, #296]	; (2df8 <LEDDebug(LEDStruct&)+0xc14>)
    2cce:	4831      	ldr	r0, [pc, #196]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2cd0:	f7fd fdd6 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2cd4:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2cd8:	f7ff bb80 	b.w	23dc <LEDDebug(LEDStruct&)+0x1f8>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2cdc:	4947      	ldr	r1, [pc, #284]	; (2dfc <LEDDebug(LEDStruct&)+0xc18>)
    2cde:	482d      	ldr	r0, [pc, #180]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ce0:	f7fd fddc 	bl	89c <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2ce4:	4946      	ldr	r1, [pc, #280]	; (2e00 <LEDDebug(LEDStruct&)+0xc1c>)
    2ce6:	482b      	ldr	r0, [pc, #172]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2ce8:	f7fd fdd8 	bl	89c <Print::println(char const*)>
			Serial.println("");
    2cec:	4943      	ldr	r1, [pc, #268]	; (2dfc <LEDDebug(LEDStruct&)+0xc18>)
    2cee:	4829      	ldr	r0, [pc, #164]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2cf0:	f7fd fdd4 	bl	89c <Print::println(char const*)>
			break;
    2cf4:	f7ff bb79 	b.w	23ea <LEDDebug(LEDStruct&)+0x206>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2cf8:	4942      	ldr	r1, [pc, #264]	; (2e04 <LEDDebug(LEDStruct&)+0xc20>)
    2cfa:	4826      	ldr	r0, [pc, #152]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2cfc:	f7fd fdce 	bl	89c <Print::println(char const*)>
    2d00:	f7ff ba8b 	b.w	221a <LEDDebug(LEDStruct&)+0x36>
	else if (leds.array_type == OVERLAY) { Serial.println("=============OVERLAY=============="); }
    2d04:	4940      	ldr	r1, [pc, #256]	; (2e08 <LEDDebug(LEDStruct&)+0xc24>)
    2d06:	4823      	ldr	r0, [pc, #140]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d08:	f7fd fdc8 	bl	89c <Print::println(char const*)>
    2d0c:	f7ff ba85 	b.w	221a <LEDDebug(LEDStruct&)+0x36>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2d10:	493e      	ldr	r1, [pc, #248]	; (2e0c <LEDDebug(LEDStruct&)+0xc28>)
    2d12:	4820      	ldr	r0, [pc, #128]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d14:	f7fd fdc2 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d18:	493d      	ldr	r1, [pc, #244]	; (2e10 <LEDDebug(LEDStruct&)+0xc2c>)
    2d1a:	481e      	ldr	r0, [pc, #120]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d1c:	f7fd fdb0 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d20:	2300      	movs	r3, #0
    2d22:	220a      	movs	r2, #10
    2d24:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2d28:	481a      	ldr	r0, [pc, #104]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d2a:	f00a f861 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				default: break;

			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2d2e:	491b      	ldr	r1, [pc, #108]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2d30:	4818      	ldr	r0, [pc, #96]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d32:	f7fd fdb3 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d36:	4937      	ldr	r1, [pc, #220]	; (2e14 <LEDDebug(LEDStruct&)+0xc30>)
    2d38:	4816      	ldr	r0, [pc, #88]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d3a:	f7fd fda1 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d3e:	2300      	movs	r3, #0
    2d40:	220a      	movs	r2, #10
    2d42:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2d46:	4813      	ldr	r0, [pc, #76]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d48:	f00a f852 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2d4c:	4913      	ldr	r1, [pc, #76]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2d4e:	4811      	ldr	r0, [pc, #68]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d50:	f7fd fda4 	bl	89c <Print::println(char const*)>
			if (!leds.fire_sync) {
    2d54:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2d58:	2d00      	cmp	r5, #0
    2d5a:	d067      	beq.n	2e2c <LEDDebug(LEDStruct&)+0xc48>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d5c:	492e      	ldr	r1, [pc, #184]	; (2e18 <LEDDebug(LEDStruct&)+0xc34>)
    2d5e:	480d      	ldr	r0, [pc, #52]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d60:	f7fd fd8e 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d64:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2d68:	480a      	ldr	r0, [pc, #40]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d6a:	f00a f881 	bl	ce70 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2d6e:	490b      	ldr	r1, [pc, #44]	; (2d9c <LEDDebug(LEDStruct&)+0xbb8>)
    2d70:	4808      	ldr	r0, [pc, #32]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d72:	f7fd fd93 	bl	89c <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2d76:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2d7a:	3b0e      	subs	r3, #14
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	f63f ab34 	bhi.w	23ea <LEDDebug(LEDStruct&)+0x206>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d82:	4926      	ldr	r1, [pc, #152]	; (2e1c <LEDDebug(LEDStruct&)+0xc38>)
    2d84:	4803      	ldr	r0, [pc, #12]	; (2d94 <LEDDebug(LEDStruct&)+0xbb0>)
    2d86:	f7fd fd7b 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d8a:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2d8e:	e439      	b.n	2604 <LEDDebug(LEDStruct&)+0x420>
    2d90:	0000f49c 	.word	0x0000f49c
    2d94:	1fff878c 	.word	0x1fff878c
    2d98:	0000ee68 	.word	0x0000ee68
    2d9c:	0000edb0 	.word	0x0000edb0
    2da0:	0000f4c0 	.word	0x0000f4c0
    2da4:	0000f4d8 	.word	0x0000f4d8
    2da8:	0000f4f0 	.word	0x0000f4f0
    2dac:	0000f504 	.word	0x0000f504
    2db0:	0000f518 	.word	0x0000f518
    2db4:	0000f53c 	.word	0x0000f53c
    2db8:	0000f554 	.word	0x0000f554
    2dbc:	0000f56c 	.word	0x0000f56c
    2dc0:	0000f584 	.word	0x0000f584
    2dc4:	0000f59c 	.word	0x0000f59c
    2dc8:	0000f5b0 	.word	0x0000f5b0
    2dcc:	0000f5c8 	.word	0x0000f5c8
    2dd0:	0000f5ec 	.word	0x0000f5ec
    2dd4:	0000f5fc 	.word	0x0000f5fc
    2dd8:	0000f618 	.word	0x0000f618
    2ddc:	0000f630 	.word	0x0000f630
    2de0:	0000f654 	.word	0x0000f654
    2de4:	0000f66c 	.word	0x0000f66c
    2de8:	0000f684 	.word	0x0000f684
    2dec:	0000f69c 	.word	0x0000f69c
    2df0:	0000f6b0 	.word	0x0000f6b0
    2df4:	0000f6c4 	.word	0x0000f6c4
    2df8:	0000f6d4 	.word	0x0000f6d4
    2dfc:	0000eea4 	.word	0x0000eea4
    2e00:	0000f770 	.word	0x0000f770
    2e04:	0000ed54 	.word	0x0000ed54
    2e08:	0000ed78 	.word	0x0000ed78
    2e0c:	0000efe8 	.word	0x0000efe8
    2e10:	0000f054 	.word	0x0000f054
    2e14:	0000f068 	.word	0x0000f068
    2e18:	0000f0a4 	.word	0x0000f0a4
    2e1c:	0000f0b4 	.word	0x0000f0b4
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("==========RAINBOW MARCH==========="); }
    2e20:	4927      	ldr	r1, [pc, #156]	; (2ec0 <LEDDebug(LEDStruct&)+0xcdc>)
    2e22:	4828      	ldr	r0, [pc, #160]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e24:	f7fd fd3a 	bl	89c <Print::println(char const*)>
    2e28:	f7ff bb8a 	b.w	2540 <LEDDebug(LEDStruct&)+0x35c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e2c:	4926      	ldr	r1, [pc, #152]	; (2ec8 <LEDDebug(LEDStruct&)+0xce4>)
    2e2e:	4825      	ldr	r0, [pc, #148]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e30:	f7fd fd26 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e34:	462b      	mov	r3, r5
    2e36:	220a      	movs	r2, #10
    2e38:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    2e3c:	4821      	ldr	r0, [pc, #132]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e3e:	f009 ffd7 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    2e42:	4922      	ldr	r1, [pc, #136]	; (2ecc <LEDDebug(LEDStruct&)+0xce8>)
    2e44:	481f      	ldr	r0, [pc, #124]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e46:	f7fd fd29 	bl	89c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e4a:	4921      	ldr	r1, [pc, #132]	; (2ed0 <LEDDebug(LEDStruct&)+0xcec>)
    2e4c:	481d      	ldr	r0, [pc, #116]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e4e:	f7fd fd17 	bl	880 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e52:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    2e56:	481b      	ldr	r0, [pc, #108]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e58:	462b      	mov	r3, r5
    2e5a:	220a      	movs	r2, #10
    2e5c:	f009 ffc8 	bl	cdf0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    2e60:	491a      	ldr	r1, [pc, #104]	; (2ecc <LEDDebug(LEDStruct&)+0xce8>)
    2e62:	4818      	ldr	r0, [pc, #96]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e64:	f7fd fd1a 	bl	89c <Print::println(char const*)>
    2e68:	e778      	b.n	2d5c <LEDDebug(LEDStruct&)+0xb78>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    2e6a:	491a      	ldr	r1, [pc, #104]	; (2ed4 <LEDDebug(LEDStruct&)+0xcf0>)
    2e6c:	4815      	ldr	r0, [pc, #84]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e6e:	f7fd fd15 	bl	89c <Print::println(char const*)>
    2e72:	e558      	b.n	2926 <LEDDebug(LEDStruct&)+0x742>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e74:	4918      	ldr	r1, [pc, #96]	; (2ed8 <LEDDebug(LEDStruct&)+0xcf4>)
    2e76:	4813      	ldr	r0, [pc, #76]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e78:	f7fd fd02 	bl	880 <Print::write(char const*)>
    2e7c:	e722      	b.n	2cc4 <LEDDebug(LEDStruct&)+0xae0>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    2e7e:	4917      	ldr	r1, [pc, #92]	; (2edc <LEDDebug(LEDStruct&)+0xcf8>)
    2e80:	4810      	ldr	r0, [pc, #64]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e82:	f7fd fd0b 	bl	89c <Print::println(char const*)>
    2e86:	e747      	b.n	2d18 <LEDDebug(LEDStruct&)+0xb34>
			Serial.println("\t||");
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    2e88:	4915      	ldr	r1, [pc, #84]	; (2ee0 <LEDDebug(LEDStruct&)+0xcfc>)
    2e8a:	480e      	ldr	r0, [pc, #56]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e8c:	f7fd fd06 	bl	89c <Print::println(char const*)>
    2e90:	e742      	b.n	2d18 <LEDDebug(LEDStruct&)+0xb34>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    2e92:	4914      	ldr	r1, [pc, #80]	; (2ee4 <LEDDebug(LEDStruct&)+0xd00>)
    2e94:	480b      	ldr	r0, [pc, #44]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2e96:	f7fd fd01 	bl	89c <Print::println(char const*)>
    2e9a:	e73d      	b.n	2d18 <LEDDebug(LEDStruct&)+0xb34>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    2e9c:	4912      	ldr	r1, [pc, #72]	; (2ee8 <LEDDebug(LEDStruct&)+0xd04>)
    2e9e:	4809      	ldr	r0, [pc, #36]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2ea0:	f7fd fcfc 	bl	89c <Print::println(char const*)>
    2ea4:	e738      	b.n	2d18 <LEDDebug(LEDStruct&)+0xb34>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    2ea6:	4911      	ldr	r1, [pc, #68]	; (2eec <LEDDebug(LEDStruct&)+0xd08>)
    2ea8:	4806      	ldr	r0, [pc, #24]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2eaa:	f7fd fcf7 	bl	89c <Print::println(char const*)>
    2eae:	e733      	b.n	2d18 <LEDDebug(LEDStruct&)+0xb34>
    2eb0:	490f      	ldr	r1, [pc, #60]	; (2ef0 <LEDDebug(LEDStruct&)+0xd0c>)
    2eb2:	4804      	ldr	r0, [pc, #16]	; (2ec4 <LEDDebug(LEDStruct&)+0xce0>)
    2eb4:	f7fd fce4 	bl	880 <Print::write(char const*)>
    2eb8:	e704      	b.n	2cc4 <LEDDebug(LEDStruct&)+0xae0>
    2eba:	490e      	ldr	r1, [pc, #56]	; (2ef4 <LEDDebug(LEDStruct&)+0xd10>)
    2ebc:	e52c      	b.n	2918 <LEDDebug(LEDStruct&)+0x734>
    2ebe:	bf00      	nop
    2ec0:	0000ef04 	.word	0x0000ef04
    2ec4:	1fff878c 	.word	0x1fff878c
    2ec8:	0000f07c 	.word	0x0000f07c
    2ecc:	0000edb0 	.word	0x0000edb0
    2ed0:	0000f090 	.word	0x0000f090
    2ed4:	0000f1b8 	.word	0x0000f1b8
    2ed8:	0000f6cc 	.word	0x0000f6cc
    2edc:	0000efa0 	.word	0x0000efa0
    2ee0:	0000ef7c 	.word	0x0000ef7c
    2ee4:	0000f030 	.word	0x0000f030
    2ee8:	0000f00c 	.word	0x0000f00c
    2eec:	0000efc4 	.word	0x0000efc4
    2ef0:	0000f1b4 	.word	0x0000f1b4
    2ef4:	0000f1b0 	.word	0x0000f1b0

00002ef8 <change_palette(LEDStruct&) [clone .part.12]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    2ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2efc:	b08d      	sub	sp, #52	; 0x34
    2efe:	2134      	movs	r1, #52	; 0x34
    2f00:	4605      	mov	r5, r0
    2f02:	9009      	str	r0, [sp, #36]	; 0x24
    2f04:	4846      	ldr	r0, [pc, #280]	; (3020 <change_palette(LEDStruct&) [clone .part.12]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    2f06:	4c47      	ldr	r4, [pc, #284]	; (3024 <change_palette(LEDStruct&) [clone .part.12]+0x12c>)
    2f08:	f009 fd5e 	bl	c9c8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2f0c:	4846      	ldr	r0, [pc, #280]	; (3028 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f0e:	f009 ff5f 	bl	cdd0 <Print::println()>
    2f12:	2133      	movs	r1, #51	; 0x33
    2f14:	4845      	ldr	r0, [pc, #276]	; (302c <change_palette(LEDStruct&) [clone .part.12]+0x134>)
    2f16:	f009 fd57 	bl	c9c8 <usb_serial_write>
    2f1a:	4843      	ldr	r0, [pc, #268]	; (3028 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f1c:	f009 ff58 	bl	cdd0 <Print::println()>
    2f20:	2133      	movs	r1, #51	; 0x33
    2f22:	4843      	ldr	r0, [pc, #268]	; (3030 <change_palette(LEDStruct&) [clone .part.12]+0x138>)
    2f24:	f009 fd50 	bl	c9c8 <usb_serial_write>
    2f28:	483f      	ldr	r0, [pc, #252]	; (3028 <change_palette(LEDStruct&) [clone .part.12]+0x130>)
    2f2a:	f009 ff51 	bl	cdd0 <Print::println()>
    2f2e:	4841      	ldr	r0, [pc, #260]	; (3034 <change_palette(LEDStruct&) [clone .part.12]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f30:	4a41      	ldr	r2, [pc, #260]	; (3038 <change_palette(LEDStruct&) [clone .part.12]+0x140>)
    2f32:	8803      	ldrh	r3, [r0, #0]
    2f34:	7811      	ldrb	r1, [r2, #0]
    2f36:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2f3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f3e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2f42:	3319      	adds	r3, #25
    2f44:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f46:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    2f4a:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    2f4c:	fb12 f201 	smulbb	r2, r2, r1
    2f50:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f52:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    2f54:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    2f58:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    2f5c:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    2f5e:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    2f62:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2f64:	3701      	adds	r7, #1
        } while ( u.index != 255);
    2f66:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    2f68:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    2f6a:	d1f8      	bne.n	2f5e <change_palette(LEDStruct&) [clone .part.12]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2f6c:	f8d8 3000 	ldr.w	r3, [r8]
    2f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f72:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    2f74:	ea4f 6913 	mov.w	r9, r3, lsr #24
    2f78:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    2f7c:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    2f80:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    2f84:	f04f 33ff 	mov.w	r3, #4294967295
    2f88:	9207      	str	r2, [sp, #28]
    2f8a:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    2f8c:	2400      	movs	r4, #0
    2f8e:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    2f90:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2f94:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2f96:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    2f9a:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2f9e:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    2fa2:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    2fa4:	b2f9      	uxtb	r1, r7
    2fa6:	f3c5 6507 	ubfx	r5, r5, #24, #8
    2faa:	9104      	str	r1, [sp, #16]
    2fac:	b2e9      	uxtb	r1, r5
    2fae:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    2fb0:	fa5f f18c 	uxtb.w	r1, ip
    2fb4:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    2fb6:	9908      	ldr	r1, [sp, #32]
    2fb8:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2fba:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    2fbc:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    2fc0:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    2fc4:	d80c      	bhi.n	2fe0 <change_palette(LEDStruct&) [clone .part.12]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    2fc6:	9906      	ldr	r1, [sp, #24]
    2fc8:	458c      	cmp	ip, r1
    2fca:	dc07      	bgt.n	2fdc <change_palette(LEDStruct&) [clone .part.12]+0xe4>
    2fcc:	290f      	cmp	r1, #15
    2fce:	d005      	beq.n	2fdc <change_palette(LEDStruct&) [clone .part.12]+0xe4>
                    istart8 = lastSlotUsed + 1;
    2fd0:	3101      	adds	r1, #1
    2fd2:	b2c9      	uxtb	r1, r1
    2fd4:	428b      	cmp	r3, r1
    2fd6:	9103      	str	r1, [sp, #12]
    2fd8:	bf38      	it	cc
    2fda:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    2fdc:	b259      	sxtb	r1, r3
    2fde:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    2fe0:	a90b      	add	r1, sp, #44	; 0x2c
    2fe2:	9100      	str	r1, [sp, #0]
    2fe4:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2fe6:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    2fea:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    2fee:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ff2:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    2ff6:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    2ffa:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    2ffe:	f007 fc3f 	bl	a880 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    3002:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3004:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3008:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    300c:	46ca      	mov	sl, r9
    300e:	d1bf      	bne.n	2f90 <change_palette(LEDStruct&) [clone .part.12]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3010:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3012:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    3016:	f7fe fdd7 	bl	1bc8 <print_palette(unsigned char)>
	}
}
    301a:	b00d      	add	sp, #52	; 0x34
    301c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3020:	0000f7b8 	.word	0x0000f7b8
    3024:	00010334 	.word	0x00010334
    3028:	1fff878c 	.word	0x1fff878c
    302c:	0000f7f0 	.word	0x0000f7f0
    3030:	0000f824 	.word	0x0000f824
    3034:	1fff8784 	.word	0x1fff8784
    3038:	1fff8750 	.word	0x1fff8750

0000303c <juggle_update(LEDStruct&)>:
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    303c:	4b24      	ldr	r3, [pc, #144]	; (30d0 <juggle_update(LEDStruct&)+0x94>)
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    303e:	4a25      	ldr	r2, [pc, #148]	; (30d4 <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    3040:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    3042:	2100      	movs	r1, #0
    3044:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    3046:	2b07      	cmp	r3, #7
    3048:	d809      	bhi.n	305e <juggle_update(LEDStruct&)+0x22>
    304a:	e8df f003 	tbb	[pc, r3]
    304e:	1c13      	.short	0x1c13
    3050:	04342e25 	.word	0x04342e25
    3054:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    3056:	4b20      	ldr	r3, [pc, #128]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    3058:	881b      	ldrh	r3, [r3, #0]
    305a:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    305e:	f7ff b8c1 	b.w	21e4 <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    3062:	4b1d      	ldr	r3, [pc, #116]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    3064:	881b      	ldrh	r3, [r3, #0]
    3066:	3300      	adds	r3, #0
    3068:	bf18      	it	ne
    306a:	2301      	movne	r3, #1
    306c:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    3070:	f7ff b8b8 	b.w	21e4 <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    3074:	4b18      	ldr	r3, [pc, #96]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    3076:	881b      	ldrh	r3, [r3, #0]
    3078:	3300      	adds	r3, #0
    307a:	bf18      	it	ne
    307c:	2301      	movne	r3, #1
    307e:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3082:	f7ff b8af 	b.w	21e4 <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    3086:	4b14      	ldr	r3, [pc, #80]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    3088:	881b      	ldrh	r3, [r3, #0]
    308a:	3300      	adds	r3, #0
    308c:	bf18      	it	ne
    308e:	2301      	movne	r3, #1
    3090:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3094:	f7ff b8a6 	b.w	21e4 <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    3098:	4b0f      	ldr	r3, [pc, #60]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    309a:	881b      	ldrh	r3, [r3, #0]
    309c:	3300      	adds	r3, #0
    309e:	bf18      	it	ne
    30a0:	2301      	movne	r3, #1
    30a2:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30a6:	f7ff b89d 	b.w	21e4 <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    30aa:	4b0b      	ldr	r3, [pc, #44]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    30ac:	881b      	ldrh	r3, [r3, #0]
    30ae:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30b2:	f7ff b897 	b.w	21e4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    30b6:	4b08      	ldr	r3, [pc, #32]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    30b8:	881b      	ldrh	r3, [r3, #0]
    30ba:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30be:	f7ff b891 	b.w	21e4 <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    30c2:	4b05      	ldr	r3, [pc, #20]	; (30d8 <juggle_update(LEDStruct&)+0x9c>)
    30c4:	881b      	ldrh	r3, [r3, #0]
    30c6:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    30ca:	f7ff b88b 	b.w	21e4 <LEDDebug(LEDStruct&)>
    30ce:	bf00      	nop
    30d0:	1fff9e5c 	.word	0x1fff9e5c
    30d4:	1fff9605 	.word	0x1fff9605
    30d8:	1fff9e54 	.word	0x1fff9e54

000030dc <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    30dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    30e0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    30e4:	b089      	sub	sp, #36	; 0x24
    30e6:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    30e8:	2b00      	cmp	r3, #0
    30ea:	f040 809d 	bne.w	3228 <juggle(LEDStruct&)+0x14c>
    30ee:	4ed4      	ldr	r6, [pc, #848]	; (3440 <juggle(LEDStruct&)+0x364>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    30f0:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    30f4:	8833      	ldrh	r3, [r6, #0]
    30f6:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    30fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    30fe:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3102:	3019      	adds	r0, #25
    3104:	b280      	uxth	r0, r0
    3106:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    310a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    310e:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3112:	3519      	adds	r5, #25
    3114:	b2ad      	uxth	r5, r5
    3116:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    311a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    311e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3122:	3319      	adds	r3, #25
    3124:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3128:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    312c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3130:	3319      	adds	r3, #25
    3132:	b29b      	uxth	r3, r3
    3134:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3138:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    313c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3140:	3119      	adds	r1, #25
    3142:	b289      	uxth	r1, r1
    3144:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3148:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    314c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3150:	3219      	adds	r2, #25
    3152:	b292      	uxth	r2, r2
    3154:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3158:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    315c:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3160:	f10e 0e19 	add.w	lr, lr, #25
    3164:	fa1f fe8e 	uxth.w	lr, lr
    3168:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    316c:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3170:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3174:	f10c 0c19 	add.w	ip, ip, #25
    3178:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    317c:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3180:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3184:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3188:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    318c:	b2ff      	uxtb	r7, r7
    318e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3192:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3196:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    319a:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    319e:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    31a0:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31a6:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31aa:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31ae:	ea4f 2e27 	mov.w	lr, r7, asr #8
    31b2:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    31b6:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31b8:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31bc:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    31c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    31c4:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    31c8:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    31ca:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    31ce:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31d2:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31d6:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31d8:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    31dc:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    31e0:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    31e4:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    31e8:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31ea:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    31ee:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    31f2:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    31f6:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    31fa:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    31fc:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    31fe:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3202:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3206:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    320a:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    320e:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3212:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3216:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    321a:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    321e:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3222:	2b00      	cmp	r3, #0
    3224:	f040 8177 	bne.w	3516 <juggle(LEDStruct&)+0x43a>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3228:	4b86      	ldr	r3, [pc, #536]	; (3444 <juggle(LEDStruct&)+0x368>)
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	2b00      	cmp	r3, #0
    322e:	f040 817d 	bne.w	352c <juggle(LEDStruct&)+0x450>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    3232:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3236:	b1d3      	cbz	r3, 326e <juggle(LEDStruct&)+0x192>
    3238:	4b83      	ldr	r3, [pc, #524]	; (3448 <juggle(LEDStruct&)+0x36c>)
    323a:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    323e:	2200      	movs	r2, #0
    3240:	f103 0027 	add.w	r0, r3, #39	; 0x27
    3244:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    3248:	e001      	b.n	324e <juggle(LEDStruct&)+0x172>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    324a:	4283      	cmp	r3, r0
    324c:	d00f      	beq.n	326e <juggle(LEDStruct&)+0x192>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    324e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3252:	428a      	cmp	r2, r1
    3254:	d1f9      	bne.n	324a <juggle(LEDStruct&)+0x16e>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3256:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    325a:	4a7c      	ldr	r2, [pc, #496]	; (344c <juggle(LEDStruct&)+0x370>)
    325c:	fba2 2303 	umull	r2, r3, r2, r3
    3260:	08db      	lsrs	r3, r3, #3
    3262:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    3264:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    3266:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    326a:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    326e:	2196      	movs	r1, #150	; 0x96
    3270:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3274:	4620      	mov	r0, r4
    3276:	f007 fb95 	bl	a9a4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    327a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    327e:	2900      	cmp	r1, #0
    3280:	f040 80ec 	bne.w	345c <juggle(LEDStruct&)+0x380>
		if (leds.juggle_phased) {
    3284:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3288:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    328c:	2f00      	cmp	r7, #0
    328e:	f000 81ac 	beq.w	35ea <juggle(LEDStruct&)+0x50e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3292:	2b00      	cmp	r3, #0
    3294:	f000 8273 	beq.w	377e <juggle(LEDStruct&)+0x6a2>
    3298:	486d      	ldr	r0, [pc, #436]	; (3450 <juggle(LEDStruct&)+0x374>)
    329a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    329e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 3454 <juggle(LEDStruct&)+0x378>
    32a2:	9003      	str	r0, [sp, #12]
    32a4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 3458 <juggle(LEDStruct&)+0x37c>
    32a8:	460f      	mov	r7, r1
    32aa:	f10d 0a1c 	add.w	sl, sp, #28
    32ae:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    32b2:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    32b6:	e05d      	b.n	3374 <juggle(LEDStruct&)+0x298>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    32b8:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    32bc:	443b      	add	r3, r7
    32be:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32c0:	f8d9 1000 	ldr.w	r1, [r9]
    32c4:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    32c6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    32c8:	9904      	ldr	r1, [sp, #16]
    32ca:	bf98      	it	ls
    32cc:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    32ce:	f44f 708c 	mov.w	r0, #280	; 0x118
    32d2:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    32d6:	bf98      	it	ls
    32d8:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    32da:	fb03 f301 	mul.w	r3, r3, r1
    32de:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    32e0:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    32e2:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    32e6:	d503      	bpl.n	32f0 <juggle(LEDStruct&)+0x214>
    32e8:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    32ec:	3107      	adds	r1, #7
    32ee:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    32f0:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    32f2:	9e03      	ldr	r6, [sp, #12]
    32f4:	5c36      	ldrb	r6, [r6, r0]
    32f6:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    32fa:	f3c1 0146 	ubfx	r1, r1, #1, #7
    32fe:	fb06 0101 	mla	r1, r6, r1, r0
    3302:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3304:	041e      	lsls	r6, r3, #16
    3306:	bf48      	it	mi
    3308:	4249      	negmi	r1, r1
    330a:	b20e      	sxth	r6, r1
    330c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3310:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3314:	9100      	str	r1, [sp, #0]
    3316:	4650      	mov	r0, sl
    3318:	4641      	mov	r1, r8
    331a:	f007 fba3 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    331e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3322:	2296      	movs	r2, #150	; 0x96
    3324:	b29b      	uxth	r3, r3
    3326:	fb02 f303 	mul.w	r3, r2, r3
    332a:	0c1b      	lsrs	r3, r3, #16
    332c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3330:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3332:	5ce2      	ldrb	r2, [r4, r3]
    3334:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3338:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    333c:	54e2      	strb	r2, [r4, r3]
    333e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3342:	784a      	ldrb	r2, [r1, #1]
    3344:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3348:	704a      	strb	r2, [r1, #1]
    334a:	788b      	ldrb	r3, [r1, #2]
    334c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3350:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3354:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3356:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    335a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    335e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3362:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3364:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3366:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3368:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    336a:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    336c:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3370:	f240 8205 	bls.w	377e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3374:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3378:	2900      	cmp	r1, #0
    337a:	d19d      	bne.n	32b8 <juggle(LEDStruct&)+0x1dc>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    337c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3380:	443b      	add	r3, r7
    3382:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3384:	f8d9 1000 	ldr.w	r1, [r9]
    3388:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    338a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    338c:	9905      	ldr	r1, [sp, #20]
    338e:	bf98      	it	ls
    3390:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3392:	f44f 708c 	mov.w	r0, #280	; 0x118
    3396:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    339a:	bf98      	it	ls
    339c:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    339e:	fb03 f301 	mul.w	r3, r3, r1
    33a2:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    33a4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    33a6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    33aa:	d503      	bpl.n	33b4 <juggle(LEDStruct&)+0x2d8>
    33ac:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    33b0:	3107      	adds	r1, #7
    33b2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    33b4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    33b6:	9e03      	ldr	r6, [sp, #12]
    33b8:	5c36      	ldrb	r6, [r6, r0]
    33ba:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    33be:	f3c1 0146 	ubfx	r1, r1, #1, #7
    33c2:	fb06 0101 	mla	r1, r6, r1, r0
    33c6:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    33c8:	041e      	lsls	r6, r3, #16
    33ca:	bf48      	it	mi
    33cc:	4249      	negmi	r1, r1
    33ce:	b20e      	sxth	r6, r1
    33d0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    33d4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    33d8:	9100      	str	r1, [sp, #0]
    33da:	4650      	mov	r0, sl
    33dc:	4641      	mov	r1, r8
    33de:	f007 fb41 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    33e2:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    33e6:	b29b      	uxth	r3, r3
    33e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    33ec:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    33f0:	0c1b      	lsrs	r3, r3, #16
    33f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    33f6:	18e1      	adds	r1, r4, r3
    33f8:	5ce2      	ldrb	r2, [r4, r3]
    33fa:	f89d 001c 	ldrb.w	r0, [sp, #28]
    33fe:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3402:	54e2      	strb	r2, [r4, r3]
    3404:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3408:	784a      	ldrb	r2, [r1, #1]
    340a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    340e:	704a      	strb	r2, [r1, #1]
    3410:	788b      	ldrb	r3, [r1, #2]
    3412:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3416:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    341a:	708b      	strb	r3, [r1, #2]
    341c:	4622      	mov	r2, r4
    341e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3420:	7819      	ldrb	r1, [r3, #0]
    3422:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3426:	7859      	ldrb	r1, [r3, #1]
    3428:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    342c:	7899      	ldrb	r1, [r3, #2]
    342e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3432:	3303      	adds	r3, #3
LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    3434:	429d      	cmp	r5, r3
    3436:	f1a2 0203 	sub.w	r2, r2, #3
    343a:	d1f1      	bne.n	3420 <juggle(LEDStruct&)+0x344>
    343c:	e78b      	b.n	3356 <juggle(LEDStruct&)+0x27a>
    343e:	bf00      	nop
    3440:	1fff8784 	.word	0x1fff8784
    3444:	1fff9605 	.word	0x1fff9605
    3448:	1fff875b 	.word	0x1fff875b
    344c:	cccccccd 	.word	0xcccccccd
    3450:	000104f4 	.word	0x000104f4
    3454:	1fffa8f8 	.word	0x1fffa8f8
    3458:	0000fd64 	.word	0x0000fd64
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    345c:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    3460:	2e00      	cmp	r6, #0
    3462:	d067      	beq.n	3534 <juggle(LEDStruct&)+0x458>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3464:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3468:	2b00      	cmp	r3, #0
    346a:	f000 8188 	beq.w	377e <juggle(LEDStruct&)+0x6a2>
    346e:	2500      	movs	r5, #0
    3470:	f10d 0a1c 	add.w	sl, sp, #28
    3474:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3478:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    347c:	e039      	b.n	34f2 <juggle(LEDStruct&)+0x416>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    347e:	fb06 f305 	mul.w	r3, r6, r5
    3482:	2900      	cmp	r1, #0
    3484:	f000 81b5 	beq.w	37f2 <juggle(LEDStruct&)+0x716>
    3488:	2295      	movs	r2, #149	; 0x95
    348a:	2100      	movs	r1, #0
    348c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3490:	f7fd f810 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3494:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3498:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    349c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    34a0:	9100      	str	r1, [sp, #0]
    34a2:	4607      	mov	r7, r0
    34a4:	4641      	mov	r1, r8
    34a6:	4650      	mov	r0, sl
    34a8:	f007 fadc 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    34ac:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    34b0:	18e1      	adds	r1, r4, r3
    34b2:	5ce2      	ldrb	r2, [r4, r3]
    34b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34b8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    34bc:	54e2      	strb	r2, [r4, r3]
    34be:	784a      	ldrb	r2, [r1, #1]
    34c0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    34c4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    34c8:	704a      	strb	r2, [r1, #1]
    34ca:	788b      	ldrb	r3, [r1, #2]
    34cc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    34d0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    34d4:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34d6:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    34da:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34de:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    34e2:	3501      	adds	r5, #1
    34e4:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34e6:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34e8:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    34ea:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    34ee:	f240 8146 	bls.w	377e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    34f2:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34f6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    34fa:	2b00      	cmp	r3, #0
    34fc:	d1bf      	bne.n	347e <juggle(LEDStruct&)+0x3a2>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    34fe:	2900      	cmp	r1, #0
    3500:	f000 81b8 	beq.w	3874 <juggle(LEDStruct&)+0x798>
    3504:	4619      	mov	r1, r3
    3506:	2295      	movs	r2, #149	; 0x95
    3508:	fb06 f305 	mul.w	r3, r6, r5
    350c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3510:	f7fd f812 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3514:	e7be      	b.n	3494 <juggle(LEDStruct&)+0x3b8>
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3516:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    351a:	fa02 f300 	lsl.w	r3, r2, r0
    351e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3522:	4bd0      	ldr	r3, [pc, #832]	; (3864 <juggle(LEDStruct&)+0x788>)
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	2b00      	cmp	r3, #0
    3528:	f43f ae83 	beq.w	3232 <juggle(LEDStruct&)+0x156>
    352c:	4620      	mov	r0, r4
    352e:	f7ff fd85 	bl	303c <juggle_update(LEDStruct&)>
    3532:	e67e      	b.n	3232 <juggle(LEDStruct&)+0x156>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3534:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3538:	2900      	cmp	r1, #0
    353a:	f000 8120 	beq.w	377e <juggle(LEDStruct&)+0x6a2>
    353e:	f10d 0a1c 	add.w	sl, sp, #28
    3542:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3546:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    354a:	e03c      	b.n	35c6 <juggle(LEDStruct&)+0x4ea>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    354c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3550:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3554:	4431      	add	r1, r6
    3556:	2b00      	cmp	r3, #0
    3558:	f000 8114 	beq.w	3784 <juggle(LEDStruct&)+0x6a8>
    355c:	2300      	movs	r3, #0
    355e:	4408      	add	r0, r1
    3560:	2295      	movs	r2, #149	; 0x95
    3562:	4619      	mov	r1, r3
    3564:	f7fc ffa6 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3568:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    356c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3570:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3574:	9100      	str	r1, [sp, #0]
    3576:	4607      	mov	r7, r0
    3578:	4641      	mov	r1, r8
    357a:	4650      	mov	r0, sl
    357c:	f007 fa72 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3580:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3584:	18e1      	adds	r1, r4, r3
    3586:	5ce2      	ldrb	r2, [r4, r3]
    3588:	f89d 001c 	ldrb.w	r0, [sp, #28]
    358c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3590:	54e2      	strb	r2, [r4, r3]
    3592:	784a      	ldrb	r2, [r1, #1]
    3594:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3598:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    359c:	704a      	strb	r2, [r1, #1]
    359e:	788b      	ldrb	r3, [r1, #2]
    35a0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35a4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    35a8:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35aa:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35ae:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35b2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    35b6:	3601      	adds	r6, #1
    35b8:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35ba:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35bc:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    35be:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    35c2:	f240 80dc 	bls.w	377e <juggle(LEDStruct&)+0x6a2>
				if (leds.this_dir) {
    35c6:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    35ca:	2b00      	cmp	r3, #0
    35cc:	d1be      	bne.n	354c <juggle(LEDStruct&)+0x470>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    35ce:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    35d2:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    35d6:	4431      	add	r1, r6
    35d8:	4408      	add	r0, r1
    35da:	2a00      	cmp	r2, #0
    35dc:	f000 8185 	beq.w	38ea <juggle(LEDStruct&)+0x80e>
    35e0:	4619      	mov	r1, r3
    35e2:	2295      	movs	r2, #149	; 0x95
    35e4:	f7fc ffa8 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    35e8:	e7be      	b.n	3568 <juggle(LEDStruct&)+0x48c>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    35ea:	2b00      	cmp	r3, #0
    35ec:	f000 80c7 	beq.w	377e <juggle(LEDStruct&)+0x6a2>
    35f0:	4b9d      	ldr	r3, [pc, #628]	; (3868 <juggle(LEDStruct&)+0x78c>)
    35f2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    35f6:	f8df 9274 	ldr.w	r9, [pc, #628]	; 386c <juggle(LEDStruct&)+0x790>
    35fa:	9303      	str	r3, [sp, #12]
    35fc:	f8df b270 	ldr.w	fp, [pc, #624]	; 3870 <juggle(LEDStruct&)+0x794>
    3600:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    3604:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    3608:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    360c:	e057      	b.n	36be <juggle(LEDStruct&)+0x5e2>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    360e:	f8d9 3000 	ldr.w	r3, [r9]
    3612:	9306      	str	r3, [sp, #24]
	return ret;
    3614:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3616:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    361a:	fb0a f303 	mul.w	r3, sl, r3
    361e:	0209      	lsls	r1, r1, #8
    3620:	fb03 f301 	mul.w	r3, r3, r1
    3624:	0379      	lsls	r1, r7, #13
    3626:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    362a:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    362c:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    362e:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3632:	d503      	bpl.n	363c <juggle(LEDStruct&)+0x560>
    3634:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3638:	3307      	adds	r3, #7
    363a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    363c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    363e:	9e03      	ldr	r6, [sp, #12]
    3640:	5c36      	ldrb	r6, [r6, r0]
    3642:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3646:	f3c3 0346 	ubfx	r3, r3, #1, #7
    364a:	fb06 0303 	mla	r3, r6, r3, r0
    364e:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3650:	040e      	lsls	r6, r1, #16
    3652:	bf48      	it	mi
    3654:	425b      	negmi	r3, r3
    3656:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    365a:	b21e      	sxth	r6, r3
    365c:	a805      	add	r0, sp, #20
    365e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3662:	9100      	str	r1, [sp, #0]
    3664:	4641      	mov	r1, r8
    3666:	f007 f9fd 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    366a:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    366e:	2296      	movs	r2, #150	; 0x96
    3670:	b29b      	uxth	r3, r3
    3672:	fb02 f303 	mul.w	r3, r2, r3
    3676:	0c1b      	lsrs	r3, r3, #16
    3678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    367c:	18e1      	adds	r1, r4, r3
    367e:	5ce2      	ldrb	r2, [r4, r3]
    3680:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3684:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3688:	54e2      	strb	r2, [r4, r3]
    368a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    368e:	784a      	ldrb	r2, [r1, #1]
    3690:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3694:	704a      	strb	r2, [r1, #1]
    3696:	788b      	ldrb	r3, [r1, #2]
    3698:	f89d 2016 	ldrb.w	r2, [sp, #22]
    369c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36a0:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36a2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    36a6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36aa:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    36ae:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36b0:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36b2:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36b4:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36b6:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    36b8:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    36bc:	d95f      	bls.n	377e <juggle(LEDStruct&)+0x6a2>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    36be:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    36c2:	2b00      	cmp	r3, #0
    36c4:	d1a3      	bne.n	360e <juggle(LEDStruct&)+0x532>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36c6:	f8d9 3000 	ldr.w	r3, [r9]
    36ca:	9307      	str	r3, [sp, #28]
	return ret;
    36cc:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    36ce:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    36d2:	fb0a f101 	mul.w	r1, sl, r1
    36d6:	021b      	lsls	r3, r3, #8
    36d8:	fb03 f301 	mul.w	r3, r3, r1
    36dc:	0379      	lsls	r1, r7, #13
    36de:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    36e2:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    36e4:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    36e6:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    36ea:	d503      	bpl.n	36f4 <juggle(LEDStruct&)+0x618>
    36ec:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    36f0:	3307      	adds	r3, #7
    36f2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    36f4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    36f6:	9e03      	ldr	r6, [sp, #12]
    36f8:	5c36      	ldrb	r6, [r6, r0]
    36fa:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    36fe:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3702:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    3706:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3708:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    370a:	bf48      	it	mi
    370c:	425b      	negmi	r3, r3
    370e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3712:	b21e      	sxth	r6, r3
    3714:	a805      	add	r0, sp, #20
    3716:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    371a:	9100      	str	r1, [sp, #0]
    371c:	4641      	mov	r1, r8
    371e:	f007 f9a1 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3722:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3726:	b29b      	uxth	r3, r3
    3728:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    372c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3730:	0c1b      	lsrs	r3, r3, #16
    3732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3736:	18e1      	adds	r1, r4, r3
    3738:	5ce2      	ldrb	r2, [r4, r3]
    373a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    373e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3742:	54e2      	strb	r2, [r4, r3]
    3744:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3748:	784a      	ldrb	r2, [r1, #1]
    374a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    374e:	704a      	strb	r2, [r1, #1]
    3750:	788b      	ldrb	r3, [r1, #2]
    3752:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3756:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    375a:	708b      	strb	r3, [r1, #2]
    375c:	4622      	mov	r2, r4
    375e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3760:	7819      	ldrb	r1, [r3, #0]
    3762:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3766:	7859      	ldrb	r1, [r3, #1]
    3768:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    376c:	7899      	ldrb	r1, [r3, #2]
    376e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3772:	3303      	adds	r3, #3
    3774:	42ab      	cmp	r3, r5
    3776:	f1a2 0203 	sub.w	r2, r2, #3
    377a:	d1f1      	bne.n	3760 <juggle(LEDStruct&)+0x684>
    377c:	e791      	b.n	36a2 <juggle(LEDStruct&)+0x5c6>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    377e:	b009      	add	sp, #36	; 0x24
    3780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3784:	4408      	add	r0, r1
    3786:	224a      	movs	r2, #74	; 0x4a
    3788:	4619      	mov	r1, r3
    378a:	f7fc fe93 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    378e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3792:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3796:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    379a:	9100      	str	r1, [sp, #0]
    379c:	4607      	mov	r7, r0
    379e:	4641      	mov	r1, r8
    37a0:	4650      	mov	r0, sl
    37a2:	f007 f95f 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    37a6:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    37aa:	18e1      	adds	r1, r4, r3
    37ac:	5ce2      	ldrb	r2, [r4, r3]
    37ae:	f89d 001c 	ldrb.w	r0, [sp, #28]
    37b2:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    37b6:	54e2      	strb	r2, [r4, r3]
    37b8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    37bc:	784a      	ldrb	r2, [r1, #1]
    37be:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    37c2:	704a      	strb	r2, [r1, #1]
    37c4:	788b      	ldrb	r3, [r1, #2]
    37c6:	f89d 201e 	ldrb.w	r2, [sp, #30]
    37ca:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    37ce:	708b      	strb	r3, [r1, #2]
    37d0:	4622      	mov	r2, r4
    37d2:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37d4:	7819      	ldrb	r1, [r3, #0]
    37d6:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    37da:	7859      	ldrb	r1, [r3, #1]
    37dc:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    37e0:	7899      	ldrb	r1, [r3, #2]
    37e2:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    37e6:	3303      	adds	r3, #3
    37e8:	42ab      	cmp	r3, r5
    37ea:	f1a2 0203 	sub.w	r2, r2, #3
    37ee:	d1f1      	bne.n	37d4 <juggle(LEDStruct&)+0x6f8>
    37f0:	e6db      	b.n	35aa <juggle(LEDStruct&)+0x4ce>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    37f2:	224a      	movs	r2, #74	; 0x4a
    37f4:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    37f8:	f7fc fe5c 	bl	4b4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    37fc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3800:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3804:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3808:	9100      	str	r1, [sp, #0]
    380a:	4607      	mov	r7, r0
    380c:	4641      	mov	r1, r8
    380e:	4650      	mov	r0, sl
    3810:	f007 f928 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3814:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3818:	18e1      	adds	r1, r4, r3
    381a:	5ce2      	ldrb	r2, [r4, r3]
    381c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3820:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3824:	54e2      	strb	r2, [r4, r3]
    3826:	f89d 301d 	ldrb.w	r3, [sp, #29]
    382a:	784a      	ldrb	r2, [r1, #1]
    382c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3830:	704a      	strb	r2, [r1, #1]
    3832:	788b      	ldrb	r3, [r1, #2]
    3834:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3838:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    383c:	708b      	strb	r3, [r1, #2]
    383e:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3842:	4623      	mov	r3, r4
    3844:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3846:	7819      	ldrb	r1, [r3, #0]
    3848:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    384c:	7859      	ldrb	r1, [r3, #1]
    384e:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3852:	7899      	ldrb	r1, [r3, #2]
    3854:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3858:	3303      	adds	r3, #3
    385a:	4283      	cmp	r3, r0
    385c:	f1a2 0203 	sub.w	r2, r2, #3
    3860:	d1f1      	bne.n	3846 <juggle(LEDStruct&)+0x76a>
    3862:	e638      	b.n	34d6 <juggle(LEDStruct&)+0x3fa>
    3864:	1fff9605 	.word	0x1fff9605
    3868:	000104f4 	.word	0x000104f4
    386c:	1fffa8f8 	.word	0x1fffa8f8
    3870:	0000fd64 	.word	0x0000fd64
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3874:	fb06 f305 	mul.w	r3, r6, r5
    3878:	224a      	movs	r2, #74	; 0x4a
    387a:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    387e:	f7fc fe5b 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    3882:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3886:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    388a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    388e:	9100      	str	r1, [sp, #0]
    3890:	4607      	mov	r7, r0
    3892:	4641      	mov	r1, r8
    3894:	4650      	mov	r0, sl
    3896:	f007 f8e5 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    389a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    389e:	18e1      	adds	r1, r4, r3
    38a0:	5ce2      	ldrb	r2, [r4, r3]
    38a2:	f89d 001c 	ldrb.w	r0, [sp, #28]
    38a6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    38aa:	54e2      	strb	r2, [r4, r3]
    38ac:	f89d 301d 	ldrb.w	r3, [sp, #29]
    38b0:	784a      	ldrb	r2, [r1, #1]
    38b2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    38b6:	704a      	strb	r2, [r1, #1]
    38b8:	788b      	ldrb	r3, [r1, #2]
    38ba:	f89d 201e 	ldrb.w	r2, [sp, #30]
    38be:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    38c2:	708b      	strb	r3, [r1, #2]
    38c4:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    38c8:	4623      	mov	r3, r4
    38ca:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38cc:	7819      	ldrb	r1, [r3, #0]
    38ce:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    38d2:	7859      	ldrb	r1, [r3, #1]
    38d4:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    38d8:	7899      	ldrb	r1, [r3, #2]
    38da:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    38de:	3303      	adds	r3, #3
    38e0:	4283      	cmp	r3, r0
    38e2:	f1a2 0203 	sub.w	r2, r2, #3
    38e6:	d1f1      	bne.n	38cc <juggle(LEDStruct&)+0x7f0>
    38e8:	e5f5      	b.n	34d6 <juggle(LEDStruct&)+0x3fa>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    38ea:	4613      	mov	r3, r2
    38ec:	4611      	mov	r1, r2
    38ee:	224a      	movs	r2, #74	; 0x4a
    38f0:	f7fc fe22 	bl	538 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.37]>
    38f4:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38f8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38fc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3900:	9100      	str	r1, [sp, #0]
    3902:	4607      	mov	r7, r0
    3904:	4641      	mov	r1, r8
    3906:	4650      	mov	r0, sl
    3908:	f007 f8ac 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    390c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3910:	18e1      	adds	r1, r4, r3
    3912:	5ce2      	ldrb	r2, [r4, r3]
    3914:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3918:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    391c:	54e2      	strb	r2, [r4, r3]
    391e:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3922:	784a      	ldrb	r2, [r1, #1]
    3924:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3928:	704a      	strb	r2, [r1, #1]
    392a:	788b      	ldrb	r3, [r1, #2]
    392c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3930:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3934:	708b      	strb	r3, [r1, #2]
    3936:	4622      	mov	r2, r4
    3938:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    393a:	7819      	ldrb	r1, [r3, #0]
    393c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3940:	7859      	ldrb	r1, [r3, #1]
    3942:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3946:	7899      	ldrb	r1, [r3, #2]
    3948:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    394c:	3303      	adds	r3, #3
    394e:	42ab      	cmp	r3, r5
    3950:	f1a2 0203 	sub.w	r2, r2, #3
    3954:	d1f1      	bne.n	393a <juggle(LEDStruct&)+0x85e>
    3956:	e628      	b.n	35aa <juggle(LEDStruct&)+0x4ce>

00003958 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    395c:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3960:	b08d      	sub	sp, #52	; 0x34
    3962:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3964:	2b00      	cmp	r3, #0
    3966:	f040 809d 	bne.w	3aa4 <juggle_half(LEDStruct&)+0x14c>
    396a:	4ec5      	ldr	r6, [pc, #788]	; (3c80 <juggle_half(LEDStruct&)+0x328>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    396c:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3970:	8833      	ldrh	r3, [r6, #0]
    3972:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3976:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    397a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    397e:	3019      	adds	r0, #25
    3980:	b280      	uxth	r0, r0
    3982:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3986:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    398a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    398e:	3519      	adds	r5, #25
    3990:	b2ad      	uxth	r5, r5
    3992:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3996:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    399a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    399e:	3319      	adds	r3, #25
    39a0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    39a4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    39a8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    39ac:	3319      	adds	r3, #25
    39ae:	b29b      	uxth	r3, r3
    39b0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    39b8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    39bc:	3119      	adds	r1, #25
    39be:	b289      	uxth	r1, r1
    39c0:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    39c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    39c8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    39cc:	3219      	adds	r2, #25
    39ce:	b292      	uxth	r2, r2
    39d0:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    39d4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    39d8:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    39dc:	f10e 0e19 	add.w	lr, lr, #25
    39e0:	fa1f fe8e 	uxth.w	lr, lr
    39e4:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    39e8:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    39ec:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    39f0:	f10c 0c19 	add.w	ip, ip, #25
    39f4:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39f8:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39fc:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    3a00:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a04:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a08:	b2ff      	uxtb	r7, r7
    3a0a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3a0e:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    3a12:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a16:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.juggle_beat		 = jb;
    3a1a:	b2c9      	uxtb	r1, r1
	leds.juggle_fade		 = jf;
    3a1c:	b2d3      	uxtb	r3, r2
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a22:	f3ce 12c0 	ubfx	r2, lr, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a26:	f108 0819 	add.w	r8, r8, #25
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a2a:	ea4f 2e27 	mov.w	lr, r7, asr #8
    3a2e:	fa1f f888 	uxth.w	r8, r8
	leds.juggle_beat		 = jb;
    3a32:	118f      	asrs	r7, r1, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a34:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a38:	f10e 0101 	add.w	r1, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a40:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    3a44:	111b      	asrs	r3, r3, #4
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3a46:	f3c0 19c0 	ubfx	r9, r0, #7, #1
	leds.juggle_phased		 = jp;
    3a4a:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a4e:	f107 0008 	add.w	r0, r7, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a52:	3201      	adds	r2, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a54:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3a58:	f884 1230 	strb.w	r1, [r4, #560]	; 0x230
    3a5c:	eb08 2118 	add.w	r1, r8, r8, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a60:	f103 0720 	add.w	r7, r3, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3a64:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3a66:	f3cc 13c0 	ubfx	r3, ip, #7, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    3a6a:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3a6e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3a72:	f884 0231 	strb.w	r0, [r4, #561]	; 0x231
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3a76:	250f      	movs	r5, #15
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3a78:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3a7a:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3a7e:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
	leds.juggle_diff		 = jd;
    3a82:	f884 2233 	strb.w	r2, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a86:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3a8a:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3a8e:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(8, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3a92:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3a96:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3a9a:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	f040 8290 	bne.w	3fc4 <juggle_half(LEDStruct&)+0x66c>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3aa4:	4b77      	ldr	r3, [pc, #476]	; (3c84 <juggle_half(LEDStruct&)+0x32c>)
    3aa6:	781b      	ldrb	r3, [r3, #0]
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	f040 8296 	bne.w	3fda <juggle_half(LEDStruct&)+0x682>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3aae:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3ab2:	b113      	cbz	r3, 3aba <juggle_half(LEDStruct&)+0x162>
    3ab4:	2300      	movs	r3, #0
    3ab6:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3aba:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3abe:	2196      	movs	r1, #150	; 0x96
    3ac0:	4620      	mov	r0, r4
    3ac2:	f006 ff6f 	bl	a9a4 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3ac6:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3aca:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3ace:	2f00      	cmp	r7, #0
    3ad0:	f040 8199 	bne.w	3e06 <juggle_half(LEDStruct&)+0x4ae>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3ad4:	2a00      	cmp	r2, #0
    3ad6:	f000 8350 	beq.w	417a <juggle_half(LEDStruct&)+0x822>
    3ada:	4b6b      	ldr	r3, [pc, #428]	; (3c88 <juggle_half(LEDStruct&)+0x330>)
    3adc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3c8c <juggle_half(LEDStruct&)+0x334>
    3ae0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 3c90 <juggle_half(LEDStruct&)+0x338>
    3ae4:	9303      	str	r3, [sp, #12]
    3ae6:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3aea:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3aee:	b2be      	uxth	r6, r7
    3af0:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3af2:	9a03      	ldr	r2, [sp, #12]
    3af4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3af8:	6812      	ldr	r2, [r2, #0]
    3afa:	9207      	str	r2, [sp, #28]
    3afc:	440b      	add	r3, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3afe:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3b00:	9a07      	ldr	r2, [sp, #28]
    3b02:	bf98      	it	ls
    3b04:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3b06:	f44f 718c 	mov.w	r1, #280	; 0x118
    3b0a:	bf98      	it	ls
    3b0c:	b29b      	uxthls	r3, r3
    3b0e:	fb01 f202 	mul.w	r2, r1, r2
    3b12:	fb03 f302 	mul.w	r3, r3, r2
    3b16:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3b1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3b1e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b20:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b22:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b26:	d503      	bpl.n	3b30 <juggle_half(LEDStruct&)+0x1d8>
    3b28:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3b2c:	3207      	adds	r2, #7
    3b2e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b30:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b32:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3b36:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3b3a:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3b3e:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3b42:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b44:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3b46:	bf48      	it	mi
    3b48:	4255      	negmi	r5, r2
    3b4a:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b4e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b52:	bf54      	ite	pl
    3b54:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3b56:	b22d      	sxthmi	r5, r5
    3b58:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b5c:	9100      	str	r1, [sp, #0]
    3b5e:	4648      	mov	r0, r9
    3b60:	4641      	mov	r1, r8
    3b62:	f006 ff7f 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b66:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3b6a:	2226      	movs	r2, #38	; 0x26
    3b6c:	b29b      	uxth	r3, r3
    3b6e:	fb02 f303 	mul.w	r3, r2, r3
    3b72:	0c1b      	lsrs	r3, r3, #16
    3b74:	3325      	adds	r3, #37	; 0x25
    3b76:	b29b      	uxth	r3, r3
    3b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b7c:	18e1      	adds	r1, r4, r3
    3b7e:	5ce2      	ldrb	r2, [r4, r3]
    3b80:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3b84:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b88:	54e2      	strb	r2, [r4, r3]
    3b8a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3b8e:	784a      	ldrb	r2, [r1, #1]
    3b90:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b94:	704a      	strb	r2, [r1, #1]
    3b96:	788b      	ldrb	r3, [r1, #2]
    3b98:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3b9c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ba0:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ba2:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3ba6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3baa:	4416      	add	r6, r2
    3bac:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bae:	9b03      	ldr	r3, [sp, #12]
    3bb0:	681b      	ldr	r3, [r3, #0]
    3bb2:	9306      	str	r3, [sp, #24]
    3bb4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3bb6:	9a06      	ldr	r2, [sp, #24]
    3bb8:	bf98      	it	ls
    3bba:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3bbc:	f44f 738c 	mov.w	r3, #280	; 0x118
    3bc0:	bf98      	it	ls
    3bc2:	b2b6      	uxthls	r6, r6
    3bc4:	fb03 f202 	mul.w	r2, r3, r2
    3bc8:	fb06 f202 	mul.w	r2, r6, r2
    3bcc:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3bd0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bd4:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bd6:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bda:	d503      	bpl.n	3be4 <juggle_half(LEDStruct&)+0x28c>
    3bdc:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3be0:	3307      	adds	r3, #7
    3be2:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3be4:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3be6:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3bea:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3bee:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3bf2:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3bf6:	0416      	lsls	r6, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bf8:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3bfa:	bf48      	it	mi
    3bfc:	425b      	negmi	r3, r3
    3bfe:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3c02:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3c06:	b21d      	sxth	r5, r3
    3c08:	4648      	mov	r0, r9
    3c0a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3c0e:	9100      	str	r1, [sp, #0]
    3c10:	4641      	mov	r1, r8
    3c12:	f006 ff27 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3c16:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3c1a:	2226      	movs	r2, #38	; 0x26
    3c1c:	b29b      	uxth	r3, r3
    3c1e:	fb02 f303 	mul.w	r3, r2, r3
    3c22:	0c1b      	lsrs	r3, r3, #16
    3c24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c28:	18e1      	adds	r1, r4, r3
    3c2a:	5ce2      	ldrb	r2, [r4, r3]
    3c2c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3c30:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3c34:	54e2      	strb	r2, [r4, r3]
    3c36:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3c3a:	784a      	ldrb	r2, [r1, #1]
    3c3c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3c40:	704a      	strb	r2, [r1, #1]
    3c42:	788b      	ldrb	r3, [r1, #2]
    3c44:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3c48:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3c4c:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c4e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3c52:	3701      	adds	r7, #1
    3c54:	b2ff      	uxtb	r7, r7
    3c56:	42bb      	cmp	r3, r7
    3c58:	461a      	mov	r2, r3
    3c5a:	f63f af48 	bhi.w	3aee <juggle_half(LEDStruct&)+0x196>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3c5e:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3c62:	2a00      	cmp	r2, #0
    3c64:	f000 819a 	beq.w	3f9c <juggle_half(LEDStruct&)+0x644>
		if (leds.this_dir) {
    3c68:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3c6c:	2f00      	cmp	r7, #0
    3c6e:	f040 81c1 	bne.w	3ff4 <juggle_half(LEDStruct&)+0x69c>
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3c72:	f44f 798c 	mov.w	r9, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3c76:	2b00      	cmp	r3, #0
    3c78:	f000 80c2 	beq.w	3e00 <juggle_half(LEDStruct&)+0x4a8>
    3c7c:	e00a      	b.n	3c94 <juggle_half(LEDStruct&)+0x33c>
    3c7e:	bf00      	nop
    3c80:	1fff8784 	.word	0x1fff8784
    3c84:	1fff9605 	.word	0x1fff9605
    3c88:	1fffa8f8 	.word	0x1fffa8f8
    3c8c:	000104f4 	.word	0x000104f4
    3c90:	0000fd64 	.word	0x0000fd64
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3c94:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3c98:	3301      	adds	r3, #1
    3c9a:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c9c:	9a03      	ldr	r2, [sp, #12]
    3c9e:	b2be      	uxth	r6, r7
    3ca0:	6812      	ldr	r2, [r2, #0]
    3ca2:	920b      	str	r2, [sp, #44]	; 0x2c
    3ca4:	4433      	add	r3, r6
    3ca6:	b29b      	uxth	r3, r3
    3ca8:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3cac:	bf9c      	itt	ls
    3cae:	021b      	lslls	r3, r3, #8
    3cb0:	b29b      	uxthls	r3, r3
    3cb2:	fb09 f202 	mul.w	r2, r9, r2
    3cb6:	fb03 f302 	mul.w	r3, r3, r2
    3cba:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3cbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3cc2:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cc4:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cc6:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cca:	d503      	bpl.n	3cd4 <juggle_half(LEDStruct&)+0x37c>
    3ccc:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3cd0:	3207      	adds	r2, #7
    3cd2:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3cd4:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3cd6:	f3c2 0246 	ubfx	r2, r2, #1, #7
    3cda:	f81b 5001 	ldrb.w	r5, [fp, r1]
    3cde:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    3ce2:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    3ce6:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ce8:	b2ad      	uxth	r5, r5
    3cea:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3cee:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3cf2:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3cf6:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3cf8:	bf48      	it	mi
    3cfa:	426d      	negmi	r5, r5
    3cfc:	4641      	mov	r1, r8
    3cfe:	a809      	add	r0, sp, #36	; 0x24
    3d00:	b22d      	sxth	r5, r5
    3d02:	f006 feaf 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3d06:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3d0a:	2226      	movs	r2, #38	; 0x26
    3d0c:	b29b      	uxth	r3, r3
    3d0e:	fb02 f303 	mul.w	r3, r2, r3
    3d12:	0c1b      	lsrs	r3, r3, #16
    3d14:	3370      	adds	r3, #112	; 0x70
    3d16:	b29b      	uxth	r3, r3
    3d18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3d1c:	18e1      	adds	r1, r4, r3
    3d1e:	5ce2      	ldrb	r2, [r4, r3]
    3d20:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3d24:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3d28:	54e2      	strb	r2, [r4, r3]
    3d2a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3d2e:	784a      	ldrb	r2, [r1, #1]
    3d30:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3d34:	704a      	strb	r2, [r1, #1]
    3d36:	788b      	ldrb	r3, [r1, #2]
    3d38:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3d3c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3d40:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d42:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3d46:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3d4a:	4413      	add	r3, r2
    3d4c:	3301      	adds	r3, #1
    3d4e:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d50:	9b03      	ldr	r3, [sp, #12]
    3d52:	681b      	ldr	r3, [r3, #0]
    3d54:	930a      	str	r3, [sp, #40]	; 0x28
    3d56:	b2b6      	uxth	r6, r6
    3d58:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3d5c:	bf9c      	itt	ls
    3d5e:	0236      	lslls	r6, r6, #8
    3d60:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3d62:	fb09 f202 	mul.w	r2, r9, r2
    3d66:	fb06 f202 	mul.w	r2, r6, r2
    3d6a:	f3c2 420e 	ubfx	r2, r2, #16, #15
    3d6e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d72:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d74:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d78:	d503      	bpl.n	3d82 <juggle_half(LEDStruct&)+0x42a>
    3d7a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3d7e:	3307      	adds	r3, #7
    3d80:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d82:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d84:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3d88:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3d8c:	f83a 3010 	ldrh.w	r3, [sl, r0, lsl #1]
    3d90:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    3d94:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d96:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3d98:	bf48      	it	mi
    3d9a:	425b      	negmi	r3, r3
    3d9c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3da0:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3da4:	b21d      	sxth	r5, r3
    3da6:	a809      	add	r0, sp, #36	; 0x24
    3da8:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3dac:	9100      	str	r1, [sp, #0]
    3dae:	4641      	mov	r1, r8
    3db0:	f006 fe58 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3db4:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3db8:	b29b      	uxth	r3, r3
    3dba:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3dbe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3dc2:	0c1b      	lsrs	r3, r3, #16
    3dc4:	334b      	adds	r3, #75	; 0x4b
    3dc6:	b29b      	uxth	r3, r3
    3dc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3dcc:	18e1      	adds	r1, r4, r3
    3dce:	5ce2      	ldrb	r2, [r4, r3]
    3dd0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3dd4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3dd8:	54e2      	strb	r2, [r4, r3]
    3dda:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3dde:	784a      	ldrb	r2, [r1, #1]
    3de0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3de4:	704a      	strb	r2, [r1, #1]
    3de6:	788b      	ldrb	r3, [r1, #2]
    3de8:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3dec:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3df0:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3df2:	3701      	adds	r7, #1
    3df4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3df8:	b2ff      	uxtb	r7, r7
    3dfa:	42bb      	cmp	r3, r7
    3dfc:	f63f af4a 	bhi.w	3c94 <juggle_half(LEDStruct&)+0x33c>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3e00:	b00d      	add	sp, #52	; 0x34
    3e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3e06:	2a00      	cmp	r2, #0
    3e08:	f000 81b7 	beq.w	417a <juggle_half(LEDStruct&)+0x822>
    3e0c:	4b75      	ldr	r3, [pc, #468]	; (3fe4 <juggle_half(LEDStruct&)+0x68c>)
    3e0e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 3fec <juggle_half(LEDStruct&)+0x694>
    3e12:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 3ff0 <juggle_half(LEDStruct&)+0x698>
    3e16:	9303      	str	r3, [sp, #12]
    3e18:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3e1c:	2700      	movs	r7, #0
    3e1e:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e22:	b2be      	uxth	r6, r7
    3e24:	1993      	adds	r3, r2, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e26:	9a03      	ldr	r2, [sp, #12]
    3e28:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3e2c:	6812      	ldr	r2, [r2, #0]
    3e2e:	9205      	str	r2, [sp, #20]
    3e30:	440b      	add	r3, r1
    3e32:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3e34:	9a05      	ldr	r2, [sp, #20]
    3e36:	bf98      	it	ls
    3e38:	021b      	lslls	r3, r3, #8
    3e3a:	f44f 718c 	mov.w	r1, #280	; 0x118
    3e3e:	bf98      	it	ls
    3e40:	b29b      	uxthls	r3, r3
    3e42:	fb01 f202 	mul.w	r2, r1, r2
    3e46:	fb03 f302 	mul.w	r3, r3, r2
    3e4a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e52:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e54:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e58:	d503      	bpl.n	3e62 <juggle_half(LEDStruct&)+0x50a>
    3e5a:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e5e:	3207      	adds	r2, #7
    3e60:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e62:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e64:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3e68:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e6c:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3e70:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3e74:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e76:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3e78:	bf48      	it	mi
    3e7a:	4255      	negmi	r5, r2
    3e7c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3e80:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e84:	bf54      	ite	pl
    3e86:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3e88:	b22d      	sxthmi	r5, r5
    3e8a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3e8e:	9100      	str	r1, [sp, #0]
    3e90:	4648      	mov	r0, r9
    3e92:	4641      	mov	r1, r8
    3e94:	f006 fde6 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e98:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e9c:	2226      	movs	r2, #38	; 0x26
    3e9e:	b29b      	uxth	r3, r3
    3ea0:	fb02 f303 	mul.w	r3, r2, r3
    3ea4:	0c1b      	lsrs	r3, r3, #16
    3ea6:	3325      	adds	r3, #37	; 0x25
    3ea8:	b29b      	uxth	r3, r3
    3eaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3eae:	18e1      	adds	r1, r4, r3
    3eb0:	5ce2      	ldrb	r2, [r4, r3]
    3eb2:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3eb6:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3eba:	54e2      	strb	r2, [r4, r3]
    3ebc:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3ec0:	784a      	ldrb	r2, [r1, #1]
    3ec2:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3ec6:	704a      	strb	r2, [r1, #1]
    3ec8:	788b      	ldrb	r3, [r1, #2]
    3eca:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3ece:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ed2:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ed4:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3ed8:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3edc:	4416      	add	r6, r2
    3ede:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3ee0:	9b03      	ldr	r3, [sp, #12]
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	9304      	str	r3, [sp, #16]
    3ee6:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3ee8:	9b04      	ldr	r3, [sp, #16]
    3eea:	bf98      	it	ls
    3eec:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3eee:	f44f 728c 	mov.w	r2, #280	; 0x118
    3ef2:	bf98      	it	ls
    3ef4:	b2b6      	uxthls	r6, r6
    3ef6:	fb02 f303 	mul.w	r3, r2, r3
    3efa:	fb06 f303 	mul.w	r3, r6, r3
    3efe:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f06:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f08:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f0a:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f0e:	d503      	bpl.n	3f18 <juggle_half(LEDStruct&)+0x5c0>
    3f10:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3f14:	3207      	adds	r2, #7
    3f16:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f18:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f1a:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3f1e:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3f22:	f83a 2010 	ldrh.w	r2, [sl, r0, lsl #1]
    3f26:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3f2a:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f2c:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3f2e:	bf48      	it	mi
    3f30:	4252      	negmi	r2, r2
    3f32:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3f36:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3f3a:	b215      	sxth	r5, r2
    3f3c:	4648      	mov	r0, r9
    3f3e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3f42:	9100      	str	r1, [sp, #0]
    3f44:	4641      	mov	r1, r8
    3f46:	f006 fd8d 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f4a:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3f4e:	2226      	movs	r2, #38	; 0x26
    3f50:	b29b      	uxth	r3, r3
    3f52:	fb02 f303 	mul.w	r3, r2, r3
    3f56:	0c1b      	lsrs	r3, r3, #16
    3f58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3f5c:	18e1      	adds	r1, r4, r3
    3f5e:	5ce2      	ldrb	r2, [r4, r3]
    3f60:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3f64:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f68:	54e2      	strb	r2, [r4, r3]
    3f6a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3f6e:	784a      	ldrb	r2, [r1, #1]
    3f70:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f74:	704a      	strb	r2, [r1, #1]
    3f76:	788b      	ldrb	r3, [r1, #2]
    3f78:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3f7c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f80:	708b      	strb	r3, [r1, #2]

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f82:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f86:	3701      	adds	r7, #1
    3f88:	b2ff      	uxtb	r7, r7
    3f8a:	42bb      	cmp	r3, r7
    3f8c:	461a      	mov	r2, r3
    3f8e:	f63f af48 	bhi.w	3e22 <juggle_half(LEDStruct&)+0x4ca>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    3f92:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3f96:	2a00      	cmp	r2, #0
    3f98:	f47f ae66 	bne.w	3c68 <juggle_half(LEDStruct&)+0x310>
    3f9c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3fa0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3fa2:	7822      	ldrb	r2, [r4, #0]
    3fa4:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3fa8:	7862      	ldrb	r2, [r4, #1]
    3faa:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3fae:	78a2      	ldrb	r2, [r4, #2]
    3fb0:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3fb4:	3403      	adds	r4, #3
    3fb6:	42a1      	cmp	r1, r4
    3fb8:	f1a3 0303 	sub.w	r3, r3, #3
    3fbc:	d1f1      	bne.n	3fa2 <juggle_half(LEDStruct&)+0x64a>
		}
	}
	else {
		strip_sync(leds);
	}
}
    3fbe:	b00d      	add	sp, #52	; 0x34
    3fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3fc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3fc8:	fa02 f300 	lsl.w	r3, r2, r0
    3fcc:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3fd0:	4b05      	ldr	r3, [pc, #20]	; (3fe8 <juggle_half(LEDStruct&)+0x690>)
    3fd2:	781b      	ldrb	r3, [r3, #0]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	f43f ad6a 	beq.w	3aae <juggle_half(LEDStruct&)+0x156>
    3fda:	4620      	mov	r0, r4
    3fdc:	f7ff f82e 	bl	303c <juggle_update(LEDStruct&)>
    3fe0:	e565      	b.n	3aae <juggle_half(LEDStruct&)+0x156>
    3fe2:	bf00      	nop
    3fe4:	1fffa8f8 	.word	0x1fffa8f8
    3fe8:	1fff9605 	.word	0x1fff9605
    3fec:	000104f4 	.word	0x000104f4
    3ff0:	0000fd64 	.word	0x0000fd64
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	f43f af03 	beq.w	3e00 <juggle_half(LEDStruct&)+0x4a8>
    3ffa:	2700      	movs	r7, #0
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ffc:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4000:	3301      	adds	r3, #1
    4002:	4413      	add	r3, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4004:	9a03      	ldr	r2, [sp, #12]
    4006:	b2be      	uxth	r6, r7
    4008:	6812      	ldr	r2, [r2, #0]
    400a:	9209      	str	r2, [sp, #36]	; 0x24
    400c:	4433      	add	r3, r6
    400e:	b29b      	uxth	r3, r3
    4010:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4012:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4014:	bf98      	it	ls
    4016:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4018:	f44f 718c 	mov.w	r1, #280	; 0x118
    401c:	bf98      	it	ls
    401e:	b29b      	uxthls	r3, r3
    4020:	fb01 f202 	mul.w	r2, r1, r2
    4024:	fb03 f302 	mul.w	r3, r3, r2
    4028:	f3c3 430e 	ubfx	r3, r3, #16, #15
    402c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4030:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4032:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4036:	d503      	bpl.n	4040 <juggle_half(LEDStruct&)+0x6e8>
    4038:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    403c:	3207      	adds	r2, #7
    403e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4040:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4042:	f3c2 0246 	ubfx	r2, r2, #1, #7
    4046:	f81b 5001 	ldrb.w	r5, [fp, r1]
    404a:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    404e:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4052:	0418      	lsls	r0, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4054:	b2ad      	uxth	r5, r5
    4056:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    405a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    405e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4062:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    4064:	bf48      	it	mi
    4066:	426d      	negmi	r5, r5
    4068:	4641      	mov	r1, r8
    406a:	4648      	mov	r0, r9
    406c:	b22d      	sxth	r5, r5
    406e:	f006 fcf9 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4072:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4076:	2226      	movs	r2, #38	; 0x26
    4078:	b29b      	uxth	r3, r3
    407a:	fb02 f303 	mul.w	r3, r2, r3
    407e:	0c1b      	lsrs	r3, r3, #16
    4080:	3370      	adds	r3, #112	; 0x70
    4082:	b29b      	uxth	r3, r3
    4084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4088:	18e1      	adds	r1, r4, r3
    408a:	5ce2      	ldrb	r2, [r4, r3]
    408c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4090:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4094:	54e2      	strb	r2, [r4, r3]
    4096:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    409a:	784a      	ldrb	r2, [r1, #1]
    409c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40a0:	704a      	strb	r2, [r1, #1]
    40a2:	788b      	ldrb	r3, [r1, #2]
    40a4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    40a8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40ac:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    40ae:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    40b2:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40b6:	4413      	add	r3, r2
    40b8:	3301      	adds	r3, #1
    40ba:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40bc:	9b03      	ldr	r3, [sp, #12]
    40be:	681b      	ldr	r3, [r3, #0]
    40c0:	9308      	str	r3, [sp, #32]
    40c2:	b2b6      	uxth	r6, r6
    40c4:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    40c6:	9b08      	ldr	r3, [sp, #32]
    40c8:	bf98      	it	ls
    40ca:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    40cc:	f44f 728c 	mov.w	r2, #280	; 0x118
    40d0:	bf98      	it	ls
    40d2:	b2b6      	uxthls	r6, r6
    40d4:	fb02 f303 	mul.w	r3, r2, r3
    40d8:	fb06 f303 	mul.w	r3, r6, r3
    40dc:	f3c3 430e 	ubfx	r3, r3, #16, #15
    40e0:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    40e4:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    40e6:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    40e8:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    40ec:	d503      	bpl.n	40f6 <juggle_half(LEDStruct&)+0x79e>
    40ee:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    40f2:	3207      	adds	r2, #7
    40f4:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    40f6:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    40f8:	f3c2 0246 	ubfx	r2, r2, #1, #7
    40fc:	f81b 5001 	ldrb.w	r5, [fp, r1]
    4100:	f83a 1011 	ldrh.w	r1, [sl, r1, lsl #1]
    4104:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    4108:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    410a:	b2ad      	uxth	r5, r5
    410c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4110:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4114:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4118:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    411a:	bf48      	it	mi
    411c:	426d      	negmi	r5, r5
    411e:	4641      	mov	r1, r8
    4120:	4648      	mov	r0, r9
    4122:	b22d      	sxth	r5, r5
    4124:	f006 fc9e 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4128:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    412c:	b29b      	uxth	r3, r3
    412e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4132:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4136:	0c1b      	lsrs	r3, r3, #16
    4138:	334b      	adds	r3, #75	; 0x4b
    413a:	b29b      	uxth	r3, r3
    413c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4140:	18e1      	adds	r1, r4, r3
    4142:	5ce2      	ldrb	r2, [r4, r3]
    4144:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4148:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    414c:	54e2      	strb	r2, [r4, r3]
    414e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4152:	784a      	ldrb	r2, [r1, #1]
    4154:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4158:	704a      	strb	r2, [r1, #1]
    415a:	788b      	ldrb	r3, [r1, #2]
    415c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4160:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4164:	708b      	strb	r3, [r1, #2]
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4166:	3701      	adds	r7, #1
    4168:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    416c:	b2ff      	uxtb	r7, r7
    416e:	42bb      	cmp	r3, r7
    4170:	f63f af44 	bhi.w	3ffc <juggle_half(LEDStruct&)+0x6a4>
		}
	}
	else {
		strip_sync(leds);
	}
}
    4174:	b00d      	add	sp, #52	; 0x34
    4176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
		}
	}

	if (leds.use_full_range) {
    417a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    417e:	2b00      	cmp	r3, #0
    4180:	f43f af0c 	beq.w	3f9c <juggle_half(LEDStruct&)+0x644>
    4184:	e63c      	b.n	3e00 <juggle_half(LEDStruct&)+0x4a8>
    4186:	bf00      	nop

00004188 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4188:	4b17      	ldr	r3, [pc, #92]	; (41e8 <rainbow_update(LEDStruct&)+0x60>)

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    418a:	4a18      	ldr	r2, [pc, #96]	; (41ec <rainbow_update(LEDStruct&)+0x64>)
	switch (update_var) {
    418c:	781b      	ldrb	r3, [r3, #0]

    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    418e:	2100      	movs	r1, #0
    4190:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4192:	2b03      	cmp	r3, #3
    4194:	d80a      	bhi.n	41ac <rainbow_update(LEDStruct&)+0x24>
    4196:	e8df f003 	tbb	[pc, r3]
    419a:	0217      	.short	0x0217
    419c:	0b11      	.short	0x0b11
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    419e:	4b14      	ldr	r3, [pc, #80]	; (41f0 <rainbow_update(LEDStruct&)+0x68>)
    41a0:	881b      	ldrh	r3, [r3, #0]
    41a2:	3300      	adds	r3, #0
    41a4:	bf18      	it	ne
    41a6:	2301      	movne	r3, #1
    41a8:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41ac:	f7fe b81a 	b.w	21e4 <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    41b0:	4b0f      	ldr	r3, [pc, #60]	; (41f0 <rainbow_update(LEDStruct&)+0x68>)
    41b2:	881b      	ldrh	r3, [r3, #0]
    41b4:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		default:	break;
	}
	LEDDebug(leds);
    41b8:	f7fe b814 	b.w	21e4 <LEDDebug(LEDStruct&)>
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    41bc:	4b0c      	ldr	r3, [pc, #48]	; (41f0 <rainbow_update(LEDStruct&)+0x68>)
    41be:	881b      	ldrh	r3, [r3, #0]
    41c0:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41c4:	f7fe b80e 	b.w	21e4 <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    41c8:	4b09      	ldr	r3, [pc, #36]	; (41f0 <rainbow_update(LEDStruct&)+0x68>)
    41ca:	881b      	ldrh	r3, [r3, #0]
    41cc:	2b00      	cmp	r3, #0
    41ce:	bf14      	ite	ne
    41d0:	2301      	movne	r3, #1
    41d2:	2300      	moveq	r3, #0
    41d4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    41d8:	bf14      	ite	ne
    41da:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    41dc:	234b      	moveq	r3, #75	; 0x4b
    41de:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		default:	break;
	}
	LEDDebug(leds);
    41e2:	f7fd bfff 	b.w	21e4 <LEDDebug(LEDStruct&)>
    41e6:	bf00      	nop
    41e8:	1fff9e5c 	.word	0x1fff9e5c
    41ec:	1fff9605 	.word	0x1fff9605
    41f0:	1fff9e54 	.word	0x1fff9e54

000041f4 <rainbow_march(LEDStruct&)>:



void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    41f4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    41f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41fc:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    41fe:	2b00      	cmp	r3, #0
    4200:	d14a      	bne.n	4298 <rainbow_march(LEDStruct&)+0xa4>
    4202:	4860      	ldr	r0, [pc, #384]	; (4384 <rainbow_march(LEDStruct&)+0x190>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4204:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4208:	8803      	ldrh	r3, [r0, #0]
    420a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    420e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4212:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4216:	3319      	adds	r3, #25
    4218:	b29b      	uxth	r3, r3
    421a:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    421e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4222:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4226:	3219      	adds	r2, #25
    4228:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    422a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    422e:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4230:	eb02 2142 	add.w	r1, r2, r2, lsl #9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4234:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4238:	eb02 0181 	add.w	r1, r2, r1, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    423c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4240:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4244:	3119      	adds	r1, #25
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4246:	121b      	asrs	r3, r3, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4248:	b289      	uxth	r1, r1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    424a:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    424c:	2601      	movs	r6, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    424e:	eb01 2511 	add.w	r5, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4252:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    4254:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4258:	2706      	movs	r7, #6
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    425a:	8001      	strh	r1, [r0, #0]
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    425c:	42b3      	cmp	r3, r6

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    425e:	f04f 010f 	mov.w	r1, #15

	leds.use_full_range = ufr;
    4262:	f884 51c4 	strb.w	r5, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
    4266:	f884 622e 	strb.w	r6, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    426a:	f884 627b 	strb.w	r6, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    426e:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4272:	f884 11c3 	strb.w	r1, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4276:	f000 8083 	beq.w	4380 <rainbow_march(LEDStruct&)+0x18c>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    427a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    427e:	b2d2      	uxtb	r2, r2
    4280:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4284:	1212      	asrs	r2, r2, #8
    4286:	4432      	add	r2, r6
    4288:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    428a:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    428e:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	

    if (DEBUG) { LEDDebug(leds); }
    4292:	4620      	mov	r0, r4
    4294:	f7fd ffa6 	bl	21e4 <LEDDebug(LEDStruct&)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4298:	4b3b      	ldr	r3, [pc, #236]	; (4388 <rainbow_march(LEDStruct&)+0x194>)
    429a:	781b      	ldrb	r3, [r3, #0]
    429c:	2b00      	cmp	r3, #0
    429e:	d16b      	bne.n	4378 <rainbow_march(LEDStruct&)+0x184>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    42a0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    42a4:	bb43      	cbnz	r3, 42f8 <rainbow_march(LEDStruct&)+0x104>
    42a6:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    42aa:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    42ae:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    42b0:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    42b4:	b2d2      	uxtb	r2, r2
    42b6:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    42ba:	bb4b      	cbnz	r3, 4310 <rainbow_march(LEDStruct&)+0x11c>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    42bc:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    42c0:	2b00      	cmp	r3, #0
    42c2:	d151      	bne.n	4368 <rainbow_march(LEDStruct&)+0x174>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    42c4:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    42c8:	214b      	movs	r1, #75	; 0x4b
    42ca:	4620      	mov	r0, r4
    42cc:	f006 fab8 	bl	a840 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    42d0:	4620      	mov	r0, r4
    42d2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    42d6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    42d8:	7802      	ldrb	r2, [r0, #0]
    42da:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    42de:	7842      	ldrb	r2, [r0, #1]
    42e0:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    42e4:	7882      	ldrb	r2, [r0, #2]
    42e6:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    42ea:	3003      	adds	r0, #3
    42ec:	4288      	cmp	r0, r1
    42ee:	f1a3 0303 	sub.w	r3, r3, #3
    42f2:	d1f1      	bne.n	42d8 <rainbow_march(LEDStruct&)+0xe4>
    42f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    42f8:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    42fc:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4300:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    4302:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4306:	b2d2      	uxtb	r2, r2
    4308:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    430c:	2b00      	cmp	r3, #0
    430e:	d0d5      	beq.n	42bc <rainbow_march(LEDStruct&)+0xc8>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4310:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4314:	2125      	movs	r1, #37	; 0x25
    4316:	4620      	mov	r0, r4
    4318:	f006 fa92 	bl	a840 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    431c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4320:	4623      	mov	r3, r4
    4322:	4621      	mov	r1, r4
    4324:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4326:	7810      	ldrb	r0, [r2, #0]
    4328:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    432c:	7850      	ldrb	r0, [r2, #1]
    432e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4332:	7890      	ldrb	r0, [r2, #2]
    4334:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4338:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    433a:	42aa      	cmp	r2, r5
    433c:	f1a1 0103 	sub.w	r1, r1, #3
    4340:	d1f1      	bne.n	4326 <rainbow_march(LEDStruct&)+0x132>
    4342:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4346:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4348:	7802      	ldrb	r2, [r0, #0]
    434a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    434e:	7842      	ldrb	r2, [r0, #1]
    4350:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4354:	7882      	ldrb	r2, [r0, #2]
    4356:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    435a:	3003      	adds	r0, #3
    435c:	4288      	cmp	r0, r1
    435e:	f1a3 0303 	sub.w	r3, r3, #3
    4362:	d1f1      	bne.n	4348 <rainbow_march(LEDStruct&)+0x154>
    4364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4368:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    436c:	4620      	mov	r0, r4
    436e:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    4370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4374:	f006 ba64 	b.w	a840 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4378:	4620      	mov	r0, r4
    437a:	f7ff ff05 	bl	4188 <rainbow_update(LEDStruct&)>
    437e:	e78f      	b.n	42a0 <rainbow_march(LEDStruct&)+0xac>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4380:	461a      	mov	r2, r3
    4382:	e782      	b.n	428a <rainbow_march(LEDStruct&)+0x96>
    4384:	1fff8784 	.word	0x1fff8784
    4388:	1fff9605 	.word	0x1fff9605

0000438c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    438c:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    438e:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4392:	f89d 6018 	ldrb.w	r6, [sp, #24]
    4396:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    439a:	250a      	movs	r5, #10
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    439c:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    439e:	3c0e      	subs	r4, #14
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    43a0:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    43a4:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    43a6:	f04f 050f 	mov.w	r5, #15
    43aa:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    43ae:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    43b2:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    43b6:	d93d      	bls.n	4434 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    43b8:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    43ba:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    43bc:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    43c0:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    43c4:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    43c8:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    43cc:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    43d0:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    43d4:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    43d8:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    43dc:	4c1f      	ldr	r4, [pc, #124]	; (445c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    43de:	8823      	ldrh	r3, [r4, #0]
    43e0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    43e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    43e8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    43ec:	3319      	adds	r3, #25
    43ee:	b29b      	uxth	r3, r3
    43f0:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    43f4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    43f8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    43fc:	3219      	adds	r2, #25
    43fe:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4400:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4404:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4408:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    440a:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    440c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4410:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4414:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4416:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4418:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    441c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4420:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4424:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4428:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    442c:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    442e:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4432:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4434:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4438:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    443c:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4440:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4444:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4448:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    444c:	b112      	cbz	r2, 4454 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    444e:	2225      	movs	r2, #37	; 0x25
    4450:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    4454:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4458:	e7c0      	b.n	43dc <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    445a:	bf00      	nop
    445c:	1fff8784 	.word	0x1fff8784

00004460 <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4460:	4b19      	ldr	r3, [pc, #100]	; (44c8 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4462:	4a1a      	ldr	r2, [pc, #104]	; (44cc <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    4464:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4466:	2100      	movs	r1, #0
    4468:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    446a:	2b05      	cmp	r3, #5
    446c:	d808      	bhi.n	4480 <fire_update(LEDStruct&)+0x20>
    446e:	e8df f003 	tbb	[pc, r3]
    4472:	150f      	.short	0x150f
    4474:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4478:	4b15      	ldr	r3, [pc, #84]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    447a:	881b      	ldrh	r3, [r3, #0]
    447c:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4480:	f7fd beb0 	b.w	21e4 <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4484:	4b12      	ldr	r3, [pc, #72]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    4486:	881b      	ldrh	r3, [r3, #0]
    4488:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    448c:	f7fd beaa 	b.w	21e4 <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    4490:	4b0f      	ldr	r3, [pc, #60]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    4492:	881b      	ldrh	r3, [r3, #0]
    4494:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4498:	f7fd bea4 	b.w	21e4 <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    449c:	4b0c      	ldr	r3, [pc, #48]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    449e:	881b      	ldrh	r3, [r3, #0]
    44a0:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44a4:	f7fd be9e 	b.w	21e4 <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    44a8:	4b09      	ldr	r3, [pc, #36]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    44aa:	881b      	ldrh	r3, [r3, #0]
    44ac:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44b0:	f7fd be98 	b.w	21e4 <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    44b4:	4b06      	ldr	r3, [pc, #24]	; (44d0 <fire_update(LEDStruct&)+0x70>)
    44b6:	881b      	ldrh	r3, [r3, #0]
    44b8:	3300      	adds	r3, #0
    44ba:	bf18      	it	ne
    44bc:	2301      	movne	r3, #1
    44be:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    44c2:	f7fd be8f 	b.w	21e4 <LEDDebug(LEDStruct&)>
    44c6:	bf00      	nop
    44c8:	1fff9e5c 	.word	0x1fff9e5c
    44cc:	1fff9605 	.word	0x1fff9605
    44d0:	1fff9e54 	.word	0x1fff9e54

000044d4 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    44d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    44d8:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    44dc:	4dd0      	ldr	r5, [pc, #832]	; (4820 <fire(LEDStruct&)+0x34c>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    44de:	b086      	sub	sp, #24
    44e0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    44e2:	2b00      	cmp	r3, #0
    44e4:	f000 8229 	beq.w	493a <fire(LEDStruct&)+0x466>
	if (keyboard_update) { fire_update(leds); }
    44e8:	4bce      	ldr	r3, [pc, #824]	; (4824 <fire(LEDStruct&)+0x350>)
    44ea:	781b      	ldrb	r3, [r3, #0]
    44ec:	2b00      	cmp	r3, #0
    44ee:	f040 8220 	bne.w	4932 <fire(LEDStruct&)+0x45e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    44f2:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    44f6:	2b00      	cmp	r3, #0
    44f8:	f000 82d1 	beq.w	4a9e <fire(LEDStruct&)+0x5ca>
    44fc:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4500:	882a      	ldrh	r2, [r5, #0]
    4502:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4506:	004f      	lsls	r7, r1, #1
    4508:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    450c:	fb97 f7f3 	sdiv	r7, r7, r3
    4510:	3702      	adds	r7, #2
    4512:	b2ff      	uxtb	r7, r7
    4514:	44a6      	add	lr, r4
    4516:	f204 267f 	addw	r6, r4, #639	; 0x27f
    451a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    451e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4522:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4526:	3219      	adds	r2, #25
    4528:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    452a:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    452e:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4532:	b2c9      	uxtb	r1, r1
    4534:	fb11 f107 	smulbb	r1, r1, r7
    4538:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    453c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4540:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4542:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4544:	d1e9      	bne.n	451a <fire(LEDStruct&)+0x46>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4546:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    454a:	802a      	strh	r2, [r5, #0]
    454c:	2e00      	cmp	r6, #0
    454e:	f000 80f5 	beq.w	473c <fire(LEDStruct&)+0x268>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4552:	f1a3 0e03 	sub.w	lr, r3, #3
    4556:	f1be 0f01 	cmp.w	lr, #1
    455a:	f04f 0c01 	mov.w	ip, #1
    455e:	dd1a      	ble.n	4596 <fire(LEDStruct&)+0xc2>
    4560:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    4564:	f203 277e 	addw	r7, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4568:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 4828 <fire(LEDStruct&)+0x354>
    456c:	4420      	add	r0, r4
    456e:	4427      	add	r7, r4
    4570:	f504 7820 	add.w	r8, r4, #640	; 0x280
    4574:	7801      	ldrb	r1, [r0, #0]
    4576:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    457a:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    457e:	fb89 a601 	smull	sl, r6, r9, r1
    4582:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4586:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4588:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    458c:	d1f2      	bne.n	4574 <fire(LEDStruct&)+0xa0>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    458e:	f1bc 0f00 	cmp.w	ip, #0
    4592:	f000 8102 	beq.w	479a <fire(LEDStruct&)+0x2c6>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4596:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    459a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    459e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45a2:	3219      	adds	r2, #25
    45a4:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    45a6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    45aa:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    45ae:	802a      	strh	r2, [r5, #0]
    45b0:	b2c9      	uxtb	r1, r1
    45b2:	428e      	cmp	r6, r1
    45b4:	489a      	ldr	r0, [pc, #616]	; (4820 <fire(LEDStruct&)+0x34c>)
    45b6:	d926      	bls.n	4606 <fire(LEDStruct&)+0x132>
    45b8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    45bc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    45c0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    45c4:	3219      	adds	r2, #25
    45c6:	b292      	uxth	r2, r2
    45c8:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    45cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    45d0:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    45d4:	3619      	adds	r6, #25
    45d6:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45d8:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    45dc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    45e0:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    45e2:	b2d2      	uxtb	r2, r2
    45e4:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    45e8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    45ec:	eb04 2222 	add.w	r2, r4, r2, asr #8
    45f0:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    45f4:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45f6:	8006      	strh	r6, [r0, #0]
    45f8:	3960      	subs	r1, #96	; 0x60
    45fa:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    45fe:	fa80 f051 	uqadd8	r0, r0, r1
    4602:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4606:	f1bc 0f00 	cmp.w	ip, #0
    460a:	d112      	bne.n	4632 <fire(LEDStruct&)+0x15e>
    460c:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    460e:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4612:	4983      	ldr	r1, [pc, #524]	; (4820 <fire(LEDStruct&)+0x34c>)
    4614:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4618:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    461c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4620:	3219      	adds	r2, #25
    4622:	b292      	uxth	r2, r2
    4624:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4628:	b2c0      	uxtb	r0, r0
    462a:	4286      	cmp	r6, r0
    462c:	802a      	strh	r2, [r5, #0]
    462e:	f200 80cd 	bhi.w	47cc <fire(LEDStruct&)+0x2f8>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4632:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4636:	2a00      	cmp	r2, #0
    4638:	d15f      	bne.n	46fa <fire(LEDStruct&)+0x226>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    463a:	2b00      	cmp	r3, #0
    463c:	f000 8226 	beq.w	4a8c <fire(LEDStruct&)+0x5b8>
    4640:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4644:	4690      	mov	r8, r2
    4646:	46b9      	mov	r9, r7
    4648:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    464a:	3b01      	subs	r3, #1
    464c:	ebc8 0503 	rsb	r5, r8, r3
    4650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4654:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4658:	4630      	mov	r0, r6
    465a:	f006 f9e1 	bl	aa20 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    465e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4662:	5563      	strb	r3, [r4, r5]
    4664:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4666:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    466a:	f89d 2015 	ldrb.w	r2, [sp, #21]
    466e:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4670:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4672:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4676:	f108 0801 	add.w	r8, r8, #1
    467a:	4543      	cmp	r3, r8
    467c:	dce5      	bgt.n	464a <fire(LEDStruct&)+0x176>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    467e:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4682:	b30a      	cbz	r2, 46c8 <fire(LEDStruct&)+0x1f4>
		if (leds.this_dir) {
    4684:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4688:	2a00      	cmp	r2, #0
    468a:	f040 81bf 	bne.w	4a0c <fire(LEDStruct&)+0x538>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    468e:	4690      	mov	r8, r2
    4690:	2b00      	cmp	r3, #0
    4692:	f000 81fe 	beq.w	4a92 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    4696:	eb08 0503 	add.w	r5, r8, r3
    469a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    469e:	4630      	mov	r0, r6
    46a0:	f006 f9be 	bl	aa20 <HeatColor(unsigned char)>
    46a4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46a8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    46ac:	54e2      	strb	r2, [r4, r3]
    46ae:	4423      	add	r3, r4
        g = rhs.g;
    46b0:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    46b4:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    46b8:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    46ba:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46bc:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    46c0:	f108 0801 	add.w	r8, r8, #1
    46c4:	4543      	cmp	r3, r8
    46c6:	dce6      	bgt.n	4696 <fire(LEDStruct&)+0x1c2>
    46c8:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    46cc:	2a00      	cmp	r2, #0
    46ce:	f000 80ad 	beq.w	482c <fire(LEDStruct&)+0x358>
    46d2:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    46d6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46d8:	781a      	ldrb	r2, [r3, #0]
    46da:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    46de:	785a      	ldrb	r2, [r3, #1]
    46e0:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    46e4:	789a      	ldrb	r2, [r3, #2]
    46e6:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    46ea:	3303      	adds	r3, #3
    46ec:	4299      	cmp	r1, r3
    46ee:	f1a4 0403 	sub.w	r4, r4, #3
    46f2:	d1f1      	bne.n	46d8 <fire(LEDStruct&)+0x204>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    46f4:	b006      	add	sp, #24
    46f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    46fa:	2b00      	cmp	r3, #0
    46fc:	f000 80ea 	beq.w	48d4 <fire(LEDStruct&)+0x400>
    4700:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4704:	46b9      	mov	r9, r7
    4706:	4625      	mov	r5, r4
    4708:	f04f 0800 	mov.w	r8, #0
    470c:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    470e:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4712:	4630      	mov	r0, r6
    4714:	f006 f984 	bl	aa20 <HeatColor(unsigned char)>
    4718:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    471c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4720:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4724:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4726:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4728:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    472a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    472e:	f108 0801 	add.w	r8, r8, #1
    4732:	4543      	cmp	r3, r8
    4734:	f105 0503 	add.w	r5, r5, #3
    4738:	dce9      	bgt.n	470e <fire(LEDStruct&)+0x23a>
    473a:	e7a0      	b.n	467e <fire(LEDStruct&)+0x1aa>
    473c:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4740:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4744:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    4748:	fb9e fef3 	sdiv	lr, lr, r3
    474c:	f10e 0e02 	add.w	lr, lr, #2
    4750:	fa5f fe8e 	uxtb.w	lr, lr
    4754:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    4758:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    475c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4760:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4764:	3219      	adds	r2, #25
    4766:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4768:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    476c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4770:	b2c9      	uxtb	r1, r1
    4772:	fb11 f10e 	smulbb	r1, r1, lr
    4776:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    477a:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    477c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4780:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4782:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4784:	dbe8      	blt.n	4758 <fire(LEDStruct&)+0x284>
    4786:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4788:	f1a3 0e03 	sub.w	lr, r3, #3
    478c:	f1be 0f01 	cmp.w	lr, #1
    4790:	f04f 0c00 	mov.w	ip, #0
    4794:	f73f aee4 	bgt.w	4560 <fire(LEDStruct&)+0x8c>
    4798:	e6fd      	b.n	4596 <fire(LEDStruct&)+0xc2>
    479a:	f203 26c7 	addw	r6, r3, #711	; 0x2c7
    479e:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    47a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 4828 <fire(LEDStruct&)+0x354>
    47a6:	4426      	add	r6, r4
    47a8:	4427      	add	r7, r4
    47aa:	7831      	ldrb	r1, [r6, #0]
    47ac:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    47b0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    47b4:	fb88 9001 	smull	r9, r0, r8, r1
    47b8:	f10e 3eff 	add.w	lr, lr, #4294967295
    47bc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    47c0:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    47c4:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    47c8:	d1ef      	bne.n	47aa <fire(LEDStruct&)+0x2d6>
    47ca:	e6e4      	b.n	4596 <fire(LEDStruct&)+0xc2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47cc:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    47d0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    47d4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    47d8:	3219      	adds	r2, #25
    47da:	b292      	uxth	r2, r2
    47dc:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    47e0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    47e4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    47e8:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47ea:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    47ee:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    47f0:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    47f2:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    47f6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    47fa:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    47fc:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4800:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    4804:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    4808:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    480c:	800d      	strh	r5, [r1, #0]
    480e:	1201      	asrs	r1, r0, #8
    4810:	3960      	subs	r1, #96	; 0x60
    4812:	4630      	mov	r0, r6
    4814:	fa80 f051 	uqadd8	r0, r0, r1
    4818:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
    481c:	e709      	b.n	4632 <fire(LEDStruct&)+0x15e>
    481e:	bf00      	nop
    4820:	1fff8784 	.word	0x1fff8784
    4824:	1fff9605 	.word	0x1fff9605
    4828:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    482c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4830:	2a00      	cmp	r2, #0
    4832:	d15a      	bne.n	48ea <fire(LEDStruct&)+0x416>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4834:	2b00      	cmp	r3, #0
    4836:	f43f af5d 	beq.w	46f4 <fire(LEDStruct&)+0x220>
    483a:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    483e:	46b9      	mov	r9, r7
    4840:	f04f 0800 	mov.w	r8, #0
    4844:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    4846:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    484a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    484e:	354b      	adds	r5, #75	; 0x4b
    4850:	4445      	add	r5, r8
    4852:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4856:	4630      	mov	r0, r6
    4858:	f006 f8e2 	bl	aa20 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    485c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4860:	5563      	strb	r3, [r4, r5]
    4862:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4864:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4868:	f89d 2015 	ldrb.w	r2, [sp, #21]
    486c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    486e:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4870:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4874:	f108 0801 	add.w	r8, r8, #1
    4878:	4543      	cmp	r3, r8
    487a:	dce4      	bgt.n	4846 <fire(LEDStruct&)+0x372>
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    487c:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4880:	2a00      	cmp	r2, #0
    4882:	f43f af37 	beq.w	46f4 <fire(LEDStruct&)+0x220>
			if (leds.this_dir) {
    4886:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    488a:	2a00      	cmp	r2, #0
    488c:	f000 80dd 	beq.w	4a4a <fire(LEDStruct&)+0x576>
				for (int j = 0; j < leds.heat_length; j++) {
    4890:	2b00      	cmp	r3, #0
    4892:	f43f af2f 	beq.w	46f4 <fire(LEDStruct&)+0x220>
    4896:	4625      	mov	r5, r4
    4898:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    489c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    48a0:	4630      	mov	r0, r6
    48a2:	f006 f8bd 	bl	aa20 <HeatColor(unsigned char)>
    48a6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48aa:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    48ae:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    48b2:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    48b6:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    48ba:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    48be:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    48c2:	f108 0801 	add.w	r8, r8, #1
    48c6:	4543      	cmp	r3, r8
    48c8:	f105 0503 	add.w	r5, r5, #3
    48cc:	dce6      	bgt.n	489c <fire(LEDStruct&)+0x3c8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    48ce:	b006      	add	sp, #24
    48d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    48d4:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    48d8:	2b00      	cmp	r3, #0
    48da:	f040 80da 	bne.w	4a92 <fire(LEDStruct&)+0x5be>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    48de:	f1bc 0f00 	cmp.w	ip, #0
    48e2:	f47f aef6 	bne.w	46d2 <fire(LEDStruct&)+0x1fe>
    48e6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    48ea:	2b00      	cmp	r3, #0
    48ec:	f43f af02 	beq.w	46f4 <fire(LEDStruct&)+0x220>
    48f0:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    48f4:	46b9      	mov	r9, r7
    48f6:	4625      	mov	r5, r4
    48f8:	f04f 0800 	mov.w	r8, #0
    48fc:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    48fe:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4902:	4630      	mov	r0, r6
    4904:	f006 f88c 	bl	aa20 <HeatColor(unsigned char)>
    4908:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    490c:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4910:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4914:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    4918:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    491c:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4920:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4924:	f108 0801 	add.w	r8, r8, #1
    4928:	4543      	cmp	r3, r8
    492a:	f1a5 0503 	sub.w	r5, r5, #3
    492e:	dce6      	bgt.n	48fe <fire(LEDStruct&)+0x42a>
    4930:	e7a4      	b.n	487c <fire(LEDStruct&)+0x3a8>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    4932:	4620      	mov	r0, r4
    4934:	f7ff fd94 	bl	4460 <fire_update(LEDStruct&)>
    4938:	e5db      	b.n	44f2 <fire(LEDStruct&)+0x1e>
    493a:	882b      	ldrh	r3, [r5, #0]
    493c:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4940:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4944:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4948:	3119      	adds	r1, #25
    494a:	b289      	uxth	r1, r1
    494c:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    4950:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4954:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4958:	3219      	adds	r2, #25
    495a:	b292      	uxth	r2, r2
    495c:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4960:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4964:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4968:	f10e 0e19 	add.w	lr, lr, #25
    496c:	fa1f fe8e 	uxth.w	lr, lr
    4970:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    4974:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    4978:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    497c:	3619      	adds	r6, #25
    497e:	b2b6      	uxth	r6, r6
    4980:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    4984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4988:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    498c:	3319      	adds	r3, #25
    498e:	b29b      	uxth	r3, r3
    4990:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    4994:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4998:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    499c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49a0:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49a4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    49a8:	b2f6      	uxtb	r6, r6
    49aa:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49ae:	3719      	adds	r7, #25
    49b0:	b2db      	uxtb	r3, r3
    49b2:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    49b6:	b2bf      	uxth	r7, r7
    49b8:	11b6      	asrs	r6, r6, #6
    49ba:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    49be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    49c2:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    49c6:	119b      	asrs	r3, r3, #6
    49c8:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    49cc:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    49d0:	333c      	adds	r3, #60	; 0x3c
    49d2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    49d6:	f3c6 1681 	ubfx	r6, r6, #6, #2
    49da:	fa5f f883 	uxtb.w	r8, r3
    49de:	fa5f fc8c 	uxtb.w	ip, ip
    49e2:	3601      	adds	r6, #1
    49e4:	f10e 0314 	add.w	r3, lr, #20
    49e8:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    49ec:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    49f0:	f8cd c000 	str.w	ip, [sp]
    49f4:	f8cd 8004 	str.w	r8, [sp, #4]
    49f8:	9602      	str	r6, [sp, #8]
    49fa:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    49fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    4a02:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a04:	802f      	strh	r7, [r5, #0]
    4a06:	f7ff fcc1 	bl	438c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    4a0a:	e56d      	b.n	44e8 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4a0c:	2b00      	cmp	r3, #0
    4a0e:	d040      	beq.n	4a92 <fire(LEDStruct&)+0x5be>
    4a10:	4625      	mov	r5, r4
    4a12:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    4a16:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a1a:	4630      	mov	r0, r6
    4a1c:	f006 f800 	bl	aa20 <HeatColor(unsigned char)>
    4a20:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a24:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4a28:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a2c:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    4a30:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    4a34:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    4a38:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a3c:	f108 0801 	add.w	r8, r8, #1
    4a40:	4543      	cmp	r3, r8
    4a42:	f1a5 0503 	sub.w	r5, r5, #3
    4a46:	dce6      	bgt.n	4a16 <fire(LEDStruct&)+0x542>
    4a48:	e63e      	b.n	46c8 <fire(LEDStruct&)+0x1f4>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4a4a:	4690      	mov	r8, r2
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	f43f ae51 	beq.w	46f4 <fire(LEDStruct&)+0x220>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4a52:	334b      	adds	r3, #75	; 0x4b
    4a54:	ebc8 0503 	rsb	r5, r8, r3
    4a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4a5c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4a60:	4630      	mov	r0, r6
    4a62:	f005 ffdd 	bl	aa20 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4a66:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4a6a:	5563      	strb	r3, [r4, r5]
    4a6c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4a6e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4a72:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4a76:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4a78:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    4a7a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4a7e:	f108 0801 	add.w	r8, r8, #1
    4a82:	4543      	cmp	r3, r8
    4a84:	dce5      	bgt.n	4a52 <fire(LEDStruct&)+0x57e>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4a86:	b006      	add	sp, #24
    4a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4a8c:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    4a90:	b163      	cbz	r3, 4aac <fire(LEDStruct&)+0x5d8>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4a92:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    4a96:	2b00      	cmp	r3, #0
    4a98:	f47f ae1b 	bne.w	46d2 <fire(LEDStruct&)+0x1fe>
    4a9c:	e62a      	b.n	46f4 <fire(LEDStruct&)+0x220>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    4a9e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    4aa2:	b10a      	cbz	r2, 4aa8 <fire(LEDStruct&)+0x5d4>
    4aa4:	882a      	ldrh	r2, [r5, #0]
    4aa6:	e554      	b.n	4552 <fire(LEDStruct&)+0x7e>
    4aa8:	882a      	ldrh	r2, [r5, #0]
    4aaa:	e66d      	b.n	4788 <fire(LEDStruct&)+0x2b4>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4aac:	f1bc 0f00 	cmp.w	ip, #0
    4ab0:	f47f ae0f 	bne.w	46d2 <fire(LEDStruct&)+0x1fe>
    4ab4:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4ab8:	e6bc      	b.n	4834 <fire(LEDStruct&)+0x360>
    4aba:	bf00      	nop

00004abc <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    4abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4ac0:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4ac4:	4dd0      	ldr	r5, [pc, #832]	; (4e08 <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    4ac6:	b087      	sub	sp, #28
    4ac8:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4aca:	2b00      	cmp	r3, #0
    4acc:	f000 81da 	beq.w	4e84 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    4ad0:	4bce      	ldr	r3, [pc, #824]	; (4e0c <torch(LEDStruct&)+0x350>)
    4ad2:	781b      	ldrb	r3, [r3, #0]
    4ad4:	2b00      	cmp	r3, #0
    4ad6:	f040 8242 	bne.w	4f5e <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4ada:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    4ade:	4663      	mov	r3, ip
    4ae0:	f1bc 0f00 	cmp.w	ip, #0
    4ae4:	f000 823f 	beq.w	4f66 <torch(LEDStruct&)+0x4aa>
    4ae8:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4aec:	882a      	ldrh	r2, [r5, #0]
    4aee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4af2:	004f      	lsls	r7, r1, #1
    4af4:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    4af8:	fb97 f7fc 	sdiv	r7, r7, ip
    4afc:	3702      	adds	r7, #2
    4afe:	b2ff      	uxtb	r7, r7
    4b00:	44a6      	add	lr, r4
    4b02:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4b06:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4b0a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b0e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b12:	3219      	adds	r2, #25
    4b14:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4b16:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4b1a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4b1e:	b2c9      	uxtb	r1, r1
    4b20:	fb11 f107 	smulbb	r1, r1, r7
    4b24:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4b28:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4b2c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4b2e:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    4b30:	d1e9      	bne.n	4b06 <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    4b32:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4b36:	802a      	strh	r2, [r5, #0]
    4b38:	2e00      	cmp	r6, #0
    4b3a:	f000 816b 	beq.w	4e14 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b3e:	f1ac 0703 	sub.w	r7, ip, #3
    4b42:	2f01      	cmp	r7, #1
    4b44:	f04f 0901 	mov.w	r9, #1
    4b48:	dd1a      	ble.n	4b80 <torch(LEDStruct&)+0xc4>
    4b4a:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    4b4e:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4b52:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 4e10 <torch(LEDStruct&)+0x354>
    4b56:	4420      	add	r0, r4
    4b58:	4426      	add	r6, r4
    4b5a:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    4b5e:	7801      	ldrb	r1, [r0, #0]
    4b60:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    4b64:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    4b68:	fb88 ba01 	smull	fp, sl, r8, r1
    4b6c:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b70:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4b72:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4b76:	d1f2      	bne.n	4b5e <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    4b78:	f1b9 0f00 	cmp.w	r9, #0
    4b7c:	f000 812c 	beq.w	4dd8 <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4b80:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4b84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b88:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4b8c:	3219      	adds	r2, #25
    4b8e:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    4b90:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4b94:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4b98:	802a      	strh	r2, [r5, #0]
    4b9a:	b2c0      	uxtb	r0, r0
    4b9c:	4286      	cmp	r6, r0
    4b9e:	499a      	ldr	r1, [pc, #616]	; (4e08 <torch(LEDStruct&)+0x34c>)
    4ba0:	d928      	bls.n	4bf4 <torch(LEDStruct&)+0x138>
    4ba2:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4ba6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4baa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4bae:	3219      	adds	r2, #25
    4bb0:	b292      	uxth	r2, r2
    4bb2:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4bb6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4bba:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4bbe:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bc0:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bc4:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4bc6:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4bc8:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4bcc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4bd0:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4bd2:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4bd6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bda:	800e      	strh	r6, [r1, #0]
    4bdc:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    4be0:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    4be4:	1200      	asrs	r0, r0, #8
    4be6:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    4bea:	4630      	mov	r0, r6
    4bec:	fa80 f051 	uqadd8	r0, r0, r1
    4bf0:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    4bf4:	f1b9 0f00 	cmp.w	r9, #0
    4bf8:	d112      	bne.n	4c20 <torch(LEDStruct&)+0x164>
    4bfa:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    4bfc:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4c00:	4981      	ldr	r1, [pc, #516]	; (4e08 <torch(LEDStruct&)+0x34c>)
    4c02:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    4c06:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    4c0a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c0e:	3219      	adds	r2, #25
    4c10:	b292      	uxth	r2, r2
    4c12:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    4c16:	b2c0      	uxtb	r0, r0
    4c18:	4286      	cmp	r6, r0
    4c1a:	802a      	strh	r2, [r5, #0]
    4c1c:	f200 80af 	bhi.w	4d7e <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4c20:	f1bc 0f00 	cmp.w	ip, #0
    4c24:	f000 81a4 	beq.w	4f70 <torch(LEDStruct&)+0x4b4>
    4c28:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4c2c:	2600      	movs	r6, #0
    4c2e:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    4c32:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    4c36:	199d      	adds	r5, r3, r6
    4c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4c3c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4c40:	4648      	mov	r0, r9
    4c42:	f005 feed 	bl	aa20 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c46:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4c4a:	5563      	strb	r3, [r4, r5]
    4c4c:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4c4e:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4c52:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4c56:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4c58:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    4c5a:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4c5e:	3601      	adds	r6, #1
    4c60:	42b3      	cmp	r3, r6
    4c62:	dce6      	bgt.n	4c32 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4c64:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    4c68:	2e00      	cmp	r6, #0
    4c6a:	d175      	bne.n	4d58 <torch(LEDStruct&)+0x29c>
    4c6c:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4c70:	2b00      	cmp	r3, #0
    4c72:	f000 8183 	beq.w	4f7c <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    4c76:	334a      	adds	r3, #74	; 0x4a
    4c78:	1b9d      	subs	r5, r3, r6
    4c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4c7e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4c82:	4648      	mov	r0, r9
    4c84:	f005 fecc 	bl	aa20 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c88:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4c8c:	5563      	strb	r3, [r4, r5]
    4c8e:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4c90:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4c94:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4c98:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4c9a:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4c9c:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4ca0:	3601      	adds	r6, #1
    4ca2:	42b3      	cmp	r3, r6
    4ca4:	dce7      	bgt.n	4c76 <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    4ca6:	2b4b      	cmp	r3, #75	; 0x4b
    4ca8:	d047      	beq.n	4d3a <torch(LEDStruct&)+0x27e>
    4caa:	f10d 0914 	add.w	r9, sp, #20
    4cae:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    4cb2:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4cb4:	4626      	mov	r6, r4
    4cb6:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4cb8:	f04f 0a01 	mov.w	sl, #1
    4cbc:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    4cc0:	f8cd a000 	str.w	sl, [sp]
    4cc4:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    4cc8:	fb98 f3f3 	sdiv	r3, r8, r3
    4ccc:	441a      	add	r2, r3
    4cce:	b2d2      	uxtb	r2, r2
    4cd0:	23ff      	movs	r3, #255	; 0xff
    4cd2:	4659      	mov	r1, fp
    4cd4:	4648      	mov	r0, r9
    4cd6:	f005 fec5 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4cda:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4cde:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4ce2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ce6:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4ce8:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4cea:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    4cec:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    4cf0:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    4cf4:	fb98 f8f2 	sdiv	r8, r8, r2
    4cf8:	eb08 0203 	add.w	r2, r8, r3
    4cfc:	b2d2      	uxtb	r2, r2
    4cfe:	23ff      	movs	r3, #255	; 0xff
    4d00:	4659      	mov	r1, fp
    4d02:	f8cd a000 	str.w	sl, [sp]
    4d06:	4648      	mov	r0, r9
    4d08:	f005 feac 	bl	aa64 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4d0c:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    4d10:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4