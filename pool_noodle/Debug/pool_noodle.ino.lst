
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 1d 77 00 00 d5 76 00 00     ... .....w...v..
      10:	d5 76 00 00 d5 76 00 00 d5 76 00 00 d5 76 00 00     .v...v...v...v..
      20:	d5 76 00 00 d5 76 00 00 d5 76 00 00 1d 77 00 00     .v...v...v...w..
      30:	1d 77 00 00 d5 76 00 00 49 8b 00 00 4d 8c 00 00     .w...v..I...M...
      40:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      50:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      60:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      70:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      80:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      90:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      a0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      b0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      c0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      d0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      e0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
      f0:	1d 77 00 00 d9 8e 00 00 1d 77 00 00 05 90 00 00     .w.......w......
     100:	1d 77 00 00 31 91 00 00 1d 77 00 00 1d 77 00 00     .w..1....w...w..
     110:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     120:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     130:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     140:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     150:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     160:	1d 77 00 00 65 7b 00 00 1d 77 00 00 1d 77 00 00     .w..e{...w...w..
     170:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     180:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     190:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     1a0:	1d 77 00 00 1d 77 00 00 1d 77 00 00 1d 77 00 00     .w...w...w...w..
     1b0:	1d 77 00 00 1d 77 00 00 1d 77 00 00                 .w...w...w..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f007 faa8 	bl	7724 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f007 fafc 	bl	78d0 <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f007 fa6d 	bl	77c0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f007 fa5e 	bl	77c0 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f009 fae0 	bl	98cc <__libc_init_array>

	startup_late_hook();
     30c:	f007 fa10 	bl	7730 <startup_late_hook>
	main();
     310:	f008 fca4 	bl	8c5c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c34 	.word	0x1fff8c34
     33c:	0000c5f8 	.word	0x0000c5f8
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c34 	.word	0x1fff8c34
     348:	1fffa0c4 	.word	0x1fffa0c4
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e2ffe59 	.word	0x5e2ffe59
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c34 	.word	0x1fff8c34
     42c:	00000000 	.word	0x00000000
     430:	0000c5fc 	.word	0x0000c5fc

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c38 	.word	0x1fff8c38
     460:	0000c5fc 	.word	0x0000c5fc
     464:	1fff8c34 	.word	0x1fff8c34
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     490:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     492:	2101      	movs	r1, #1
     494:	4604      	mov	r4, r0
     496:	200e      	movs	r0, #14
     498:	f007 f9a4 	bl	77e4 <pinMode>
     49c:	2007      	movs	r0, #7
     49e:	2101      	movs	r1, #1
     4a0:	f007 f9a0 	bl	77e4 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     4a4:	69a0      	ldr	r0, [r4, #24]
     4a6:	b158      	cbz	r0, 4c0 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     4a8:	6803      	ldr	r3, [r0, #0]
     4aa:	4a07      	ldr	r2, [pc, #28]	; (4c8 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     4ac:	685b      	ldr	r3, [r3, #4]
     4ae:	4293      	cmp	r3, r2
     4b0:	d107      	bne.n	4c2 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     4b2:	6842      	ldr	r2, [r0, #4]
     4b4:	7b01      	ldrb	r1, [r0, #12]
     4b6:	7813      	ldrb	r3, [r2, #0]
     4b8:	ea23 0301 	bic.w	r3, r3, r1
     4bc:	7013      	strb	r3, [r2, #0]
     4be:	bd10      	pop	{r4, pc}
     4c0:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     4c6:	4718      	bx	r3
     4c8:	00000481 	.word	0x00000481

000004cc <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ce:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     4d0:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     4d2:	6805      	ldr	r5, [r0, #0]
     4d4:	f88d 3004 	strb.w	r3, [sp, #4]
     4d8:	f88d 3005 	strb.w	r3, [sp, #5]
     4dc:	f88d 3006 	strb.w	r3, [sp, #6]
     4e0:	682e      	ldr	r6, [r5, #0]
     4e2:	4a37      	ldr	r2, [pc, #220]	; (5c0 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     4e4:	f88d 3008 	strb.w	r3, [sp, #8]
     4e8:	4296      	cmp	r6, r2
     4ea:	f88d 3009 	strb.w	r3, [sp, #9]
     4ee:	f88d 300a 	strb.w	r3, [sp, #10]
     4f2:	d15f      	bne.n	5b4 <CLEDController::clearLeds(int)+0xe8>
     4f4:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4f6:	9104      	str	r1, [sp, #16]
     4f8:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     4fa:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     4fc:	a801      	add	r0, sp, #4
     4fe:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     500:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     504:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     508:	f88d 3020 	strb.w	r3, [sp, #32]
     50c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     50e:	d015      	beq.n	53c <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     510:	f88d 301d 	strb.w	r3, [sp, #29]
     514:	f88d 301c 	strb.w	r3, [sp, #28]
     518:	f88d 301b 	strb.w	r3, [sp, #27]
     51c:	f88d 301a 	strb.w	r3, [sp, #26]
     520:	f88d 3019 	strb.w	r3, [sp, #25]
     524:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     528:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     52a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     52c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     530:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     532:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     534:	a903      	add	r1, sp, #12
     536:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     538:	b00b      	add	sp, #44	; 0x2c
     53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     53c:	4a21      	ldr	r2, [pc, #132]	; (5c4 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     53e:	7813      	ldrb	r3, [r2, #0]
     540:	3301      	adds	r3, #1
     542:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     546:	f013 0f01 	tst.w	r3, #1
     54a:	bf14      	ite	ne
     54c:	2180      	movne	r1, #128	; 0x80
     54e:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     550:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     552:	079a      	lsls	r2, r3, #30
     554:	bf44      	itt	mi
     556:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     55a:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     55c:	075b      	lsls	r3, r3, #29
     55e:	bf48      	it	mi
     560:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     564:	3110      	adds	r1, #16
     566:	2200      	movs	r2, #0
     568:	b2c9      	uxtb	r1, r1
     56a:	f10d 031b 	add.w	r3, sp, #27
     56e:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     572:	f44f 7e80 	mov.w	lr, #256	; 0x100
     576:	b1aa      	cbz	r2, 5a4 <CLEDController::clearLeds(int)+0xd8>
     578:	fb9e f2f2 	sdiv	r2, lr, r2
     57c:	b2d2      	uxtb	r2, r2
     57e:	1c50      	adds	r0, r2, #1
     580:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     582:	fb00 1501 	mla	r5, r0, r1, r1
     586:	122d      	asrs	r5, r5, #8
     588:	7018      	strb	r0, [r3, #0]
     58a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     58c:	b105      	cbz	r5, 590 <CLEDController::clearLeds(int)+0xc4>
     58e:	3e01      	subs	r6, #1
     590:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     594:	b100      	cbz	r0, 598 <CLEDController::clearLeds(int)+0xcc>
     596:	701a      	strb	r2, [r3, #0]
     598:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     59a:	429f      	cmp	r7, r3
     59c:	d008      	beq.n	5b0 <CLEDController::clearLeds(int)+0xe4>
     59e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     5a0:	2a00      	cmp	r2, #0
     5a2:	d1e9      	bne.n	578 <CLEDController::clearLeds(int)+0xac>
     5a4:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     5a6:	f803 2c03 	strb.w	r2, [r3, #-3]
     5aa:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     5ac:	429f      	cmp	r7, r3
     5ae:	d1f6      	bne.n	59e <CLEDController::clearLeds(int)+0xd2>
     5b0:	6825      	ldr	r5, [r4, #0]
     5b2:	e7b9      	b.n	528 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     5b4:	460a      	mov	r2, r1
     5b6:	ab02      	add	r3, sp, #8
     5b8:	a901      	add	r1, sp, #4
     5ba:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     5bc:	b00b      	add	sp, #44	; 0x2c
     5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c0:	000005c9 	.word	0x000005c9
     5c4:	1fff8c50 	.word	0x1fff8c50

000005c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     5c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ca:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5cc:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     5ce:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     5d0:	789b      	ldrb	r3, [r3, #2]
     5d2:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5d4:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     5d6:	9101      	str	r1, [sp, #4]
     5d8:	9202      	str	r2, [sp, #8]
     5da:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     5dc:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     5e0:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     5e4:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     5e8:	d016      	beq.n	618 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     5ea:	2300      	movs	r3, #0
     5ec:	f88d 3015 	strb.w	r3, [sp, #21]
     5f0:	f88d 3014 	strb.w	r3, [sp, #20]
     5f4:	f88d 3013 	strb.w	r3, [sp, #19]
     5f8:	f88d 3012 	strb.w	r3, [sp, #18]
     5fc:	f88d 3011 	strb.w	r3, [sp, #17]
     600:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     604:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     606:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     608:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     60a:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     60e:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     610:	a901      	add	r1, sp, #4
     612:	4790      	blx	r2
  }
     614:	b009      	add	sp, #36	; 0x24
     616:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     618:	4a1b      	ldr	r2, [pc, #108]	; (688 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     61a:	7813      	ldrb	r3, [r2, #0]
     61c:	3301      	adds	r3, #1
     61e:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     622:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     626:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     628:	bf14      	ite	ne
     62a:	2280      	movne	r2, #128	; 0x80
     62c:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     62e:	0799      	lsls	r1, r3, #30
     630:	bf44      	itt	mi
     632:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     636:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     638:	075b      	lsls	r3, r3, #29
     63a:	bf48      	it	mi
     63c:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     640:	3210      	adds	r2, #16
     642:	b2d2      	uxtb	r2, r2
     644:	f10d 0313 	add.w	r3, sp, #19
     648:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     64c:	f44f 7e80 	mov.w	lr, #256	; 0x100
     650:	b1ac      	cbz	r4, 67e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     652:	fb9e f4f4 	sdiv	r4, lr, r4
     656:	b2e4      	uxtb	r4, r4
     658:	1c61      	adds	r1, r4, #1
     65a:	b2c9      	uxtb	r1, r1
     65c:	fb01 2502 	mla	r5, r1, r2, r2
     660:	122d      	asrs	r5, r5, #8
     662:	7019      	strb	r1, [r3, #0]
     664:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     666:	b105      	cbz	r5, 66a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     668:	3e01      	subs	r6, #1
     66a:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     66e:	b101      	cbz	r1, 672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     670:	701c      	strb	r4, [r3, #0]
     672:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     674:	42bb      	cmp	r3, r7
     676:	d0c5      	beq.n	604 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     678:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     67a:	2c00      	cmp	r4, #0
     67c:	d1e9      	bne.n	652 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     67e:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     680:	f803 4c03 	strb.w	r4, [r3, #-3]
     684:	e7f5      	b.n	672 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     686:	bf00      	nop
     688:	1fff8c50 	.word	0x1fff8c50

0000068c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     690:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     692:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     694:	789b      	ldrb	r3, [r3, #2]
     696:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     698:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     69a:	9101      	str	r1, [sp, #4]
     69c:	9202      	str	r2, [sp, #8]
     69e:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     6a0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     6a4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     6a8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     6ac:	d017      	beq.n	6de <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     6ae:	2300      	movs	r3, #0
     6b0:	f88d 3015 	strb.w	r3, [sp, #21]
     6b4:	f88d 3014 	strb.w	r3, [sp, #20]
     6b8:	f88d 3013 	strb.w	r3, [sp, #19]
     6bc:	f88d 3012 	strb.w	r3, [sp, #18]
     6c0:	f88d 3011 	strb.w	r3, [sp, #17]
     6c4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6c8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6ca:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6cc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6ce:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     6d0:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6d4:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6d6:	a901      	add	r1, sp, #4
     6d8:	4798      	blx	r3
  }
     6da:	b009      	add	sp, #36	; 0x24
     6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6de:	4a1b      	ldr	r2, [pc, #108]	; (74c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6e0:	7813      	ldrb	r3, [r2, #0]
     6e2:	3301      	adds	r3, #1
     6e4:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6e8:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ec:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6ee:	bf14      	ite	ne
     6f0:	2280      	movne	r2, #128	; 0x80
     6f2:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6f4:	0799      	lsls	r1, r3, #30
     6f6:	bf44      	itt	mi
     6f8:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     6fc:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     6fe:	075b      	lsls	r3, r3, #29
     700:	bf48      	it	mi
     702:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     706:	3210      	adds	r2, #16
     708:	b2d2      	uxtb	r2, r2
     70a:	f10d 0313 	add.w	r3, sp, #19
     70e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     712:	f44f 7e80 	mov.w	lr, #256	; 0x100
     716:	b1ac      	cbz	r4, 744 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     718:	fb9e f4f4 	sdiv	r4, lr, r4
     71c:	b2e4      	uxtb	r4, r4
     71e:	1c61      	adds	r1, r4, #1
     720:	b2c9      	uxtb	r1, r1
     722:	fb01 2502 	mla	r5, r1, r2, r2
     726:	122d      	asrs	r5, r5, #8
     728:	7019      	strb	r1, [r3, #0]
     72a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     72c:	b105      	cbz	r5, 730 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     72e:	3e01      	subs	r6, #1
     730:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     734:	b101      	cbz	r1, 738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     736:	701c      	strb	r4, [r3, #0]
     738:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     73a:	42bb      	cmp	r3, r7
     73c:	d0c4      	beq.n	6c8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     73e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     740:	2c00      	cmp	r4, #0
     742:	d1e9      	bne.n	718 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     744:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     746:	f803 4c03 	strb.w	r4, [r3, #-3]
     74a:	e7f5      	b.n	738 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     74c:	1fff8c50 	.word	0x1fff8c50

00000750 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     750:	b570      	push	{r4, r5, r6, lr}
     752:	4604      	mov	r4, r0
     754:	4608      	mov	r0, r1
     756:	460d      	mov	r5, r1
     758:	f009 f952 	bl	9a00 <strlen>
     75c:	6823      	ldr	r3, [r4, #0]
     75e:	4602      	mov	r2, r0
     760:	4629      	mov	r1, r5
     762:	4620      	mov	r0, r4
     764:	685b      	ldr	r3, [r3, #4]
     766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     76a:	4718      	bx	r3

0000076c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     76c:	b538      	push	{r3, r4, r5, lr}
     76e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     770:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     772:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     774:	f009 f944 	bl	9a00 <strlen>
     778:	6823      	ldr	r3, [r4, #0]
     77a:	4602      	mov	r2, r0
     77c:	4629      	mov	r1, r5
     77e:	685b      	ldr	r3, [r3, #4]
     780:	4620      	mov	r0, r4
     782:	4798      	blx	r3
     784:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     786:	4620      	mov	r0, r4
     788:	f008 fa70 	bl	8c6c <Print::println()>
     78c:	4428      	add	r0, r5
     78e:	bd38      	pop	{r3, r4, r5, pc}

00000790 <Print::println(unsigned char)>:
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     790:	b538      	push	{r3, r4, r5, lr}
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     792:	220a      	movs	r2, #10
     794:	2300      	movs	r3, #0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     796:	4605      	mov	r5, r0
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     798:	f008 fa78 	bl	8c8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     79c:	4604      	mov	r4, r0
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     79e:	4628      	mov	r0, r5
     7a0:	f008 fa64 	bl	8c6c <Print::println()>
     7a4:	4420      	add	r0, r4
     7a6:	bd38      	pop	{r3, r4, r5, pc}

000007a8 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ac:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     7ae:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     7b0:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     7b2:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     7b6:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7b8:	3701      	adds	r7, #1
        } while ( u.index != 255);
     7ba:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     7bc:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     7be:	d1f8      	bne.n	7b2 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7c0:	680b      	ldr	r3, [r1, #0]
     7c2:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     7c4:	ea4f 6813 	mov.w	r8, r3, lsr #24
     7c8:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     7cc:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7d0:	f04f 33ff 	mov.w	r3, #4294967295
     7d4:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     7d6:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     7d8:	9305      	str	r3, [sp, #20]
     7da:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     7dc:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     7e0:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7e2:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     7e6:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     7ea:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     7ee:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     7f0:	b2f9      	uxtb	r1, r7
     7f2:	f3c5 6507 	ubfx	r5, r5, #24, #8
     7f6:	9103      	str	r1, [sp, #12]
     7f8:	b2e9      	uxtb	r1, r5
     7fa:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     7fc:	fa5f f18c 	uxtb.w	r1, ip
     800:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     802:	9907      	ldr	r1, [sp, #28]
     804:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     806:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     808:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     80c:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     810:	d80c      	bhi.n	82c <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     812:	9905      	ldr	r1, [sp, #20]
     814:	458c      	cmp	ip, r1
     816:	dc07      	bgt.n	828 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     818:	290f      	cmp	r1, #15
     81a:	d005      	beq.n	828 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     81c:	3101      	adds	r1, #1
     81e:	b2c9      	uxtb	r1, r1
     820:	428b      	cmp	r3, r1
     822:	9102      	str	r1, [sp, #8]
     824:	bf38      	it	cc
     826:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     828:	b259      	sxtb	r1, r3
     82a:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     82c:	a909      	add	r1, sp, #36	; 0x24
     82e:	9100      	str	r1, [sp, #0]
     830:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     832:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     836:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     83a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     83e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     842:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     846:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     84a:	f005 ff69 	bl	6720 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     84e:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     850:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     854:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     858:	46d1      	mov	r9, sl
     85a:	d1bf      	bne.n	7dc <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     85c:	9806      	ldr	r0, [sp, #24]
     85e:	b00b      	add	sp, #44	; 0x2c
     860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000864 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     864:	4b48      	ldr	r3, [pc, #288]	; (988 <updatePaletteIndex(LEDStruct&)+0x124>)
     866:	781b      	ldrb	r3, [r3, #0]
     868:	2b00      	cmp	r3, #0
     86a:	f000 808b 	beq.w	984 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     872:	b09b      	sub	sp, #108	; 0x6c
     874:	f200 13f7 	addw	r3, r0, #503	; 0x1f7
     878:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     87a:	2300      	movs	r3, #0
     87c:	4a43      	ldr	r2, [pc, #268]	; (98c <updatePaletteIndex(LEDStruct&)+0x128>)
     87e:	9307      	str	r3, [sp, #28]
     880:	f8df 910c 	ldr.w	r9, [pc, #268]	; 990 <updatePaletteIndex(LEDStruct&)+0x12c>
     884:	9009      	str	r0, [sp, #36]	; 0x24
     886:	f200 2326 	addw	r3, r0, #550	; 0x226
     88a:	9208      	str	r2, [sp, #32]
     88c:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     88e:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     890:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     894:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     896:	3701      	adds	r7, #1
        } while ( u.index != 255);
     898:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     89a:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     89c:	d1f8      	bne.n	890 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     89e:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     8a2:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     8a4:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     8a8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     8ac:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     8ae:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     8b2:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     8b6:	2400      	movs	r4, #0
     8b8:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     8ba:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     8be:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     8c2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     8c6:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     8ca:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     8cc:	b2f1      	uxtb	r1, r6
     8ce:	f3c5 6507 	ubfx	r5, r5, #24, #8
     8d2:	9103      	str	r1, [sp, #12]
     8d4:	b2e9      	uxtb	r1, r5
     8d6:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     8d8:	fa5f f18c 	uxtb.w	r1, ip
     8dc:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     8de:	9906      	ldr	r1, [sp, #24]
     8e0:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     8e2:	aa0c      	add	r2, sp, #48	; 0x30
     8e4:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     8e6:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     8ea:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     8ee:	d80c      	bhi.n	90a <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     8f0:	9905      	ldr	r1, [sp, #20]
     8f2:	458c      	cmp	ip, r1
     8f4:	dc07      	bgt.n	906 <updatePaletteIndex(LEDStruct&)+0xa2>
     8f6:	290f      	cmp	r1, #15
     8f8:	d005      	beq.n	906 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     8fa:	3101      	adds	r1, #1
     8fc:	b2c9      	uxtb	r1, r1
     8fe:	428b      	cmp	r3, r1
     900:	9102      	str	r1, [sp, #8]
     902:	bf38      	it	cc
     904:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     906:	b259      	sxtb	r1, r3
     908:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     90a:	a90d      	add	r1, sp, #52	; 0x34
     90c:	9100      	str	r1, [sp, #0]
     90e:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     910:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     914:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     918:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     91c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     920:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     924:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     928:	f005 fefa 	bl	6720 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     92c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     92e:	46d3      	mov	fp, sl
        g = rhs.g;
     930:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     934:	f8dd 8010 	ldr.w	r8, [sp, #16]
     938:	d1bf      	bne.n	8ba <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     93c:	aa0e      	add	r2, sp, #56	; 0x38
     93e:	4293      	cmp	r3, r2
     940:	d018      	beq.n	974 <updatePaletteIndex(LEDStruct&)+0x110>
     942:	9b09      	ldr	r3, [sp, #36]	; 0x24
     944:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     946:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
     94a:	e001      	b.n	950 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     94c:	42a3      	cmp	r3, r4
     94e:	d011      	beq.n	974 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     950:	f812 1b01 	ldrb.w	r1, [r2], #1
     954:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     958:	4288      	cmp	r0, r1
     95a:	d0f7      	beq.n	94c <updatePaletteIndex(LEDStruct&)+0xe8>
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <updatePaletteIndex(LEDStruct&)+0x124>)
     95e:	9a07      	ldr	r2, [sp, #28]
     960:	781b      	ldrb	r3, [r3, #0]
     962:	3201      	adds	r2, #1
     964:	4293      	cmp	r3, r2
     966:	9207      	str	r2, [sp, #28]
     968:	dd09      	ble.n	97e <updatePaletteIndex(LEDStruct&)+0x11a>
     96a:	9b08      	ldr	r3, [sp, #32]
     96c:	f853 9f04 	ldr.w	r9, [r3, #4]!
     970:	9308      	str	r3, [sp, #32]
     972:	e78c      	b.n	88e <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     974:	9b09      	ldr	r3, [sp, #36]	; 0x24
     976:	f89d 201c 	ldrb.w	r2, [sp, #28]
     97a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
			break;
		}
	}
}
     97e:	b01b      	add	sp, #108	; 0x6c
     980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     984:	4770      	bx	lr
     986:	bf00      	nop
     988:	1fff8748 	.word	0x1fff8748
     98c:	0000a36c 	.word	0x0000a36c
     990:	0000a574 	.word	0x0000a574

00000994 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     998:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     99a:	2700      	movs	r7, #0
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     99c:	2196      	movs	r1, #150	; 0x96
     99e:	4854      	ldr	r0, [pc, #336]	; (af0 <initialize()+0x15c>)
     9a0:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
     9a4:	aa09      	add	r2, sp, #36	; 0x24
     9a6:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
     9aa:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
     9ae:	f005 fe87 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
     9b2:	4b4f      	ldr	r3, [pc, #316]	; (af0 <initialize()+0x15c>)
     9b4:	494f      	ldr	r1, [pc, #316]	; (af4 <initialize()+0x160>)
     9b6:	f883 71c6 	strb.w	r7, [r3, #454]	; 0x1c6
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     9ba:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
     9be:	4a4d      	ldr	r2, [pc, #308]	; (af4 <initialize()+0x160>)
            count++;;
        } while ( u.index != 255);
     9c0:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9c2:	3701      	adds	r7, #1
        } while ( u.index != 255);
     9c4:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     9c6:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     9c8:	d1f7      	bne.n	9ba <initialize()+0x26>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9ca:	6813      	ldr	r3, [r2, #0]
     9cc:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     9ce:	ea4f 6913 	mov.w	r9, r3, lsr #24
     9d2:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     9d6:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     9da:	f04f 33ff 	mov.w	r3, #4294967295
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
     9de:	4690      	mov	r8, r2
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     9e0:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     9e2:	2400      	movs	r4, #0
     9e4:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     9e6:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     9ea:	4b41      	ldr	r3, [pc, #260]	; (af0 <initialize()+0x15c>)
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9ec:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     9f0:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     9f4:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     9f8:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     9fa:	b2f9      	uxtb	r1, r7
     9fc:	f3c5 6507 	ubfx	r5, r5, #24, #8
     a00:	9104      	str	r1, [sp, #16]
     a02:	b2e9      	uxtb	r1, r5
     a04:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
     a06:	fa5f f18c 	uxtb.w	r1, ip
     a0a:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
     a0c:	9907      	ldr	r1, [sp, #28]
     a0e:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a10:	f203 10c7 	addw	r0, r3, #455	; 0x1c7
     a14:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     a16:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     a1a:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     a1e:	d80c      	bhi.n	a3a <initialize()+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     a20:	9906      	ldr	r1, [sp, #24]
     a22:	458c      	cmp	ip, r1
     a24:	dc07      	bgt.n	a36 <initialize()+0xa2>
     a26:	290f      	cmp	r1, #15
     a28:	d005      	beq.n	a36 <initialize()+0xa2>
                    istart8 = lastSlotUsed + 1;
     a2a:	3101      	adds	r1, #1
     a2c:	b2c9      	uxtb	r1, r1
     a2e:	428b      	cmp	r3, r1
     a30:	9103      	str	r1, [sp, #12]
     a32:	bf38      	it	cc
     a34:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     a36:	b259      	sxtb	r1, r3
     a38:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     a3a:	a909      	add	r1, sp, #36	; 0x24
     a3c:	9100      	str	r1, [sp, #0]
     a3e:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a40:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     a44:	f88d a021 	strb.w	sl, [sp, #33]	; 0x21
        b = rhs.b;
     a48:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a4c:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     a50:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     a54:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     a58:	f005 fe62 	bl	6720 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     a5c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a5e:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
     a62:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
     a66:	46ca      	mov	sl, r9
     a68:	d1bd      	bne.n	9e6 <initialize()+0x52>
	curr_leds.current_palette	= rainbowsherbet_gp;
	curr_leds.target_palette	= Tropical_Colors_gp;
     a6a:	4b21      	ldr	r3, [pc, #132]	; (af0 <initialize()+0x15c>)
     a6c:	4922      	ldr	r1, [pc, #136]	; (af8 <initialize()+0x164>)
     a6e:	f203 10f7 	addw	r0, r3, #503	; 0x1f7
     a72:	f7ff fe99 	bl	7a8 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     a76:	481e      	ldr	r0, [pc, #120]	; (af0 <initialize()+0x15c>)
     a78:	f7ff fef4 	bl	864 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     a7c:	4b1f      	ldr	r3, [pc, #124]	; (afc <initialize()+0x168>)
     a7e:	4a20      	ldr	r2, [pc, #128]	; (b00 <initialize()+0x16c>)
     a80:	7818      	ldrb	r0, [r3, #0]
     a82:	4b1b      	ldr	r3, [pc, #108]	; (af0 <initialize()+0x15c>)
     a84:	f883 022b 	strb.w	r0, [r3, #555]	; 0x22b
     a88:	2300      	movs	r3, #0
     a8a:	e001      	b.n	a90 <initialize()+0xfc>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     a8c:	2b18      	cmp	r3, #24
     a8e:	d009      	beq.n	aa4 <initialize()+0x110>
		if (leds.mode_name == ModeList[i]) {
     a90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     a94:	4281      	cmp	r1, r0
     a96:	b2dc      	uxtb	r4, r3
     a98:	f103 0301 	add.w	r3, r3, #1
     a9c:	d1f6      	bne.n	a8c <initialize()+0xf8>
			leds.mode_number = i;
     a9e:	4b14      	ldr	r3, [pc, #80]	; (af0 <initialize()+0x15c>)
     aa0:	f883 422a 	strb.w	r4, [r3, #554]	; 0x22a
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     aa4:	4c17      	ldr	r4, [pc, #92]	; (b04 <initialize()+0x170>)
     aa6:	aa09      	add	r2, sp, #36	; 0x24
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     aa8:	2300      	movs	r3, #0
     aaa:	4620      	mov	r0, r4
     aac:	2196      	movs	r1, #150	; 0x96
     aae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
     ab2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
     ab6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
     aba:	f005 fe01 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     abe:	2301      	movs	r3, #1
	next_leds.current_palette	= bhw3_21_gp;
     ac0:	f204 10c7 	addw	r0, r4, #455	; 0x1c7
     ac4:	4910      	ldr	r1, [pc, #64]	; (b08 <initialize()+0x174>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     ac6:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
	next_leds.current_palette	= bhw3_21_gp;
     aca:	f7ff fe6d 	bl	7a8 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= bhw3_30_gp;
     ace:	490f      	ldr	r1, [pc, #60]	; (b0c <initialize()+0x178>)
     ad0:	f204 10f7 	addw	r0, r4, #503	; 0x1f7
     ad4:	f7ff fe68 	bl	7a8 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     ad8:	4b05      	ldr	r3, [pc, #20]	; (af0 <initialize()+0x15c>)
	updatePaletteIndex(next_leds);
     ada:	4620      	mov	r0, r4
	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
	next_leds.current_palette	= bhw3_21_gp;
	next_leds.target_palette	= bhw3_30_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     adc:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
     ae0:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
	updatePaletteIndex(next_leds);
     ae4:	f7ff febe 	bl	864 <updatePaletteIndex(LEDStruct&)>
}
     ae8:	b00b      	add	sp, #44	; 0x2c
     aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     aee:	bf00      	nop
     af0:	1fff945c 	.word	0x1fff945c
     af4:	0000b860 	.word	0x0000b860
     af8:	0000b9e0 	.word	0x0000b9e0
     afc:	1fff873d 	.word	0x1fff873d
     b00:	1fff8723 	.word	0x1fff8723
     b04:	1fff8c80 	.word	0x1fff8c80
     b08:	0000b730 	.word	0x0000b730
     b0c:	0000b818 	.word	0x0000b818

00000b10 <blending()>:
}



// Transition functions
void blending() {
     b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b14:	f8df b090 	ldr.w	fp, [pc, #144]	; ba8 <blending()+0x98>
     b18:	f8df a090 	ldr.w	sl, [pc, #144]	; bac <blending()+0x9c>
     b1c:	4c1d      	ldr	r4, [pc, #116]	; (b94 <blending()+0x84>)
     b1e:	4f1e      	ldr	r7, [pc, #120]	; (b98 <blending()+0x88>)
     b20:	b085      	sub	sp, #20
     b22:	465d      	mov	r5, fp
     b24:	f50b 78e1 	add.w	r8, fp, #450	; 0x1c2
     b28:	4656      	mov	r6, sl
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
     b2a:	4632      	mov	r2, r6
     b2c:	4629      	mov	r1, r5
     b2e:	783b      	ldrb	r3, [r7, #0]
     b30:	f8df 9064 	ldr.w	r9, [pc, #100]	; b98 <blending()+0x88>
     b34:	a803      	add	r0, sp, #12
     b36:	3503      	adds	r5, #3
     b38:	f005 feb4 	bl	68a4 <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b3c:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
     b40:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
     b44:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b48:	7021      	strb	r1, [r4, #0]
     b4a:	45a8      	cmp	r8, r5
        g = rhs.g;
     b4c:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
     b4e:	70a3      	strb	r3, [r4, #2]
     b50:	f106 0603 	add.w	r6, r6, #3
     b54:	f104 0403 	add.w	r4, r4, #3
     b58:	d1e7      	bne.n	b2a <blending()+0x1a>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
     b5a:	4e10      	ldr	r6, [pc, #64]	; (b9c <blending()+0x8c>)
     b5c:	6833      	ldr	r3, [r6, #0]
     b5e:	07db      	lsls	r3, r3, #31
     b60:	f140 8266 	bpl.w	1030 <blending()+0x520>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b64:	4d0e      	ldr	r5, [pc, #56]	; (ba0 <blending()+0x90>)
     b66:	4c0f      	ldr	r4, [pc, #60]	; (ba4 <blending()+0x94>)
     b68:	682b      	ldr	r3, [r5, #0]
     b6a:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
     b6c:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
     b70:	9b03      	ldr	r3, [sp, #12]
     b72:	1a5b      	subs	r3, r3, r1
     b74:	4293      	cmp	r3, r2
     b76:	d31b      	bcc.n	bb0 <blending()+0xa0>
     b78:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     b7a:	682a      	ldr	r2, [r5, #0]
     b7c:	9202      	str	r2, [sp, #8]
     b7e:	3301      	adds	r3, #1
	return ret;
     b80:	9a02      	ldr	r2, [sp, #8]
     b82:	6022      	str	r2, [r4, #0]
     b84:	b2db      	uxtb	r3, r3
     b86:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
     b88:	2bff      	cmp	r3, #255	; 0xff
     b8a:	d015      	beq.n	bb8 <blending()+0xa8>
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
		curr_leds = next_leds;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
		curr_leds.array_type = CURRENT;
	}
}
     b8c:	b005      	add	sp, #20
     b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b92:	bf00      	nop
     b94:	1fff9bc4 	.word	0x1fff9bc4
     b98:	1fff8c76 	.word	0x1fff8c76
     b9c:	1fff9444 	.word	0x1fff9444
     ba0:	1fff9e00 	.word	0x1fff9e00
     ba4:	1fff9438 	.word	0x1fff9438
     ba8:	1fff945c 	.word	0x1fff945c
     bac:	1fff8c80 	.word	0x1fff8c80
     bb0:	f899 3000 	ldrb.w	r3, [r9]

// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
     bb4:	2bff      	cmp	r3, #255	; 0xff
     bb6:	d1e9      	bne.n	b8c <blending()+0x7c>
		in_transition = 0;
     bb8:	4cec      	ldr	r4, [pc, #944]	; (f6c <blending()+0x45c>)
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     bba:	48ed      	ldr	r0, [pc, #948]	; (f70 <blending()+0x460>)
// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
     bbc:	2300      	movs	r3, #0
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     bbe:	466a      	mov	r2, sp
     bc0:	2196      	movs	r1, #150	; 0x96
// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
		in_transition = 0;
     bc2:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     bc4:	f88d 3000 	strb.w	r3, [sp]
     bc8:	f88d 3001 	strb.w	r3, [sp, #1]
     bcc:	f88d 3002 	strb.w	r3, [sp, #2]
		fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     bd0:	f005 fd76 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
     bd4:	4be7      	ldr	r3, [pc, #924]	; (f74 <blending()+0x464>)
     bd6:	4ae8      	ldr	r2, [pc, #928]	; (f78 <blending()+0x468>)
     bd8:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     bdc:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     be0:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     be4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     be8:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     bec:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     bf0:	f803 1c01 	strb.w	r1, [r3, #-1]
     bf4:	3303      	adds	r3, #3
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     bf6:	429d      	cmp	r5, r3
     bf8:	f102 0203 	add.w	r2, r2, #3
     bfc:	d1ee      	bne.n	bdc <blending()+0xcc>
     bfe:	f89a 01c2 	ldrb.w	r0, [sl, #450]	; 0x1c2
     c02:	f89a 11c3 	ldrb.w	r1, [sl, #451]	; 0x1c3
     c06:	f89a 21c4 	ldrb.w	r2, [sl, #452]	; 0x1c4
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
     c0a:	4bdc      	ldr	r3, [pc, #880]	; (f7c <blending()+0x46c>)
     c0c:	f88b 01c2 	strb.w	r0, [fp, #450]	; 0x1c2
     c10:	f88b 11c3 	strb.w	r1, [fp, #451]	; 0x1c3
     c14:	f89a 01c5 	ldrb.w	r0, [sl, #453]	; 0x1c5
     c18:	f89a 11c6 	ldrb.w	r1, [sl, #454]	; 0x1c6
     c1c:	f88b 21c4 	strb.w	r2, [fp, #452]	; 0x1c4
     c20:	4ad7      	ldr	r2, [pc, #860]	; (f80 <blending()+0x470>)
     c22:	f88b 01c5 	strb.w	r0, [fp, #453]	; 0x1c5
     c26:	f88b 11c6 	strb.w	r1, [fp, #454]	; 0x1c6
     c2a:	f103 0030 	add.w	r0, r3, #48	; 0x30
     c2e:	681c      	ldr	r4, [r3, #0]
     c30:	6859      	ldr	r1, [r3, #4]
     c32:	6014      	str	r4, [r2, #0]
     c34:	689c      	ldr	r4, [r3, #8]
     c36:	6051      	str	r1, [r2, #4]
     c38:	68d9      	ldr	r1, [r3, #12]
     c3a:	60d1      	str	r1, [r2, #12]
     c3c:	3310      	adds	r3, #16
     c3e:	4283      	cmp	r3, r0
     c40:	6094      	str	r4, [r2, #8]
     c42:	f102 0210 	add.w	r2, r2, #16
     c46:	d1f2      	bne.n	c2e <blending()+0x11e>
     c48:	4bce      	ldr	r3, [pc, #824]	; (f84 <blending()+0x474>)
     c4a:	4acf      	ldr	r2, [pc, #828]	; (f88 <blending()+0x478>)
     c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
     c50:	681c      	ldr	r4, [r3, #0]
     c52:	6858      	ldr	r0, [r3, #4]
     c54:	6014      	str	r4, [r2, #0]
     c56:	689c      	ldr	r4, [r3, #8]
     c58:	6050      	str	r0, [r2, #4]
     c5a:	68d8      	ldr	r0, [r3, #12]
     c5c:	60d0      	str	r0, [r2, #12]
     c5e:	3310      	adds	r3, #16
     c60:	428b      	cmp	r3, r1
     c62:	6094      	str	r4, [r2, #8]
     c64:	f102 0210 	add.w	r2, r2, #16
     c68:	d1f2      	bne.n	c50 <blending()+0x140>
     c6a:	f89a 2227 	ldrb.w	r2, [sl, #551]	; 0x227
     c6e:	f89a 3228 	ldrb.w	r3, [sl, #552]	; 0x228
     c72:	f89a 4229 	ldrb.w	r4, [sl, #553]	; 0x229
     c76:	f89a 022a 	ldrb.w	r0, [sl, #554]	; 0x22a
     c7a:	f89a 122b 	ldrb.w	r1, [sl, #555]	; 0x22b
     c7e:	f88b 2227 	strb.w	r2, [fp, #551]	; 0x227
     c82:	f88b 3228 	strb.w	r3, [fp, #552]	; 0x228
     c86:	f89a 222c 	ldrb.w	r2, [sl, #556]	; 0x22c
     c8a:	f89a 322d 	ldrb.w	r3, [sl, #557]	; 0x22d
     c8e:	f88b 4229 	strb.w	r4, [fp, #553]	; 0x229
     c92:	f88b 022a 	strb.w	r0, [fp, #554]	; 0x22a
     c96:	f89a 422e 	ldrb.w	r4, [sl, #558]	; 0x22e
     c9a:	f89a 022f 	ldrb.w	r0, [sl, #559]	; 0x22f
     c9e:	f88b 122b 	strb.w	r1, [fp, #555]	; 0x22b
     ca2:	f88b 222c 	strb.w	r2, [fp, #556]	; 0x22c
     ca6:	f89a 1230 	ldrb.w	r1, [sl, #560]	; 0x230
     caa:	f89a 2231 	ldrb.w	r2, [sl, #561]	; 0x231
     cae:	f88b 322d 	strb.w	r3, [fp, #557]	; 0x22d
     cb2:	f89a 3232 	ldrb.w	r3, [sl, #562]	; 0x232
     cb6:	f88b 422e 	strb.w	r4, [fp, #558]	; 0x22e
     cba:	f88b 022f 	strb.w	r0, [fp, #559]	; 0x22f
     cbe:	f89a 4233 	ldrb.w	r4, [sl, #563]	; 0x233
     cc2:	f89a 0234 	ldrb.w	r0, [sl, #564]	; 0x234
     cc6:	f88b 1230 	strb.w	r1, [fp, #560]	; 0x230
     cca:	f88b 2231 	strb.w	r2, [fp, #561]	; 0x231
     cce:	f89a 1235 	ldrb.w	r1, [sl, #565]	; 0x235
     cd2:	f89a 2236 	ldrb.w	r2, [sl, #566]	; 0x236
     cd6:	f88b 3232 	strb.w	r3, [fp, #562]	; 0x232
     cda:	4bac      	ldr	r3, [pc, #688]	; (f8c <blending()+0x47c>)
     cdc:	f88b 0234 	strb.w	r0, [fp, #564]	; 0x234
     ce0:	f88b 1235 	strb.w	r1, [fp, #565]	; 0x235
     ce4:	f88b 2236 	strb.w	r2, [fp, #566]	; 0x236
     ce8:	f88b 4233 	strb.w	r4, [fp, #563]	; 0x233
     cec:	4aa8      	ldr	r2, [pc, #672]	; (f90 <blending()+0x480>)
     cee:	f89a 4237 	ldrb.w	r4, [sl, #567]	; 0x237
     cf2:	f89a 0238 	ldrb.w	r0, [sl, #568]	; 0x238
     cf6:	f89a 1239 	ldrb.w	r1, [sl, #569]	; 0x239
     cfa:	f88b 4237 	strb.w	r4, [fp, #567]	; 0x237
     cfe:	f103 053c 	add.w	r5, r3, #60	; 0x3c
     d02:	f88b 0238 	strb.w	r0, [fp, #568]	; 0x238
     d06:	f88b 1239 	strb.w	r1, [fp, #569]	; 0x239
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d0a:	f812 4c03 	ldrb.w	r4, [r2, #-3]
        g = rhs.g;
     d0e:	f812 0c02 	ldrb.w	r0, [r2, #-2]
        b = rhs.b;
     d12:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     d16:	f803 4c03 	strb.w	r4, [r3, #-3]
        g = rhs.g;
     d1a:	f803 0c02 	strb.w	r0, [r3, #-2]
        b = rhs.b;
     d1e:	f803 1c01 	strb.w	r1, [r3, #-1]
     d22:	3303      	adds	r3, #3
     d24:	429d      	cmp	r5, r3
     d26:	f102 0203 	add.w	r2, r2, #3
     d2a:	d1ee      	bne.n	d0a <blending()+0x1fa>
     d2c:	f89a 2276 	ldrb.w	r2, [sl, #630]	; 0x276
     d30:	f89a 0277 	ldrb.w	r0, [sl, #631]	; 0x277
     d34:	f89a 1278 	ldrb.w	r1, [sl, #632]	; 0x278
     d38:	f88b 2276 	strb.w	r2, [fp, #630]	; 0x276
     d3c:	f89a 2279 	ldrb.w	r2, [sl, #633]	; 0x279
     d40:	4b94      	ldr	r3, [pc, #592]	; (f94 <blending()+0x484>)
     d42:	f88b 0277 	strb.w	r0, [fp, #631]	; 0x277
     d46:	f88b 1278 	strb.w	r1, [fp, #632]	; 0x278
     d4a:	f89a 027a 	ldrb.w	r0, [sl, #634]	; 0x27a
     d4e:	f89a 127b 	ldrb.w	r1, [sl, #635]	; 0x27b
     d52:	f88b 2279 	strb.w	r2, [fp, #633]	; 0x279
     d56:	f89a 227c 	ldrb.w	r2, [sl, #636]	; 0x27c
     d5a:	f88b 027a 	strb.w	r0, [fp, #634]	; 0x27a
     d5e:	f88b 127b 	strb.w	r1, [fp, #635]	; 0x27b
     d62:	f89a 027d 	ldrb.w	r0, [sl, #637]	; 0x27d
     d66:	f89a 127e 	ldrb.w	r1, [sl, #638]	; 0x27e
     d6a:	f88b 227c 	strb.w	r2, [fp, #636]	; 0x27c
     d6e:	4a8a      	ldr	r2, [pc, #552]	; (f98 <blending()+0x488>)
     d70:	f88b 027d 	strb.w	r0, [fp, #637]	; 0x27d
     d74:	f88b 127e 	strb.w	r1, [fp, #638]	; 0x27e
     d78:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     d7c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d80:	f803 1b01 	strb.w	r1, [r3], #1
     d84:	4283      	cmp	r3, r0
     d86:	d1f9      	bne.n	d7c <blending()+0x26c>
     d88:	4984      	ldr	r1, [pc, #528]	; (f9c <blending()+0x48c>)
     d8a:	f103 004b 	add.w	r0, r3, #75	; 0x4b
     d8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     d92:	f803 2b01 	strb.w	r2, [r3], #1
     d96:	4283      	cmp	r3, r0
     d98:	4a75      	ldr	r2, [pc, #468]	; (f70 <blending()+0x460>)
     d9a:	d1f8      	bne.n	d8e <blending()+0x27e>
     d9c:	f89a 3315 	ldrb.w	r3, [sl, #789]	; 0x315
     da0:	f89a 5316 	ldrb.w	r5, [sl, #790]	; 0x316
     da4:	f89a 4317 	ldrb.w	r4, [sl, #791]	; 0x317
     da8:	f89a 0318 	ldrb.w	r0, [sl, #792]	; 0x318
     dac:	f89a 1319 	ldrb.w	r1, [sl, #793]	; 0x319
     db0:	f882 3315 	strb.w	r3, [r2, #789]	; 0x315
     db4:	f89a 331a 	ldrb.w	r3, [sl, #794]	; 0x31a
     db8:	f882 5316 	strb.w	r5, [r2, #790]	; 0x316
     dbc:	f882 4317 	strb.w	r4, [r2, #791]	; 0x317
     dc0:	f8ba 531c 	ldrh.w	r5, [sl, #796]	; 0x31c
     dc4:	f8ba 431e 	ldrh.w	r4, [sl, #798]	; 0x31e
     dc8:	f882 0318 	strb.w	r0, [r2, #792]	; 0x318
     dcc:	f882 1319 	strb.w	r1, [r2, #793]	; 0x319
     dd0:	f8ba 0320 	ldrh.w	r0, [sl, #800]	; 0x320
     dd4:	f89a 1322 	ldrb.w	r1, [sl, #802]	; 0x322
     dd8:	f882 331a 	strb.w	r3, [r2, #794]	; 0x31a
     ddc:	f89a 3323 	ldrb.w	r3, [sl, #803]	; 0x323
     de0:	f8a2 531c 	strh.w	r5, [r2, #796]	; 0x31c
     de4:	f8a2 431e 	strh.w	r4, [r2, #798]	; 0x31e
     de8:	f89a 5324 	ldrb.w	r5, [sl, #804]	; 0x324
     dec:	f89a 4325 	ldrb.w	r4, [sl, #805]	; 0x325
     df0:	f8a2 0320 	strh.w	r0, [r2, #800]	; 0x320
     df4:	f882 1322 	strb.w	r1, [r2, #802]	; 0x322
     df8:	f89a 0326 	ldrb.w	r0, [sl, #806]	; 0x326
     dfc:	f89a 1327 	ldrb.w	r1, [sl, #807]	; 0x327
     e00:	f882 3323 	strb.w	r3, [r2, #803]	; 0x323
     e04:	f8ba 3328 	ldrh.w	r3, [sl, #808]	; 0x328
     e08:	f882 5324 	strb.w	r5, [r2, #804]	; 0x324
     e0c:	f882 4325 	strb.w	r4, [r2, #805]	; 0x325
     e10:	f882 0326 	strb.w	r0, [r2, #806]	; 0x326
     e14:	f882 1327 	strb.w	r1, [r2, #807]	; 0x327
     e18:	f8a2 3328 	strh.w	r3, [r2, #808]	; 0x328
     e1c:	f8ba 332a 	ldrh.w	r3, [sl, #810]	; 0x32a
     e20:	f8a2 332a 	strh.w	r3, [r2, #810]	; 0x32a
     e24:	f8ba 532c 	ldrh.w	r5, [sl, #812]	; 0x32c
     e28:	f8ba 432e 	ldrh.w	r4, [sl, #814]	; 0x32e
     e2c:	f8ba 0330 	ldrh.w	r0, [sl, #816]	; 0x330
     e30:	f8ba 1332 	ldrh.w	r1, [sl, #818]	; 0x332
     e34:	f8ba 3334 	ldrh.w	r3, [sl, #820]	; 0x334
     e38:	f8a2 532c 	strh.w	r5, [r2, #812]	; 0x32c
     e3c:	f8a2 432e 	strh.w	r4, [r2, #814]	; 0x32e
     e40:	f8ba 5336 	ldrh.w	r5, [sl, #822]	; 0x336
     e44:	f8ba 4338 	ldrh.w	r4, [sl, #824]	; 0x338
     e48:	f8a2 0330 	strh.w	r0, [r2, #816]	; 0x330
     e4c:	f8a2 1332 	strh.w	r1, [r2, #818]	; 0x332
     e50:	f8ba 033a 	ldrh.w	r0, [sl, #826]	; 0x33a
     e54:	f8ba 133c 	ldrh.w	r1, [sl, #828]	; 0x33c
     e58:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
     e5c:	f89a 333e 	ldrb.w	r3, [sl, #830]	; 0x33e
     e60:	f8a2 5336 	strh.w	r5, [r2, #822]	; 0x336
     e64:	f8a2 4338 	strh.w	r4, [r2, #824]	; 0x338
     e68:	f89a 533f 	ldrb.w	r5, [sl, #831]	; 0x33f
     e6c:	f89a 4340 	ldrb.w	r4, [sl, #832]	; 0x340
     e70:	f8a2 033a 	strh.w	r0, [r2, #826]	; 0x33a
     e74:	f8a2 133c 	strh.w	r1, [r2, #828]	; 0x33c
     e78:	f89a 0341 	ldrb.w	r0, [sl, #833]	; 0x341
     e7c:	f89a 1342 	ldrb.w	r1, [sl, #834]	; 0x342
     e80:	f882 333e 	strb.w	r3, [r2, #830]	; 0x33e
     e84:	f89a 3343 	ldrb.w	r3, [sl, #835]	; 0x343
     e88:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
     e8c:	f882 4340 	strb.w	r4, [r2, #832]	; 0x340
     e90:	f882 0341 	strb.w	r0, [r2, #833]	; 0x341
     e94:	f882 1342 	strb.w	r1, [r2, #834]	; 0x342
     e98:	f882 3343 	strb.w	r3, [r2, #835]	; 0x343
     e9c:	f89a 3344 	ldrb.w	r3, [sl, #836]	; 0x344
     ea0:	f882 3344 	strb.w	r3, [r2, #836]	; 0x344
     ea4:	f89a 5345 	ldrb.w	r5, [sl, #837]	; 0x345
     ea8:	f89a 4346 	ldrb.w	r4, [sl, #838]	; 0x346
     eac:	f89a 0347 	ldrb.w	r0, [sl, #839]	; 0x347
     eb0:	f89a 1348 	ldrb.w	r1, [sl, #840]	; 0x348
     eb4:	f89a 3349 	ldrb.w	r3, [sl, #841]	; 0x349
     eb8:	f882 5345 	strb.w	r5, [r2, #837]	; 0x345
     ebc:	f882 4346 	strb.w	r4, [r2, #838]	; 0x346
     ec0:	f89a 534a 	ldrb.w	r5, [sl, #842]	; 0x34a
     ec4:	f89a 434b 	ldrb.w	r4, [sl, #843]	; 0x34b
     ec8:	f882 0347 	strb.w	r0, [r2, #839]	; 0x347
     ecc:	f882 1348 	strb.w	r1, [r2, #840]	; 0x348
     ed0:	f89a 034c 	ldrb.w	r0, [sl, #844]	; 0x34c
     ed4:	f89a 134d 	ldrb.w	r1, [sl, #845]	; 0x34d
     ed8:	f882 3349 	strb.w	r3, [r2, #841]	; 0x349
     edc:	f89a 334e 	ldrb.w	r3, [sl, #846]	; 0x34e
     ee0:	f882 534a 	strb.w	r5, [r2, #842]	; 0x34a
     ee4:	f882 434b 	strb.w	r4, [r2, #843]	; 0x34b
     ee8:	f882 034c 	strb.w	r0, [r2, #844]	; 0x34c
     eec:	f89a 4350 	ldrb.w	r4, [sl, #848]	; 0x350
     ef0:	f89a 0351 	ldrb.w	r0, [sl, #849]	; 0x351
     ef4:	f882 134d 	strb.w	r1, [r2, #845]	; 0x34d
     ef8:	f882 334e 	strb.w	r3, [r2, #846]	; 0x34e
     efc:	f89a 1352 	ldrb.w	r1, [sl, #850]	; 0x352
     f00:	f89a 3353 	ldrb.w	r3, [sl, #851]	; 0x353
     f04:	f89a 534f 	ldrb.w	r5, [sl, #847]	; 0x34f
     f08:	f882 4350 	strb.w	r4, [r2, #848]	; 0x350
     f0c:	f882 0351 	strb.w	r0, [r2, #849]	; 0x351
     f10:	f882 1352 	strb.w	r1, [r2, #850]	; 0x352
     f14:	f882 3353 	strb.w	r3, [r2, #851]	; 0x353
     f18:	f882 534f 	strb.w	r5, [r2, #847]	; 0x34f
     f1c:	4920      	ldr	r1, [pc, #128]	; (fa0 <blending()+0x490>)
     f1e:	f89a 5354 	ldrb.w	r5, [sl, #852]	; 0x354
     f22:	f89a 335d 	ldrb.w	r3, [sl, #861]	; 0x35d
     f26:	f8da 4358 	ldr.w	r4, [sl, #856]	; 0x358
     f2a:	f89a 035c 	ldrb.w	r0, [sl, #860]	; 0x35c
     f2e:	f882 335d 	strb.w	r3, [r2, #861]	; 0x35d
     f32:	f882 5354 	strb.w	r5, [r2, #852]	; 0x354
     f36:	f8c2 4358 	str.w	r4, [r2, #856]	; 0x358
     f3a:	f882 035c 	strb.w	r0, [r2, #860]	; 0x35c
     f3e:	f502 7358 	add.w	r3, r2, #864	; 0x360
     f42:	f502 628a 	add.w	r2, r2, #1104	; 0x450
     f46:	f851 0f04 	ldr.w	r0, [r1, #4]!
     f4a:	f843 0b04 	str.w	r0, [r3], #4
     f4e:	4293      	cmp	r3, r2
     f50:	d1f9      	bne.n	f46 <blending()+0x436>
     f52:	4a14      	ldr	r2, [pc, #80]	; (fa4 <blending()+0x494>)
     f54:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
     f58:	f852 1f04 	ldr.w	r1, [r2, #4]!
     f5c:	f843 1b04 	str.w	r1, [r3], #4
     f60:	4283      	cmp	r3, r0
     f62:	d1f9      	bne.n	f58 <blending()+0x448>
     f64:	4a10      	ldr	r2, [pc, #64]	; (fa8 <blending()+0x498>)
     f66:	f103 003c 	add.w	r0, r3, #60	; 0x3c
     f6a:	e01f      	b.n	fac <blending()+0x49c>
     f6c:	1fff93f8 	.word	0x1fff93f8
     f70:	1fff945c 	.word	0x1fff945c
     f74:	1fff945f 	.word	0x1fff945f
     f78:	1fff8c83 	.word	0x1fff8c83
     f7c:	1fff8e47 	.word	0x1fff8e47
     f80:	1fff9623 	.word	0x1fff9623
     f84:	1fff8e77 	.word	0x1fff8e77
     f88:	1fff9653 	.word	0x1fff9653
     f8c:	1fff9699 	.word	0x1fff9699
     f90:	1fff8ebd 	.word	0x1fff8ebd
     f94:	1fff96db 	.word	0x1fff96db
     f98:	1fff8efe 	.word	0x1fff8efe
     f9c:	1fff8f49 	.word	0x1fff8f49
     fa0:	1fff8fdc 	.word	0x1fff8fdc
     fa4:	1fff90cc 	.word	0x1fff90cc
     fa8:	1fff91bf 	.word	0x1fff91bf
     fac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     fb0:	f803 1b01 	strb.w	r1, [r3], #1
     fb4:	4283      	cmp	r3, r0
     fb6:	d1f9      	bne.n	fac <blending()+0x49c>
     fb8:	4a2c      	ldr	r2, [pc, #176]	; (106c <blending()+0x55c>)
     fba:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
     fbe:	f852 1f04 	ldr.w	r1, [r2, #4]!
     fc2:	f843 1b04 	str.w	r1, [r3], #4
     fc6:	4283      	cmp	r3, r0
     fc8:	d1f9      	bne.n	fbe <blending()+0x4ae>
     fca:	4a29      	ldr	r2, [pc, #164]	; (1070 <blending()+0x560>)
     fcc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
     fd0:	f852 1f04 	ldr.w	r1, [r2, #4]!
     fd4:	f843 1b04 	str.w	r1, [r3], #4
     fd8:	4283      	cmp	r3, r0
     fda:	4c26      	ldr	r4, [pc, #152]	; (1074 <blending()+0x564>)
     fdc:	d1f8      	bne.n	fd0 <blending()+0x4c0>
     fde:	f89a 575c 	ldrb.w	r5, [sl, #1884]	; 0x75c
     fe2:	f89a 175d 	ldrb.w	r1, [sl, #1885]	; 0x75d
     fe6:	f89a 075e 	ldrb.w	r0, [sl, #1886]	; 0x75e
     fea:	f8ba 7760 	ldrh.w	r7, [sl, #1888]	; 0x760
     fee:	f8ba 6762 	ldrh.w	r6, [sl, #1890]	; 0x762
     ff2:	f89a 3764 	ldrb.w	r3, [sl, #1892]	; 0x764
     ff6:	f884 575c 	strb.w	r5, [r4, #1884]	; 0x75c
     ffa:	f884 175d 	strb.w	r1, [r4, #1885]	; 0x75d
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     ffe:	2500      	movs	r5, #0
    1000:	f884 075e 	strb.w	r0, [r4, #1886]	; 0x75e
		curr_leds = next_leds;
		fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1004:	466a      	mov	r2, sp
    1006:	2196      	movs	r1, #150	; 0x96
    1008:	481b      	ldr	r0, [pc, #108]	; (1078 <blending()+0x568>)
    100a:	f8a4 7760 	strh.w	r7, [r4, #1888]	; 0x760
    100e:	f8a4 6762 	strh.w	r6, [r4, #1890]	; 0x762
    1012:	f884 3764 	strb.w	r3, [r4, #1892]	; 0x764
    1016:	f88d 5000 	strb.w	r5, [sp]
    101a:	f88d 5001 	strb.w	r5, [sp, #1]
    101e:	f88d 5002 	strb.w	r5, [sp, #2]
    1022:	f005 fb4d 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
		curr_leds.array_type = CURRENT;
    1026:	f884 51c6 	strb.w	r5, [r4, #454]	; 0x1c6
	}
}
    102a:	b005      	add	sp, #20
    102c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


// Transition functions
void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1030:	4630      	mov	r0, r6
    1032:	f006 fb7f 	bl	7734 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1036:	4d11      	ldr	r5, [pc, #68]	; (107c <blending()+0x56c>)
    1038:	b958      	cbnz	r0, 1052 <blending()+0x542>
    103a:	4c11      	ldr	r4, [pc, #68]	; (1080 <blending()+0x570>)
    103c:	682b      	ldr	r3, [r5, #0]
    103e:	9303      	str	r3, [sp, #12]
    1040:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1044:	9b03      	ldr	r3, [sp, #12]
    1046:	1a5b      	subs	r3, r3, r1
    1048:	4293      	cmp	r3, r2
    104a:	f4bf ad95 	bcs.w	b78 <blending()+0x68>
    104e:	783b      	ldrb	r3, [r7, #0]
    1050:	e59a      	b.n	b88 <blending()+0x78>
    1052:	4b0c      	ldr	r3, [pc, #48]	; (1084 <blending()+0x574>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1054:	682a      	ldr	r2, [r5, #0]
    1056:	781b      	ldrb	r3, [r3, #0]
    1058:	4c09      	ldr	r4, [pc, #36]	; (1080 <blending()+0x570>)
    105a:	9201      	str	r2, [sp, #4]
	return ret;
    105c:	9a01      	ldr	r2, [sp, #4]
    105e:	6022      	str	r2, [r4, #0]
    1060:	009b      	lsls	r3, r3, #2
    1062:	4630      	mov	r0, r6
    1064:	6063      	str	r3, [r4, #4]
    1066:	f006 fb6b 	bl	7740 <__cxa_guard_release>
    106a:	e7e7      	b.n	103c <blending()+0x52c>
    106c:	1fff91f8 	.word	0x1fff91f8
    1070:	1fff92e8 	.word	0x1fff92e8
    1074:	1fff945c 	.word	0x1fff945c
    1078:	1fff8c80 	.word	0x1fff8c80
    107c:	1fff9e00 	.word	0x1fff9e00
    1080:	1fff9438 	.word	0x1fff9438
    1084:	1fff9450 	.word	0x1fff9450

00001088 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1088:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    108a:	2101      	movs	r1, #1
    108c:	4604      	mov	r4, r0
    108e:	4894      	ldr	r0, [pc, #592]	; (12e0 <print_palette(unsigned char)+0x258>)
    1090:	f007 fbe8 	bl	8864 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1094:	4621      	mov	r1, r4
    1096:	2300      	movs	r3, #0
    1098:	220a      	movs	r2, #10
    109a:	4892      	ldr	r0, [pc, #584]	; (12e4 <print_palette(unsigned char)+0x25c>)
    109c:	f007 fdf6 	bl	8c8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    10a0:	2102      	movs	r1, #2
    10a2:	4891      	ldr	r0, [pc, #580]	; (12e8 <print_palette(unsigned char)+0x260>)
    10a4:	f007 fbde 	bl	8864 <usb_serial_write>
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    10a8:	2c5c      	cmp	r4, #92	; 0x5c
    10aa:	f200 8281 	bhi.w	15b0 <print_palette(unsigned char)+0x528>
    10ae:	e8df f014 	tbh	[pc, r4, lsl #1]
    10b2:	027a      	.short	0x027a
    10b4:	02700275 	.word	0x02700275
    10b8:	0266026b 	.word	0x0266026b
    10bc:	025c0261 	.word	0x025c0261
    10c0:	02520257 	.word	0x02520257
    10c4:	0248024d 	.word	0x0248024d
    10c8:	023e0243 	.word	0x023e0243
    10cc:	02340239 	.word	0x02340239
    10d0:	022a022f 	.word	0x022a022f
    10d4:	02200225 	.word	0x02200225
    10d8:	0216021b 	.word	0x0216021b
    10dc:	020c0211 	.word	0x020c0211
    10e0:	02020207 	.word	0x02020207
    10e4:	01f801fd 	.word	0x01f801fd
    10e8:	01ee01f3 	.word	0x01ee01f3
    10ec:	01e401e9 	.word	0x01e401e9
    10f0:	01da01df 	.word	0x01da01df
    10f4:	01d001d5 	.word	0x01d001d5
    10f8:	01c601cb 	.word	0x01c601cb
    10fc:	01bc01c1 	.word	0x01bc01c1
    1100:	01b201b7 	.word	0x01b201b7
    1104:	01a801ad 	.word	0x01a801ad
    1108:	019e01a3 	.word	0x019e01a3
    110c:	01940199 	.word	0x01940199
    1110:	018a018f 	.word	0x018a018f
    1114:	01800185 	.word	0x01800185
    1118:	0176017b 	.word	0x0176017b
    111c:	016c0171 	.word	0x016c0171
    1120:	01110167 	.word	0x01110167
    1124:	0107010c 	.word	0x0107010c
    1128:	00fd0102 	.word	0x00fd0102
    112c:	00f300f8 	.word	0x00f300f8
    1130:	00e900ee 	.word	0x00e900ee
    1134:	00df00e4 	.word	0x00df00e4
    1138:	00d500da 	.word	0x00d500da
    113c:	00cb00d0 	.word	0x00cb00d0
    1140:	00c100c6 	.word	0x00c100c6
    1144:	00b700bc 	.word	0x00b700bc
    1148:	00ad00b2 	.word	0x00ad00b2
    114c:	00a300a8 	.word	0x00a300a8
    1150:	0099009e 	.word	0x0099009e
    1154:	008f0094 	.word	0x008f0094
    1158:	0085008a 	.word	0x0085008a
    115c:	007b0080 	.word	0x007b0080
    1160:	00710076 	.word	0x00710076
    1164:	0067006c 	.word	0x0067006c
    1168:	005d0062 	.word	0x005d0062
	case 91:
		Serial.println("rainbow2_gp");
		break;

	case 92:
		Serial.println("blade_runner_2049_gp");
    116c:	495f      	ldr	r1, [pc, #380]	; (12ec <print_palette(unsigned char)+0x264>)
    116e:	485d      	ldr	r0, [pc, #372]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1170:	f7ff fafc 	bl	76c <Print::println(char const*)>
		break;
    1174:	bd10      	pop	{r4, pc}
	case 90:
		Serial.println("purplefly_gp");
		break;

	case 91:
		Serial.println("rainbow2_gp");
    1176:	495e      	ldr	r1, [pc, #376]	; (12f0 <print_palette(unsigned char)+0x268>)
    1178:	485a      	ldr	r0, [pc, #360]	; (12e4 <print_palette(unsigned char)+0x25c>)
    117a:	f7ff faf7 	bl	76c <Print::println(char const*)>
		break;
    117e:	bd10      	pop	{r4, pc}
	case 89:
		Serial.println("blue_fire_gp");
		break;

	case 90:
		Serial.println("purplefly_gp");
    1180:	495c      	ldr	r1, [pc, #368]	; (12f4 <print_palette(unsigned char)+0x26c>)
    1182:	4858      	ldr	r0, [pc, #352]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1184:	f7ff faf2 	bl	76c <Print::println(char const*)>
		break;
    1188:	bd10      	pop	{r4, pc}
	case 88:
		Serial.println("cyberpunk_neon_gp");
		break;

	case 89:
		Serial.println("blue_fire_gp");
    118a:	495b      	ldr	r1, [pc, #364]	; (12f8 <print_palette(unsigned char)+0x270>)
    118c:	4855      	ldr	r0, [pc, #340]	; (12e4 <print_palette(unsigned char)+0x25c>)
    118e:	f7ff faed 	bl	76c <Print::println(char const*)>
		break;
    1192:	bd10      	pop	{r4, pc}
	case 87:
		Serial.println("Complementary_01a_gp");
		break;

	case 88:
		Serial.println("cyberpunk_neon_gp");
    1194:	4959      	ldr	r1, [pc, #356]	; (12fc <print_palette(unsigned char)+0x274>)
    1196:	4853      	ldr	r0, [pc, #332]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1198:	f7ff fae8 	bl	76c <Print::println(char const*)>
		break;
    119c:	bd10      	pop	{r4, pc}
	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
		break;

	case 87:
		Serial.println("Complementary_01a_gp");
    119e:	4958      	ldr	r1, [pc, #352]	; (1300 <print_palette(unsigned char)+0x278>)
    11a0:	4850      	ldr	r0, [pc, #320]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11a2:	f7ff fae3 	bl	76c <Print::println(char const*)>
		break;
    11a6:	bd10      	pop	{r4, pc}
	case 85:
		Serial.println("RedsandCyans_gp");
		break;

	case 86:
		Serial.println("Cyan_Magenta_Blue_gp");
    11a8:	4956      	ldr	r1, [pc, #344]	; (1304 <print_palette(unsigned char)+0x27c>)
    11aa:	484e      	ldr	r0, [pc, #312]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11ac:	f7ff fade 	bl	76c <Print::println(char const*)>
		break;
    11b0:	bd10      	pop	{r4, pc}
	case 84:
		Serial.println("stratosphere_sunset_gp");
		break;

	case 85:
		Serial.println("RedsandCyans_gp");
    11b2:	4955      	ldr	r1, [pc, #340]	; (1308 <print_palette(unsigned char)+0x280>)
    11b4:	484b      	ldr	r0, [pc, #300]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11b6:	f7ff fad9 	bl	76c <Print::println(char const*)>
		break;
    11ba:	bd10      	pop	{r4, pc}
	case 83:
		Serial.println("water1_gp");
		break;

	case 84:
		Serial.println("stratosphere_sunset_gp");
    11bc:	4953      	ldr	r1, [pc, #332]	; (130c <print_palette(unsigned char)+0x284>)
    11be:	4849      	ldr	r0, [pc, #292]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11c0:	f7ff fad4 	bl	76c <Print::println(char const*)>
		break;
    11c4:	bd10      	pop	{r4, pc}
	case 82:
		Serial.println("xanidu_2_gp");
		break;

	case 83:
		Serial.println("water1_gp");
    11c6:	4952      	ldr	r1, [pc, #328]	; (1310 <print_palette(unsigned char)+0x288>)
    11c8:	4846      	ldr	r0, [pc, #280]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11ca:	f7ff facf 	bl	76c <Print::println(char const*)>
		break;
    11ce:	bd10      	pop	{r4, pc}
	case 81:
		Serial.println("es_emerald_dragon_09_gp");
		break;

	case 82:
		Serial.println("xanidu_2_gp");
    11d0:	4950      	ldr	r1, [pc, #320]	; (1314 <print_palette(unsigned char)+0x28c>)
    11d2:	4844      	ldr	r0, [pc, #272]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11d4:	f7ff faca 	bl	76c <Print::println(char const*)>
		break;
    11d8:	bd10      	pop	{r4, pc}
	case 80:
		Serial.println("bhw3_34_gp");
		break;

	case 81:
		Serial.println("es_emerald_dragon_09_gp");
    11da:	494f      	ldr	r1, [pc, #316]	; (1318 <print_palette(unsigned char)+0x290>)
    11dc:	4841      	ldr	r0, [pc, #260]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11de:	f7ff fac5 	bl	76c <Print::println(char const*)>
		break;
    11e2:	bd10      	pop	{r4, pc}
	case 79:
		Serial.println("bhw4_009_gp");
		break;

	case 80:
		Serial.println("bhw3_34_gp");
    11e4:	494d      	ldr	r1, [pc, #308]	; (131c <print_palette(unsigned char)+0x294>)
    11e6:	483f      	ldr	r0, [pc, #252]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11e8:	f7ff fac0 	bl	76c <Print::println(char const*)>
		break;
    11ec:	bd10      	pop	{r4, pc}
	case 78:
		Serial.println("bhw3_61_gp");
		break;

	case 79:
		Serial.println("bhw4_009_gp");
    11ee:	494c      	ldr	r1, [pc, #304]	; (1320 <print_palette(unsigned char)+0x298>)
    11f0:	483c      	ldr	r0, [pc, #240]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11f2:	f7ff fabb 	bl	76c <Print::println(char const*)>
		break;
    11f6:	bd10      	pop	{r4, pc}
	case 77:
		Serial.println("bhw3_13_gp");
		break;

	case 78:
		Serial.println("bhw3_61_gp");
    11f8:	494a      	ldr	r1, [pc, #296]	; (1324 <print_palette(unsigned char)+0x29c>)
    11fa:	483a      	ldr	r0, [pc, #232]	; (12e4 <print_palette(unsigned char)+0x25c>)
    11fc:	f7ff fab6 	bl	76c <Print::println(char const*)>
		break;
    1200:	bd10      	pop	{r4, pc}
	case 76:
		Serial.println("bhw2_turq_gp");
		break;

	case 77:
		Serial.println("bhw3_13_gp");
    1202:	4949      	ldr	r1, [pc, #292]	; (1328 <print_palette(unsigned char)+0x2a0>)
    1204:	4837      	ldr	r0, [pc, #220]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1206:	f7ff fab1 	bl	76c <Print::println(char const*)>
		break;
    120a:	bd10      	pop	{r4, pc}
	case 75:
		Serial.println("bhw1_05_gp");
		break;

	case 76:
		Serial.println("bhw2_turq_gp");
    120c:	4947      	ldr	r1, [pc, #284]	; (132c <print_palette(unsigned char)+0x2a4>)
    120e:	4835      	ldr	r0, [pc, #212]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1210:	f7ff faac 	bl	76c <Print::println(char const*)>
		break;
    1214:	bd10      	pop	{r4, pc}
	case 74:
		Serial.println("bhw1_sunconure_gp");
		break;

	case 75:
		Serial.println("bhw1_05_gp");
    1216:	4946      	ldr	r1, [pc, #280]	; (1330 <print_palette(unsigned char)+0x2a8>)
    1218:	4832      	ldr	r0, [pc, #200]	; (12e4 <print_palette(unsigned char)+0x25c>)
    121a:	f7ff faa7 	bl	76c <Print::println(char const*)>
		break;
    121e:	bd10      	pop	{r4, pc}
	case 73:
		Serial.println("GMT_cool_gp");
		break;

	case 74:
		Serial.println("bhw1_sunconure_gp");
    1220:	4944      	ldr	r1, [pc, #272]	; (1334 <print_palette(unsigned char)+0x2ac>)
    1222:	4830      	ldr	r0, [pc, #192]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1224:	f7ff faa2 	bl	76c <Print::println(char const*)>
		break;
    1228:	bd10      	pop	{r4, pc}
	case 72:
		Serial.println("sunlitwave_gp");
		break;

	case 73:
		Serial.println("GMT_cool_gp");
    122a:	4943      	ldr	r1, [pc, #268]	; (1338 <print_palette(unsigned char)+0x2b0>)
    122c:	482d      	ldr	r0, [pc, #180]	; (12e4 <print_palette(unsigned char)+0x25c>)
    122e:	f7ff fa9d 	bl	76c <Print::println(char const*)>
		break;
    1232:	bd10      	pop	{r4, pc}
	case 71:
		Serial.println("scoutie_gp");
		break;

	case 72:
		Serial.println("sunlitwave_gp");
    1234:	4941      	ldr	r1, [pc, #260]	; (133c <print_palette(unsigned char)+0x2b4>)
    1236:	482b      	ldr	r0, [pc, #172]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1238:	f7ff fa98 	bl	76c <Print::println(char const*)>
		break;
    123c:	bd10      	pop	{r4, pc}
	case 70:
		Serial.println("parrot_gp");
		break;

	case 71:
		Serial.println("scoutie_gp");
    123e:	4940      	ldr	r1, [pc, #256]	; (1340 <print_palette(unsigned char)+0x2b8>)
    1240:	4828      	ldr	r0, [pc, #160]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1242:	f7ff fa93 	bl	76c <Print::println(char const*)>
		break;
    1246:	bd10      	pop	{r4, pc}
	case 69:
		Serial.println("otis_gp");
		break;

	case 70:
		Serial.println("parrot_gp");
    1248:	493e      	ldr	r1, [pc, #248]	; (1344 <print_palette(unsigned char)+0x2bc>)
    124a:	4826      	ldr	r0, [pc, #152]	; (12e4 <print_palette(unsigned char)+0x25c>)
    124c:	f7ff fa8e 	bl	76c <Print::println(char const*)>
		break;
    1250:	bd10      	pop	{r4, pc}
	case 68:
		Serial.println("faint_rainbow_gp");
		break;

	case 69:
		Serial.println("otis_gp");
    1252:	493d      	ldr	r1, [pc, #244]	; (1348 <print_palette(unsigned char)+0x2c0>)
    1254:	4823      	ldr	r0, [pc, #140]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1256:	f7ff fa89 	bl	76c <Print::println(char const*)>
		break;
    125a:	bd10      	pop	{r4, pc}
	case 67:
		Serial.println("apple_green_gp");
		break;

	case 68:
		Serial.println("faint_rainbow_gp");
    125c:	493b      	ldr	r1, [pc, #236]	; (134c <print_palette(unsigned char)+0x2c4>)
    125e:	4821      	ldr	r0, [pc, #132]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1260:	f7ff fa84 	bl	76c <Print::println(char const*)>
		break;
    1264:	bd10      	pop	{r4, pc}
	case 66:
		Serial.println("ultraviolet_mold_gp");
		break;

	case 67:
		Serial.println("apple_green_gp");
    1266:	493a      	ldr	r1, [pc, #232]	; (1350 <print_palette(unsigned char)+0x2c8>)
    1268:	481e      	ldr	r0, [pc, #120]	; (12e4 <print_palette(unsigned char)+0x25c>)
    126a:	f7ff fa7f 	bl	76c <Print::println(char const*)>
		break;
    126e:	bd10      	pop	{r4, pc}
	case 65:
		Serial.println("green_gp");
		break;

	case 66:
		Serial.println("ultraviolet_mold_gp");
    1270:	4938      	ldr	r1, [pc, #224]	; (1354 <print_palette(unsigned char)+0x2cc>)
    1272:	481c      	ldr	r0, [pc, #112]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1274:	f7ff fa7a 	bl	76c <Print::println(char const*)>
		break;
    1278:	bd10      	pop	{r4, pc}
	case 64:
		Serial.println("twilight_gp");
		break;

	case 65:
		Serial.println("green_gp");
    127a:	4937      	ldr	r1, [pc, #220]	; (1358 <print_palette(unsigned char)+0x2d0>)
    127c:	4819      	ldr	r0, [pc, #100]	; (12e4 <print_palette(unsigned char)+0x25c>)
    127e:	f7ff fa75 	bl	76c <Print::println(char const*)>
		break;
    1282:	bd10      	pop	{r4, pc}
	case 63:
		Serial.println("blueice_gp");
		break;

	case 64:
		Serial.println("twilight_gp");
    1284:	4935      	ldr	r1, [pc, #212]	; (135c <print_palette(unsigned char)+0x2d4>)
    1286:	4817      	ldr	r0, [pc, #92]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1288:	f7ff fa70 	bl	76c <Print::println(char const*)>
		break;
    128c:	bd10      	pop	{r4, pc}
	case 62:
		Serial.println("fierce_ice_gp");
		break;

	case 63:
		Serial.println("blueice_gp");
    128e:	4934      	ldr	r1, [pc, #208]	; (1360 <print_palette(unsigned char)+0x2d8>)
    1290:	4814      	ldr	r0, [pc, #80]	; (12e4 <print_palette(unsigned char)+0x25c>)
    1292:	f7ff fa6b 	bl	76c <Print::println(char const*)>
		break;
    1296:	bd10      	pop	{r4, pc}
	case 61:
		Serial.println("purple_flower_gp");
		break;

	case 62:
		Serial.println("fierce_ice_gp");
    1298:	4932      	ldr	r1, [pc, #200]	; (1364 <print_palette(unsigned char)+0x2dc>)
    129a:	4812      	ldr	r0, [pc, #72]	; (12e4 <print_palette(unsigned char)+0x25c>)
    129c:	f7ff fa66 	bl	76c <Print::println(char const*)>
		break;
    12a0:	bd10      	pop	{r4, pc}
	case 60:
		Serial.println("cequal_gp");
		break;

	case 61:
		Serial.println("purple_flower_gp");
    12a2:	4931      	ldr	r1, [pc, #196]	; (1368 <print_palette(unsigned char)+0x2e0>)
    12a4:	480f      	ldr	r0, [pc, #60]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12a6:	f7ff fa61 	bl	76c <Print::println(char const*)>
		break;
    12aa:	bd10      	pop	{r4, pc}
	case 59:
		Serial.println("cloudcolors_gp");
		break;

	case 60:
		Serial.println("cequal_gp");
    12ac:	492f      	ldr	r1, [pc, #188]	; (136c <print_palette(unsigned char)+0x2e4>)
    12ae:	480d      	ldr	r0, [pc, #52]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12b0:	f7ff fa5c 	bl	76c <Print::println(char const*)>
		break;
    12b4:	bd10      	pop	{r4, pc}
	case 58:
		Serial.println("rainbow_gp");
		break;

	case 59:
		Serial.println("cloudcolors_gp");
    12b6:	492e      	ldr	r1, [pc, #184]	; (1370 <print_palette(unsigned char)+0x2e8>)
    12b8:	480a      	ldr	r0, [pc, #40]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12ba:	f7ff fa57 	bl	76c <Print::println(char const*)>
		break;
    12be:	bd10      	pop	{r4, pc}
	case 57:
		Serial.println("GMT_seafloor_gp");
		break;

	case 58:
		Serial.println("rainbow_gp");
    12c0:	492c      	ldr	r1, [pc, #176]	; (1374 <print_palette(unsigned char)+0x2ec>)
    12c2:	4808      	ldr	r0, [pc, #32]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12c4:	f7ff fa52 	bl	76c <Print::println(char const*)>
		break;
    12c8:	bd10      	pop	{r4, pc}
	case 56:
		Serial.println("Split_03_gp");
		break;

	case 57:
		Serial.println("GMT_seafloor_gp");
    12ca:	492b      	ldr	r1, [pc, #172]	; (1378 <print_palette(unsigned char)+0x2f0>)
    12cc:	4805      	ldr	r0, [pc, #20]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12ce:	f7ff fa4d 	bl	76c <Print::println(char const*)>
		break;
    12d2:	bd10      	pop	{r4, pc}
	case 55:
		Serial.println("Secondary_01a_gp");
		break;

	case 56:
		Serial.println("Split_03_gp");
    12d4:	4929      	ldr	r1, [pc, #164]	; (137c <print_palette(unsigned char)+0x2f4>)
    12d6:	4803      	ldr	r0, [pc, #12]	; (12e4 <print_palette(unsigned char)+0x25c>)
    12d8:	f7ff fa48 	bl	76c <Print::println(char const*)>
		break;
    12dc:	bd10      	pop	{r4, pc}
    12de:	bf00      	nop
    12e0:	0000a5e0 	.word	0x0000a5e0
    12e4:	1fff8754 	.word	0x1fff8754
    12e8:	0000a5e4 	.word	0x0000a5e4
    12ec:	0000ab78 	.word	0x0000ab78
    12f0:	0000ab6c 	.word	0x0000ab6c
    12f4:	0000ab5c 	.word	0x0000ab5c
    12f8:	0000ab4c 	.word	0x0000ab4c
    12fc:	0000ab38 	.word	0x0000ab38
    1300:	0000ab20 	.word	0x0000ab20
    1304:	0000ab08 	.word	0x0000ab08
    1308:	0000aaf8 	.word	0x0000aaf8
    130c:	0000aae0 	.word	0x0000aae0
    1310:	0000aad4 	.word	0x0000aad4
    1314:	0000aac8 	.word	0x0000aac8
    1318:	0000aab0 	.word	0x0000aab0
    131c:	0000aaa4 	.word	0x0000aaa4
    1320:	0000aa98 	.word	0x0000aa98
    1324:	0000aa8c 	.word	0x0000aa8c
    1328:	0000aa80 	.word	0x0000aa80
    132c:	0000aa70 	.word	0x0000aa70
    1330:	0000aa64 	.word	0x0000aa64
    1334:	0000aa50 	.word	0x0000aa50
    1338:	0000aa44 	.word	0x0000aa44
    133c:	0000aa34 	.word	0x0000aa34
    1340:	0000aa28 	.word	0x0000aa28
    1344:	0000aa1c 	.word	0x0000aa1c
    1348:	0000aa14 	.word	0x0000aa14
    134c:	0000aa00 	.word	0x0000aa00
    1350:	0000a9f0 	.word	0x0000a9f0
    1354:	0000a9dc 	.word	0x0000a9dc
    1358:	0000a9d0 	.word	0x0000a9d0
    135c:	0000a9c4 	.word	0x0000a9c4
    1360:	0000a9b8 	.word	0x0000a9b8
    1364:	0000a9a8 	.word	0x0000a9a8
    1368:	0000a994 	.word	0x0000a994
    136c:	0000a988 	.word	0x0000a988
    1370:	0000a978 	.word	0x0000a978
    1374:	0000a96c 	.word	0x0000a96c
    1378:	0000a95c 	.word	0x0000a95c
    137c:	0000a950 	.word	0x0000a950
	case 54:
		Serial.println("sea_treasure_gp");
		break;

	case 55:
		Serial.println("Secondary_01a_gp");
    1380:	498e      	ldr	r1, [pc, #568]	; (15bc <print_palette(unsigned char)+0x534>)
    1382:	488f      	ldr	r0, [pc, #572]	; (15c0 <print_palette(unsigned char)+0x538>)
    1384:	f7ff f9f2 	bl	76c <Print::println(char const*)>
		break;
    1388:	bd10      	pop	{r4, pc}
	case 53:
		Serial.println("hallows_gp");
		break;

	case 54:
		Serial.println("sea_treasure_gp");
    138a:	498e      	ldr	r1, [pc, #568]	; (15c4 <print_palette(unsigned char)+0x53c>)
    138c:	488c      	ldr	r0, [pc, #560]	; (15c0 <print_palette(unsigned char)+0x538>)
    138e:	f7ff f9ed 	bl	76c <Print::println(char const*)>
		break;
    1392:	bd10      	pop	{r4, pc}
	case 52:
		Serial.println("ofaurora_gp");
		break;

	case 53:
		Serial.println("hallows_gp");
    1394:	498c      	ldr	r1, [pc, #560]	; (15c8 <print_palette(unsigned char)+0x540>)
    1396:	488a      	ldr	r0, [pc, #552]	; (15c0 <print_palette(unsigned char)+0x538>)
    1398:	f7ff f9e8 	bl	76c <Print::println(char const*)>
		break;
    139c:	bd10      	pop	{r4, pc}
	case 51:
		Serial.println("slope_gp");
		break;

	case 52:
		Serial.println("ofaurora_gp");
    139e:	498b      	ldr	r1, [pc, #556]	; (15cc <print_palette(unsigned char)+0x544>)
    13a0:	4887      	ldr	r0, [pc, #540]	; (15c0 <print_palette(unsigned char)+0x538>)
    13a2:	f7ff f9e3 	bl	76c <Print::println(char const*)>
		break;
    13a6:	bd10      	pop	{r4, pc}
	case 50:
		Serial.println("Tropical_Colors_gp");
		break;

	case 51:
		Serial.println("slope_gp");
    13a8:	4989      	ldr	r1, [pc, #548]	; (15d0 <print_palette(unsigned char)+0x548>)
    13aa:	4885      	ldr	r0, [pc, #532]	; (15c0 <print_palette(unsigned char)+0x538>)
    13ac:	f7ff f9de 	bl	76c <Print::println(char const*)>
		break;
    13b0:	bd10      	pop	{r4, pc}
	case 49:
		Serial.println("Wizzl019_gp");
		break;

	case 50:
		Serial.println("Tropical_Colors_gp");
    13b2:	4988      	ldr	r1, [pc, #544]	; (15d4 <print_palette(unsigned char)+0x54c>)
    13b4:	4882      	ldr	r0, [pc, #520]	; (15c0 <print_palette(unsigned char)+0x538>)
    13b6:	f7ff f9d9 	bl	76c <Print::println(char const*)>
		break;
    13ba:	bd10      	pop	{r4, pc}
	case 48:
		Serial.println("Skydye11_gp");
		break;

	case 49:
		Serial.println("Wizzl019_gp");
    13bc:	4986      	ldr	r1, [pc, #536]	; (15d8 <print_palette(unsigned char)+0x550>)
    13be:	4880      	ldr	r0, [pc, #512]	; (15c0 <print_palette(unsigned char)+0x538>)
    13c0:	f7ff f9d4 	bl	76c <Print::println(char const*)>
		break;
    13c4:	bd10      	pop	{r4, pc}
	case 47:
		Serial.println("froth316_gp");
		break;

	case 48:
		Serial.println("Skydye11_gp");
    13c6:	4985      	ldr	r1, [pc, #532]	; (15dc <print_palette(unsigned char)+0x554>)
    13c8:	487d      	ldr	r0, [pc, #500]	; (15c0 <print_palette(unsigned char)+0x538>)
    13ca:	f7ff f9cf 	bl	76c <Print::println(char const*)>
		break;
    13ce:	bd10      	pop	{r4, pc}
	case 46:
		Serial.println("es_emerald_dragon_01_gp");
		break;

	case 47:
		Serial.println("froth316_gp");
    13d0:	4983      	ldr	r1, [pc, #524]	; (15e0 <print_palette(unsigned char)+0x558>)
    13d2:	487b      	ldr	r0, [pc, #492]	; (15c0 <print_palette(unsigned char)+0x538>)
    13d4:	f7ff f9ca 	bl	76c <Print::println(char const*)>
		break;
    13d8:	bd10      	pop	{r4, pc}
	case 45:
		Serial.println("b_gp");
		break;

	case 46:
		Serial.println("es_emerald_dragon_01_gp");
    13da:	4982      	ldr	r1, [pc, #520]	; (15e4 <print_palette(unsigned char)+0x55c>)
    13dc:	4878      	ldr	r0, [pc, #480]	; (15c0 <print_palette(unsigned char)+0x538>)
    13de:	f7ff f9c5 	bl	76c <Print::println(char const*)>
		break;
    13e2:	bd10      	pop	{r4, pc}
	case 44:
		Serial.println("a_gp");
		break;

	case 45:
		Serial.println("b_gp");
    13e4:	4980      	ldr	r1, [pc, #512]	; (15e8 <print_palette(unsigned char)+0x560>)
    13e6:	4876      	ldr	r0, [pc, #472]	; (15c0 <print_palette(unsigned char)+0x538>)
    13e8:	f7ff f9c0 	bl	76c <Print::println(char const*)>
		break;
    13ec:	bd10      	pop	{r4, pc}
	case 43:
		Serial.println("standard_gp");
		break;

	case 44:
		Serial.println("a_gp");
    13ee:	497f      	ldr	r1, [pc, #508]	; (15ec <print_palette(unsigned char)+0x564>)
    13f0:	4873      	ldr	r0, [pc, #460]	; (15c0 <print_palette(unsigned char)+0x538>)
    13f2:	f7ff f9bb 	bl	76c <Print::println(char const*)>
		break;
    13f6:	bd10      	pop	{r4, pc}
	case 42:
		Serial.println("Fire_1_gp");
		break;

	case 43:
		Serial.println("standard_gp");
    13f8:	497d      	ldr	r1, [pc, #500]	; (15f0 <print_palette(unsigned char)+0x568>)
    13fa:	4871      	ldr	r0, [pc, #452]	; (15c0 <print_palette(unsigned char)+0x538>)
    13fc:	f7ff f9b6 	bl	76c <Print::println(char const*)>
		break;
    1400:	bd10      	pop	{r4, pc}
	case 41:
		Serial.println("Orange_to_Purple_gp");
		break;

	case 42:
		Serial.println("Fire_1_gp");
    1402:	497c      	ldr	r1, [pc, #496]	; (15f4 <print_palette(unsigned char)+0x56c>)
    1404:	486e      	ldr	r0, [pc, #440]	; (15c0 <print_palette(unsigned char)+0x538>)
    1406:	f7ff f9b1 	bl	76c <Print::println(char const*)>
		break;
    140a:	bd10      	pop	{r4, pc}
	case 40:
		Serial.println("Ribbon_Colors_gp");
		break;

	case 41:
		Serial.println("Orange_to_Purple_gp");
    140c:	497a      	ldr	r1, [pc, #488]	; (15f8 <print_palette(unsigned char)+0x570>)
    140e:	486c      	ldr	r0, [pc, #432]	; (15c0 <print_palette(unsigned char)+0x538>)
    1410:	f7ff f9ac 	bl	76c <Print::println(char const*)>
		break;
    1414:	bd10      	pop	{r4, pc}
	case 39:
		Serial.println("alarm_p4_0_2_gp");
		break;

	case 40:
		Serial.println("Ribbon_Colors_gp");
    1416:	4979      	ldr	r1, [pc, #484]	; (15fc <print_palette(unsigned char)+0x574>)
    1418:	4869      	ldr	r0, [pc, #420]	; (15c0 <print_palette(unsigned char)+0x538>)
    141a:	f7ff f9a7 	bl	76c <Print::println(char const*)>
		break;
    141e:	bd10      	pop	{r4, pc}
	case 38:
		Serial.println("cw1_029_gp");
		break;

	case 39:
		Serial.println("alarm_p4_0_2_gp");
    1420:	4977      	ldr	r1, [pc, #476]	; (1600 <print_palette(unsigned char)+0x578>)
    1422:	4867      	ldr	r0, [pc, #412]	; (15c0 <print_palette(unsigned char)+0x538>)
    1424:	f7ff f9a2 	bl	76c <Print::println(char const*)>
		break;
    1428:	bd10      	pop	{r4, pc}
	case 37:
		Serial.println("vibrant_gp");
		break;

	case 38:
		Serial.println("cw1_029_gp");
    142a:	4976      	ldr	r1, [pc, #472]	; (1604 <print_palette(unsigned char)+0x57c>)
    142c:	4864      	ldr	r0, [pc, #400]	; (15c0 <print_palette(unsigned char)+0x538>)
    142e:	f7ff f99d 	bl	76c <Print::println(char const*)>
		break;
    1432:	bd10      	pop	{r4, pc}
	case 36:
		Serial.println("bhw3_30_gp");
		break;

	case 37:
		Serial.println("vibrant_gp");
    1434:	4974      	ldr	r1, [pc, #464]	; (1608 <print_palette(unsigned char)+0x580>)
    1436:	4862      	ldr	r0, [pc, #392]	; (15c0 <print_palette(unsigned char)+0x538>)
    1438:	f7ff f998 	bl	76c <Print::println(char const*)>
		break;
    143c:	bd10      	pop	{r4, pc}
	case 35:
		Serial.println("bhw3_21_gp");
		break;

	case 36:
		Serial.println("bhw3_30_gp");
    143e:	4973      	ldr	r1, [pc, #460]	; (160c <print_palette(unsigned char)+0x584>)
    1440:	485f      	ldr	r0, [pc, #380]	; (15c0 <print_palette(unsigned char)+0x538>)
    1442:	f7ff f993 	bl	76c <Print::println(char const*)>
		break;
    1446:	bd10      	pop	{r4, pc}
	case 34:
		Serial.println("bhw2_14_gp");
		break;

	case 35:
		Serial.println("bhw3_21_gp");
    1448:	4971      	ldr	r1, [pc, #452]	; (1610 <print_palette(unsigned char)+0x588>)
    144a:	485d      	ldr	r0, [pc, #372]	; (15c0 <print_palette(unsigned char)+0x538>)
    144c:	f7ff f98e 	bl	76c <Print::println(char const*)>
		break;
    1450:	bd10      	pop	{r4, pc}
	case 33:
		Serial.println("bhw2_10_gp");
		break;

	case 34:
		Serial.println("bhw2_14_gp");
    1452:	4970      	ldr	r1, [pc, #448]	; (1614 <print_palette(unsigned char)+0x58c>)
    1454:	485a      	ldr	r0, [pc, #360]	; (15c0 <print_palette(unsigned char)+0x538>)
    1456:	f7ff f989 	bl	76c <Print::println(char const*)>
		break;
    145a:	bd10      	pop	{r4, pc}
	case 32:
		Serial.println("bhw2_49_gp");
		break;

	case 33:
		Serial.println("bhw2_10_gp");
    145c:	496e      	ldr	r1, [pc, #440]	; (1618 <print_palette(unsigned char)+0x590>)
    145e:	4858      	ldr	r0, [pc, #352]	; (15c0 <print_palette(unsigned char)+0x538>)
    1460:	f7ff f984 	bl	76c <Print::println(char const*)>
		break;
    1464:	bd10      	pop	{r4, pc}
	case 31:
		Serial.println("bhw2_22_gp");
		break;

	case 32:
		Serial.println("bhw2_49_gp");
    1466:	496d      	ldr	r1, [pc, #436]	; (161c <print_palette(unsigned char)+0x594>)
    1468:	4855      	ldr	r0, [pc, #340]	; (15c0 <print_palette(unsigned char)+0x538>)
    146a:	f7ff f97f 	bl	76c <Print::println(char const*)>
		break;
    146e:	bd10      	pop	{r4, pc}
	case 30:
		Serial.println("bhw2_23_gp");
		break;

	case 31:
		Serial.println("bhw2_22_gp");
    1470:	496b      	ldr	r1, [pc, #428]	; (1620 <print_palette(unsigned char)+0x598>)
    1472:	4853      	ldr	r0, [pc, #332]	; (15c0 <print_palette(unsigned char)+0x538>)
    1474:	f7ff f97a 	bl	76c <Print::println(char const*)>
		break;
    1478:	bd10      	pop	{r4, pc}
	case 29:
		Serial.println("bhw1_28_gp");
		break;

	case 30:
		Serial.println("bhw2_23_gp");
    147a:	496a      	ldr	r1, [pc, #424]	; (1624 <print_palette(unsigned char)+0x59c>)
    147c:	4850      	ldr	r0, [pc, #320]	; (15c0 <print_palette(unsigned char)+0x538>)
    147e:	f7ff f975 	bl	76c <Print::println(char const*)>
		break;
    1482:	bd10      	pop	{r4, pc}
	case 28:
		Serial.println("bhw1_26_gp");
		break;

	case 29:
		Serial.println("bhw1_28_gp");
    1484:	4968      	ldr	r1, [pc, #416]	; (1628 <print_palette(unsigned char)+0x5a0>)
    1486:	484e      	ldr	r0, [pc, #312]	; (15c0 <print_palette(unsigned char)+0x538>)
    1488:	f7ff f970 	bl	76c <Print::println(char const*)>
		break;
    148c:	bd10      	pop	{r4, pc}
	case 27:
		Serial.println("bhw1_greeny_gp");
		break;

	case 28:
		Serial.println("bhw1_26_gp");
    148e:	4967      	ldr	r1, [pc, #412]	; (162c <print_palette(unsigned char)+0x5a4>)
    1490:	484b      	ldr	r0, [pc, #300]	; (15c0 <print_palette(unsigned char)+0x538>)
    1492:	f7ff f96b 	bl	76c <Print::println(char const*)>
		break;
    1496:	bd10      	pop	{r4, pc}
	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
		break;

	case 27:
		Serial.println("bhw1_greeny_gp");
    1498:	4965      	ldr	r1, [pc, #404]	; (1630 <print_palette(unsigned char)+0x5a8>)
    149a:	4849      	ldr	r0, [pc, #292]	; (15c0 <print_palette(unsigned char)+0x538>)
    149c:	f7ff f966 	bl	76c <Print::println(char const*)>
		break;
    14a0:	bd10      	pop	{r4, pc}
	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
		break;

	case 26:
		Serial.println("Blue_Cyan_Yellow_gp");
    14a2:	4964      	ldr	r1, [pc, #400]	; (1634 <print_palette(unsigned char)+0x5ac>)
    14a4:	4846      	ldr	r0, [pc, #280]	; (15c0 <print_palette(unsigned char)+0x538>)
    14a6:	f7ff f961 	bl	76c <Print::println(char const*)>
		break;
    14aa:	bd10      	pop	{r4, pc}
	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
		break;

	case 25:
		Serial.println("BlacK_Red_Magenta_Yellow_gp");
    14ac:	4962      	ldr	r1, [pc, #392]	; (1638 <print_palette(unsigned char)+0x5b0>)
    14ae:	4844      	ldr	r0, [pc, #272]	; (15c0 <print_palette(unsigned char)+0x538>)
    14b0:	f7ff f95c 	bl	76c <Print::println(char const*)>
		break;
    14b4:	bd10      	pop	{r4, pc}
	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
		break;

	case 24:
		Serial.println("BlacK_Magenta_Red_gp");
    14b6:	4961      	ldr	r1, [pc, #388]	; (163c <print_palette(unsigned char)+0x5b4>)
    14b8:	4841      	ldr	r0, [pc, #260]	; (15c0 <print_palette(unsigned char)+0x538>)
    14ba:	f7ff f957 	bl	76c <Print::println(char const*)>
		break;
    14be:	bd10      	pop	{r4, pc}
	case 22:
		Serial.println("es_autumn_19_gp");
		break;

	case 23:
		Serial.println("BlacK_Blue_Magenta_White_gp");
    14c0:	495f      	ldr	r1, [pc, #380]	; (1640 <print_palette(unsigned char)+0x5b8>)
    14c2:	483f      	ldr	r0, [pc, #252]	; (15c0 <print_palette(unsigned char)+0x538>)
    14c4:	f7ff f952 	bl	76c <Print::println(char const*)>
		break;
    14c8:	bd10      	pop	{r4, pc}
	case 21:
		Serial.println("Sunset_Real_gp");
		break;

	case 22:
		Serial.println("es_autumn_19_gp");
    14ca:	495e      	ldr	r1, [pc, #376]	; (1644 <print_palette(unsigned char)+0x5bc>)
    14cc:	483c      	ldr	r0, [pc, #240]	; (15c0 <print_palette(unsigned char)+0x538>)
    14ce:	f7ff f94d 	bl	76c <Print::println(char const*)>
		break;
    14d2:	bd10      	pop	{r4, pc}
	case 20:
		Serial.println("Magenta_Evening_gp");
		break;

	case 21:
		Serial.println("Sunset_Real_gp");
    14d4:	495c      	ldr	r1, [pc, #368]	; (1648 <print_palette(unsigned char)+0x5c0>)
    14d6:	483a      	ldr	r0, [pc, #232]	; (15c0 <print_palette(unsigned char)+0x538>)
    14d8:	f7ff f948 	bl	76c <Print::println(char const*)>
		break;
    14dc:	bd10      	pop	{r4, pc}
	case 19:
		Serial.println("Colorfull_gp");
		break;

	case 20:
		Serial.println("Magenta_Evening_gp");
    14de:	495b      	ldr	r1, [pc, #364]	; (164c <print_palette(unsigned char)+0x5c4>)
    14e0:	4837      	ldr	r0, [pc, #220]	; (15c0 <print_palette(unsigned char)+0x538>)
    14e2:	f7ff f943 	bl	76c <Print::println(char const*)>
		break;
    14e6:	bd10      	pop	{r4, pc}
	case 18:
		Serial.println("fire_gp");
		break;

	case 19:
		Serial.println("Colorfull_gp");
    14e8:	4959      	ldr	r1, [pc, #356]	; (1650 <print_palette(unsigned char)+0x5c8>)
    14ea:	4835      	ldr	r0, [pc, #212]	; (15c0 <print_palette(unsigned char)+0x538>)
    14ec:	f7ff f93e 	bl	76c <Print::println(char const*)>
		break;
    14f0:	bd10      	pop	{r4, pc}
	case 17:
		Serial.println("lava_gp");
		break;

	case 18:
		Serial.println("fire_gp");
    14f2:	4958      	ldr	r1, [pc, #352]	; (1654 <print_palette(unsigned char)+0x5cc>)
    14f4:	4832      	ldr	r0, [pc, #200]	; (15c0 <print_palette(unsigned char)+0x538>)
    14f6:	f7ff f939 	bl	76c <Print::println(char const*)>
		break;
    14fa:	bd10      	pop	{r4, pc}
	case 16:
		Serial.println("es_emerald_dragon_08_gp");
		break;

	case 17:
		Serial.println("lava_gp");
    14fc:	4956      	ldr	r1, [pc, #344]	; (1658 <print_palette(unsigned char)+0x5d0>)
    14fe:	4830      	ldr	r0, [pc, #192]	; (15c0 <print_palette(unsigned char)+0x538>)
    1500:	f7ff f934 	bl	76c <Print::println(char const*)>
		break;
    1504:	bd10      	pop	{r4, pc}
	case 15:
		Serial.println("Fuschia_7_gp");
		break;

	case 16:
		Serial.println("es_emerald_dragon_08_gp");
    1506:	4955      	ldr	r1, [pc, #340]	; (165c <print_palette(unsigned char)+0x5d4>)
    1508:	482d      	ldr	r0, [pc, #180]	; (15c0 <print_palette(unsigned char)+0x538>)
    150a:	f7ff f92f 	bl	76c <Print::println(char const*)>
		break;
    150e:	bd10      	pop	{r4, pc}
	case 14:
		Serial.println("ib15_gp");
		break;

	case 15:
		Serial.println("Fuschia_7_gp");
    1510:	4953      	ldr	r1, [pc, #332]	; (1660 <print_palette(unsigned char)+0x5d8>)
    1512:	482b      	ldr	r0, [pc, #172]	; (15c0 <print_palette(unsigned char)+0x538>)
    1514:	f7ff f92a 	bl	76c <Print::println(char const*)>
		break;
    1518:	bd10      	pop	{r4, pc}
	case 13:
		Serial.println("GMT_drywet_gp");
		break;

	case 14:
		Serial.println("ib15_gp");
    151a:	4952      	ldr	r1, [pc, #328]	; (1664 <print_palette(unsigned char)+0x5dc>)
    151c:	4828      	ldr	r0, [pc, #160]	; (15c0 <print_palette(unsigned char)+0x538>)
    151e:	f7ff f925 	bl	76c <Print::println(char const*)>
		break;
    1522:	bd10      	pop	{r4, pc}
	case 12:
		Serial.println("gr64_hult_gp");
		break;

	case 13:
		Serial.println("GMT_drywet_gp");
    1524:	4950      	ldr	r1, [pc, #320]	; (1668 <print_palette(unsigned char)+0x5e0>)
    1526:	4826      	ldr	r0, [pc, #152]	; (15c0 <print_palette(unsigned char)+0x538>)
    1528:	f7ff f920 	bl	76c <Print::println(char const*)>
		break;
    152c:	bd10      	pop	{r4, pc}
	case 11:
		Serial.println("gr65_hult_gp");
		break;

	case 12:
		Serial.println("gr64_hult_gp");
    152e:	494f      	ldr	r1, [pc, #316]	; (166c <print_palette(unsigned char)+0x5e4>)
    1530:	4823      	ldr	r0, [pc, #140]	; (15c0 <print_palette(unsigned char)+0x538>)
    1532:	f7ff f91b 	bl	76c <Print::println(char const*)>
		break;
    1536:	bd10      	pop	{r4, pc}
	case 10:
		Serial.println("rainbowsherbet_gp");
		break;

	case 11:
		Serial.println("gr65_hult_gp");
    1538:	494d      	ldr	r1, [pc, #308]	; (1670 <print_palette(unsigned char)+0x5e8>)
    153a:	4821      	ldr	r0, [pc, #132]	; (15c0 <print_palette(unsigned char)+0x538>)
    153c:	f7ff f916 	bl	76c <Print::println(char const*)>
		break;
    1540:	bd10      	pop	{r4, pc}
	case 9:
		Serial.println("es_landscape_33_gp");
		break;

	case 10:
		Serial.println("rainbowsherbet_gp");
    1542:	494c      	ldr	r1, [pc, #304]	; (1674 <print_palette(unsigned char)+0x5ec>)
    1544:	481e      	ldr	r0, [pc, #120]	; (15c0 <print_palette(unsigned char)+0x538>)
    1546:	f7ff f911 	bl	76c <Print::println(char const*)>
		break;
    154a:	bd10      	pop	{r4, pc}
	case 8:
		Serial.println("es_landscape_64_gp");
		break;

	case 9:
		Serial.println("es_landscape_33_gp");
    154c:	494a      	ldr	r1, [pc, #296]	; (1678 <print_palette(unsigned char)+0x5f0>)
    154e:	481c      	ldr	r0, [pc, #112]	; (15c0 <print_palette(unsigned char)+0x538>)
    1550:	f7ff f90c 	bl	76c <Print::println(char const*)>
		break;
    1554:	bd10      	pop	{r4, pc}
	case 7:
		Serial.println("es_ocean_breeze_036_gp");
		break;

	case 8:
		Serial.println("es_landscape_64_gp");
    1556:	4949      	ldr	r1, [pc, #292]	; (167c <print_palette(unsigned char)+0x5f4>)
    1558:	4819      	ldr	r0, [pc, #100]	; (15c0 <print_palette(unsigned char)+0x538>)
    155a:	f7ff f907 	bl	76c <Print::println(char const*)>
		break;
    155e:	bd10      	pop	{r4, pc}
	case 6:
		Serial.println("es_ocean_breeze_068_gp");
		break;

	case 7:
		Serial.println("es_ocean_breeze_036_gp");
    1560:	4947      	ldr	r1, [pc, #284]	; (1680 <print_palette(unsigned char)+0x5f8>)
    1562:	4817      	ldr	r0, [pc, #92]	; (15c0 <print_palette(unsigned char)+0x538>)
    1564:	f7ff f902 	bl	76c <Print::println(char const*)>
		break;
    1568:	bd10      	pop	{r4, pc}
	case 5:
		Serial.println("Coral_reef_gp");
		break;

	case 6:
		Serial.println("es_ocean_breeze_068_gp");
    156a:	4946      	ldr	r1, [pc, #280]	; (1684 <print_palette(unsigned char)+0x5fc>)
    156c:	4814      	ldr	r0, [pc, #80]	; (15c0 <print_palette(unsigned char)+0x538>)
    156e:	f7ff f8fd 	bl	76c <Print::println(char const*)>
		break;
    1572:	bd10      	pop	{r4, pc}
	case 4:
		Serial.println("es_pinksplash_07_gp");
		break;

	case 5:
		Serial.println("Coral_reef_gp");
    1574:	4944      	ldr	r1, [pc, #272]	; (1688 <print_palette(unsigned char)+0x600>)
    1576:	4812      	ldr	r0, [pc, #72]	; (15c0 <print_palette(unsigned char)+0x538>)
    1578:	f7ff f8f8 	bl	76c <Print::println(char const*)>
		break;
    157c:	bd10      	pop	{r4, pc}
	case 3:
		Serial.println("es_pinksplash_08_gp");
		break;

	case 4:
		Serial.println("es_pinksplash_07_gp");
    157e:	4943      	ldr	r1, [pc, #268]	; (168c <print_palette(unsigned char)+0x604>)
    1580:	480f      	ldr	r0, [pc, #60]	; (15c0 <print_palette(unsigned char)+0x538>)
    1582:	f7ff f8f3 	bl	76c <Print::println(char const*)>
		break;
    1586:	bd10      	pop	{r4, pc}
	case 2:
		Serial.println("Analogous_1_gp");
		break;

	case 3:
		Serial.println("es_pinksplash_08_gp");
    1588:	4941      	ldr	r1, [pc, #260]	; (1690 <print_palette(unsigned char)+0x608>)
    158a:	480d      	ldr	r0, [pc, #52]	; (15c0 <print_palette(unsigned char)+0x538>)
    158c:	f7ff f8ee 	bl	76c <Print::println(char const*)>
		break;
    1590:	bd10      	pop	{r4, pc}
	case 1:
		Serial.println("rgi_15_gp");
		break;

	case 2:
		Serial.println("Analogous_1_gp");
    1592:	4940      	ldr	r1, [pc, #256]	; (1694 <print_palette(unsigned char)+0x60c>)
    1594:	480a      	ldr	r0, [pc, #40]	; (15c0 <print_palette(unsigned char)+0x538>)
    1596:	f7ff f8e9 	bl	76c <Print::println(char const*)>
		break;
    159a:	bd10      	pop	{r4, pc}
	case 0:
		Serial.println("ib_jul01_gp");
		break;

	case 1:
		Serial.println("rgi_15_gp");
    159c:	493e      	ldr	r1, [pc, #248]	; (1698 <print_palette(unsigned char)+0x610>)
    159e:	4808      	ldr	r0, [pc, #32]	; (15c0 <print_palette(unsigned char)+0x538>)
    15a0:	f7ff f8e4 	bl	76c <Print::println(char const*)>
		break;
    15a4:	bd10      	pop	{r4, pc}
	Serial.print("(");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
	case 0:
		Serial.println("ib_jul01_gp");
    15a6:	493d      	ldr	r1, [pc, #244]	; (169c <print_palette(unsigned char)+0x614>)
    15a8:	4805      	ldr	r0, [pc, #20]	; (15c0 <print_palette(unsigned char)+0x538>)
    15aa:	f7ff f8df 	bl	76c <Print::println(char const*)>
		break;
    15ae:	bd10      	pop	{r4, pc}
	case 92:
		Serial.println("blade_runner_2049_gp");
		break;

	default:
		Serial.println("Not a gradient palette");
    15b0:	493b      	ldr	r1, [pc, #236]	; (16a0 <print_palette(unsigned char)+0x618>)
    15b2:	4803      	ldr	r0, [pc, #12]	; (15c0 <print_palette(unsigned char)+0x538>)
    15b4:	f7ff f8da 	bl	76c <Print::println(char const*)>
    15b8:	bd10      	pop	{r4, pc}
    15ba:	bf00      	nop
    15bc:	0000a93c 	.word	0x0000a93c
    15c0:	1fff8754 	.word	0x1fff8754
    15c4:	0000a92c 	.word	0x0000a92c
    15c8:	0000a920 	.word	0x0000a920
    15cc:	0000a914 	.word	0x0000a914
    15d0:	0000a908 	.word	0x0000a908
    15d4:	0000a8f4 	.word	0x0000a8f4
    15d8:	0000a8e8 	.word	0x0000a8e8
    15dc:	0000a8dc 	.word	0x0000a8dc
    15e0:	0000a8d0 	.word	0x0000a8d0
    15e4:	0000a8b8 	.word	0x0000a8b8
    15e8:	0000a8b0 	.word	0x0000a8b0
    15ec:	0000a948 	.word	0x0000a948
    15f0:	0000a8a4 	.word	0x0000a8a4
    15f4:	0000a898 	.word	0x0000a898
    15f8:	0000a884 	.word	0x0000a884
    15fc:	0000a870 	.word	0x0000a870
    1600:	0000a860 	.word	0x0000a860
    1604:	0000a854 	.word	0x0000a854
    1608:	0000a848 	.word	0x0000a848
    160c:	0000a83c 	.word	0x0000a83c
    1610:	0000a830 	.word	0x0000a830
    1614:	0000a824 	.word	0x0000a824
    1618:	0000a818 	.word	0x0000a818
    161c:	0000a80c 	.word	0x0000a80c
    1620:	0000a800 	.word	0x0000a800
    1624:	0000a7f4 	.word	0x0000a7f4
    1628:	0000a7e8 	.word	0x0000a7e8
    162c:	0000a7dc 	.word	0x0000a7dc
    1630:	0000a7cc 	.word	0x0000a7cc
    1634:	0000a7b8 	.word	0x0000a7b8
    1638:	0000a79c 	.word	0x0000a79c
    163c:	0000a784 	.word	0x0000a784
    1640:	0000a768 	.word	0x0000a768
    1644:	0000a758 	.word	0x0000a758
    1648:	0000a748 	.word	0x0000a748
    164c:	0000a734 	.word	0x0000a734
    1650:	0000a724 	.word	0x0000a724
    1654:	0000a71c 	.word	0x0000a71c
    1658:	0000a714 	.word	0x0000a714
    165c:	0000a6fc 	.word	0x0000a6fc
    1660:	0000a6ec 	.word	0x0000a6ec
    1664:	0000a6e4 	.word	0x0000a6e4
    1668:	0000a6d4 	.word	0x0000a6d4
    166c:	0000a6c4 	.word	0x0000a6c4
    1670:	0000a6b4 	.word	0x0000a6b4
    1674:	0000a6a0 	.word	0x0000a6a0
    1678:	0000a68c 	.word	0x0000a68c
    167c:	0000a678 	.word	0x0000a678
    1680:	0000a660 	.word	0x0000a660
    1684:	0000a648 	.word	0x0000a648
    1688:	0000a638 	.word	0x0000a638
    168c:	0000a624 	.word	0x0000a624
    1690:	0000a610 	.word	0x0000a610
    1694:	0000a600 	.word	0x0000a600
    1698:	0000a5f4 	.word	0x0000a5f4
    169c:	0000a5e8 	.word	0x0000a5e8
    16a0:	0000ab90 	.word	0x0000ab90

000016a4 <LEDDebug(LEDStruct&)>:
	}
}


// Debugging function
void LEDDebug(LEDStruct& leds) {
    16a4:	b510      	push	{r4, lr}
    16a6:	2100      	movs	r1, #0
    16a8:	4604      	mov	r4, r0
    16aa:	48b6      	ldr	r0, [pc, #728]	; (1984 <LEDDebug(LEDStruct&)+0x2e0>)
    16ac:	f007 f8da 	bl	8864 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    16b0:	48b5      	ldr	r0, [pc, #724]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    16b2:	f007 fadb 	bl	8c6c <Print::println()>
    16b6:	2132      	movs	r1, #50	; 0x32
    16b8:	48b4      	ldr	r0, [pc, #720]	; (198c <LEDDebug(LEDStruct&)+0x2e8>)
    16ba:	f007 f8d3 	bl	8864 <usb_serial_write>
    16be:	48b2      	ldr	r0, [pc, #712]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    16c0:	f007 fad4 	bl	8c6c <Print::println()>
    16c4:	2112      	movs	r1, #18
    16c6:	48b2      	ldr	r0, [pc, #712]	; (1990 <LEDDebug(LEDStruct&)+0x2ec>)
    16c8:	f007 f8cc 	bl	8864 <usb_serial_write>
	Serial.println("");
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
    16cc:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    16d0:	2b00      	cmp	r3, #0
    16d2:	f000 808a 	beq.w	17ea <LEDDebug(LEDStruct&)+0x146>
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    16d6:	2b01      	cmp	r3, #1
    16d8:	f000 838f 	beq.w	1dfa <LEDDebug(LEDStruct&)+0x756>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    16dc:	2b02      	cmp	r3, #2
    16de:	f000 8391 	beq.w	1e04 <LEDDebug(LEDStruct&)+0x760>
    16e2:	2112      	movs	r1, #18
    16e4:	48ab      	ldr	r0, [pc, #684]	; (1994 <LEDDebug(LEDStruct&)+0x2f0>)
    16e6:	f007 f8bd 	bl	8864 <usb_serial_write>

	// Print Standard Variables
	Serial.print("Brightness:       ");
	Serial.println(leds.brightness);
    16ea:	f894 11c2 	ldrb.w	r1, [r4, #450]	; 0x1c2
    16ee:	48a6      	ldr	r0, [pc, #664]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    16f0:	f7ff f84e 	bl	790 <Print::println(unsigned char)>
    16f4:	2112      	movs	r1, #18
    16f6:	48a8      	ldr	r0, [pc, #672]	; (1998 <LEDDebug(LEDStruct&)+0x2f4>)
    16f8:	f007 f8b4 	bl	8864 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    16fc:	2300      	movs	r3, #0
    16fe:	220a      	movs	r2, #10
    1700:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    1704:	48a0      	ldr	r0, [pc, #640]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1706:	f007 fac1 	bl	8c8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    170a:	489f      	ldr	r0, [pc, #636]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    170c:	f007 faae 	bl	8c6c <Print::println()>
    1710:	2112      	movs	r1, #18
    1712:	48a2      	ldr	r0, [pc, #648]	; (199c <LEDDebug(LEDStruct&)+0x2f8>)
    1714:	f007 f8a6 	bl	8864 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1718:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
    171c:	489a      	ldr	r0, [pc, #616]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    171e:	f007 faf5 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1722:	4899      	ldr	r0, [pc, #612]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1724:	f007 faa2 	bl	8c6c <Print::println()>
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    1728:	f894 3229 	ldrb.w	r3, [r4, #553]	; 0x229
    172c:	2b00      	cmp	r3, #0
    172e:	d157      	bne.n	17e0 <LEDDebug(LEDStruct&)+0x13c>
    1730:	2112      	movs	r1, #18
    1732:	489b      	ldr	r0, [pc, #620]	; (19a0 <LEDDebug(LEDStruct&)+0x2fc>)
    1734:	f007 f896 	bl	8864 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1738:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    173c:	4892      	ldr	r0, [pc, #584]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    173e:	f007 fae5 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1742:	4891      	ldr	r0, [pc, #580]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1744:	f007 fa92 	bl	8c6c <Print::println()>
    1748:	2112      	movs	r1, #18
    174a:	4896      	ldr	r0, [pc, #600]	; (19a4 <LEDDebug(LEDStruct&)+0x300>)
    174c:	f007 f88a 	bl	8864 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1750:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    1754:	488c      	ldr	r0, [pc, #560]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1756:	f007 fad9 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    175a:	488b      	ldr	r0, [pc, #556]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    175c:	f007 fa86 	bl	8c6c <Print::println()>
    1760:	2112      	movs	r1, #18
    1762:	4891      	ldr	r0, [pc, #580]	; (19a8 <LEDDebug(LEDStruct&)+0x304>)
    1764:	f007 f87e 	bl	8864 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1768:	2300      	movs	r3, #0
    176a:	220a      	movs	r2, #10
    176c:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    1770:	4885      	ldr	r0, [pc, #532]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1772:	f007 fa8b 	bl	8c8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    1776:	4884      	ldr	r0, [pc, #528]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1778:	f007 fa78 	bl	8c6c <Print::println()>
    177c:	2112      	movs	r1, #18
    177e:	488b      	ldr	r0, [pc, #556]	; (19ac <LEDDebug(LEDStruct&)+0x308>)
    1780:	f007 f870 	bl	8864 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1784:	f894 122d 	ldrb.w	r1, [r4, #557]	; 0x22d
    1788:	487f      	ldr	r0, [pc, #508]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    178a:	f007 fabf 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    178e:	487e      	ldr	r0, [pc, #504]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1790:	f007 fa6c 	bl	8c6c <Print::println()>
    1794:	2119      	movs	r1, #25
    1796:	4886      	ldr	r0, [pc, #536]	; (19b0 <LEDDebug(LEDStruct&)+0x30c>)
    1798:	f007 f864 	bl	8864 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    179c:	487a      	ldr	r0, [pc, #488]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    179e:	f007 fa65 	bl	8c6c <Print::println()>
	Serial.print("mode_initialized: ");
	Serial.println(leds.mode_initialized);
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
    17a2:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    17a6:	2b17      	cmp	r3, #23
    17a8:	f200 831a 	bhi.w	1de0 <LEDDebug(LEDStruct&)+0x73c>
    17ac:	e8df f013 	tbh	[pc, r3, lsl #1]
    17b0:	0318006f 	.word	0x0318006f
    17b4:	03180318 	.word	0x03180318
    17b8:	00c50318 	.word	0x00c50318
    17bc:	03180318 	.word	0x03180318
    17c0:	0318012c 	.word	0x0318012c
    17c4:	03180318 	.word	0x03180318
    17c8:	03180318 	.word	0x03180318
    17cc:	016b0318 	.word	0x016b0318
    17d0:	01750170 	.word	0x01750170
    17d4:	01d00183 	.word	0x01d00183
    17d8:	02c60238 	.word	0x02c60238
    17dc:	002502fb 	.word	0x002502fb
	Serial.println(leds.brightness);
	Serial.print("delay_time:       ");
	Serial.println(leds.delay_time);
	Serial.print("use_palette:      ");
	Serial.println(leds.use_palette);
	if (leds.use_palette) { print_palette(leds.palette_index); }
    17e0:	f894 0228 	ldrb.w	r0, [r4, #552]	; 0x228
    17e4:	f7ff fc50 	bl	1088 <print_palette(unsigned char)>
    17e8:	e7a2      	b.n	1730 <LEDDebug(LEDStruct&)+0x8c>
    17ea:	2107      	movs	r1, #7
    17ec:	4871      	ldr	r0, [pc, #452]	; (19b4 <LEDDebug(LEDStruct&)+0x310>)
    17ee:	f007 f839 	bl	8864 <usb_serial_write>
    17f2:	4865      	ldr	r0, [pc, #404]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    17f4:	f007 fa3a 	bl	8c6c <Print::println()>
    17f8:	e773      	b.n	16e2 <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("noise_dist:    ");
			Serial.println(leds.noise_dist);
			break;

		case BOUNCE:
			Serial.println("=====BOUNCE=====");
    17fa:	496f      	ldr	r1, [pc, #444]	; (19b8 <LEDDebug(LEDStruct&)+0x314>)
    17fc:	4862      	ldr	r0, [pc, #392]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    17fe:	f7fe ffb5 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1802:	496e      	ldr	r1, [pc, #440]	; (19bc <LEDDebug(LEDStruct&)+0x318>)
    1804:	4860      	ldr	r0, [pc, #384]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1806:	f7fe ffa3 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_fade:       ");
			Serial.println(leds.juggle_fade);
    180a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    180e:	485e      	ldr	r0, [pc, #376]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1810:	f7fe ffbe 	bl	790 <Print::println(unsigned char)>
    1814:	496a      	ldr	r1, [pc, #424]	; (19c0 <LEDDebug(LEDStruct&)+0x31c>)
    1816:	485c      	ldr	r0, [pc, #368]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1818:	f7fe ff9a 	bl	750 <Print::write(char const*)>
			Serial.print("bounce_length:     ");
			Serial.println(leds.bounce_length);
    181c:	f894 1239 	ldrb.w	r1, [r4, #569]	; 0x239
    1820:	4859      	ldr	r0, [pc, #356]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1822:	f7fe ffb5 	bl	790 <Print::println(unsigned char)>
    1826:	4967      	ldr	r1, [pc, #412]	; (19c4 <LEDDebug(LEDStruct&)+0x320>)
    1828:	4857      	ldr	r0, [pc, #348]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    182a:	f7fe ff91 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_beat:       ");
			Serial.println(leds.juggle_beat);
    182e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1832:	4855      	ldr	r0, [pc, #340]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1834:	f7fe ffac 	bl	790 <Print::println(unsigned char)>
    1838:	4963      	ldr	r1, [pc, #396]	; (19c8 <LEDDebug(LEDStruct&)+0x324>)
    183a:	4853      	ldr	r0, [pc, #332]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    183c:	f7fe ff88 	bl	750 <Print::write(char const*)>
			Serial.print("rainbow_diff:      ");
			Serial.println(leds.rainbow_diff);
    1840:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    1844:	4850      	ldr	r0, [pc, #320]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1846:	f7fe ffa3 	bl	790 <Print::println(unsigned char)>
    184a:	4960      	ldr	r1, [pc, #384]	; (19cc <LEDDebug(LEDStruct&)+0x328>)
    184c:	484e      	ldr	r0, [pc, #312]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    184e:	f7fe ff7f 	bl	750 <Print::write(char const*)>
			Serial.print("bounce_start_beat: ");
			Serial.println(leds.bounce_start_beat);
    1852:	f894 1237 	ldrb.w	r1, [r4, #567]	; 0x237
    1856:	484c      	ldr	r0, [pc, #304]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1858:	f7fe ff9a 	bl	790 <Print::println(unsigned char)>
    185c:	495c      	ldr	r1, [pc, #368]	; (19d0 <LEDDebug(LEDStruct&)+0x32c>)
    185e:	484a      	ldr	r0, [pc, #296]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1860:	f7fe ff76 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1864:	f894 1276 	ldrb.w	r1, [r4, #630]	; 0x276
    1868:	4847      	ldr	r0, [pc, #284]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    186a:	f007 fa4f 	bl	8d0c <Print::print(long)>
    186e:	2119      	movs	r1, #25
    1870:	484f      	ldr	r0, [pc, #316]	; (19b0 <LEDDebug(LEDStruct&)+0x30c>)
    1872:	f006 fff7 	bl	8864 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1876:	4844      	ldr	r0, [pc, #272]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1878:	f007 f9f8 	bl	8c6c <Print::println()>
    187c:	2100      	movs	r1, #0
    187e:	4841      	ldr	r0, [pc, #260]	; (1984 <LEDDebug(LEDStruct&)+0x2e0>)
    1880:	f006 fff0 	bl	8864 <usb_serial_write>
    1884:	4840      	ldr	r0, [pc, #256]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
			Serial.println("");
			break;
	}
	Serial.println("=========================");
	Serial.println("");
}
    1886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    188a:	f007 b9ef 	b.w	8c6c <Print::println()>
	Serial.println("=========================");

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			Serial.println("===JUGGLE VARIABLES===");
    188e:	4951      	ldr	r1, [pc, #324]	; (19d4 <LEDDebug(LEDStruct&)+0x330>)
    1890:	483d      	ldr	r0, [pc, #244]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1892:	f7fe ff6b 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1896:	4950      	ldr	r1, [pc, #320]	; (19d8 <LEDDebug(LEDStruct&)+0x334>)
    1898:	483b      	ldr	r0, [pc, #236]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    189a:	f7fe ff59 	bl	750 <Print::write(char const*)>
			Serial.print("index:         ");
			Serial.println(leds.juggle_index);
    189e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    18a2:	4839      	ldr	r0, [pc, #228]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18a4:	f7fe ff74 	bl	790 <Print::println(unsigned char)>
    18a8:	494c      	ldr	r1, [pc, #304]	; (19dc <LEDDebug(LEDStruct&)+0x338>)
    18aa:	4837      	ldr	r0, [pc, #220]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18ac:	f7fe ff50 	bl	750 <Print::write(char const*)>
			Serial.print("numdots:       ");
			Serial.println(leds.juggle_numdots);
    18b0:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    18b4:	4834      	ldr	r0, [pc, #208]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18b6:	f7fe ff6b 	bl	790 <Print::println(unsigned char)>
    18ba:	4949      	ldr	r1, [pc, #292]	; (19e0 <LEDDebug(LEDStruct&)+0x33c>)
    18bc:	4832      	ldr	r0, [pc, #200]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18be:	f7fe ff47 	bl	750 <Print::write(char const*)>
			Serial.print("beat:          ");
			Serial.println(leds.juggle_beat);
    18c2:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    18c6:	4830      	ldr	r0, [pc, #192]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18c8:	f7fe ff62 	bl	790 <Print::println(unsigned char)>
    18cc:	4945      	ldr	r1, [pc, #276]	; (19e4 <LEDDebug(LEDStruct&)+0x340>)
    18ce:	482e      	ldr	r0, [pc, #184]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18d0:	f7fe ff3e 	bl	750 <Print::write(char const*)>
			Serial.print("fade:          ");
			Serial.println(leds.juggle_fade);
    18d4:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    18d8:	482b      	ldr	r0, [pc, #172]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18da:	f7fe ff59 	bl	790 <Print::println(unsigned char)>
    18de:	4942      	ldr	r1, [pc, #264]	; (19e8 <LEDDebug(LEDStruct&)+0x344>)
    18e0:	4829      	ldr	r0, [pc, #164]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18e2:	f7fe ff35 	bl	750 <Print::write(char const*)>
			Serial.print("diff:          ");
			Serial.println(leds.juggle_diff);
    18e6:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    18ea:	4827      	ldr	r0, [pc, #156]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18ec:	f7fe ff50 	bl	790 <Print::println(unsigned char)>
    18f0:	493e      	ldr	r1, [pc, #248]	; (19ec <LEDDebug(LEDStruct&)+0x348>)
    18f2:	4825      	ldr	r0, [pc, #148]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18f4:	f7fe ff2c 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    18f8:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    18fc:	4822      	ldr	r0, [pc, #136]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    18fe:	f007 fa05 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1902:	4821      	ldr	r0, [pc, #132]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1904:	f007 f9b2 	bl	8c6c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1908:	4939      	ldr	r1, [pc, #228]	; (19f0 <LEDDebug(LEDStruct&)+0x34c>)
    190a:	481f      	ldr	r0, [pc, #124]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    190c:	f7fe ff20 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1910:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    1914:	481c      	ldr	r0, [pc, #112]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1916:	f007 f9f9 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    191a:	481b      	ldr	r0, [pc, #108]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    191c:	f007 f9a6 	bl	8c6c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1920:	4934      	ldr	r1, [pc, #208]	; (19f4 <LEDDebug(LEDStruct&)+0x350>)
    1922:	4819      	ldr	r0, [pc, #100]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1924:	f7fe ff14 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1928:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    192c:	4816      	ldr	r0, [pc, #88]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    192e:	f007 f9ed 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1932:	4815      	ldr	r0, [pc, #84]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1934:	f007 f99a 	bl	8c6c <Print::println()>
    1938:	e799      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    193a:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    193e:	2b00      	cmp	r3, #0
    1940:	f000 8265 	beq.w	1e0e <LEDDebug(LEDStruct&)+0x76a>
			else					 { Serial.println("===RAINBOW MARCH SPLIT==="); }
    1944:	492c      	ldr	r1, [pc, #176]	; (19f8 <LEDDebug(LEDStruct&)+0x354>)
    1946:	4810      	ldr	r0, [pc, #64]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1948:	f7fe ff10 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    194c:	492b      	ldr	r1, [pc, #172]	; (19fc <LEDDebug(LEDStruct&)+0x358>)
    194e:	480e      	ldr	r0, [pc, #56]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1950:	f7fe fefe 	bl	750 <Print::write(char const*)>
			Serial.print("index:     ");
			Serial.println(leds.rainbow_index);
    1954:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    1958:	480b      	ldr	r0, [pc, #44]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    195a:	f7fe ff19 	bl	790 <Print::println(unsigned char)>
    195e:	4928      	ldr	r1, [pc, #160]	; (1a00 <LEDDebug(LEDStruct&)+0x35c>)
    1960:	4809      	ldr	r0, [pc, #36]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1962:	f7fe fef5 	bl	750 <Print::write(char const*)>
			Serial.print("diff:      ");
			Serial.println(leds.rainbow_diff);
    1966:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    196a:	4807      	ldr	r0, [pc, #28]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    196c:	f7fe ff10 	bl	790 <Print::println(unsigned char)>
    1970:	4924      	ldr	r1, [pc, #144]	; (1a04 <LEDDebug(LEDStruct&)+0x360>)
    1972:	4805      	ldr	r0, [pc, #20]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    1974:	f7fe feec 	bl	750 <Print::write(char const*)>
			Serial.print("rot:       ");
			Serial.println(leds.rainbow_rot);
    1978:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    197c:	4802      	ldr	r0, [pc, #8]	; (1988 <LEDDebug(LEDStruct&)+0x2e4>)
    197e:	f7fe ff07 	bl	790 <Print::println(unsigned char)>
			break;
    1982:	e774      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
    1984:	0000b190 	.word	0x0000b190
    1988:	1fff8754 	.word	0x1fff8754
    198c:	0000aba8 	.word	0x0000aba8
    1990:	0000abdc 	.word	0x0000abdc
    1994:	0000ac08 	.word	0x0000ac08
    1998:	0000ac1c 	.word	0x0000ac1c
    199c:	0000ac30 	.word	0x0000ac30
    19a0:	0000ac44 	.word	0x0000ac44
    19a4:	0000ac58 	.word	0x0000ac58
    19a8:	0000ac6c 	.word	0x0000ac6c
    19ac:	0000ac80 	.word	0x0000ac80
    19b0:	0000ac94 	.word	0x0000ac94
    19b4:	0000abf0 	.word	0x0000abf0
    19b8:	0000b094 	.word	0x0000b094
    19bc:	0000b0a8 	.word	0x0000b0a8
    19c0:	0000b0bc 	.word	0x0000b0bc
    19c4:	0000b0d0 	.word	0x0000b0d0
    19c8:	0000b0e4 	.word	0x0000b0e4
    19cc:	0000b0f8 	.word	0x0000b0f8
    19d0:	0000b10c 	.word	0x0000b10c
    19d4:	0000acb0 	.word	0x0000acb0
    19d8:	0000acc8 	.word	0x0000acc8
    19dc:	0000acd8 	.word	0x0000acd8
    19e0:	0000ace8 	.word	0x0000ace8
    19e4:	0000acf8 	.word	0x0000acf8
    19e8:	0000ad08 	.word	0x0000ad08
    19ec:	0000ad18 	.word	0x0000ad18
    19f0:	0000ad28 	.word	0x0000ad28
    19f4:	0000ad38 	.word	0x0000ad38
    19f8:	0000ad5c 	.word	0x0000ad5c
    19fc:	0000ad78 	.word	0x0000ad78
    1a00:	0000b0ec 	.word	0x0000b0ec
    1a04:	0000af28 	.word	0x0000af28

		case FIRE:
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { Serial.print("=====TORCH"); }
    1a08:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    1a0c:	48a7      	ldr	r0, [pc, #668]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a0e:	3b0d      	subs	r3, #13
    1a10:	2b01      	cmp	r3, #1
    1a12:	bf94      	ite	ls
    1a14:	49a6      	ldrls	r1, [pc, #664]	; (1cb0 <LEDDebug(LEDStruct&)+0x60c>)
    1a16:	49a7      	ldrhi	r1, [pc, #668]	; (1cb4 <LEDDebug(LEDStruct&)+0x610>)
    1a18:	f7fe fe9a 	bl	750 <Print::write(char const*)>
			else { Serial.print("=====FIRE"); }
			if (leds.fire_mirror) { Serial.print(" MIRROR"); }
    1a1c:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    1a20:	2b00      	cmp	r3, #0
    1a22:	f040 8211 	bne.w	1e48 <LEDDebug(LEDStruct&)+0x7a4>
			if (leds.fire_sync)	  { Serial.print(" SYNC"); }
    1a26:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    1a2a:	2b00      	cmp	r3, #0
    1a2c:	f040 8207 	bne.w	1e3e <LEDDebug(LEDStruct&)+0x79a>
			Serial.println("=====");
    1a30:	49a1      	ldr	r1, [pc, #644]	; (1cb8 <LEDDebug(LEDStruct&)+0x614>)
    1a32:	489e      	ldr	r0, [pc, #632]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a34:	f7fe fe9a 	bl	76c <Print::println(char const*)>
    1a38:	49a0      	ldr	r1, [pc, #640]	; (1cbc <LEDDebug(LEDStruct&)+0x618>)
    1a3a:	489c      	ldr	r0, [pc, #624]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a3c:	f7fe fe88 	bl	750 <Print::write(char const*)>
			Serial.print("sparking:    ");
			Serial.println(leds.fire_sparking);
    1a40:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    1a44:	4899      	ldr	r0, [pc, #612]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a46:	f7fe fea3 	bl	790 <Print::println(unsigned char)>
    1a4a:	499d      	ldr	r1, [pc, #628]	; (1cc0 <LEDDebug(LEDStruct&)+0x61c>)
    1a4c:	4897      	ldr	r0, [pc, #604]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a4e:	f7fe fe7f 	bl	750 <Print::write(char const*)>
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
    1a52:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    1a56:	4895      	ldr	r0, [pc, #596]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a58:	f7fe fe9a 	bl	790 <Print::println(unsigned char)>
			if (!leds.fire_sync) {
    1a5c:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    1a60:	2b00      	cmp	r3, #0
    1a62:	f000 81d9 	beq.w	1e18 <LEDDebug(LEDStruct&)+0x774>
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
			}
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    1a66:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
    1a6a:	3b0d      	subs	r3, #13
    1a6c:	2b01      	cmp	r3, #1
    1a6e:	f63f aefe 	bhi.w	186e <LEDDebug(LEDStruct&)+0x1ca>
    1a72:	4994      	ldr	r1, [pc, #592]	; (1cc4 <LEDDebug(LEDStruct&)+0x620>)
    1a74:	488d      	ldr	r0, [pc, #564]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a76:	f7fe fe6b 	bl	750 <Print::write(char const*)>
				Serial.print("torch_diff:  ");
				Serial.println(leds.torch_diff);
    1a7a:	f894 131a 	ldrb.w	r1, [r4, #794]	; 0x31a
    1a7e:	488b      	ldr	r0, [pc, #556]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a80:	f7fe fe86 	bl	790 <Print::println(unsigned char)>
    1a84:	e6f3      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
			}
			break;
		
		case COLORWAVE:
			Serial.println("=====COLORWAVE=====");
    1a86:	4990      	ldr	r1, [pc, #576]	; (1cc8 <LEDDebug(LEDStruct&)+0x624>)
    1a88:	4888      	ldr	r0, [pc, #544]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a8a:	f7fe fe6f 	bl	76c <Print::println(char const*)>
			break;
    1a8e:	e6ee      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>

		case PRIDE:
			Serial.println("=====PRIDE=====");
    1a90:	498e      	ldr	r1, [pc, #568]	; (1ccc <LEDDebug(LEDStruct&)+0x628>)
    1a92:	4886      	ldr	r0, [pc, #536]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a94:	f7fe fe6a 	bl	76c <Print::println(char const*)>
			break;
    1a98:	e6e9      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>

		case CONFETTI:
			Serial.println("=====CONFETTI=====");
    1a9a:	498d      	ldr	r1, [pc, #564]	; (1cd0 <LEDDebug(LEDStruct&)+0x62c>)
    1a9c:	4883      	ldr	r0, [pc, #524]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1a9e:	f7fe fe65 	bl	76c <Print::println(char const*)>
    1aa2:	498c      	ldr	r1, [pc, #560]	; (1cd4 <LEDDebug(LEDStruct&)+0x630>)
    1aa4:	4881      	ldr	r0, [pc, #516]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1aa6:	f7fe fe53 	bl	750 <Print::write(char const*)>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
    1aaa:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    1aae:	487f      	ldr	r0, [pc, #508]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ab0:	f7fe fe6e 	bl	790 <Print::println(unsigned char)>
			break;
    1ab4:	e6db      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
			Serial.print("Next explosion time: ");
			Serial.println(leds.next_explosion_time);
			break;

		case ONE_SIN:
			Serial.println("=====ONE_SIN=====");
    1ab6:	4988      	ldr	r1, [pc, #544]	; (1cd8 <LEDDebug(LEDStruct&)+0x634>)
    1ab8:	487c      	ldr	r0, [pc, #496]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1aba:	f7fe fe57 	bl	76c <Print::println(char const*)>
    1abe:	4987      	ldr	r1, [pc, #540]	; (1cdc <LEDDebug(LEDStruct&)+0x638>)
    1ac0:	487a      	ldr	r0, [pc, #488]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ac2:	f7fe fe45 	bl	750 <Print::write(char const*)>
			Serial.print("sin_inc:       ");
			Serial.println(leds.sin_inc);
    1ac6:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    1aca:	4878      	ldr	r0, [pc, #480]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1acc:	f7fe fe60 	bl	790 <Print::println(unsigned char)>
    1ad0:	4983      	ldr	r1, [pc, #524]	; (1ce0 <LEDDebug(LEDStruct&)+0x63c>)
    1ad2:	4876      	ldr	r0, [pc, #472]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ad4:	f7fe fe3c 	bl	750 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    1ad8:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    1adc:	4873      	ldr	r0, [pc, #460]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ade:	f7fe fe57 	bl	790 <Print::println(unsigned char)>
    1ae2:	4980      	ldr	r1, [pc, #512]	; (1ce4 <LEDDebug(LEDStruct&)+0x640>)
    1ae4:	4871      	ldr	r0, [pc, #452]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ae6:	f7fe fe33 	bl	750 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    1aea:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    1aee:	486f      	ldr	r0, [pc, #444]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1af0:	f7fe fe4e 	bl	790 <Print::println(unsigned char)>
    1af4:	497c      	ldr	r1, [pc, #496]	; (1ce8 <LEDDebug(LEDStruct&)+0x644>)
    1af6:	486d      	ldr	r0, [pc, #436]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1af8:	f7fe fe2a 	bl	750 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    1afc:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    1b00:	486a      	ldr	r0, [pc, #424]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b02:	f7fe fe45 	bl	790 <Print::println(unsigned char)>
    1b06:	4979      	ldr	r1, [pc, #484]	; (1cec <LEDDebug(LEDStruct&)+0x648>)
    1b08:	4868      	ldr	r0, [pc, #416]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b0a:	f7fe fe21 	bl	750 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    1b0e:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    1b12:	4866      	ldr	r0, [pc, #408]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b14:	f7fe fe3c 	bl	790 <Print::println(unsigned char)>
    1b18:	4975      	ldr	r1, [pc, #468]	; (1cf0 <LEDDebug(LEDStruct&)+0x64c>)
    1b1a:	4864      	ldr	r0, [pc, #400]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b1c:	f7fe fe18 	bl	750 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    1b20:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    1b24:	4861      	ldr	r0, [pc, #388]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b26:	f7fe fe33 	bl	790 <Print::println(unsigned char)>
    1b2a:	4972      	ldr	r1, [pc, #456]	; (1cf4 <LEDDebug(LEDStruct&)+0x650>)
    1b2c:	485f      	ldr	r0, [pc, #380]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b2e:	f7fe fe0f 	bl	750 <Print::write(char const*)>
			Serial.print("bg_clr:        ");
			Serial.println(leds.bg_clr);
    1b32:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    1b36:	485d      	ldr	r0, [pc, #372]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b38:	f7fe fe2a 	bl	790 <Print::println(unsigned char)>
    1b3c:	496e      	ldr	r1, [pc, #440]	; (1cf8 <LEDDebug(LEDStruct&)+0x654>)
    1b3e:	485b      	ldr	r0, [pc, #364]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b40:	f7fe fe06 	bl	750 <Print::write(char const*)>
			Serial.print("bg_bri:        ");
			Serial.println(leds.bg_bri);
    1b44:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    1b48:	4858      	ldr	r0, [pc, #352]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b4a:	f7fe fe21 	bl	790 <Print::println(unsigned char)>
			break;
    1b4e:	e68e      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>

		case TWO_SIN:
			Serial.println("=====TWO_SIN=====");
    1b50:	496a      	ldr	r1, [pc, #424]	; (1cfc <LEDDebug(LEDStruct&)+0x658>)
    1b52:	4856      	ldr	r0, [pc, #344]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b54:	f7fe fe0a 	bl	76c <Print::println(char const*)>
    1b58:	4969      	ldr	r1, [pc, #420]	; (1d00 <LEDDebug(LEDStruct&)+0x65c>)
    1b5a:	4854      	ldr	r0, [pc, #336]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b5c:	f7fe fdf8 	bl	750 <Print::write(char const*)>
			Serial.print("sin_hue:       ");
			Serial.println(leds.sin_inc);
    1b60:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    1b64:	4851      	ldr	r0, [pc, #324]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b66:	f7fe fe13 	bl	790 <Print::println(unsigned char)>
    1b6a:	495d      	ldr	r1, [pc, #372]	; (1ce0 <LEDDebug(LEDStruct&)+0x63c>)
    1b6c:	484f      	ldr	r0, [pc, #316]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b6e:	f7fe fdef 	bl	750 <Print::write(char const*)>
			Serial.print("sin_speed:     ");
			Serial.println(leds.sin_speed);
    1b72:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    1b76:	484d      	ldr	r0, [pc, #308]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b78:	f7fe fe0a 	bl	790 <Print::println(unsigned char)>
    1b7c:	4959      	ldr	r1, [pc, #356]	; (1ce4 <LEDDebug(LEDStruct&)+0x640>)
    1b7e:	484b      	ldr	r0, [pc, #300]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b80:	f7fe fde6 	bl	750 <Print::write(char const*)>
			Serial.print("sin_cutoff:    ");
			Serial.println(leds.sin_cutoff);
    1b84:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    1b88:	4848      	ldr	r0, [pc, #288]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b8a:	f7fe fe01 	bl	790 <Print::println(unsigned char)>
    1b8e:	4956      	ldr	r1, [pc, #344]	; (1ce8 <LEDDebug(LEDStruct&)+0x644>)
    1b90:	4846      	ldr	r0, [pc, #280]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b92:	f7fe fddd 	bl	750 <Print::write(char const*)>
			Serial.print("sin_rot:       ");
			Serial.println(leds.sin_rot);
    1b96:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    1b9a:	4844      	ldr	r0, [pc, #272]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1b9c:	f7fe fdf8 	bl	790 <Print::println(unsigned char)>
    1ba0:	4952      	ldr	r1, [pc, #328]	; (1cec <LEDDebug(LEDStruct&)+0x648>)
    1ba2:	4842      	ldr	r0, [pc, #264]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ba4:	f7fe fdd4 	bl	750 <Print::write(char const*)>
			Serial.print("sin_phase:     ");
			Serial.println(leds.sin_phase);
    1ba8:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    1bac:	483f      	ldr	r0, [pc, #252]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bae:	f7fe fdef 	bl	790 <Print::println(unsigned char)>
    1bb2:	4954      	ldr	r1, [pc, #336]	; (1d04 <LEDDebug(LEDStruct&)+0x660>)
    1bb4:	483d      	ldr	r0, [pc, #244]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bb6:	f7fe fdcb 	bl	750 <Print::write(char const*)>
			Serial.print("two_hue:       ");
			Serial.println(leds.two_hue);
    1bba:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    1bbe:	483b      	ldr	r0, [pc, #236]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bc0:	f7fe fde6 	bl	790 <Print::println(unsigned char)>
    1bc4:	4950      	ldr	r1, [pc, #320]	; (1d08 <LEDDebug(LEDStruct&)+0x664>)
    1bc6:	4839      	ldr	r0, [pc, #228]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bc8:	f7fe fdc2 	bl	750 <Print::write(char const*)>
			Serial.print("two_speed:     ");
			Serial.println(leds.two_speed);
    1bcc:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    1bd0:	4836      	ldr	r0, [pc, #216]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bd2:	f7fe fddd 	bl	790 <Print::println(unsigned char)>
    1bd6:	494d      	ldr	r1, [pc, #308]	; (1d0c <LEDDebug(LEDStruct&)+0x668>)
    1bd8:	4834      	ldr	r0, [pc, #208]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bda:	f7fe fdb9 	bl	750 <Print::write(char const*)>
			Serial.print("two_cutoff:    ");
			Serial.println(leds.two_cutoff);
    1bde:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    1be2:	4832      	ldr	r0, [pc, #200]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1be4:	f7fe fdd4 	bl	790 <Print::println(unsigned char)>
    1be8:	4949      	ldr	r1, [pc, #292]	; (1d10 <LEDDebug(LEDStruct&)+0x66c>)
    1bea:	4830      	ldr	r0, [pc, #192]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bec:	f7fe fdb0 	bl	750 <Print::write(char const*)>
			Serial.print("two_rot:       ");
			Serial.println(leds.two_rot);
    1bf0:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    1bf4:	482d      	ldr	r0, [pc, #180]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bf6:	f7fe fdcb 	bl	790 <Print::println(unsigned char)>
    1bfa:	4946      	ldr	r1, [pc, #280]	; (1d14 <LEDDebug(LEDStruct&)+0x670>)
    1bfc:	482b      	ldr	r0, [pc, #172]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1bfe:	f7fe fda7 	bl	750 <Print::write(char const*)>
			Serial.print("two_phase:     ");
			Serial.println(leds.two_phase);
    1c02:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    1c06:	4829      	ldr	r0, [pc, #164]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c08:	f7fe fdc2 	bl	790 <Print::println(unsigned char)>
    1c0c:	4938      	ldr	r1, [pc, #224]	; (1cf0 <LEDDebug(LEDStruct&)+0x64c>)
    1c0e:	4827      	ldr	r0, [pc, #156]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c10:	f7fe fd9e 	bl	750 <Print::write(char const*)>
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
    1c14:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    1c18:	4824      	ldr	r0, [pc, #144]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c1a:	f7fe fdb9 	bl	790 <Print::println(unsigned char)>
			break;
    1c1e:	e626      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
			Serial.print("confetti_fade: ");
			Serial.println(leds.confetti_fade);
			break;

		case FIREWORKS:
			Serial.println("=====FIREWORKS=====");
    1c20:	493d      	ldr	r1, [pc, #244]	; (1d18 <LEDDebug(LEDStruct&)+0x674>)
    1c22:	4822      	ldr	r0, [pc, #136]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c24:	f7fe fda2 	bl	76c <Print::println(char const*)>
    1c28:	493c      	ldr	r1, [pc, #240]	; (1d1c <LEDDebug(LEDStruct&)+0x678>)
    1c2a:	4820      	ldr	r0, [pc, #128]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c2c:	f7fe fd90 	bl	750 <Print::write(char const*)>
			Serial.print("firework_position:   ");
			Serial.println(leds.firework_position);
    1c30:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    1c34:	481d      	ldr	r0, [pc, #116]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c36:	f7fe fdab 	bl	790 <Print::println(unsigned char)>
    1c3a:	4939      	ldr	r1, [pc, #228]	; (1d20 <LEDDebug(LEDStruct&)+0x67c>)
    1c3c:	481b      	ldr	r0, [pc, #108]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c3e:	f7fe fd87 	bl	750 <Print::write(char const*)>
			Serial.print("Current Stage:  ");
			switch (leds.current_stage) {
    1c42:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    1c46:	2b01      	cmp	r3, #1
    1c48:	d00a      	beq.n	1c60 <LEDDebug(LEDStruct&)+0x5bc>
    1c4a:	d305      	bcc.n	1c58 <LEDDebug(LEDStruct&)+0x5b4>
    1c4c:	2b02      	cmp	r3, #2
    1c4e:	d10b      	bne.n	1c68 <LEDDebug(LEDStruct&)+0x5c4>
			case WAITING: Serial.println("WAITING");
    1c50:	4934      	ldr	r1, [pc, #208]	; (1d24 <LEDDebug(LEDStruct&)+0x680>)
    1c52:	4816      	ldr	r0, [pc, #88]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c54:	f7fe fd8a 	bl	76c <Print::println(char const*)>
			case FADEUP: Serial.println("FADEUP");
    1c58:	4933      	ldr	r1, [pc, #204]	; (1d28 <LEDDebug(LEDStruct&)+0x684>)
    1c5a:	4814      	ldr	r0, [pc, #80]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c5c:	f7fe fd86 	bl	76c <Print::println(char const*)>
			case EXPLOSION: Serial.println("EXPLOSION");
    1c60:	4932      	ldr	r1, [pc, #200]	; (1d2c <LEDDebug(LEDStruct&)+0x688>)
    1c62:	4812      	ldr	r0, [pc, #72]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c64:	f7fe fd82 	bl	76c <Print::println(char const*)>
    1c68:	4931      	ldr	r1, [pc, #196]	; (1d30 <LEDDebug(LEDStruct&)+0x68c>)
    1c6a:	4810      	ldr	r0, [pc, #64]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c6c:	f7fe fd70 	bl	750 <Print::write(char const*)>
			}
			Serial.print("Number of sparks:  ");
			Serial.println(leds.number_of_sparks);
    1c70:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    1c74:	480d      	ldr	r0, [pc, #52]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c76:	f7fe fd8b 	bl	790 <Print::println(unsigned char)>
    1c7a:	492e      	ldr	r1, [pc, #184]	; (1d34 <LEDDebug(LEDStruct&)+0x690>)
    1c7c:	480b      	ldr	r0, [pc, #44]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c7e:	f7fe fd67 	bl	750 <Print::write(char const*)>
			Serial.print("Brightest spark:   ");
			Serial.println(leds.brightest_spark);
    1c82:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    1c86:	4809      	ldr	r0, [pc, #36]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c88:	f7fe fd82 	bl	790 <Print::println(unsigned char)>
    1c8c:	492a      	ldr	r1, [pc, #168]	; (1d38 <LEDDebug(LEDStruct&)+0x694>)
    1c8e:	4807      	ldr	r0, [pc, #28]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c90:	f7fe fd5e 	bl	750 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1c94:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    1c98:	4804      	ldr	r0, [pc, #16]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1c9a:	2300      	movs	r3, #0
    1c9c:	220a      	movs	r2, #10
    1c9e:	f006 fff5 	bl	8c8c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ca2:	4802      	ldr	r0, [pc, #8]	; (1cac <LEDDebug(LEDStruct&)+0x608>)
    1ca4:	f006 ffe2 	bl	8c6c <Print::println()>
    1ca8:	e5e1      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
    1caa:	bf00      	nop
    1cac:	1fff8754 	.word	0x1fff8754
    1cb0:	0000ad84 	.word	0x0000ad84
    1cb4:	0000ad90 	.word	0x0000ad90
    1cb8:	0000aca8 	.word	0x0000aca8
    1cbc:	0000adac 	.word	0x0000adac
    1cc0:	0000adbc 	.word	0x0000adbc
    1cc4:	0000adec 	.word	0x0000adec
    1cc8:	0000adfc 	.word	0x0000adfc
    1ccc:	0000ae10 	.word	0x0000ae10
    1cd0:	0000ae20 	.word	0x0000ae20
    1cd4:	0000ae34 	.word	0x0000ae34
    1cd8:	0000aee0 	.word	0x0000aee0
    1cdc:	0000aef4 	.word	0x0000aef4
    1ce0:	0000af04 	.word	0x0000af04
    1ce4:	0000af14 	.word	0x0000af14
    1ce8:	0000af24 	.word	0x0000af24
    1cec:	0000af34 	.word	0x0000af34
    1cf0:	0000af44 	.word	0x0000af44
    1cf4:	0000af54 	.word	0x0000af54
    1cf8:	0000af64 	.word	0x0000af64
    1cfc:	0000af74 	.word	0x0000af74
    1d00:	0000af88 	.word	0x0000af88
    1d04:	0000af98 	.word	0x0000af98
    1d08:	0000afa8 	.word	0x0000afa8
    1d0c:	0000afb8 	.word	0x0000afb8
    1d10:	0000afc8 	.word	0x0000afc8
    1d14:	0000afd8 	.word	0x0000afd8
    1d18:	0000ae44 	.word	0x0000ae44
    1d1c:	0000ae58 	.word	0x0000ae58
    1d20:	0000ae70 	.word	0x0000ae70
    1d24:	0000ae84 	.word	0x0000ae84
    1d28:	0000ae8c 	.word	0x0000ae8c
    1d2c:	0000ae94 	.word	0x0000ae94
    1d30:	0000aea0 	.word	0x0000aea0
    1d34:	0000aeb4 	.word	0x0000aeb4
    1d38:	0000aec8 	.word	0x0000aec8
			Serial.print("all_freq:      ");
			Serial.println(leds.sin_all_freq);
			break;

		case SHOOTING_POLE:
			Serial.println("=====SHOOTING POLE=====");
    1d3c:	4945      	ldr	r1, [pc, #276]	; (1e54 <LEDDebug(LEDStruct&)+0x7b0>)
    1d3e:	4846      	ldr	r0, [pc, #280]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d40:	f7fe fd14 	bl	76c <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1d44:	4945      	ldr	r1, [pc, #276]	; (1e5c <LEDDebug(LEDStruct&)+0x7b8>)
    1d46:	4844      	ldr	r0, [pc, #272]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d48:	f7fe fd02 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1d4c:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    1d50:	4841      	ldr	r0, [pc, #260]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d52:	f006 ffdb 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1d56:	4840      	ldr	r0, [pc, #256]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d58:	f006 ff88 	bl	8c6c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1d5c:	4940      	ldr	r1, [pc, #256]	; (1e60 <LEDDebug(LEDStruct&)+0x7bc>)
    1d5e:	483e      	ldr	r0, [pc, #248]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d60:	f7fe fcf6 	bl	750 <Print::write(char const*)>
			Serial.print("strip_range:     ");
			Serial.println(leds.strip_range);
			Serial.print("pole_diff:       ");
			Serial.println(leds.pole_diff);
    1d64:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    1d68:	483b      	ldr	r0, [pc, #236]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d6a:	f7fe fd11 	bl	790 <Print::println(unsigned char)>
    1d6e:	493d      	ldr	r1, [pc, #244]	; (1e64 <LEDDebug(LEDStruct&)+0x7c0>)
    1d70:	4839      	ldr	r0, [pc, #228]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d72:	f7fe fced 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_beat:     ");
			Serial.println(leds.juggle_beat);
    1d76:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    1d7a:	4837      	ldr	r0, [pc, #220]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d7c:	f7fe fd08 	bl	790 <Print::println(unsigned char)>
    1d80:	4939      	ldr	r1, [pc, #228]	; (1e68 <LEDDebug(LEDStruct&)+0x7c4>)
    1d82:	4835      	ldr	r0, [pc, #212]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d84:	f7fe fce4 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_diff:     ");
			Serial.println(leds.juggle_diff);
    1d88:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    1d8c:	4832      	ldr	r0, [pc, #200]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d8e:	f7fe fcff 	bl	790 <Print::println(unsigned char)>
    1d92:	4936      	ldr	r1, [pc, #216]	; (1e6c <LEDDebug(LEDStruct&)+0x7c8>)
    1d94:	4830      	ldr	r0, [pc, #192]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1d96:	f7fe fcdb 	bl	750 <Print::write(char const*)>
			Serial.print("juggle_fade:     ");
			Serial.println(leds.juggle_fade);
    1d9a:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    1d9e:	482e      	ldr	r0, [pc, #184]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1da0:	f7fe fcf6 	bl	790 <Print::println(unsigned char)>
			break;
    1da4:	e563      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>

		case NOISE:
			Serial.println("=====NOISE=====");
    1da6:	4932      	ldr	r1, [pc, #200]	; (1e70 <LEDDebug(LEDStruct&)+0x7cc>)
    1da8:	482b      	ldr	r0, [pc, #172]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1daa:	f7fe fcdf 	bl	76c <Print::println(char const*)>
    1dae:	4931      	ldr	r1, [pc, #196]	; (1e74 <LEDDebug(LEDStruct&)+0x7d0>)
    1db0:	4829      	ldr	r0, [pc, #164]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1db2:	f7fe fccd 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1db6:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    1dba:	4827      	ldr	r0, [pc, #156]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dbc:	f006 ffa6 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1dc0:	4825      	ldr	r0, [pc, #148]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dc2:	f006 ff53 	bl	8c6c <Print::println()>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1dc6:	492c      	ldr	r1, [pc, #176]	; (1e78 <LEDDebug(LEDStruct&)+0x7d4>)
    1dc8:	4823      	ldr	r0, [pc, #140]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dca:	f7fe fcc1 	bl	750 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1dce:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    1dd2:	4821      	ldr	r0, [pc, #132]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dd4:	f006 ff9a 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1dd8:	481f      	ldr	r0, [pc, #124]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dda:	f006 ff47 	bl	8c6c <Print::println()>
    1dde:	e546      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
			Serial.print(leds.bounce_rainbow);
			break;


		default:
			Serial.println("");
    1de0:	4926      	ldr	r1, [pc, #152]	; (1e7c <LEDDebug(LEDStruct&)+0x7d8>)
    1de2:	481d      	ldr	r0, [pc, #116]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1de4:	f7fe fcc2 	bl	76c <Print::println(char const*)>
			Serial.println("===MODE TYPE ERROR===");
    1de8:	4925      	ldr	r1, [pc, #148]	; (1e80 <LEDDebug(LEDStruct&)+0x7dc>)
    1dea:	481b      	ldr	r0, [pc, #108]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dec:	f7fe fcbe 	bl	76c <Print::println(char const*)>
			Serial.println("");
    1df0:	4922      	ldr	r1, [pc, #136]	; (1e7c <LEDDebug(LEDStruct&)+0x7d8>)
    1df2:	4819      	ldr	r0, [pc, #100]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1df4:	f7fe fcba 	bl	76c <Print::println(char const*)>
			break;
    1df8:	e539      	b.n	186e <LEDDebug(LEDStruct&)+0x1ca>
	Serial.println("==================================================");

	// Print which Array it is
	Serial.print("LED Array:        ");
	if		(leds.array_type == CURRENT) { Serial.println("CURRENT"); }
	else if (leds.array_type == NEXT)	 { Serial.println("NEXT"); }
    1dfa:	4922      	ldr	r1, [pc, #136]	; (1e84 <LEDDebug(LEDStruct&)+0x7e0>)
    1dfc:	4816      	ldr	r0, [pc, #88]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1dfe:	f7fe fcb5 	bl	76c <Print::println(char const*)>
    1e02:	e46e      	b.n	16e2 <LEDDebug(LEDStruct&)+0x3e>
	else if (leds.array_type == OVERLAY) { Serial.println("OVERLAY"); }
    1e04:	4920      	ldr	r1, [pc, #128]	; (1e88 <LEDDebug(LEDStruct&)+0x7e4>)
    1e06:	4814      	ldr	r0, [pc, #80]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e08:	f7fe fcb0 	bl	76c <Print::println(char const*)>
    1e0c:	e469      	b.n	16e2 <LEDDebug(LEDStruct&)+0x3e>
			Serial.print("phased:        ");
			Serial.println(leds.juggle_phased);
			break;

		case RAINBOW_MARCH:
			if (!leds.rainbow_split) { Serial.println("===RAINBOW MARCH==="); }
    1e0e:	491f      	ldr	r1, [pc, #124]	; (1e8c <LEDDebug(LEDStruct&)+0x7e8>)
    1e10:	4811      	ldr	r0, [pc, #68]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e12:	f7fe fcab 	bl	76c <Print::println(char const*)>
    1e16:	e599      	b.n	194c <LEDDebug(LEDStruct&)+0x2a8>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    1e18:	491d      	ldr	r1, [pc, #116]	; (1e90 <LEDDebug(LEDStruct&)+0x7ec>)
    1e1a:	480f      	ldr	r0, [pc, #60]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e1c:	f7fe fc98 	bl	750 <Print::write(char const*)>
			Serial.println(leds.fire_sparking);
			Serial.print("cooling:     ");
			Serial.println(leds.fire_cooling);
			if (!leds.fire_sync) {
				Serial.print("sparking2:   ");
				Serial.println(leds.fire_sparking2);
    1e20:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    1e24:	480c      	ldr	r0, [pc, #48]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e26:	f7fe fcb3 	bl	790 <Print::println(unsigned char)>
    1e2a:	491a      	ldr	r1, [pc, #104]	; (1e94 <LEDDebug(LEDStruct&)+0x7f0>)
    1e2c:	480a      	ldr	r0, [pc, #40]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e2e:	f7fe fc8f 	bl	750 <Print::write(char const*)>
				Serial.print("cooling2:    ");
				Serial.println(leds.fire_cooling2);
    1e32:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    1e36:	4808      	ldr	r0, [pc, #32]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e38:	f7fe fcaa 	bl	790 <Print::println(unsigned char)>
    1e3c:	e613      	b.n	1a66 <LEDDebug(LEDStruct&)+0x3c2>
    1e3e:	4916      	ldr	r1, [pc, #88]	; (1e98 <LEDDebug(LEDStruct&)+0x7f4>)
    1e40:	4805      	ldr	r0, [pc, #20]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e42:	f7fe fc85 	bl	750 <Print::write(char const*)>
    1e46:	e5f3      	b.n	1a30 <LEDDebug(LEDStruct&)+0x38c>
    1e48:	4914      	ldr	r1, [pc, #80]	; (1e9c <LEDDebug(LEDStruct&)+0x7f8>)
    1e4a:	4803      	ldr	r0, [pc, #12]	; (1e58 <LEDDebug(LEDStruct&)+0x7b4>)
    1e4c:	f7fe fc80 	bl	750 <Print::write(char const*)>
    1e50:	e5e9      	b.n	1a26 <LEDDebug(LEDStruct&)+0x382>
    1e52:	bf00      	nop
    1e54:	0000afe8 	.word	0x0000afe8
    1e58:	1fff8754 	.word	0x1fff8754
    1e5c:	0000b000 	.word	0x0000b000
    1e60:	0000b014 	.word	0x0000b014
    1e64:	0000b028 	.word	0x0000b028
    1e68:	0000b03c 	.word	0x0000b03c
    1e6c:	0000b050 	.word	0x0000b050
    1e70:	0000b064 	.word	0x0000b064
    1e74:	0000b074 	.word	0x0000b074
    1e78:	0000b084 	.word	0x0000b084
    1e7c:	0000b190 	.word	0x0000b190
    1e80:	0000b120 	.word	0x0000b120
    1e84:	0000abf8 	.word	0x0000abf8
    1e88:	0000ac00 	.word	0x0000ac00
    1e8c:	0000ad48 	.word	0x0000ad48
    1e90:	0000adcc 	.word	0x0000adcc
    1e94:	0000addc 	.word	0x0000addc
    1e98:	0000ada4 	.word	0x0000ada4
    1e9c:	0000ad9c 	.word	0x0000ad9c

00001ea0 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    1ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ea4:	b08d      	sub	sp, #52	; 0x34
    1ea6:	2120      	movs	r1, #32
    1ea8:	4605      	mov	r5, r0
    1eaa:	9009      	str	r0, [sp, #36]	; 0x24
    1eac:	483f      	ldr	r0, [pc, #252]	; (1fac <change_palette(LEDStruct&) [clone .part.11]+0x10c>)
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    1eae:	4c40      	ldr	r4, [pc, #256]	; (1fb0 <change_palette(LEDStruct&) [clone .part.11]+0x110>)
    1eb0:	f006 fcd8 	bl	8864 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1eb4:	483f      	ldr	r0, [pc, #252]	; (1fb4 <change_palette(LEDStruct&) [clone .part.11]+0x114>)
    1eb6:	f006 fed9 	bl	8c6c <Print::println()>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1eba:	483f      	ldr	r0, [pc, #252]	; (1fb8 <change_palette(LEDStruct&) [clone .part.11]+0x118>)

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1ebc:	4a3f      	ldr	r2, [pc, #252]	; (1fbc <change_palette(LEDStruct&) [clone .part.11]+0x11c>)
    1ebe:	8803      	ldrh	r3, [r0, #0]
    1ec0:	7811      	ldrb	r1, [r2, #0]
    1ec2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    1ec6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1eca:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    1ece:	3319      	adds	r3, #25
    1ed0:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1ed2:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    1ed6:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    1ed8:	fb12 f201 	smulbb	r2, r2, r1
    1edc:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1ede:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    1ee0:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
		if (DEBUG) { Serial.println("^^^^^^^^Changing Palette^^^^^^^^"); }
		leds.palette_index = random8(palette_count);
    1ee4:	f885 2228 	strb.w	r2, [r5, #552]	; 0x228
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    1ee8:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    1eea:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    1eee:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1ef0:	3701      	adds	r7, #1
        } while ( u.index != 255);
    1ef2:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    1ef4:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    1ef6:	d1f8      	bne.n	1eea <change_palette(LEDStruct&) [clone .part.11]+0x4a>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1ef8:	f8d8 3000 	ldr.w	r3, [r8]
    1efc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1efe:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    1f00:	ea4f 6913 	mov.w	r9, r3, lsr #24
    1f04:	f202 12f7 	addw	r2, r2, #503	; 0x1f7
    1f08:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    1f0c:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    1f10:	f04f 33ff 	mov.w	r3, #4294967295
    1f14:	9207      	str	r2, [sp, #28]
    1f16:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    1f18:	2400      	movs	r4, #0
    1f1a:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    1f1c:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1f20:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1f22:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    1f26:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1f2a:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    1f2e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    1f30:	b2f9      	uxtb	r1, r7
    1f32:	f3c5 6507 	ubfx	r5, r5, #24, #8
    1f36:	9104      	str	r1, [sp, #16]
    1f38:	b2e9      	uxtb	r1, r5
    1f3a:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    1f3c:	fa5f f18c 	uxtb.w	r1, ip
    1f40:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    1f42:	9908      	ldr	r1, [sp, #32]
    1f44:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1f46:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    1f48:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    1f4c:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    1f50:	d80c      	bhi.n	1f6c <change_palette(LEDStruct&) [clone .part.11]+0xcc>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    1f52:	9906      	ldr	r1, [sp, #24]
    1f54:	458c      	cmp	ip, r1
    1f56:	dc07      	bgt.n	1f68 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
    1f58:	290f      	cmp	r1, #15
    1f5a:	d005      	beq.n	1f68 <change_palette(LEDStruct&) [clone .part.11]+0xc8>
                    istart8 = lastSlotUsed + 1;
    1f5c:	3101      	adds	r1, #1
    1f5e:	b2c9      	uxtb	r1, r1
    1f60:	428b      	cmp	r3, r1
    1f62:	9103      	str	r1, [sp, #12]
    1f64:	bf38      	it	cc
    1f66:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    1f68:	b259      	sxtb	r1, r3
    1f6a:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    1f6c:	a90b      	add	r1, sp, #44	; 0x2c
    1f6e:	9100      	str	r1, [sp, #0]
    1f70:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f72:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    1f76:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    1f7a:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f7e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    1f82:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    1f86:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    1f8a:	f004 fbc9 	bl	6720 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    1f8e:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1f90:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    1f94:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1f98:	46ca      	mov	sl, r9
    1f9a:	d1bf      	bne.n	1f1c <change_palette(LEDStruct&) [clone .part.11]+0x7c>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    1f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f9e:	f893 0228 	ldrb.w	r0, [r3, #552]	; 0x228
    1fa2:	f7ff f871 	bl	1088 <print_palette(unsigned char)>
	}
}
    1fa6:	b00d      	add	sp, #52	; 0x34
    1fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fac:	0000b138 	.word	0x0000b138
    1fb0:	0000a36c 	.word	0x0000a36c
    1fb4:	1fff8754 	.word	0x1fff8754
    1fb8:	1fff874a 	.word	0x1fff874a
    1fbc:	1fff8748 	.word	0x1fff8748

00001fc0 <juggle(LEDStruct&)>:
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1fc4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	leds.juggle_index_reset  = jir;
}

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    1fc8:	b091      	sub	sp, #68	; 0x44
    1fca:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    1fcc:	2b00      	cmp	r3, #0
    1fce:	f000 80f3 	beq.w	21b8 <juggle(LEDStruct&)+0x1f8>
    1fd2:	f890 3233 	ldrb.w	r3, [r0, #563]	; 0x233
    1fd6:	f890 2231 	ldrb.w	r2, [r0, #561]	; 0x231

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    1fda:	b113      	cbz	r3, 1fe2 <juggle(LEDStruct&)+0x22>
    1fdc:	2300      	movs	r3, #0
    1fde:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    1fe2:	2196      	movs	r1, #150	; 0x96
    1fe4:	4620      	mov	r0, r4
    1fe6:	f004 fc2d 	bl	6844 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1fea:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
		if (leds.juggle_phased) {
    1fee:	f894 7235 	ldrb.w	r7, [r4, #565]	; 0x235
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    1ff2:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    1ff6:	2900      	cmp	r1, #0
    1ff8:	f040 8178 	bne.w	22ec <juggle(LEDStruct&)+0x32c>
		if (leds.juggle_phased) {
    1ffc:	2f00      	cmp	r7, #0
    1ffe:	f000 82b8 	beq.w	2572 <juggle(LEDStruct&)+0x5b2>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    2002:	2b00      	cmp	r3, #0
    2004:	f000 8388 	beq.w	2718 <juggle(LEDStruct&)+0x758>
    2008:	48c4      	ldr	r0, [pc, #784]	; (231c <juggle(LEDStruct&)+0x35c>)
    200a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    200e:	f8df 9314 	ldr.w	r9, [pc, #788]	; 2324 <juggle(LEDStruct&)+0x364>
    2012:	f8df 8314 	ldr.w	r8, [pc, #788]	; 2328 <juggle(LEDStruct&)+0x368>
    2016:	9002      	str	r0, [sp, #8]
    2018:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    201c:	460f      	mov	r7, r1
    201e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2022:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2026:	9503      	str	r5, [sp, #12]
    2028:	e05e      	b.n	20e8 <juggle(LEDStruct&)+0x128>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    202a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    202e:	443b      	add	r3, r7
    2030:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2032:	f8d9 1000 	ldr.w	r1, [r9]
    2036:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2038:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    203a:	9904      	ldr	r1, [sp, #16]
    203c:	bf98      	it	ls
    203e:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2040:	f44f 708c 	mov.w	r0, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2044:	bf98      	it	ls
    2046:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2048:	fb00 f101 	mul.w	r1, r0, r1
    204c:	fb03 f301 	mul.w	r3, r3, r1
    2050:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2052:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2054:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2058:	d503      	bpl.n	2062 <juggle(LEDStruct&)+0xa2>
    205a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    205e:	3107      	adds	r1, #7
    2060:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2062:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2064:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2066:	f3c1 0146 	ubfx	r1, r1, #1, #7
    206a:	f818 6000 	ldrb.w	r6, [r8, r0]
    206e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2072:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2076:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2078:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    207a:	bf48      	it	mi
    207c:	4249      	negmi	r1, r1
    207e:	b20e      	sxth	r6, r1
    2080:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2084:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2088:	9100      	str	r1, [sp, #0]
    208a:	4650      	mov	r0, sl
    208c:	4659      	mov	r1, fp
    208e:	f004 fc39 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2092:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2096:	2296      	movs	r2, #150	; 0x96
    2098:	b29b      	uxth	r3, r3
    209a:	fb02 f303 	mul.w	r3, r2, r3
    209e:	0c1b      	lsrs	r3, r3, #16
    20a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    20a4:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    20a6:	5ce2      	ldrb	r2, [r4, r3]
    20a8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    20ac:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    20b0:	54e2      	strb	r2, [r4, r3]
    20b2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    20b6:	784a      	ldrb	r2, [r1, #1]
    20b8:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    20bc:	704a      	strb	r2, [r1, #1]
    20be:	788b      	ldrb	r3, [r1, #2]
    20c0:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    20c4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    20c8:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    20ca:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    20ce:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    20d2:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    20d6:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    20d8:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    20da:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    20dc:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    20de:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    20e0:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    20e4:	f240 8318 	bls.w	2718 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    20e8:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    20ec:	2900      	cmp	r1, #0
    20ee:	d19c      	bne.n	202a <juggle(LEDStruct&)+0x6a>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    20f0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    20f4:	443b      	add	r3, r7
    20f6:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20f8:	f8d9 1000 	ldr.w	r1, [r9]
    20fc:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    20fe:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2100:	9905      	ldr	r1, [sp, #20]
    2102:	bf98      	it	ls
    2104:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2106:	f44f 708c 	mov.w	r0, #280	; 0x118
    210a:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    210e:	bf98      	it	ls
    2110:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    2112:	fb03 f301 	mul.w	r3, r3, r1
    2116:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2118:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    211a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    211e:	d503      	bpl.n	2128 <juggle(LEDStruct&)+0x168>
    2120:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2124:	3107      	adds	r1, #7
    2126:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2128:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    212a:	9d02      	ldr	r5, [sp, #8]
    212c:	f818 6000 	ldrb.w	r6, [r8, r0]
    2130:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2134:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2138:	fb06 0101 	mla	r1, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    213c:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    213e:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    2140:	bf48      	it	mi
    2142:	4249      	negmi	r1, r1
    2144:	b20e      	sxth	r6, r1
    2146:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    214a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    214e:	9100      	str	r1, [sp, #0]
    2150:	4650      	mov	r0, sl
    2152:	4659      	mov	r1, fp
    2154:	f004 fbd6 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2158:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    215c:	b29b      	uxth	r3, r3
    215e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2162:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2166:	0c1b      	lsrs	r3, r3, #16
    2168:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    216c:	18e1      	adds	r1, r4, r3
    216e:	5ce2      	ldrb	r2, [r4, r3]
    2170:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2174:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2178:	54e2      	strb	r2, [r4, r3]
    217a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    217e:	784a      	ldrb	r2, [r1, #1]
    2180:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2184:	704a      	strb	r2, [r1, #1]
    2186:	788b      	ldrb	r3, [r1, #2]
    2188:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    218c:	fa83 f352 	uqadd8	r3, r3, r2
    2190:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2192:	708b      	strb	r3, [r1, #2]
    2194:	4622      	mov	r2, r4
    2196:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2198:	7819      	ldrb	r1, [r3, #0]
    219a:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    219e:	7859      	ldrb	r1, [r3, #1]
    21a0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    21a4:	7899      	ldrb	r1, [r3, #2]
    21a6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    21aa:	3303      	adds	r3, #3
// LEDStruct over_leds;


// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    21ac:	429d      	cmp	r5, r3
    21ae:	f1a2 0203 	sub.w	r2, r2, #3
    21b2:	d1f1      	bne.n	2198 <juggle(LEDStruct&)+0x1d8>
    21b4:	9503      	str	r5, [sp, #12]
    21b6:	e788      	b.n	20ca <juggle(LEDStruct&)+0x10a>
    21b8:	4d59      	ldr	r5, [pc, #356]	; (2320 <juggle(LEDStruct&)+0x360>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    21ba:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    21be:	882b      	ldrh	r3, [r5, #0]
    21c0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    21c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    21c8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    21cc:	3119      	adds	r1, #25
    21ce:	b289      	uxth	r1, r1
    21d0:	eb01 2041 	add.w	r0, r1, r1, lsl #9
    21d4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    21d8:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    21dc:	3019      	adds	r0, #25
    21de:	b280      	uxth	r0, r0
    21e0:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    21e4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    21e8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    21ec:	3319      	adds	r3, #25
    21ee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    21f2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    21f6:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    21fa:	3219      	adds	r2, #25
    21fc:	b292      	uxth	r2, r2
    21fe:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    2202:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    2206:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    220a:	3619      	adds	r6, #25
    220c:	b2b6      	uxth	r6, r6
    220e:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    2212:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2216:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    221a:	3319      	adds	r3, #25
    221c:	b29b      	uxth	r3, r3
    221e:	eb03 2e43 	add.w	lr, r3, r3, lsl #9
    2222:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
    2226:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    222a:	f10e 0e19 	add.w	lr, lr, #25
    222e:	fa1f fe8e 	uxth.w	lr, lr
    2232:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    2236:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    223a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    223e:	3719      	adds	r7, #25
    2240:	b2bf      	uxth	r7, r7
    2242:	eb07 2847 	add.w	r8, r7, r7, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2246:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    224a:	eb02 2c12 	add.w	ip, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    224e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2252:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2254:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    225c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2260:	fa5f fc8c 	uxtb.w	ip, ip
	leds.juggle_beat		 = jb;
    2264:	b2f2      	uxtb	r2, r6
    2266:	f108 0819 	add.w	r8, r8, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    226a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    226e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2272:	fa1f f688 	uxth.w	r6, r8
	leds.juggle_beat		 = jb;
    2276:	eb02 0242 	add.w	r2, r2, r2, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    227a:	119b      	asrs	r3, r3, #6
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    227c:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    2280:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    2284:	ea4f 18ec 	mov.w	r8, ip, asr #7
    2288:	eb00 2010 	add.w	r0, r0, r0, lsr #8
	leds.juggle_beat		 = jb;
    228c:	ea4f 1ca2 	mov.w	ip, r2, asr #6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2290:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    2294:	f3ce 1342 	ubfx	r3, lr, #5, #3
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    2298:	f3c1 1ec0 	ubfx	lr, r1, #7, #1
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    229c:	f108 0101 	add.w	r1, r8, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    22a0:	f3c0 19c0 	ubfx	r9, r0, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    22a4:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    22a8:	f10c 0008 	add.w	r0, ip, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    22ac:	f884 122f 	strb.w	r1, [r4, #559]	; 0x22f
    22b0:	eb06 2116 	add.w	r1, r6, r6, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    22b4:	f103 0c01 	add.w	ip, r3, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    22b8:	b2d2      	uxtb	r2, r2

// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    22ba:	f3c7 13c0 	ubfx	r3, r7, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    22be:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    22c2:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    22c6:	2001      	movs	r0, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    22c8:	f884 e234 	strb.w	lr, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    22cc:	f884 9235 	strb.w	r9, [r4, #565]	; 0x235
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    22d0:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    22d4:	f884 c232 	strb.w	ip, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    22d8:	802e      	strh	r6, [r5, #0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    22da:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    22de:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    22e2:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    22e6:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
    22ea:	e676      	b.n	1fda <juggle(LEDStruct&)+0x1a>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    22ec:	2f00      	cmp	r7, #0
    22ee:	f000 80a6 	beq.w	243e <juggle(LEDStruct&)+0x47e>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    22f2:	2b00      	cmp	r3, #0
    22f4:	f000 8210 	beq.w	2718 <juggle(LEDStruct&)+0x758>
    22f8:	4b08      	ldr	r3, [pc, #32]	; (231c <juggle(LEDStruct&)+0x35c>)
    22fa:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    22fe:	f8df 9024 	ldr.w	r9, [pc, #36]	; 2324 <juggle(LEDStruct&)+0x364>
    2302:	f8df 8024 	ldr.w	r8, [pc, #36]	; 2328 <juggle(LEDStruct&)+0x368>
    2306:	9302      	str	r3, [sp, #8]
    2308:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    230c:	2700      	movs	r7, #0
    230e:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2312:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2316:	9503      	str	r5, [sp, #12]
    2318:	e06d      	b.n	23f6 <juggle(LEDStruct&)+0x436>
    231a:	bf00      	nop
    231c:	00009c50 	.word	0x00009c50
    2320:	1fff874a 	.word	0x1fff874a
    2324:	1fff9e00 	.word	0x1fff9e00
    2328:	0000a4fc 	.word	0x0000a4fc
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    232c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2330:	2b00      	cmp	r3, #0
    2332:	f000 82c6 	beq.w	28c2 <juggle(LEDStruct&)+0x902>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2336:	f8d9 3000 	ldr.w	r3, [r9]
    233a:	9308      	str	r3, [sp, #32]
	return ret;
    233c:	9908      	ldr	r1, [sp, #32]
    233e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2346:	fb00 1117 	mls	r1, r0, r7, r1
    234a:	021b      	lsls	r3, r3, #8
    234c:	f44f 708c 	mov.w	r0, #280	; 0x118
    2350:	fb00 f303 	mul.w	r3, r0, r3
    2354:	fb03 f301 	mul.w	r3, r3, r1
    2358:	f3c3 430e 	ubfx	r3, r3, #16, #15
    235c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2360:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2362:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2366:	d503      	bpl.n	2370 <juggle(LEDStruct&)+0x3b0>
    2368:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    236c:	3107      	adds	r1, #7
    236e:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2370:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2372:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2374:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2378:	f818 6000 	ldrb.w	r6, [r8, r0]
    237c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2380:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2384:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2386:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2388:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    238c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2390:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2392:	bf48      	it	mi
    2394:	4276      	negmi	r6, r6
    2396:	4659      	mov	r1, fp
    2398:	4650      	mov	r0, sl
    239a:	b236      	sxth	r6, r6
    239c:	f004 fab2 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    23a0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    23a4:	b29a      	uxth	r2, r3
    23a6:	2396      	movs	r3, #150	; 0x96
    23a8:	fb03 f302 	mul.w	r3, r3, r2
    23ac:	0c1b      	lsrs	r3, r3, #16
    23ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    23b2:	18e1      	adds	r1, r4, r3
    23b4:	5ce2      	ldrb	r2, [r4, r3]
    23b6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    23ba:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    23be:	54e2      	strb	r2, [r4, r3]
    23c0:	784a      	ldrb	r2, [r1, #1]
    23c2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    23c6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    23ca:	704a      	strb	r2, [r1, #1]
    23cc:	788b      	ldrb	r3, [r1, #2]
    23ce:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    23d2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    23d6:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23d8:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    23dc:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23e0:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    23e4:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23e6:	441a      	add	r2, r3
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23e8:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23ea:	b2d2      	uxtb	r2, r2
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23ec:	42b9      	cmp	r1, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    23ee:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    23f2:	f240 8191 	bls.w	2718 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    23f6:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    23fa:	2b00      	cmp	r3, #0
    23fc:	d196      	bne.n	232c <juggle(LEDStruct&)+0x36c>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    23fe:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2402:	2b00      	cmp	r3, #0
    2404:	f000 8192 	beq.w	272c <juggle(LEDStruct&)+0x76c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2408:	f8d9 3000 	ldr.w	r3, [r9]
    240c:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    240e:	990a      	ldr	r1, [sp, #40]	; 0x28
    2410:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2418:	fb00 1117 	mls	r1, r0, r7, r1
    241c:	021b      	lsls	r3, r3, #8
    241e:	f44f 708c 	mov.w	r0, #280	; 0x118
    2422:	fb00 f303 	mul.w	r3, r0, r3
    2426:	fb03 f301 	mul.w	r3, r3, r1
    242a:	f3c3 430e 	ubfx	r3, r3, #16, #15
    242e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2432:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2434:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2436:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    243a:	d599      	bpl.n	2370 <juggle(LEDStruct&)+0x3b0>
    243c:	e794      	b.n	2368 <juggle(LEDStruct&)+0x3a8>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    243e:	2b00      	cmp	r3, #0
    2440:	f000 816a 	beq.w	2718 <juggle(LEDStruct&)+0x758>
    2444:	49b6      	ldr	r1, [pc, #728]	; (2720 <juggle(LEDStruct&)+0x760>)
    2446:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    244a:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 2724 <juggle(LEDStruct&)+0x764>
    244e:	f8df 82d8 	ldr.w	r8, [pc, #728]	; 2728 <juggle(LEDStruct&)+0x768>
    2452:	9102      	str	r1, [sp, #8]
    2454:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    2458:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    245c:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    2460:	9503      	str	r5, [sp, #12]
    2462:	e063      	b.n	252c <juggle(LEDStruct&)+0x56c>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2464:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2468:	2900      	cmp	r1, #0
    246a:	f000 828f 	beq.w	298c <juggle(LEDStruct&)+0x9cc>
    246e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2472:	443b      	add	r3, r7
    2474:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2476:	f8d9 1000 	ldr.w	r1, [r9]
    247a:	910c      	str	r1, [sp, #48]	; 0x30

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    247c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    247e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2480:	bf9c      	itt	ls
    2482:	021b      	lslls	r3, r3, #8
    2484:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2486:	fb0a f101 	mul.w	r1, sl, r1
    248a:	fb03 f301 	mul.w	r3, r3, r1
    248e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2492:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    2496:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2498:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    249c:	d503      	bpl.n	24a6 <juggle(LEDStruct&)+0x4e6>
    249e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    24a2:	3107      	adds	r1, #7
    24a4:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    24a6:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    24a8:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    24aa:	f3c1 0146 	ubfx	r1, r1, #1, #7
    24ae:	f818 6000 	ldrb.w	r6, [r8, r0]
    24b2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    24b6:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    24ba:	041d      	lsls	r5, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    24bc:	b2b6      	uxth	r6, r6
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    24be:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    24c2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    24c6:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    24c8:	bf48      	it	mi
    24ca:	4276      	negmi	r6, r6
    24cc:	4659      	mov	r1, fp
    24ce:	a80b      	add	r0, sp, #44	; 0x2c
    24d0:	b236      	sxth	r6, r6
    24d2:	f004 fa17 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    24d6:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    24da:	2296      	movs	r2, #150	; 0x96
    24dc:	b29b      	uxth	r3, r3
    24de:	fb02 f303 	mul.w	r3, r2, r3
    24e2:	0c1b      	lsrs	r3, r3, #16
    24e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    24e8:	18e1      	adds	r1, r4, r3
    24ea:	5ce2      	ldrb	r2, [r4, r3]
    24ec:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    24f0:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    24f4:	54e2      	strb	r2, [r4, r3]
    24f6:	784a      	ldrb	r2, [r1, #1]
    24f8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    24fc:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2500:	704a      	strb	r2, [r1, #1]
    2502:	788b      	ldrb	r3, [r1, #2]
    2504:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2508:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    250c:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    250e:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    2512:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2516:	f894 322f 	ldrb.w	r3, [r4, #559]	; 0x22f
    251a:	3701      	adds	r7, #1
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    251c:	440a      	add	r2, r1
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    251e:	b2ff      	uxtb	r7, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2520:	b2d2      	uxtb	r2, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2522:	42bb      	cmp	r3, r7
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    2524:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    2528:	f240 80f6 	bls.w	2718 <juggle(LEDStruct&)+0x758>
				if (leds.this_dir) {
    252c:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2530:	2900      	cmp	r1, #0
    2532:	d197      	bne.n	2464 <juggle(LEDStruct&)+0x4a4>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    2534:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2538:	2900      	cmp	r1, #0
    253a:	f000 815d 	beq.w	27f8 <juggle(LEDStruct&)+0x838>
    253e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2542:	443b      	add	r3, r7
    2544:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2546:	f8d9 1000 	ldr.w	r1, [r9]
    254a:	910e      	str	r1, [sp, #56]	; 0x38

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    254c:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    254e:	990e      	ldr	r1, [sp, #56]	; 0x38
    2550:	bf9c      	itt	ls
    2552:	021b      	lslls	r3, r3, #8
    2554:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2556:	fb0a f101 	mul.w	r1, sl, r1
    255a:	fb03 f301 	mul.w	r3, r3, r1
    255e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2562:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2566:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2568:	045e      	lsls	r6, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    256a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    256e:	d59a      	bpl.n	24a6 <juggle(LEDStruct&)+0x4e6>
    2570:	e795      	b.n	249e <juggle(LEDStruct&)+0x4de>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2572:	2b00      	cmp	r3, #0
    2574:	f000 80d0 	beq.w	2718 <juggle(LEDStruct&)+0x758>
    2578:	4b69      	ldr	r3, [pc, #420]	; (2720 <juggle(LEDStruct&)+0x760>)
    257a:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    257e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 2724 <juggle(LEDStruct&)+0x764>
    2582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 2728 <juggle(LEDStruct&)+0x768>
    2586:	9302      	str	r3, [sp, #8]
    2588:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    258c:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    2590:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    2594:	9503      	str	r5, [sp, #12]
    2596:	e05a      	b.n	264e <juggle(LEDStruct&)+0x68e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2598:	f8d9 3000 	ldr.w	r3, [r9]
    259c:	9306      	str	r3, [sp, #24]
	return ret;
    259e:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    25a0:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    25a4:	f44f 708c 	mov.w	r0, #280	; 0x118
    25a8:	0209      	lsls	r1, r1, #8
    25aa:	fb00 f303 	mul.w	r3, r0, r3
    25ae:	fb03 f301 	mul.w	r3, r3, r1
    25b2:	0379      	lsls	r1, r7, #13
    25b4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    25b8:	b299      	uxth	r1, r3
    25ba:	044e      	lsls	r6, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    25bc:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    25c0:	d503      	bpl.n	25ca <juggle(LEDStruct&)+0x60a>
    25c2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    25c6:	3307      	adds	r3, #7
    25c8:	b29b      	uxth	r3, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    25ca:	9d02      	ldr	r5, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    25cc:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    25ce:	f3c3 0346 	ubfx	r3, r3, #1, #7
    25d2:	f818 6000 	ldrb.w	r6, [r8, r0]
    25d6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    25da:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    25de:	040d      	lsls	r5, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    25e0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    25e2:	bf48      	it	mi
    25e4:	425b      	negmi	r3, r3
    25e6:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    25ea:	b21e      	sxth	r6, r3
    25ec:	4650      	mov	r0, sl
    25ee:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    25f2:	9100      	str	r1, [sp, #0]
    25f4:	4659      	mov	r1, fp
    25f6:	f004 f985 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    25fa:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    25fe:	2296      	movs	r2, #150	; 0x96
    2600:	b29b      	uxth	r3, r3
    2602:	fb02 f303 	mul.w	r3, r2, r3
    2606:	0c1b      	lsrs	r3, r3, #16
    2608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    260c:	18e1      	adds	r1, r4, r3
    260e:	5ce2      	ldrb	r2, [r4, r3]
    2610:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2614:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2618:	54e2      	strb	r2, [r4, r3]
    261a:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    261e:	784a      	ldrb	r2, [r1, #1]
    2620:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2624:	704a      	strb	r2, [r1, #1]
    2626:	788b      	ldrb	r3, [r1, #2]
    2628:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    262c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    2630:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2632:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    2636:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    263a:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    263e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2640:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2642:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2644:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    2646:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    2648:	f884 222e 	strb.w	r2, [r4, #558]	; 0x22e
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    264c:	d964      	bls.n	2718 <juggle(LEDStruct&)+0x758>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    264e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2652:	2b00      	cmp	r3, #0
    2654:	d1a0      	bne.n	2598 <juggle(LEDStruct&)+0x5d8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2656:	f8d9 3000 	ldr.w	r3, [r9]
    265a:	9307      	str	r3, [sp, #28]
	return ret;
    265c:	9b07      	ldr	r3, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    265e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2662:	f44f 708c 	mov.w	r0, #280	; 0x118
    2666:	fb00 f303 	mul.w	r3, r0, r3
    266a:	0209      	lsls	r1, r1, #8
    266c:	fb03 f301 	mul.w	r3, r3, r1
    2670:	0379      	lsls	r1, r7, #13
    2672:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    2676:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2678:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    267a:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    267e:	d503      	bpl.n	2688 <juggle(LEDStruct&)+0x6c8>
    2680:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    2684:	3307      	adds	r3, #7
    2686:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2688:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    268a:	9d02      	ldr	r5, [sp, #8]
    268c:	f818 6000 	ldrb.w	r6, [r8, r0]
    2690:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2694:	f3c3 0346 	ubfx	r3, r3, #1, #7
    2698:	fb06 0303 	mla	r3, r6, r3, r0
    269c:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    269e:	040e      	lsls	r6, r1, #16
    26a0:	bf48      	it	mi
    26a2:	425b      	negmi	r3, r3
    26a4:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    26a8:	b21e      	sxth	r6, r3
    26aa:	4650      	mov	r0, sl
    26ac:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    26b0:	9100      	str	r1, [sp, #0]
    26b2:	4659      	mov	r1, fp
    26b4:	f004 f926 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    26b8:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    26bc:	b29b      	uxth	r3, r3
    26be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    26c2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    26c6:	0c1b      	lsrs	r3, r3, #16
    26c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26cc:	18e1      	adds	r1, r4, r3
    26ce:	5ce2      	ldrb	r2, [r4, r3]
    26d0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    26d4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    26d8:	54e2      	strb	r2, [r4, r3]
    26da:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    26de:	784a      	ldrb	r2, [r1, #1]
    26e0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    26e4:	704a      	strb	r2, [r1, #1]
    26e6:	788b      	ldrb	r3, [r1, #2]
    26e8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    26ec:	fa83 f352 	uqadd8	r3, r3, r2
    26f0:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    26f2:	708b      	strb	r3, [r1, #2]
    26f4:	4622      	mov	r2, r4
    26f6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    26f8:	7819      	ldrb	r1, [r3, #0]
    26fa:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    26fe:	7859      	ldrb	r1, [r3, #1]
    2700:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2704:	7899      	ldrb	r1, [r3, #2]
    2706:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    270a:	3303      	adds	r3, #3
    270c:	42ab      	cmp	r3, r5
    270e:	f1a2 0203 	sub.w	r2, r2, #3
    2712:	d1f1      	bne.n	26f8 <juggle(LEDStruct&)+0x738>
    2714:	9503      	str	r5, [sp, #12]
    2716:	e78c      	b.n	2632 <juggle(LEDStruct&)+0x672>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    2718:	b011      	add	sp, #68	; 0x44
    271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    271e:	bf00      	nop
    2720:	00009c50 	.word	0x00009c50
    2724:	1fff9e00 	.word	0x1fff9e00
    2728:	0000a4fc 	.word	0x0000a4fc
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    272c:	f8d9 3000 	ldr.w	r3, [r9]
    2730:	930b      	str	r3, [sp, #44]	; 0x2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    2732:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	return ret;
    2736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    273c:	fb00 3317 	mls	r3, r0, r7, r3
    2740:	0209      	lsls	r1, r1, #8
    2742:	f44f 708c 	mov.w	r0, #280	; 0x118
    2746:	fb00 f101 	mul.w	r1, r0, r1
    274a:	fb03 f301 	mul.w	r3, r3, r1
    274e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    2752:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2756:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2758:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    275a:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    275e:	d503      	bpl.n	2768 <juggle(LEDStruct&)+0x7a8>
    2760:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    2764:	3107      	adds	r1, #7
    2766:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2768:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    276a:	9d02      	ldr	r5, [sp, #8]
    276c:	f818 6000 	ldrb.w	r6, [r8, r0]
    2770:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2774:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2778:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    277c:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    277e:	b2b6      	uxth	r6, r6
    2780:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2784:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2788:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    278a:	bf48      	it	mi
    278c:	4276      	negmi	r6, r6
    278e:	4659      	mov	r1, fp
    2790:	4650      	mov	r0, sl
    2792:	b236      	sxth	r6, r6
    2794:	f004 f8b6 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2798:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    279c:	b29b      	uxth	r3, r3
    279e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    27a2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    27a6:	0c1b      	lsrs	r3, r3, #16
    27a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27ac:	18e1      	adds	r1, r4, r3
    27ae:	5ce2      	ldrb	r2, [r4, r3]
    27b0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    27b4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    27b8:	54e2      	strb	r2, [r4, r3]
    27ba:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    27be:	784a      	ldrb	r2, [r1, #1]
    27c0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    27c4:	704a      	strb	r2, [r1, #1]
    27c6:	788b      	ldrb	r3, [r1, #2]
    27c8:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    27cc:	fa83 f352 	uqadd8	r3, r3, r2
    27d0:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    27d2:	708b      	strb	r3, [r1, #2]
    27d4:	4622      	mov	r2, r4
    27d6:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    27d8:	7819      	ldrb	r1, [r3, #0]
    27da:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    27de:	7859      	ldrb	r1, [r3, #1]
    27e0:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    27e4:	7899      	ldrb	r1, [r3, #2]
    27e6:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    27ea:	3303      	adds	r3, #3
    27ec:	42ab      	cmp	r3, r5
    27ee:	f1a2 0203 	sub.w	r2, r2, #3
    27f2:	d1f1      	bne.n	27d8 <juggle(LEDStruct&)+0x818>
    27f4:	9503      	str	r5, [sp, #12]
    27f6:	e5ef      	b.n	23d8 <juggle(LEDStruct&)+0x418>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    27f8:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    27fc:	443b      	add	r3, r7
    27fe:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2800:	f8d9 1000 	ldr.w	r1, [r9]
    2804:	910f      	str	r1, [sp, #60]	; 0x3c

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    2806:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    2808:	990f      	ldr	r1, [sp, #60]	; 0x3c
    280a:	bf9c      	itt	ls
    280c:	021b      	lslls	r3, r3, #8
    280e:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    2810:	fb0a f101 	mul.w	r1, sl, r1
    2814:	fb03 f301 	mul.w	r3, r3, r1
    2818:	f3c3 430e 	ubfx	r3, r3, #16, #15
    281c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    2820:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    2822:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    2824:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    2828:	d503      	bpl.n	2832 <juggle(LEDStruct&)+0x872>
    282a:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    282e:	3107      	adds	r1, #7
    2830:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    2832:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2834:	9d02      	ldr	r5, [sp, #8]
    2836:	f818 6000 	ldrb.w	r6, [r8, r0]
    283a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    283e:	f3c1 0146 	ubfx	r1, r1, #1, #7
    2842:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2846:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2848:	b2b6      	uxth	r6, r6
    284a:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    284e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    2852:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    2854:	bf48      	it	mi
    2856:	4276      	negmi	r6, r6
    2858:	4659      	mov	r1, fp
    285a:	a80b      	add	r0, sp, #44	; 0x2c
    285c:	b236      	sxth	r6, r6
    285e:	f004 f851 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2862:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2866:	b29b      	uxth	r3, r3
    2868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    286c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2870:	0c1b      	lsrs	r3, r3, #16
    2872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2876:	18e1      	adds	r1, r4, r3
    2878:	5ce2      	ldrb	r2, [r4, r3]
    287a:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    287e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2882:	54e2      	strb	r2, [r4, r3]
    2884:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2888:	784a      	ldrb	r2, [r1, #1]
    288a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    288e:	704a      	strb	r2, [r1, #1]
    2890:	788b      	ldrb	r3, [r1, #2]
    2892:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2896:	fa83 f352 	uqadd8	r3, r3, r2
    289a:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    289c:	708b      	strb	r3, [r1, #2]
    289e:	4622      	mov	r2, r4
    28a0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    28a2:	7819      	ldrb	r1, [r3, #0]
    28a4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    28a8:	7859      	ldrb	r1, [r3, #1]
    28aa:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    28ae:	7899      	ldrb	r1, [r3, #2]
    28b0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    28b4:	3303      	adds	r3, #3
    28b6:	42ab      	cmp	r3, r5
    28b8:	f1a2 0203 	sub.w	r2, r2, #3
    28bc:	d1f1      	bne.n	28a2 <juggle(LEDStruct&)+0x8e2>
    28be:	9503      	str	r5, [sp, #12]
    28c0:	e625      	b.n	250e <juggle(LEDStruct&)+0x54e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    28c2:	f8d9 3000 	ldr.w	r3, [r9]
    28c6:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    28c8:	9909      	ldr	r1, [sp, #36]	; 0x24
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    28ca:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    28ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    28d2:	fb00 1117 	mls	r1, r0, r7, r1
    28d6:	021b      	lsls	r3, r3, #8
    28d8:	f44f 708c 	mov.w	r0, #280	; 0x118
    28dc:	fb00 f303 	mul.w	r3, r0, r3
    28e0:	fb03 f301 	mul.w	r3, r3, r1
    28e4:	f3c3 430e 	ubfx	r3, r3, #16, #15
    28e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    28ec:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    28ee:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    28f2:	d503      	bpl.n	28fc <juggle(LEDStruct&)+0x93c>
    28f4:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    28f8:	3107      	adds	r1, #7
    28fa:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    28fc:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    28fe:	9d02      	ldr	r5, [sp, #8]
    2900:	f818 6000 	ldrb.w	r6, [r8, r0]
    2904:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    2908:	f3c1 0146 	ubfx	r1, r1, #1, #7
    290c:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    2910:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    2912:	b2b6      	uxth	r6, r6
    2914:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    2918:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    291c:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    291e:	bf48      	it	mi
    2920:	4276      	negmi	r6, r6
    2922:	4659      	mov	r1, fp
    2924:	4650      	mov	r0, sl
    2926:	b236      	sxth	r6, r6
    2928:	f003 ffec 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    292c:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    2930:	b29b      	uxth	r3, r3
    2932:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2936:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    293a:	0c1b      	lsrs	r3, r3, #16
    293c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2940:	18e1      	adds	r1, r4, r3
    2942:	5ce2      	ldrb	r2, [r4, r3]
    2944:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    2948:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    294c:	54e2      	strb	r2, [r4, r3]
    294e:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    2952:	784a      	ldrb	r2, [r1, #1]
    2954:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2958:	704a      	strb	r2, [r1, #1]
    295a:	788b      	ldrb	r3, [r1, #2]
    295c:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
    2960:	fa83 f352 	uqadd8	r3, r3, r2
    2964:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2966:	708b      	strb	r3, [r1, #2]
    2968:	4622      	mov	r2, r4
    296a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    296c:	7819      	ldrb	r1, [r3, #0]
    296e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2972:	7859      	ldrb	r1, [r3, #1]
    2974:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2978:	7899      	ldrb	r1, [r3, #2]
    297a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    297e:	3303      	adds	r3, #3
    2980:	429d      	cmp	r5, r3
    2982:	f1a2 0203 	sub.w	r2, r2, #3
    2986:	d1f1      	bne.n	296c <juggle(LEDStruct&)+0x9ac>
    2988:	9503      	str	r5, [sp, #12]
    298a:	e525      	b.n	23d8 <juggle(LEDStruct&)+0x418>
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    298c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2990:	443b      	add	r3, r7
    2992:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2994:	f8d9 1000 	ldr.w	r1, [r9]
    2998:	910d      	str	r1, [sp, #52]	; 0x34

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    299a:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    299c:	990d      	ldr	r1, [sp, #52]	; 0x34
    299e:	bf9c      	itt	ls
    29a0:	021b      	lslls	r3, r3, #8
    29a2:	b29b      	uxthls	r3, r3
}

LIB8STATIC uint16_t beatsin16_halfdown( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    29a4:	fb0a f101 	mul.w	r1, sl, r1
    29a8:	fb03 f301 	mul.w	r3, r3, r1
    29ac:	f3c3 430e 	ubfx	r3, r3, #16, #15
    29b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    29b4:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    29b6:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    29ba:	d503      	bpl.n	29c4 <juggle(LEDStruct&)+0xa04>
    29bc:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    29c0:	3107      	adds	r1, #7
    29c2:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    29c4:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29c6:	9d02      	ldr	r5, [sp, #8]
    29c8:	f818 6000 	ldrb.w	r6, [r8, r0]
    29cc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
    29d0:	f3c1 0146 	ubfx	r1, r1, #1, #7
    29d4:	fb06 0601 	mla	r6, r6, r1, r0

    if( theta & 0x8000 ) y = -y;
    29d8:	041b      	lsls	r3, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    29da:	b2b6      	uxth	r6, r6
    29dc:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    29e0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    29e4:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    29e6:	bf48      	it	mi
    29e8:	4276      	negmi	r6, r6
    29ea:	4659      	mov	r1, fp
    29ec:	a80b      	add	r0, sp, #44	; 0x2c
    29ee:	b236      	sxth	r6, r6
    29f0:	f003 ff88 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    29f4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    29f8:	b29b      	uxth	r3, r3
    29fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    29fe:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2a02:	0c1b      	lsrs	r3, r3, #16
    2a04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2a08:	18e1      	adds	r1, r4, r3
    2a0a:	5ce2      	ldrb	r2, [r4, r3]
    2a0c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    2a10:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2a14:	54e2      	strb	r2, [r4, r3]
    2a16:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    2a1a:	784a      	ldrb	r2, [r1, #1]
    2a1c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    2a20:	704a      	strb	r2, [r1, #1]
    2a22:	788b      	ldrb	r3, [r1, #2]
    2a24:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    2a28:	fa83 f352 	uqadd8	r3, r3, r2
    2a2c:	9d03      	ldr	r5, [sp, #12]
        b = qadd8( b, rhs.b);
    2a2e:	708b      	strb	r3, [r1, #2]
    2a30:	4622      	mov	r2, r4
    2a32:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2a34:	7819      	ldrb	r1, [r3, #0]
    2a36:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    2a3a:	7859      	ldrb	r1, [r3, #1]
    2a3c:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    2a40:	7899      	ldrb	r1, [r3, #2]
    2a42:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    2a46:	3303      	adds	r3, #3
    2a48:	42ab      	cmp	r3, r5
    2a4a:	f1a2 0203 	sub.w	r2, r2, #3
    2a4e:	d1f1      	bne.n	2a34 <juggle(LEDStruct&)+0xa74>
    2a50:	9503      	str	r5, [sp, #12]
    2a52:	e55c      	b.n	250e <juggle(LEDStruct&)+0x54e>

00002a54 <bounce(LEDStruct&)>:
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
	leds.bounce_rainbow = br;
}

void bounce(LEDStruct& leds) {
    2a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { bounce_init(leds); }
    2a58:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
	leds.bounce_rainbow = br;
}

void bounce(LEDStruct& leds) {
    2a5c:	b08b      	sub	sp, #44	; 0x2c
    2a5e:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { bounce_init(leds); }
    2a60:	2a00      	cmp	r2, #0
    2a62:	f000 8127 	beq.w	2cb4 <bounce(LEDStruct&)+0x260>
    2a66:	f200 233a 	addw	r3, r0, #570	; 0x23a
    2a6a:	f890 7276 	ldrb.w	r7, [r0, #630]	; 0x276
    2a6e:	f890 8278 	ldrb.w	r8, [r0, #632]	; 0x278
    2a72:	9303      	str	r3, [sp, #12]
    2a74:	f10d 0924 	add.w	r9, sp, #36	; 0x24

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
    2a78:	2f00      	cmp	r7, #0
    2a7a:	f000 80f8 	beq.w	2c6e <bounce(LEDStruct&)+0x21a>
    2a7e:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    2a82:	1c51      	adds	r1, r2, #1
    2a84:	f884 1279 	strb.w	r1, [r4, #633]	; 0x279
    2a88:	4643      	mov	r3, r8
    2a8a:	214b      	movs	r1, #75	; 0x4b
    2a8c:	4620      	mov	r0, r4
    2a8e:	f003 fe27 	bl	66e0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2a92:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    2a96:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a9a:	4fd2      	ldr	r7, [pc, #840]	; (2de4 <bounce(LEDStruct&)+0x390>)
	else					 { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);
    2a9c:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    2aa0:	9803      	ldr	r0, [sp, #12]
    2aa2:	2114      	movs	r1, #20
    2aa4:	f003 fece 	bl	6844 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
    2aa8:	683b      	ldr	r3, [r7, #0]
    2aaa:	9308      	str	r3, [sp, #32]
	return ret;
    2aac:	9808      	ldr	r0, [sp, #32]

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    2aae:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2ab2:	f894 2239 	ldrb.w	r2, [r4, #569]	; 0x239
    2ab6:	f44f 738c 	mov.w	r3, #280	; 0x118
    2aba:	fb03 f300 	mul.w	r3, r3, r0
    2abe:	0209      	lsls	r1, r1, #8
    2ac0:	fb03 f101 	mul.w	r1, r3, r1
    2ac4:	0e09      	lsrs	r1, r1, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    2ac6:	b2c8      	uxtb	r0, r1
    2ac8:	3a01      	subs	r2, #1
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2aca:	0643      	lsls	r3, r0, #25
    2acc:	b2d2      	uxtb	r2, r2
    2ace:	f140 80c9 	bpl.w	2c64 <bounce(LEDStruct&)+0x210>
        offset = (uint8_t)255 - offset;
    2ad2:	43c3      	mvns	r3, r0
    2ad4:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2ad6:	f003 000f 	and.w	r0, r3, #15
    if( theta & 0x40) secoffset++;
    2ada:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2ae0:	f8df 8308 	ldr.w	r8, [pc, #776]	; 2dec <bounce(LEDStruct&)+0x398>
    2ae4:	111b      	asrs	r3, r3, #4
    2ae6:	005b      	lsls	r3, r3, #1
    2ae8:	eb08 0603 	add.w	r6, r8, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2aec:	f818 3003 	ldrb.w	r3, [r8, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2af0:	7876      	ldrb	r6, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2af2:	fb16 f000 	smulbb	r0, r6, r0
    2af6:	eb03 1320 	add.w	r3, r3, r0, asr #4
    if( theta & 0x80 ) y = -y;
    2afa:	060e      	lsls	r6, r1, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2afc:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    2afe:	bf48      	it	mi
    2b00:	425b      	negmi	r3, r3
    2b02:	b25b      	sxtb	r3, r3
    2b04:	3b80      	subs	r3, #128	; 0x80
    2b06:	b2de      	uxtb	r6, r3
    2b08:	fb02 6606 	mla	r6, r2, r6, r6
    2b0c:	1236      	asrs	r6, r6, #8
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    2b0e:	2301      	movs	r3, #1
    2b10:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else					 { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }

	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
    2b14:	f884 6238 	strb.w	r6, [r4, #568]	; 0x238
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);
    2b18:	4651      	mov	r1, sl
    2b1a:	9300      	str	r3, [sp, #0]
    2b1c:	4648      	mov	r0, r9
    2b1e:	23ff      	movs	r3, #255	; 0xff


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    2b20:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    2b24:	f003 feee 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2b28:	19a3      	adds	r3, r4, r6
    2b2a:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
    2b2e:	f893 223a 	ldrb.w	r2, [r3, #570]	; 0x23a
    2b32:	fa82 f251 	uqadd8	r2, r2, r1
    2b36:	f883 223a 	strb.w	r2, [r3, #570]	; 0x23a
    2b3a:	f893 123b 	ldrb.w	r1, [r3, #571]	; 0x23b
    2b3e:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
    2b42:	fa81 f152 	uqadd8	r1, r1, r2
        g = qadd8( g, rhs.g);
    2b46:	f883 123b 	strb.w	r1, [r3, #571]	; 0x23b
    2b4a:	f893 223c 	ldrb.w	r2, [r3, #572]	; 0x23c
    2b4e:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
    2b52:	fa82 f251 	uqadd8	r2, r2, r1
        b = qadd8( b, rhs.b);
    2b56:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    2b5a:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    2b5e:	b1f3      	cbz	r3, 2b9e <bounce(LEDStruct&)+0x14a>
    2b60:	2600      	movs	r6, #0
    2b62:	9903      	ldr	r1, [sp, #12]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    2b64:	46b1      	mov	r9, r6
    2b66:	e001      	b.n	2b6c <bounce(LEDStruct&)+0x118>
    2b68:	f201 213a 	addw	r1, r1, #570	; 0x23a
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
    2b6c:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
    2b70:	4433      	add	r3, r6
    2b72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2b76:	18e2      	adds	r2, r4, r3
    2b78:	f804 9003 	strb.w	r9, [r4, r3]
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
    2b7c:	4610      	mov	r0, r2
        g = (colorcode >>  8) & 0xFF;
    2b7e:	f882 9001 	strb.w	r9, [r2, #1]
        b = (colorcode >>  0) & 0xFF;
    2b82:	f882 9002 	strb.w	r9, [r2, #2]
    2b86:	22ff      	movs	r2, #255	; 0xff
    2b88:	f003 fe5e 	bl	6848 <nblend(CRGB&, CRGB const&, unsigned char)>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    2b8c:	3601      	adds	r6, #1
    2b8e:	f894 3239 	ldrb.w	r3, [r4, #569]	; 0x239
    2b92:	b2f6      	uxtb	r6, r6
    2b94:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    2b98:	42b3      	cmp	r3, r6
    2b9a:	4421      	add	r1, r4
    2b9c:	d8e4      	bhi.n	2b68 <bounce(LEDStruct&)+0x114>
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - 1);	}
    2b9e:	f8df 9250 	ldr.w	r9, [pc, #592]	; 2df0 <bounce(LEDStruct&)+0x39c>
    2ba2:	f8d9 3000 	ldr.w	r3, [r9]
    2ba6:	07d8      	lsls	r0, r3, #31
    2ba8:	d51a      	bpl.n	2be0 <bounce(LEDStruct&)+0x18c>
    2baa:	4e8f      	ldr	r6, [pc, #572]	; (2de8 <bounce(LEDStruct&)+0x394>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bac:	683b      	ldr	r3, [r7, #0]
    2bae:	9307      	str	r3, [sp, #28]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2bb0:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    2bb4:	9b07      	ldr	r3, [sp, #28]
    2bb6:	1a5b      	subs	r3, r3, r1
    2bb8:	429a      	cmp	r2, r3
    2bba:	d920      	bls.n	2bfe <bounce(LEDStruct&)+0x1aa>
	fadeToBlackBy(leds.bounce, 20, leds.juggle_fade);

	leds.bounce_pos = beatsin8(leds.juggle_beat, 0, leds.bounce_length - 1);
	leds.bounce[leds.bounce_pos] += ColorFromPalette(leds.current_palette, leds.juggle_index);

	for (uint8_t i = 0; i < leds.bounce_length; i++) {
    2bbc:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2bbe:	781a      	ldrb	r2, [r3, #0]
    2bc0:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    2bc4:	785a      	ldrb	r2, [r3, #1]
    2bc6:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    2bca:	789a      	ldrb	r2, [r3, #2]
    2bcc:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    2bd0:	3303      	adds	r3, #3
    2bd2:	429d      	cmp	r5, r3
    2bd4:	f1a4 0403 	sub.w	r4, r4, #3
    2bd8:	d1f1      	bne.n	2bbe <bounce(LEDStruct&)+0x16a>
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - 1);	}

	strip_sync(leds);
}
    2bda:	b00b      	add	sp, #44	; 0x2c
    2bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - 1);	}
    2be0:	4648      	mov	r0, r9
    2be2:	f004 fda7 	bl	7734 <__cxa_guard_acquire>
    2be6:	2800      	cmp	r0, #0
    2be8:	f040 8106 	bne.w	2df8 <bounce(LEDStruct&)+0x3a4>
    2bec:	4e7e      	ldr	r6, [pc, #504]	; (2de8 <bounce(LEDStruct&)+0x394>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	9307      	str	r3, [sp, #28]
    2bf2:	e896 0006 	ldmia.w	r6, {r1, r2}
	return ret;
    2bf6:	9b07      	ldr	r3, [sp, #28]
    2bf8:	1a5b      	subs	r3, r3, r1
    2bfa:	4293      	cmp	r3, r2
    2bfc:	d3de      	bcc.n	2bbc <bounce(LEDStruct&)+0x168>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2bfe:	683b      	ldr	r3, [r7, #0]
    2c00:	9306      	str	r3, [sp, #24]
	return ret;
    2c02:	9a06      	ldr	r2, [sp, #24]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c04:	683b      	ldr	r3, [r7, #0]
    2c06:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2c08:	9909      	ldr	r1, [sp, #36]	; 0x24
    2c0a:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
    2c0e:	6032      	str	r2, [r6, #0]
    2c10:	f44f 728c 	mov.w	r2, #280	; 0x118
    2c14:	fb02 f201 	mul.w	r2, r2, r1
    2c18:	021b      	lsls	r3, r3, #8
    2c1a:	fb03 f202 	mul.w	r2, r3, r2
    2c1e:	0e12      	lsrs	r2, r2, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    2c20:	b2d3      	uxtb	r3, r2
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    2c22:	0659      	lsls	r1, r3, #25
    2c24:	f100 80d5 	bmi.w	2dd2 <bounce(LEDStruct&)+0x37e>
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2c28:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2c2c:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    2c30:	1103      	asrs	r3, r0, #4
    2c32:	005b      	lsls	r3, r3, #1
    2c34:	eb08 0003 	add.w	r0, r8, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2c38:	f818 3003 	ldrb.w	r3, [r8, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    2c3c:	7840      	ldrb	r0, [r0, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    2c3e:	fb10 f101 	smulbb	r1, r0, r1
    2c42:	eb03 1321 	add.w	r3, r3, r1, asr #4
    2c46:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    2c48:	0612      	lsls	r2, r2, #24
    2c4a:	bf48      	it	mi
    2c4c:	425b      	negmi	r3, r3
    2c4e:	b25b      	sxtb	r3, r3

    y += 128;
    2c50:	3b80      	subs	r3, #128	; 0x80
    2c52:	b2db      	uxtb	r3, r3
    2c54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2c58:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    2c5c:	121b      	asrs	r3, r3, #8
    2c5e:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    2c62:	e7ab      	b.n	2bbc <bounce(LEDStruct&)+0x168>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2c64:	f000 033f 	and.w	r3, r0, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2c68:	f000 000f 	and.w	r0, r0, #15
    2c6c:	e738      	b.n	2ae0 <bounce(LEDStruct&)+0x8c>

void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }

	if (leds.bounce_rainbow) { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff); }
	else					 { fill_palette(leds.led_data, ONE_SIDE, leds.rainbow_index++, leds.rainbow_diff, leds.current_palette, 255, LINEARBLEND); }
    2c6e:	f894 7279 	ldrb.w	r7, [r4, #633]	; 0x279
    2c72:	1c7b      	adds	r3, r7, #1
    2c74:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    2c78:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    2c7c:	4626      	mov	r6, r4
    2c7e:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
    2c82:	f04f 0b01 	mov.w	fp, #1
    2c86:	463a      	mov	r2, r7
    2c88:	23ff      	movs	r3, #255	; 0xff
    2c8a:	4651      	mov	r1, sl
    2c8c:	f8cd b000 	str.w	fp, [sp]
    2c90:	4648      	mov	r0, r9
    2c92:	f003 fe37 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2c96:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
        g = rhs.g;
    2c9a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
        b = rhs.b;
    2c9e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ca2:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    2ca4:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    2ca6:	70b3      	strb	r3, [r6, #2]
    2ca8:	3603      	adds	r6, #3
        colorIndex += incIndex;
    2caa:	4447      	add	r7, r8
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    2cac:	42ae      	cmp	r6, r5
        L[i] = ColorFromPalette( pal, colorIndex, brightness, blendType);
        colorIndex += incIndex;
    2cae:	b2ff      	uxtb	r7, r7
template <typename PALETTE>
void fill_palette(CRGB* L, uint16_t N, uint8_t startIndex, uint8_t incIndex,
                  const PALETTE& pal, uint8_t brightness, TBlendType blendType)
{
    uint8_t colorIndex = startIndex;
    for( uint16_t i = 0; i < N; i++) {
    2cb0:	d1e9      	bne.n	2c86 <bounce(LEDStruct&)+0x232>
    2cb2:	e6f2      	b.n	2a9a <bounce(LEDStruct&)+0x46>
    2cb4:	f8df c13c 	ldr.w	ip, [pc, #316]	; 2df4 <bounce(LEDStruct&)+0x3a0>

void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10,21), uint8_t bsb = random8(8,20), uint8_t jb = random8(80,120), uint8_t rd = random8(1,7)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
    2cb8:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
    2cbc:	f8bc 3000 	ldrh.w	r3, [ip]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    2cc0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    2cc4:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    2cc8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2ccc:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2cd0:	3519      	adds	r5, #25
    2cd2:	b2ad      	uxth	r5, r5
    2cd4:	eb05 2745 	add.w	r7, r5, r5, lsl #9
    2cd8:	eb05 0787 	add.w	r7, r5, r7, lsl #2
    2cdc:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    2ce0:	3719      	adds	r7, #25
    2ce2:	b2bf      	uxth	r7, r7
    2ce4:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    2ce8:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    2cec:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    2cf0:	3619      	adds	r6, #25
    2cf2:	b2b6      	uxth	r6, r6
    2cf4:	eb06 2a46 	add.w	sl, r6, r6, lsl #9
    2cf8:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    2cfc:	f50a 5a58 	add.w	sl, sl, #13824	; 0x3600
    2d00:	f10a 0a19 	add.w	sl, sl, #25
    2d04:	fa1f fa8a 	uxth.w	sl, sl
    2d08:	eb0a 234a 	add.w	r3, sl, sl, lsl #9
    2d0c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    2d10:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2d14:	3319      	adds	r3, #25
    2d16:	b29b      	uxth	r3, r3
    2d18:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    2d1c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2d20:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    2d24:	3119      	adds	r1, #25
    2d26:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d28:	eb01 2e11 	add.w	lr, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2d2c:	fa5f fe8e 	uxtb.w	lr, lr
    2d30:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
}



void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10,21), uint8_t bsb = random8(8,20), uint8_t jb = random8(80,120), uint8_t rd = random8(1,7)) {
	leds.mode_initialized = 1;
    2d34:	f04f 0801 	mov.w	r8, #1
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
    2d38:	f04f 0b17 	mov.w	fp, #23
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d3c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2d40:	ea4f 1eee 	mov.w	lr, lr, asr #7
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    2d44:	f10d 0924 	add.w	r9, sp, #36	; 0x24
    2d48:	f200 203a 	addw	r0, r0, #570	; 0x23a
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d4c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2d50:	b2f6      	uxtb	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2d52:	44c6      	add	lr, r8
}



void bounce_init(LEDStruct& leds, uint8_t jf = random8(180, 220), bool br = random8(2), uint8_t bl = random8(10,21), uint8_t bsb = random8(8,20), uint8_t jb = random8(80,120), uint8_t rd = random8(1,7)) {
	leds.mode_initialized = 1;
    2d54:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    2d58:	f884 8229 	strb.w	r8, [r4, #553]	; 0x229
	leds.mode_type = BOUNCE;
    2d5c:	f884 b22c 	strb.w	fp, [r4, #556]	; 0x22c
    2d60:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    2d64:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2d68:	f8ac 1000 	strh.w	r1, [ip]
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);
    2d6c:	464a      	mov	r2, r9
    2d6e:	2114      	movs	r1, #20
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d70:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    2d74:	eb0a 2a1a 	add.w	sl, sl, sl, lsr #8
    2d78:	fa5f fb83 	uxtb.w	fp, r3
    2d7c:	9003      	str	r0, [sp, #12]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    2d7e:	fa5f f88e 	uxtb.w	r8, lr
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2d82:	b2ed      	uxtb	r5, r5
    2d84:	f003 fc9c 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
    2d88:	fa5f fa8a 	uxtb.w	sl, sl

	leds.juggle_fade   = jf;
	leds.bounce_length = bl;
    2d8c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
	leds.juggle_beat   = jb;
    2d90:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
    2d94:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
    2d98:	eb05 0285 	add.w	r2, r5, r5, lsl #2
	leds.bounce_length = bl;
    2d9c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    2da0:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.juggle_beat   = jb;
    2da4:	1140      	asrs	r0, r0, #5
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
    2da6:	1189      	asrs	r1, r1, #6
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
    2da8:	1152      	asrs	r2, r2, #5
	leds.bounce_length = bl;
    2daa:	121b      	asrs	r3, r3, #8
	leds.bounce_start_beat = bsb;
	leds.bounce_rainbow = br;
}

void bounce(LEDStruct& leds) {
	if (!leds.mode_initialized) { bounce_init(leds); }
    2dac:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
	leds.bounce_length = bl;
	leds.juggle_beat   = jb;
    2db0:	3050      	adds	r0, #80	; 0x50
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
    2db2:	3108      	adds	r1, #8
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
    2db4:	3a4c      	subs	r2, #76	; 0x4c
	leds.bounce_length = bl;
    2db6:	330a      	adds	r3, #10
	leds.juggle_beat   = jb;
	leds.rainbow_diff  = rd;
    2db8:	f884 8278 	strb.w	r8, [r4, #632]	; 0x278
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
	leds.bounce_length = bl;
	leds.juggle_beat   = jb;
    2dbc:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
	leds.rainbow_diff  = rd;
	leds.bounce_start_beat = bsb;
    2dc0:	f884 1237 	strb.w	r1, [r4, #567]	; 0x237
	leds.bounce_rainbow = br;
    2dc4:	f884 7276 	strb.w	r7, [r4, #630]	; 0x276
	leds.use_palette = 1;
	leds.mode_type = BOUNCE;
	leds.use_full_range = 0;
	fill_solid(leds.bounce, 20, CRGB::Black);

	leds.juggle_fade   = jf;
    2dc8:	f884 2231 	strb.w	r2, [r4, #561]	; 0x231
	leds.bounce_length = bl;
    2dcc:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    2dd0:	e652      	b.n	2a78 <bounce(LEDStruct&)+0x24>
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    2dd2:	43db      	mvns	r3, r3
    2dd4:	b2db      	uxtb	r3, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    2dd6:	f003 010f 	and.w	r1, r3, #15
    if( theta & 0x40) secoffset++;
    2dda:	3101      	adds	r1, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    2ddc:	f003 003f 	and.w	r0, r3, #63	; 0x3f
    2de0:	e726      	b.n	2c30 <bounce(LEDStruct&)+0x1dc>
    2de2:	bf00      	nop
    2de4:	1fff9e00 	.word	0x1fff9e00
    2de8:	1fff9418 	.word	0x1fff9418
    2dec:	0000c29c 	.word	0x0000c29c
    2df0:	1fff944c 	.word	0x1fff944c
    2df4:	1fff874a 	.word	0x1fff874a
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2df8:	683b      	ldr	r3, [r7, #0]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    2dfa:	4e05      	ldr	r6, [pc, #20]	; (2e10 <bounce(LEDStruct&)+0x3bc>)
    2dfc:	9305      	str	r3, [sp, #20]
	return ret;
    2dfe:	9b05      	ldr	r3, [sp, #20]
    2e00:	6033      	str	r3, [r6, #0]
    2e02:	2319      	movs	r3, #25
	for (uint8_t i = 0; i < leds.bounce_length; i++) {
		leds.led_data[leds.bounce_start + i] = CRGB::Black;
		nblend(leds.led_data[leds.bounce_start + i], leds.bounce[i], 255);
	}

	EVERY_N_MILLIS(25) { leds.bounce_start = beatsin8(leds.bounce_start_beat, 0, ONE_SIDE - 1);	}
    2e04:	4648      	mov	r0, r9
    2e06:	6073      	str	r3, [r6, #4]
    2e08:	f004 fc9a 	bl	7740 <__cxa_guard_release>
    2e0c:	e6ef      	b.n	2bee <bounce(LEDStruct&)+0x19a>
    2e0e:	bf00      	nop
    2e10:	1fff9418 	.word	0x1fff9418

00002e14 <rainbow_march(LEDStruct&)>:
}


void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2e14:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

    if (DEBUG) { LEDDebug(leds); }
}


void rainbow_march(LEDStruct& leds) {
    2e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e1c:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    2e1e:	2b00      	cmp	r3, #0
    2e20:	d06b      	beq.n	2efa <rainbow_march(LEDStruct&)+0xe6>

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2e22:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    2e26:	bb43      	cbnz	r3, 2e7a <rainbow_march(LEDStruct&)+0x66>
    2e28:	f894 2279 	ldrb.w	r2, [r4, #633]	; 0x279
    2e2c:	f894 3277 	ldrb.w	r3, [r4, #631]	; 0x277
    2e30:	441a      	add	r2, r3

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2e32:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2e36:	b2d2      	uxtb	r2, r2
    2e38:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2e3c:	bb4b      	cbnz	r3, 2e92 <rainbow_march(LEDStruct&)+0x7e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2e3e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    2e42:	2b00      	cmp	r3, #0
    2e44:	d151      	bne.n	2eea <rainbow_march(LEDStruct&)+0xd6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    2e46:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    2e4a:	214b      	movs	r1, #75	; 0x4b
    2e4c:	4620      	mov	r0, r4
    2e4e:	f003 fc47 	bl	66e0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2e52:	4620      	mov	r0, r4
    2e54:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2e58:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2e5a:	7802      	ldrb	r2, [r0, #0]
    2e5c:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2e60:	7842      	ldrb	r2, [r0, #1]
    2e62:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    2e66:	7882      	ldrb	r2, [r0, #2]
    2e68:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2e6c:	3003      	adds	r0, #3
    2e6e:	4288      	cmp	r0, r1
    2e70:	f1a3 0303 	sub.w	r3, r3, #3
    2e74:	d1f1      	bne.n	2e5a <rainbow_march(LEDStruct&)+0x46>
    2e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2e7a:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    2e7e:	f894 2277 	ldrb.w	r2, [r4, #631]	; 0x277
    2e82:	1a9a      	subs	r2, r3, r2

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2e84:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
void rainbow_march(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }

	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    2e88:	b2d2      	uxtb	r2, r2
    2e8a:	f884 2279 	strb.w	r2, [r4, #633]	; 0x279

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
    2e8e:	2b00      	cmp	r3, #0
    2e90:	d0d5      	beq.n	2e3e <rainbow_march(LEDStruct&)+0x2a>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		// Apply rainbow to half of one side of the LEDs.  No use_full_range for this one
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    2e92:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    2e96:	2125      	movs	r1, #37	; 0x25
    2e98:	4620      	mov	r0, r4
    2e9a:	f003 fc21 	bl	66e0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    2e9e:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    2ea2:	4623      	mov	r3, r4
    2ea4:	4621      	mov	r1, r4
    2ea6:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2ea8:	7810      	ldrb	r0, [r2, #0]
    2eaa:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    2eae:	7850      	ldrb	r0, [r2, #1]
    2eb0:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    2eb4:	7890      	ldrb	r0, [r2, #2]
    2eb6:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    2eba:	3203      	adds	r2, #3

		// Copy those to the other half
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    2ebc:	42aa      	cmp	r2, r5
    2ebe:	f1a1 0103 	sub.w	r1, r1, #3
    2ec2:	d1f1      	bne.n	2ea8 <rainbow_march(LEDStruct&)+0x94>
    2ec4:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    2ec8:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    2eca:	7802      	ldrb	r2, [r0, #0]
    2ecc:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    2ed0:	7842      	ldrb	r2, [r0, #1]
    2ed2:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    2ed6:	7882      	ldrb	r2, [r0, #2]
    2ed8:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    2edc:	3003      	adds	r0, #3
    2ede:	4288      	cmp	r0, r1
    2ee0:	f1a3 0303 	sub.w	r3, r3, #3
    2ee4:	d1f1      	bne.n	2eca <rainbow_march(LEDStruct&)+0xb6>
    2ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2eea:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    2eee:	4620      	mov	r0, r4
    2ef0:	2196      	movs	r1, #150	; 0x96
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }

		// Duplicate on the other side of the strip
		strip_sync(leds);
	}
}
    2ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	// Increase the start index by the rotation (essentially speed)
	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	// Apply rainbow to LEDs
	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    2ef6:	f003 bbf3 	b.w	66e0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2efa:	4927      	ldr	r1, [pc, #156]	; (2f98 <rainbow_march(LEDStruct&)+0x184>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    2efc:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    2f00:	880b      	ldrh	r3, [r1, #0]
    2f02:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2f06:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f0a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2f0e:	3319      	adds	r3, #25
    2f10:	b29b      	uxth	r3, r3
    2f12:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2f16:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2f1a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    2f1e:	3219      	adds	r2, #25
    2f20:	b292      	uxth	r2, r2
    2f22:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    2f26:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2f2a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    2f2e:	3519      	adds	r5, #25
    2f30:	b2ad      	uxth	r5, r5
    2f32:	eb05 2645 	add.w	r6, r5, r5, lsl #9
    2f36:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f3a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    2f3e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f42:	f506 5658 	add.w	r6, r6, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2f46:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    2f48:	b2d2      	uxtb	r2, r2
    2f4a:	3619      	adds	r6, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2f4c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    leds.rainbow_rot    = rr;
    2f50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2f54:	b2b6      	uxth	r6, r6

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2f56:	121b      	asrs	r3, r3, #8
    leds.rainbow_rot    = rr;
    2f58:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2f5a:	eb06 2716 	add.w	r7, r6, r6, lsr #8

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2f5e:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    2f60:	3201      	adds	r2, #1
    2f62:	eb05 2515 	add.w	r5, r5, r5, lsr #8
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2f66:	f3c7 17c0 	ubfx	r7, r7, #7, #1
	leds.this_dir = td;
    2f6a:	f3c5 15c0 	ubfx	r5, r5, #7, #1

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    2f6e:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
    leds.rainbow_rot    = rr;
    2f72:	f880 2277 	strb.w	r2, [r0, #631]	; 0x277
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2f76:	2301      	movs	r3, #1
	leds.mode_type = RAINBOW_MARCH;
    2f78:	2205      	movs	r2, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    2f7a:	f880 71c4 	strb.w	r7, [r0, #452]	; 0x1c4
	leds.this_dir = td;
    2f7e:	f880 51c5 	strb.w	r5, [r0, #453]	; 0x1c5
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    2f82:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    2f86:	f880 327a 	strb.w	r3, [r0, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    2f8a:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    2f8e:	800e      	strh	r6, [r1, #0]

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    2f90:	f7fe fb88 	bl	16a4 <LEDDebug(LEDStruct&)>
    2f94:	e745      	b.n	2e22 <rainbow_march(LEDStruct&)+0xe>
    2f96:	bf00      	nop
    2f98:	1fff874a 	.word	0x1fff874a

00002f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2f9e:	f890 422b 	ldrb.w	r4, [r0, #555]	; 0x22b
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2fa2:	f89d 6014 	ldrb.w	r6, [sp, #20]
    2fa6:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
    2faa:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2fac:	3c0d      	subs	r4, #13
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2fae:	2508      	movs	r5, #8
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2fb0:	42bc      	cmp	r4, r7
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    2fb2:	f880 522c 	strb.w	r5, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    2fb6:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    2fba:	f89d 5018 	ldrb.w	r5, [sp, #24]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    2fbe:	d940      	bls.n	3042 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa6>
	else { leds.use_palette = 0; }
    2fc0:	2300      	movs	r3, #0

	leds.fire_sparking		= fs;
    2fc2:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    2fc6:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    2fca:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    2fce:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    2fd2:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else { leds.use_palette = 0; }
    2fd6:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
	leds.fire_cooling		= fc;
	leds.fire_sync			= fy;
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    2fda:	2a00      	cmp	r2, #0
    2fdc:	d13f      	bne.n	305e <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    2fde:	234b      	movs	r3, #75	; 0x4b
    2fe0:	f880 2316 	strb.w	r2, [r0, #790]	; 0x316
    2fe4:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315

	if (!leds.fire_sync) {
    2fe8:	bb51      	cbnz	r1, 3040 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa4>
    2fea:	4c20      	ldr	r4, [pc, #128]	; (306c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    2fec:	8823      	ldrh	r3, [r4, #0]
    2fee:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    2ff2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2ff6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    2ffa:	3319      	adds	r3, #25
    2ffc:	b29b      	uxth	r3, r3
    2ffe:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3002:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3006:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    300a:	3219      	adds	r2, #25
    300c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    300e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    3012:	eb02 2112 	add.w	r1, r2, r2, lsr #8
		leds.fire_sparking2 = fs - 10 + random8(21);
    3016:	b2db      	uxtb	r3, r3
		leds.fire_cooling2	= fc - 10 + random8(21);
    3018:	b2c9      	uxtb	r1, r1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    301a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		leds.fire_cooling2	= fc - 10 + random8(21);
    301e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3022:	3e0a      	subs	r6, #10
		leds.fire_cooling2	= fc - 10 + random8(21);
    3024:	3d0a      	subs	r5, #10
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3026:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		leds.fire_cooling2	= fc - 10 + random8(21);
    302a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    302e:	eb06 2323 	add.w	r3, r6, r3, asr #8
		leds.fire_cooling2	= fc - 10 + random8(21);
    3032:	eb05 2121 	add.w	r1, r5, r1, asr #8
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	else if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	if (!leds.fire_sync) {
		leds.fire_sparking2 = fs - 10 + random8(21);
    3036:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    303a:	8022      	strh	r2, [r4, #0]
		leds.fire_cooling2	= fc - 10 + random8(21);
    303c:	f880 127e 	strb.w	r1, [r0, #638]	; 0x27e
    3040:	bdf0      	pop	{r4, r5, r6, r7, pc}
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    3042:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
	else { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    3046:	f880 627b 	strb.w	r6, [r0, #635]	; 0x27b
	leds.fire_cooling		= fc;
    304a:	f880 527d 	strb.w	r5, [r0, #637]	; 0x27d
	leds.fire_sync			= fy;
    304e:	f880 1317 	strb.w	r1, [r0, #791]	; 0x317
	leds.fire_mirror		= fm;
    3052:	f880 2318 	strb.w	r2, [r0, #792]	; 0x318
	leds.torch_diff			= td;
    3056:	f880 e31a 	strb.w	lr, [r0, #794]	; 0x31a
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    305a:	2a00      	cmp	r2, #0
    305c:	d0c2      	beq.n	2fe4 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x48>
    305e:	2325      	movs	r3, #37	; 0x25
    3060:	f880 3315 	strb.w	r3, [r0, #789]	; 0x315
    3064:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    3068:	e7be      	b.n	2fe8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
    306a:	bf00      	nop
    306c:	1fff874a 	.word	0x1fff874a

00003070 <fire(LEDStruct&)>:
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    3070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3074:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3078:	4dcd      	ldr	r5, [pc, #820]	; (33b0 <fire(LEDStruct&)+0x340>)
		leds.fire_cooling2	= fc - 10 + random8(21);
	}
}


void fire(LEDStruct& leds) {
    307a:	b086      	sub	sp, #24
    307c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    307e:	2b00      	cmp	r3, #0
    3080:	f000 821d 	beq.w	34be <fire(LEDStruct&)+0x44e>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    3084:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3088:	2b00      	cmp	r3, #0
    308a:	f000 82ca 	beq.w	3622 <fire(LEDStruct&)+0x5b2>
    308e:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3092:	882a      	ldrh	r2, [r5, #0]
    3094:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3098:	004f      	lsls	r7, r1, #1
    309a:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
    309e:	fb97 f7f3 	sdiv	r7, r7, r3
    30a2:	3702      	adds	r7, #2
    30a4:	b2ff      	uxtb	r7, r7
    30a6:	44a6      	add	lr, r4
    30a8:	f204 267e 	addw	r6, r4, #638	; 0x27e
    30ac:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    30b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    30b4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    30b8:	3219      	adds	r2, #25
    30ba:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    30bc:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    30c0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    30c4:	b2c9      	uxtb	r1, r1
    30c6:	fb11 f107 	smulbb	r1, r1, r7
    30ca:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    30ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    30d2:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    30d4:	7031      	strb	r1, [r6, #0]
void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    30d6:	d1e9      	bne.n	30ac <fire(LEDStruct&)+0x3c>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    30d8:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    30dc:	802a      	strh	r2, [r5, #0]
    30de:	2e00      	cmp	r6, #0
    30e0:	f000 810e 	beq.w	3300 <fire(LEDStruct&)+0x290>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    30e4:	f1a3 0e03 	sub.w	lr, r3, #3
    30e8:	f1be 0f01 	cmp.w	lr, #1
    30ec:	f04f 0c01 	mov.w	ip, #1
    30f0:	dd1a      	ble.n	3128 <fire(LEDStruct&)+0xb8>
    30f2:	f203 207b 	addw	r0, r3, #635	; 0x27b
    30f6:	f203 277d 	addw	r7, r3, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    30fa:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 33b4 <fire(LEDStruct&)+0x344>
    30fe:	4420      	add	r0, r4
    3100:	4427      	add	r7, r4
    3102:	f204 287f 	addw	r8, r4, #639	; 0x27f
    3106:	7801      	ldrb	r1, [r0, #0]
    3108:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    310c:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    3110:	fb89 a601 	smull	sl, r6, r9, r1
    3114:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    3118:	4580      	cmp	r8, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    311a:	f807 1d01 	strb.w	r1, [r7, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    311e:	d1f2      	bne.n	3106 <fire(LEDStruct&)+0x96>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
    3120:	f1bc 0f00 	cmp.w	ip, #0
    3124:	f000 80d3 	beq.w	32ce <fire(LEDStruct&)+0x25e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3128:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    312c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3130:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3134:	3219      	adds	r2, #25
    3136:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    3138:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    313c:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3140:	802a      	strh	r2, [r5, #0]
    3142:	b2c9      	uxtb	r1, r1
    3144:	428e      	cmp	r6, r1
    3146:	489a      	ldr	r0, [pc, #616]	; (33b0 <fire(LEDStruct&)+0x340>)
    3148:	d926      	bls.n	3198 <fire(LEDStruct&)+0x128>
    314a:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    314e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3152:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3156:	3219      	adds	r2, #25
    3158:	b292      	uxth	r2, r2
    315a:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    315e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3162:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3166:	3619      	adds	r6, #25
    3168:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    316a:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    316e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3172:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3174:	b2d2      	uxtb	r2, r2
    3176:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    317a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    317e:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3182:	ebc1 1147 	rsb	r1, r1, r7, lsl #5
    3186:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3188:	8006      	strh	r6, [r0, #0]
    318a:	3960      	subs	r1, #96	; 0x60
    318c:	f892 027f 	ldrb.w	r0, [r2, #639]	; 0x27f
    3190:	fa80 f051 	uqadd8	r0, r0, r1
    3194:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}

	if (!leds.fire_sync) {
    3198:	f1bc 0f00 	cmp.w	ip, #0
    319c:	d112      	bne.n	31c4 <fire(LEDStruct&)+0x154>
    319e:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    31a0:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    31a4:	4982      	ldr	r1, [pc, #520]	; (33b0 <fire(LEDStruct&)+0x340>)
    31a6:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    31aa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    31ae:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    31b2:	3219      	adds	r2, #25
    31b4:	b292      	uxth	r2, r2
    31b6:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    31ba:	b2c0      	uxtb	r0, r0
    31bc:	4286      	cmp	r6, r0
    31be:	802a      	strh	r2, [r5, #0]
    31c0:	f200 80cd 	bhi.w	335e <fire(LEDStruct&)+0x2ee>
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    31c4:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    31c8:	2a00      	cmp	r2, #0
    31ca:	d15f      	bne.n	328c <fire(LEDStruct&)+0x21c>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    31cc:	2b00      	cmp	r3, #0
    31ce:	f000 8146 	beq.w	345e <fire(LEDStruct&)+0x3ee>
    31d2:	f204 277e 	addw	r7, r4, #638	; 0x27e
    31d6:	4690      	mov	r8, r2
    31d8:	46b9      	mov	r9, r7
    31da:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    31dc:	3b01      	subs	r3, #1
    31de:	ebc8 0503 	rsb	r5, r8, r3
    31e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    31e6:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    31ea:	4630      	mov	r0, r6
    31ec:	f003 fb68 	bl	68c0 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    31f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    31f4:	5563      	strb	r3, [r4, r5]
    31f6:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    31f8:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    31fc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3200:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3202:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3204:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3208:	f108 0801 	add.w	r8, r8, #1
    320c:	4543      	cmp	r3, r8
    320e:	dce5      	bgt.n	31dc <fire(LEDStruct&)+0x16c>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3210:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    3214:	b30a      	cbz	r2, 325a <fire(LEDStruct&)+0x1ea>
		if (leds.this_dir) {
    3216:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    321a:	2a00      	cmp	r2, #0
    321c:	f040 81b8 	bne.w	3590 <fire(LEDStruct&)+0x520>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3220:	4690      	mov	r8, r2
    3222:	2b00      	cmp	r3, #0
    3224:	f000 81f7 	beq.w	3616 <fire(LEDStruct&)+0x5a6>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    3228:	eb08 0503 	add.w	r5, r8, r3
    322c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    3230:	4630      	mov	r0, r6
    3232:	f003 fb45 	bl	68c0 <HeatColor(unsigned char)>
    3236:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    323a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    323e:	54e2      	strb	r2, [r4, r3]
    3240:	4423      	add	r3, r4
        g = rhs.g;
    3242:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    3246:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    324a:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    324c:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    324e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3252:	f108 0801 	add.w	r8, r8, #1
    3256:	4543      	cmp	r3, r8
    3258:	dce6      	bgt.n	3228 <fire(LEDStruct&)+0x1b8>
    325a:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    325e:	2a00      	cmp	r2, #0
    3260:	f000 80aa 	beq.w	33b8 <fire(LEDStruct&)+0x348>
    3264:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3268:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    326a:	781a      	ldrb	r2, [r3, #0]
    326c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3270:	785a      	ldrb	r2, [r3, #1]
    3272:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3276:	789a      	ldrb	r2, [r3, #2]
    3278:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    327c:	3303      	adds	r3, #3
    327e:	4299      	cmp	r1, r3
    3280:	f1a4 0403 	sub.w	r4, r4, #3
    3284:	d1f1      	bne.n	326a <fire(LEDStruct&)+0x1fa>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3286:	b006      	add	sp, #24
    3288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    328c:	2b00      	cmp	r3, #0
    328e:	f000 81bf 	beq.w	3610 <fire(LEDStruct&)+0x5a0>
    3292:	f204 277e 	addw	r7, r4, #638	; 0x27e
    3296:	46b9      	mov	r9, r7
    3298:	4625      	mov	r5, r4
    329a:	f04f 0800 	mov.w	r8, #0
    329e:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    32a0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    32a4:	4630      	mov	r0, r6
    32a6:	f003 fb0b 	bl	68c0 <HeatColor(unsigned char)>
    32aa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32ae:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    32b2:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    32b6:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    32b8:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    32ba:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}
	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    32bc:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    32c0:	f108 0801 	add.w	r8, r8, #1
    32c4:	4543      	cmp	r3, r8
    32c6:	f105 0503 	add.w	r5, r5, #3
    32ca:	dce9      	bgt.n	32a0 <fire(LEDStruct&)+0x230>
    32cc:	e7a0      	b.n	3210 <fire(LEDStruct&)+0x1a0>
    32ce:	f203 26c6 	addw	r6, r3, #710	; 0x2c6
    32d2:	f503 7732 	add.w	r7, r3, #712	; 0x2c8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    32d6:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 33b4 <fire(LEDStruct&)+0x344>
    32da:	4426      	add	r6, r4
    32dc:	4427      	add	r7, r4
    32de:	7831      	ldrb	r1, [r6, #0]
    32e0:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    32e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    32e8:	fb88 9001 	smull	r9, r0, r8, r1
    32ec:	f10e 3eff 	add.w	lr, lr, #4294967295
    32f0:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    32f4:	f1be 0f01 	cmp.w	lr, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    32f8:	f807 1d01 	strb.w	r1, [r7, #-1]!
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    32fc:	d1ef      	bne.n	32de <fire(LEDStruct&)+0x26e>
    32fe:	e713      	b.n	3128 <fire(LEDStruct&)+0xb8>
    3300:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    3304:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3308:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    330c:	fb9e fef3 	sdiv	lr, lr, r3
    3310:	f10e 0e02 	add.w	lr, lr, #2
    3314:	fa5f fe8e 	uxtb.w	lr, lr
    3318:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    331c:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3320:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3324:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3328:	3219      	adds	r2, #25
    332a:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    332c:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3330:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    3334:	b2c9      	uxtb	r1, r1
    3336:	fb11 f10e 	smulbb	r1, r1, lr
    333a:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    333e:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3340:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3344:	429e      	cmp	r6, r3
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    3346:	7039      	strb	r1, [r7, #0]
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    3348:	dbe8      	blt.n	331c <fire(LEDStruct&)+0x2ac>
    334a:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    334c:	f1a3 0e03 	sub.w	lr, r3, #3
    3350:	f1be 0f01 	cmp.w	lr, #1
    3354:	f04f 0c00 	mov.w	ip, #0
    3358:	f73f aecb 	bgt.w	30f2 <fire(LEDStruct&)+0x82>
    335c:	e6e4      	b.n	3128 <fire(LEDStruct&)+0xb8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    335e:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3362:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3366:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    336a:	3219      	adds	r2, #25
    336c:	b292      	uxth	r2, r2
    336e:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    3372:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3376:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    337a:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    337c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3380:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3382:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3384:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3388:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    338c:	b2c0      	uxtb	r0, r0
	}

	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    338e:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3392:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3396:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    339a:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    339e:	800d      	strh	r5, [r1, #0]
    33a0:	1201      	asrs	r1, r0, #8
    33a2:	3960      	subs	r1, #96	; 0x60
    33a4:	4630      	mov	r0, r6
    33a6:	fa80 f051 	uqadd8	r0, r0, r1
    33aa:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
    33ae:	e709      	b.n	31c4 <fire(LEDStruct&)+0x154>
    33b0:	1fff874a 	.word	0x1fff874a
    33b4:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    33b8:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    33bc:	2a00      	cmp	r2, #0
    33be:	d059      	beq.n	3474 <fire(LEDStruct&)+0x404>
			for (int j = 0; j < leds.heat_length; j++) {
    33c0:	2b00      	cmp	r3, #0
    33c2:	f43f af60 	beq.w	3286 <fire(LEDStruct&)+0x216>
    33c6:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    33ca:	46b9      	mov	r9, r7
    33cc:	4625      	mov	r5, r4
    33ce:	f04f 0800 	mov.w	r8, #0
    33d2:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    33d4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    33d8:	4630      	mov	r0, r6
    33da:	f003 fa71 	bl	68c0 <HeatColor(unsigned char)>
    33de:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33e2:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    33e6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    33ea:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    33ee:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    33f2:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    33f6:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    33fa:	f108 0801 	add.w	r8, r8, #1
    33fe:	4543      	cmp	r3, r8
    3400:	f1a5 0503 	sub.w	r5, r5, #3
    3404:	dce6      	bgt.n	33d4 <fire(LEDStruct&)+0x364>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    3406:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    340a:	2a00      	cmp	r2, #0
    340c:	f43f af3b 	beq.w	3286 <fire(LEDStruct&)+0x216>
			if (leds.this_dir) {
    3410:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    3414:	2a00      	cmp	r2, #0
    3416:	f000 80da 	beq.w	35ce <fire(LEDStruct&)+0x55e>
				for (int j = 0; j < leds.heat_length; j++) {
    341a:	2b00      	cmp	r3, #0
    341c:	f43f af33 	beq.w	3286 <fire(LEDStruct&)+0x216>
    3420:	4625      	mov	r5, r4
    3422:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    3426:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    342a:	4630      	mov	r0, r6
    342c:	f003 fa48 	bl	68c0 <HeatColor(unsigned char)>
    3430:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3434:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3438:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    343c:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    3440:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    3444:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    3448:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    344c:	f108 0801 	add.w	r8, r8, #1
    3450:	4543      	cmp	r3, r8
    3452:	f105 0503 	add.w	r5, r5, #3
    3456:	dce6      	bgt.n	3426 <fire(LEDStruct&)+0x3b6>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    3458:	b006      	add	sp, #24
    345a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    345e:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3462:	2b00      	cmp	r3, #0
    3464:	f040 80d7 	bne.w	3616 <fire(LEDStruct&)+0x5a6>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3468:	f1bc 0f00 	cmp.w	ip, #0
    346c:	f47f aefa 	bne.w	3264 <fire(LEDStruct&)+0x1f4>
    3470:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    3474:	2b00      	cmp	r3, #0
    3476:	f43f af06 	beq.w	3286 <fire(LEDStruct&)+0x216>
    347a:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    347e:	46b9      	mov	r9, r7
    3480:	f04f 0800 	mov.w	r8, #0
    3484:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    3486:	f894 5316 	ldrb.w	r5, [r4, #790]	; 0x316
    348a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    348e:	354b      	adds	r5, #75	; 0x4b
    3490:	4445      	add	r5, r8
    3492:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3496:	4630      	mov	r0, r6
    3498:	f003 fa12 	bl	68c0 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    349c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    34a0:	5563      	strb	r3, [r4, r5]
    34a2:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    34a4:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    34a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
    34ac:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    34ae:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    34b0:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    34b4:	f108 0801 	add.w	r8, r8, #1
    34b8:	4543      	cmp	r3, r8
    34ba:	dce4      	bgt.n	3486 <fire(LEDStruct&)+0x416>
    34bc:	e7a3      	b.n	3406 <fire(LEDStruct&)+0x396>
    34be:	882b      	ldrh	r3, [r5, #0]
    34c0:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    34c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    34c8:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    34cc:	3119      	adds	r1, #25
    34ce:	b289      	uxth	r1, r1
    34d0:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    34d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    34d8:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    34dc:	3219      	adds	r2, #25
    34de:	b292      	uxth	r2, r2
    34e0:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    34e4:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    34e8:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    34ec:	f10e 0e19 	add.w	lr, lr, #25
    34f0:	fa1f fe8e 	uxth.w	lr, lr
    34f4:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    34f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    34fc:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3500:	3619      	adds	r6, #25
    3502:	b2b6      	uxth	r6, r6
    3504:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    350c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3510:	3319      	adds	r3, #25
    3512:	b29b      	uxth	r3, r3
    3514:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3518:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    351c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3520:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3524:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3528:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
}


void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    352c:	b2f6      	uxtb	r6, r6
    352e:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3532:	3719      	adds	r7, #25
    3534:	b2db      	uxtb	r3, r3
    3536:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    353a:	b2bf      	uxth	r7, r7
    353c:	11b6      	asrs	r6, r6, #6
    353e:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3542:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3546:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    354a:	119b      	asrs	r3, r3, #6
    354c:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3550:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3554:	333c      	adds	r3, #60	; 0x3c
    3556:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    355a:	f3c6 1681 	ubfx	r6, r6, #6, #2
    355e:	fa5f f883 	uxtb.w	r8, r3
    3562:	fa5f fc8c 	uxtb.w	ip, ip
    3566:	3601      	adds	r6, #1
    3568:	f10e 0314 	add.w	r3, lr, #20
    356c:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3570:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3574:	f8cd c000 	str.w	ip, [sp]
    3578:	f8cd 8004 	str.w	r8, [sp, #4]
    357c:	9602      	str	r6, [sp, #8]
    357e:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3582:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3586:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3588:	802f      	strh	r7, [r5, #0]
    358a:	f7ff fd07 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    358e:	e579      	b.n	3084 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    3590:	2b00      	cmp	r3, #0
    3592:	d040      	beq.n	3616 <fire(LEDStruct&)+0x5a6>
    3594:	4625      	mov	r5, r4
    3596:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    359a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    359e:	4630      	mov	r0, r6
    35a0:	f003 f98e 	bl	68c0 <HeatColor(unsigned char)>
    35a4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    35ac:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35b0:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    35b4:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    35b8:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    35bc:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    35c0:	f108 0801 	add.w	r8, r8, #1
    35c4:	4543      	cmp	r3, r8
    35c6:	f1a5 0503 	sub.w	r5, r5, #3
    35ca:	dce6      	bgt.n	359a <fire(LEDStruct&)+0x52a>
    35cc:	e645      	b.n	325a <fire(LEDStruct&)+0x1ea>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    35ce:	4690      	mov	r8, r2
    35d0:	2b00      	cmp	r3, #0
    35d2:	f43f ae58 	beq.w	3286 <fire(LEDStruct&)+0x216>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    35d6:	334b      	adds	r3, #75	; 0x4b
    35d8:	ebc8 0503 	rsb	r5, r8, r3
    35dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    35e0:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    35e4:	4630      	mov	r0, r6
    35e6:	f003 f96b 	bl	68c0 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    35ea:	f89d 3014 	ldrb.w	r3, [sp, #20]
    35ee:	5563      	strb	r3, [r4, r5]
    35f0:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    35f2:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    35f6:	f89d 2015 	ldrb.w	r2, [sp, #21]
    35fa:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    35fc:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    35fe:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3602:	f108 0801 	add.w	r8, r8, #1
    3606:	4543      	cmp	r3, r8
    3608:	dce5      	bgt.n	35d6 <fire(LEDStruct&)+0x566>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    360a:	b006      	add	sp, #24
    360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    3610:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    3614:	b153      	cbz	r3, 362c <fire(LEDStruct&)+0x5bc>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3616:	f894 3317 	ldrb.w	r3, [r4, #791]	; 0x317
    361a:	2b00      	cmp	r3, #0
    361c:	f47f ae22 	bne.w	3264 <fire(LEDStruct&)+0x1f4>
    3620:	e631      	b.n	3286 <fire(LEDStruct&)+0x216>
	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	if (!leds.fire_sync) {
    3622:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3626:	b142      	cbz	r2, 363a <fire(LEDStruct&)+0x5ca>
    3628:	882a      	ldrh	r2, [r5, #0]
    362a:	e55b      	b.n	30e4 <fire(LEDStruct&)+0x74>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    362c:	f1bc 0f00 	cmp.w	ip, #0
    3630:	f47f ae18 	bne.w	3264 <fire(LEDStruct&)+0x1f4>
    3634:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    3638:	e6c2      	b.n	33c0 <fire(LEDStruct&)+0x350>
    363a:	882a      	ldrh	r2, [r5, #0]
    363c:	e686      	b.n	334c <fire(LEDStruct&)+0x2dc>
    363e:	bf00      	nop

00003640 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    3640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    3644:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    3648:	4dcd      	ldr	r5, [pc, #820]	; (3980 <torch(LEDStruct&)+0x340>)





void torch(LEDStruct& leds) {
    364a:	b087      	sub	sp, #28
    364c:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    364e:	2b00      	cmp	r3, #0
    3650:	f000 81d2 	beq.w	39f8 <torch(LEDStruct&)+0x3b8>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    3654:	f894 c315 	ldrb.w	ip, [r4, #789]	; 0x315
    3658:	4663      	mov	r3, ip
    365a:	f1bc 0f00 	cmp.w	ip, #0
    365e:	f000 8234 	beq.w	3aca <torch(LEDStruct&)+0x48a>
    3662:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3666:	882a      	ldrh	r2, [r5, #0]
    3668:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    366c:	004f      	lsls	r7, r1, #1
    366e:	f20c 2e7e 	addw	lr, ip, #638	; 0x27e
    3672:	fb97 f7fc 	sdiv	r7, r7, ip
    3676:	3702      	adds	r7, #2
    3678:	b2ff      	uxtb	r7, r7
    367a:	44a6      	add	lr, r4
    367c:	f204 267e 	addw	r6, r4, #638	; 0x27e
    3680:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    3684:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3688:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    368c:	3219      	adds	r2, #25
    368e:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3690:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    3694:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    3698:	b2c9      	uxtb	r1, r1
    369a:	fb11 f107 	smulbb	r1, r1, r7
    369e:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    36a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    36a6:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    36a8:	7031      	strb	r1, [r6, #0]


void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    36aa:	d1e9      	bne.n	3680 <torch(LEDStruct&)+0x40>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    36ac:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    36b0:	802a      	strh	r2, [r5, #0]
    36b2:	2e00      	cmp	r6, #0
    36b4:	f000 8168 	beq.w	3988 <torch(LEDStruct&)+0x348>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    36b8:	f1ac 0703 	sub.w	r7, ip, #3
    36bc:	2f01      	cmp	r7, #1
    36be:	f04f 0901 	mov.w	r9, #1
    36c2:	dd1a      	ble.n	36fa <torch(LEDStruct&)+0xba>
    36c4:	f20c 207b 	addw	r0, ip, #635	; 0x27b
    36c8:	f20c 267d 	addw	r6, ip, #637	; 0x27d
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    36cc:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 3984 <torch(LEDStruct&)+0x344>
    36d0:	4420      	add	r0, r4
    36d2:	4426      	add	r6, r4
    36d4:	f204 2e7f 	addw	lr, r4, #639	; 0x27f
    36d8:	7801      	ldrb	r1, [r0, #0]
    36da:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    36de:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    36e2:	fb88 ba01 	smull	fp, sl, r8, r1
    36e6:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    36ea:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    36ec:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    36f0:	d1f2      	bne.n	36d8 <torch(LEDStruct&)+0x98>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    36f2:	f1b9 0f00 	cmp.w	r9, #0
    36f6:	f000 812c 	beq.w	3952 <torch(LEDStruct&)+0x312>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    36fa:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    36fe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3702:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3706:	3219      	adds	r2, #25
    3708:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    370a:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    370e:	f894 627b 	ldrb.w	r6, [r4, #635]	; 0x27b
    3712:	802a      	strh	r2, [r5, #0]
    3714:	b2c0      	uxtb	r0, r0
    3716:	4286      	cmp	r6, r0
    3718:	4999      	ldr	r1, [pc, #612]	; (3980 <torch(LEDStruct&)+0x340>)
    371a:	d928      	bls.n	376e <torch(LEDStruct&)+0x12e>
    371c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3720:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3724:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3728:	3219      	adds	r2, #25
    372a:	b292      	uxth	r2, r2
    372c:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    3730:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    3734:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3738:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    373a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    373e:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3740:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3742:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3746:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    374a:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    374c:	eb04 2222 	add.w	r2, r4, r2, asr #8
    3750:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3754:	800e      	strh	r6, [r1, #0]
    3756:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    375a:	f892 627f 	ldrb.w	r6, [r2, #639]	; 0x27f
    375e:	1200      	asrs	r0, r0, #8
    3760:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    3764:	4630      	mov	r0, r6
    3766:	fa80 f051 	uqadd8	r0, r0, r1
    376a:	f882 027f 	strb.w	r0, [r2, #639]	; 0x27f
	}
	if (!leds.fire_sync) {
    376e:	f1b9 0f00 	cmp.w	r9, #0
    3772:	d112      	bne.n	379a <torch(LEDStruct&)+0x15a>
    3774:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    3776:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    377a:	4981      	ldr	r1, [pc, #516]	; (3980 <torch(LEDStruct&)+0x340>)
    377c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    3780:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3784:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3788:	3219      	adds	r2, #25
    378a:	b292      	uxth	r2, r2
    378c:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    3790:	b2c0      	uxtb	r0, r0
    3792:	4286      	cmp	r6, r0
    3794:	802a      	strh	r2, [r5, #0]
    3796:	f200 80af 	bhi.w	38f8 <torch(LEDStruct&)+0x2b8>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    379a:	f1bc 0f00 	cmp.w	ip, #0
    379e:	f000 8199 	beq.w	3ad4 <torch(LEDStruct&)+0x494>
    37a2:	f204 277e 	addw	r7, r4, #638	; 0x27e
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    37a6:	2600      	movs	r6, #0
    37a8:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    37ac:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    37b0:	199d      	adds	r5, r3, r6
    37b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    37b6:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    37ba:	4648      	mov	r0, r9
    37bc:	f003 f880 	bl	68c0 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    37c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    37c4:	5563      	strb	r3, [r4, r5]
    37c6:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    37c8:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    37cc:	f89d 2015 	ldrb.w	r2, [sp, #21]
    37d0:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    37d2:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    37d4:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    37d8:	3601      	adds	r6, #1
    37da:	42b3      	cmp	r3, r6
    37dc:	dce6      	bgt.n	37ac <torch(LEDStruct&)+0x16c>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    37de:	f894 6317 	ldrb.w	r6, [r4, #791]	; 0x317
    37e2:	2e00      	cmp	r6, #0
    37e4:	d175      	bne.n	38d2 <torch(LEDStruct&)+0x292>
    37e6:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    37ea:	2b00      	cmp	r3, #0
    37ec:	f000 8178 	beq.w	3ae0 <torch(LEDStruct&)+0x4a0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    37f0:	334a      	adds	r3, #74	; 0x4a
    37f2:	1b9d      	subs	r5, r3, r6
    37f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    37f8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    37fc:	4648      	mov	r0, r9
    37fe:	f003 f85f 	bl	68c0 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3802:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3806:	5563      	strb	r3, [r4, r5]
    3808:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    380a:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    380e:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3812:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    3814:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3816:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    381a:	3601      	adds	r6, #1
    381c:	42b3      	cmp	r3, r6
    381e:	dce7      	bgt.n	37f0 <torch(LEDStruct&)+0x1b0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    3820:	2b4b      	cmp	r3, #75	; 0x4b
    3822:	d047      	beq.n	38b4 <torch(LEDStruct&)+0x274>
    3824:	f10d 0914 	add.w	r9, sp, #20
    3828:	f204 1bc7 	addw	fp, r4, #455	; 0x1c7
    382c:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    382e:	4626      	mov	r6, r4
    3830:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3832:	f04f 0a01 	mov.w	sl, #1
    3836:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    383a:	f8cd a000 	str.w	sl, [sp]
    383e:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    3842:	fb98 f3f3 	sdiv	r3, r8, r3
    3846:	441a      	add	r2, r3
    3848:	b2d2      	uxtb	r2, r2
    384a:	23ff      	movs	r3, #255	; 0xff
    384c:	4659      	mov	r1, fp
    384e:	4648      	mov	r0, r9
    3850:	f003 f858 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3854:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3858:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    385c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3860:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    3862:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    3864:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    3866:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    386a:	f894 2315 	ldrb.w	r2, [r4, #789]	; 0x315
    386e:	fb98 f8f2 	sdiv	r8, r8, r2
    3872:	eb08 0203 	add.w	r2, r8, r3
    3876:	b2d2      	uxtb	r2, r2
    3878:	23ff      	movs	r3, #255	; 0xff
    387a:	4659      	mov	r1, fp
    387c:	f8cd a000 	str.w	sl, [sp]
    3880:	4648      	mov	r0, r9
    3882:	f003 f83f 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3886:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    388a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    388e:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    3892:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3896:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    389a:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    389e:	f894 3315 	ldrb.w	r3, [r4, #789]	; 0x315
    38a2:	3501      	adds	r5, #1
    38a4:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    38a8:	42aa      	cmp	r2, r5
    38aa:	f106 0603 	add.w	r6, r6, #3
    38ae:	f1a7 0703 	sub.w	r7, r7, #3
    38b2:	dcc0      	bgt.n	3836 <torch(LEDStruct&)+0x1f6>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    38b4:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    38b8:	2b00      	cmp	r3, #0
    38ba:	f040 8093 	bne.w	39e4 <torch(LEDStruct&)+0x3a4>
	else			   { leds.torch_index -= leds.torch_diff; }
    38be:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    38c2:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    38c6:	1a9b      	subs	r3, r3, r2
    38c8:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
}
    38cc:	b007      	add	sp, #28
    38ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38d2:	4621      	mov	r1, r4
    38d4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    38d8:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    38da:	7810      	ldrb	r0, [r2, #0]
    38dc:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    38e0:	7850      	ldrb	r0, [r2, #1]
    38e2:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    38e6:	7890      	ldrb	r0, [r2, #2]
    38e8:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    38ec:	3203      	adds	r2, #3
    38ee:	4295      	cmp	r5, r2
    38f0:	f1a1 0103 	sub.w	r1, r1, #3
    38f4:	d1f1      	bne.n	38da <torch(LEDStruct&)+0x29a>
    38f6:	e793      	b.n	3820 <torch(LEDStruct&)+0x1e0>
    38f8:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    38fc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3900:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3904:	3219      	adds	r2, #25
    3906:	b292      	uxth	r2, r2
    3908:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    390c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    3910:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3914:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3916:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    391a:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    391c:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    391e:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3922:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    3926:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    3928:	eb04 2222 	add.w	r2, r4, r2, asr #8
    392c:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    3930:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    3934:	f892 62ca 	ldrb.w	r6, [r2, #714]	; 0x2ca
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3938:	800d      	strh	r5, [r1, #0]
    393a:	1201      	asrs	r1, r0, #8
    393c:	3960      	subs	r1, #96	; 0x60
    393e:	4630      	mov	r0, r6
    3940:	fa80 f051 	uqadd8	r0, r0, r1
    3944:	f882 02ca 	strb.w	r0, [r2, #714]	; 0x2ca
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    3948:	f1bc 0f00 	cmp.w	ip, #0
    394c:	f47f af29 	bne.w	37a2 <torch(LEDStruct&)+0x162>
    3950:	e0c4      	b.n	3adc <torch(LEDStruct&)+0x49c>
    3952:	f20c 26c6 	addw	r6, ip, #710	; 0x2c6
    3956:	f50c 7e32 	add.w	lr, ip, #712	; 0x2c8
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    395a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 3984 <torch(LEDStruct&)+0x344>
    395e:	4426      	add	r6, r4
    3960:	44a6      	add	lr, r4
    3962:	7831      	ldrb	r1, [r6, #0]
    3964:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    3968:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    396c:	fb88 a001 	smull	sl, r0, r8, r1
    3970:	3f01      	subs	r7, #1
    3972:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    3976:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    3978:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    397c:	d1f1      	bne.n	3962 <torch(LEDStruct&)+0x322>
    397e:	e6bc      	b.n	36fa <torch(LEDStruct&)+0xba>
    3980:	1fff874a 	.word	0x1fff874a
    3984:	55555556 	.word	0x55555556
    3988:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    398c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3990:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    3994:	fb9e fefc 	sdiv	lr, lr, ip
    3998:	f10e 0e02 	add.w	lr, lr, #2
    399c:	fa5f fe8e 	uxtb.w	lr, lr
    39a0:	f204 27c9 	addw	r7, r4, #713	; 0x2c9
    39a4:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    39a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    39ac:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    39b0:	3219      	adds	r2, #25
    39b2:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    39b4:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    39b8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    39bc:	b2c9      	uxtb	r1, r1
    39be:	fb11 f10e 	smulbb	r1, r1, lr
    39c2:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    39c6:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    39c8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    39cc:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    39ce:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    39d0:	dbe8      	blt.n	39a4 <torch(LEDStruct&)+0x364>
    39d2:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    39d4:	f1ac 0703 	sub.w	r7, ip, #3
    39d8:	2f01      	cmp	r7, #1
    39da:	f04f 0900 	mov.w	r9, #0
    39de:	f73f ae71 	bgt.w	36c4 <torch(LEDStruct&)+0x84>
    39e2:	e68a      	b.n	36fa <torch(LEDStruct&)+0xba>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    39e4:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    39e8:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    39ec:	4413      	add	r3, r2
    39ee:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
	else			   { leds.torch_index -= leds.torch_diff; }
}
    39f2:	b007      	add	sp, #28
    39f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    39f8:	882b      	ldrh	r3, [r5, #0]
    39fa:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    39fe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3a02:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3a06:	3119      	adds	r1, #25
    3a08:	b289      	uxth	r1, r1
    3a0a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3a0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3a12:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3a16:	3219      	adds	r2, #25
    3a18:	b292      	uxth	r2, r2
    3a1a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3a1e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3a22:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3a26:	f10e 0e19 	add.w	lr, lr, #25
    3a2a:	fa1f fe8e 	uxth.w	lr, lr
    3a2e:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    3a32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    3a36:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    3a3a:	3619      	adds	r6, #25
    3a3c:	b2b6      	uxth	r6, r6
    3a3e:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    3a42:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3a46:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3a4a:	3319      	adds	r3, #25
    3a4c:	b29b      	uxth	r3, r3
    3a4e:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3a52:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a56:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    3a5a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a5e:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a62:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    3a66:	b2f6      	uxtb	r6, r6
    3a68:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3a6c:	3719      	adds	r7, #25
    3a6e:	b2db      	uxtb	r3, r3
    3a70:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    3a74:	b2bf      	uxth	r7, r7
    3a76:	11b6      	asrs	r6, r6, #6
    3a78:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    3a7c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    3a80:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    3a84:	119b      	asrs	r3, r3, #6
    3a86:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3a8a:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    3a8e:	333c      	adds	r3, #60	; 0x3c
    3a90:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    3a94:	f3c6 1681 	ubfx	r6, r6, #6, #2
    3a98:	fa5f f883 	uxtb.w	r8, r3
    3a9c:	fa5f fc8c 	uxtb.w	ip, ip
    3aa0:	3601      	adds	r6, #1
    3aa2:	f10e 0314 	add.w	r3, lr, #20
    3aa6:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    3aaa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    3aae:	f8cd c000 	str.w	ip, [sp]
    3ab2:	f8cd 8004 	str.w	r8, [sp, #4]
    3ab6:	9602      	str	r6, [sp, #8]
    3ab8:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    3abc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    3ac0:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ac2:	802f      	strh	r7, [r5, #0]
    3ac4:	f7ff fa6a 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    3ac8:	e5c4      	b.n	3654 <torch(LEDStruct&)+0x14>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    3aca:	f894 2317 	ldrb.w	r2, [r4, #791]	; 0x317
    3ace:	b14a      	cbz	r2, 3ae4 <torch(LEDStruct&)+0x4a4>
    3ad0:	882a      	ldrh	r2, [r5, #0]
    3ad2:	e5f1      	b.n	36b8 <torch(LEDStruct&)+0x78>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    3ad4:	f1b9 0f00 	cmp.w	r9, #0
    3ad8:	f47f aefb 	bne.w	38d2 <torch(LEDStruct&)+0x292>
    3adc:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    3ae0:	2300      	movs	r3, #0
    3ae2:	e6a1      	b.n	3828 <torch(LEDStruct&)+0x1e8>
    3ae4:	882a      	ldrh	r2, [r5, #0]
    3ae6:	e775      	b.n	39d4 <torch(LEDStruct&)+0x394>

00003ae8 <colorwave(LEDStruct&)>:
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    3ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { colorwave_init(leds); }
    3aec:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }
}


void colorwave(LEDStruct& leds) {
    3af0:	b08b      	sub	sp, #44	; 0x2c
    3af2:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { colorwave_init(leds); }
    3af4:	2b00      	cmp	r3, #0
    3af6:	f000 81b3 	beq.w	3e60 <colorwave(LEDStruct&)+0x378>
    3afa:	f8b0 533c 	ldrh.w	r5, [r0, #828]	; 0x33c
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3afe:	4ad3      	ldr	r2, [pc, #844]	; (3e4c <colorwave(LEDStruct&)+0x364>)
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3b00:	4bd3      	ldr	r3, [pc, #844]	; (3e50 <colorwave(LEDStruct&)+0x368>)
    3b02:	6811      	ldr	r1, [r2, #0]
    3b04:	9109      	str	r1, [sp, #36]	; 0x24
	return ret;
    3b06:	9809      	ldr	r0, [sp, #36]	; 0x24
    3b08:	fb03 f000 	mul.w	r0, r3, r0
    3b0c:	0c00      	lsrs	r0, r0, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b0e:	0446      	lsls	r6, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b10:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b14:	d503      	bpl.n	3b1e <colorwave(LEDStruct&)+0x36>
    3b16:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3b1a:	3307      	adds	r3, #7
    3b1c:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b1e:	0a19      	lsrs	r1, r3, #8
    uint8_t  m   = slope[section];
    3b20:	4fcc      	ldr	r7, [pc, #816]	; (3e54 <colorwave(LEDStruct&)+0x36c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b22:	f8df 8338 	ldr.w	r8, [pc, #824]	; 3e5c <colorwave(LEDStruct&)+0x374>
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b26:	f817 e001 	ldrb.w	lr, [r7, r1]
    3b2a:	f838 6011 	ldrh.w	r6, [r8, r1, lsl #1]
    3b2e:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3b32:	fb0e 6301 	mla	r3, lr, r1, r6

    if( theta & 0x8000 ) y = -y;
    3b36:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b38:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3b3a:	bf48      	it	mi
    3b3c:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b3e:	6811      	ldr	r1, [r2, #0]
    3b40:	9108      	str	r1, [sp, #32]
    3b42:	b21b      	sxth	r3, r3

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
    3b44:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3b48:	b29b      	uxth	r3, r3
	return ret;
    3b4a:	9e08      	ldr	r6, [sp, #32]
    3b4c:	eb03 10c3 	add.w	r0, r3, r3, lsl #7
    3b50:	f64d 6308 	movw	r3, #56840	; 0xde08
    3b54:	fb03 f606 	mul.w	r6, r3, r6
    3b58:	0c00      	lsrs	r0, r0, #16
    3b5a:	0c36      	lsrs	r6, r6, #16
    3b5c:	3060      	adds	r0, #96	; 0x60
    3b5e:	b2c0      	uxtb	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b60:	0471      	lsls	r1, r6, #17
    3b62:	f884 0322 	strb.w	r0, [r4, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3b66:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3b6a:	d503      	bpl.n	3b74 <colorwave(LEDStruct&)+0x8c>
    3b6c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3b70:	3307      	adds	r3, #7
    3b72:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3b74:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3b78:	f3c3 0146 	ubfx	r1, r3, #1, #7
    3b7c:	f817 c00e 	ldrb.w	ip, [r7, lr]
    3b80:	f838 301e 	ldrh.w	r3, [r8, lr, lsl #1]
    3b84:	fb0c 3301 	mla	r3, ip, r1, r3
    3b88:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3b8a:	0431      	lsls	r1, r6, #16
    3b8c:	bf48      	it	mi
    3b8e:	425b      	negmi	r3, r3
    3b90:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3b92:	6811      	ldr	r1, [r2, #0]
    3b94:	9107      	str	r1, [sp, #28]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3b96:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3b9a:	b29b      	uxth	r3, r3
    3b9c:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
	return ret;
    3ba0:	9e07      	ldr	r6, [sp, #28]
    3ba2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3ba6:	f24a 03c8 	movw	r3, #41160	; 0xa0c8
    3baa:	fb03 fe06 	mul.w	lr, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3bae:	0c09      	lsrs	r1, r1, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3bb0:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3bb4:	f501 51c8 	add.w	r1, r1, #6400	; 0x1900
    3bb8:	b289      	uxth	r1, r1
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bba:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    3bbe:	f8a4 1328 	strh.w	r1, [r4, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3bc2:	f3ce 03ca 	ubfx	r3, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3bc6:	d003      	beq.n	3bd0 <colorwave(LEDStruct&)+0xe8>
    3bc8:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3bcc:	3307      	adds	r3, #7
    3bce:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3bd0:	ea4f 2c13 	mov.w	ip, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bd4:	f3c3 0646 	ubfx	r6, r3, #1, #7
    3bd8:	f817 900c 	ldrb.w	r9, [r7, ip]
    3bdc:	f838 301c 	ldrh.w	r3, [r8, ip, lsl #1]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    3be0:	f8b4 c320 	ldrh.w	ip, [r4, #800]	; 0x320
    3be4:	f8a4 c32a 	strh.w	ip, [r4, #810]	; 0x32a
    3be8:	fb09 3306 	mla	r3, r9, r6, r3

    if( theta & 0x8000 ) y = -y;
    3bec:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3bf0:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3bf2:	bf18      	it	ne
    3bf4:	425b      	negne	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3bf6:	6816      	ldr	r6, [r2, #0]
    3bf8:	9606      	str	r6, [sp, #24]
    3bfa:	b21b      	sxth	r3, r3
    3bfc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3c00:	b29b      	uxth	r3, r3
    3c02:	f04f 0e26 	mov.w	lr, #38	; 0x26
	return ret;
    3c06:	9e06      	ldr	r6, [sp, #24]
    3c08:	fb0e fe03 	mul.w	lr, lr, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3c0c:	f647 3398 	movw	r3, #31640	; 0x7b98
    3c10:	fb03 f606 	mul.w	r6, r3, r6
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3c14:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3c18:	0c36      	lsrs	r6, r6, #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3c1a:	f10e 0e17 	add.w	lr, lr, #23
    3c1e:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c22:	f416 4f80 	tst.w	r6, #16384	; 0x4000
	if (!leds.mode_initialized) { colorwave_init(leds); }

	//uint8_t sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    3c26:	f884 e323 	strb.w	lr, [r4, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3c2a:	f3c6 03ca 	ubfx	r3, r6, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3c2e:	d003      	beq.n	3c38 <colorwave(LEDStruct&)+0x150>
    3c30:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3c34:	3307      	adds	r3, #7
    3c36:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3c38:	ea4f 2a13 	mov.w	sl, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3c3c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3c40:	f817 b00a 	ldrb.w	fp, [r7, sl]
    3c44:	f838 901a 	ldrh.w	r9, [r8, sl, lsl #1]
    3c48:	fb0b 9903 	mla	r9, fp, r3, r9
    3c4c:	fa1f f989 	uxth.w	r9, r9

    if( theta & 0x8000 ) y = -y;
    3c50:	0433      	lsls	r3, r6, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c52:	6813      	ldr	r3, [r2, #0]
    3c54:	9304      	str	r3, [sp, #16]
    3c56:	bf48      	it	mi
    3c58:	f1c9 0900 	rsbmi	r9, r9, #0
	return ret;
    3c5c:	9b04      	ldr	r3, [sp, #16]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3c5e:	6812      	ldr	r2, [r2, #0]
    3c60:	9205      	str	r2, [sp, #20]
    3c62:	fa0f f989 	sxth.w	r9, r9
    3c66:	f5a9 4200 	sub.w	r2, r9, #32768	; 0x8000

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3c6a:	f8b4 631e 	ldrh.w	r6, [r4, #798]	; 0x31e
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3c6e:	f8b4 b31c 	ldrh.w	fp, [r4, #796]	; 0x31c
    3c72:	b292      	uxth	r2, r2
    3c74:	f240 49b1 	movw	r9, #1201	; 0x4b1
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);

	leds.ms = millis();
    3c78:	fa1f fa83 	uxth.w	sl, r3
    3c7c:	fb09 f302 	mul.w	r3, r9, r2
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3c80:	4a75      	ldr	r2, [pc, #468]	; (3e58 <colorwave(LEDStruct&)+0x370>)
	return ret;
    3c82:	f8dd 9014 	ldr.w	r9, [sp, #20]
    3c86:	f8a4 a32e 	strh.w	sl, [r4, #814]	; 0x32e
	leds.deltams = leds.ms - leds.sLastMillis;
    3c8a:	ebc6 060a 	rsb	r6, r6, sl
    3c8e:	b2b6      	uxth	r6, r6
    3c90:	fb02 f909 	mul.w	r9, r2, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3c94:	0c1b      	lsrs	r3, r3, #16
    3c96:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3c9a:	ea4f 4919 	mov.w	r9, r9, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3c9e:	fb16 be0e 	smlabb	lr, r6, lr, fp
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    3ca2:	b29a      	uxth	r2, r3
    3ca4:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3ca8:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 300, 1500);
    3cac:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    3cb0:	f8a4 6330 	strh.w	r6, [r4, #816]	; 0x330
	leds.sLastMillis = leds.ms;
    3cb4:	f8a4 a31e 	strh.w	sl, [r4, #798]	; 0x31e
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    3cb8:	f8a4 e31c 	strh.w	lr, [r4, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3cbc:	f3c9 03ca 	ubfx	r3, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3cc0:	d003      	beq.n	3cca <colorwave(LEDStruct&)+0x1e2>
    3cc2:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    3cc6:	3307      	adds	r3, #7
    3cc8:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3cca:	ea4f 2b13 	mov.w	fp, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3cce:	f3c3 0a46 	ubfx	sl, r3, #1, #7
    3cd2:	f817 300b 	ldrb.w	r3, [r7, fp]
    3cd6:	f838 b01b 	ldrh.w	fp, [r8, fp, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    3cda:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    3cde:	fb03 b30a 	mla	r3, r3, sl, fp
    3ce2:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    3ce4:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    3ce8:	bf18      	it	ne
    3cea:	425b      	negne	r3, r3
    3cec:	b21b      	sxth	r3, r3

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    3cee:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    3cf2:	b29b      	uxth	r3, r3
    3cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3cf8:	0c1b      	lsrs	r3, r3, #16
    3cfa:	3305      	adds	r3, #5
    3cfc:	b29b      	uxth	r3, r3
    3cfe:	fb06 c303 	mla	r3, r6, r3, ip
    3d02:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3d06:	2d00      	cmp	r5, #0
    3d08:	f000 8089 	beq.w	3e1e <colorwave(LEDStruct&)+0x336>
    3d0c:	4613      	mov	r3, r2
    3d0e:	f204 1ac7 	addw	sl, r4, #455	; 0x1c7
    3d12:	2600      	movs	r6, #0

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3d14:	f04f 0901 	mov.w	r9, #1
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3d18:	2504      	movs	r5, #4
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    3d1a:	4463      	add	r3, ip
    3d1c:	b29b      	uxth	r3, r3
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    3d1e:	ea4f 1cd3 	mov.w	ip, r3, lsr #7
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3d22:	448e      	add	lr, r1
    3d24:	fa1f fe8e 	uxth.w	lr, lr
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
    3d28:	f41c 7f80 	tst.w	ip, #256	; 0x100
				leds.hue8 = 255 - (leds.h16_128 >> 1);
    3d2c:	ea6f 2213 	mvn.w	r2, r3, lsr #8
    3d30:	b2d2      	uxtb	r2, r2
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3d32:	ea4f 2b13 	mov.w	fp, r3, lsr #8
			leds.h16_128 = leds.hue16 >> 7;
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    3d36:	bf08      	it	eq
    3d38:	0a1a      	lsreq	r2, r3, #8
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d3a:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
			leds.hue8 = leds.hue16 / 256;
    3d3e:	f884 b324 	strb.w	fp, [r4, #804]	; 0x324
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
			leds.hue16 += leds.hueinc16;
    3d42:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
			leds.hue8 = leds.hue16 / 256;
			leds.h16_128 = leds.hue16 >> 7;
    3d46:	f8a4 c334 	strh.w	ip, [r4, #820]	; 0x334
			if (leds.h16_128 & 0x100) {
				leds.hue8 = 255 - (leds.h16_128 >> 1);
			}
			else {
				leds.hue8 = leds.h16_128 >> 1;
    3d4a:	f884 2324 	strb.w	r2, [r4, #804]	; 0x324
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
    3d4e:	f8a4 e332 	strh.w	lr, [r4, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3d52:	f3ce 01ca 	ubfx	r1, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3d56:	d003      	beq.n	3d60 <colorwave(LEDStruct&)+0x278>
    3d58:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3d5c:	3107      	adds	r1, #7
    3d5e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3d60:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d64:	f3c1 0346 	ubfx	r3, r1, #1, #7
    3d68:	f817 b00c 	ldrb.w	fp, [r7, ip]
    3d6c:	f838 101c 	ldrh.w	r1, [r8, ip, lsl #1]
    3d70:	fb0b 1103 	mla	r1, fp, r3, r1

    if( theta & 0x8000 ) y = -y;
    3d74:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3d78:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3d7a:	bf18      	it	ne
    3d7c:	4249      	negne	r1, r1
    3d7e:	b209      	sxth	r1, r1
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3d80:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
    3d84:	b289      	uxth	r1, r1

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3d86:	fb01 fe01 	mul.w	lr, r1, r1
    3d8a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3d8e:	fb0e f300 	mul.w	r3, lr, r0
    3d92:	ebc2 1c02 	rsb	ip, r2, r2, lsl #4
    3d96:	43c0      	mvns	r0, r0
    3d98:	eb02 120c 	add.w	r2, r2, ip, lsl #4
    3d9c:	eb00 4313 	add.w	r3, r0, r3, lsr #16
    3da0:	b2db      	uxtb	r3, r3
    3da2:	f3c2 2207 	ubfx	r2, r2, #8, #8
			else {
				leds.hue8 = leds.h16_128 >> 1;
			}

			leds.brightnesstheta16 += leds.brightnessthetainc16;
			leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    3da6:	f8a4 1336 	strh.w	r1, [r4, #822]	; 0x336

			leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    3daa:	f8a4 e338 	strh.w	lr, [r4, #824]	; 0x338
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);
    3dae:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3db2:	4651      	mov	r1, sl
    3db4:	f8cd 9000 	str.w	r9, [sp]
    3db8:	a803      	add	r0, sp, #12
			leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
			leds.bri8 += (255 - leds.brightdepth);

			leds.cwave_index = leds.hue8;
			//index = triwave8( index);
			leds.cwave_index = scale8(leds.cwave_index, 240);
    3dba:	f884 2327 	strb.w	r2, [r4, #807]	; 0x327

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);
    3dbe:	f002 fda1 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3dc2:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    3dc6:	3b01      	subs	r3, #1
    3dc8:	1b9b      	subs	r3, r3, r6
    3dca:	b29b      	uxth	r3, r3

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3dcc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			leds.cwave_index = scale8(leds.cwave_index, 240);

			CRGB newcolor = ColorFromPalette(leds.current_palette, leds.cwave_index, leds.bri8);

			leds.pixelnumber = i;
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    3dd0:	f8a4 333a 	strh.w	r3, [r4, #826]	; 0x33a

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
    3dd4:	4420      	add	r0, r4
    3dd6:	2280      	movs	r2, #128	; 0x80
    3dd8:	a903      	add	r1, sp, #12
    3dda:	3d01      	subs	r5, #1
    3ddc:	f002 fd34 	bl	6848 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		for (byte c = 0; c < 4; c++) {
    3de0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    3de4:	d00a      	beq.n	3dfc <colorwave(LEDStruct&)+0x314>
    3de6:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    3dea:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    3dee:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    3df2:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    3df6:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    3dfa:	e78e      	b.n	3d1a <colorwave(LEDStruct&)+0x232>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    3dfc:	3601      	adds	r6, #1
    3dfe:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    3e02:	b2b6      	uxth	r6, r6
    3e04:	42b3      	cmp	r3, r6
    3e06:	d90a      	bls.n	3e1e <colorwave(LEDStruct&)+0x336>
    3e08:	f8b4 c32a 	ldrh.w	ip, [r4, #810]	; 0x32a
    3e0c:	f8b4 332c 	ldrh.w	r3, [r4, #812]	; 0x32c
    3e10:	f8b4 e332 	ldrh.w	lr, [r4, #818]	; 0x332
    3e14:	f8b4 1328 	ldrh.w	r1, [r4, #808]	; 0x328
    3e18:	f894 0322 	ldrb.w	r0, [r4, #802]	; 0x322
    3e1c:	e77c      	b.n	3d18 <colorwave(LEDStruct&)+0x230>
			leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;

			nblend(leds.led_data[leds.pixelnumber], newcolor, 128);
		}
	}
	if (!leds.use_full_range) { strip_sync(leds); }
    3e1e:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3e22:	b983      	cbnz	r3, 3e46 <colorwave(LEDStruct&)+0x35e>
    3e24:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3e28:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3e2a:	781a      	ldrb	r2, [r3, #0]
    3e2c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    3e30:	785a      	ldrb	r2, [r3, #1]
    3e32:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    3e36:	789a      	ldrb	r2, [r3, #2]
    3e38:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    3e3c:	3303      	adds	r3, #3
    3e3e:	4299      	cmp	r1, r3
    3e40:	f1a4 0403 	sub.w	r4, r4, #3
    3e44:	d1f1      	bne.n	3e2a <colorwave(LEDStruct&)+0x342>
}
    3e46:	b00b      	add	sp, #44	; 0x2c
    3e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3e4c:	1fff9e00 	.word	0x1fff9e00
    3e50:	000174f8 	.word	0x000174f8
    3e54:	0000a4fc 	.word	0x0000a4fc
    3e58:	0001b580 	.word	0x0001b580
    3e5c:	00009c50 	.word	0x00009c50
    3e60:	4810      	ldr	r0, [pc, #64]	; (3ea4 <colorwave(LEDStruct&)+0x3bc>)
    3e62:	8803      	ldrh	r3, [r0, #0]
    3e64:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3e68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3e6c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3e70:	3319      	adds	r3, #25
    3e72:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3e74:	eb03 2213 	add.w	r2, r3, r3, lsr #8
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3e78:	2101      	movs	r1, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3e7a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
	leds.use_palette = 1;
	leds.mode_type = COLORWAVE;
    3e7e:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3e80:	8003      	strh	r3, [r0, #0]

	leds.use_full_range = ufr;
    3e82:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
#ifndef COLORWAVE_H
#define COLORWAVE_H

void colorwave_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    3e86:	f884 122d 	strb.w	r1, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    3e8a:	f884 1229 	strb.w	r1, [r4, #553]	; 0x229
	leds.mode_type = COLORWAVE;
    3e8e:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3e92:	b11a      	cbz	r2, 3e9c <colorwave(LEDStruct&)+0x3b4>
    3e94:	2596      	movs	r5, #150	; 0x96
    3e96:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    3e9a:	e630      	b.n	3afe <colorwave(LEDStruct&)+0x16>
	else					 { leds.strip_range = ONE_SIDE; }
    3e9c:	254b      	movs	r5, #75	; 0x4b
    3e9e:	f8a4 533c 	strh.w	r5, [r4, #828]	; 0x33c
    3ea2:	e62c      	b.n	3afe <colorwave(LEDStruct&)+0x16>
    3ea4:	1fff874a 	.word	0x1fff874a

00003ea8 <confetti(LEDStruct&)>:

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    3ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    3eaa:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

	leds.confetti_fade = cf;
}

void confetti(LEDStruct& leds)
{
    3eae:	b085      	sub	sp, #20
    3eb0:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d054      	beq.n	3f60 <confetti(LEDStruct&)+0xb8>
    3eb6:	f890 233e 	ldrb.w	r2, [r0, #830]	; 0x33e
    3eba:	4e44      	ldr	r6, [pc, #272]	; (3fcc <confetti(LEDStruct&)+0x124>)

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    3ebc:	4620      	mov	r0, r4
    3ebe:	2196      	movs	r1, #150	; 0x96
    3ec0:	f002 fcc0 	bl	6844 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3ec4:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    3ec6:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3eca:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    3ece:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    3ed2:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    3ed6:	3319      	adds	r3, #25
    3ed8:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3eda:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    3ede:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    3ee2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    3ee6:	3719      	adds	r7, #25
    3ee8:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    3eea:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    3eee:	fb03 f305 	mul.w	r3, r3, r5
    3ef2:	2101      	movs	r1, #1
    3ef4:	0c1d      	lsrs	r5, r3, #16
    3ef6:	9100      	str	r1, [sp, #0]
    3ef8:	a803      	add	r0, sp, #12
    3efa:	f204 11c7 	addw	r1, r4, #455	; 0x1c7
    3efe:	b2d2      	uxtb	r2, r2
    3f00:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3f02:	8037      	strh	r7, [r6, #0]
    3f04:	f002 fcfe 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3f08:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    3f0c:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    3f0e:	5ce2      	ldrb	r2, [r4, r3]
    3f10:	f89d 000c 	ldrb.w	r0, [sp, #12]
    3f14:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3f18:	54e2      	strb	r2, [r4, r3]
    3f1a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3f1e:	784a      	ldrb	r2, [r1, #1]
    3f20:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3f24:	704a      	strb	r2, [r1, #1]
    3f26:	788b      	ldrb	r3, [r1, #2]
    3f28:	f89d 200e 	ldrb.w	r2, [sp, #14]
    3f2c:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3f30:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    3f32:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3f36:	b98b      	cbnz	r3, 3f5c <confetti(LEDStruct&)+0xb4>
    3f38:	4620      	mov	r0, r4
    3f3a:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    3f3e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3f40:	7802      	ldrb	r2, [r0, #0]
    3f42:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    3f46:	7842      	ldrb	r2, [r0, #1]
    3f48:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    3f4c:	7882      	ldrb	r2, [r0, #2]
    3f4e:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    3f52:	3003      	adds	r0, #3
    3f54:	4288      	cmp	r0, r1
    3f56:	f1a3 0303 	sub.w	r3, r3, #3
    3f5a:	d1f1      	bne.n	3f40 <confetti(LEDStruct&)+0x98>
}
    3f5c:	b005      	add	sp, #20
    3f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f60:	4e1a      	ldr	r6, [pc, #104]	; (3fcc <confetti(LEDStruct&)+0x124>)
    3f62:	8833      	ldrh	r3, [r6, #0]
    3f64:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3f68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f6c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3f70:	3319      	adds	r3, #25
    3f72:	b29b      	uxth	r3, r3
    3f74:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3f78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3f7c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3f80:	3119      	adds	r1, #25
    3f82:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f84:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f88:	b2d2      	uxtb	r2, r2
    3f8a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
    3f8e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3f92:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f96:	11d2      	asrs	r2, r2, #7
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3f98:	2001      	movs	r0, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3f9a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3f9e:	320a      	adds	r2, #10
	leds.mode_type = CONFETTI;
    3fa0:	2511      	movs	r5, #17
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3fa2:	8031      	strh	r1, [r6, #0]
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    3fa4:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3fa8:	b2d2      	uxtb	r2, r2
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
    3faa:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
    3fae:	f884 0229 	strb.w	r0, [r4, #553]	; 0x229
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
    3fb2:	f884 522c 	strb.w	r5, [r4, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3fb6:	b92b      	cbnz	r3, 3fc4 <confetti(LEDStruct&)+0x11c>
	else { leds.strip_range = ONE_SIDE; }
    3fb8:	234b      	movs	r3, #75	; 0x4b
    3fba:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c

	leds.confetti_fade = cf;
    3fbe:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
    3fc2:	e77b      	b.n	3ebc <confetti(LEDStruct&)+0x14>
void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(10,48)) {
	leds.mode_initialized = 1;
	leds.mode_type = CONFETTI;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    3fc4:	2396      	movs	r3, #150	; 0x96
    3fc6:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    3fca:	e7f8      	b.n	3fbe <confetti(LEDStruct&)+0x116>
    3fcc:	1fff874a 	.word	0x1fff874a

00003fd0 <one_sin(LEDStruct&)>:

}



void one_sin(LEDStruct& leds) {
    3fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3fd4:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

}



void one_sin(LEDStruct& leds) {
    3fd8:	b085      	sub	sp, #20
	if (!leds.mode_initialized) { one_sin_init(leds); }
    3fda:	2b00      	cmp	r3, #0
    3fdc:	f000 8090 	beq.w	4100 <one_sin(LEDStruct&)+0x130>
    3fe0:	f890 4345 	ldrb.w	r4, [r0, #837]	; 0x345
    3fe4:	f890 333f 	ldrb.w	r3, [r0, #831]	; 0x33f
    3fe8:	f890 2346 	ldrb.w	r2, [r0, #838]	; 0x346
    3fec:	f890 1340 	ldrb.w	r1, [r0, #832]	; 0x340
    3ff0:	f8b0 533c 	ldrh.w	r5, [r0, #828]	; 0x33c

	leds.sin_start += leds.sin_inc;
    3ff4:	4423      	add	r3, r4
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    3ff6:	f890 41c5 	ldrb.w	r4, [r0, #453]	; 0x1c5


void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }

	leds.sin_start += leds.sin_inc;
    3ffa:	b2db      	uxtb	r3, r3
    3ffc:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    4000:	f880 3344 	strb.w	r3, [r0, #836]	; 0x344
	if (leds.this_dir) {
    4004:	2c00      	cmp	r4, #0
    4006:	d077      	beq.n	40f8 <one_sin(LEDStruct&)+0x128>
		leds.sin_phase += leds.sin_speed;
    4008:	440a      	add	r2, r1
    400a:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    400e:	2d00      	cmp	r5, #0
    4010:	d06f      	beq.n	40f2 <one_sin(LEDStruct&)+0x122>
    4012:	4604      	mov	r4, r0
    4014:	f200 19c7 	addw	r9, r0, #455	; 0x1c7
    4018:	4605      	mov	r5, r0
    401a:	1c47      	adds	r7, r0, #1
    401c:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    401e:	f04f 08ff 	mov.w	r8, #255	; 0xff
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    4022:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    4026:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    402a:	f894 b341 	ldrb.w	fp, [r4, #833]	; 0x341
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    402e:	f894 e350 	ldrb.w	lr, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4032:	f88d e00e 	strb.w	lr, [sp, #14]
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    4036:	fa5f fa86 	uxtb.w	sl, r6
    403a:	fb03 230a 	mla	r3, r3, sl, r2
    403e:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4040:	0619      	lsls	r1, r3, #24
        in = 255 - in;
    4042:	bf44      	itt	mi
    4044:	43db      	mvnmi	r3, r3
    4046:	b2db      	uxtbmi	r3, r3
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4048:	005b      	lsls	r3, r3, #1
    404a:	b2db      	uxtb	r3, r3
    404c:	1c5a      	adds	r2, r3, #1
    404e:	fb02 f303 	mul.w	r3, r2, r3
    4052:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4054:	fb03 f202 	mul.w	r2, r3, r2
    4058:	1212      	asrs	r2, r2, #8
    405a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    405e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    4062:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4064:	05da      	lsls	r2, r3, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4066:	bf54      	ite	pl
    4068:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    406a:	23ff      	movmi	r3, #255	; 0xff
    406c:	f894 234f 	ldrb.w	r2, [r4, #847]	; 0x34f
    4070:	f88d 200c 	strb.w	r2, [sp, #12]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4074:	4629      	mov	r1, r5
    4076:	a803      	add	r0, sp, #12
    4078:	459b      	cmp	fp, r3
    407a:	bf34      	ite	cc
    407c:	f04f 0bff 	movcc.w	fp, #255	; 0xff
    4080:	f04f 0b00 	movcs.w	fp, #0
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4084:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4088:	f002 fe38 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    408c:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    4090:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    4094:	f894 1227 	ldrb.w	r1, [r4, #551]	; 0x227
    4098:	9100      	str	r1, [sp, #0]
    409a:	fb02 320a 	mla	r2, r2, sl, r3
    409e:	b2d2      	uxtb	r2, r2
    40a0:	465b      	mov	r3, fp
    40a2:	4649      	mov	r1, r9
    40a4:	a803      	add	r0, sp, #12
    40a6:	f002 fc2d 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    40aa:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    40ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
    40b2:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    40b6:	f807 3c01 	strb.w	r3, [r7, #-1]
    40ba:	786a      	ldrb	r2, [r5, #1]
    40bc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    40c0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40c4:	706a      	strb	r2, [r5, #1]
    40c6:	78ab      	ldrb	r3, [r5, #2]
    40c8:	f89d 200e 	ldrb.w	r2, [sp, #14]
    40cc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40d0:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    40d2:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    40d6:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    40da:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    40de:	3601      	adds	r6, #1
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    40e0:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    40e2:	42b2      	cmp	r2, r6
    40e4:	f105 0503 	add.w	r5, r5, #3
    40e8:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    40ec:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    40f0:	dc97      	bgt.n	4022 <one_sin(LEDStruct&)+0x52>
		int sin_bright = qsubd(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}
}
    40f2:	b005      	add	sp, #20
    40f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    40f8:	1a52      	subs	r2, r2, r1
    40fa:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
    40fe:	e786      	b.n	400e <one_sin(LEDStruct&)+0x3e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4100:	4f57      	ldr	r7, [pc, #348]	; (4260 <one_sin(LEDStruct&)+0x290>)
    4102:	883b      	ldrh	r3, [r7, #0]
    4104:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    4108:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    410c:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4110:	3519      	adds	r5, #25
    4112:	b2ad      	uxth	r5, r5
    4114:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    4118:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    411c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4120:	3319      	adds	r3, #25
    4122:	b29b      	uxth	r3, r3
    4124:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4128:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    412c:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4130:	3119      	adds	r1, #25
    4132:	b289      	uxth	r1, r1
    4134:	eb01 2441 	add.w	r4, r1, r1, lsl #9
    4138:	eb01 0484 	add.w	r4, r1, r4, lsl #2
    413c:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4140:	3419      	adds	r4, #25
    4142:	b2a4      	uxth	r4, r4
    4144:	eb04 2c44 	add.w	ip, r4, r4, lsl #9
    4148:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
    414c:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    4150:	f10c 0c19 	add.w	ip, ip, #25
    4154:	fa1f fc8c 	uxth.w	ip, ip
    4158:	eb0c 224c 	add.w	r2, ip, ip, lsl #9
    415c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    4160:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4164:	3219      	adds	r2, #25
    4166:	b292      	uxth	r2, r2
    4168:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    416c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4170:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4174:	3619      	adds	r6, #25
    4176:	b2b6      	uxth	r6, r6
    4178:	eb06 2e46 	add.w	lr, r6, r6, lsl #9
    417c:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
    4180:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4184:	f10e 0e19 	add.w	lr, lr, #25
    4188:	fa1f fe8e 	uxth.w	lr, lr
    418c:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    4190:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    4194:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4198:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    419c:	f108 0819 	add.w	r8, r8, #25
    41a0:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41a4:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41a6:	eb04 2414 	add.w	r4, r4, r4, lsr #8
    41aa:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    41b2:	b2e4      	uxtb	r4, r4
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41b4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    41b8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41bc:	121b      	asrs	r3, r3, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41be:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41c2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41c6:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41ca:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41cc:	eb06 2616 	add.w	r6, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41d0:	fa5f f989 	uxtb.w	r9, r9
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    41d4:	f8a7 8000 	strh.w	r8, [r7]
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41d8:	f3c5 15c0 	ubfx	r5, r5, #7, #1
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    41dc:	2701      	movs	r7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41de:	3301      	adds	r3, #1
    41e0:	f3c1 1181 	ubfx	r1, r1, #6, #2
    41e4:	f3c4 1407 	ubfx	r4, r4, #4, #8
    41e8:	f3cc 1c81 	ubfx	ip, ip, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    41f0:	f3c6 1642 	ubfx	r6, r6, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    41f4:	eb09 0989 	add.w	r9, r9, r9, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    41f8:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
	leds.mode_type = ONE_SIN;
    41fc:	f04f 0812 	mov.w	r8, #18
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    4200:	f880 51c4 	strb.w	r5, [r0, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4204:	b2db      	uxtb	r3, r3
    4206:	3101      	adds	r1, #1
    4208:	f084 0480 	eor.w	r4, r4, #128	; 0x80
    420c:	f10c 0c01 	add.w	ip, ip, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4210:	f3c2 2207 	ubfx	r2, r2, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4214:	3601      	adds	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4216:	f3c9 19c7 	ubfx	r9, r9, #7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    421a:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
    421e:	f880 722d 	strb.w	r7, [r0, #557]	; 0x22d
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
    4222:	f880 7229 	strb.w	r7, [r0, #553]	; 0x229
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
    4226:	f880 822c 	strb.w	r8, [r0, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    422a:	b9a5      	cbnz	r5, 4256 <one_sin(LEDStruct&)+0x286>
	else { leds.strip_range = ONE_SIDE; }
    422c:	254b      	movs	r5, #75	; 0x4b
    422e:	f8a0 533c 	strh.w	r5, [r0, #828]	; 0x33c

	leds.sin_inc		= si;
	leds.sin_speed		= ss;
	leds.sin_cutoff		= sc;
    4232:	f880 4341 	strb.w	r4, [r0, #833]	; 0x341
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    4236:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
	leds.sin_speed		= ss;
    423a:	f880 1340 	strb.w	r1, [r0, #832]	; 0x340
	leds.sin_cutoff		= sc;
	leds.sin_rot		= sr;
    423e:	f880 c342 	strb.w	ip, [r0, #834]	; 0x342
	leds.sin_phase		= sp;
    4242:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
	leds.sin_all_freq	= saf;
    4246:	f880 6343 	strb.w	r6, [r0, #835]	; 0x343
	leds.bg_clr			= bc;
    424a:	f880 e34f 	strb.w	lr, [r0, #847]	; 0x34f
	leds.bg_bri			= bb;
    424e:	f880 9350 	strb.w	r9, [r0, #848]	; 0x350
    4252:	2400      	movs	r4, #0
    4254:	e6ce      	b.n	3ff4 <one_sin(LEDStruct&)+0x24>
void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,6), uint8_t ss = random8(1,5), uint8_t sc = random8(128,240), uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(1,9), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized = 1;
	leds.mode_type = ONE_SIN;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4256:	2596      	movs	r5, #150	; 0x96
    4258:	f8a0 533c 	strh.w	r5, [r0, #828]	; 0x33c
    425c:	e7e9      	b.n	4232 <one_sin(LEDStruct&)+0x262>
    425e:	bf00      	nop
    4260:	1fff874a 	.word	0x1fff874a

00004264 <pride(LEDStruct&)>:
	else { leds.strip_range = ONE_SIDE; }
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    4264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { pride_init(leds); }
    4268:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	else { leds.strip_range = ONE_SIDE; }
}

// This function draws rainbows with an ever-changing,
// widely-varying set of parameters.
void pride(LEDStruct& leds) {
    426c:	b08d      	sub	sp, #52	; 0x34
	if (!leds.mode_initialized) { pride_init(leds); }
    426e:	2b00      	cmp	r3, #0
    4270:	f000 81b6 	beq.w	45e0 <pride(LEDStruct&)+0x37c>
    4274:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    4278:	9301      	str	r3, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    427a:	49d4      	ldr	r1, [pc, #848]	; (45cc <pride(LEDStruct&)+0x368>)
    427c:	680b      	ldr	r3, [r1, #0]
    427e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    4280:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4282:	f645 7328 	movw	r3, #24360	; 0x5f28
    4286:	fb03 f404 	mul.w	r4, r3, r4
    428a:	0c24      	lsrs	r4, r4, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    428c:	0465      	lsls	r5, r4, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    428e:	f3c4 03ca 	ubfx	r3, r4, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4292:	d503      	bpl.n	429c <pride(LEDStruct&)+0x38>
    4294:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4298:	3307      	adds	r3, #7
    429a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    429c:	0a1a      	lsrs	r2, r3, #8
    uint8_t  m   = slope[section];
    429e:	4ecc      	ldr	r6, [pc, #816]	; (45d0 <pride(LEDStruct&)+0x36c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    42a0:	4fcc      	ldr	r7, [pc, #816]	; (45d4 <pride(LEDStruct&)+0x370>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    42a2:	f816 e002 	ldrb.w	lr, [r6, r2]
    42a6:	f837 5012 	ldrh.w	r5, [r7, r2, lsl #1]
    42aa:	f3c3 0246 	ubfx	r2, r3, #1, #7
    42ae:	fb0e 5302 	mla	r3, lr, r2, r5

    if( theta & 0x8000 ) y = -y;
    42b2:	0424      	lsls	r4, r4, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    42b4:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    42b6:	bf48      	it	mi
    42b8:	425b      	negmi	r3, r3
    42ba:	b21b      	sxth	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42bc:	680a      	ldr	r2, [r1, #0]
    42be:	920a      	str	r2, [sp, #40]	; 0x28

	leds.sat8 = beatsin88(87, 220, 250);
    42c0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    42c4:	b29b      	uxth	r3, r3
    42c6:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
	return ret;
    42ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    42cc:	4bc2      	ldr	r3, [pc, #776]	; (45d8 <pride(LEDStruct&)+0x374>)
    42ce:	0c24      	lsrs	r4, r4, #16
    42d0:	fb03 f505 	mul.w	r5, r3, r5
    42d4:	0c2d      	lsrs	r5, r5, #16
    42d6:	34dc      	adds	r4, #220	; 0xdc
    42d8:	b2e4      	uxtb	r4, r4
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    42da:	046a      	lsls	r2, r5, #17
    42dc:	f880 4325 	strb.w	r4, [r0, #805]	; 0x325
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    42e0:	f3c5 03ca 	ubfx	r3, r5, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    42e4:	d503      	bpl.n	42ee <pride(LEDStruct&)+0x8a>
    42e6:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    42ea:	3307      	adds	r3, #7
    42ec:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    42ee:	ea4f 2e13 	mov.w	lr, r3, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    42f2:	f3c3 0246 	ubfx	r2, r3, #1, #7
    42f6:	f816 c00e 	ldrb.w	ip, [r6, lr]
    42fa:	f837 301e 	ldrh.w	r3, [r7, lr, lsl #1]
    42fe:	fb0c 3302 	mla	r3, ip, r2, r3

    if( theta & 0x8000 ) y = -y;
    4302:	042d      	lsls	r5, r5, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4304:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4306:	bf48      	it	mi
    4308:	425b      	negmi	r3, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    430a:	680a      	ldr	r2, [r1, #0]
    430c:	9209      	str	r2, [sp, #36]	; 0x24
    430e:	b21b      	sxth	r3, r3
	leds.brightdepth = beatsin88(341, 96, 224);
    4310:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4314:	b29b      	uxth	r3, r3
	return ret;
    4316:	9d09      	ldr	r5, [sp, #36]	; 0x24
    4318:	f64d 6208 	movw	r2, #56840	; 0xde08
    431c:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
    4320:	fb02 fe05 	mul.w	lr, r2, r5
    4324:	0c1b      	lsrs	r3, r3, #16
    4326:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
    432a:	3360      	adds	r3, #96	; 0x60
    432c:	b2db      	uxtb	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    432e:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    4332:	f880 3322 	strb.w	r3, [r0, #802]	; 0x322
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4336:	f3ce 02ca 	ubfx	r2, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    433a:	d003      	beq.n	4344 <pride(LEDStruct&)+0xe0>
    433c:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    4340:	3207      	adds	r2, #7
    4342:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4344:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4348:	f3c2 0546 	ubfx	r5, r2, #1, #7
    434c:	f816 800c 	ldrb.w	r8, [r6, ip]
    4350:	f837 201c 	ldrh.w	r2, [r7, ip, lsl #1]
    4354:	fb08 2205 	mla	r2, r8, r5, r2
    4358:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    435a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    435e:	bf18      	it	ne
    4360:	4252      	negne	r2, r2
    4362:	b212      	sxth	r2, r2
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4364:	680d      	ldr	r5, [r1, #0]
    4366:	9508      	str	r5, [sp, #32]
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4368:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    436c:	b292      	uxth	r2, r2
    436e:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
	return ret;
    4372:	f8dd c020 	ldr.w	ip, [sp, #32]
    4376:	eb02 2205 	add.w	r2, r2, r5, lsl #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    437a:	f24a 05c8 	movw	r5, #41160	; 0xa0c8
    437e:	fb05 fc0c 	mul.w	ip, r5, ip
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4382:	0c12      	lsrs	r2, r2, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4384:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4388:	f502 52c8 	add.w	r2, r2, #6400	; 0x1900
    438c:	b292      	uxth	r2, r2
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    438e:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
    4392:	f8a0 2328 	strh.w	r2, [r0, #808]	; 0x328
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4396:	f3cc 05ca 	ubfx	r5, ip, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    439a:	d003      	beq.n	43a4 <pride(LEDStruct&)+0x140>
    439c:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    43a0:	3507      	adds	r5, #7
    43a2:	b2ad      	uxth	r5, r5

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    43a4:	ea4f 2815 	mov.w	r8, r5, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43a8:	f3c5 0e46 	ubfx	lr, r5, #1, #7
    43ac:	f816 9008 	ldrb.w	r9, [r6, r8]
    43b0:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    43b4:	fb09 550e 	mla	r5, r9, lr, r5

    if( theta & 0x8000 ) y = -y;
    43b8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43bc:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    43be:	bf18      	it	ne
    43c0:	426d      	negne	r5, r5
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43c2:	f8d1 e000 	ldr.w	lr, [r1]
    43c6:	f8cd e01c 	str.w	lr, [sp, #28]
    43ca:	b22d      	sxth	r5, r5
    43cc:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    43d0:	f04f 0e26 	mov.w	lr, #38	; 0x26
    43d4:	b2ad      	uxth	r5, r5
	return ret;
    43d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
    43da:	f8b0 c320 	ldrh.w	ip, [r0, #800]	; 0x320
    43de:	f8a0 c32a 	strh.w	ip, [r0, #810]	; 0x32a
    43e2:	fb0e f505 	mul.w	r5, lr, r5
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    43e6:	f647 3e98 	movw	lr, #31640	; 0x7b98
    43ea:	fb0e f808 	mul.w	r8, lr, r8
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    43ee:	0c2d      	lsrs	r5, r5, #16
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    43f0:	ea4f 4818 	mov.w	r8, r8, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    43f4:	3517      	adds	r5, #23
    43f6:	b2ad      	uxth	r5, r5
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    43f8:	f418 4f80 	tst.w	r8, #16384	; 0x4000
	if (!leds.mode_initialized) { pride_init(leds); }

	leds.sat8 = beatsin88(87, 220, 250);
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);
    43fc:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4400:	f3c8 0eca 	ubfx	lr, r8, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4404:	d005      	beq.n	4412 <pride(LEDStruct&)+0x1ae>
    4406:	f5ce 6eff 	rsb	lr, lr, #2040	; 0x7f8
    440a:	f10e 0e07 	add.w	lr, lr, #7
    440e:	fa1f fe8e 	uxth.w	lr, lr

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4412:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4416:	f3ce 0946 	ubfx	r9, lr, #1, #7
    441a:	f816 e00a 	ldrb.w	lr, [r6, sl]
    441e:	f837 a01a 	ldrh.w	sl, [r7, sl, lsl #1]
    4422:	fb0e ae09 	mla	lr, lr, r9, sl

    if( theta & 0x8000 ) y = -y;
    4426:	f418 4f00 	tst.w	r8, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    442a:	fa1f fe8e 	uxth.w	lr, lr
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    442e:	f8d1 8000 	ldr.w	r8, [r1]
    4432:	f8cd 8014 	str.w	r8, [sp, #20]

    if( theta & 0x8000 ) y = -y;
    4436:	bf18      	it	ne
    4438:	f1ce 0e00 	rsbne	lr, lr, #0
	return ret;
    443c:	f8dd a014 	ldr.w	sl, [sp, #20]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4440:	6809      	ldr	r1, [r1, #0]

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    4442:	f8b0 831e 	ldrh.w	r8, [r0, #798]	; 0x31e
    4446:	9106      	str	r1, [sp, #24]
    4448:	fa0f fe8e 	sxth.w	lr, lr
    444c:	f5ae 4b00 	sub.w	fp, lr, #32768	; 0x8000
    4450:	fa1f fe8b 	uxth.w	lr, fp
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
    4454:	fa1f fa8a 	uxth.w	sl, sl
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4458:	4960      	ldr	r1, [pc, #384]	; (45dc <pride(LEDStruct&)+0x378>)
	return ret;
    445a:	f8dd 9018 	ldr.w	r9, [sp, #24]
    445e:	f8a0 a32e 	strh.w	sl, [r0, #814]	; 0x32e
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4462:	f640 3bb8 	movw	fp, #3000	; 0xbb8
    4466:	fb0b fb0e 	mul.w	fp, fp, lr
	leds.deltams = leds.ms - leds.sLastMillis;
    446a:	ebc8 080a 	rsb	r8, r8, sl
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    446e:	f8b0 e31c 	ldrh.w	lr, [r0, #796]	; 0x31c
	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
    4472:	f8a0 a31e 	strh.w	sl, [r0, #798]	; 0x31e

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    4476:	fa1f f888 	uxth.w	r8, r8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    447a:	fb01 f909 	mul.w	r9, r1, r9
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    447e:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    4482:	fb18 ee05 	smlabb	lr, r8, r5, lr
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4486:	ea4f 4919 	mov.w	r9, r9, lsr #16
{
    uint16_t beat = beat88( beats_per_minute_88, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    448a:	f10b 0b01 	add.w	fp, fp, #1
    448e:	fa1f f18b 	uxth.w	r1, fp
    4492:	fa1f fe8e 	uxth.w	lr, lr
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4496:	f419 4f80 	tst.w	r9, #16384	; 0x4000
	leds.brightdepth = beatsin88(341, 96, 224);
	leds.brightnessthetainc16 = beatsin88(203, (25 * 256), (40 * 256));
	leds.msmultiplier = beatsin88(147, 23, 60);

	leds.hue16 = leds.sHue16;//gHue * 256;
	leds.hueinc16 = beatsin88(113, 1, 3000);
    449a:	f8a0 132c 	strh.w	r1, [r0, #812]	; 0x32c

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
    449e:	f8a0 8330 	strh.w	r8, [r0, #816]	; 0x330
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
    44a2:	f8a0 e31c 	strh.w	lr, [r0, #796]	; 0x31c
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    44a6:	f3c9 05ca 	ubfx	r5, r9, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    44aa:	d003      	beq.n	44b4 <pride(LEDStruct&)+0x250>
    44ac:	f5c5 65ff 	rsb	r5, r5, #2040	; 0x7f8
    44b0:	3507      	adds	r5, #7
    44b2:	b2ad      	uxth	r5, r5

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    44b4:	ea4f 2a15 	mov.w	sl, r5, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    44b8:	f3c5 0546 	ubfx	r5, r5, #1, #7
    44bc:	f816 b00a 	ldrb.w	fp, [r6, sl]
    44c0:	f837 a01a 	ldrh.w	sl, [r7, sl, lsl #1]
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;
    44c4:	f8a0 e332 	strh.w	lr, [r0, #818]	; 0x332
    44c8:	fb0b a505 	mla	r5, fp, r5, sl
    44cc:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    44ce:	f419 4f00 	tst.w	r9, #32768	; 0x8000
    44d2:	bf18      	it	ne
    44d4:	426d      	negne	r5, r5
    44d6:	b22d      	sxth	r5, r5

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    44d8:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    44dc:	b2ad      	uxth	r5, r5
    44de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    44e2:	0c2d      	lsrs	r5, r5, #16
    44e4:	3505      	adds	r5, #5
    44e6:	b2ad      	uxth	r5, r5
    44e8:	fb08 c805 	mla	r8, r8, r5, ip
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    44ec:	9d01      	ldr	r5, [sp, #4]

	leds.ms = millis();
	leds.deltams = leds.ms - leds.sLastMillis;
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
    44ee:	f8a0 8320 	strh.w	r8, [r0, #800]	; 0x320
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    44f2:	2d00      	cmp	r5, #0
    44f4:	d066      	beq.n	45c4 <pride(LEDStruct&)+0x360>
    44f6:	4605      	mov	r5, r0
    44f8:	f04f 0800 	mov.w	r8, #0
    44fc:	4670      	mov	r0, lr
    44fe:	e00b      	b.n	4518 <pride(LEDStruct&)+0x2b4>
    4500:	f8b5 c32a 	ldrh.w	ip, [r5, #810]	; 0x32a
    4504:	f8b5 132c 	ldrh.w	r1, [r5, #812]	; 0x32c
    4508:	f8b5 0332 	ldrh.w	r0, [r5, #818]	; 0x332
    450c:	f8b5 2328 	ldrh.w	r2, [r5, #808]	; 0x328
    4510:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    4514:	f895 4325 	ldrb.w	r4, [r5, #805]	; 0x325
		leds.hue16 += leds.hueinc16;
    4518:	4461      	add	r1, ip
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    451a:	4410      	add	r0, r2
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    451c:	b289      	uxth	r1, r1
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    451e:	b280      	uxth	r0, r0
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;
    4520:	ea4f 2c11 	mov.w	ip, r1, lsr #8
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
    4524:	f8a5 132a 	strh.w	r1, [r5, #810]	; 0x32a
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4528:	0441      	lsls	r1, r0, #17
		leds.hue8 = leds.hue16 / 256;
    452a:	f885 c324 	strb.w	ip, [r5, #804]	; 0x324

		leds.brightnesstheta16 += leds.brightnessthetainc16;
    452e:	f8a5 0332 	strh.w	r0, [r5, #818]	; 0x332
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4532:	f3c0 02ca 	ubfx	r2, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4536:	d503      	bpl.n	4540 <pride(LEDStruct&)+0x2dc>
    4538:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    453c:	3207      	adds	r2, #7
    453e:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4540:	ea4f 2e12 	mov.w	lr, r2, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4544:	f3c2 0146 	ubfx	r1, r2, #1, #7
    4548:	f816 900e 	ldrb.w	r9, [r6, lr]
    454c:	f837 201e 	ldrh.w	r2, [r7, lr, lsl #1]
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4550:	f88d c010 	strb.w	ip, [sp, #16]
    4554:	fb09 2201 	mla	r2, r9, r1, r2
    4558:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    455a:	0401      	lsls	r1, r0, #16
    455c:	bf48      	it	mi
    455e:	4252      	negmi	r2, r2
    4560:	b212      	sxth	r2, r2
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    4562:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
    4566:	b292      	uxth	r2, r2

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    4568:	fb02 f102 	mul.w	r1, r2, r2
    456c:	0c09      	lsrs	r1, r1, #16
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    456e:	fb01 f003 	mul.w	r0, r1, r3
    4572:	43db      	mvns	r3, r3
    4574:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    4578:	b2db      	uxtb	r3, r3
	for (uint16_t i = 0; i < leds.strip_range; i++) {
		leds.hue16 += leds.hueinc16;
		leds.hue8 = leds.hue16 / 256;

		leds.brightnesstheta16 += leds.brightnessthetainc16;
		leds.b16 = sin16(leds.brightnesstheta16) + 32768;
    457a:	f8a5 2336 	strh.w	r2, [r5, #822]	; 0x336

		leds.bri16 = (uint32_t)((uint32_t)leds.b16 * (uint32_t)leds.b16) / 65536;
    457e:	f8a5 1338 	strh.w	r1, [r5, #824]	; 0x338
		leds.bri8 = (uint32_t)(((uint32_t)leds.bri16) * leds.brightdepth) / 65536;
		leds.bri8 += (255 - leds.brightdepth);
    4582:	f885 3326 	strb.w	r3, [r5, #806]	; 0x326
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4586:	a903      	add	r1, sp, #12
    4588:	a804      	add	r0, sp, #16
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    458a:	f88d 3012 	strb.w	r3, [sp, #18]
    458e:	f88d 4011 	strb.w	r4, [sp, #17]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4592:	f002 fbb3 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    4596:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    459a:	3b01      	subs	r3, #1
    459c:	ebc8 0303 	rsb	r3, r8, r3
    45a0:	b29b      	uxth	r3, r3
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    45a2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		leds.bri8 += (255 - leds.brightdepth);

		CRGB newcolor = CHSV(leds.hue8, leds.sat8, leds.bri8);

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
    45a6:	f8a5 333a 	strh.w	r3, [r5, #826]	; 0x33a
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
    45aa:	4428      	add	r0, r5
    45ac:	2240      	movs	r2, #64	; 0x40
    45ae:	a903      	add	r1, sp, #12
    45b0:	f002 f94a 	bl	6848 <nblend(CRGB&, CRGB const&, unsigned char)>
	leds.sLastMillis = leds.ms;
	leds.sPseudotime += leds.deltams * leds.msmultiplier;
	leds.sHue16 += leds.deltams * beatsin88(400, 5, 9);
	leds.brightnesstheta16 = leds.sPseudotime;

	for (uint16_t i = 0; i < leds.strip_range; i++) {
    45b4:	f108 0801 	add.w	r8, r8, #1
    45b8:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    45bc:	fa1f f888 	uxth.w	r8, r8
    45c0:	4543      	cmp	r3, r8
    45c2:	d89d      	bhi.n	4500 <pride(LEDStruct&)+0x29c>

		leds.pixelnumber = i;
		leds.pixelnumber = (leds.strip_range - 1) - leds.pixelnumber;
		nblend( leds.led_data[leds.pixelnumber], newcolor, 64);
	}
}
    45c4:	b00d      	add	sp, #52	; 0x34
    45c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45ca:	bf00      	nop
    45cc:	1fff9e00 	.word	0x1fff9e00
    45d0:	0000a4fc 	.word	0x0000a4fc
    45d4:	00009c50 	.word	0x00009c50
    45d8:	000174f8 	.word	0x000174f8
    45dc:	0001b580 	.word	0x0001b580
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    45e0:	4911      	ldr	r1, [pc, #68]	; (4628 <pride(LEDStruct&)+0x3c4>)
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
	leds.mode_type = PRIDE;
	leds.use_palette = 0;
    45e2:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    45e6:	880b      	ldrh	r3, [r1, #0]
    45e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    45ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    45f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    45f4:	3319      	adds	r3, #25
    45f6:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    45f8:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    45fc:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    4600:	2501      	movs	r5, #1
	leds.mode_type = PRIDE;
    4602:	2410      	movs	r4, #16
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4604:	800b      	strh	r3, [r1, #0]
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    4606:	f880 21c4 	strb.w	r2, [r0, #452]	; 0x1c4
#ifndef PRIDE_H
#define PRIDE_H

void pride_init(LEDStruct& leds, bool ufr = random8(2)) {
	leds.mode_initialized = 1;
    460a:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.mode_type = PRIDE;
    460e:	f880 422c 	strb.w	r4, [r0, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    4612:	b122      	cbz	r2, 461e <pride(LEDStruct&)+0x3ba>
    4614:	2396      	movs	r3, #150	; 0x96
    4616:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    461a:	9301      	str	r3, [sp, #4]
    461c:	e62d      	b.n	427a <pride(LEDStruct&)+0x16>
	else { leds.strip_range = ONE_SIDE; }
    461e:	234b      	movs	r3, #75	; 0x4b
    4620:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    4624:	9301      	str	r3, [sp, #4]
    4626:	e628      	b.n	427a <pride(LEDStruct&)+0x16>
    4628:	1fff874a 	.word	0x1fff874a

0000462c <prepare_for_explosion(LEDStruct&)>:
	leds.current_stage = WAITING;
}



void prepare_for_explosion(LEDStruct& leds) {
    462c:	b570      	push	{r4, r5, r6, lr}
    462e:	4604      	mov	r4, r0
    4630:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    4632:	4d1b      	ldr	r5, [pc, #108]	; (46a0 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    4634:	2002      	movs	r0, #2
    4636:	f002 ffcf 	bl	75d8 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    463a:	882b      	ldrh	r3, [r5, #0]
    463c:	4418      	add	r0, r3
    463e:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    4642:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4646:	f243 6319 	movw	r3, #13849	; 0x3619
    464a:	4418      	add	r0, r3
    464c:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    464e:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4652:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    4656:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    465a:	b2d2      	uxtb	r2, r2
    465c:	4403      	add	r3, r0
    465e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4662:	b29b      	uxth	r3, r3
    4664:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    4666:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    4668:	eb03 2113 	add.w	r1, r3, r3, lsr #8



void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    466c:	321b      	adds	r2, #27
    466e:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    4672:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352


void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    4676:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    467a:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    467e:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4682:	4620      	mov	r0, r4
    4684:	aa01      	add	r2, sp, #4
    4686:	2196      	movs	r1, #150	; 0x96
    4688:	802b      	strh	r3, [r5, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    468a:	f88d 6004 	strb.w	r6, [sp, #4]
    468e:	f88d 6005 	strb.w	r6, [sp, #5]
    4692:	f88d 6006 	strb.w	r6, [sp, #6]
    4696:	f002 f813 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
}
    469a:	b002      	add	sp, #8
    469c:	bd70      	pop	{r4, r5, r6, pc}
    469e:	bf00      	nop
    46a0:	1fff874a 	.word	0x1fff874a

000046a4 <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    46a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    46a8:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    46ac:	b087      	sub	sp, #28
    46ae:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    46b0:	2b00      	cmp	r3, #0
    46b2:	f000 8089 	beq.w	47c8 <fadeup(LEDStruct&)+0x124>
    46b6:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    46ba:	9303      	str	r3, [sp, #12]
    46bc:	4606      	mov	r6, r0
    46be:	4618      	mov	r0, r3
    46c0:	4b5d      	ldr	r3, [pc, #372]	; (4838 <fadeup(LEDStruct&)+0x194>)
    46c2:	881b      	ldrh	r3, [r3, #0]
    46c4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    46c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    46cc:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    46d0:	3419      	adds	r4, #25
    46d2:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    46d4:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    46d8:	b2db      	uxtb	r3, r3
    46da:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    46de:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    46e2:	ea4f 2929 	mov.w	r9, r9, asr #8
    46e6:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    46ea:	2301      	movs	r3, #1
    46ec:	fa5f f989 	uxtb.w	r9, r9
    46f0:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    46f4:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    46f8:	f004 fe84 	bl	9404 <__aeabi_ui2f>
    46fc:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    4700:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4704:	465b      	mov	r3, fp
    4706:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    470a:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    470e:	46d3      	mov	fp, sl
    4710:	9001      	str	r0, [sp, #4]
    4712:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    4716:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4718:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    471a:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    471e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    4722:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4726:	3419      	adds	r4, #25
    4728:	b2a4      	uxth	r4, r4
    472a:	2373      	movs	r3, #115	; 0x73
    472c:	fb03 f004 	mul.w	r0, r3, r4
    4730:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    4732:	9b01      	ldr	r3, [sp, #4]
    4734:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    4738:	300a      	adds	r0, #10
    473a:	b280      	uxth	r0, r0
    473c:	f004 fe62 	bl	9404 <__aeabi_ui2f>
    4740:	493e      	ldr	r1, [pc, #248]	; (483c <fadeup(LEDStruct&)+0x198>)
    4742:	f004 ff6b 	bl	961c <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4746:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    474a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    474e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4752:	3319      	adds	r3, #25
    4754:	b29b      	uxth	r3, r3
    4756:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    475a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    475e:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4762:	3419      	adds	r4, #25
    4764:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4766:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    476a:	b2c9      	uxtb	r1, r1
    476c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4770:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4774:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    4776:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    477a:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    477c:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    4780:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    4784:	b2c8      	uxtb	r0, r1
    4786:	f004 fe3d 	bl	9404 <__aeabi_ui2f>
    478a:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    478c:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    478e:	4a2c      	ldr	r2, [pc, #176]	; (4840 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    4790:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    4794:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    4796:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    479a:	d8be      	bhi.n	471a <fadeup(LEDStruct&)+0x76>
    479c:	9a03      	ldr	r2, [sp, #12]
    479e:	9e02      	ldr	r6, [sp, #8]
    47a0:	4f25      	ldr	r7, [pc, #148]	; (4838 <fadeup(LEDStruct&)+0x194>)
    47a2:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    47a6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    47aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    47ae:	18f5      	adds	r5, r6, r3
    47b0:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    47b2:	22ff      	movs	r2, #255	; 0xff
    47b4:	803c      	strh	r4, [r7, #0]
    47b6:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    47b8:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    47ba:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    47bc:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    47be:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    47c0:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    47c2:	b007      	add	sp, #28
    47c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    47c8:	9d02      	ldr	r5, [sp, #8]
    47ca:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    47ce:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47d2:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    47d6:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    47da:	3305      	adds	r3, #5
    47dc:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    47de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position] = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    47e2:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    47e6:	4429      	add	r1, r5
    47e8:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47ea:	24ff      	movs	r4, #255	; 0xff
    47ec:	f88d 3016 	strb.w	r3, [sp, #22]
    47f0:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    47f4:	f002 fa82 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    47f8:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    47fc:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4800:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    4804:	f88d 3014 	strb.w	r3, [sp, #20]
    4808:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    480c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4810:	a805      	add	r0, sp, #20
    4812:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4814:	f88d 4015 	strb.w	r4, [sp, #21]
    4818:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    481c:	f002 fa6e 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    4820:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    4824:	2bff      	cmp	r3, #255	; 0xff
    4826:	d1cc      	bne.n	47c2 <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    4828:	9a02      	ldr	r2, [sp, #8]
    482a:	2301      	movs	r3, #1
    482c:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    4830:	b007      	add	sp, #28
    4832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4836:	bf00      	nop
    4838:	1fff874a 	.word	0x1fff874a
    483c:	42c80000 	.word	0x42c80000
    4840:	437f0000 	.word	0x437f0000

00004844 <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    4844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    4848:	4b65      	ldr	r3, [pc, #404]	; (49e0 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    484a:	4605      	mov	r5, r0
    484c:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    484e:	781a      	ldrb	r2, [r3, #0]
    4850:	2196      	movs	r1, #150	; 0x96
    4852:	f001 fff7 	bl	6844 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4856:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    485a:	2600      	movs	r6, #0
    485c:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    4860:	2c00      	cmp	r4, #0
    4862:	d07e      	beq.n	4962 <explosion(LEDStruct&)+0x11e>
    4864:	f8df 9190 	ldr.w	r9, [pc, #400]	; 49f8 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4868:	f04f 08ff 	mov.w	r8, #255	; 0xff
    486c:	e03b      	b.n	48e6 <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    486e:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    4872:	4650      	mov	r0, sl
    4874:	f004 fd16 	bl	92a4 <__addsf3>
    4878:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    487a:	2100      	movs	r1, #0
    487c:	4638      	mov	r0, r7
    487e:	f004 ffb7 	bl	97f0 <__aeabi_fcmplt>
    4882:	4958      	ldr	r1, [pc, #352]	; (49e4 <explosion(LEDStruct&)+0x1a0>)
    4884:	2800      	cmp	r0, #0
    4886:	d168      	bne.n	495a <explosion(LEDStruct&)+0x116>
    4888:	4638      	mov	r0, r7
    488a:	f004 ffcf 	bl	982c <__aeabi_fcmpgt>
    488e:	b100      	cbz	r0, 4892 <explosion(LEDStruct&)+0x4e>
    4890:	4f54      	ldr	r7, [pc, #336]	; (49e4 <explosion(LEDStruct&)+0x1a0>)
    4892:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    4896:	4651      	mov	r1, sl
    4898:	f8d9 0000 	ldr.w	r0, [r9]
    489c:	f004 fe0a 	bl	94b4 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    48a0:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    48a4:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    48a8:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    48ac:	f004 fe02 	bl	94b4 <__aeabi_fmul>
    48b0:	4601      	mov	r1, r0
    48b2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    48b6:	f004 fcf3 	bl	92a0 <__aeabi_fsub>
    48ba:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    48be:	f004 fdf9 	bl	94b4 <__aeabi_fmul>
    48c2:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    48c6:	f004 ffe1 	bl	988c <__aeabi_f2uiz>
    48ca:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    48ce:	b2c0      	uxtb	r0, r0
    48d0:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    48d2:	f106 0601 	add.w	r6, r6, #1
    48d6:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    48da:	bf38      	it	cc
    48dc:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    48e0:	b2f6      	uxtb	r6, r6
    48e2:	42b3      	cmp	r3, r6
    48e4:	d93b      	bls.n	495e <explosion(LEDStruct&)+0x11a>
    48e6:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    48ea:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    48ee:	f004 ffa7 	bl	9840 <__aeabi_f2iz>
    48f2:	4607      	mov	r7, r0
    48f4:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    48f8:	f004 ffc8 	bl	988c <__aeabi_f2uiz>
    48fc:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    4900:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4904:	a901      	add	r1, sp, #4
    4906:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4908:	f88d 3000 	strb.w	r3, [sp]
    490c:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4910:	f002 f9f4 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    4914:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    4918:	1829      	adds	r1, r5, r0
    491a:	5c2b      	ldrb	r3, [r5, r0]
    491c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4920:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4924:	542b      	strb	r3, [r5, r0]
    4926:	f89d 3005 	ldrb.w	r3, [sp, #5]
    492a:	784a      	ldrb	r2, [r1, #1]
    492c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4930:	704a      	strb	r2, [r1, #1]
    4932:	788b      	ldrb	r3, [r1, #2]
    4934:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4938:	fa83 f352 	uqadd8	r3, r3, r2
		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    493c:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    493e:	708b      	strb	r3, [r1, #2]
    4940:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    4944:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    4948:	2b00      	cmp	r3, #0
    494a:	d190      	bne.n	486e <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    494c:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    4950:	4651      	mov	r1, sl
    4952:	f004 fca5 	bl	92a0 <__aeabi_fsub>
    4956:	4607      	mov	r7, r0
    4958:	e78f      	b.n	487a <explosion(LEDStruct&)+0x36>
		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    495a:	2700      	movs	r7, #0
    495c:	e799      	b.n	4892 <explosion(LEDStruct&)+0x4e>
    495e:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    4962:	462a      	mov	r2, r5
    4964:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    4968:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    496a:	7819      	ldrb	r1, [r3, #0]
    496c:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    4970:	7859      	ldrb	r1, [r3, #1]
    4972:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    4976:	7899      	ldrb	r1, [r3, #2]
    4978:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    497c:	3303      	adds	r3, #3
    497e:	4283      	cmp	r3, r0
    4980:	f1a2 0203 	sub.w	r2, r2, #3
    4984:	d1f1      	bne.n	496a <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    4986:	bb44      	cbnz	r4, 49da <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4988:	aa01      	add	r2, sp, #4
    498a:	2196      	movs	r1, #150	; 0x96
    498c:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    498e:	f88d 4004 	strb.w	r4, [sp, #4]
    4992:	f88d 4005 	strb.w	r4, [sp, #5]
    4996:	f88d 4006 	strb.w	r4, [sp, #6]
    499a:	f001 fe91 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    499e:	4812      	ldr	r0, [pc, #72]	; (49e8 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    49a0:	4c12      	ldr	r4, [pc, #72]	; (49ec <explosion(LEDStruct&)+0x1a8>)
    49a2:	8803      	ldrh	r3, [r0, #0]
    49a4:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    49a6:	4912      	ldr	r1, [pc, #72]	; (49f0 <explosion(LEDStruct&)+0x1ac>)
    49a8:	4a12      	ldr	r2, [pc, #72]	; (49f4 <explosion(LEDStruct&)+0x1b0>)
    49aa:	9401      	str	r4, [sp, #4]
    49ac:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    49b0:	8809      	ldrh	r1, [r1, #0]
    49b2:	8812      	ldrh	r2, [r2, #0]
    49b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    49b8:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    49bc:	440a      	add	r2, r1
    49be:	3319      	adds	r3, #25
    49c0:	b29b      	uxth	r3, r3
    49c2:	b292      	uxth	r2, r2
	return ret;
    49c4:	9901      	ldr	r1, [sp, #4]
    49c6:	8003      	strh	r3, [r0, #0]
    49c8:	fb03 f302 	mul.w	r3, r3, r2
    49cc:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    49d0:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    49d2:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    49d6:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    49da:	b002      	add	sp, #8
    49dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    49e0:	1fff873c 	.word	0x1fff873c
    49e4:	42940000 	.word	0x42940000
    49e8:	1fff874a 	.word	0x1fff874a
    49ec:	1fff9e00 	.word	0x1fff9e00
    49f0:	1fff8720 	.word	0x1fff8720
    49f4:	1fff873e 	.word	0x1fff873e
    49f8:	1fff8744 	.word	0x1fff8744

000049fc <fireworks(LEDStruct&)>:


void fireworks(LEDStruct& leds) {
    49fc:	b510      	push	{r4, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    49fe:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks(LEDStruct& leds) {
    4a02:	b082      	sub	sp, #8
    4a04:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    4a06:	bb03      	cbnz	r3, 4a4a <fireworks(LEDStruct&)+0x4e>
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4a08:	2001      	movs	r0, #1
	leds.mode_type = FIREWORKS;
    4a0a:	2114      	movs	r1, #20
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4a0c:	2202      	movs	r2, #2
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
	leds.mode_type = FIREWORKS;
	leds.use_palette = 0;
    4a0e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds) {
	leds.mode_initialized = 1;
    4a12:	f884 022d 	strb.w	r0, [r4, #557]	; 0x22d
	leds.mode_type = FIREWORKS;
    4a16:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
	leds.use_palette = 0;

	leds.current_stage = WAITING;
    4a1a:	f884 2354 	strb.w	r2, [r4, #852]	; 0x354
    4a1e:	2300      	movs	r3, #0
void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    4a20:	aa01      	add	r2, sp, #4
    4a22:	2196      	movs	r1, #150	; 0x96
    4a24:	4620      	mov	r0, r4
    4a26:	f88d 3004 	strb.w	r3, [sp, #4]
    4a2a:	f88d 3005 	strb.w	r3, [sp, #5]
    4a2e:	f88d 3006 	strb.w	r3, [sp, #6]
    4a32:	f001 fe45 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4a36:	4a0f      	ldr	r2, [pc, #60]	; (4a74 <fireworks(LEDStruct&)+0x78>)
			if (millis() >= leds.next_explosion_time) {
    4a38:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    4a3c:	6812      	ldr	r2, [r2, #0]
    4a3e:	9201      	str	r2, [sp, #4]
	return ret;
    4a40:	9a01      	ldr	r2, [sp, #4]
    4a42:	429a      	cmp	r2, r3
    4a44:	d212      	bcs.n	4a6c <fireworks(LEDStruct&)+0x70>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4a46:	b002      	add	sp, #8
    4a48:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4a4a:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    4a4e:	2b01      	cmp	r3, #1
    4a50:	d004      	beq.n	4a5c <fireworks(LEDStruct&)+0x60>
    4a52:	d207      	bcs.n	4a64 <fireworks(LEDStruct&)+0x68>
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    4a54:	f7ff fe26 	bl	46a4 <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4a58:	b002      	add	sp, #8
    4a5a:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    4a5c:	f7ff fef2 	bl	4844 <explosion(LEDStruct&)>
			break;
	}
}
    4a60:	b002      	add	sp, #8
    4a62:	bd10      	pop	{r4, pc}


void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }

	switch (leds.current_stage) {
    4a64:	2b02      	cmp	r3, #2
    4a66:	d0da      	beq.n	4a1e <fireworks(LEDStruct&)+0x22>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    4a68:	b002      	add	sp, #8
    4a6a:	bd10      	pop	{r4, pc}

	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    4a6c:	4620      	mov	r0, r4
    4a6e:	f7ff fddd 	bl	462c <prepare_for_explosion(LEDStruct&)>
    4a72:	e7e8      	b.n	4a46 <fireworks(LEDStruct&)+0x4a>
    4a74:	1fff9e00 	.word	0x1fff9e00

00004a78 <shooting_pole(LEDStruct&)>:
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}


void shooting_pole(LEDStruct& leds) {
    4a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4a7c:	f890 622d 	ldrb.w	r6, [r0, #557]	; 0x22d
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
}


void shooting_pole(LEDStruct& leds) {
    4a80:	b087      	sub	sp, #28
    4a82:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { shooting_pole_init(leds); }
    4a84:	2e00      	cmp	r6, #0
    4a86:	f000 80f2 	beq.w	4c6e <shooting_pole(LEDStruct&)+0x1f6>
    4a8a:	f8b0 233c 	ldrh.w	r2, [r0, #828]	; 0x33c
    4a8e:	f204 17c7 	addw	r7, r4, #455	; 0x1c7

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4a92:	b312      	cbz	r2, 4ada <shooting_pole(LEDStruct&)+0x62>
    4a94:	4626      	mov	r6, r4
    4a96:	2500      	movs	r5, #0
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
    4a98:	f04f 0801 	mov.w	r8, #1
    4a9c:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4aa0:	f8cd 8000 	str.w	r8, [sp]
    4aa4:	ebc5 2105 	rsb	r1, r5, r5, lsl #8
    4aa8:	fb91 f2f2 	sdiv	r2, r1, r2
    4aac:	441a      	add	r2, r3
    4aae:	b2d2      	uxtb	r2, r2
    4ab0:	23ff      	movs	r3, #255	; 0xff
    4ab2:	4639      	mov	r1, r7
    4ab4:	a805      	add	r0, sp, #20
    4ab6:	f001 ff25 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4aba:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4abe:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
        b = rhs.b;
    4ac2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ac6:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    4ac8:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    4aca:	70b3      	strb	r3, [r6, #2]

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4acc:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    4ad0:	3501      	adds	r5, #1
    4ad2:	42aa      	cmp	r2, r5
    4ad4:	f106 0603 	add.w	r6, r6, #3
    4ad8:	dce0      	bgt.n	4a9c <shooting_pole(LEDStruct&)+0x24>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
    4ada:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4ade:	2b00      	cmp	r3, #0
    4ae0:	f000 80bd 	beq.w	4c5e <shooting_pole(LEDStruct&)+0x1e6>
    4ae4:	f894 175d 	ldrb.w	r1, [r4, #1885]	; 0x75d
    4ae8:	f894 375e 	ldrb.w	r3, [r4, #1886]	; 0x75e
    4aec:	440b      	add	r3, r1
    4aee:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
    4af2:	2a4a      	cmp	r2, #74	; 0x4a
    4af4:	f300 8122 	bgt.w	4d3c <shooting_pole(LEDStruct&)+0x2c4>
    4af8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4afc:	18a3      	adds	r3, r4, r2
    4afe:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b02:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4b06:	7858      	ldrb	r0, [r3, #1]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b08:	781e      	ldrb	r6, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4b0a:	f893 e002 	ldrb.w	lr, [r3, #2]
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b0e:	43c9      	mvns	r1, r1
    4b10:	b2c9      	uxtb	r1, r1
    4b12:	1c4a      	adds	r2, r1, #1
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4b14:	fb02 f100 	mul.w	r1, r2, r0
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b18:	fb02 f606 	mul.w	r6, r2, r6
    g = (((uint16_t)g) * scale_fixed) >> 8;
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4b1c:	fb02 f20e 	mul.w	r2, r2, lr
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b20:	1230      	asrs	r0, r6, #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4b22:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4b24:	1212      	asrs	r2, r2, #8
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4b26:	7018      	strb	r0, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4b28:	7059      	strb	r1, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    4b2a:	709a      	strb	r2, [r3, #2]
    4b2c:	3303      	adds	r3, #3
    4b2e:	42ab      	cmp	r3, r5
    4b30:	d1e7      	bne.n	4b02 <shooting_pole(LEDStruct&)+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4b32:	4e89      	ldr	r6, [pc, #548]	; (4d58 <shooting_pole(LEDStruct&)+0x2e0>)
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    4b34:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4b38:	6832      	ldr	r2, [r6, #0]
    4b3a:	9205      	str	r2, [sp, #20]
	return ret;
    4b3c:	9905      	ldr	r1, [sp, #20]
    4b3e:	f8b4 033c 	ldrh.w	r0, [r4, #828]	; 0x33c
}

LIB8STATIC uint16_t beatsin16_halfup( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase)%32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    4b42:	f44f 728c 	mov.w	r2, #280	; 0x118
    4b46:	fb02 f201 	mul.w	r2, r2, r1
    4b4a:	021b      	lsls	r3, r3, #8
    4b4c:	fb03 f302 	mul.w	r3, r3, r2
    4b50:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4b54:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    4b58:	b29a      	uxth	r2, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4b5a:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4b5c:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4b60:	d503      	bpl.n	4b6a <shooting_pole(LEDStruct&)+0xf2>
    4b62:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4b66:	3307      	adds	r3, #7
    4b68:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4b6a:	0a19      	lsrs	r1, r3, #8
    4b6c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 4d64 <shooting_pole(LEDStruct&)+0x2ec>
    uint8_t  m   = slope[section];
    4b70:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 4d68 <shooting_pole(LEDStruct&)+0x2f0>

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4b74:	f81e e001 	ldrb.w	lr, [lr, r1]
    4b78:	f83c 1011 	ldrh.w	r1, [ip, r1, lsl #1]
    4b7c:	f3c3 0346 	ubfx	r3, r3, #1, #7
    4b80:	fb0e 1303 	mla	r3, lr, r3, r1

    if( theta & 0x8000 ) y = -y;
    4b84:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4b86:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4b88:	bf48      	it	mi
    4b8a:	425b      	negmi	r3, r3
    4b8c:	b21b      	sxth	r3, r3
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4b8e:	f1c0 014a 	rsb	r1, r0, #74	; 0x4a
    4b92:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    4b96:	b29b      	uxth	r3, r3
    4b98:	b289      	uxth	r1, r1
    4b9a:	fb01 3103 	mla	r1, r1, r3, r3
    4b9e:	f894 e227 	ldrb.w	lr, [r4, #551]	; 0x227
    4ba2:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4ba6:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4baa:	f8cd e000 	str.w	lr, [sp]
    4bae:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    4bb2:	4639      	mov	r1, r7
    4bb4:	b287      	uxth	r7, r0
    4bb6:	a804      	add	r0, sp, #16
    4bb8:	f001 fea4 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4bbc:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    4bc0:	18e1      	adds	r1, r4, r3
    4bc2:	5ce2      	ldrb	r2, [r4, r3]
    4bc4:	f89d 0010 	ldrb.w	r0, [sp, #16]
    4bc8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4bcc:	54e2      	strb	r2, [r4, r3]
    4bce:	f89d 3011 	ldrb.w	r3, [sp, #17]
    4bd2:	784a      	ldrb	r2, [r1, #1]
    4bd4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4bd8:	704a      	strb	r2, [r1, #1]
    4bda:	788b      	ldrb	r3, [r1, #2]
    4bdc:	f89d 2012 	ldrb.w	r2, [sp, #18]
    4be0:	fa83 f352 	uqadd8	r3, r3, r2
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4be4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 4d6c <shooting_pole(LEDStruct&)+0x2f4>
        b = qadd8( b, rhs.b);
    4be8:	708b      	strb	r3, [r1, #2]
    4bea:	f8d8 3000 	ldr.w	r3, [r8]
    4bee:	07db      	lsls	r3, r3, #31
    4bf0:	d51a      	bpl.n	4c28 <shooting_pole(LEDStruct&)+0x1b0>
    4bf2:	4f5a      	ldr	r7, [pc, #360]	; (4d5c <shooting_pole(LEDStruct&)+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4bf4:	6833      	ldr	r3, [r6, #0]
    4bf6:	9304      	str	r3, [sp, #16]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4bf8:	e897 0006 	ldmia.w	r7, {r1, r2}
	return ret;
    4bfc:	9b04      	ldr	r3, [sp, #16]
    4bfe:	1a5b      	subs	r3, r3, r1
    4c00:	429a      	cmp	r2, r3
    4c02:	d920      	bls.n	4c46 <shooting_pole(LEDStruct&)+0x1ce>

void shooting_pole(LEDStruct& leds) {
	if (!leds.mode_initialized) { shooting_pole_init(leds); }

	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
    4c04:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4c06:	781a      	ldrb	r2, [r3, #0]
    4c08:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
        g = rhs.g;
    4c0c:	785a      	ldrb	r2, [r3, #1]
    4c0e:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
        b = rhs.b;
    4c12:	789a      	ldrb	r2, [r3, #2]
    4c14:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
    4c18:	3303      	adds	r3, #3
    4c1a:	429d      	cmp	r5, r3
    4c1c:	f1a4 0403 	sub.w	r4, r4, #3
    4c20:	d1f1      	bne.n	4c06 <shooting_pole(LEDStruct&)+0x18e>
	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
	strip_sync(leds);
}
    4c22:	b007      	add	sp, #28
    4c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4c28:	4640      	mov	r0, r8
    4c2a:	f002 fd83 	bl	7734 <__cxa_guard_acquire>
    4c2e:	2800      	cmp	r0, #0
    4c30:	f040 8087 	bne.w	4d42 <shooting_pole(LEDStruct&)+0x2ca>
    4c34:	4f49      	ldr	r7, [pc, #292]	; (4d5c <shooting_pole(LEDStruct&)+0x2e4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c36:	6833      	ldr	r3, [r6, #0]
    4c38:	9304      	str	r3, [sp, #16]
    4c3a:	e897 0006 	ldmia.w	r7, {r1, r2}
	return ret;
    4c3e:	9b04      	ldr	r3, [sp, #16]
    4c40:	1a5b      	subs	r3, r3, r1
    4c42:	4293      	cmp	r3, r2
    4c44:	d3de      	bcc.n	4c04 <shooting_pole(LEDStruct&)+0x18c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4c46:	6831      	ldr	r1, [r6, #0]
    4c48:	f894 222e 	ldrb.w	r2, [r4, #558]	; 0x22e
    4c4c:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
    4c50:	9103      	str	r1, [sp, #12]
	return ret;
    4c52:	9903      	ldr	r1, [sp, #12]
    4c54:	6039      	str	r1, [r7, #0]
    4c56:	4413      	add	r3, r2
    4c58:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    4c5c:	e7d2      	b.n	4c04 <shooting_pole(LEDStruct&)+0x18c>
	// Add pole
	for (int i = 0; i < leds.strip_range; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.pole_index + i * 255 / leds.strip_range);
	}
	if (leds.this_dir) { leds.pole_index += leds.pole_diff; }
	else { leds.pole_index -= leds.pole_diff; }
    4c5e:	f894 375d 	ldrb.w	r3, [r4, #1885]	; 0x75d
    4c62:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    4c66:	1a5b      	subs	r3, r3, r1
    4c68:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    4c6c:	e741      	b.n	4af2 <shooting_pole(LEDStruct&)+0x7a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c6e:	4f3c      	ldr	r7, [pc, #240]	; (4d60 <shooting_pole(LEDStruct&)+0x2e8>)
    4c70:	883b      	ldrh	r3, [r7, #0]
    4c72:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c7a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c7e:	3319      	adds	r3, #25
    4c80:	b29b      	uxth	r3, r3
    4c82:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c86:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4c8a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c8e:	3219      	adds	r2, #25
    4c90:	b292      	uxth	r2, r2
    4c92:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    4c96:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    4c9a:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4c9e:	f10e 0e19 	add.w	lr, lr, #25
    4ca2:	fa1f fe8e 	uxth.w	lr, lr
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ca6:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4caa:	eb02 2212 	add.w	r2, r2, r2, lsr #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
    4cae:	2146      	movs	r1, #70	; 0x46
    4cb0:	2032      	movs	r0, #50	; 0x32
    4cb2:	b2dd      	uxtb	r5, r3
    4cb4:	eb0e 291e 	add.w	r9, lr, lr, lsr #8
    4cb8:	fa5f f882 	uxtb.w	r8, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4cbc:	f8a7 e000 	strh.w	lr, [r7]
    4cc0:	f004 f87c 	bl	8dbc <random(long, long)>
    4cc4:	883b      	ldrh	r3, [r7, #0]
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
    4cc6:	f884 0230 	strb.w	r0, [r4, #560]	; 0x230
    4cca:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4cce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4cd2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4cd6:	3319      	adds	r3, #25
    4cd8:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4cda:	fa5f f989 	uxtb.w	r9, r9
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4cde:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4ce2:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4ce6:	eb09 0989 	add.w	r9, r9, r9, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4cea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4cee:	b2c9      	uxtb	r1, r1
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cf0:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4cf4:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4cf8:	eb08 0588 	add.w	r5, r8, r8, lsl #2
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4cfc:	1212      	asrs	r2, r2, #8
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4cfe:	ea4f 11e9 	mov.w	r1, r9, asr #7
    4d02:	396a      	subs	r1, #106	; 0x6a
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4d04:	122d      	asrs	r5, r5, #8
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4d06:	f1c2 0239 	rsb	r2, r2, #57	; 0x39
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4d0a:	1200      	asrs	r0, r0, #8
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4d0c:	f04f 0e01 	mov.w	lr, #1
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4d10:	3501      	adds	r5, #1
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
    4d12:	b2d2      	uxtb	r2, r2
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4d14:	3001      	adds	r0, #1
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
    4d16:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
    4d1a:	2115      	movs	r1, #21
	leds.use_full_range = 0;

	leds.strip_range = sr;
	leds.pole_diff   = pd;
    4d1c:	f884 575e 	strb.w	r5, [r4, #1886]	; 0x75e

void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
	leds.use_palette = 1;
	leds.mode_type = SHOOTING_POLE;
	leds.use_full_range = 0;
    4d20:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4

	leds.strip_range = sr;
    4d24:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d28:	803b      	strh	r3, [r7, #0]
	leds.pole_diff   = pd;
	leds.juggle_fade = jf;
	leds.juggle_beat = jb;
	leds.juggle_diff = jd;
    4d2a:	f884 0232 	strb.w	r0, [r4, #562]	; 0x232
#ifndef SHOOTING_POLE_H
#define SHOOTING_POLE_H


void shooting_pole_init(LEDStruct& leds, uint8_t sr = ONE_SIDE - random8(18, 31), uint8_t pd = random8(1, 6), uint8_t jf = random8(150, 220), uint8_t jb = random(50, 70), uint8_t jd = random8(1, 8)) {
	leds.mode_initialized = 1;
    4d2e:	f884 e22d 	strb.w	lr, [r4, #557]	; 0x22d
	leds.use_palette = 1;
    4d32:	f884 e229 	strb.w	lr, [r4, #553]	; 0x229
	leds.mode_type = SHOOTING_POLE;
    4d36:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    4d3a:	e6a8      	b.n	4a8e <shooting_pole(LEDStruct&)+0x16>
    4d3c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    4d40:	e6f7      	b.n	4b32 <shooting_pole(LEDStruct&)+0xba>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4d42:	6833      	ldr	r3, [r6, #0]
    4d44:	4f05      	ldr	r7, [pc, #20]	; (4d5c <shooting_pole(LEDStruct&)+0x2e4>)
    4d46:	9302      	str	r3, [sp, #8]
	return ret;
    4d48:	9b02      	ldr	r3, [sp, #8]
    4d4a:	603b      	str	r3, [r7, #0]
    4d4c:	2332      	movs	r3, #50	; 0x32
	else { leds.pole_index -= leds.pole_diff; }

	// Add juggle
	for (int i = leds.strip_range; i < ONE_SIDE; i++) { leds.led_data[i].fadeToBlackBy(leds.juggle_fade); }
	leds.led_data[beatsin16_halfup(leds.juggle_beat, leds.strip_range, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
	EVERY_N_MILLIS(50) { leds.juggle_index += leds.juggle_diff; }
    4d4e:	4640      	mov	r0, r8
    4d50:	607b      	str	r3, [r7, #4]
    4d52:	f002 fcf5 	bl	7740 <__cxa_guard_release>
    4d56:	e76e      	b.n	4c36 <shooting_pole(LEDStruct&)+0x1be>
    4d58:	1fff9e00 	.word	0x1fff9e00
    4d5c:	1fff93fc 	.word	0x1fff93fc
    4d60:	1fff874a 	.word	0x1fff874a
    4d64:	00009c50 	.word	0x00009c50
    4d68:	0000a4fc 	.word	0x0000a4fc
    4d6c:	1fff9440 	.word	0x1fff9440

00004d70 <two_sin(LEDStruct&)>:
	leds.sin_phase  = 0;
	leds.two_phase  = 0;
}


void two_sin(LEDStruct& leds) {
    4d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4d74:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
	leds.sin_phase  = 0;
	leds.two_phase  = 0;
}


void two_sin(LEDStruct& leds) {
    4d78:	b083      	sub	sp, #12
	if (!leds.mode_initialized) { two_sin_init(leds); }
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	f000 80eb 	beq.w	4f56 <two_sin(LEDStruct&)+0x1e6>
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    4d80:	f890 51c5 	ldrb.w	r5, [r0, #453]	; 0x1c5
    4d84:	f890 4346 	ldrb.w	r4, [r0, #838]	; 0x346
    4d88:	f890 2340 	ldrb.w	r2, [r0, #832]	; 0x340
    4d8c:	f890 134c 	ldrb.w	r1, [r0, #844]	; 0x34c
    4d90:	f890 3349 	ldrb.w	r3, [r0, #841]	; 0x349
    4d94:	2d00      	cmp	r5, #0
    4d96:	f040 81a5 	bne.w	50e4 <two_sin(LEDStruct&)+0x374>
    4d9a:	4422      	add	r2, r4
    4d9c:	440b      	add	r3, r1
    4d9e:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
    4da2:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4da6:	f890 c347 	ldrb.w	ip, [r0, #839]	; 0x347
    4daa:	f890 2342 	ldrb.w	r2, [r0, #834]	; 0x342
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4dae:	f890 434d 	ldrb.w	r4, [r0, #845]	; 0x34d
    4db2:	f890 334a 	ldrb.w	r3, [r0, #842]	; 0x34a

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4db6:	f8b0 133c 	ldrh.w	r1, [r0, #828]	; 0x33c
	if (!leds.mode_initialized) { two_sin_init(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4dba:	4494      	add	ip, r2
    4dbc:	fa5f fc8c 	uxtb.w	ip, ip
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4dc0:	4423      	add	r3, r4

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4dc2:	2901      	cmp	r1, #1
	if (!leds.mode_initialized) { two_sin_init(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
    4dc4:	f880 c347 	strb.w	ip, [r0, #839]	; 0x347
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.
    4dc8:	f880 334d 	strb.w	r3, [r0, #845]	; 0x34d

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4dcc:	f340 80c0 	ble.w	4f50 <two_sin(LEDStruct&)+0x1e0>
    4dd0:	4604      	mov	r4, r0
    4dd2:	4606      	mov	r6, r0
    4dd4:	2700      	movs	r7, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4dd6:	25ff      	movs	r5, #255	; 0xff
    4dd8:	e08c      	b.n	4ef4 <two_sin(LEDStruct&)+0x184>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4dda:	2b00      	cmp	r3, #0
        in = 255 - in;
    4ddc:	bfbc      	itt	lt
    4dde:	43c9      	mvnlt	r1, r1
    4de0:	b2c9      	uxtblt	r1, r1
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    4de2:	0049      	lsls	r1, r1, #1
    4de4:	b2c9      	uxtb	r1, r1
    4de6:	1c4b      	adds	r3, r1, #1
    4de8:	fb03 f101 	mul.w	r1, r3, r1
    4dec:	1209      	asrs	r1, r1, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4dee:	fb01 f303 	mul.w	r3, r1, r3
    4df2:	121b      	asrs	r3, r3, #8
    4df4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4df8:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
    4dfc:	b289      	uxth	r1, r1
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4dfe:	05cb      	lsls	r3, r1, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4e00:	bf54      	ite	pl
    4e02:	fa5f fe81 	uxtbpl.w	lr, r1

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4e06:	f04f 0eff 	movmi.w	lr, #255	; 0xff
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    4e0a:	ebc8 0e0e 	rsb	lr, r8, lr
    4e0e:	fa5f fe8e 	uxtb.w	lr, lr
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    4e12:	f894 334c 	ldrb.w	r3, [r4, #844]	; 0x34c

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    4e16:	f884 e348 	strb.w	lr, [r4, #840]	; 0x348
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    4e1a:	3b80      	subs	r3, #128	; 0x80
    4e1c:	4403      	add	r3, r0
    4e1e:	b2db      	uxtb	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4e20:	b259      	sxtb	r1, r3
    4e22:	2900      	cmp	r1, #0
        in = 255 - in;
    4e24:	bfba      	itte	lt
    4e26:	43da      	mvnlt	r2, r3
    4e28:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4e2a:	461a      	movge	r2, r3
    4e2c:	0052      	lsls	r2, r2, #1
    4e2e:	b2d2      	uxtb	r2, r2
    4e30:	1c50      	adds	r0, r2, #1
    4e32:	fb00 f202 	mul.w	r2, r0, r2
    4e36:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4e38:	fb02 f000 	mul.w	r0, r2, r0
    4e3c:	1200      	asrs	r0, r0, #8
    4e3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e42:	eba2 0240 	sub.w	r2, r2, r0, lsl #1
    4e46:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4e48:	05d0      	lsls	r0, r2, #23
    4e4a:	f894 034b 	ldrb.w	r0, [r4, #843]	; 0x34b

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4e4e:	bf54      	ite	pl
    4e50:	b2d2      	uxtbpl	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4e52:	22ff      	movmi	r2, #255	; 0xff
    4e54:	4290      	cmp	r0, r2
    4e56:	d279      	bcs.n	4f4c <two_sin(LEDStruct&)+0x1dc>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4e58:	2900      	cmp	r1, #0
        in = 255 - in;
    4e5a:	bfbc      	itt	lt
    4e5c:	43db      	mvnlt	r3, r3
    4e5e:	b2db      	uxtblt	r3, r3
    4e60:	005a      	lsls	r2, r3, #1
    4e62:	b2d2      	uxtb	r2, r2
    4e64:	1c53      	adds	r3, r2, #1
    4e66:	fb03 f202 	mul.w	r2, r3, r2
    4e6a:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4e6c:	fb02 f303 	mul.w	r3, r2, r3
    4e70:	121b      	asrs	r3, r3, #8
    4e72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4e76:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    4e7a:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4e7c:	05d3      	lsls	r3, r2, #23

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4e7e:	bf54      	ite	pl
    4e80:	b2d3      	uxtbpl	r3, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4e82:	23ff      	movmi	r3, #255	; 0xff
    4e84:	1a1b      	subs	r3, r3, r0
    4e86:	b2db      	uxtb	r3, r3
    4e88:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4e8c:	4631      	mov	r1, r6
    4e8e:	a801      	add	r0, sp, #4
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4e90:	f88d c004 	strb.w	ip, [sp, #4]
    4e94:	f88d e006 	strb.w	lr, [sp, #6]
    4e98:	f88d 5005 	strb.w	r5, [sp, #5]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4e9c:	f001 ff2e 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);
    4ea0:	f894 234e 	ldrb.w	r2, [r4, #846]	; 0x34e
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4ea4:	f894 334d 	ldrb.w	r3, [r4, #845]	; 0x34d
    4ea8:	f88d 2002 	strb.w	r2, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4eac:	a901      	add	r1, sp, #4
    4eae:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    4eb0:	f88d 3000 	strb.w	r3, [sp]
    4eb4:	f88d 5001 	strb.w	r5, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    4eb8:	f001 ff20 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    4ebc:	7833      	ldrb	r3, [r6, #0]
    4ebe:	f89d 2004 	ldrb.w	r2, [sp, #4]
    4ec2:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4ec6:	7033      	strb	r3, [r6, #0]
    4ec8:	7872      	ldrb	r2, [r6, #1]
    4eca:	f89d 3005 	ldrb.w	r3, [sp, #5]
    4ece:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4ed2:	7072      	strb	r2, [r6, #1]
    4ed4:	78b3      	ldrb	r3, [r6, #2]
    4ed6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    4eda:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4ede:	70b3      	strb	r3, [r6, #2]
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }

	leds.sin_hue += leds.sin_rot;                                                // Hue rotation is fun for this_wave.
	leds.two_hue += leds.two_rot;                                                // It's also fun for that_wave.

	for (int k = 0; k < leds.strip_range - 1; k++) {
    4ee0:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    4ee4:	3701      	adds	r7, #1
    4ee6:	3b01      	subs	r3, #1
    4ee8:	42bb      	cmp	r3, r7
    4eea:	f106 0603 	add.w	r6, r6, #3
    4eee:	dd2f      	ble.n	4f50 <two_sin(LEDStruct&)+0x1e0>
    4ef0:	f894 c347 	ldrb.w	ip, [r4, #839]	; 0x347
		leds.sin_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);     // qsub sets a minimum value called this_cutoff. If < this_cutoff, then bright = 0. Otherwise, bright = 128 (as defined in qsub)..
    4ef4:	f894 0343 	ldrb.w	r0, [r4, #835]	; 0x343
    4ef8:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    4efc:	f894 8341 	ldrb.w	r8, [r4, #833]	; 0x341
    4f00:	fb10 f007 	smulbb	r0, r0, r7
    4f04:	b2c0      	uxtb	r0, r0
    4f06:	4401      	add	r1, r0
    4f08:	b2c9      	uxtb	r1, r1
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4f0a:	b24b      	sxtb	r3, r1
    4f0c:	2b00      	cmp	r3, #0
        in = 255 - in;
    4f0e:	bfba      	itte	lt
    4f10:	43ca      	mvnlt	r2, r1
    4f12:	b2d2      	uxtblt	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    4f14:	460a      	movge	r2, r1
    4f16:	0052      	lsls	r2, r2, #1
    4f18:	b2d2      	uxtb	r2, r2
    4f1a:	f102 0e01 	add.w	lr, r2, #1
    4f1e:	fb0e f202 	mul.w	r2, lr, r2
    4f22:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    4f24:	fb02 fe0e 	mul.w	lr, r2, lr
    4f28:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    4f2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4f30:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
    4f34:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    4f36:	f412 7f80 	tst.w	r2, #256	; 0x100

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    4f3a:	bf0c      	ite	eq
    4f3c:	b2d2      	uxtbeq	r2, r2

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    4f3e:	22ff      	movne	r2, #255	; 0xff
    4f40:	4590      	cmp	r8, r2
    4f42:	f4ff af4a 	bcc.w	4dda <two_sin(LEDStruct&)+0x6a>
    4f46:	f04f 0e00 	mov.w	lr, #0
    4f4a:	e762      	b.n	4e12 <two_sin(LEDStruct&)+0xa2>
		leds.two_bri = qsuba(cubicwave8((k * leds.sin_all_freq) + 128 + leds.two_phase), leds.two_cutoff); // This wave is 180 degrees out of phase (with the value of 128).
    4f4c:	2300      	movs	r3, #0
    4f4e:	e79b      	b.n	4e88 <two_sin(LEDStruct&)+0x118>

		leds.led_data[k] = CHSV(leds.sin_hue, 255, leds.sin_bri);                              // Assigning hues and brightness to the led array.
		leds.led_data[k] += CHSV(leds.two_hue, 255, leds.two_bri);

	}
}
    4f50:	b003      	add	sp, #12
    4f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f56:	4d69      	ldr	r5, [pc, #420]	; (50fc <two_sin(LEDStruct&)+0x38c>)
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
    4f58:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    4f5c:	882b      	ldrh	r3, [r5, #0]
    4f5e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4f62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4f66:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4f6a:	3319      	adds	r3, #25
    4f6c:	fa1f fc83 	uxth.w	ip, r3
    4f70:	eb0c 2e4c 	add.w	lr, ip, ip, lsl #9
    4f74:	eb0c 0e8e 	add.w	lr, ip, lr, lsl #2
    4f78:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    4f7c:	f10e 0e19 	add.w	lr, lr, #25
    4f80:	fa1f fe8e 	uxth.w	lr, lr
    4f84:	eb0e 274e 	add.w	r7, lr, lr, lsl #9
    4f88:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    4f8c:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    4f90:	3719      	adds	r7, #25
    4f92:	b2bf      	uxth	r7, r7
    4f94:	eb07 2347 	add.w	r3, r7, r7, lsl #9
    4f98:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4f9c:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4fa0:	3319      	adds	r3, #25
    4fa2:	b29b      	uxth	r3, r3
    4fa4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    4fa8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4fac:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4fb0:	3119      	adds	r1, #25
    4fb2:	b289      	uxth	r1, r1
    4fb4:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4fb8:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    4fbc:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4fc0:	3619      	adds	r6, #25
    4fc2:	b2b6      	uxth	r6, r6
    4fc4:	eb06 2446 	add.w	r4, r6, r6, lsl #9
    4fc8:	eb06 0484 	add.w	r4, r6, r4, lsl #2
    4fcc:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    4fd0:	3419      	adds	r4, #25
    4fd2:	b2a4      	uxth	r4, r4
    4fd4:	eb04 2844 	add.w	r8, r4, r4, lsl #9
    4fd8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
    4fdc:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    4fe0:	f108 0819 	add.w	r8, r8, #25
    4fe4:	fa1f f888 	uxth.w	r8, r8
    4fe8:	eb08 2248 	add.w	r2, r8, r8, lsl #9
    4fec:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    4ff0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ff4:	3219      	adds	r2, #25
    4ff6:	b292      	uxth	r2, r2
    4ff8:	eb02 2942 	add.w	r9, r2, r2, lsl #9
    4ffc:	eb02 0989 	add.w	r9, r2, r9, lsl #2
    5000:	f509 5958 	add.w	r9, r9, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5004:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    5008:	eb08 2818 	add.w	r8, r8, r8, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    500c:	f109 0919 	add.w	r9, r9, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5010:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5014:	fa1f f989 	uxth.w	r9, r9
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5018:	fa5f fa82 	uxtb.w	sl, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    501c:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    5020:	eb04 2414 	add.w	r4, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5024:	fa5f f888 	uxtb.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5028:	b2da      	uxtb	r2, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    502a:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    502e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5032:	b2f6      	uxtb	r6, r6
    5034:	b2e4      	uxtb	r4, r4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5036:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
    503a:	eb0a 0aca 	add.w	sl, sl, sl, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    503e:	eb09 2b19 	add.w	fp, r9, r9, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5042:	f3c1 1381 	ubfx	r3, r1, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5046:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    504a:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
    504e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5052:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    505a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    505e:	f3c8 1807 	ubfx	r8, r8, #4, #8
    5062:	f3cb 1b42 	ubfx	fp, fp, #5, #3
    5066:	f3ca 1a47 	ubfx	sl, sl, #5, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    506a:	f8a5 9000 	strh.w	r9, [r5]
void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
    506e:	2113      	movs	r1, #19

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    5070:	2501      	movs	r5, #1
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
    5072:	f880 c1c4 	strb.w	ip, [r0, #452]	; 0x1c4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5076:	fa5f fe8e 	uxtb.w	lr, lr
    507a:	b2ff      	uxtb	r7, r7
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    507c:	f3c2 2207 	ubfx	r2, r2, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5080:	3301      	adds	r3, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5082:	f3c6 2607 	ubfx	r6, r6, #8, #8
    5086:	f3c4 2407 	ubfx	r4, r4, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    508a:	f088 0880 	eor.w	r8, r8, #128	; 0x80
    508e:	44ab      	add	fp, r5
    5090:	f08a 0a80 	eor.w	sl, sl, #128	; 0x80

void two_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t sh = random8(), uint8_t th = random8(), 
	uint8_t ss = random8(5), uint8_t ts = random8(1, 5), uint8_t sr = random8(3), uint8_t tr = random8(3), 
	uint8_t sc = random8(128, 240), uint8_t tc = random8(128, 200), uint8_t saf = random8(1, 9)) {

	leds.mode_initialized = 1;
    5094:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.mode_type = TWO_SIN;
    5098:	f880 122c 	strb.w	r1, [r0, #556]	; 0x22c
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    509c:	f1bc 0f00 	cmp.w	ip, #0
    50a0:	d127      	bne.n	50f2 <two_sin(LEDStruct&)+0x382>
	else					 { leds.strip_range = ONE_SIDE; }
    50a2:	214b      	movs	r1, #75	; 0x4b
    50a4:	f8a0 133c 	strh.w	r1, [r0, #828]	; 0x33c
	leds.sin_rot	= sr;
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;
	leds.two_cutoff = tc;
	leds.sin_all_freq = saf;
	leds.sin_phase  = 0;
    50a8:	2500      	movs	r5, #0
	leds.two_phase  = 0;
    50aa:	4629      	mov	r1, r5
	leds.sin_hue	= sh;
	leds.two_hue	= th;
	leds.sin_speed	= ss;
	leds.two_speed	= ts;
	leds.sin_rot	= sr;
	leds.two_rot	= tr;
    50ac:	f880 434a 	strb.w	r4, [r0, #842]	; 0x34a
	leds.sin_cutoff = sc;
	leds.two_cutoff = tc;
	leds.sin_all_freq = saf;
	leds.sin_phase  = 0;
    50b0:	f880 5346 	strb.w	r5, [r0, #838]	; 0x346
	leds.two_phase  = 0;
    50b4:	f880 534c 	strb.w	r5, [r0, #844]	; 0x34c
    50b8:	462c      	mov	r4, r5


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    50ba:	f890 51c5 	ldrb.w	r5, [r0, #453]	; 0x1c5
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else					 { leds.strip_range = ONE_SIDE; }

	leds.sin_hue	= sh;
    50be:	f880 e347 	strb.w	lr, [r0, #839]	; 0x347
	leds.two_hue	= th;
    50c2:	f880 734d 	strb.w	r7, [r0, #845]	; 0x34d
	leds.sin_speed	= ss;
    50c6:	f880 2340 	strb.w	r2, [r0, #832]	; 0x340
	leds.two_speed	= ts;
    50ca:	f880 3349 	strb.w	r3, [r0, #841]	; 0x349
	leds.sin_rot	= sr;
    50ce:	f880 6342 	strb.w	r6, [r0, #834]	; 0x342
	leds.two_rot	= tr;
	leds.sin_cutoff = sc;
    50d2:	f880 8341 	strb.w	r8, [r0, #833]	; 0x341
	leds.two_cutoff = tc;
    50d6:	f880 a34b 	strb.w	sl, [r0, #843]	; 0x34b
	leds.sin_all_freq = saf;
    50da:	f880 b343 	strb.w	fp, [r0, #835]	; 0x343


void two_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { two_sin_init(leds); }
	
	if (!leds.this_dir) { leds.sin_phase += leds.sin_speed; leds.two_phase += leds.two_speed; }
    50de:	2d00      	cmp	r5, #0
    50e0:	f43f ae5b 	beq.w	4d9a <two_sin(LEDStruct&)+0x2a>
	else				{ leds.sin_phase -= leds.sin_speed; leds.two_phase -= leds.two_speed; }
    50e4:	1aa2      	subs	r2, r4, r2
    50e6:	1acb      	subs	r3, r1, r3
    50e8:	f880 2346 	strb.w	r2, [r0, #838]	; 0x346
    50ec:	f880 334c 	strb.w	r3, [r0, #844]	; 0x34c
    50f0:	e659      	b.n	4da6 <two_sin(LEDStruct&)+0x36>

	leds.mode_initialized = 1;
	leds.mode_type = TWO_SIN;
	leds.use_palette = 0;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    50f2:	2196      	movs	r1, #150	; 0x96
    50f4:	f8a0 133c 	strh.w	r1, [r0, #828]	; 0x33c
    50f8:	e7d6      	b.n	50a8 <two_sin(LEDStruct&)+0x338>
    50fa:	bf00      	nop
    50fc:	1fff874a 	.word	0x1fff874a

00005100 <noise(LEDStruct&)>:

	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise(LEDStruct& leds) {
    5100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { noise_init(leds); }
    5104:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d

	leds.noise_scale = s;
	leds.noise_dist = d;
}

void noise(LEDStruct& leds) {
    5108:	b085      	sub	sp, #20
    510a:	4605      	mov	r5, r0
	if (!leds.mode_initialized) { noise_init(leds); }
    510c:	2b00      	cmp	r3, #0
    510e:	d060      	beq.n	51d2 <noise(LEDStruct&)+0xd2>

	for (int i = 0; i < leds.strip_range; i++) {
    5110:	f8b0 333c 	ldrh.w	r3, [r0, #828]	; 0x33c
    5114:	f8b0 1762 	ldrh.w	r1, [r0, #1890]	; 0x762
    5118:	b37b      	cbz	r3, 517a <noise(LEDStruct&)+0x7a>
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    511a:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5270 <noise(LEDStruct&)+0x170>
    511e:	f205 18c7 	addw	r8, r5, #455	; 0x1c7
    5122:	462c      	mov	r4, r5
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else				  	 { leds.strip_range = ONE_SIDE; }

	leds.noise_scale = s;
	leds.noise_dist = d;
    5124:	2600      	movs	r6, #0
void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5126:	2701      	movs	r7, #1

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    5128:	f8b5 0760 	ldrh.w	r0, [r5, #1888]	; 0x760
    512c:	fb10 f006 	smulbb	r0, r0, r6
    5130:	b280      	uxth	r0, r0
    5132:	4401      	add	r1, r0
    5134:	b289      	uxth	r1, r1
    5136:	f001 ff89 	bl	704c <inoise8(unsigned short, unsigned short)>
    513a:	fba9 3200 	umull	r3, r2, r9, r0
    513e:	eb00 12d2 	add.w	r2, r0, r2, lsr #7
    5142:	f002 02ff 	and.w	r2, r2, #255	; 0xff
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    5146:	9700      	str	r7, [sp, #0]
    5148:	23ff      	movs	r3, #255	; 0xff

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
    514a:	f885 2764 	strb.w	r2, [r5, #1892]	; 0x764
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
    514e:	4641      	mov	r1, r8
    5150:	a803      	add	r0, sp, #12
    5152:	f001 fbd7 	bl	6904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5156:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
        b = rhs.b;
    515a:	f89d 300e 	ldrb.w	r3, [sp, #14]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    515e:	f89d 200d 	ldrb.w	r2, [sp, #13]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5162:	7021      	strb	r1, [r4, #0]
        g = rhs.g;
    5164:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    5166:	70a3      	strb	r3, [r4, #2]
}

void noise(LEDStruct& leds) {
	if (!leds.mode_initialized) { noise_init(leds); }

	for (int i = 0; i < leds.strip_range; i++) {
    5168:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    516c:	f8b5 1762 	ldrh.w	r1, [r5, #1890]	; 0x762
    5170:	3601      	adds	r6, #1
    5172:	42b3      	cmp	r3, r6
    5174:	f104 0403 	add.w	r4, r4, #3
    5178:	dcd6      	bgt.n	5128 <noise(LEDStruct&)+0x28>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    517a:	4b3a      	ldr	r3, [pc, #232]	; (5264 <noise(LEDStruct&)+0x164>)
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	9303      	str	r3, [sp, #12]
	return ret;
    5180:	9c03      	ldr	r4, [sp, #12]
    5182:	f44f 232f 	mov.w	r3, #716800	; 0xaf000
    5186:	fb03 f404 	mul.w	r4, r3, r4
    518a:	0e24      	lsrs	r4, r4, #24
}

/// beat8 generates an 8-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint8_t beat8( accum88 beats_per_minute, uint32_t timebase = 0)
{
    return beat16( beats_per_minute, timebase) >> 8;
    518c:	b2e3      	uxtb	r3, r4
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
    518e:	0658      	lsls	r0, r3, #25
    5190:	d55f      	bpl.n	5252 <noise(LEDStruct&)+0x152>
        offset = (uint8_t)255 - offset;
    5192:	43db      	mvns	r3, r3
    5194:	b2d8      	uxtb	r0, r3
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5196:	f000 030f 	and.w	r3, r0, #15
    if( theta & 0x40) secoffset++;
    519a:	1c5a      	adds	r2, r3, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    519c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    51a0:	1103      	asrs	r3, r0, #4
    51a2:	4831      	ldr	r0, [pc, #196]	; (5268 <noise(LEDStruct&)+0x168>)
    51a4:	005b      	lsls	r3, r3, #1
    51a6:	18c6      	adds	r6, r0, r3
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    51a8:	5cc3      	ldrb	r3, [r0, r3]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
    51aa:	7870      	ldrb	r0, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
    51ac:	fb10 f202 	smulbb	r2, r0, r2
    51b0:	eb03 1322 	add.w	r3, r3, r2, asr #4
    51b4:	b2db      	uxtb	r3, r3
    if( theta & 0x80 ) y = -y;
    51b6:	0622      	lsls	r2, r4, #24
    51b8:	bf48      	it	mi
    51ba:	425b      	negmi	r3, r3
    51bc:	b25b      	sxtb	r3, r3

    y += 128;
    51be:	3b80      	subs	r3, #128	; 0x80
		leds.noise_index = inoise8(i * leds.noise_scale, leds.noise_dist + i * leds.noise_scale) % 255;
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.noise_index, 255, LINEARBLEND);
	}
	leds.noise_dist += beatsin8(10, 1, 4);
    51c0:	f3c3 1381 	ubfx	r3, r3, #6, #2
    51c4:	3301      	adds	r3, #1
    51c6:	4419      	add	r1, r3
    51c8:	f8a5 1762 	strh.w	r1, [r5, #1890]	; 0x762
}
    51cc:	b005      	add	sp, #20
    51ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51d2:	4c26      	ldr	r4, [pc, #152]	; (526c <noise(LEDStruct&)+0x16c>)
    51d4:	8823      	ldrh	r3, [r4, #0]
    51d6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    51da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    51de:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    51e2:	3319      	adds	r3, #25
    51e4:	b29b      	uxth	r3, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51e6:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    51ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    51ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    51f2:	3219      	adds	r2, #25
    51f4:	b292      	uxth	r2, r2
    51f6:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    51fa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    51fe:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5202:	3019      	adds	r0, #25
    5204:	b280      	uxth	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5206:	2646      	movs	r6, #70	; 0x46
    5208:	f64b 7168 	movw	r1, #49000	; 0xbf68
    520c:	fb06 f202 	mul.w	r2, r6, r2
    5210:	fb01 f100 	mul.w	r1, r1, r0
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5214:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5218:	0c09      	lsrs	r1, r1, #16
    521a:	0c12      	lsrs	r2, r2, #16
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    521c:	2601      	movs	r6, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    521e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5222:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    5226:	321e      	adds	r2, #30
	leds.mode_type = NOISE;
    5228:	2716      	movs	r7, #22
	leds.use_palette = 1;
	leds.use_full_range = ufr;
    522a:	f885 31c4 	strb.w	r3, [r5, #452]	; 0x1c4
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    522e:	8020      	strh	r0, [r4, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint16_t random16( uint16_t min, uint16_t lim)
{
    uint16_t delta = lim - min;
    uint16_t r = random16( delta) + min;
    5230:	b289      	uxth	r1, r1
    5232:	b292      	uxth	r2, r2
#ifndef NOISE_H
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
    5234:	f885 622d 	strb.w	r6, [r5, #557]	; 0x22d
	leds.mode_type = NOISE;
	leds.use_palette = 1;
    5238:	f885 6229 	strb.w	r6, [r5, #553]	; 0x229
#define NOISE_H


void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
    523c:	f885 722c 	strb.w	r7, [r5, #556]	; 0x22c
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5240:	b963      	cbnz	r3, 525c <noise(LEDStruct&)+0x15c>
	else				  	 { leds.strip_range = ONE_SIDE; }
    5242:	234b      	movs	r3, #75	; 0x4b
    5244:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c

	leds.noise_scale = s;
    5248:	f8a5 2760 	strh.w	r2, [r5, #1888]	; 0x760
	leds.noise_dist = d;
    524c:	f8a5 1762 	strh.w	r1, [r5, #1890]	; 0x762
    5250:	e763      	b.n	511a <noise(LEDStruct&)+0x1a>
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
    5252:	f003 003f 	and.w	r0, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
    5256:	f003 020f 	and.w	r2, r3, #15
    525a:	e7a1      	b.n	51a0 <noise(LEDStruct&)+0xa0>
void noise_init(LEDStruct& leds, bool ufr = random8(2), uint16_t s = random16(30,100), uint16_t d = random16(1000,50000)) {
	leds.mode_initialized = 1;
	leds.mode_type = NOISE;
	leds.use_palette = 1;
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    525c:	2396      	movs	r3, #150	; 0x96
    525e:	f8a5 333c 	strh.w	r3, [r5, #828]	; 0x33c
    5262:	e7f1      	b.n	5248 <noise(LEDStruct&)+0x148>
    5264:	1fff9e00 	.word	0x1fff9e00
    5268:	0000c29c 	.word	0x0000c29c
    526c:	1fff874a 	.word	0x1fff874a
    5270:	80808081 	.word	0x80808081

00005274 <switch_mode(LEDStruct&)>:
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    5274:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (leds.mode_name) {
    5276:	f890 322b 	ldrb.w	r3, [r0, #555]	; 0x22b
#define SWITCH_MODE_H

// Modes determine init inputs
//		Vary them via change_pattern function

void switch_mode(LEDStruct& leds) {
    527a:	b085      	sub	sp, #20
    527c:	4604      	mov	r4, r0
	switch (leds.mode_name) {
    527e:	2b17      	cmp	r3, #23
    5280:	f200 846d 	bhi.w	5b5e <switch_mode(LEDStruct&)+0x8ea>
    5284:	e8df f013 	tbh	[pc, r3, lsl #1]
    5288:	0320039e 	.word	0x0320039e
    528c:	006b02a0 	.word	0x006b02a0
    5290:	016800e7 	.word	0x016800e7
    5294:	013f00ed 	.word	0x013f00ed
    5298:	020c025a 	.word	0x020c025a
    529c:	001801be 	.word	0x001801be
    52a0:	01450065 	.word	0x01450065
    52a4:	0446044b 	.word	0x0446044b
    52a8:	043c0441 	.word	0x043c0441
    52ac:	04320437 	.word	0x04320437
    52b0:	0428042d 	.word	0x0428042d
    52b4:	041e0423 	.word	0x041e0423
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
			fire(leds);
			break;

		case FIRE_MIRROR_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
    52b8:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    52bc:	2b00      	cmp	r3, #0
    52be:	d148      	bne.n	5352 <switch_mode(LEDStruct&)+0xde>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    52c0:	4dcf      	ldr	r5, [pc, #828]	; (5600 <switch_mode(LEDStruct&)+0x38c>)
    52c2:	882b      	ldrh	r3, [r5, #0]
    52c4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    52c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    52cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    52d0:	3319      	adds	r3, #25
    52d2:	b29b      	uxth	r3, r3
    52d4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    52d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    52dc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    52e0:	3119      	adds	r1, #25
    52e2:	b289      	uxth	r1, r1
    52e4:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    52e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    52ec:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    52f0:	3219      	adds	r2, #25
    52f2:	b292      	uxth	r2, r2
    52f4:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    52f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52fc:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5300:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5304:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5308:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    530c:	b2db      	uxtb	r3, r3
    530e:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5310:	3619      	adds	r6, #25
    5312:	b2d2      	uxtb	r2, r2
    5314:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    5318:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    531c:	eb03 0783 	add.w	r7, r3, r3, lsl #2
    5320:	b2b6      	uxth	r6, r6
    5322:	1188      	asrs	r0, r1, #6
    5324:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    5328:	1191      	asrs	r1, r2, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    532a:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    532e:	3032      	adds	r0, #50	; 0x32
    5330:	f3c7 1781 	ubfx	r7, r7, #6, #2
    5334:	313c      	adds	r1, #60	; 0x3c
    5336:	121b      	asrs	r3, r3, #8
    5338:	b2c0      	uxtb	r0, r0
    533a:	3701      	adds	r7, #1
    533c:	b2c9      	uxtb	r1, r1
    533e:	3314      	adds	r3, #20
    5340:	2201      	movs	r2, #1
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    5342:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    5346:	b2db      	uxtb	r3, r3
    5348:	4611      	mov	r1, r2
    534a:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    534c:	802e      	strh	r6, [r5, #0]
    534e:	f7fd fe25 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    5352:	4620      	mov	r0, r4
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5354:	b005      	add	sp, #20
    5356:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { fire_init(leds, 1, 1); }		// sync on  | mirror on
			fire(leds);
			break;

		case FIRE_RANDOM:
			fire(leds);
    535a:	f7fd be89 	b.w	3070 <fire(LEDStruct&)>
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
			juggle(leds);
			break;

		case JUGGLE_PHASED_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
    535e:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    5362:	2b00      	cmp	r3, #0
    5364:	d177      	bne.n	5456 <switch_mode(LEDStruct&)+0x1e2>
    5366:	49a6      	ldr	r1, [pc, #664]	; (5600 <switch_mode(LEDStruct&)+0x38c>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    5368:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
    536c:	880b      	ldrh	r3, [r1, #0]
    536e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5372:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5376:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    537a:	3319      	adds	r3, #25
    537c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5380:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5384:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5388:	3319      	adds	r3, #25
    538a:	b29b      	uxth	r3, r3
    538c:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5390:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5394:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5398:	3019      	adds	r0, #25
    539a:	b280      	uxth	r0, r0
    539c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    53a0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    53a4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    53a8:	3219      	adds	r2, #25
    53aa:	b292      	uxth	r2, r2
    53ac:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    53b0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    53b4:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    53b8:	3719      	adds	r7, #25
    53ba:	b2bf      	uxth	r7, r7
    53bc:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    53c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    53c4:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    53c8:	3519      	adds	r5, #25
    53ca:	b2ad      	uxth	r5, r5
    53cc:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53d0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53d4:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    53d8:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53da:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    53de:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    53e2:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    53e6:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53e8:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    53ec:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    53ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    53f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    53f6:	11f6      	asrs	r6, r6, #7
    53f8:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    53fc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5400:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5404:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5406:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    540a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    540c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    540e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    5410:	f3c7 1742 	ubfx	r7, r7, #5, #3
    5414:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5418:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    541c:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5420:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    5422:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    5424:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5428:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    542c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    5430:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5432:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    5436:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    543a:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    543e:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    5442:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    5446:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    544a:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    544e:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
	leds.juggle_phased		 = jp;
    5452:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    5456:	4620      	mov	r0, r4
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5458:	b005      	add	sp, #20
    545a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { juggle_init(leds, 1, 1); }	// one_dir on  | phased on
			juggle(leds);
			break;

		case JUGGLE_RANDOM:
			juggle(leds);
    545e:	f7fc bdaf 	b.w	1fc0 <juggle(LEDStruct&)>
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_SPLIT:
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
    5462:	f890 322d 	ldrb.w	r3, [r0, #557]	; 0x22d
    5466:	2b00      	cmp	r3, #0
    5468:	d14d      	bne.n	5506 <switch_mode(LEDStruct&)+0x292>
    546a:	4965      	ldr	r1, [pc, #404]	; (5600 <switch_mode(LEDStruct&)+0x38c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    546c:	f880 3229 	strb.w	r3, [r0, #553]	; 0x229
    5470:	880b      	ldrh	r3, [r1, #0]
    5472:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5476:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    547a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    547e:	3319      	adds	r3, #25
    5480:	b29b      	uxth	r3, r3
    5482:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5486:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    548a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    548e:	3219      	adds	r2, #25
    5490:	b292      	uxth	r2, r2
    5492:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    5496:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    549a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    549e:	3019      	adds	r0, #25
    54a0:	b280      	uxth	r0, r0
    54a2:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    54a6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    54aa:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    54ae:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    54b2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    54b6:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    54b8:	b2d2      	uxtb	r2, r2
    54ba:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    54bc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    54c0:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    54c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    54c6:	121b      	asrs	r3, r3, #8
    54c8:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    54ca:	1212      	asrs	r2, r2, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    54cc:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    54d0:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    54d4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    54d8:	2701      	movs	r7, #1
	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    54da:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    54dc:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    54e0:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    54e4:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    54e6:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    54ea:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    54ee:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    54f2:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    54f6:	f884 727a 	strb.w	r7, [r4, #634]	; 0x27a
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    54fa:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    54fe:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5500:	800d      	strh	r5, [r1, #0]
    5502:	f7fc f8cf 	bl	16a4 <LEDDebug(LEDStruct&)>
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    5506:	4620      	mov	r0, r4
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5508:	b005      	add	sp, #20
    550a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			if (!leds.mode_initialized) { rainbow_init(leds, 1); }		// split on
			rainbow_march(leds);
			break;

		case RAINBOW_MARCH_RANDOM:
			rainbow_march(leds);
    550e:	f7fd bc81 	b.w	2e14 <rainbow_march(LEDStruct&)>
		case FIRE_RANDOM:
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
    5512:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    5516:	b9ca      	cbnz	r2, 554c <switch_mode(LEDStruct&)+0x2d8>
    5518:	4e39      	ldr	r6, [pc, #228]	; (5600 <switch_mode(LEDStruct&)+0x38c>)
    551a:	8833      	ldrh	r3, [r6, #0]
    551c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    5520:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5524:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5528:	3519      	adds	r5, #25
    552a:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    552c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    5530:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5534:	3301      	adds	r3, #1
    5536:	205a      	movs	r0, #90	; 0x5a
    5538:	2146      	movs	r1, #70	; 0x46
    553a:	9302      	str	r3, [sp, #8]
    553c:	9001      	str	r0, [sp, #4]
    553e:	9100      	str	r1, [sp, #0]
    5540:	2314      	movs	r3, #20
    5542:	4611      	mov	r1, r2
    5544:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5546:	8035      	strh	r5, [r6, #0]
    5548:	f7fd fd28 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
			torch(leds);
    554c:	4620      	mov	r0, r4
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    554e:	b005      	add	sp, #20
    5550:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fire(leds);
			break;

		case TORCH:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
    5554:	f7fe b874 	b.w	3640 <torch(LEDStruct&)>
			break;


		// Rainbow March Functions
		case RAINBOW_MARCH:
			if (!leds.mode_initialized) { rainbow_init(leds, 0); }		// split off
    5558:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    555c:	2a00      	cmp	r2, #0
    555e:	d1d2      	bne.n	5506 <switch_mode(LEDStruct&)+0x292>
    5560:	4927      	ldr	r1, [pc, #156]	; (5600 <switch_mode(LEDStruct&)+0x38c>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;
    5562:	f880 2229 	strb.w	r2, [r0, #553]	; 0x229
    5566:	880b      	ldrh	r3, [r1, #0]

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    5568:	f880 227a 	strb.w	r2, [r0, #634]	; 0x27a
    556c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5570:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5574:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5578:	3319      	adds	r3, #25
    557a:	b29b      	uxth	r3, r3
    557c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5580:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5584:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5588:	3219      	adds	r2, #25
    558a:	b292      	uxth	r2, r2
    558c:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    5590:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    5594:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5598:	3019      	adds	r0, #25
    559a:	b280      	uxth	r0, r0
    559c:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    55a0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    55a4:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    55a8:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55ac:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    leds.rainbow_diff   = rd;
    55b0:	b2db      	uxtb	r3, r3
    leds.rainbow_rot    = rr;
    55b2:	b2d2      	uxtb	r2, r2
    55b4:	3519      	adds	r5, #25

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    55b6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    55ba:	b2ad      	uxth	r5, r5
    leds.rainbow_rot    = rr;
    55bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    55c0:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    55c2:	eb05 2615 	add.w	r6, r5, r5, lsr #8
    55c6:	3301      	adds	r3, #1
    leds.rainbow_rot    = rr;
    55c8:	1212      	asrs	r2, r2, #8
    55ca:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    55ce:	3201      	adds	r2, #1
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    55d0:	f3c6 16c0 	ubfx	r6, r6, #7, #1
	leds.this_dir = td;
    55d4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    55d8:	2701      	movs	r7, #1

	leds.use_full_range = ufr;
	leds.this_dir = td;

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    55da:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    55de:	2305      	movs	r3, #5
    leds.use_palette = 0;

	leds.use_full_range = ufr;
	leds.this_dir = td;
    55e0:	f884 01c5 	strb.w	r0, [r4, #453]	; 0x1c5

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;
    55e4:	f884 2277 	strb.w	r2, [r4, #631]	; 0x277
void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
	leds.mode_type = RAINBOW_MARCH;
    leds.use_palette = 0;

	leds.use_full_range = ufr;
    55e8:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 16), uint8_t rr = random8(1, 4), bool td = random8(2), bool ufr = random8(2)) {
    leds.mode_initialized = 1;
    55ec:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.mode_type = RAINBOW_MARCH;
    55f0:	f884 322c 	strb.w	r3, [r4, #556]	; 0x22c

	leds.rainbow_split  = rs;
    leds.rainbow_diff   = rd;
    leds.rainbow_rot    = rr;

    if (DEBUG) { LEDDebug(leds); }
    55f4:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55f6:	800d      	strh	r5, [r1, #0]
    55f8:	f7fc f854 	bl	16a4 <LEDDebug(LEDStruct&)>
    55fc:	e783      	b.n	5506 <switch_mode(LEDStruct&)+0x292>
    55fe:	bf00      	nop
    5600:	1fff874a 	.word	0x1fff874a
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
			fire(leds);
			break;

		case FIRE_MIRROR:
			if (!leds.mode_initialized) { fire_init(leds, 0, 1); }		// sync off | mirror on
    5604:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    5608:	2900      	cmp	r1, #0
    560a:	f47f aea2 	bne.w	5352 <switch_mode(LEDStruct&)+0xde>
    560e:	4dad      	ldr	r5, [pc, #692]	; (58c4 <switch_mode(LEDStruct&)+0x650>)
    5610:	882b      	ldrh	r3, [r5, #0]
    5612:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5616:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    561a:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    561e:	3019      	adds	r0, #25
    5620:	b280      	uxth	r0, r0
    5622:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5626:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    562a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    562e:	3219      	adds	r2, #25
    5630:	b292      	uxth	r2, r2
    5632:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    563a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    563e:	3319      	adds	r3, #25
    5640:	b29b      	uxth	r3, r3
    5642:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    5646:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    564a:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    564e:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5652:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5656:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    565a:	b2c7      	uxtb	r7, r0
    565c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    565e:	3619      	adds	r6, #25
    5660:	b2db      	uxtb	r3, r3
    5662:	b2b6      	uxth	r6, r6
    5664:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    5668:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    566c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    5670:	1190      	asrs	r0, r2, #6
    5672:	119a      	asrs	r2, r3, #6
    5674:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5678:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    567c:	3032      	adds	r0, #50	; 0x32
    567e:	f3c7 1781 	ubfx	r7, r7, #6, #2
    5682:	323c      	adds	r2, #60	; 0x3c
    5684:	121b      	asrs	r3, r3, #8
    5686:	b2c0      	uxtb	r0, r0
    5688:	3701      	adds	r7, #1
    568a:	b2d2      	uxtb	r2, r2
    568c:	3314      	adds	r3, #20
    568e:	e88d 0085 	stmia.w	sp, {r0, r2, r7}
    5692:	b2db      	uxtb	r3, r3
    5694:	2201      	movs	r2, #1
    5696:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5698:	802e      	strh	r6, [r5, #0]
    569a:	f7fd fc7f 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    569e:	e658      	b.n	5352 <switch_mode(LEDStruct&)+0xde>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
			fire(leds);
			break;

		case FIRE_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0); }		// sync on  | mirror off
    56a0:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    56a4:	2a00      	cmp	r2, #0
    56a6:	f47f ae54 	bne.w	5352 <switch_mode(LEDStruct&)+0xde>
    56aa:	4d86      	ldr	r5, [pc, #536]	; (58c4 <switch_mode(LEDStruct&)+0x650>)
    56ac:	882b      	ldrh	r3, [r5, #0]
    56ae:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    56b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    56b6:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    56ba:	3019      	adds	r0, #25
    56bc:	b280      	uxth	r0, r0
    56be:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    56c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    56c6:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    56ca:	3119      	adds	r1, #25
    56cc:	b289      	uxth	r1, r1
    56ce:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    56d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    56d6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    56da:	3319      	adds	r3, #25
    56dc:	b29b      	uxth	r3, r3
    56de:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    56e2:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56e6:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    56ea:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56ee:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56f2:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    56f6:	b2c7      	uxtb	r7, r0
    56f8:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56fa:	3619      	adds	r6, #25
    56fc:	b2db      	uxtb	r3, r3
    56fe:	b2b6      	uxth	r6, r6
    5700:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    5704:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    5708:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    570c:	1188      	asrs	r0, r1, #6
    570e:	1199      	asrs	r1, r3, #6
    5710:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5714:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    5718:	3032      	adds	r0, #50	; 0x32
    571a:	f3c7 1781 	ubfx	r7, r7, #6, #2
    571e:	313c      	adds	r1, #60	; 0x3c
    5720:	121b      	asrs	r3, r3, #8
    5722:	b2c0      	uxtb	r0, r0
    5724:	3701      	adds	r7, #1
    5726:	b2c9      	uxtb	r1, r1
    5728:	3314      	adds	r3, #20
    572a:	e88d 0083 	stmia.w	sp, {r0, r1, r7}
    572e:	b2db      	uxtb	r3, r3
    5730:	2101      	movs	r1, #1
    5732:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5734:	802e      	strh	r6, [r5, #0]
    5736:	f7fd fc31 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    573a:	e60a      	b.n	5352 <switch_mode(LEDStruct&)+0xde>
			break;

		
		// Fire Functions
		case FIRE:
			if (!leds.mode_initialized) { fire_init(leds, 0, 0); }		// sync off | mirror off
    573c:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    5740:	2a00      	cmp	r2, #0
    5742:	f47f ae06 	bne.w	5352 <switch_mode(LEDStruct&)+0xde>
    5746:	4d5f      	ldr	r5, [pc, #380]	; (58c4 <switch_mode(LEDStruct&)+0x650>)
    5748:	882b      	ldrh	r3, [r5, #0]
    574a:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    574e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5752:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5756:	3019      	adds	r0, #25
    5758:	b280      	uxth	r0, r0
    575a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    575e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    5762:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5766:	3119      	adds	r1, #25
    5768:	b289      	uxth	r1, r1
    576a:	eb01 2341 	add.w	r3, r1, r1, lsl #9
    576e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5772:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5776:	3319      	adds	r3, #25
    5778:	b29b      	uxth	r3, r3
    577a:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    577e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5782:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    5786:	eb01 2111 	add.w	r1, r1, r1, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    578a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    578e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5792:	b2c7      	uxtb	r7, r0
    5794:	b2c9      	uxtb	r1, r1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5796:	3619      	adds	r6, #25
    5798:	b2db      	uxtb	r3, r3
    579a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
    579e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    57a2:	eb07 0e87 	add.w	lr, r7, r7, lsl #2
    57a6:	b2b6      	uxth	r6, r6
    57a8:	1188      	asrs	r0, r1, #6
    57aa:	1199      	asrs	r1, r3, #6
    57ac:	eb07 034e 	add.w	r3, r7, lr, lsl #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    57b0:	eb06 2716 	add.w	r7, r6, r6, lsr #8
    57b4:	3032      	adds	r0, #50	; 0x32
    57b6:	f3c7 1781 	ubfx	r7, r7, #6, #2
    57ba:	313c      	adds	r1, #60	; 0x3c
    57bc:	121b      	asrs	r3, r3, #8
    57be:	b2c0      	uxtb	r0, r0
    57c0:	3701      	adds	r7, #1
    57c2:	b2c9      	uxtb	r1, r1
    57c4:	3314      	adds	r3, #20
    57c6:	e5bc      	b.n	5342 <switch_mode(LEDStruct&)+0xce>
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
			juggle(leds);
			break;

		case JUGGLE_PHASED:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 1); }	// one_dir off | phased on
    57c8:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    57cc:	2a00      	cmp	r2, #0
    57ce:	f47f ae42 	bne.w	5456 <switch_mode(LEDStruct&)+0x1e2>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    57d2:	493c      	ldr	r1, [pc, #240]	; (58c4 <switch_mode(LEDStruct&)+0x650>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    57d4:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    57d8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    57da:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    57de:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    57e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    57e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    57ea:	3319      	adds	r3, #25
    57ec:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    57f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    57f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    57f8:	3319      	adds	r3, #25
    57fa:	b29b      	uxth	r3, r3
    57fc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5804:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5808:	3019      	adds	r0, #25
    580a:	b280      	uxth	r0, r0
    580c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5810:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5814:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5818:	3219      	adds	r2, #25
    581a:	b292      	uxth	r2, r2
    581c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    5820:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    5824:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5828:	3719      	adds	r7, #25
    582a:	b2bf      	uxth	r7, r7
    582c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5830:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5834:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5838:	3519      	adds	r5, #25
    583a:	b2ad      	uxth	r5, r5
    583c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5840:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5844:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5848:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    584a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    584e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    5852:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5856:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5858:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    585c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    585e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5862:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5866:	11f6      	asrs	r6, r6, #7
    5868:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    586c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5870:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5874:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5876:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    587a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    587c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    587e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    5880:	f3c7 1742 	ubfx	r7, r7, #5, #3
    5884:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5888:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    588c:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5890:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    5892:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    5894:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5898:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    589c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    58a0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    58a2:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    58a6:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    58aa:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    58ae:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    58b2:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    58b6:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    58ba:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    58be:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    58c2:	e5c8      	b.n	5456 <switch_mode(LEDStruct&)+0x1e2>
    58c4:	1fff874a 	.word	0x1fff874a
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
			juggle(leds);
			break;

		case JUGGLE_ONE_DIR:
			if (!leds.mode_initialized) { juggle_init(leds, 1, 0); }	// one_dir on  | phased off
    58c8:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    58cc:	2a00      	cmp	r2, #0
    58ce:	f47f adc2 	bne.w	5456 <switch_mode(LEDStruct&)+0x1e2>
    58d2:	49a4      	ldr	r1, [pc, #656]	; (5b64 <switch_mode(LEDStruct&)+0x8f0>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    58d4:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    58d8:	880b      	ldrh	r3, [r1, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    58da:	f880 2235 	strb.w	r2, [r0, #565]	; 0x235
    58de:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    58e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    58e6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    58ea:	3319      	adds	r3, #25
    58ec:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    58f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    58f4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    58f8:	3319      	adds	r3, #25
    58fa:	b29b      	uxth	r3, r3
    58fc:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    5900:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5904:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5908:	3019      	adds	r0, #25
    590a:	b280      	uxth	r0, r0
    590c:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5910:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5914:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5918:	3219      	adds	r2, #25
    591a:	b292      	uxth	r2, r2
    591c:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    5920:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    5924:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5928:	3719      	adds	r7, #25
    592a:	b2bf      	uxth	r7, r7
    592c:	eb07 2547 	add.w	r5, r7, r7, lsl #9
    5930:	eb07 0585 	add.w	r5, r7, r5, lsl #2
    5934:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5938:	3519      	adds	r5, #25
    593a:	b2ad      	uxth	r5, r5
    593c:	eb05 2e45 	add.w	lr, r5, r5, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5940:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5944:	eb05 0e8e 	add.w	lr, r5, lr, lsl #2
	leds.juggle_numdots 	 = jn;
    5948:	b2db      	uxtb	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    594a:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    594e:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    5952:	eb03 0643 	add.w	r6, r3, r3, lsl #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5956:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5958:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    595c:	b2c0      	uxtb	r0, r0
	leds.juggle_fade		 = jf;
    595e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5962:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5966:	11f6      	asrs	r6, r6, #7
    5968:	f10e 0e19 	add.w	lr, lr, #25
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    596c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    5970:	fa1f fe8e 	uxth.w	lr, lr
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5974:	1182      	asrs	r2, r0, #6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5976:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    597a:	1c70      	adds	r0, r6, #1
	leds.juggle_beat		 = jb;
    597c:	3208      	adds	r2, #8
	leds.juggle_fade		 = jf;
    597e:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    5980:	f3c7 1742 	ubfx	r7, r7, #5, #3
    5984:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5988:	f884 022f 	strb.w	r0, [r4, #559]	; 0x22f
    598c:	eb0e 201e 	add.w	r0, lr, lr, lsr #8
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5990:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    5992:	1c7e      	adds	r6, r7, #1
	leds.juggle_index_reset  = jir;
    5994:	f3c5 15c0 	ubfx	r5, r5, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5998:	f3c0 10c0 	ubfx	r0, r0, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    599c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    59a0:	2201      	movs	r2, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    59a2:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    59a6:	f884 6232 	strb.w	r6, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    59aa:	f8a1 e000 	strh.w	lr, [r1]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    59ae:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    59b2:	f884 5233 	strb.w	r5, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    59b6:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    59ba:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    59be:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
    59c2:	e548      	b.n	5456 <switch_mode(LEDStruct&)+0x1e2>
void switch_mode(LEDStruct& leds) {
	switch (leds.mode_name) {

		// Juggle Functions
		case JUGGLE:
			if (!leds.mode_initialized) { juggle_init(leds, 0, 0); }	// one_dir off | phased off
    59c4:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    59c8:	2900      	cmp	r1, #0
    59ca:	f47f ad44 	bne.w	5456 <switch_mode(LEDStruct&)+0x1e2>
    59ce:	4865      	ldr	r0, [pc, #404]	; (5b64 <switch_mode(LEDStruct&)+0x8f0>)
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    59d0:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    59d4:	8803      	ldrh	r3, [r0, #0]
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
    59d6:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    59da:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    59de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    59e2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59e6:	3319      	adds	r3, #25
    59e8:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    59ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    59f0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59f4:	3319      	adds	r3, #25
    59f6:	b29b      	uxth	r3, r3
    59f8:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    59fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5a00:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5a04:	3519      	adds	r5, #25
    5a06:	b2ad      	uxth	r5, r5
    5a08:	eb05 2245 	add.w	r2, r5, r5, lsl #9
    5a0c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    5a10:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5a14:	3219      	adds	r2, #25
    5a16:	b292      	uxth	r2, r2
    5a18:	eb02 2742 	add.w	r7, r2, r2, lsl #9
    5a1c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    5a20:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    5a24:	3719      	adds	r7, #25
    5a26:	b2bf      	uxth	r7, r7
    5a28:	eb07 2647 	add.w	r6, r7, r7, lsl #9
    5a2c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    5a30:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5a34:	3619      	adds	r6, #25
    5a36:	b2b6      	uxth	r6, r6
    5a38:	eb06 2c46 	add.w	ip, r6, r6, lsl #9
    5a3c:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a40:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    5a44:	eb05 2515 	add.w	r5, r5, r5, lsr #8
    5a48:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5a4c:	b2d2      	uxtb	r2, r2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a4e:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5a52:	b2ed      	uxtb	r5, r5
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5a54:	b2db      	uxtb	r3, r3
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5a56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5a5e:	f10c 0c19 	add.w	ip, ip, #25
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5a62:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
    5a66:	fa1f fc8c 	uxth.w	ip, ip
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5a6a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a6e:	eb07 2717 	add.w	r7, r7, r7, lsr #8
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5a72:	11aa      	asrs	r2, r5, #6
    5a74:	3208      	adds	r2, #8
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5a76:	ea4f 1eee 	mov.w	lr, lr, asr #7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5a7a:	119b      	asrs	r3, r3, #6
	leds.juggle_diff		 = jd;
    5a7c:	f3c7 1742 	ubfx	r7, r7, #5, #3
    5a80:	eb06 2616 	add.w	r6, r6, r6, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
    5a84:	f884 1235 	strb.w	r1, [r4, #565]	; 0x235
    5a88:	eb0c 211c 	add.w	r1, ip, ip, lsr #8
	leds.juggle_numdots 	 = jn;
    5a8c:	f10e 0501 	add.w	r5, lr, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5a90:	3b74      	subs	r3, #116	; 0x74
	leds.juggle_diff		 = jd;
    5a92:	3701      	adds	r7, #1
	leds.juggle_index_reset  = jir;
    5a94:	f3c6 16c0 	ubfx	r6, r6, #7, #1

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5a98:	f3c1 11c0 	ubfx	r1, r1, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    5a9c:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    5aa0:	2201      	movs	r2, #1
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    5aa2:	f884 522f 	strb.w	r5, [r4, #559]	; 0x22f
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    5aa6:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
	leds.juggle_diff		 = jd;
    5aaa:	f884 7232 	strb.w	r7, [r4, #562]	; 0x232
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5aae:	f8a0 c000 	strh.w	ip, [r0]

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    5ab2:	f884 11c4 	strb.w	r1, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    5ab6:	f884 6233 	strb.w	r6, [r4, #563]	; 0x233
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 7), uint8_t jb = random8(8, 20), uint8_t jf = random8(140, 240), uint8_t jd = random8(1, 9), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    5aba:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    5abe:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
    5ac2:	e4c8      	b.n	5456 <switch_mode(LEDStruct&)+0x1e2>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5ac4:	b005      	add	sp, #20
    5ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case JUGGLE_RANDOM:
			juggle(leds);
			break;

		case BOUNCE:
			bounce(leds);
    5aca:	f7fc bfc3 	b.w	2a54 <bounce(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5ace:	b005      	add	sp, #20
    5ad0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			shooting_pole(leds);
			break;

		// Noise Functions
		case NOISE:
			noise(leds);
    5ad4:	f7ff bb14 	b.w	5100 <noise(LEDStruct&)>
			break;
	}
}
    5ad8:	b005      	add	sp, #20
    5ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			fireworks(leds);
			break;

		// Shooting Pole
		case SHOOTING_POLE:
			shooting_pole(leds);
    5ade:	f7fe bfcb 	b.w	4a78 <shooting_pole(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5ae2:	b005      	add	sp, #20
    5ae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			two_sin(leds);
			break;

		// Fireworks Functions
		case FIREWORKS:
			fireworks(leds);
    5ae8:	f7fe bf88 	b.w	49fc <fireworks(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5aec:	b005      	add	sp, #20
    5aee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case ONE_SIN:
			one_sin(leds);
			break;

		case TWO_SIN:
			two_sin(leds);
    5af2:	f7ff b93d 	b.w	4d70 <two_sin(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5af6:	b005      	add	sp, #20
    5af8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			confetti(leds);
			break;

		// Sin Functions
		case ONE_SIN:
			one_sin(leds);
    5afc:	f7fe ba68 	b.w	3fd0 <one_sin(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5b00:	b005      	add	sp, #20
    5b02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			pride(leds);
			break;

		// Confetti Functions
		case CONFETTI:
			confetti(leds);
    5b06:	f7fe b9cf 	b.w	3ea8 <confetti(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5b0a:	b005      	add	sp, #20
    5b0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		case COLORWAVE:
			colorwave(leds);
			break;

		case PRIDE:
			pride(leds);
    5b10:	f7fe bba8 	b.w	4264 <pride(LEDStruct&)>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5b14:	b005      	add	sp, #20
    5b16:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			torch(leds);
			break;

		// Colorwave and Pride Functions
		case COLORWAVE:
			colorwave(leds);
    5b1a:	f7fd bfe5 	b.w	3ae8 <colorwave(LEDStruct&)>
			if (!leds.mode_initialized) { fire_init(leds, 0, 0, 20, 70, 90); }		// sync off | mirror must be off
			torch(leds);
			break;

		case TORCH_SYNC:
			if (!leds.mode_initialized) { fire_init(leds, 1, 0, 20, 100, 90); }		// sync on  | mirror must be off
    5b1e:	f890 222d 	ldrb.w	r2, [r0, #557]	; 0x22d
    5b22:	2a00      	cmp	r2, #0
    5b24:	f47f ad12 	bne.w	554c <switch_mode(LEDStruct&)+0x2d8>
    5b28:	4e0e      	ldr	r6, [pc, #56]	; (5b64 <switch_mode(LEDStruct&)+0x8f0>)
    5b2a:	8833      	ldrh	r3, [r6, #0]
    5b2c:	eb03 2543 	add.w	r5, r3, r3, lsl #9
    5b30:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    5b34:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    5b38:	3519      	adds	r5, #25
    5b3a:	b2ad      	uxth	r5, r5
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5b3c:	eb05 2315 	add.w	r3, r5, r5, lsr #8
    5b40:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5b44:	3301      	adds	r3, #1
    5b46:	205a      	movs	r0, #90	; 0x5a
    5b48:	2164      	movs	r1, #100	; 0x64
    5b4a:	9302      	str	r3, [sp, #8]
    5b4c:	9001      	str	r0, [sp, #4]
    5b4e:	9100      	str	r1, [sp, #0]
    5b50:	2314      	movs	r3, #20
    5b52:	2101      	movs	r1, #1
    5b54:	4620      	mov	r0, r4
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5b56:	8035      	strh	r5, [r6, #0]
    5b58:	f7fd fa20 	bl	2f9c <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    5b5c:	e4f6      	b.n	554c <switch_mode(LEDStruct&)+0x2d8>
		// Noise Functions
		case NOISE:
			noise(leds);
			break;
	}
}
    5b5e:	b005      	add	sp, #20
    5b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b62:	bf00      	nop
    5b64:	1fff874a 	.word	0x1fff874a

00005b68 <change_pattern()>:
}



// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
    5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b6a:	2120      	movs	r1, #32
    5b6c:	4831      	ldr	r0, [pc, #196]	; (5c34 <change_pattern()+0xcc>)
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
    5b6e:	4d32      	ldr	r5, [pc, #200]	; (5c38 <change_pattern()+0xd0>)
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
    5b70:	4f32      	ldr	r7, [pc, #200]	; (5c3c <change_pattern()+0xd4>)
    5b72:	f002 fe77 	bl	8864 <usb_serial_write>
    5b76:	4832      	ldr	r0, [pc, #200]	; (5c40 <change_pattern()+0xd8>)
    5b78:	f003 f878 	bl	8c6c <Print::println()>
    5b7c:	4831      	ldr	r0, [pc, #196]	; (5c44 <change_pattern()+0xdc>)
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    5b7e:	4a32      	ldr	r2, [pc, #200]	; (5c48 <change_pattern()+0xe0>)
    5b80:	8803      	ldrh	r3, [r0, #0]
    5b82:	7816      	ldrb	r6, [r2, #0]
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;
    5b84:	882c      	ldrh	r4, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
    5b86:	4931      	ldr	r1, [pc, #196]	; (5c4c <change_pattern()+0xe4>)
// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    5b88:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 5c60 <change_pattern()+0xf8>
    5b8c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5b90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5b94:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5b98:	3319      	adds	r3, #25
    5b9a:	b29b      	uxth	r3, r3
    5b9c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    5ba0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5ba4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5ba8:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5bac:	3219      	adds	r2, #25
	transition_speed = random8(3,7);
    5bae:	f3c3 1381 	ubfx	r3, r3, #6, #2
    5bb2:	b292      	uxth	r2, r2
    5bb4:	3303      	adds	r3, #3
    5bb6:	703b      	strb	r3, [r7, #0]
	transition_ratio = 0;
	number_of_mode_changes++;
    5bb8:	3401      	adds	r4, #1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5bba:	eb02 2312 	add.w	r3, r2, r2, lsr #8
    5bbe:	802c      	strh	r4, [r5, #0]

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    5bc0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
	transition_speed = random8(3,7);
	transition_ratio = 0;
    5bc4:	4f22      	ldr	r7, [pc, #136]	; (5c50 <change_pattern()+0xe8>)

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    5bc6:	4c23      	ldr	r4, [pc, #140]	; (5c54 <change_pattern()+0xec>)
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
    5bc8:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    5bcc:	2501      	movs	r5, #1
	transition_type  = BLENDING;
    5bce:	2300      	movs	r3, #0
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5bd0:	8002      	strh	r2, [r0, #0]
	transition_speed = random8(3,7);
	transition_ratio = 0;
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
    5bd2:	f881 322d 	strb.w	r3, [r1, #557]	; 0x22d
// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
	transition_type  = BLENDING;
    5bd6:	f88e 3000 	strb.w	r3, [lr]
	transition_speed = random8(3,7);
	transition_ratio = 0;
    5bda:	703b      	strb	r3, [r7, #0]

// Change pattern  - consider how to handle this.  Random, specific path, etc.
void change_pattern() {
	if (DEBUG) { Serial.println("********Changing Pattern********"); }
	// Transition variables
	in_transition    = 1;
    5bdc:	7025      	strb	r5, [r4, #0]
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    5bde:	b9b6      	cbnz	r6, 5c0e <change_pattern()+0xa6>
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
    5be0:	f891 222a 	ldrb.w	r2, [r1, #554]	; 0x22a
    5be4:	4b1c      	ldr	r3, [pc, #112]	; (5c58 <change_pattern()+0xf0>)
    5be6:	3201      	adds	r2, #1
    5be8:	fba3 0302 	umull	r0, r3, r3, r2
    5bec:	091b      	lsrs	r3, r3, #4
    5bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5bf2:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
    5bf6:	b2db      	uxtb	r3, r3
    5bf8:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
	next_leds.mode_name = ModeList[next_leds.mode_number];
    5bfc:	4a17      	ldr	r2, [pc, #92]	; (5c5c <change_pattern()+0xf4>)
	switch_mode(next_leds);
    5bfe:	4813      	ldr	r0, [pc, #76]	; (5c4c <change_pattern()+0xe4>)
	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
    5c00:	5cd3      	ldrb	r3, [r2, r3]
    5c02:	f881 322b 	strb.w	r3, [r1, #555]	; 0x22b
	switch_mode(next_leds);
}
    5c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
	else			 { next_leds.mode_number = (next_leds.mode_number + 1) % ARRAY_SIZE(ModeList);	}
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
    5c0a:	f7ff bb33 	b.w	5274 <switch_mode(LEDStruct&)>
    5c0e:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5c12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5c16:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5c1a:	3219      	adds	r2, #25
    5c1c:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5c1e:	eb02 2312 	add.w	r3, r2, r2, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5c22:	b2db      	uxtb	r3, r3
    5c24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5c28:	f3c3 1347 	ubfx	r3, r3, #5, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5c2c:	8002      	strh	r2, [r0, #0]
	number_of_mode_changes++;

	// Next LED Variables
	next_leds.mode_initialized = 0;
	next_leds.this_dir = random8(2);
	if (random_mode) { next_leds.mode_number = random8(ARRAY_SIZE(ModeList)); }
    5c2e:	f881 322a 	strb.w	r3, [r1, #554]	; 0x22a
    5c32:	e7e3      	b.n	5bfc <change_pattern()+0x94>
    5c34:	0000b15c 	.word	0x0000b15c
    5c38:	1fff8c74 	.word	0x1fff8c74
    5c3c:	1fff9450 	.word	0x1fff9450
    5c40:	1fff8754 	.word	0x1fff8754
    5c44:	1fff874a 	.word	0x1fff874a
    5c48:	1fff8740 	.word	0x1fff8740
    5c4c:	1fff8c80 	.word	0x1fff8c80
    5c50:	1fff8c76 	.word	0x1fff8c76
    5c54:	1fff93f8 	.word	0x1fff93f8
    5c58:	aaaaaaab 	.word	0xaaaaaaab
    5c5c:	1fff8724 	.word	0x1fff8724
    5c60:	1fff9404 	.word	0x1fff9404

00005c64 <setup>:

Mode start_mode = BOUNCE;

// ================ SETUP ================

void setup() {
    5c64:	b570      	push	{r4, r5, r6, lr}
    5c66:	f640 31b8 	movw	r1, #3000	; 0xbb8
    5c6a:	b082      	sub	sp, #8
    5c6c:	4863      	ldr	r0, [pc, #396]	; (5dfc <setup+0x198>)
    5c6e:	f001 fac7 	bl	7200 <VisualMicroDebug::init(unsigned long)>
    5c72:	f44f 4161 	mov.w	r1, #57600	; 0xe100
    5c76:	4861      	ldr	r0, [pc, #388]	; (5dfc <setup+0x198>)
    5c78:	f001 fabe 	bl	71f8 <VisualMicroDebug::begin(unsigned long)>
    5c7c:	2101      	movs	r1, #1
    5c7e:	485f      	ldr	r0, [pc, #380]	; (5dfc <setup+0x198>)
    5c80:	f001 fa94 	bl	71ac <VisualMicroDebug::outPacketStart(bool)>
    5c84:	b150      	cbz	r0, 5c9c <setup+0x38>
    5c86:	2110      	movs	r1, #16
    5c88:	485d      	ldr	r0, [pc, #372]	; (5e00 <setup+0x19c>)
    5c8a:	f002 fdeb 	bl	8864 <usb_serial_write>
    5c8e:	485b      	ldr	r0, [pc, #364]	; (5dfc <setup+0x198>)
    5c90:	210a      	movs	r1, #10
    5c92:	f001 fa79 	bl	7188 <VisualMicroDebug::DBG_YieldAndWait(unsigned long)>
    5c96:	4859      	ldr	r0, [pc, #356]	; (5dfc <setup+0x198>)
    5c98:	f001 faac 	bl	71f4 <VisualMicroDebug::outPacketEnd()>
    5c9c:	2201      	movs	r2, #1
    5c9e:	2100      	movs	r1, #0
    5ca0:	4856      	ldr	r0, [pc, #344]	; (5dfc <setup+0x198>)
    5ca2:	f001 fb59 	bl	7358 <VisualMicroDebug::start(bool, bool)>
	if (DEBUG) { Serial.begin(57600); Serial.setTimeout(1500); Serial.println("DEBUG ON"); }
    5ca6:	f240 51dc 	movw	r1, #1500	; 0x5dc
    5caa:	4856      	ldr	r0, [pc, #344]	; (5e04 <setup+0x1a0>)
    5cac:	f003 f836 	bl	8d1c <Stream::setTimeout(unsigned long)>
    5cb0:	2108      	movs	r1, #8
    5cb2:	4855      	ldr	r0, [pc, #340]	; (5e08 <setup+0x1a4>)
    5cb4:	f002 fdd6 	bl	8864 <usb_serial_write>
    5cb8:	4852      	ldr	r0, [pc, #328]	; (5e04 <setup+0x1a0>)
    5cba:	f002 ffd7 	bl	8c6c <Print::println()>

	delay(1000);
    5cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5cc2:	f001 fdb7 	bl	7834 <delay>
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    5cc6:	4851      	ldr	r0, [pc, #324]	; (5e0c <setup+0x1a8>)
    5cc8:	6803      	ldr	r3, [r0, #0]
    5cca:	f013 0401 	ands.w	r4, r3, #1
    5cce:	d071      	beq.n	5db4 <setup+0x150>
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    5cd0:	4c4f      	ldr	r4, [pc, #316]	; (5e10 <setup+0x1ac>)
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    5cd2:	4950      	ldr	r1, [pc, #320]	; (5e14 <setup+0x1b0>)
    5cd4:	4850      	ldr	r0, [pc, #320]	; (5e18 <setup+0x1b4>)
}

/// Set the 16-bit seed used for the random number generator
LIB8STATIC void random16_set_seed( uint16_t seed)
{
    rand16seed = seed;
    5cd6:	4d51      	ldr	r5, [pc, #324]	; (5e1c <setup+0x1b8>)
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    5cd8:	26ff      	movs	r6, #255	; 0xff
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    5cda:	2300      	movs	r3, #0
    5cdc:	2296      	movs	r2, #150	; 0x96
    5cde:	f000 fe99 	bl	6a14 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5ce2:	22b0      	movs	r2, #176	; 0xb0
    5ce4:	23f0      	movs	r3, #240	; 0xf0

	FastLED.addLeds<LED_TYPE, DATA_PIN, CLOCK_PIN, COLOR_ORDER>(master_leds, NUM_LEDS);
	FastLED.setBrightness(MAX_BRIGHT);
	FastLED.setCorrection(TypicalLEDStrip);
    5ce6:	4620      	mov	r0, r4
    5ce8:	a901      	add	r1, sp, #4
	//@}
#endif

	/// Set the global brightness scaling
	/// @param scale a 0-255 value for how much to scale all leds before writing them out
	void setBrightness(uint8_t scale) { m_Scale = scale; }
    5cea:	7026      	strb	r6, [r4, #0]
    5cec:	f88d 2005 	strb.w	r2, [sp, #5]
    5cf0:	f88d 3006 	strb.w	r3, [sp, #6]
    5cf4:	f88d 6004 	strb.w	r6, [sp, #4]
    5cf8:	f000 fecc 	bl	6a94 <CFastLED::setCorrection(CRGB const&)>
	set_max_power_in_volts_and_milliamps(5, 3000);
    5cfc:	f640 31b8 	movw	r1, #3000	; 0xbb8
    5d00:	2005      	movs	r0, #5
    5d02:	f001 fa35 	bl	7170 <set_max_power_in_volts_and_milliamps(unsigned char, unsigned long)>
    5d06:	f44f 5397 	mov.w	r3, #4832	; 0x12e0

	random16_set_seed(4832);
	random16_add_entropy(analogRead(2));
    5d0a:	2002      	movs	r0, #2
    5d0c:	802b      	strh	r3, [r5, #0]
    5d0e:	f001 fc63 	bl	75d8 <analogRead>
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    5d12:	882b      	ldrh	r3, [r5, #0]

	FastLED.clear(); FastLED.show(); FastLED.delay(50);
    5d14:	2100      	movs	r1, #0
    5d16:	4403      	add	r3, r0
    5d18:	4620      	mov	r0, r4
    5d1a:	802b      	strh	r3, [r5, #0]
    5d1c:	f000 ffcc 	bl	6cb8 <CFastLED::clear(bool)>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    5d20:	7821      	ldrb	r1, [r4, #0]
    5d22:	4620      	mov	r0, r4
    5d24:	f000 feee 	bl	6b04 <CFastLED::show(unsigned char)>
    5d28:	4620      	mov	r0, r4
    5d2a:	2132      	movs	r1, #50	; 0x32
    5d2c:	f000 ff4c 	bl	6bc8 <CFastLED::delay(unsigned long)>
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5d30:	2500      	movs	r5, #0

	if (DEBUG) {
		fill_solid(master_leds, NUM_LEDS, CRGB::Red);	FastLED.delay(250);
    5d32:	aa01      	add	r2, sp, #4
    5d34:	2196      	movs	r1, #150	; 0x96
    5d36:	4837      	ldr	r0, [pc, #220]	; (5e14 <setup+0x1b0>)
    5d38:	f88d 6004 	strb.w	r6, [sp, #4]
    5d3c:	f88d 5005 	strb.w	r5, [sp, #5]
    5d40:	f88d 5006 	strb.w	r5, [sp, #6]
    5d44:	f000 fcbc 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
    5d48:	4620      	mov	r0, r4
    5d4a:	21fa      	movs	r1, #250	; 0xfa
    5d4c:	f000 ff3c 	bl	6bc8 <CFastLED::delay(unsigned long)>
		fill_solid(master_leds, NUM_LEDS, CRGB::Blue);  FastLED.delay(250);
    5d50:	aa01      	add	r2, sp, #4
    5d52:	2196      	movs	r1, #150	; 0x96
    5d54:	482f      	ldr	r0, [pc, #188]	; (5e14 <setup+0x1b0>)
    5d56:	f88d 6006 	strb.w	r6, [sp, #6]
    5d5a:	f88d 5004 	strb.w	r5, [sp, #4]
    5d5e:	f88d 5005 	strb.w	r5, [sp, #5]
    5d62:	f000 fcad 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
    5d66:	4620      	mov	r0, r4
    5d68:	21fa      	movs	r1, #250	; 0xfa
    5d6a:	f000 ff2d 	bl	6bc8 <CFastLED::delay(unsigned long)>
    5d6e:	2380      	movs	r3, #128	; 0x80
		fill_solid(master_leds, NUM_LEDS, CRGB::Green); FastLED.delay(250);
    5d70:	aa01      	add	r2, sp, #4
    5d72:	2196      	movs	r1, #150	; 0x96
    5d74:	4827      	ldr	r0, [pc, #156]	; (5e14 <setup+0x1b0>)
    5d76:	f88d 3005 	strb.w	r3, [sp, #5]
    5d7a:	f88d 5004 	strb.w	r5, [sp, #4]
    5d7e:	f88d 5006 	strb.w	r5, [sp, #6]
    5d82:	f000 fc9d 	bl	66c0 <fill_solid(CRGB*, int, CRGB const&)>
    5d86:	4620      	mov	r0, r4
    5d88:	21fa      	movs	r1, #250	; 0xfa
    5d8a:	f000 ff1d 	bl	6bc8 <CFastLED::delay(unsigned long)>
		FastLED.clear();								FastLED.delay(250);
    5d8e:	4629      	mov	r1, r5
    5d90:	4620      	mov	r0, r4
    5d92:	f000 ff91 	bl	6cb8 <CFastLED::clear(bool)>
    5d96:	4620      	mov	r0, r4
    5d98:	21fa      	movs	r1, #250	; 0xfa
    5d9a:	f000 ff15 	bl	6bc8 <CFastLED::delay(unsigned long)>
	}

	// Set up initial parameters for cur_leds and next_leds
	initialize(); 
    5d9e:	f7fa fdf9 	bl	994 <initialize()>
    5da2:	210e      	movs	r1, #14
    5da4:	481e      	ldr	r0, [pc, #120]	; (5e20 <setup+0x1bc>)
    5da6:	f002 fd5d 	bl	8864 <usb_serial_write>
    5daa:	4816      	ldr	r0, [pc, #88]	; (5e04 <setup+0x1a0>)
    5dac:	f002 ff5e 	bl	8c6c <Print::println()>

	if (DEBUG) { Serial.println("SETUP COMPLETE"); }
}
    5db0:	b002      	add	sp, #8
    5db2:	bd70      	pop	{r4, r5, r6, pc}
			case WS2801: { static WS2801Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case WS2803: { static WS2803Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case SM16716: { static SM16716Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case P9813: { static P9813Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
			case DOTSTAR:
			case APA102: { static APA102Controller<DATA_PIN, CLOCK_PIN, RGB_ORDER> c; return addLeds(&c, data, nLedsOrOffset, nLedsIfOffset); }
    5db4:	f001 fcbe 	bl	7734 <__cxa_guard_acquire>
    5db8:	2800      	cmp	r0, #0
    5dba:	d089      	beq.n	5cd0 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    5dbc:	4919      	ldr	r1, [pc, #100]	; (5e24 <setup+0x1c0>)
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    5dbe:	4b16      	ldr	r3, [pc, #88]	; (5e18 <setup+0x1b4>)
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    5dc0:	6808      	ldr	r0, [r1, #0]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    5dc2:	605c      	str	r4, [r3, #4]
    {
    }

    /// allow construction from a LEDColorCorrection enum
    inline CRGB( LEDColorCorrection colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5dc4:	22ff      	movs	r2, #255	; 0xff
    5dc6:	2501      	movs	r5, #1
    5dc8:	615c      	str	r4, [r3, #20]
        m_pNext = NULL;
    5dca:	609c      	str	r4, [r3, #8]
	///@param scale the rgb scaling to apply to each led before writing it out
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) = 0;

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    5dcc:	749d      	strb	r5, [r3, #18]
    5dce:	731a      	strb	r2, [r3, #12]
    5dd0:	735a      	strb	r2, [r3, #13]
    5dd2:	739a      	strb	r2, [r3, #14]

    }

    /// allow construction from a ColorTemperature enum
    inline CRGB( ColorTemperature colorcode) __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5dd4:	73da      	strb	r2, [r3, #15]
    5dd6:	741a      	strb	r2, [r3, #16]
    5dd8:	745a      	strb	r2, [r3, #17]
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    5dda:	b160      	cbz	r0, 5df6 <setup+0x192>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    5ddc:	4a12      	ldr	r2, [pc, #72]	; (5e28 <setup+0x1c4>)
    5dde:	6811      	ldr	r1, [r2, #0]
    5de0:	b101      	cbz	r1, 5de4 <setup+0x180>
    5de2:	608b      	str	r3, [r1, #8]
        m_pTail = this;
    5de4:	6013      	str	r3, [r2, #0]
	typedef typename FastPin<DATA_PIN>::port_t data_t;
	typedef typename FastPin<CLOCK_PIN>::port_t clock_t;
	Selectable 	*m_pSelect;

public:
	AVRSoftwareSPIOutput() { m_pSelect = NULL; }
    5de6:	2200      	movs	r2, #0
		mSPI.writeWord(w);
#endif
	}

public:
	APA102Controller() {}
    5de8:	4910      	ldr	r1, [pc, #64]	; (5e2c <setup+0x1c8>)
    5dea:	4808      	ldr	r0, [pc, #32]	; (5e0c <setup+0x1a8>)
    5dec:	619a      	str	r2, [r3, #24]
    5dee:	6019      	str	r1, [r3, #0]
    5df0:	f001 fca6 	bl	7740 <__cxa_guard_release>
    5df4:	e76c      	b.n	5cd0 <setup+0x6c>

public:
	/// create an led controller object, add it to the chain of controllers
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
        m_pNext = NULL;
        if(m_pHead==NULL) { m_pHead = this; }
    5df6:	600b      	str	r3, [r1, #0]
    5df8:	e7f0      	b.n	5ddc <setup+0x178>
    5dfa:	bf00      	nop
    5dfc:	1fff9db0 	.word	0x1fff9db0
    5e00:	0000b180 	.word	0x0000b180
    5e04:	1fff8754 	.word	0x1fff8754
    5e08:	0000b194 	.word	0x0000b194
    5e0c:	1fff8c54 	.word	0x1fff8c54
    5e10:	1fff9d88 	.word	0x1fff9d88
    5e14:	1fff9bc4 	.word	0x1fff9bc4
    5e18:	1fff8c58 	.word	0x1fff8c58
    5e1c:	1fff874a 	.word	0x1fff874a
    5e20:	0000b1a0 	.word	0x0000b1a0
    5e24:	1fff9d98 	.word	0x1fff9d98
    5e28:	1fff9da8 	.word	0x1fff9da8
    5e2c:	00009b20 	.word	0x00009b20

00005e30 <loop>:



// ================ LOOP ================

void loop() {
    5e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e34:	b097      	sub	sp, #92	; 0x5c
	// Add entropy to randomness
	random16_add_entropy(random());
    5e36:	f003 fdbf 	bl	99b8 <random>

	// Change patterns
	EVERY_N_SECONDS(20){
    5e3a:	4da8      	ldr	r5, [pc, #672]	; (60dc <loop+0x2ac>)
    5e3c:	4aa8      	ldr	r2, [pc, #672]	; (60e0 <loop+0x2b0>)
    5e3e:	6829      	ldr	r1, [r5, #0]
    5e40:	8813      	ldrh	r3, [r2, #0]
    5e42:	4418      	add	r0, r3
    5e44:	07cb      	lsls	r3, r1, #31
    5e46:	8010      	strh	r0, [r2, #0]
    5e48:	f140 81a4 	bpl.w	6194 <loop+0x364>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5e4c:	4ea5      	ldr	r6, [pc, #660]	; (60e4 <loop+0x2b4>)
    5e4e:	4ca6      	ldr	r4, [pc, #664]	; (60e8 <loop+0x2b8>)
    5e50:	6833      	ldr	r3, [r6, #0]
    5e52:	9303      	str	r3, [sp, #12]
	return ret;
    5e54:	9a03      	ldr	r2, [sp, #12]
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5e56:	48a5      	ldr	r0, [pc, #660]	; (60ec <loop+0x2bc>)
    5e58:	8823      	ldrh	r3, [r4, #0]
    5e5a:	8861      	ldrh	r1, [r4, #2]
    5e5c:	fba0 0202 	umull	r0, r2, r0, r2
    5e60:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5e64:	b29b      	uxth	r3, r3
    5e66:	4299      	cmp	r1, r3
    5e68:	d809      	bhi.n	5e7e <loop+0x4e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5e6a:	6833      	ldr	r3, [r6, #0]
    5e6c:	9302      	str	r3, [sp, #8]
	return ret;
    5e6e:	9b02      	ldr	r3, [sp, #8]
    5e70:	4a9e      	ldr	r2, [pc, #632]	; (60ec <loop+0x2bc>)
    5e72:	fba2 2303 	umull	r2, r3, r2, r3
    5e76:	099b      	lsrs	r3, r3, #6
    5e78:	8023      	strh	r3, [r4, #0]
		change_pattern();
    5e7a:	f7ff fe75 	bl	5b68 <change_pattern()>
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    5e7e:	4d9c      	ldr	r5, [pc, #624]	; (60f0 <loop+0x2c0>)
    5e80:	682b      	ldr	r3, [r5, #0]
    5e82:	07df      	lsls	r7, r3, #31
    5e84:	f140 817d 	bpl.w	6182 <loop+0x352>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5e88:	6833      	ldr	r3, [r6, #0]
    5e8a:	4c9a      	ldr	r4, [pc, #616]	; (60f4 <loop+0x2c4>)
    5e8c:	9306      	str	r3, [sp, #24]
	return ret;
    5e8e:	9a06      	ldr	r2, [sp, #24]
    5e90:	4896      	ldr	r0, [pc, #600]	; (60ec <loop+0x2bc>)
    5e92:	8823      	ldrh	r3, [r4, #0]
    5e94:	8861      	ldrh	r1, [r4, #2]
    5e96:	fba0 0202 	umull	r0, r2, r0, r2
    5e9a:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5e9e:	b29b      	uxth	r3, r3
    5ea0:	4299      	cmp	r1, r3
    5ea2:	f240 8101 	bls.w	60a8 <loop+0x278>
    5ea6:	4f94      	ldr	r7, [pc, #592]	; (60f8 <loop+0x2c8>)
    5ea8:	f8df 929c 	ldr.w	r9, [pc, #668]	; 6148 <loop+0x318>
    5eac:	f8df a26c 	ldr.w	sl, [pc, #620]	; 611c <loop+0x2ec>
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    5eb0:	4d92      	ldr	r5, [pc, #584]	; (60fc <loop+0x2cc>)
    5eb2:	682b      	ldr	r3, [r5, #0]
    5eb4:	07dc      	lsls	r4, r3, #31
    5eb6:	f140 815c 	bpl.w	6172 <loop+0x342>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5eba:	6833      	ldr	r3, [r6, #0]
    5ebc:	4c90      	ldr	r4, [pc, #576]	; (6100 <loop+0x2d0>)
    5ebe:	9309      	str	r3, [sp, #36]	; 0x24
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    5ec0:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ec6:	1a5b      	subs	r3, r3, r1
    5ec8:	4293      	cmp	r3, r2
    5eca:	d30d      	bcc.n	5ee8 <loop+0xb8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5ecc:	6833      	ldr	r3, [r6, #0]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
    5ece:	498d      	ldr	r1, [pc, #564]	; (6104 <loop+0x2d4>)
    5ed0:	9308      	str	r3, [sp, #32]
	return ret;
    5ed2:	9b08      	ldr	r3, [sp, #32]
    5ed4:	6023      	str	r3, [r4, #0]
    5ed6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    5eda:	2218      	movs	r2, #24
    5edc:	f000 fd72 	bl	69c4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    5ee0:	783b      	ldrb	r3, [r7, #0]
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	f040 817f 	bne.w	61e6 <loop+0x3b6>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5ee8:	f8df 8260 	ldr.w	r8, [pc, #608]	; 614c <loop+0x31c>
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;
    5eec:	4d86      	ldr	r5, [pc, #536]	; (6108 <loop+0x2d8>)

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5eee:	f8d8 3000 	ldr.w	r3, [r8]
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    5ef2:	f8df b25c 	ldr.w	fp, [pc, #604]	; 6150 <loop+0x320>
    5ef6:	f89a 21c3 	ldrb.w	r2, [sl, #451]	; 0x1c3
	next_delay = next_leds.delay_time;
    5efa:	f899 11c3 	ldrb.w	r1, [r9, #451]	; 0x1c3
    5efe:	7029      	strb	r1, [r5, #0]

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5f00:	07d8      	lsls	r0, r3, #31
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
	}	

	// Update delay times
	curr_delay = curr_leds.delay_time;
    5f02:	f88b 2000 	strb.w	r2, [fp]
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    5f06:	f140 80b4 	bpl.w	6072 <loop+0x242>
    5f0a:	4c80      	ldr	r4, [pc, #512]	; (610c <loop+0x2dc>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f0c:	6833      	ldr	r3, [r6, #0]
    5f0e:	930c      	str	r3, [sp, #48]	; 0x30
    5f10:	e894 0003 	ldmia.w	r4, {r0, r1}
	return ret;
    5f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5f16:	1a1b      	subs	r3, r3, r0
    5f18:	428b      	cmp	r3, r1
    5f1a:	f080 80bc 	bcs.w	6096 <loop+0x266>
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    5f1e:	f8df 8234 	ldr.w	r8, [pc, #564]	; 6154 <loop+0x324>
    5f22:	f8d8 3000 	ldr.w	r3, [r8]
    5f26:	07d9      	lsls	r1, r3, #31
    5f28:	d56d      	bpl.n	6006 <loop+0x1d6>
    5f2a:	4c79      	ldr	r4, [pc, #484]	; (6110 <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f2c:	6833      	ldr	r3, [r6, #0]
    5f2e:	930f      	str	r3, [sp, #60]	; 0x3c
    5f30:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    5f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5f36:	1a5b      	subs	r3, r3, r1
    5f38:	429a      	cmp	r2, r3
    5f3a:	d973      	bls.n	6024 <loop+0x1f4>
			switch_mode(next_leds);
		}
	}
	
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
    5f3c:	783b      	ldrb	r3, [r7, #0]
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d079      	beq.n	6036 <loop+0x206>
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    5f42:	4d74      	ldr	r5, [pc, #464]	; (6114 <loop+0x2e4>)
		case BLENDING:
			blending();
			break;

		default: 
			blending();
    5f44:	f7fa fde4 	bl	b10 <blending()>
    5f48:	682b      	ldr	r3, [r5, #0]
    5f4a:	07da      	lsls	r2, r3, #31
    5f4c:	f140 8087 	bpl.w	605e <loop+0x22e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f50:	6833      	ldr	r3, [r6, #0]
    5f52:	4c71      	ldr	r4, [pc, #452]	; (6118 <loop+0x2e8>)
    5f54:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    5f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    5f58:	4864      	ldr	r0, [pc, #400]	; (60ec <loop+0x2bc>)
    5f5a:	8823      	ldrh	r3, [r4, #0]
    5f5c:	8861      	ldrh	r1, [r4, #2]
    5f5e:	fba0 0202 	umull	r0, r2, r0, r2
    5f62:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
    5f66:	b29b      	uxth	r3, r3
    5f68:	4299      	cmp	r1, r3
    5f6a:	d826      	bhi.n	5fba <loop+0x18a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f6c:	6833      	ldr	r3, [r6, #0]
    5f6e:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    5f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5f72:	4a5e      	ldr	r2, [pc, #376]	; (60ec <loop+0x2bc>)
			LEDDebug(curr_leds);
    5f74:	4869      	ldr	r0, [pc, #420]	; (611c <loop+0x2ec>)
    5f76:	fba2 2303 	umull	r2, r3, r2, r3
    5f7a:	099b      	lsrs	r3, r3, #6
    5f7c:	8023      	strh	r3, [r4, #0]
    5f7e:	f7fb fb91 	bl	16a4 <LEDDebug(LEDStruct&)>
			if (in_transition) {
    5f82:	783b      	ldrb	r3, [r7, #0]
    5f84:	2b00      	cmp	r3, #0
    5f86:	f040 812a 	bne.w	61de <loop+0x3ae>
    5f8a:	2114      	movs	r1, #20
    5f8c:	4864      	ldr	r0, [pc, #400]	; (6120 <loop+0x2f0>)
    5f8e:	f002 fc69 	bl	8864 <usb_serial_write>
				LEDDebug(next_leds);
			}
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
    5f92:	4b64      	ldr	r3, [pc, #400]	; (6124 <loop+0x2f4>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5f94:	4864      	ldr	r0, [pc, #400]	; (6128 <loop+0x2f8>)
    5f96:	8819      	ldrh	r1, [r3, #0]
    5f98:	f002 feb8 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5f9c:	4862      	ldr	r0, [pc, #392]	; (6128 <loop+0x2f8>)
    5f9e:	f002 fe65 	bl	8c6c <Print::println()>
    5fa2:	2116      	movs	r1, #22
    5fa4:	4861      	ldr	r0, [pc, #388]	; (612c <loop+0x2fc>)
    5fa6:	f002 fc5d 	bl	8864 <usb_serial_write>
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
    5faa:	4b61      	ldr	r3, [pc, #388]	; (6130 <loop+0x300>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    5fac:	485e      	ldr	r0, [pc, #376]	; (6128 <loop+0x2f8>)
    5fae:	8819      	ldrh	r1, [r3, #0]
    5fb0:	f002 feac 	bl	8d0c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    5fb4:	485c      	ldr	r0, [pc, #368]	; (6128 <loop+0x2f8>)
    5fb6:	f002 fe59 	bl	8c6c <Print::println()>
		}
		EVERY_N_MINUTES(1) {
    5fba:	4d5e      	ldr	r5, [pc, #376]	; (6134 <loop+0x304>)
    5fbc:	682b      	ldr	r3, [r5, #0]
    5fbe:	07db      	lsls	r3, r3, #31
    5fc0:	f140 80fe 	bpl.w	61c0 <loop+0x390>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fc4:	6833      	ldr	r3, [r6, #0]
    5fc6:	4c5c      	ldr	r4, [pc, #368]	; (6138 <loop+0x308>)
    5fc8:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    5fca:	9a15      	ldr	r2, [sp, #84]	; 0x54
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    5fcc:	485b      	ldr	r0, [pc, #364]	; (613c <loop+0x30c>)
    5fce:	8823      	ldrh	r3, [r4, #0]
    5fd0:	8861      	ldrh	r1, [r4, #2]
    5fd2:	fba0 0202 	umull	r0, r2, r0, r2
    5fd6:	ebc3 3392 	rsb	r3, r3, r2, lsr #14
    5fda:	b29b      	uxth	r3, r3
    5fdc:	4299      	cmp	r1, r3
    5fde:	d80b      	bhi.n	5ff8 <loop+0x1c8>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fe0:	6833      	ldr	r3, [r6, #0]
			number_of_min_on++;
    5fe2:	4953      	ldr	r1, [pc, #332]	; (6130 <loop+0x300>)
    5fe4:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    5fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5fe8:	4854      	ldr	r0, [pc, #336]	; (613c <loop+0x30c>)
    5fea:	880a      	ldrh	r2, [r1, #0]
    5fec:	fba0 0303 	umull	r0, r3, r0, r3
    5ff0:	0b9b      	lsrs	r3, r3, #14
    5ff2:	3201      	adds	r2, #1
    5ff4:	8023      	strh	r3, [r4, #0]
    5ff6:	800a      	strh	r2, [r1, #0]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    5ff8:	4851      	ldr	r0, [pc, #324]	; (6140 <loop+0x310>)
    5ffa:	7801      	ldrb	r1, [r0, #0]
    5ffc:	f000 fd82 	bl	6b04 <CFastLED::show(unsigned char)>
		}
	}

	FastLED.show();

    6000:	b017      	add	sp, #92	; 0x5c
    6002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    6006:	4640      	mov	r0, r8
    6008:	f001 fb94 	bl	7734 <__cxa_guard_acquire>
    600c:	2800      	cmp	r0, #0
    600e:	f040 811b 	bne.w	6248 <loop+0x418>
    6012:	4c3f      	ldr	r4, [pc, #252]	; (6110 <loop+0x2e0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6014:	6833      	ldr	r3, [r6, #0]
    6016:	930f      	str	r3, [sp, #60]	; 0x3c
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    6018:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    601c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    601e:	1a5b      	subs	r3, r3, r1
    6020:	4293      	cmp	r3, r2
    6022:	d38b      	bcc.n	5f3c <loop+0x10c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6024:	6833      	ldr	r3, [r6, #0]
    6026:	930e      	str	r3, [sp, #56]	; 0x38
		if(in_transition){
    6028:	783b      	ldrb	r3, [r7, #0]
	return ret;
    602a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    602c:	6022      	str	r2, [r4, #0]
    602e:	4a38      	ldr	r2, [pc, #224]	; (6110 <loop+0x2e0>)
    6030:	2b00      	cmp	r3, #0
    6032:	f040 80ce 	bne.w	61d2 <loop+0x3a2>
    6036:	4b39      	ldr	r3, [pc, #228]	; (611c <loop+0x2ec>)
    6038:	4a42      	ldr	r2, [pc, #264]	; (6144 <loop+0x314>)
    603a:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    603e:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
    6040:	7858      	ldrb	r0, [r3, #1]
        b = rhs.b;
    6042:	7899      	ldrb	r1, [r3, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6044:	7014      	strb	r4, [r2, #0]
    6046:	3303      	adds	r3, #3
	// Add leds from curr_leds (and maybe next_leds) to master_leds
	if(in_transition){
		switch_transition(transition_type);
	}
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
    6048:	429d      	cmp	r5, r3
        g = rhs.g;
    604a:	7050      	strb	r0, [r2, #1]
        b = rhs.b;
    604c:	7091      	strb	r1, [r2, #2]
    604e:	f102 0203 	add.w	r2, r2, #3
    6052:	d1f4      	bne.n	603e <loop+0x20e>
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    6054:	4d2f      	ldr	r5, [pc, #188]	; (6114 <loop+0x2e4>)
    6056:	682b      	ldr	r3, [r5, #0]
    6058:	07da      	lsls	r2, r3, #31
    605a:	f53f af79 	bmi.w	5f50 <loop+0x120>
    605e:	4628      	mov	r0, r5
    6060:	f001 fb68 	bl	7734 <__cxa_guard_acquire>
    6064:	2800      	cmp	r0, #0
    6066:	f040 80fa 	bne.w	625e <loop+0x42e>
    606a:	4c2b      	ldr	r4, [pc, #172]	; (6118 <loop+0x2e8>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    606c:	6833      	ldr	r3, [r6, #0]
    606e:	9312      	str	r3, [sp, #72]	; 0x48
    6070:	e771      	b.n	5f56 <loop+0x126>
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    6072:	4640      	mov	r0, r8
    6074:	f001 fb5e 	bl	7734 <__cxa_guard_acquire>
    6078:	2800      	cmp	r0, #0
    607a:	f040 80d9 	bne.w	6230 <loop+0x400>
    607e:	4c23      	ldr	r4, [pc, #140]	; (610c <loop+0x2dc>)
    6080:	6833      	ldr	r3, [r6, #0]
    6082:	930c      	str	r3, [sp, #48]	; 0x30
    6084:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    6088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    608a:	1a5b      	subs	r3, r3, r1
    608c:	4293      	cmp	r3, r2
    608e:	f4ff af46 	bcc.w	5f1e <loop+0xee>
    6092:	f89b 2000 	ldrb.w	r2, [fp]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6096:	6833      	ldr	r3, [r6, #0]
    6098:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    609a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
    609c:	481f      	ldr	r0, [pc, #124]	; (611c <loop+0x2ec>)
    609e:	6062      	str	r2, [r4, #4]
    60a0:	6023      	str	r3, [r4, #0]
    60a2:	f7ff f8e7 	bl	5274 <switch_mode(LEDStruct&)>
    60a6:	e73a      	b.n	5f1e <loop+0xee>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60a8:	6833      	ldr	r3, [r6, #0]
    60aa:	9305      	str	r3, [sp, #20]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    60ac:	4a0f      	ldr	r2, [pc, #60]	; (60ec <loop+0x2bc>)
	return ret;
    60ae:	9b05      	ldr	r3, [sp, #20]
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
		if (in_transition) { change_palette(next_leds); }
    60b0:	4f11      	ldr	r7, [pc, #68]	; (60f8 <loop+0x2c8>)
    60b2:	fba2 2303 	umull	r2, r3, r2, r3
    60b6:	783a      	ldrb	r2, [r7, #0]
    60b8:	099b      	lsrs	r3, r3, #6
    60ba:	8023      	strh	r3, [r4, #0]
    60bc:	2a00      	cmp	r2, #0
    60be:	d04b      	beq.n	6158 <loop+0x328>
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
	if (leds.use_palette) {
    60c0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 6148 <loop+0x318>
    60c4:	f899 3229 	ldrb.w	r3, [r9, #553]	; 0x229
    60c8:	2b00      	cmp	r3, #0
    60ca:	f43f aeef 	beq.w	5eac <loop+0x7c>
    60ce:	4648      	mov	r0, r9
    60d0:	f7fb fee6 	bl	1ea0 <change_palette(LEDStruct&) [clone .part.11]>
    60d4:	f8df a044 	ldr.w	sl, [pc, #68]	; 611c <loop+0x2ec>
    60d8:	e6ea      	b.n	5eb0 <loop+0x80>
    60da:	bf00      	nop
    60dc:	1fff9420 	.word	0x1fff9420
    60e0:	1fff874a 	.word	0x1fff874a
    60e4:	1fff9e00 	.word	0x1fff9e00
    60e8:	1fff9408 	.word	0x1fff9408
    60ec:	10624dd3 	.word	0x10624dd3
    60f0:	1fff9424 	.word	0x1fff9424
    60f4:	1fff940c 	.word	0x1fff940c
    60f8:	1fff93f8 	.word	0x1fff93f8
    60fc:	1fff9428 	.word	0x1fff9428
    6100:	1fff8c78 	.word	0x1fff8c78
    6104:	1fff9653 	.word	0x1fff9653
    6108:	1fff9435 	.word	0x1fff9435
    610c:	1fff93f0 	.word	0x1fff93f0
    6110:	1fff93e8 	.word	0x1fff93e8
    6114:	1fff942c 	.word	0x1fff942c
    6118:	1fff9410 	.word	0x1fff9410
    611c:	1fff945c 	.word	0x1fff945c
    6120:	0000b1b0 	.word	0x0000b1b0
    6124:	1fff8c74 	.word	0x1fff8c74
    6128:	1fff8754 	.word	0x1fff8754
    612c:	0000b1c8 	.word	0x0000b1c8
    6130:	1fff9448 	.word	0x1fff9448
    6134:	1fff9430 	.word	0x1fff9430
    6138:	1fff9414 	.word	0x1fff9414
    613c:	45e7b273 	.word	0x45e7b273
    6140:	1fff9d88 	.word	0x1fff9d88
    6144:	1fff9bc4 	.word	0x1fff9bc4
    6148:	1fff8c80 	.word	0x1fff8c80
    614c:	1fff9458 	.word	0x1fff9458
    6150:	1fff9434 	.word	0x1fff9434
    6154:	1fff9454 	.word	0x1fff9454
    6158:	f8df a174 	ldr.w	sl, [pc, #372]	; 62d0 <loop+0x4a0>
    615c:	f89a 3229 	ldrb.w	r3, [sl, #553]	; 0x229
    6160:	2b00      	cmp	r3, #0
    6162:	d147      	bne.n	61f4 <loop+0x3c4>
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    6164:	4d4d      	ldr	r5, [pc, #308]	; (629c <loop+0x46c>)
    6166:	f8df 9150 	ldr.w	r9, [pc, #336]	; 62b8 <loop+0x488>
    616a:	682b      	ldr	r3, [r5, #0]
    616c:	07dc      	lsls	r4, r3, #31
    616e:	f53f aea4 	bmi.w	5eba <loop+0x8a>
    6172:	4628      	mov	r0, r5
    6174:	f001 fade 	bl	7734 <__cxa_guard_acquire>
    6178:	2800      	cmp	r0, #0
    617a:	d13f      	bne.n	61fc <loop+0x3cc>
    617c:	4c48      	ldr	r4, [pc, #288]	; (62a0 <loop+0x470>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    617e:	6833      	ldr	r3, [r6, #0]
    6180:	e69d      	b.n	5ebe <loop+0x8e>
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    6182:	4628      	mov	r0, r5
    6184:	f001 fad6 	bl	7734 <__cxa_guard_acquire>
    6188:	2800      	cmp	r0, #0
    618a:	d142      	bne.n	6212 <loop+0x3e2>
    618c:	4c45      	ldr	r4, [pc, #276]	; (62a4 <loop+0x474>)
    618e:	6833      	ldr	r3, [r6, #0]
    6190:	9306      	str	r3, [sp, #24]
    6192:	e67c      	b.n	5e8e <loop+0x5e>
void loop() {
	// Add entropy to randomness
	random16_add_entropy(random());

	// Change patterns
	EVERY_N_SECONDS(20){
    6194:	4628      	mov	r0, r5
    6196:	f001 facd 	bl	7734 <__cxa_guard_acquire>
    619a:	4e43      	ldr	r6, [pc, #268]	; (62a8 <loop+0x478>)
    619c:	2800      	cmp	r0, #0
    619e:	f43f ae56 	beq.w	5e4e <loop+0x1e>
    61a2:	6833      	ldr	r3, [r6, #0]
    61a4:	9301      	str	r3, [sp, #4]
    61a6:	4a41      	ldr	r2, [pc, #260]	; (62ac <loop+0x47c>)
	return ret;
    61a8:	9b01      	ldr	r3, [sp, #4]
    61aa:	4c41      	ldr	r4, [pc, #260]	; (62b0 <loop+0x480>)
    61ac:	fba2 2303 	umull	r2, r3, r2, r3
    61b0:	099b      	lsrs	r3, r3, #6
    61b2:	2214      	movs	r2, #20
    61b4:	4628      	mov	r0, r5
    61b6:	8023      	strh	r3, [r4, #0]
    61b8:	8062      	strh	r2, [r4, #2]
    61ba:	f001 fac1 	bl	7740 <__cxa_guard_release>
    61be:	e647      	b.n	5e50 <loop+0x20>
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    61c0:	4628      	mov	r0, r5
    61c2:	f001 fab7 	bl	7734 <__cxa_guard_acquire>
    61c6:	2800      	cmp	r0, #0
    61c8:	d158      	bne.n	627c <loop+0x44c>
    61ca:	4c3a      	ldr	r4, [pc, #232]	; (62b4 <loop+0x484>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61cc:	6833      	ldr	r3, [r6, #0]
    61ce:	9315      	str	r3, [sp, #84]	; 0x54
    61d0:	e6fb      	b.n	5fca <loop+0x19a>
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    61d2:	782b      	ldrb	r3, [r5, #0]

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
		if(in_transition){
			next_timer.setPeriod(next_delay);
			switch_mode(next_leds);
    61d4:	4838      	ldr	r0, [pc, #224]	; (62b8 <loop+0x488>)
    61d6:	6053      	str	r3, [r2, #4]
    61d8:	f7ff f84c 	bl	5274 <switch_mode(LEDStruct&)>
    61dc:	e6ae      	b.n	5f3c <loop+0x10c>

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
			LEDDebug(curr_leds);
			if (in_transition) {
				LEDDebug(next_leds);
    61de:	4836      	ldr	r0, [pc, #216]	; (62b8 <loop+0x488>)
    61e0:	f7fb fa60 	bl	16a4 <LEDDebug(LEDStruct&)>
    61e4:	e6d1      	b.n	5f8a <loop+0x15a>
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
		nblendPaletteTowardPalette(curr_leds.current_palette, curr_leds.target_palette, 24);
		if(in_transition){ nblendPaletteTowardPalette(next_leds.current_palette, next_leds.target_palette, 24); }
    61e6:	4935      	ldr	r1, [pc, #212]	; (62bc <loop+0x48c>)
    61e8:	2218      	movs	r2, #24
    61ea:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    61ee:	f000 fbe9 	bl	69c4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>
    61f2:	e679      	b.n	5ee8 <loop+0xb8>
    61f4:	4650      	mov	r0, sl
    61f6:	f7fb fe53 	bl	1ea0 <change_palette(LEDStruct&) [clone .part.11]>
    61fa:	e7b3      	b.n	6164 <loop+0x334>
    61fc:	6833      	ldr	r3, [r6, #0]
    61fe:	4c28      	ldr	r4, [pc, #160]	; (62a0 <loop+0x470>)
    6200:	9307      	str	r3, [sp, #28]
	return ret;
    6202:	9b07      	ldr	r3, [sp, #28]
    6204:	6023      	str	r3, [r4, #0]
    6206:	2332      	movs	r3, #50	; 0x32
		if (in_transition) { change_palette(next_leds); }
		else               { change_palette(curr_leds); }
	}

	// Blend palette of the curr_leds pattern.  Don't worry about the next_leds.
	EVERY_N_MILLISECONDS(50) {
    6208:	4628      	mov	r0, r5
    620a:	6063      	str	r3, [r4, #4]
    620c:	f001 fa98 	bl	7740 <__cxa_guard_release>
    6210:	e7b5      	b.n	617e <loop+0x34e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6212:	6833      	ldr	r3, [r6, #0]
    6214:	9304      	str	r3, [sp, #16]
	return ret;
    6216:	9b04      	ldr	r3, [sp, #16]
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    6218:	4a24      	ldr	r2, [pc, #144]	; (62ac <loop+0x47c>)
    621a:	4c22      	ldr	r4, [pc, #136]	; (62a4 <loop+0x474>)
    621c:	fba2 2303 	umull	r2, r3, r2, r3
    6220:	099b      	lsrs	r3, r3, #6
    6222:	221e      	movs	r2, #30
	EVERY_N_SECONDS(20){
		change_pattern();
	}

	// Change palette
	EVERY_N_SECONDS(30) {
    6224:	4628      	mov	r0, r5
    6226:	8023      	strh	r3, [r4, #0]
    6228:	8062      	strh	r2, [r4, #2]
    622a:	f001 fa89 	bl	7740 <__cxa_guard_release>
    622e:	e7ae      	b.n	618e <loop+0x35e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6230:	6833      	ldr	r3, [r6, #0]
    6232:	930a      	str	r3, [sp, #40]	; 0x28
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    6234:	4c22      	ldr	r4, [pc, #136]	; (62c0 <loop+0x490>)
	return ret;
    6236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	// Update delay times
	curr_delay = curr_leds.delay_time;
	next_delay = next_leds.delay_time;

	// Apply effect to curr_leds
	EVERY_N_MILLIS_I(curr_timer, curr_delay) {
    6238:	f89b 3000 	ldrb.w	r3, [fp]
    623c:	6022      	str	r2, [r4, #0]
    623e:	4640      	mov	r0, r8
    6240:	6063      	str	r3, [r4, #4]
    6242:	f001 fa7d 	bl	7740 <__cxa_guard_release>
    6246:	e71b      	b.n	6080 <loop+0x250>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6248:	6833      	ldr	r3, [r6, #0]
    624a:	930d      	str	r3, [sp, #52]	; 0x34
    624c:	4c1d      	ldr	r4, [pc, #116]	; (62c4 <loop+0x494>)
	return ret;
    624e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		curr_timer.setPeriod(curr_delay);
		switch_mode(curr_leds);
	}

	// Apply effect to next_leds
	EVERY_N_MILLIS_I(next_timer, next_delay){
    6250:	782b      	ldrb	r3, [r5, #0]
    6252:	6022      	str	r2, [r4, #0]
    6254:	4640      	mov	r0, r8
    6256:	6063      	str	r3, [r4, #4]
    6258:	f001 fa72 	bl	7740 <__cxa_guard_release>
    625c:	e6da      	b.n	6014 <loop+0x1e4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    625e:	6833      	ldr	r3, [r6, #0]
    6260:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    6262:	9b10      	ldr	r3, [sp, #64]	; 0x40
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNSeconds,uint16_t,seconds16);
    6264:	4a11      	ldr	r2, [pc, #68]	; (62ac <loop+0x47c>)
    6266:	4c18      	ldr	r4, [pc, #96]	; (62c8 <loop+0x498>)
    6268:	fba2 2303 	umull	r2, r3, r2, r3
    626c:	099b      	lsrs	r3, r3, #6
    626e:	2205      	movs	r2, #5
	else {
		for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = curr_leds.led_data[i]; }
	}

	if (DEBUG) {
		EVERY_N_SECONDS(5) {
    6270:	4628      	mov	r0, r5
    6272:	8023      	strh	r3, [r4, #0]
    6274:	8062      	strh	r2, [r4, #2]
    6276:	f001 fa63 	bl	7740 <__cxa_guard_release>
    627a:	e6f7      	b.n	606c <loop+0x23c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    627c:	6833      	ldr	r3, [r6, #0]
    627e:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6280:	9b13      	ldr	r3, [sp, #76]	; 0x4c
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNBSeconds,uint16_t,bseconds16);
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMinutes,uint16_t,minutes16);
    6282:	4a12      	ldr	r2, [pc, #72]	; (62cc <loop+0x49c>)
    6284:	4c0b      	ldr	r4, [pc, #44]	; (62b4 <loop+0x484>)
    6286:	fba2 2303 	umull	r2, r3, r2, r3
    628a:	0b9b      	lsrs	r3, r3, #14
    628c:	2201      	movs	r2, #1
			Serial.print("Mode change number: ");
			Serial.println(number_of_mode_changes);
			Serial.print("Number of minutes on: ");
			Serial.println(number_of_min_on);
		}
		EVERY_N_MINUTES(1) {
    628e:	4628      	mov	r0, r5
    6290:	8023      	strh	r3, [r4, #0]
    6292:	8062      	strh	r2, [r4, #2]
    6294:	f001 fa54 	bl	7740 <__cxa_guard_release>
    6298:	e798      	b.n	61cc <loop+0x39c>
    629a:	bf00      	nop
    629c:	1fff9428 	.word	0x1fff9428
    62a0:	1fff8c78 	.word	0x1fff8c78
    62a4:	1fff940c 	.word	0x1fff940c
    62a8:	1fff9e00 	.word	0x1fff9e00
    62ac:	10624dd3 	.word	0x10624dd3
    62b0:	1fff9408 	.word	0x1fff9408
    62b4:	1fff9414 	.word	0x1fff9414
    62b8:	1fff8c80 	.word	0x1fff8c80
    62bc:	1fff8e77 	.word	0x1fff8e77
    62c0:	1fff93f0 	.word	0x1fff93f0
    62c4:	1fff93e8 	.word	0x1fff93e8
    62c8:	1fff9410 	.word	0x1fff9410
    62cc:	45e7b273 	.word	0x45e7b273
    62d0:	1fff945c 	.word	0x1fff945c

000062d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>:
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }

	// naive writeByte implelentation, simply calls writeBit on the 8 bits in the byte.
	static void writeByte(uint8_t b) {
    62d4:	b410      	push	{r4}
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    62d6:	0604      	lsls	r4, r0, #24
    62d8:	f100 8119 	bmi.w	650e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x23a>
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    62dc:	4b48      	ldr	r3, [pc, #288]	; (6400 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    62de:	4949      	ldr	r1, [pc, #292]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    62e0:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    62e2:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    62e4:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    62e6:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    62e8:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    62ea:	bf00      	nop
    62ec:	bf00      	nop
    62ee:	bf00      	nop
    62f0:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    62f2:	601a      	str	r2, [r3, #0]
    62f4:	bf00      	nop
    62f6:	bf00      	nop
    62f8:	bf00      	nop
    62fa:	bf00      	nop
    62fc:	0641      	lsls	r1, r0, #25
    62fe:	f140 8083 	bpl.w	6408 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x134>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6302:	4a40      	ldr	r2, [pc, #256]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    6304:	2102      	movs	r1, #2
    6306:	2304      	movs	r3, #4
    6308:	6011      	str	r1, [r2, #0]
    630a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    630c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    630e:	bf00      	nop
    6310:	bf00      	nop
    6312:	bf00      	nop
    6314:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6316:	6053      	str	r3, [r2, #4]
    6318:	bf00      	nop
    631a:	bf00      	nop
    631c:	bf00      	nop
    631e:	bf00      	nop
    6320:	0682      	lsls	r2, r0, #26
    6322:	f140 8084 	bpl.w	642e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x15a>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6326:	4a37      	ldr	r2, [pc, #220]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    6328:	2102      	movs	r1, #2
    632a:	2304      	movs	r3, #4
    632c:	6011      	str	r1, [r2, #0]
    632e:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6330:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    6332:	bf00      	nop
    6334:	bf00      	nop
    6336:	bf00      	nop
    6338:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    633a:	6053      	str	r3, [r2, #4]
    633c:	bf00      	nop
    633e:	bf00      	nop
    6340:	bf00      	nop
    6342:	bf00      	nop
    6344:	06c3      	lsls	r3, r0, #27
    6346:	f140 8085 	bpl.w	6454 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x180>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    634a:	4a2e      	ldr	r2, [pc, #184]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    634c:	2102      	movs	r1, #2
    634e:	2304      	movs	r3, #4
    6350:	6011      	str	r1, [r2, #0]
    6352:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6354:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    6356:	bf00      	nop
    6358:	bf00      	nop
    635a:	bf00      	nop
    635c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    635e:	6053      	str	r3, [r2, #4]
    6360:	bf00      	nop
    6362:	bf00      	nop
    6364:	bf00      	nop
    6366:	bf00      	nop
    6368:	0704      	lsls	r4, r0, #28
    636a:	f140 8086 	bpl.w	647a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1a6>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    636e:	4a25      	ldr	r2, [pc, #148]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    6370:	2102      	movs	r1, #2
    6372:	2304      	movs	r3, #4
    6374:	6011      	str	r1, [r2, #0]
    6376:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6378:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    637a:	bf00      	nop
    637c:	bf00      	nop
    637e:	bf00      	nop
    6380:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6382:	6053      	str	r3, [r2, #4]
    6384:	bf00      	nop
    6386:	bf00      	nop
    6388:	bf00      	nop
    638a:	bf00      	nop
    638c:	0741      	lsls	r1, r0, #29
    638e:	f140 8087 	bpl.w	64a0 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1cc>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6392:	4a1c      	ldr	r2, [pc, #112]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    6394:	2102      	movs	r1, #2
    6396:	2304      	movs	r3, #4
    6398:	6011      	str	r1, [r2, #0]
    639a:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    639c:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    639e:	bf00      	nop
    63a0:	bf00      	nop
    63a2:	bf00      	nop
    63a4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    63a6:	6053      	str	r3, [r2, #4]
    63a8:	bf00      	nop
    63aa:	bf00      	nop
    63ac:	bf00      	nop
    63ae:	bf00      	nop
    63b0:	0782      	lsls	r2, r0, #30
    63b2:	f140 8088 	bpl.w	64c6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x1f2>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    63b6:	4a13      	ldr	r2, [pc, #76]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
    63b8:	2102      	movs	r1, #2
    63ba:	2304      	movs	r3, #4
    63bc:	6011      	str	r1, [r2, #0]
    63be:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    63c0:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    63c2:	bf00      	nop
    63c4:	bf00      	nop
    63c6:	bf00      	nop
    63c8:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    63ca:	6053      	str	r3, [r2, #4]
    63cc:	bf00      	nop
    63ce:	bf00      	nop
    63d0:	bf00      	nop
    63d2:	bf00      	nop
    63d4:	07c3      	lsls	r3, r0, #31
    63d6:	f100 8089 	bmi.w	64ec <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x218>
    63da:	4b09      	ldr	r3, [pc, #36]	; (6400 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x12c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    63dc:	4909      	ldr	r1, [pc, #36]	; (6404 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x130>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    63de:	2002      	movs	r0, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    63e0:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    63e2:	6018      	str	r0, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    63e4:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    63e6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    63e8:	bf00      	nop
    63ea:	bf00      	nop
    63ec:	bf00      	nop
    63ee:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    63f0:	601a      	str	r2, [r3, #0]
    63f2:	bf00      	nop
    63f4:	bf00      	nop
    63f6:	bf00      	nop
    63f8:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    63fa:	bc10      	pop	{r4}
    63fc:	4770      	bx	lr
    63fe:	bf00      	nop
    6400:	400ff0c8 	.word	0x400ff0c8
    6404:	400ff0c4 	.word	0x400ff0c4
    6408:	4b49      	ldr	r3, [pc, #292]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    640a:	494a      	ldr	r1, [pc, #296]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    640c:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    640e:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6410:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6412:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6414:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    6416:	bf00      	nop
    6418:	bf00      	nop
    641a:	bf00      	nop
    641c:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    641e:	601a      	str	r2, [r3, #0]
    6420:	bf00      	nop
    6422:	bf00      	nop
    6424:	bf00      	nop
    6426:	bf00      	nop
#endif

	// write the BIT'th bit out via spi, setting the data pin then strobing the clcok
	template <uint8_t BIT> __attribute__((always_inline, hot)) inline static void writeBit(uint8_t b) {
		//cli();
		if(b & (1 << BIT)) {
    6428:	0682      	lsls	r2, r0, #26
    642a:	f53f af7c 	bmi.w	6326 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x52>
    642e:	4b40      	ldr	r3, [pc, #256]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6430:	4940      	ldr	r1, [pc, #256]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6432:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6434:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6436:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6438:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    643a:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    643c:	bf00      	nop
    643e:	bf00      	nop
    6440:	bf00      	nop
    6442:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6444:	601a      	str	r2, [r3, #0]
    6446:	bf00      	nop
    6448:	bf00      	nop
    644a:	bf00      	nop
    644c:	bf00      	nop
    644e:	06c3      	lsls	r3, r0, #27
    6450:	f53f af7b 	bmi.w	634a <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x76>
    6454:	4b36      	ldr	r3, [pc, #216]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6456:	4937      	ldr	r1, [pc, #220]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6458:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    645a:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    645c:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    645e:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6460:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    6462:	bf00      	nop
    6464:	bf00      	nop
    6466:	bf00      	nop
    6468:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    646a:	601a      	str	r2, [r3, #0]
    646c:	bf00      	nop
    646e:	bf00      	nop
    6470:	bf00      	nop
    6472:	bf00      	nop
    6474:	0704      	lsls	r4, r0, #28
    6476:	f53f af7a 	bmi.w	636e <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x9a>
    647a:	4b2d      	ldr	r3, [pc, #180]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    647c:	492d      	ldr	r1, [pc, #180]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    647e:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6480:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6482:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    6484:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6486:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    6488:	bf00      	nop
    648a:	bf00      	nop
    648c:	bf00      	nop
    648e:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6490:	601a      	str	r2, [r3, #0]
    6492:	bf00      	nop
    6494:	bf00      	nop
    6496:	bf00      	nop
    6498:	bf00      	nop
    649a:	0741      	lsls	r1, r0, #29
    649c:	f53f af79 	bmi.w	6392 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xbe>
    64a0:	4b23      	ldr	r3, [pc, #140]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64a2:	4924      	ldr	r1, [pc, #144]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64a4:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64a6:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64a8:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64aa:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    64ac:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    64ae:	bf00      	nop
    64b0:	bf00      	nop
    64b2:	bf00      	nop
    64b4:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64b6:	601a      	str	r2, [r3, #0]
    64b8:	bf00      	nop
    64ba:	bf00      	nop
    64bc:	bf00      	nop
    64be:	bf00      	nop
    64c0:	0782      	lsls	r2, r0, #30
    64c2:	f53f af78 	bmi.w	63b6 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0xe2>
    64c6:	4b1a      	ldr	r3, [pc, #104]	; (6530 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x25c>)
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64c8:	491a      	ldr	r1, [pc, #104]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64ca:	2402      	movs	r4, #2
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64cc:	2204      	movs	r2, #4
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64ce:	601c      	str	r4, [r3, #0]
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64d0:	600a      	str	r2, [r1, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    64d2:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    64d4:	bf00      	nop
    64d6:	bf00      	nop
    64d8:	bf00      	nop
    64da:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    64dc:	601a      	str	r2, [r3, #0]
    64de:	bf00      	nop
    64e0:	bf00      	nop
    64e2:	bf00      	nop
    64e4:	bf00      	nop
    64e6:	07c3      	lsls	r3, r0, #31
    64e8:	f57f af77 	bpl.w	63da <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x106>
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    64ec:	4a11      	ldr	r2, [pc, #68]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    64ee:	2102      	movs	r1, #2
    64f0:	2304      	movs	r3, #4
    64f2:	6011      	str	r1, [r2, #0]
    64f4:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    64f6:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    64f8:	bf00      	nop
    64fa:	bf00      	nop
    64fc:	bf00      	nop
    64fe:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6500:	6053      	str	r3, [r2, #4]
    6502:	bf00      	nop
    6504:	bf00      	nop
    6506:	bf00      	nop
    6508:	bf00      	nop
		writeBit<4>(b);
		writeBit<3>(b);
		writeBit<2>(b);
		writeBit<1>(b);
		writeBit<0>(b);
	}
    650a:	bc10      	pop	{r4}
    650c:	4770      	bx	lr
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
	inline static void setInput() { pinMode(PIN, INPUT); } // TODO: preform MUX config { _PDDR::r() &= ~_MASK; }

	inline static void hi() __attribute__ ((always_inline)) { _PSOR::r() = _MASK; }
    650e:	4a09      	ldr	r2, [pc, #36]	; (6534 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x260>)
    6510:	2102      	movs	r1, #2
    6512:	2304      	movs	r3, #4
    6514:	6011      	str	r1, [r2, #0]
    6516:	6013      	str	r3, [r2, #0]
template<> __attribute__((always_inline)) inline void delaycycles<-4>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-3>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-2>() {}
template<> __attribute__((always_inline)) inline void delaycycles<-1>() {}
template<> __attribute__((always_inline)) inline void delaycycles<0>() {}
template<> __attribute__((always_inline)) inline void delaycycles<1>() {FL_NOP;}
    6518:	bf00      	nop
template<> __attribute__((always_inline)) inline void delaycycles<2>() {FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<3>() {FL_NOP;FL_NOP2;}
template<> __attribute__((always_inline)) inline void delaycycles<4>() {FL_NOP2;FL_NOP2;}
    651a:	bf00      	nop
    651c:	bf00      	nop
    651e:	bf00      	nop
    6520:	bf00      	nop
	inline static void lo() __attribute__ ((always_inline)) { _PCOR::r() = _MASK; }
    6522:	6053      	str	r3, [r2, #4]
    6524:	bf00      	nop
    6526:	bf00      	nop
    6528:	bf00      	nop
    652a:	bf00      	nop
    652c:	e6e6      	b.n	62fc <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)+0x28>
    652e:	bf00      	nop
    6530:	400ff0c8 	.word	0x400ff0c8
    6534:	400ff0c4 	.word	0x400ff0c4

00006538 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)>:
		mSPI.init();
	}

protected:

	virtual void showPixels(PixelController<RGB_ORDER> & pixels) {
    6538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    653c:	4682      	mov	sl, r0
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    653e:	6980      	ldr	r0, [r0, #24]
    6540:	b081      	sub	sp, #4
    6542:	460c      	mov	r4, r1
    6544:	b150      	cbz	r0, 655c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    6546:	6803      	ldr	r3, [r0, #0]
    6548:	4a46      	ldr	r2, [pc, #280]	; (6664 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x12c>)
    654a:	681b      	ldr	r3, [r3, #0]
    654c:	4293      	cmp	r3, r2
    654e:	f040 8087 	bne.w	6660 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x128>
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
    6552:	6842      	ldr	r2, [r0, #4]
    6554:	7b01      	ldrb	r1, [r0, #12]
    6556:	7813      	ldrb	r3, [r2, #0]
    6558:	430b      	orrs	r3, r1
    655a:	7013      	strb	r3, [r2, #0]
template <uint8_t DATA_PIN, uint8_t CLOCK_PIN, EOrder RGB_ORDER = RGB, uint32_t SPI_SPEED = DATA_RATE_MHZ(12)>
class LPD6803Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); mSPI.writeByte(0); }
    655c:	2000      	movs	r0, #0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane); }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t advanceAndLoadAndScale(PixelController & pc, int lane, uint8_t scale) { pc.advanceData(); return pc.loadAndScale<SLOT>(pc, lane, scale); }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getd(PixelController & pc) { return pc.d[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t getscale(PixelController & pc) { return pc.mScale.raw[RO(SLOT)]; }
    655e:	7d27      	ldrb	r7, [r4, #20]
    6560:	f894 8013 	ldrb.w	r8, [r4, #19]
    6564:	f894 9012 	ldrb.w	r9, [r4, #18]
    6568:	f7ff feb4 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    656c:	2000      	movs	r0, #0
    656e:	f7ff feb1 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    6572:	2000      	movs	r0, #0
    6574:	f7ff feae 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    6578:	2000      	movs	r0, #0
    657a:	f7ff feab 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    657e:	68a3      	ldr	r3, [r4, #8]
    6580:	2b00      	cmp	r3, #0
    6582:	dd44      	ble.n	660e <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xd6>
    6584:	6822      	ldr	r2, [r4, #0]
    6586:	f109 0901 	add.w	r9, r9, #1
    658a:	f108 0801 	add.w	r8, r8, #1
    658e:	3701      	adds	r7, #1
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
        }

        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc, int lane) { return pc.mData[pc.mOffsets[lane] + RO(SLOT)]; }
    6590:	69a1      	ldr	r1, [r4, #24]
    6592:	1853      	adds	r3, r2, r1
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
    6594:	5c56      	ldrb	r6, [r2, r1]
    6596:	785d      	ldrb	r5, [r3, #1]
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    6598:	f893 b002 	ldrb.w	fp, [r3, #2]
    659c:	fb08 f505 	mul.w	r5, r8, r5
    65a0:	122d      	asrs	r5, r5, #8
    65a2:	fb07 fb0b 	mul.w	fp, r7, fp
    65a6:	fb09 f606 	mul.w	r6, r9, r6
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    65aa:	022d      	lsls	r5, r5, #8
    65ac:	1236      	asrs	r6, r6, #8
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    65ae:	ea4f 2b2b 	mov.w	fp, fp, asr #8
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
    65b2:	b2ad      	uxth	r5, r5
		mSPI.writeByte(0xE0 | brightness);
		mSPI.writeByte(b0);
		mSPI.writeByte(b1);
		mSPI.writeByte(b2);
#else
		uint16_t b = 0xE000 | (brightness << 8) | (uint16_t)b0;
    65b4:	f06b 0bff 	orn	fp, fp, #255	; 0xff
	static void waitFully() __attribute__((always_inline)) { wait(); }

	static void writeByteNoWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); }
	static void writeBytePostWait(uint8_t b) __attribute__((always_inline)) { writeByte(b); wait(); }

	static void writeWord(uint16_t w) __attribute__((always_inline)) { writeByte(w>>8); writeByte(w&0xFF); }
    65b8:	20ff      	movs	r0, #255	; 0xff
		mSPI.writeWord(b);
		uint16_t w = b1 << 8;
		w |= b2;
    65ba:	4335      	orrs	r5, r6
    65bc:	f7ff fe8a 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    65c0:	b2ad      	uxth	r5, r5
    65c2:	fa5f f08b 	uxtb.w	r0, fp
    65c6:	f7ff fe85 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    65ca:	0a28      	lsrs	r0, r5, #8
    65cc:	f7ff fe82 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    65d0:	b2e8      	uxtb	r0, r5
    65d2:	f7ff fe7f 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    65d6:	68a3      	ldr	r3, [r4, #8]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    65d8:	7b26      	ldrb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    65da:	7b65      	ldrb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    65dc:	f894 e00e 	ldrb.w	lr, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    65e0:	6821      	ldr	r1, [r4, #0]

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    65e2:	f894 b00f 	ldrb.w	fp, [r4, #15]
                d[1] = e[1] - d[1];
    65e6:	f894 c010 	ldrb.w	ip, [r4, #16]
                d[2] = e[2] - d[2];
    65ea:	7c60      	ldrb	r0, [r4, #17]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    65ec:	f994 2015 	ldrsb.w	r2, [r4, #21]
    65f0:	3b01      	subs	r3, #1

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    65f2:	ebc6 060b 	rsb	r6, r6, fp
                d[1] = e[1] - d[1];
    65f6:	ebc5 050c 	rsb	r5, r5, ip
                d[2] = e[2] - d[2];
    65fa:	ebce 0000 	rsb	r0, lr, r0

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    65fe:	440a      	add	r2, r1
#else
		const uint8_t brightness = 0x1F;
#endif

		startBoundary();
		while (pixels.has(1)) {
    6600:	2b00      	cmp	r3, #0

        // step the dithering forward
         __attribute__((always_inline)) inline void stepDithering() {
             // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
             // clockless_trinket.h!
                d[0] = e[0] - d[0];
    6602:	7326      	strb	r6, [r4, #12]
                d[1] = e[1] - d[1];
    6604:	7365      	strb	r5, [r4, #13]
                d[2] = e[2] - d[2];
    6606:	73a0      	strb	r0, [r4, #14]

        // get the amount to advance the pointer by
        __attribute__((always_inline)) inline int advanceBy() { return mAdvance; }

        // advance the data pointer forward, adjust position counter
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; mLenRemaining--;}
    6608:	6022      	str	r2, [r4, #0]
    660a:	60a3      	str	r3, [r4, #8]
    660c:	dcc0      	bgt.n	6590 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x58>
class APA102Controller : public CPixelLEDController<RGB_ORDER> {
	typedef SPIOutput<DATA_PIN, CLOCK_PIN, SPI_SPEED> SPI;
	SPI mSPI;

	void startBoundary() { mSPI.writeWord(0); mSPI.writeWord(0); }
	void endBoundary(int nLeds) { int nDWords = (nLeds/32); do { mSPI.writeByte(0xFF); mSPI.writeByte(0x00); mSPI.writeByte(0x00); mSPI.writeByte(0x00); } while(nDWords--); }
    660e:	6864      	ldr	r4, [r4, #4]
    6610:	2c00      	cmp	r4, #0
    6612:	bfb8      	it	lt
    6614:	341f      	addlt	r4, #31
    6616:	1164      	asrs	r4, r4, #5
    6618:	20ff      	movs	r0, #255	; 0xff
    661a:	f7ff fe5b 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    661e:	2000      	movs	r0, #0
    6620:	f7ff fe58 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    6624:	2000      	movs	r0, #0
    6626:	f7ff fe55 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    662a:	3c01      	subs	r4, #1
    662c:	2000      	movs	r0, #0
    662e:	f7ff fe51 	bl	62d4 <AVRSoftwareSPIOutput<(unsigned char)14, (unsigned char)7, 4ul>::writeByte(unsigned char)>
    6632:	1c63      	adds	r3, r4, #1
    6634:	d1f0      	bne.n	6618 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0xe0>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
    6636:	f8da 0018 	ldr.w	r0, [sl, #24]
    663a:	b150      	cbz	r0, 6652 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x11a>
    663c:	6803      	ldr	r3, [r0, #0]
    663e:	4a0a      	ldr	r2, [pc, #40]	; (6668 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x130>)
    6640:	685b      	ldr	r3, [r3, #4]
    6642:	4293      	cmp	r3, r2
    6644:	d108      	bne.n	6658 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x120>
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
    6646:	6842      	ldr	r2, [r0, #4]
    6648:	7b01      	ldrb	r1, [r0, #12]
    664a:	7813      	ldrb	r3, [r2, #0]
    664c:	ea23 0301 	bic.w	r3, r3, r1
    6650:	7013      	strb	r3, [r2, #0]
		}
		endBoundary(pixels.size());

		mSPI.waitFully();
		mSPI.release();
	}
    6652:	b001      	add	sp, #4
    6654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6658:	b001      	add	sp, #4
    665a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    665e:	4718      	bx	r3
	}
public:

	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }
    6660:	4798      	blx	r3
    6662:	e77b      	b.n	655c <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::showPixels(PixelController<(EOrder)136, 1, 4294967295ul>&)+0x24>
    6664:	00000475 	.word	0x00000475
    6668:	00000481 	.word	0x00000481

0000666c <_GLOBAL__sub_I_ib_jul01_gp>:
		}
	}

	FastLED.show();

    666c:	b430      	push	{r4, r5}
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
    666e:	4912      	ldr	r1, [pc, #72]	; (66b8 <_GLOBAL__sub_I_ib_jul01_gp+0x4c>)
    6670:	4a12      	ldr	r2, [pc, #72]	; (66bc <_GLOBAL__sub_I_ib_jul01_gp+0x50>)
    6672:	25ff      	movs	r5, #255	; 0xff
    6674:	240f      	movs	r4, #15
    6676:	2301      	movs	r3, #1
    6678:	2000      	movs	r0, #0
    667a:	f881 51c2 	strb.w	r5, [r1, #450]	; 0x1c2
    667e:	f882 51c2 	strb.w	r5, [r2, #450]	; 0x1c2
    6682:	f881 41c3 	strb.w	r4, [r1, #451]	; 0x1c3
    6686:	f882 41c3 	strb.w	r4, [r2, #451]	; 0x1c3
    668a:	f881 31c4 	strb.w	r3, [r1, #452]	; 0x1c4
    668e:	f881 31c5 	strb.w	r3, [r1, #453]	; 0x1c5
    6692:	f881 3227 	strb.w	r3, [r1, #551]	; 0x227
    6696:	f881 3229 	strb.w	r3, [r1, #553]	; 0x229
    669a:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
    669e:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
    66a2:	f882 3227 	strb.w	r3, [r2, #551]	; 0x227
    66a6:	f882 3229 	strb.w	r3, [r2, #553]	; 0x229
    66aa:	f881 022d 	strb.w	r0, [r1, #557]	; 0x22d
    66ae:	f882 022d 	strb.w	r0, [r2, #557]	; 0x22d
    66b2:	bc30      	pop	{r4, r5}
    66b4:	4770      	bx	lr
    66b6:	bf00      	nop
    66b8:	1fff945c 	.word	0x1fff945c
    66bc:	1fff8c80 	.word	0x1fff8c80

000066c0 <fill_solid(CRGB*, int, CRGB const&)>:


void fill_solid( struct CRGB * leds, int numToFill,
                 const struct CRGB& color)
{
    for( int i = 0; i < numToFill; i++) {
    66c0:	2900      	cmp	r1, #0
    66c2:	dd0b      	ble.n	66dc <fill_solid(CRGB*, int, CRGB const&)+0x1c>
    66c4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    66c8:	4401      	add	r1, r0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    66ca:	7813      	ldrb	r3, [r2, #0]
    66cc:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    66ce:	7853      	ldrb	r3, [r2, #1]
    66d0:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    66d2:	7893      	ldrb	r3, [r2, #2]
    66d4:	7083      	strb	r3, [r0, #2]
    66d6:	3003      	adds	r0, #3
    66d8:	4288      	cmp	r0, r1
    66da:	d1f6      	bne.n	66ca <fill_solid(CRGB*, int, CRGB const&)+0xa>
    66dc:	4770      	bx	lr
    66de:	bf00      	nop

000066e0 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>:
// }

void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    66e0:	b570      	push	{r4, r5, r6, lr}
    66e2:	b082      	sub	sp, #8
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    66e4:	25ff      	movs	r5, #255	; 0xff
    hsv.sat = 240;
    66e6:	24f0      	movs	r4, #240	; 0xf0
    for( int i = 0; i < numToFill; i++) {
    66e8:	2900      	cmp	r1, #0
void fill_rainbow( struct CRGB * pFirstLED, int numToFill,
                  uint8_t initialhue,
                  uint8_t deltahue )
{
    CHSV hsv;
    hsv.hue = initialhue;
    66ea:	f88d 2004 	strb.w	r2, [sp, #4]
    hsv.val = 255;
    66ee:	f88d 5006 	strb.w	r5, [sp, #6]
    hsv.sat = 240;
    66f2:	f88d 4005 	strb.w	r4, [sp, #5]
    for( int i = 0; i < numToFill; i++) {
    66f6:	dd10      	ble.n	671a <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x3a>
    66f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    66fc:	461e      	mov	r6, r3
    66fe:	4604      	mov	r4, r0
    6700:	1845      	adds	r5, r0, r1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6702:	4621      	mov	r1, r4
    6704:	a801      	add	r0, sp, #4
    6706:	f000 faf9 	bl	6cfc <hsv2rgb_rainbow(CHSV const&, CRGB&)>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    670a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    670e:	3403      	adds	r4, #3
    6710:	4432      	add	r2, r6
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    6712:	42ac      	cmp	r4, r5
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    6714:	f88d 2004 	strb.w	r2, [sp, #4]
{
    CHSV hsv;
    hsv.hue = initialhue;
    hsv.val = 255;
    hsv.sat = 240;
    for( int i = 0; i < numToFill; i++) {
    6718:	d1f3      	bne.n	6702 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)+0x22>
        pFirstLED[i] = hsv;
        hsv.hue += deltahue;
    }
}
    671a:	b002      	add	sp, #8
    671c:	bd70      	pop	{r4, r5, r6, pc}
    671e:	bf00      	nop

00006720 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>:


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    6720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    6724:	428b      	cmp	r3, r1


void fill_gradient_RGB( CRGB* leds,
                   uint16_t startpos, CRGB startcolor,
                   uint16_t endpos,   CRGB endcolor )
{
    6726:	9e09      	ldr	r6, [sp, #36]	; 0x24
    // if the points are in the wrong order, straighten them
    if( endpos < startpos ) {
    6728:	d352      	bcc.n	67d0 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xb0>
    672a:	f896 e000 	ldrb.w	lr, [r6]
    672e:	7815      	ldrb	r5, [r2, #0]
    6730:	7877      	ldrb	r7, [r6, #1]
    6732:	f896 8002 	ldrb.w	r8, [r6, #2]
    6736:	7854      	ldrb	r4, [r2, #1]
    6738:	f892 c002 	ldrb.w	ip, [r2, #2]

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    bdistance87 = (endcolor.b - startcolor.b) << 7;

    uint16_t pixeldistance = endpos - startpos;
    673c:	ebc1 0b03 	rsb	fp, r1, r3

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    6740:	ebc5 0e0e 	rsb	lr, r5, lr
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    6744:	ebc4 0a07 	rsb	sl, r4, r7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    6748:	ebcc 0608 	rsb	r6, ip, r8

    uint16_t pixeldistance = endpos - startpos;
    674c:	fa1f f28b 	uxth.w	r2, fp

    saccum87 rdistance87;
    saccum87 gdistance87;
    saccum87 bdistance87;

    rdistance87 = (endcolor.r - startcolor.r) << 7;
    6750:	ea4f 1ece 	mov.w	lr, lr, lsl #7
    gdistance87 = (endcolor.g - startcolor.g) << 7;
    6754:	ea4f 1aca 	mov.w	sl, sl, lsl #7
    bdistance87 = (endcolor.b - startcolor.b) << 7;
    6758:	01f6      	lsls	r6, r6, #7

    uint16_t pixeldistance = endpos - startpos;
    int16_t divisor = pixeldistance ? pixeldistance : 1;
    675a:	b3b2      	cbz	r2, 67ca <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xaa>
    675c:	fa0f fb82 	sxth.w	fp, r2

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    6760:	fb9e fefb 	sdiv	lr, lr, fp
    gdelta87 *= 2;
    6764:	fb9a fafb 	sdiv	sl, sl, fp

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    6768:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    gdelta87 *= 2;
    676c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    bdelta87 *= 2;
    6770:	fb96 fbfb 	sdiv	fp, r6, fp

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    6774:	4299      	cmp	r1, r3
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    gdelta87 *= 2;
    bdelta87 *= 2;
    6776:	ea4f 0b4b 	mov.w	fp, fp, lsl #1

    saccum87 rdelta87 = rdistance87 / divisor;
    saccum87 gdelta87 = gdistance87 / divisor;
    saccum87 bdelta87 = bdistance87 / divisor;

    rdelta87 *= 2;
    677a:	fa1f fe8e 	uxth.w	lr, lr
    gdelta87 *= 2;
    677e:	fa1f fa8a 	uxth.w	sl, sl
    bdelta87 *= 2;
    6782:	fa1f fb8b 	uxth.w	fp, fp

    accum88 r88 = startcolor.r << 8;
    6786:	ea4f 2505 	mov.w	r5, r5, lsl #8
    accum88 g88 = startcolor.g << 8;
    678a:	ea4f 2404 	mov.w	r4, r4, lsl #8
    accum88 b88 = startcolor.b << 8;
    678e:	ea4f 220c 	mov.w	r2, ip, lsl #8
    for( uint16_t i = startpos; i <= endpos; i++) {
    6792:	d818      	bhi.n	67c6 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0xa6>
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    6794:	eb01 0741 	add.w	r7, r1, r1, lsl #1
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    6798:	3101      	adds	r1, #1
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
    679a:	19c6      	adds	r6, r0, r7
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    679c:	b289      	uxth	r1, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    679e:	ea4f 2925 	mov.w	r9, r5, asr #8
        g = rhs.g;
    67a2:	ea4f 2824 	mov.w	r8, r4, asr #8
        b = rhs.b;
    67a6:	ea4f 2c22 	mov.w	ip, r2, asr #8
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    67aa:	4475      	add	r5, lr
        g88 += gdelta87;
    67ac:	4454      	add	r4, sl
        b88 += bdelta87;
    67ae:	445a      	add	r2, fp
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    67b0:	428b      	cmp	r3, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    67b2:	f800 9007 	strb.w	r9, [r0, r7]
        leds[i] = CRGB( r88 >> 8, g88 >> 8, b88 >> 8);
        r88 += rdelta87;
    67b6:	b2ad      	uxth	r5, r5
        g = rhs.g;
    67b8:	f886 8001 	strb.w	r8, [r6, #1]
        g88 += gdelta87;
    67bc:	b2a4      	uxth	r4, r4
        b = rhs.b;
    67be:	f886 c002 	strb.w	ip, [r6, #2]
        b88 += bdelta87;
    67c2:	b292      	uxth	r2, r2
    bdelta87 *= 2;

    accum88 r88 = startcolor.r << 8;
    accum88 g88 = startcolor.g << 8;
    accum88 b88 = startcolor.b << 8;
    for( uint16_t i = startpos; i <= endpos; i++) {
    67c4:	d2e6      	bcs.n	6794 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x74>
    67c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67ca:	f04f 0b01 	mov.w	fp, #1
    67ce:	e7c7      	b.n	6760 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x40>
    67d0:	4689      	mov	r9, r1
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    67d2:	7835      	ldrb	r5, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    67d4:	f892 e000 	ldrb.w	lr, [r2]

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    67d8:	7874      	ldrb	r4, [r6, #1]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    67da:	7857      	ldrb	r7, [r2, #1]
    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    67dc:	f896 c002 	ldrb.w	ip, [r6, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    67e0:	f892 8002 	ldrb.w	r8, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    67e4:	7015      	strb	r5, [r2, #0]
    67e6:	4619      	mov	r1, r3
    67e8:	f886 e000 	strb.w	lr, [r6]
    67ec:	464b      	mov	r3, r9
        g = rhs.g;
    67ee:	7054      	strb	r4, [r2, #1]
    67f0:	7077      	strb	r7, [r6, #1]
        b = rhs.b;
    67f2:	f882 c002 	strb.w	ip, [r2, #2]
    67f6:	f886 8002 	strb.w	r8, [r6, #2]
    67fa:	e79f      	b.n	673c <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)+0x1c>

000067fc <fade_raw(CRGB*, unsigned short, unsigned char)>:
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    67fc:	b309      	cbz	r1, 6842 <fade_raw(CRGB*, unsigned short, unsigned char)+0x46>
{
    nscale8( leds, num_leds, 255 - fadeBy);
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    67fe:	b430      	push	{r4, r5}
    6800:	1e4d      	subs	r5, r1, #1
    6802:	b2ad      	uxth	r5, r5
    6804:	43d2      	mvns	r2, r2
    6806:	3501      	adds	r5, #1
    6808:	b2d2      	uxtb	r2, r2
    680a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    680e:	4405      	add	r5, r0
    6810:	3201      	adds	r2, #1
    6812:	1c44      	adds	r4, r0, #1
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    6814:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    6818:	fb02 f303 	mul.w	r3, r2, r3
    681c:	121b      	asrs	r3, r3, #8
    681e:	f804 3c01 	strb.w	r3, [r4, #-1]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    6822:	7841      	ldrb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6824:	7883      	ldrb	r3, [r0, #2]
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    6826:	fb02 f101 	mul.w	r1, r2, r1
    b = (((uint16_t)b) * scale_fixed) >> 8;
    682a:	fb02 f303 	mul.w	r3, r2, r3
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    682e:	1209      	asrs	r1, r1, #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6830:	121b      	asrs	r3, r3, #8
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    g = (((uint16_t)g) * scale_fixed) >> 8;
    6832:	7041      	strb	r1, [r0, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    6834:	7083      	strb	r3, [r0, #2]
    6836:	3003      	adds	r0, #3
    nscale8( leds, num_leds, scale);
}

void nscale8( CRGB* leds, uint16_t num_leds, uint8_t scale)
{
    for( uint16_t i = 0; i < num_leds; i++) {
    6838:	4285      	cmp	r5, r0
    683a:	f104 0403 	add.w	r4, r4, #3
    683e:	d1e9      	bne.n	6814 <fade_raw(CRGB*, unsigned short, unsigned char)+0x18>
}

void fade_raw( CRGB* leds, uint16_t num_leds, uint8_t fadeBy)
{
    nscale8( leds, num_leds, 255 - fadeBy);
}
    6840:	bc30      	pop	{r4, r5}
    6842:	4770      	bx	lr

00006844 <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>:
    6844:	f7ff bfda 	b.w	67fc <fade_raw(CRGB*, unsigned short, unsigned char)>

00006848 <nblend(CRGB&, CRGB const&, unsigned char)>:
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    if( amountOfOverlay == 0) {
    6848:	b322      	cbz	r2, 6894 <nblend(CRGB&, CRGB const&, unsigned char)+0x4c>
        return existing;
    }

    if( amountOfOverlay == 255) {
    684a:	2aff      	cmp	r2, #255	; 0xff
    684c:	d023      	beq.n	6896 <nblend(CRGB&, CRGB const&, unsigned char)+0x4e>
    }
}


CRGB& nblend( CRGB& existing, const CRGB& overlay, fract8 amountOfOverlay )
{
    684e:	b4f0      	push	{r4, r5, r6, r7}
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    6850:	7804      	ldrb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    6852:	780e      	ldrb	r6, [r1, #0]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    6854:	7843      	ldrb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    6856:	b295      	uxth	r5, r2
                    + scale8_LEAVING_R1_DIRTY( overlay.blue,   amountOfOverlay);

    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    6858:	19a7      	adds	r7, r4, r6
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    685a:	43d2      	mvns	r2, r2
    685c:	fb06 7605 	mla	r6, r6, r5, r7
    6860:	b2d2      	uxtb	r2, r2
    6862:	fb04 6402 	mla	r4, r4, r2, r6
    6866:	f3c4 2407 	ubfx	r4, r4, #8, #8
    686a:	7004      	strb	r4, [r0, #0]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    686c:	784c      	ldrb	r4, [r1, #1]
    uint16_t partial;
    uint8_t result;
    
    uint8_t amountOfA = 255 - amountOfB;
    
    partial = (a * amountOfA);
    686e:	7886      	ldrb	r6, [r0, #2]
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    6870:	191f      	adds	r7, r3, r4
    6872:	fb04 7405 	mla	r4, r4, r5, r7
    6876:	fb03 4302 	mla	r3, r3, r2, r4
    687a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    687e:	7043      	strb	r3, [r0, #1]
#if (FASTLED_SCALE8_FIXED == 1)
    partial += a;
    //partial = add8to16( a, partial);
#endif
    
    partial += (b * amountOfB);
    6880:	788b      	ldrb	r3, [r1, #2]
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    6882:	18f1      	adds	r1, r6, r3
    6884:	fb03 1505 	mla	r5, r3, r5, r1
    6888:	fb06 5202 	mla	r2, r6, r2, r5
#endif
    
    return existing;
}
    688c:	bcf0      	pop	{r4, r5, r6, r7}
    cleanup_R1();
#else
    // Corrected blend method, with no loss-of-precision rounding errors
    existing.red   = blend8( existing.red,   overlay.red,   amountOfOverlay);
    existing.green = blend8( existing.green, overlay.green, amountOfOverlay);
    existing.blue  = blend8( existing.blue,  overlay.blue,  amountOfOverlay);
    688e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    6892:	7082      	strb	r2, [r0, #2]
#endif
    
    return existing;
}
    6894:	4770      	bx	lr
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6896:	780b      	ldrb	r3, [r1, #0]
    6898:	7003      	strb	r3, [r0, #0]
        g = rhs.g;
    689a:	784b      	ldrb	r3, [r1, #1]
    689c:	7043      	strb	r3, [r0, #1]
        b = rhs.b;
    689e:	788b      	ldrb	r3, [r1, #2]
    68a0:	7083      	strb	r3, [r0, #2]
    68a2:	4770      	bx	lr

000068a4 <blend(CRGB const&, CRGB const&, unsigned char)>:
        overlay++;
    }
}

CRGB blend( const CRGB& p1, const CRGB& p2, fract8 amountOfP2 )
{
    68a4:	b538      	push	{r3, r4, r5, lr}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    68a6:	780d      	ldrb	r5, [r1, #0]
    68a8:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
    68aa:	784d      	ldrb	r5, [r1, #1]
    68ac:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
    68ae:	7889      	ldrb	r1, [r1, #2]
    68b0:	7081      	strb	r1, [r0, #2]
    68b2:	4604      	mov	r4, r0
    CRGB nu(p1);
    nblend( nu, p2, amountOfP2);
    68b4:	4611      	mov	r1, r2
    68b6:	461a      	mov	r2, r3
    68b8:	f7ff ffc6 	bl	6848 <nblend(CRGB&, CRGB const&, unsigned char)>
    return nu;
}
    68bc:	4620      	mov	r0, r4
    68be:	bd38      	pop	{r3, r4, r5, pc}

000068c0 <HeatColor(unsigned char)>:
///  This makes for better 'video'/LED dimming, at the cost of
///  several additional cycles.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1 || defined(LIB8_ATTINY)
    uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
    68c0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    68c4:	ebc1 1383 	rsb	r3, r1, r3, lsl #6
    68c8:	3100      	adds	r1, #0
    68ca:	bf18      	it	ne
    68cc:	2101      	movne	r1, #1
    68ce:	eb01 2123 	add.w	r1, r1, r3, asr #8
    68d2:	b2c9      	uxtb	r1, r1
    68d4:	008b      	lsls	r3, r1, #2
    // zero to 255 in each 'third' of the scale.
    uint8_t heatramp = t192 & 0x3F; // 0..63
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
    68d6:	060a      	lsls	r2, r1, #24
    68d8:	b2db      	uxtb	r3, r3
    68da:	d40e      	bmi.n	68fa <HeatColor(unsigned char)+0x3a>
        // we're in the hottest third
        heatcolor.r = 255; // full red
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
    68dc:	f001 0140 	and.w	r1, r1, #64	; 0x40
    68e0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    68e4:	b919      	cbnz	r1, 68ee <HeatColor(unsigned char)+0x2e>
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
    68e6:	7003      	strb	r3, [r0, #0]
        heatcolor.g = 0; // no green
    68e8:	7042      	strb	r2, [r0, #1]
        heatcolor.b = 0; // no blue
    68ea:	7082      	strb	r2, [r0, #2]
    }

    return heatcolor;
}
    68ec:	4770      	bx	lr
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    68ee:	21ff      	movs	r1, #255	; 0xff
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    68f0:	2200      	movs	r2, #0
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
        heatcolor.g = heatramp; // ramp up green
    68f2:	7043      	strb	r3, [r0, #1]
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue

    } else if( t192 & 0x40 ) {
        // we're in the middle third
        heatcolor.r = 255; // full red
    68f4:	7001      	strb	r1, [r0, #0]
        heatcolor.g = heatramp; // ramp up green
        heatcolor.b = 0; // no blue
    68f6:	7082      	strb	r2, [r0, #2]
    68f8:	4770      	bx	lr
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    68fa:	22ff      	movs	r2, #255	; 0xff
        heatcolor.g = 255; // full green
        heatcolor.b = heatramp; // ramp up blue
    68fc:	7083      	strb	r3, [r0, #2]
    heatramp <<= 2; // scale up to 0..252

    // now figure out which third of the spectrum we're in:
    if( t192 & 0x80) {
        // we're in the hottest third
        heatcolor.r = 255; // full red
    68fe:	7002      	strb	r2, [r0, #0]
        heatcolor.g = 255; // full green
    6900:	7042      	strb	r2, [r0, #1]
    6902:	4770      	bx	lr

00006904 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    6904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
#else
    dividend >>= 4;
    6908:	1114      	asrs	r4, r2, #4
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    690a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    690e:	f012 020f 	ands.w	r2, r2, #15
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    6912:	440d      	add	r5, r1
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    6914:	f89d 601c 	ldrb.w	r6, [sp, #28]
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    6918:	d000      	beq.n	691c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x18>
    691a:	b9e6      	cbnz	r6, 6956 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x52>
    
    uint8_t red1   = entry->red;
    691c:	782c      	ldrb	r4, [r5, #0]
    uint8_t green1 = entry->green;
    691e:	7869      	ldrb	r1, [r5, #1]
    uint8_t blue1  = entry->blue;
    6920:	78aa      	ldrb	r2, [r5, #2]
        blue1  += blue2;
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    6922:	2bff      	cmp	r3, #255	; 0xff
    6924:	d012      	beq.n	694c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
        if( brightness ) {
    6926:	2b00      	cmp	r3, #0
    6928:	d043      	beq.n	69b2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xae>
            brightness++; // adjust for rounding
    692a:	3301      	adds	r3, #1
    692c:	b2db      	uxtb	r3, r3
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    692e:	b11c      	cbz	r4, 6938 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x34>
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    6930:	fb03 4404 	mla	r4, r3, r4, r4
    6934:	f3c4 2407 	ubfx	r4, r4, #8, #8
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    6938:	b119      	cbz	r1, 6942 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x3e>
    693a:	fb03 1101 	mla	r1, r3, r1, r1
    693e:	f3c1 2107 	ubfx	r1, r1, #8, #8
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    6942:	b11a      	cbz	r2, 694c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
    6944:	fb03 2202 	mla	r2, r3, r2, r2
    6948:	f3c2 2207 	ubfx	r2, r2, #8, #8
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    694c:	7004      	strb	r4, [r0, #0]
    694e:	7041      	strb	r1, [r0, #1]
    6950:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    6952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t blue1  = entry->blue;
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    6956:	2c0f      	cmp	r4, #15
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    
    uint8_t red1   = entry->red;
    6958:	782e      	ldrb	r6, [r5, #0]
    uint8_t green1 = entry->green;
    695a:	f895 9001 	ldrb.w	r9, [r5, #1]
    uint8_t blue1  = entry->blue;
    695e:	78af      	ldrb	r7, [r5, #2]
    
    
    if( blend ) {
        
        if( hi4 == 15 ) {
    6960:	d000      	beq.n	6964 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x60>
            entry = &(pal[0]);
        } else {
            entry++;
    6962:	1ce9      	adds	r1, r5, #3
        }
        
        uint8_t f2 = lo4 << 4;
    6964:	0112      	lsls	r2, r2, #4
    6966:	f082 05ff 	eor.w	r5, r2, #255	; 0xff
    696a:	1c6c      	adds	r4, r5, #1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    696c:	f891 c000 	ldrb.w	ip, [r1]

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    6970:	f891 e001 	ldrb.w	lr, [r1, #1]

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    6974:	f891 8002 	ldrb.w	r8, [r1, #2]
    6978:	fb04 f606 	mul.w	r6, r4, r6
    697c:	1c51      	adds	r1, r2, #1
    697e:	fb04 f509 	mul.w	r5, r4, r9
    6982:	fb04 f407 	mul.w	r4, r4, r7
    6986:	f3c4 2407 	ubfx	r4, r4, #8, #8
    698a:	f3c6 2707 	ubfx	r7, r6, #8, #8
    698e:	fb01 f208 	mul.w	r2, r1, r8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    6992:	fb01 f60c 	mul.w	r6, r1, ip
    6996:	f3c5 2507 	ubfx	r5, r5, #8, #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    699a:	fb01 fe0e 	mul.w	lr, r1, lr

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    699e:	eb04 2222 	add.w	r2, r4, r2, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    69a2:	eb07 2626 	add.w	r6, r7, r6, asr #8

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    69a6:	eb05 212e 	add.w	r1, r5, lr, asr #8
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    69aa:	b2f4      	uxtb	r4, r6

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    69ac:	b2c9      	uxtb	r1, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    69ae:	b2d2      	uxtb	r2, r2
    69b0:	e7b7      	b.n	6922 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x1e>
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    69b2:	461a      	mov	r2, r3
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    69b4:	4619      	mov	r1, r3
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    69b6:	461c      	mov	r4, r3
    69b8:	7004      	strb	r4, [r0, #0]
    69ba:	7041      	strb	r1, [r0, #1]
    69bc:	7082      	strb	r2, [r0, #2]
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    69be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    69c2:	bf00      	nop

000069c4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)>:
}
#endif


void nblendPaletteTowardPalette( CRGBPalette16& current, CRGBPalette16& target, uint8_t maxChanges)
{
    69c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69c6:	3901      	subs	r1, #1
    69c8:	1e44      	subs	r4, r0, #1
    uint8_t* p1;
    uint8_t* p2;
    uint8_t  changes = 0;
    69ca:	2500      	movs	r5, #0
    69cc:	302f      	adds	r0, #47	; 0x2f
    69ce:	e001      	b.n	69d4 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x10>

    p1 = (uint8_t*)current.entries;
    p2 = (uint8_t*)target.entries;

    const uint8_t totalChannels = sizeof(CRGBPalette16);
    for( uint8_t i = 0; i < totalChannels; i++) {
    69d0:	4284      	cmp	r4, r0
    69d2:	d01e      	beq.n	6a12 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4e>
        // if the values are equal, no changes are needed
        if( p1[i] == p2[i] ) { continue; }
    69d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    69d8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    69dc:	42b3      	cmp	r3, r6
    69de:	d0f7      	beq.n	69d0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>

        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }
    69e0:	f103 0701 	add.w	r7, r3, #1
    69e4:	d204      	bcs.n	69f0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x2c>
    69e6:	b2fb      	uxtb	r3, r7
    69e8:	7023      	strb	r3, [r4, #0]
    69ea:	3501      	adds	r5, #1
    69ec:	780e      	ldrb	r6, [r1, #0]
    69ee:	b2ed      	uxtb	r5, r5

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    69f0:	1e5f      	subs	r7, r3, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    69f2:	429e      	cmp	r6, r3
            p1[i]--; changes++;
    69f4:	b2ff      	uxtb	r7, r7
    69f6:	f105 0e01 	add.w	lr, r5, #1
        // if the current value is less than the target, increase it by one
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
    69fa:	d208      	bcs.n	6a0e <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0x4a>
            p1[i]--; changes++;
    69fc:	7027      	strb	r7, [r4, #0]
            if( p1[i] > p2[i] ) { p1[i]--; }
    69fe:	780e      	ldrb	r6, [r1, #0]
    6a00:	42be      	cmp	r6, r7
    6a02:	bf38      	it	cc
    6a04:	3b02      	subcc	r3, #2
        if( p1[i] < p2[i] ) { p1[i]++; changes++; }

        // if the current value is greater than the target,
        // increase it by one (or two if it's still greater).
        if( p1[i] > p2[i] ) {
            p1[i]--; changes++;
    6a06:	fa5f f58e 	uxtb.w	r5, lr
            if( p1[i] > p2[i] ) { p1[i]--; }
    6a0a:	bf38      	it	cc
    6a0c:	7023      	strbcc	r3, [r4, #0]
        }

        // if we've hit the maximum number of changes, exit
        if( changes >= maxChanges) { break; }
    6a0e:	4295      	cmp	r5, r2
    6a10:	d3de      	bcc.n	69d0 <nblendPaletteTowardPalette(CRGBPalette16&, CRGBPalette16&, unsigned char)+0xc>
    6a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a14 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    6a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    6a16:	1e1e      	subs	r6, r3, #0
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    6a18:	6803      	ldr	r3, [r0, #0]
	m_nPowerData = 0xFFFFFFFF;
}

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
    6a1a:	4604      	mov	r4, r0
    6a1c:	bfcc      	ite	gt
    6a1e:	eb02 0542 	addgt.w	r5, r2, r2, lsl #1
    6a22:	2500      	movle	r5, #0
    6a24:	460f      	mov	r7, r1
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
    6a26:	689b      	ldr	r3, [r3, #8]

CLEDController &CFastLED::addLeds(CLEDController *pLed,
									   struct CRGB *data,
									   int nLedsOrOffset, int nLedsIfOffset) {
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;
    6a28:	bfd8      	it	le
    6a2a:	4616      	movle	r6, r2

	pLed->init();
    6a2c:	4798      	blx	r3
    /// get the next controller in the chain after this one.  will return NULL at the end of the chain
    CLEDController *next() { return m_pNext; }

	/// set the default array of leds to be used by this controller
    CLEDController & setLeds(CRGB *data, int nLeds) {
        m_Data = data;
    6a2e:	197a      	adds	r2, r7, r5
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    6a30:	6823      	ldr	r3, [r4, #0]
    6a32:	6062      	str	r2, [r4, #4]
    6a34:	695b      	ldr	r3, [r3, #20]
    6a36:	4a0a      	ldr	r2, [pc, #40]	; (6a60 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
        m_nLeds = nLeds;
    6a38:	6166      	str	r6, [r4, #20]
    6a3a:	4293      	cmp	r3, r2
    6a3c:	d101      	bne.n	6a42 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
	return *pLed;
}
    6a3e:	4620      	mov	r0, r4
    6a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
	int nLeds = (nLedsIfOffset > 0) ? nLedsIfOffset : nLedsOrOffset;

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    6a42:	4620      	mov	r0, r4
    6a44:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
  if(constrain) {
    // if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
    // allowed to slow things down if constraining)
    if(refresh > 0) {
    6a46:	2800      	cmp	r0, #0
    6a48:	d0f9      	beq.n	6a3e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
      m_nMinMicros = ( (1000000/refresh) >  m_nMinMicros) ? (1000000/refresh) : m_nMinMicros;
    6a4a:	4a06      	ldr	r2, [pc, #24]	; (6a64 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    6a4c:	4b06      	ldr	r3, [pc, #24]	; (6a68 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    6a4e:	6851      	ldr	r1, [r2, #4]
    6a50:	fb93 f0f0 	sdiv	r0, r3, r0
    6a54:	4288      	cmp	r0, r1
    6a56:	bf38      	it	cc
    6a58:	4608      	movcc	r0, r1
    6a5a:	6050      	str	r0, [r2, #4]

	pLed->init();
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}
    6a5c:	4620      	mov	r0, r4
    6a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a60:	00000471 	.word	0x00000471
    6a64:	1fff9d88 	.word	0x1fff9d88
    6a68:	000f4240 	.word	0x000f4240

00006a6c <CFastLED::clearData()>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    6a6c:	4b08      	ldr	r3, [pc, #32]	; (6a90 <CFastLED::clearData()+0x24>)
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    6a6e:	b510      	push	{r4, lr}
    6a70:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6a72:	b15c      	cbz	r4, 6a8c <CFastLED::clearData()+0x20>
    6a74:	6863      	ldr	r3, [r4, #4]
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    6a76:	2100      	movs	r1, #0
    6a78:	4618      	mov	r0, r3
        return *this;
    }

	/// zero out the led data managed by this controller
    void clearLedData() {
        if(m_Data) {
    6a7a:	b123      	cbz	r3, 6a86 <CFastLED::clearData()+0x1a>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    6a7c:	6962      	ldr	r2, [r4, #20]
    6a7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    6a82:	f002 ff4b 	bl	991c <memset>
    6a86:	68a4      	ldr	r4, [r4, #8]
    6a88:	2c00      	cmp	r4, #0
    6a8a:	d1f3      	bne.n	6a74 <CFastLED::clearData()+0x8>
    6a8c:	bd10      	pop	{r4, pc}
    6a8e:	bf00      	nop
    6a90:	1fff9d98 	.word	0x1fff9d98

00006a94 <CFastLED::setCorrection(CRGB const&)>:
    void showColor(const struct CRGB & data, uint8_t brightness=255) {
        showColor(data, m_nLeds, getAdjustment(brightness));
    }

    /// get the first led controller in the chain of controllers
    static CLEDController *head() { return m_pHead; }
    6a94:	4b07      	ldr	r3, [pc, #28]	; (6ab4 <CFastLED::setCorrection(CRGB const&)+0x20>)
    6a96:	681b      	ldr	r3, [r3, #0]
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6a98:	b153      	cbz	r3, 6ab0 <CFastLED::setCorrection(CRGB const&)+0x1c>
		pCur->setTemperature(temp);
		pCur = pCur->next();
	}
}

void CFastLED::setCorrection(const struct CRGB & correction) {
    6a9a:	b410      	push	{r4}
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6a9c:	7808      	ldrb	r0, [r1, #0]
        g = rhs.g;
    6a9e:	784a      	ldrb	r2, [r1, #1]
        b = rhs.b;
    6aa0:	788c      	ldrb	r4, [r1, #2]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    6aa2:	739c      	strb	r4, [r3, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6aa4:	7318      	strb	r0, [r3, #12]
        g = rhs.g;
    6aa6:	735a      	strb	r2, [r3, #13]
    6aa8:	689b      	ldr	r3, [r3, #8]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6aaa:	2b00      	cmp	r3, #0
    6aac:	d1f6      	bne.n	6a9c <CFastLED::setCorrection(CRGB const&)+0x8>
		pCur->setCorrection(correction);
		pCur = pCur->next();
	}
}
    6aae:	bc10      	pop	{r4}
    6ab0:	4770      	bx	lr
    6ab2:	bf00      	nop
    6ab4:	1fff9d98 	.word	0x1fff9d98

00006ab8 <CFastLED::countFPS(int)>:
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    6ab8:	b470      	push	{r4, r5, r6}
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    6aba:	4c0f      	ldr	r4, [pc, #60]	; (6af8 <CFastLED::countFPS(int)+0x40>)
    6abc:	6822      	ldr	r2, [r4, #0]
    6abe:	1c53      	adds	r3, r2, #1
    6ac0:	428a      	cmp	r2, r1
// }

extern int noise_min;
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    6ac2:	b083      	sub	sp, #12
  static int br = 0;
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
    6ac4:	6023      	str	r3, [r4, #0]
    6ac6:	db13      	blt.n	6af0 <CFastLED::countFPS(int)+0x38>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ac8:	4d0c      	ldr	r5, [pc, #48]	; (6afc <CFastLED::countFPS(int)+0x44>)
		uint32_t now = millis();
		now -= lastframe;
    6aca:	4a0d      	ldr	r2, [pc, #52]	; (6b00 <CFastLED::countFPS(int)+0x48>)
    6acc:	6829      	ldr	r1, [r5, #0]
    6ace:	9101      	str	r1, [sp, #4]
	return ret;
    6ad0:	9901      	ldr	r1, [sp, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ad2:	682d      	ldr	r5, [r5, #0]
    6ad4:	9500      	str	r5, [sp, #0]
		m_nFPS = (br * 1000) / now;
    6ad6:	6816      	ldr	r6, [r2, #0]
	return ret;
    6ad8:	9d00      	ldr	r5, [sp, #0]
    br = 0;
    lastframe = millis();
    6ada:	6015      	str	r5, [r2, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    6adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    br = 0;
    6ae0:	2500      	movs	r5, #0
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    6ae2:	1b89      	subs	r1, r1, r6
    6ae4:	fb02 f303 	mul.w	r3, r2, r3
    br = 0;
    6ae8:	6025      	str	r5, [r4, #0]
  static uint32_t lastframe = 0; // millis();

  if(br++ >= nFrames) {
		uint32_t now = millis();
		now -= lastframe;
		m_nFPS = (br * 1000) / now;
    6aea:	fbb3 f3f1 	udiv	r3, r3, r1
    6aee:	8043      	strh	r3, [r0, #2]
    br = 0;
    lastframe = millis();
  }
}
    6af0:	b003      	add	sp, #12
    6af2:	bc70      	pop	{r4, r5, r6}
    6af4:	4770      	bx	lr
    6af6:	bf00      	nop
    6af8:	1fff9d9c 	.word	0x1fff9d9c
    6afc:	1fff9e00 	.word	0x1fff9e00
    6b00:	1fff9da4 	.word	0x1fff9da4

00006b04 <CFastLED::show(unsigned char)>:
	pLed->setLeds(data + nOffset, nLeds);
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
	return *pLed;
}

void CFastLED::show(uint8_t scale) {
    6b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b08:	6843      	ldr	r3, [r0, #4]
    6b0a:	4c2d      	ldr	r4, [pc, #180]	; (6bc0 <CFastLED::show(unsigned char)+0xbc>)
    6b0c:	b083      	sub	sp, #12
    6b0e:	4606      	mov	r6, r0
    6b10:	4689      	mov	r9, r1
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    6b12:	2b00      	cmp	r3, #0
    6b14:	d14b      	bne.n	6bae <CFastLED::show(unsigned char)+0xaa>
	lastshow = micros();
    6b16:	f000 fe6b 	bl	77f0 <micros>

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    6b1a:	68f3      	ldr	r3, [r6, #12]
}

void CFastLED::show(uint8_t scale) {
	// guard against showing too rapidly
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
	lastshow = micros();
    6b1c:	6020      	str	r0, [r4, #0]

	// If we have a function for computing power, use it!
	if(m_pPowerFunc) {
    6b1e:	b11b      	cbz	r3, 6b28 <CFastLED::show(unsigned char)+0x24>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    6b20:	4648      	mov	r0, r9
    6b22:	68b1      	ldr	r1, [r6, #8]
    6b24:	4798      	blx	r3
    6b26:	4681      	mov	r9, r0
    6b28:	4b26      	ldr	r3, [pc, #152]	; (6bc4 <CFastLED::show(unsigned char)+0xc0>)
    6b2a:	681c      	ldr	r4, [r3, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    6b2c:	2500      	movs	r5, #0
	}

	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    6b2e:	2c00      	cmp	r4, #0
    6b30:	d036      	beq.n	6ba0 <CFastLED::show(unsigned char)+0x9c>
		uint8_t d = pCur->getDither();
		if(m_nFPS < 100) { pCur->setDither(0); }
    6b32:	8873      	ldrh	r3, [r6, #2]
    6b34:	7ca7      	ldrb	r7, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    6b36:	6861      	ldr	r1, [r4, #4]
    6b38:	6962      	ldr	r2, [r4, #20]
    6b3a:	2b63      	cmp	r3, #99	; 0x63
    6b3c:	6823      	ldr	r3, [r4, #0]

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_Data[x]; }

	/// set the dithering mode for this controller to use
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    6b3e:	bf98      	it	ls
    6b40:	74a5      	strbls	r5, [r4, #18]
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    6b42:	f8d3 8004 	ldr.w	r8, [r3, #4]
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    6b46:	f88d 5004 	strb.w	r5, [sp, #4]
    6b4a:	f88d 5005 	strb.w	r5, [sp, #5]
    6b4e:	f88d 5006 	strb.w	r5, [sp, #6]
      #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
    6b52:	f1b9 0f00 	cmp.w	r9, #0
    6b56:	d01c      	beq.n	6b92 <CFastLED::show(unsigned char)+0x8e>
    6b58:	f104 030b 	add.w	r3, r4, #11
    6b5c:	f10d 0e04 	add.w	lr, sp, #4
    6b60:	f104 0c0e 	add.w	ip, r4, #14
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
    6b64:	f813 bf01 	ldrb.w	fp, [r3, #1]!
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6b68:	f1bb 0f00 	cmp.w	fp, #0
    6b6c:	d00d      	beq.n	6b8a <CFastLED::show(unsigned char)+0x86>
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
    6b6e:	f893 a003 	ldrb.w	sl, [r3, #3]
                      if(cc > 0 && ct > 0) {
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    6b72:	f10a 0001 	add.w	r0, sl, #1
    6b76:	fb0b 0000 	mla	r0, fp, r0, r0

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
                      uint8_t cc = colorCorrection.raw[i];
                      uint8_t ct = colorTemperature.raw[i];
                      if(cc > 0 && ct > 0) {
    6b7a:	f1ba 0f00 	cmp.w	sl, #0
    6b7e:	d004      	beq.n	6b8a <CFastLED::show(unsigned char)+0x86>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    6b80:	fb09 f000 	mul.w	r0, r9, r0
                          work /= 0x10000L;
                          adj.raw[i] = work & 0xFF;
    6b84:	0c00      	lsrs	r0, r0, #16
    6b86:	f88e 0000 	strb.w	r0, [lr]
              return CRGB(scale,scale,scale);
      #else
              CRGB adj(0,0,0);

              if(scale > 0) {
                  for(uint8_t i = 0; i < 3; i++) {
    6b8a:	4563      	cmp	r3, ip
    6b8c:	f10e 0e01 	add.w	lr, lr, #1
    6b90:	d1e8      	bne.n	6b64 <CFastLED::show(unsigned char)+0x60>
        showColor(data, nLeds, getAdjustment(brightness));
    }

    /// show function using the "attached to this controller" led data
    void showLeds(uint8_t brightness=255) {
        show(m_Data, m_nLeds, getAdjustment(brightness));
    6b92:	4620      	mov	r0, r4
    6b94:	ab01      	add	r3, sp, #4
    6b96:	47c0      	blx	r8

    /// Reference to the n'th item in the controller
    CRGB &operator[](int x) { return m_D