
C:\Users\JeffKarle\AppData\Local\Temp\VMBuilds\pool_noodle\teensy31\Debug/pool_noodle.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 a9 ca 00 00 61 ca 00 00     ... ........a...
      10:	61 ca 00 00 61 ca 00 00 61 ca 00 00 61 ca 00 00     a...a...a...a...
      20:	61 ca 00 00 61 ca 00 00 61 ca 00 00 a9 ca 00 00     a...a...a.......
      30:	a9 ca 00 00 61 ca 00 00 d5 de 00 00 d9 df 00 00     ....a...........
      40:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      50:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      60:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      70:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      80:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      90:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      a0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      b0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      c0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      d0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      e0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
      f0:	a9 ca 00 00 31 e3 00 00 a9 ca 00 00 5d e4 00 00     ....1.......]...
     100:	a9 ca 00 00 89 e5 00 00 a9 ca 00 00 a9 ca 00 00     ................
     110:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     120:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     130:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     140:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     150:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     160:	a9 ca 00 00 f1 ce 00 00 a9 ca 00 00 a9 ca 00 00     ................
     170:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     180:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     190:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     1a0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00 a9 ca 00 00     ................
     1b0:	a9 ca 00 00 a9 ca 00 00 a9 ca 00 00                 ............

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f00c fc6e 	bl	cab0 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f00c fcc2 	bl	cc5c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f00c fc33 	bl	cb4c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f00c fc24 	bl	cb4c <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f00f f926 	bl	f558 <__libc_init_array>

	startup_late_hook();
     30c:	f00c fbd6 	bl	cabc <startup_late_hook>
	main();
     310:	f00d fe6a 	bl	dfe8 <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff8c6c 	.word	0x1fff8c6c
     33c:	00012bd8 	.word	0x00012bd8
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff8c6c 	.word	0x1fff8c6c
     348:	1fffb464 	.word	0x1fffb464
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	5e5a8fb0 	.word	0x5e5a8fb0
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff8c6c 	.word	0x1fff8c6c
     42c:	00000000 	.word	0x00000000
     430:	00012bdc 	.word	0x00012bdc

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff8c70 	.word	0x1fff8c70
     460:	00012bdc 	.word	0x00012bdc
     464:	1fff8c6c 	.word	0x1fff8c6c
     468:	00000000 	.word	0x00000000

0000046c <CLEDController::size()>:
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
        }
    }

    /// How many leds does this controller manage?
    virtual int size() { return m_nLeds; }
     46c:	6940      	ldr	r0, [r0, #20]
     46e:	4770      	bx	lr

00000470 <CLEDController::getMaxRefreshRate() const>:
              }

              return adj;
      #endif
    }
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     470:	2000      	movs	r0, #0
     472:	4770      	bx	lr

00000474 <Pin::select()>:
	typedef RwReg port_t;

	inline void setOutput() { pinMode(mPin, OUTPUT); }
	inline void setInput() { pinMode(mPin, INPUT); }

	inline void hi() __attribute__ ((always_inline)) { *mPort |= mPinMask; }
     474:	6842      	ldr	r2, [r0, #4]
     476:	7b01      	ldrb	r1, [r0, #12]
     478:	7813      	ldrb	r3, [r2, #0]
     47a:	430b      	orrs	r3, r1
     47c:	7013      	strb	r3, [r2, #0]
     47e:	4770      	bx	lr

00000480 <Pin::release()>:
	inline void lo() __attribute__ ((always_inline)) { *mPort &= ~mPinMask; }
     480:	6842      	ldr	r2, [r0, #4]
     482:	7b01      	ldrb	r1, [r0, #12]
     484:	7813      	ldrb	r3, [r2, #0]
     486:	ea23 0301 	bic.w	r3, r3, r1
     48a:	7013      	strb	r3, [r2, #0]
     48c:	4770      	bx	lr
     48e:	bf00      	nop

00000490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>:
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
     490:	b430      	push	{r4, r5}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     492:	4d0e      	ldr	r5, [pc, #56]	; (4cc <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]+0x3c>)
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
     494:	f890 4231 	ldrb.w	r4, [r0, #561]	; 0x231
     498:	882b      	ldrh	r3, [r5, #0]
     49a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
     49e:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     4a2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     4a6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     4aa:	3319      	adds	r3, #25
     4ac:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     4ae:	eb03 2213 	add.w	r2, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     4b2:	802b      	strh	r3, [r5, #0]
     4b4:	b2d3      	uxtb	r3, r2
     4b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4ba:	1d22      	adds	r2, r4, #4
     4bc:	eb01 13e3 	add.w	r3, r1, r3, asr #7
     4c0:	f880 2231 	strb.w	r2, [r0, #561]	; 0x231
     4c4:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
}
     4c8:	bc30      	pop	{r4, r5}
     4ca:	4770      	bx	lr
     4cc:	1fff8784 	.word	0x1fff8784

000004d0 <coolLikeIncandescent(CRGB&, unsigned char) [clone .part.17]>:

void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
     4d0:	3980      	subs	r1, #128	; 0x80
     4d2:	1109      	asrs	r1, r1, #4
		i -= 86;
		return 255 - (i + (i / 2));
	}
}

void coolLikeIncandescent(CRGB& c, uint8_t phase)
     4d4:	b410      	push	{r4}
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
     4d6:	004b      	lsls	r3, r1, #1
     4d8:	7844      	ldrb	r4, [r0, #1]
     4da:	7882      	ldrb	r2, [r0, #2]
     4dc:	b2c9      	uxtb	r1, r1
     4de:	b2db      	uxtb	r3, r3
     4e0:	1a61      	subs	r1, r4, r1
     4e2:	1ad3      	subs	r3, r2, r3
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4e4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	c.b = qsub8(c.b, cooling * 2);
     4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
void coolLikeIncandescent(CRGB& c, uint8_t phase)
{
	if (phase < 128) return;

	uint8_t cooling = (phase - 128) >> 4;
	c.g = qsub8(c.g, cooling);
     4ec:	7041      	strb	r1, [r0, #1]
	c.b = qsub8(c.b, cooling * 2);
     4ee:	7083      	strb	r3, [r0, #2]
}
     4f0:	bc10      	pop	{r4}
     4f2:	4770      	bx	lr

000004f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>:
			break;
		}
	}
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     4f4:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     4f6:	4c1d      	ldr	r4, [pc, #116]	; (56c <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x78>)
     4f8:	b083      	sub	sp, #12
     4fa:	6824      	ldr	r4, [r4, #0]
     4fc:	9401      	str	r4, [sp, #4]
	return ret;
     4fe:	9d01      	ldr	r5, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     500:	28ff      	cmp	r0, #255	; 0xff
     502:	bf98      	it	ls
     504:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     506:	f44f 748c 	mov.w	r4, #280	; 0x118
     50a:	eba5 0303 	sub.w	r3, r5, r3
     50e:	fb04 f303 	mul.w	r3, r4, r3
     512:	bf98      	it	ls
     514:	b280      	uxthls	r0, r0
     516:	fb00 f003 	mul.w	r0, r0, r3
     51a:	f3c0 400e 	ubfx	r0, r0, #16, #15
     51e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     522:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     524:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     528:	d503      	bpl.n	532 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x3e>
     52a:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     52e:	3307      	adds	r3, #7
     530:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     532:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     534:	4e0e      	ldr	r6, [pc, #56]	; (570 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x7c>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     536:	4c0f      	ldr	r4, [pc, #60]	; (574 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]+0x80>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     538:	5d76      	ldrb	r6, [r6, r5]
     53a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     53e:	f3c3 0546 	ubfx	r5, r3, #1, #7
     542:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     546:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     548:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     54a:	bf4a      	itet	mi
     54c:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     54e:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     550:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     552:	1a52      	subs	r2, r2, r1
     554:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     558:	b292      	uxth	r2, r2
     55a:	b2a3      	uxth	r3, r4
     55c:	fb02 3303 	mla	r3, r2, r3, r3
     560:	eb01 4013 	add.w	r0, r1, r3, lsr #16
}
     564:	b280      	uxth	r0, r0
     566:	b003      	add	sp, #12
     568:	bc70      	pop	{r4, r5, r6}
     56a:	4770      	bx	lr
     56c:	1fffb1a0 	.word	0x1fffb1a0
     570:	000105cc 	.word	0x000105cc
     574:	0000fe2c 	.word	0x0000fe2c

00000578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>:

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
     578:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     57a:	4c1e      	ldr	r4, [pc, #120]	; (5f4 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x7c>)
     57c:	b083      	sub	sp, #12
     57e:	6824      	ldr	r4, [r4, #0]
     580:	9401      	str	r4, [sp, #4]
	return ret;
     582:	9d01      	ldr	r5, [sp, #4]
     584:	28ff      	cmp	r0, #255	; 0xff
     586:	bf98      	it	ls
     588:	0200      	lslls	r0, r0, #8
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
     58a:	f44f 748c 	mov.w	r4, #280	; 0x118
     58e:	eba5 0303 	sub.w	r3, r5, r3
     592:	fb04 f303 	mul.w	r3, r4, r3
     596:	bf98      	it	ls
     598:	b280      	uxthls	r0, r0
     59a:	fb00 f003 	mul.w	r0, r0, r3
     59e:	f3c0 400e 	ubfx	r0, r0, #16, #15
     5a2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
     5a6:	b280      	uxth	r0, r0
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
     5a8:	0444      	lsls	r4, r0, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
     5aa:	f3c0 03ca 	ubfx	r3, r0, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
     5ae:	d503      	bpl.n	5b8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x40>
     5b0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
     5b4:	3307      	adds	r3, #7
     5b6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5b8:	0a1d      	lsrs	r5, r3, #8
    uint8_t  m   = slope[section];
     5ba:	4e0f      	ldr	r6, [pc, #60]	; (5f8 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x80>)

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
     5bc:	4c0f      	ldr	r4, [pc, #60]	; (5fc <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]+0x84>)
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5be:	5d76      	ldrb	r6, [r6, r5]
     5c0:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
     5c4:	f3c3 0546 	ubfx	r5, r3, #1, #7
     5c8:	fb06 4305 	mla	r3, r6, r5, r4

    if( theta & 0x8000 ) y = -y;
     5cc:	0400      	lsls	r0, r0, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5ce:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
     5d0:	bf4a      	itet	mi
     5d2:	425c      	negmi	r4, r3
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
     5d4:	b21c      	sxthpl	r4, r3

    if( theta & 0x8000 ) y = -y;
     5d6:	b224      	sxthmi	r4, r4
	uint16_t beatsin = (sin16(beat + phase_offset) + 32768);
	uint16_t rangewidth = highest - lowest;
	uint16_t scaledbeat = scale16(beatsin, rangewidth);
	uint16_t result = lowest + scaledbeat;
	return result;
     5d8:	1a52      	subs	r2, r2, r1
     5da:	f5a4 4400 	sub.w	r4, r4, #32768	; 0x8000
     5de:	b292      	uxth	r2, r2
     5e0:	b2a3      	uxth	r3, r4
     5e2:	fb02 3303 	mla	r3, r2, r3, r3
     5e6:	eb01 4013 	add.w	r0, r1, r3, lsr #16
     5ea:	b280      	uxth	r0, r0
     5ec:	b003      	add	sp, #12
     5ee:	bc70      	pop	{r4, r5, r6}
     5f0:	4770      	bx	lr
     5f2:	bf00      	nop
     5f4:	1fffb1a0 	.word	0x1fffb1a0
     5f8:	000105cc 	.word	0x000105cc
     5fc:	0000fe2c 	.word	0x0000fe2c

00000600 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()>:
	}

public:
	APA102Controller() {}

	virtual void init() {
     600:	b510      	push	{r4, lr}
template<uint8_t PIN, uint32_t _MASK, typename _PDOR, typename _PSOR, typename _PCOR, typename _PTOR, typename _PDIR, typename _PDDR> class _ARMPIN {
public:
	typedef volatile uint32_t * port_ptr_t;
	typedef uint32_t port_t;

	inline static void setOutput() { pinMode(PIN, OUTPUT); } // TODO: perform MUX config { _PDDR::r() |= _MASK; }
     602:	2101      	movs	r1, #1
     604:	4604      	mov	r4, r0
     606:	200e      	movs	r0, #14
     608:	f00c fab2 	bl	cb70 <pinMode>
     60c:	2007      	movs	r0, #7
     60e:	2101      	movs	r1, #1
     610:	f00c faae 	bl	cb70 <pinMode>
	// select the SPI output (TODO: research whether this really means hi or lo.  Alt TODO: move select responsibility out of the SPI classes
	// entirely, make it up to the caller to remember to lock/select the line?)
	void select() { if(m_pSelect != NULL) { m_pSelect->select(); } } // FastPin<SELECT_PIN>::hi(); }

	// release the SPI line
	void release() { if(m_pSelect != NULL) { m_pSelect->release(); } } // FastPin<SELECT_PIN>::lo(); }
     614:	69a0      	ldr	r0, [r4, #24]
     616:	b158      	cbz	r0, 630 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x30>
     618:	6803      	ldr	r3, [r0, #0]
     61a:	4a07      	ldr	r2, [pc, #28]	; (638 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x38>)
     61c:	685b      	ldr	r3, [r3, #4]
     61e:	4293      	cmp	r3, r2
     620:	d107      	bne.n	632 <APA102Controller<(unsigned char)14, (unsigned char)7, (EOrder)136, 4ul>::init()+0x32>
     622:	6842      	ldr	r2, [r0, #4]
     624:	7b01      	ldrb	r1, [r0, #12]
     626:	7813      	ldrb	r3, [r2, #0]
     628:	ea23 0301 	bic.w	r3, r3, r1
     62c:	7013      	strb	r3, [r2, #0]
     62e:	bd10      	pop	{r4, pc}
     630:	bd10      	pop	{r4, pc}
		mSPI.init();
	}
     632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     636:	4718      	bx	r3
     638:	00000481 	.word	0x00000481

0000063c <CLEDController::clearLeds(int)>:

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     63c:	b5f0      	push	{r4, r5, r6, r7, lr}
     63e:	b08b      	sub	sp, #44	; 0x2c
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     640:	2300      	movs	r3, #0
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     642:	6805      	ldr	r5, [r0, #0]
     644:	f88d 3004 	strb.w	r3, [sp, #4]
     648:	f88d 3005 	strb.w	r3, [sp, #5]
     64c:	f88d 3006 	strb.w	r3, [sp, #6]
     650:	682e      	ldr	r6, [r5, #0]
     652:	4a37      	ldr	r2, [pc, #220]	; (730 <CLEDController::clearLeds(int)+0xf4>)
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
     654:	f88d 3008 	strb.w	r3, [sp, #8]
     658:	4296      	cmp	r6, r2
     65a:	f88d 3009 	strb.w	r3, [sp, #9]
     65e:	f88d 300a 	strb.w	r3, [sp, #10]
     662:	d15f      	bne.n	724 <CLEDController::clearLeds(int)+0xe8>
     664:	7c82      	ldrb	r2, [r0, #18]
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     666:	9104      	str	r1, [sp, #16]
     668:	4604      	mov	r4, r0
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     66a:	2a01      	cmp	r2, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     66c:	a801      	add	r0, sp, #4
     66e:	9105      	str	r1, [sp, #20]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     670:	f88d 301e 	strb.w	r3, [sp, #30]
        g = rhs.g;
     674:	f88d 301f 	strb.w	r3, [sp, #31]
        b = rhs.b;
     678:	f88d 3020 	strb.w	r3, [sp, #32]
     67c:	9003      	str	r0, [sp, #12]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     67e:	d015      	beq.n	6ac <CLEDController::clearLeds(int)+0x70>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     680:	f88d 301d 	strb.w	r3, [sp, #29]
     684:	f88d 301c 	strb.w	r3, [sp, #28]
     688:	f88d 301b 	strb.w	r3, [sp, #27]
     68c:	f88d 301a 	strb.w	r3, [sp, #26]
     690:	f88d 3019 	strb.w	r3, [sp, #25]
     694:	f88d 3018 	strb.w	r3, [sp, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     698:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     69a:	69aa      	ldr	r2, [r5, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     69c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6a0:	4620      	mov	r0, r4
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     6a2:	9309      	str	r3, [sp, #36]	; 0x24
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     6a4:	a903      	add	r1, sp, #12
     6a6:	4790      	blx	r2

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     6a8:	b00b      	add	sp, #44	; 0x2c
     6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     6ac:	4a21      	ldr	r2, [pc, #132]	; (734 <CLEDController::clearLeds(int)+0xf8>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6ae:	7813      	ldrb	r3, [r2, #0]
     6b0:	3301      	adds	r3, #1
     6b2:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     6b6:	f013 0f01 	tst.w	r3, #1
     6ba:	bf14      	ite	ne
     6bc:	2180      	movne	r1, #128	; 0x80
     6be:	2100      	moveq	r1, #0
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     6c0:	7013      	strb	r3, [r2, #0]
            uint8_t Q = 0;

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     6c2:	079a      	lsls	r2, r3, #30
     6c4:	bf44      	itt	mi
     6c6:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
     6ca:	b2c9      	uxtbmi	r1, r1
                if(R & 0x04) { Q |= 0x20; }
     6cc:	075b      	lsls	r3, r3, #29
     6ce:	bf48      	it	mi
     6d0:	f041 0120 	orrmi.w	r1, r1, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     6d4:	3110      	adds	r1, #16
     6d6:	2200      	movs	r2, #0
     6d8:	b2c9      	uxtb	r1, r1
     6da:	f10d 031b 	add.w	r3, sp, #27
     6de:	f10d 071e 	add.w	r7, sp, #30
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     6e2:	f44f 7e80 	mov.w	lr, #256	; 0x100
     6e6:	b1aa      	cbz	r2, 714 <CLEDController::clearLeds(int)+0xd8>
     6e8:	fb9e f2f2 	sdiv	r2, lr, r2
     6ec:	b2d2      	uxtb	r2, r2
     6ee:	1c50      	adds	r0, r2, #1
     6f0:	b2c0      	uxtb	r0, r0
///  4 clocks AVR with MUL, 2 clocks ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     6f2:	fb00 1501 	mla	r5, r0, r1, r1
     6f6:	122d      	asrs	r5, r5, #8
     6f8:	7018      	strb	r0, [r3, #0]
     6fa:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     6fc:	b105      	cbz	r5, 700 <CLEDController::clearLeds(int)+0xc4>
     6fe:	3e01      	subs	r6, #1
     700:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     704:	b100      	cbz	r0, 708 <CLEDController::clearLeds(int)+0xcc>
     706:	701a      	strb	r2, [r3, #0]
     708:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     70a:	429f      	cmp	r7, r3
     70c:	d008      	beq.n	720 <CLEDController::clearLeds(int)+0xe4>
     70e:	78da      	ldrb	r2, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     710:	2a00      	cmp	r2, #0
     712:	d1e9      	bne.n	6e8 <CLEDController::clearLeds(int)+0xac>
     714:	701a      	strb	r2, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     716:	f803 2c03 	strb.w	r2, [r3, #-3]
     71a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     71c:	429f      	cmp	r7, r3
     71e:	d1f6      	bne.n	70e <CLEDController::clearLeds(int)+0xd2>
     720:	6825      	ldr	r5, [r4, #0]
     722:	e7b9      	b.n	698 <CLEDController::clearLeds(int)+0x5c>
        show(data, nLeds, getAdjustment(brightness));
    }

    /// show function w/integer brightness, will scale for color correction and temperature
    void showColor(const struct CRGB &data, int nLeds, uint8_t brightness) {
        showColor(data, nLeds, getAdjustment(brightness));
     724:	460a      	mov	r2, r1
     726:	ab02      	add	r3, sp, #8
     728:	a901      	add	r1, sp, #4
     72a:	47b0      	blx	r6

	///initialize the LED controller
	virtual void init() = 0;

	///clear out/zero out the given number of leds.
	virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     72c:	b00b      	add	sp, #44	; 0x2c
     72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     730:	00000881 	.word	0x00000881
     734:	1fff8c88 	.word	0x1fff8c88

00000738 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]>:
    return result;
}

/// beatsin8 generates an 8-bit sine wave at a given BPM,
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
     738:	b470      	push	{r4, r5, r6}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     73a:	4c1e      	ldr	r4, [pc, #120]	; (7b4 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]+0x7c>)
     73c:	b083      	sub	sp, #12
     73e:	6824      	ldr	r4, [r4, #0]
     740:	9401      	str	r4, [sp, #4]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     742:	28ff      	cmp	r0, #255	; 0xff
	return ret;
     744:	9d01      	ldr	r5, [sp, #4]
     746:	bf98      	it	ls
     748:	0200      	lslls	r0, r0, #8
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
     74a:	f44f 748c 	mov.w	r4, #280	; 0x118

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
     74e:	bf98      	it	ls
     750:	b280      	uxthls	r0, r0
///           that oscillates within a given range.
LIB8STATIC uint8_t beatsin8( accum88 beats_per_minute, uint8_t lowest = 0, uint8_t highest = 255,
                            uint32_t timebase = 0, uint8_t phase_offset = 0)
{
    uint8_t beat = beat8( beats_per_minute, timebase);
    uint8_t beatsin = sin8( beat + phase_offset);
     752:	fb04 f405 	mul.w	r4, r4, r5
     756:	fb00 f004 	mul.w	r0, r0, r4
     75a:	eb03 6010 	add.w	r0, r3, r0, lsr #24
     75e:	b2c3      	uxtb	r3, r0
/// @param theta input angle from 0-255
/// @returns sin of theta, value between 0 and 255
LIB8STATIC uint8_t sin8_C( uint8_t theta)
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
     760:	0658      	lsls	r0, r3, #25
     762:	d521      	bpl.n	7a8 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]+0x70>
        offset = (uint8_t)255 - offset;
     764:	43dd      	mvns	r5, r3
     766:	b2ed      	uxtb	r5, r5
    }
    offset &= 0x3F; // 0..63

    uint8_t secoffset  = offset & 0x0F; // 0..15
     768:	f005 000f 	and.w	r0, r5, #15
    if( theta & 0x40) secoffset++;
     76c:	3001      	adds	r0, #1
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
     76e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    if( theta & 0x40) secoffset++;

    uint8_t section = offset >> 4; // 0..3
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
     772:	4c11      	ldr	r4, [pc, #68]	; (7b8 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]+0x80>)
     774:	112d      	asrs	r5, r5, #4
     776:	006d      	lsls	r5, r5, #1
     778:	1966      	adds	r6, r4, r5
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     77a:	5d65      	ldrb	r5, [r4, r5]
    uint8_t s2 = section * 2;
    const uint8_t* p = b_m16_interleave;
    p += s2;
    uint8_t b   =  *p;
    p++;
    uint8_t m16 =  *p;
     77c:	7874      	ldrb	r4, [r6, #1]

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     77e:	fb14 f400 	smulbb	r4, r4, r0
     782:	eb05 1424 	add.w	r4, r5, r4, asr #4
    if( theta & 0x80 ) y = -y;
     786:	061b      	lsls	r3, r3, #24
    p++;
    uint8_t m16 =  *p;

    uint8_t mx = (m16 * secoffset) >> 4;

    int8_t y = mx + b;
     788:	b2e4      	uxtb	r4, r4
    if( theta & 0x80 ) y = -y;
     78a:	bf48      	it	mi
     78c:	4264      	negmi	r4, r4
     78e:	b264      	sxtb	r4, r4
    uint8_t rangewidth = highest - lowest;
    uint8_t scaledbeat = scale8( beatsin, rangewidth);
    uint8_t result = lowest + scaledbeat;
    return result;
     790:	1a50      	subs	r0, r2, r1
     792:	3c80      	subs	r4, #128	; 0x80
     794:	b2c0      	uxtb	r0, r0
     796:	b2e3      	uxtb	r3, r4
     798:	fb00 3303 	mla	r3, r0, r3, r3
     79c:	eb01 2023 	add.w	r0, r1, r3, asr #8
     7a0:	b2c0      	uxtb	r0, r0
}
     7a2:	b003      	add	sp, #12
     7a4:	bc70      	pop	{r4, r5, r6}
     7a6:	4770      	bx	lr
{
    uint8_t offset = theta;
    if( theta & 0x40 ) {
        offset = (uint8_t)255 - offset;
    }
    offset &= 0x3F; // 0..63
     7a8:	f003 053f 	and.w	r5, r3, #63	; 0x3f

    uint8_t secoffset  = offset & 0x0F; // 0..15
     7ac:	f003 000f 	and.w	r0, r3, #15
     7b0:	e7df      	b.n	772 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]+0x3a>
     7b2:	bf00      	nop
     7b4:	1fffb1a0 	.word	0x1fffb1a0
     7b8:	0000ffcc 	.word	0x0000ffcc

000007bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:

/// write the passed in rgb data out to the leds managed by this controller
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7c0:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     7c2:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     7c4:	789b      	ldrb	r3, [r3, #2]
     7c6:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7c8:	2d01      	cmp	r5, #1
            mData += skip;
            mAdvance = (advance) ? 3+skip : 0;
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     7ca:	9101      	str	r1, [sp, #4]
     7cc:	9202      	str	r2, [sp, #8]
     7ce:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     7d0:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     7d4:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     7d8:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     7dc:	d017      	beq.n	80e <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x52>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     7de:	2300      	movs	r3, #0
     7e0:	f88d 3015 	strb.w	r3, [sp, #21]
     7e4:	f88d 3014 	strb.w	r3, [sp, #20]
     7e8:	f88d 3013 	strb.w	r3, [sp, #19]
     7ec:	f88d 3012 	strb.w	r3, [sp, #18]
     7f0:	f88d 3011 	strb.w	r3, [sp, #17]
     7f4:	f88d 3010 	strb.w	r3, [sp, #16]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7f8:	6803      	ldr	r3, [r0, #0]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     7fa:	2200      	movs	r2, #0
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     7fc:	2103      	movs	r1, #3
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     7fe:	699b      	ldr	r3, [r3, #24]
            initOffsets(len);
        }

        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 3;
     800:	f88d 1019 	strb.w	r1, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     804:	9207      	str	r2, [sp, #28]
///@param data the rgb data to write out to the strip
///@param nLeds the number of leds being written out
///@param scale the rgb scaling to apply to each led before writing it out
  virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     806:	a901      	add	r1, sp, #4
     808:	4798      	blx	r3
  }
     80a:	b009      	add	sp, #36	; 0x24
     80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     80e:	4a1b      	ldr	r2, [pc, #108]	; (87c <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     810:	7813      	ldrb	r3, [r2, #0]
     812:	3301      	adds	r3, #1
     814:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     818:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     81c:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     81e:	bf14      	ite	ne
     820:	2280      	movne	r2, #128	; 0x80
     822:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     824:	0799      	lsls	r1, r3, #30
     826:	bf44      	itt	mi
     828:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     82c:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     82e:	075b      	lsls	r3, r3, #29
     830:	bf48      	it	mi
     832:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     836:	3210      	adds	r2, #16
     838:	b2d2      	uxtb	r2, r2
     83a:	f10d 0313 	add.w	r3, sp, #19
     83e:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     842:	f44f 7e80 	mov.w	lr, #256	; 0x100
     846:	b1ac      	cbz	r4, 874 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xb8>
     848:	fb9e f4f4 	sdiv	r4, lr, r4
     84c:	b2e4      	uxtb	r4, r4
     84e:	1c61      	adds	r1, r4, #1
     850:	b2c9      	uxtb	r1, r1
     852:	fb01 2502 	mla	r5, r1, r2, r2
     856:	122d      	asrs	r5, r5, #8
     858:	7019      	strb	r1, [r3, #0]
     85a:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     85c:	b105      	cbz	r5, 860 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xa4>
     85e:	3e01      	subs	r6, #1
     860:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     864:	b101      	cbz	r1, 868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     866:	701c      	strb	r4, [r3, #0]
     868:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     86a:	42bb      	cmp	r3, r7
     86c:	d0c4      	beq.n	7f8 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x3c>
     86e:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     870:	2c00      	cmp	r4, #0
     872:	d1e9      	bne.n	848 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x8c>
     874:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     876:	f803 4c03 	strb.w	r4, [r3, #-3]
     87a:	e7f5      	b.n	868 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0xac>
     87c:	1fff8c88 	.word	0x1fff8c88

00000880 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:

  /// set all the leds on the controller to a given color
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     880:	b5f0      	push	{r4, r5, r6, r7, lr}
     882:	7c85      	ldrb	r5, [r0, #18]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     884:	781c      	ldrb	r4, [r3, #0]
        g = rhs.g;
     886:	785e      	ldrb	r6, [r3, #1]
        b = rhs.b;
     888:	789b      	ldrb	r3, [r3, #2]
     88a:	b089      	sub	sp, #36	; 0x24
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     88c:	2d01      	cmp	r5, #1
            enable_dithering(dither);
            mAdvance = 3;
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     88e:	9101      	str	r1, [sp, #4]
     890:	9202      	str	r2, [sp, #8]
     892:	9203      	str	r2, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     894:	f88d 4016 	strb.w	r4, [sp, #22]
        g = rhs.g;
     898:	f88d 6017 	strb.w	r6, [sp, #23]
        b = rhs.b;
     89c:	f88d 3018 	strb.w	r3, [sp, #24]
            return mLenRemaining >= n;
        }

        // toggle dithering enable
        void enable_dithering(EDitherMode dither) {
            switch(dither) {
     8a0:	d016      	beq.n	8d0 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x50>
                case BINARY_DITHER: init_binary_dithering(); break;
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     8a2:	2300      	movs	r3, #0
     8a4:	f88d 3015 	strb.w	r3, [sp, #21]
     8a8:	f88d 3014 	strb.w	r3, [sp, #20]
     8ac:	f88d 3013 	strb.w	r3, [sp, #19]
     8b0:	f88d 3012 	strb.w	r3, [sp, #18]
     8b4:	f88d 3011 	strb.w	r3, [sp, #17]
     8b8:	f88d 3010 	strb.w	r3, [sp, #16]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8bc:	6802      	ldr	r2, [r0, #0]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8be:	2300      	movs	r3, #0
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8c0:	6992      	ldr	r2, [r2, #24]
            initOffsets(len);
        }

        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
            enable_dithering(dither);
            mAdvance = 0;
     8c2:	f88d 3019 	strb.w	r3, [sp, #25]
        }

        void initOffsets(int len) {
          int nOffset = 0;
          for(int i = 0; i < LANES; i++) {
            mOffsets[i] = nOffset;
     8c6:	9307      	str	r3, [sp, #28]
  ///@param data the crgb color to set the leds to
  ///@param nLeds the numner of leds to set to this color
  ///@param scale the rgb scaling value for outputting color
  virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
    PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds, scale, getDither());
    showPixels(pixels);
     8c8:	a901      	add	r1, sp, #4
     8ca:	4790      	blx	r2
  }
     8cc:	b009      	add	sp, #36	; 0x24
     8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                  (UPDATES_PER_FULL_DITHER_CYCLE>128) )
#define VIRTUAL_BITS RECOMMENDED_VIRTUAL_BITS

            // R is the digther signal 'counter'.
            static uint8_t R = 0;
            R++;
     8d0:	4a1b      	ldr	r2, [pc, #108]	; (940 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xc0>)

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8d2:	7813      	ldrb	r3, [r2, #0]
     8d4:	3301      	adds	r3, #1
     8d6:	f003 0307 	and.w	r3, r3, #7

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     8da:	f013 0f01 	tst.w	r3, #1
            R++;

            // R is wrapped around at 2^ditherBits,
            // so if ditherBits is 2, R will cycle through (0,1,2,3)
            uint8_t ditherBits = VIRTUAL_BITS;
            R &= (0x01 << ditherBits) - 1;
     8de:	7013      	strb	r3, [r2, #0]

            // Q is the "unscaled dither signal" itself.
            // It's initialized to the reversed bits of R.
            // If 'ditherBits' is 2, Q here will cycle through (0,128,64,192)
            uint8_t Q = 0;
     8e0:	bf14      	ite	ne
     8e2:	2280      	movne	r2, #128	; 0x80
     8e4:	2200      	moveq	r2, #0

            // Reverse bits in a byte
            {
                if(R & 0x01) { Q |= 0x80; }
                if(R & 0x02) { Q |= 0x40; }
     8e6:	0799      	lsls	r1, r3, #30
     8e8:	bf44      	itt	mi
     8ea:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
     8ee:	b2d2      	uxtbmi	r2, r2
                if(R & 0x04) { Q |= 0x20; }
     8f0:	075b      	lsls	r3, r3, #29
     8f2:	bf48      	it	mi
     8f4:	f042 0220 	orrmi.w	r2, r2, #32
            // Now we adjust Q to fall in the center of each range,
            // instead of at the start of the range.
            // If ditherBits is 2, Q will be (0, 128, 64, 192) at first,
            // and this adjustment makes it (31, 159, 95, 223).
            if( ditherBits < 8) {
                Q += 0x01 << (7 - ditherBits);
     8f8:	3210      	adds	r2, #16
     8fa:	b2d2      	uxtb	r2, r2
     8fc:	f10d 0313 	add.w	r3, sp, #19
     900:	f10d 0716 	add.w	r7, sp, #22
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     904:	f44f 7e80 	mov.w	lr, #256	; 0x100
     908:	b1ac      	cbz	r4, 936 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xb6>
     90a:	fb9e f4f4 	sdiv	r4, lr, r4
     90e:	b2e4      	uxtb	r4, r4
     910:	1c61      	adds	r1, r4, #1
     912:	b2c9      	uxtb	r1, r1
     914:	fb01 2502 	mla	r5, r1, r2, r2
     918:	122d      	asrs	r5, r5, #8
     91a:	7019      	strb	r1, [r3, #0]
     91c:	b2ee      	uxtb	r6, r5
                    d[i] = scale8(Q, e[i]);
#if (FASTLED_SCALE8_FIXED == 1)
                    if(d[i]) (d[i]--);
     91e:	b105      	cbz	r5, 922 <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xa2>
     920:	3e01      	subs	r6, #1
     922:	f803 6c03 	strb.w	r6, [r3, #-3]
#endif
                    if(e[i]) e[i]--;
     926:	b101      	cbz	r1, 92a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     928:	701c      	strb	r4, [r3, #0]
     92a:	3301      	adds	r3, #1
            // D and E form the "scaled dither signal"
            // which is added to pixel values to affect the
            // actual dithering.

            // Setup the initial D and E values
            for(int i = 0; i < 3; i++) {
     92c:	42bb      	cmp	r3, r7
     92e:	d0c5      	beq.n	8bc <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x3c>
     930:	78dc      	ldrb	r4, [r3, #3]
                    uint8_t s = mScale.raw[i];
                    e[i] = s ? (256/s) + 1 : 0;
     932:	2c00      	cmp	r4, #0
     934:	d1e9      	bne.n	90a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x8a>
     936:	701c      	strb	r4, [r3, #0]
                    d[i] = scale8(Q, e[i]);
     938:	f803 4c03 	strb.w	r4, [r3, #-3]
     93c:	e7f5      	b.n	92a <CPixelLEDController<(EOrder)136, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0xaa>
     93e:	bf00      	nop
     940:	1fff8c88 	.word	0x1fff8c88

00000944 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     944:	b570      	push	{r4, r5, r6, lr}
     946:	4604      	mov	r4, r0
     948:	4608      	mov	r0, r1
     94a:	460d      	mov	r5, r1
     94c:	f00e ff18 	bl	f780 <strlen>
     950:	6823      	ldr	r3, [r4, #0]
     952:	4602      	mov	r2, r0
     954:	4629      	mov	r1, r5
     956:	4620      	mov	r0, r4
     958:	685b      	ldr	r3, [r3, #4]
     95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     95e:	4718      	bx	r3

00000960 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     960:	b538      	push	{r3, r4, r5, lr}
     962:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     964:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     966:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     968:	f00e ff0a 	bl	f780 <strlen>
     96c:	6823      	ldr	r3, [r4, #0]
     96e:	4602      	mov	r2, r0
     970:	4629      	mov	r1, r5
     972:	685b      	ldr	r3, [r3, #4]
     974:	4620      	mov	r0, r4
     976:	4798      	blx	r3
     978:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     97a:	4620      	mov	r0, r4
     97c:	f00d fb3c 	bl	dff8 <Print::println()>
     980:	4428      	add	r0, r5
     982:	bd38      	pop	{r3, r4, r5, pc}

00000984 <CRGBPalette16::CRGBPalette16(CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&, CRGB const&)>:

class CRGBPalette16 {
public:
    CRGB entries[16];
    CRGBPalette16() {};
    CRGBPalette16( const CRGB& c00,const CRGB& c01,const CRGB& c02,const CRGB& c03,
     984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     988:	780d      	ldrb	r5, [r1, #0]
     98a:	7005      	strb	r5, [r0, #0]
        g = rhs.g;
     98c:	784d      	ldrb	r5, [r1, #1]
     98e:	7045      	strb	r5, [r0, #1]
        b = rhs.b;
     990:	7889      	ldrb	r1, [r1, #2]
     992:	7081      	strb	r1, [r0, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     994:	7811      	ldrb	r1, [r2, #0]
     996:	70c1      	strb	r1, [r0, #3]
        g = rhs.g;
     998:	7851      	ldrb	r1, [r2, #1]
     99a:	7101      	strb	r1, [r0, #4]
        b = rhs.b;
     99c:	7892      	ldrb	r2, [r2, #2]
     99e:	7142      	strb	r2, [r0, #5]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9a0:	781a      	ldrb	r2, [r3, #0]
     9a2:	7182      	strb	r2, [r0, #6]
        g = rhs.g;
     9a4:	785a      	ldrb	r2, [r3, #1]
     9a6:	71c2      	strb	r2, [r0, #7]
        b = rhs.b;
     9a8:	789b      	ldrb	r3, [r3, #2]
     9aa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
     9ae:	7203      	strb	r3, [r0, #8]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9b0:	f89a b000 	ldrb.w	fp, [sl]
     9b4:	f880 b009 	strb.w	fp, [r0, #9]
     9b8:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
     9bc:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
     9c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
     9c4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
     9c6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     9c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
     9ca:	9911      	ldr	r1, [sp, #68]	; 0x44
     9cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
     9ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
        g = rhs.g;
     9d0:	f89a b001 	ldrb.w	fp, [sl, #1]
     9d4:	f880 b00a 	strb.w	fp, [r0, #10]
        b = rhs.b;
     9d8:	f89a a002 	ldrb.w	sl, [sl, #2]
     9dc:	f880 a00b 	strb.w	sl, [r0, #11]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9e0:	f899 a000 	ldrb.w	sl, [r9]
     9e4:	f880 a00c 	strb.w	sl, [r0, #12]
        g = rhs.g;
     9e8:	f899 a001 	ldrb.w	sl, [r9, #1]
     9ec:	f880 a00d 	strb.w	sl, [r0, #13]
        b = rhs.b;
     9f0:	f899 9002 	ldrb.w	r9, [r9, #2]
     9f4:	f880 900e 	strb.w	r9, [r0, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     9f8:	f898 9000 	ldrb.w	r9, [r8]
     9fc:	f880 900f 	strb.w	r9, [r0, #15]
        g = rhs.g;
     a00:	f898 9001 	ldrb.w	r9, [r8, #1]
     a04:	f880 9010 	strb.w	r9, [r0, #16]
        b = rhs.b;
     a08:	f898 8002 	ldrb.w	r8, [r8, #2]
     a0c:	f880 8011 	strb.w	r8, [r0, #17]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a10:	f89c 8000 	ldrb.w	r8, [ip]
     a14:	f880 8012 	strb.w	r8, [r0, #18]
        g = rhs.g;
     a18:	f89c 8001 	ldrb.w	r8, [ip, #1]
     a1c:	f880 8013 	strb.w	r8, [r0, #19]
        b = rhs.b;
     a20:	f89c c002 	ldrb.w	ip, [ip, #2]
     a24:	f880 c014 	strb.w	ip, [r0, #20]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a28:	f89e c000 	ldrb.w	ip, [lr]
     a2c:	f880 c015 	strb.w	ip, [r0, #21]
        g = rhs.g;
     a30:	f89e c001 	ldrb.w	ip, [lr, #1]
     a34:	f880 c016 	strb.w	ip, [r0, #22]
        b = rhs.b;
     a38:	f89e e002 	ldrb.w	lr, [lr, #2]
     a3c:	f880 e017 	strb.w	lr, [r0, #23]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a40:	f897 e000 	ldrb.w	lr, [r7]
     a44:	f880 e018 	strb.w	lr, [r0, #24]
        g = rhs.g;
     a48:	f897 e001 	ldrb.w	lr, [r7, #1]
     a4c:	f880 e019 	strb.w	lr, [r0, #25]
        b = rhs.b;
     a50:	78bf      	ldrb	r7, [r7, #2]
     a52:	7687      	strb	r7, [r0, #26]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a54:	7837      	ldrb	r7, [r6, #0]
     a56:	76c7      	strb	r7, [r0, #27]
        g = rhs.g;
     a58:	7877      	ldrb	r7, [r6, #1]
     a5a:	7707      	strb	r7, [r0, #28]
        b = rhs.b;
     a5c:	78b6      	ldrb	r6, [r6, #2]
     a5e:	7746      	strb	r6, [r0, #29]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a60:	782e      	ldrb	r6, [r5, #0]
     a62:	7786      	strb	r6, [r0, #30]
        g = rhs.g;
     a64:	786e      	ldrb	r6, [r5, #1]
     a66:	77c6      	strb	r6, [r0, #31]
        b = rhs.b;
     a68:	78ad      	ldrb	r5, [r5, #2]
     a6a:	f880 5020 	strb.w	r5, [r0, #32]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a6e:	780d      	ldrb	r5, [r1, #0]
     a70:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
        g = rhs.g;
     a74:	784d      	ldrb	r5, [r1, #1]
     a76:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
        b = rhs.b;
     a7a:	7889      	ldrb	r1, [r1, #2]
     a7c:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a80:	7811      	ldrb	r1, [r2, #0]
     a82:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
        g = rhs.g;
     a86:	7851      	ldrb	r1, [r2, #1]
     a88:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
        b = rhs.b;
     a8c:	7892      	ldrb	r2, [r2, #2]
     a8e:	f880 2026 	strb.w	r2, [r0, #38]	; 0x26
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     a92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a94:	7812      	ldrb	r2, [r2, #0]
     a96:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
        g = rhs.g;
     a9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     a9c:	7852      	ldrb	r2, [r2, #1]
     a9e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        b = rhs.b;
     aa2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     aa4:	7892      	ldrb	r2, [r2, #2]
     aa6:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     aaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
     aac:	7812      	ldrb	r2, [r2, #0]
     aae:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
        g = rhs.g;
     ab2:	9a14      	ldr	r2, [sp, #80]	; 0x50
     ab4:	7852      	ldrb	r2, [r2, #1]
     ab6:	f880 202b 	strb.w	r2, [r0, #43]	; 0x2b
        b = rhs.b;
     aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
     abc:	7892      	ldrb	r2, [r2, #2]
     abe:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     ac2:	781a      	ldrb	r2, [r3, #0]
     ac4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        g = rhs.g;
     ac8:	785a      	ldrb	r2, [r3, #1]
     aca:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
        b = rhs.b;
     ace:	789b      	ldrb	r3, [r3, #2]
     ad0:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
    {
        entries[0]=c00; entries[1]=c01; entries[2]=c02; entries[3]=c03;
        entries[4]=c04; entries[5]=c05; entries[6]=c06; entries[7]=c07;
        entries[8]=c08; entries[9]=c09; entries[10]=c10; entries[11]=c11;
        entries[12]=c12; entries[13]=c13; entries[14]=c14; entries[15]=c15;
    };
     ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ad8 <CRGBPalette16::operator=(unsigned char const*)>:
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     adc:	b08b      	sub	sp, #44	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     ade:	2700      	movs	r7, #0
    // the exact stripe widths at the expense of dropping some colors.
    CRGBPalette16( TProgmemRGBGradientPalette_bytes progpal )
    {
        *this = progpal;
    }
    CRGBPalette16& operator=( TProgmemRGBGradientPalette_bytes progpal )
     ae0:	9006      	str	r0, [sp, #24]
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     ae2:	f851 3027 	ldr.w	r3, [r1, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     ae6:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     ae8:	3701      	adds	r7, #1
        } while ( u.index != 255);
     aea:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     aec:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     aee:	d1f8      	bne.n	ae2 <CRGBPalette16::operator=(unsigned char const*)+0xa>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     af0:	680b      	ldr	r3, [r1, #0]
     af2:	9707      	str	r7, [sp, #28]
        CRGB rgbstart( u.r, u.g, u.b);
     af4:	ea4f 6813 	mov.w	r8, r3, lsr #24
     af8:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     afc:	f3c3 4907 	ubfx	r9, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b00:	f04f 33ff 	mov.w	r3, #4294967295
     b04:	46c6      	mov	lr, r8

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     b06:	2400      	movs	r4, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     b08:	9305      	str	r3, [sp, #20]
     b0a:	4688      	mov	r8, r1
        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     b0c:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b10:	9806      	ldr	r0, [sp, #24]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b12:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
     b16:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b1a:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     b1e:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     b20:	b2f9      	uxtb	r1, r7
     b22:	f3c5 6507 	ubfx	r5, r5, #24, #8
     b26:	9103      	str	r1, [sp, #12]
     b28:	b2e9      	uxtb	r1, r5
     b2a:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     b2c:	fa5f f18c 	uxtb.w	r1, ip
     b30:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     b32:	9907      	ldr	r1, [sp, #28]
     b34:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b36:	aa08      	add	r2, sp, #32
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     b38:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     b3c:	fa5f fa86 	uxtb.w	sl, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     b40:	d80c      	bhi.n	b5c <CRGBPalette16::operator=(unsigned char const*)+0x84>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     b42:	9905      	ldr	r1, [sp, #20]
     b44:	458c      	cmp	ip, r1
     b46:	dc07      	bgt.n	b58 <CRGBPalette16::operator=(unsigned char const*)+0x80>
     b48:	290f      	cmp	r1, #15
     b4a:	d005      	beq.n	b58 <CRGBPalette16::operator=(unsigned char const*)+0x80>
                    istart8 = lastSlotUsed + 1;
     b4c:	3101      	adds	r1, #1
     b4e:	b2c9      	uxtb	r1, r1
     b50:	428b      	cmp	r3, r1
     b52:	9102      	str	r1, [sp, #8]
     b54:	bf38      	it	cc
     b56:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     b58:	b259      	sxtb	r1, r3
     b5a:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     b5c:	a909      	add	r1, sp, #36	; 0x24
     b5e:	9100      	str	r1, [sp, #0]
     b60:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b62:	f88d b020 	strb.w	fp, [sp, #32]
        g = rhs.g;
     b66:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
        b = rhs.b;
     b6a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b6e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
        g = rhs.g;
     b72:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
        b = rhs.b;
     b76:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
     b7a:	f00a ff95 	bl	baa8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     b7e:	2cff      	cmp	r4, #255	; 0xff
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
     b80:	f8dd e010 	ldr.w	lr, [sp, #16]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     b84:	f8dd b00c 	ldr.w	fp, [sp, #12]
        g = rhs.g;
     b88:	46d1      	mov	r9, sl
     b8a:	d1bf      	bne.n	b0c <CRGBPalette16::operator=(unsigned char const*)+0x34>
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
            indexstart = indexend;
            rgbstart = rgbend;
        }
        return *this;
    }
     b8c:	9806      	ldr	r0, [sp, #24]
     b8e:	b00b      	add	sp, #44	; 0x2c
     b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000b94 <updatePaletteIndex(LEDStruct&)>:

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
	for (int i = 0; i < palette_count; i++) {
     b94:	4b48      	ldr	r3, [pc, #288]	; (cb8 <updatePaletteIndex(LEDStruct&)+0x124>)
     b96:	781b      	ldrb	r3, [r3, #0]
     b98:	2b00      	cmp	r3, #0
     b9a:	f000 808b 	beq.w	cb4 <updatePaletteIndex(LEDStruct&)+0x120>
#define qsuba(x, b) ((x>b)?x-b:0)					// Unsigned subtraction macro. if result <0, then => 0.

void switch_mode(LEDStruct& leds); // Forward declaration

// Find index of current (target) palette
void updatePaletteIndex(LEDStruct& leds) {
     b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba2:	b09b      	sub	sp, #108	; 0x6c
     ba4:	f500 73fc 	add.w	r3, r0, #504	; 0x1f8
     ba8:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = 0; i < palette_count; i++) {
     baa:	2300      	movs	r3, #0
     bac:	4a43      	ldr	r2, [pc, #268]	; (cbc <updatePaletteIndex(LEDStruct&)+0x128>)
     bae:	9307      	str	r3, [sp, #28]
     bb0:	f8df 910c 	ldr.w	r9, [pc, #268]	; cc0 <updatePaletteIndex(LEDStruct&)+0x12c>
     bb4:	9009      	str	r0, [sp, #36]	; 0x24
     bb6:	f200 2327 	addw	r3, r0, #551	; 0x227
     bba:	9208      	str	r2, [sp, #32]
     bbc:	930b      	str	r3, [sp, #44]	; 0x2c
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
     bbe:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
     bc0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
     bc4:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bc6:	3701      	adds	r7, #1
        } while ( u.index != 255);
     bc8:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
     bca:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
     bcc:	d1f8      	bne.n	bc0 <updatePaletteIndex(LEDStruct&)+0x2c>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     bce:	f8d9 3000 	ldr.w	r3, [r9]
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
     bd2:	9706      	str	r7, [sp, #24]
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     bd4:	f04f 32ff 	mov.w	r2, #4294967295

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     bd8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
     bdc:	9205      	str	r2, [sp, #20]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);
     bde:	f3c3 2b07 	ubfx	fp, r3, #8, #8
     be2:	ea4f 6813 	mov.w	r8, r3, lsr #24

        int indexstart = 0;
     be6:	2400      	movs	r4, #0
     be8:	46d6      	mov	lr, sl
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
     bea:	f859 5f04 	ldr.w	r5, [r9, #4]!
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bee:	f3c5 4607 	ubfx	r6, r5, #16, #8
            istart8 = indexstart / 16;
     bf2:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     bf6:	f3c5 2707 	ubfx	r7, r5, #8, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
     bfa:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
     bfc:	b2f1      	uxtb	r1, r6
     bfe:	f3c5 6507 	ubfx	r5, r5, #24, #8
     c02:	9103      	str	r1, [sp, #12]
     c04:	b2e9      	uxtb	r1, r5
     c06:	9104      	str	r1, [sp, #16]
            istart8 = indexstart / 16;
     c08:	fa5f f18c 	uxtb.w	r1, ip
     c0c:	9102      	str	r1, [sp, #8]
            iend8   = indexend   / 16;
            if( count < 16) {
     c0e:	9906      	ldr	r1, [sp, #24]
     c10:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c12:	aa0c      	add	r2, sp, #48	; 0x30
     c14:	a80e      	add	r0, sp, #56	; 0x38
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
     c16:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
     c1a:	fa5f fa87 	uxtb.w	sl, r7
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
     c1e:	d80c      	bhi.n	c3a <updatePaletteIndex(LEDStruct&)+0xa6>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
     c20:	9905      	ldr	r1, [sp, #20]
     c22:	458c      	cmp	ip, r1
     c24:	dc07      	bgt.n	c36 <updatePaletteIndex(LEDStruct&)+0xa2>
     c26:	290f      	cmp	r1, #15
     c28:	d005      	beq.n	c36 <updatePaletteIndex(LEDStruct&)+0xa2>
                    istart8 = lastSlotUsed + 1;
     c2a:	3101      	adds	r1, #1
     c2c:	b2c9      	uxtb	r1, r1
     c2e:	428b      	cmp	r3, r1
     c30:	9102      	str	r1, [sp, #8]
     c32:	bf38      	it	cc
     c34:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
     c36:	b259      	sxtb	r1, r3
     c38:	9105      	str	r1, [sp, #20]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
     c3a:	a90d      	add	r1, sp, #52	; 0x34
     c3c:	9100      	str	r1, [sp, #0]
     c3e:	9902      	ldr	r1, [sp, #8]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c40:	f88d b030 	strb.w	fp, [sp, #48]	; 0x30
        g = rhs.g;
     c44:	f88d e031 	strb.w	lr, [sp, #49]	; 0x31
        b = rhs.b;
     c48:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c4c:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
        g = rhs.g;
     c50:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
        b = rhs.b;
     c54:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
     c58:	f00a ff26 	bl	baa8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
     c5c:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     c5e:	46d3      	mov	fp, sl
        g = rhs.g;
     c60:	f8dd e00c 	ldr.w	lr, [sp, #12]
        b = rhs.b;
     c64:	f8dd 8010 	ldr.w	r8, [sp, #16]
     c68:	d1bf      	bne.n	bea <updatePaletteIndex(LEDStruct&)+0x56>

    bool operator==( const CRGBPalette16 rhs)
    {
        const uint8_t* p = (const uint8_t*)(&(this->entries[0]));
        const uint8_t* q = (const uint8_t*)(&(rhs.entries[0]));
        if( p == q) return true;
     c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     c6c:	aa0e      	add	r2, sp, #56	; 0x38
     c6e:	4293      	cmp	r3, r2
     c70:	d018      	beq.n	ca4 <updatePaletteIndex(LEDStruct&)+0x110>
     c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
     c74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
     c76:	f203 13f7 	addw	r3, r3, #503	; 0x1f7
     c7a:	e001      	b.n	c80 <updatePaletteIndex(LEDStruct&)+0xec>
        for( uint8_t i = 0; i < (sizeof( entries)); i++) {
     c7c:	42a3      	cmp	r3, r4
     c7e:	d011      	beq.n	ca4 <updatePaletteIndex(LEDStruct&)+0x110>
            if( *p != *q) return false;
     c80:	f812 1b01 	ldrb.w	r1, [r2], #1
     c84:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     c88:	4288      	cmp	r0, r1
     c8a:	d0f7      	beq.n	c7c <updatePaletteIndex(LEDStruct&)+0xe8>
     c8c:	4b0a      	ldr	r3, [pc, #40]	; (cb8 <updatePaletteIndex(LEDStruct&)+0x124>)
     c8e:	9a07      	ldr	r2, [sp, #28]
     c90:	781b      	ldrb	r3, [r3, #0]
     c92:	3201      	adds	r2, #1
     c94:	4293      	cmp	r3, r2
     c96:	9207      	str	r2, [sp, #28]
     c98:	dd09      	ble.n	cae <updatePaletteIndex(LEDStruct&)+0x11a>
     c9a:	9b08      	ldr	r3, [sp, #32]
     c9c:	f853 9f04 	ldr.w	r9, [r3, #4]!
     ca0:	9308      	str	r3, [sp, #32]
     ca2:	e78c      	b.n	bbe <updatePaletteIndex(LEDStruct&)+0x2a>
		if (leds.target_palette == palettes[i]) {
			leds.palette_index = i;
     ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
     ca6:	f89d 201c 	ldrb.w	r2, [sp, #28]
     caa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
			break;
		}
	}
}
     cae:	b01b      	add	sp, #108	; 0x6c
     cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cb4:	4770      	bx	lr
     cb6:	bf00      	nop
     cb8:	1fff8750 	.word	0x1fff8750
     cbc:	000103b8 	.word	0x000103b8
     cc0:	0001238c 	.word	0x0001238c

00000cc4 <initialize()>:
		}
	}
}

// Initialization function
void initialize() {
     cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     cc8:	4d42      	ldr	r5, [pc, #264]	; (dd4 <initialize()+0x110>)
		}
	}
}

// Initialization function
void initialize() {
     cca:	b082      	sub	sp, #8
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
     ccc:	aa01      	add	r2, sp, #4
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     cce:	2400      	movs	r4, #0
     cd0:	4628      	mov	r0, r5
     cd2:	2196      	movs	r1, #150	; 0x96
     cd4:	f88d 4004 	strb.w	r4, [sp, #4]
     cd8:	f88d 4005 	strb.w	r4, [sp, #5]
     cdc:	f88d 4006 	strb.w	r4, [sp, #6]
     ce0:	f00a feb2 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type		= CURRENT;
	curr_leds.current_palette	= rainbowsherbet_gp;
     ce4:	493c      	ldr	r1, [pc, #240]	; (dd8 <initialize()+0x114>)

// Initialization function
void initialize() {
	// Initialize curr_leds
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_leds.array_type		= CURRENT;
     ce6:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
	curr_leds.current_palette	= rainbowsherbet_gp;
     cea:	f505 70e4 	add.w	r0, r5, #456	; 0x1c8
     cee:	f7ff fef3 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	curr_leds.target_palette	= Tropical_Colors_gp;
     cf2:	493a      	ldr	r1, [pc, #232]	; (ddc <initialize()+0x118>)
     cf4:	f505 70fc 	add.w	r0, r5, #504	; 0x1f8
     cf8:	f7ff feee 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	updatePaletteIndex(curr_leds);
     cfc:	4628      	mov	r0, r5
     cfe:	f7ff ff49 	bl	b94 <updatePaletteIndex(LEDStruct&)>
	curr_leds.mode_name			= start_mode;
     d02:	4b37      	ldr	r3, [pc, #220]	; (de0 <initialize()+0x11c>)
     d04:	4a37      	ldr	r2, [pc, #220]	; (de4 <initialize()+0x120>)
     d06:	7818      	ldrb	r0, [r3, #0]
     d08:	f885 022c 	strb.w	r0, [r5, #556]	; 0x22c
     d0c:	4623      	mov	r3, r4
     d0e:	e001      	b.n	d14 <initialize()+0x50>
	}
}


void find_mode_number(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(ModeList); i++){
     d10:	2b1b      	cmp	r3, #27
     d12:	d008      	beq.n	d26 <initialize()+0x62>
		if (leds.mode_name == ModeList[i]) {
     d14:	f812 1f01 	ldrb.w	r1, [r2, #1]!
     d18:	4281      	cmp	r1, r0
     d1a:	b2dc      	uxtb	r4, r3
     d1c:	f103 0301 	add.w	r3, r3, #1
     d20:	d1f6      	bne.n	d10 <initialize()+0x4c>
			leds.mode_number = i;
     d22:	f885 422b 	strb.w	r4, [r5, #555]	; 0x22b
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d26:	4e30      	ldr	r6, [pc, #192]	; (de8 <initialize()+0x124>)
	next_leds.target_palette	= rainbow_gp;
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; dfc <initialize()+0x138>
	curr_over_leds.array_type		= CURR_OVERLAY;
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d2c:	4f2f      	ldr	r7, [pc, #188]	; (dec <initialize()+0x128>)
     d2e:	2400      	movs	r4, #0
	updatePaletteIndex(curr_leds);
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
     d30:	aa01      	add	r2, sp, #4
     d32:	4630      	mov	r0, r6
     d34:	2196      	movs	r1, #150	; 0x96
     d36:	f88d 4004 	strb.w	r4, [sp, #4]
     d3a:	f88d 4005 	strb.w	r4, [sp, #5]
     d3e:	f88d 4006 	strb.w	r4, [sp, #6]
     d42:	f00a fe81 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	next_leds.array_type		= NEXT;
     d46:	2301      	movs	r3, #1
	next_leds.current_palette	= slope_gp;
     d48:	f506 70e4 	add.w	r0, r6, #456	; 0x1c8
     d4c:	4928      	ldr	r1, [pc, #160]	; (df0 <initialize()+0x12c>)
	curr_leds.mode_name			= start_mode;
	find_mode_number(curr_leds);

	// Initialize next_leds
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
	next_leds.array_type		= NEXT;
     d4e:	f886 31c6 	strb.w	r3, [r6, #454]	; 0x1c6
	next_leds.current_palette	= slope_gp;
     d52:	f7ff fec1 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.target_palette	= rainbow_gp;
     d56:	4927      	ldr	r1, [pc, #156]	; (df4 <initialize()+0x130>)
     d58:	f506 70fc 	add.w	r0, r6, #504	; 0x1f8
     d5c:	f7ff febc 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
     d60:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
     d64:	f886 322b 	strb.w	r3, [r6, #555]	; 0x22b
	updatePaletteIndex(next_leds);
     d68:	4630      	mov	r0, r6
     d6a:	f7ff ff13 	bl	b94 <updatePaletteIndex(LEDStruct&)>

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d6e:	aa01      	add	r2, sp, #4
     d70:	4640      	mov	r0, r8
     d72:	2196      	movs	r1, #150	; 0x96
     d74:	f88d 4004 	strb.w	r4, [sp, #4]
     d78:	f88d 4005 	strb.w	r4, [sp, #5]
     d7c:	f88d 4006 	strb.w	r4, [sp, #6]
     d80:	f00a fe62 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	curr_over_leds.array_type		= CURR_OVERLAY;
     d84:	2302      	movs	r3, #2
	curr_over_leds.current_palette	= cequal_gp;
     d86:	f508 70e4 	add.w	r0, r8, #456	; 0x1c8
     d8a:	491b      	ldr	r1, [pc, #108]	; (df8 <initialize()+0x134>)
	next_leds.mode_number		= curr_leds.mode_number;			// Helps with sequential steps
	updatePaletteIndex(next_leds);

	// Initialize curr_over_leds
	fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
	curr_over_leds.array_type		= CURR_OVERLAY;
     d8c:	f888 31c6 	strb.w	r3, [r8, #454]	; 0x1c6
	curr_over_leds.current_palette	= cequal_gp;
     d90:	f7ff fea2 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	curr_over_leds.target_palette	= cequal_gp;
     d94:	f508 70fc 	add.w	r0, r8, #504	; 0x1f8
     d98:	4917      	ldr	r1, [pc, #92]	; (df8 <initialize()+0x134>)
     d9a:	f7ff fe9d 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
     d9e:	aa01      	add	r2, sp, #4
     da0:	4638      	mov	r0, r7
     da2:	2196      	movs	r1, #150	; 0x96
     da4:	f88d 4004 	strb.w	r4, [sp, #4]
     da8:	f88d 4005 	strb.w	r4, [sp, #5]
     dac:	f88d 4006 	strb.w	r4, [sp, #6]
     db0:	f00a fe4a 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	next_over_leds.array_type = NEXT_OVERLAY;
     db4:	2303      	movs	r3, #3
	next_over_leds.current_palette = cequal_gp;
     db6:	f507 70e4 	add.w	r0, r7, #456	; 0x1c8
     dba:	490f      	ldr	r1, [pc, #60]	; (df8 <initialize()+0x134>)
	curr_over_leds.current_palette	= cequal_gp;
	curr_over_leds.target_palette	= cequal_gp;

	// Initialize next_over_leds
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
	next_over_leds.array_type = NEXT_OVERLAY;
     dbc:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
	next_over_leds.current_palette = cequal_gp;
     dc0:	f7ff fe8a 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
	next_over_leds.target_palette = cequal_gp;
     dc4:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
     dc8:	490b      	ldr	r1, [pc, #44]	; (df8 <initialize()+0x134>)
     dca:	f7ff fe85 	bl	ad8 <CRGBPalette16::operator=(unsigned char const*)>
}
     dce:	b002      	add	sp, #8
     dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dd4:	1fffa704 	.word	0x1fffa704
     dd8:	000127e0 	.word	0x000127e0
     ddc:	0001052c 	.word	0x0001052c
     de0:	1fff8749 	.word	0x1fff8749
     de4:	1fff8723 	.word	0x1fff8723
     de8:	1fff8cb0 	.word	0x1fff8cb0
     dec:	1fff9ea8 	.word	0x1fff9ea8
     df0:	000125c4 	.word	0x000125c4
     df4:	00012584 	.word	0x00012584
     df8:	00012638 	.word	0x00012638
     dfc:	1fff9634 	.word	0x1fff9634

00000e00 <global_debug()>:
		if (DEBUG) { print_palette(leds.palette_index); }
	}
}

// Debug
void global_debug() {
     e00:	b510      	push	{r4, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     e02:	2112      	movs	r1, #18
     e04:	b082      	sub	sp, #8
     e06:	4834      	ldr	r0, [pc, #208]	; (ed8 <global_debug()+0xd8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e08:	4c34      	ldr	r4, [pc, #208]	; (edc <global_debug()+0xdc>)
     e0a:	f00c fef1 	bl	dbf0 <usb_serial_write>
	Serial.print("(S) Change modes:\t");
	Serial.println(mode_change);
     e0e:	4b34      	ldr	r3, [pc, #208]	; (ee0 <global_debug()+0xe0>)
     e10:	4620      	mov	r0, r4
     e12:	7819      	ldrb	r1, [r3, #0]
     e14:	f00d f940 	bl	e098 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e18:	4620      	mov	r0, r4
     e1a:	f00d f8ed 	bl	dff8 <Print::println()>
     e1e:	2111      	movs	r1, #17
     e20:	4830      	ldr	r0, [pc, #192]	; (ee4 <global_debug()+0xe4>)
     e22:	f00c fee5 	bl	dbf0 <usb_serial_write>
	Serial.print("(R) Random Mode:\t");
	Serial.println(random_mode);
     e26:	4b30      	ldr	r3, [pc, #192]	; (ee8 <global_debug()+0xe8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e28:	4620      	mov	r0, r4
     e2a:	7819      	ldrb	r1, [r3, #0]
     e2c:	f00d f934 	bl	e098 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e30:	4620      	mov	r0, r4
     e32:	f00d f8e1 	bl	dff8 <Print::println()>
     e36:	2115      	movs	r1, #21
     e38:	482c      	ldr	r0, [pc, #176]	; (eec <global_debug()+0xec>)
     e3a:	f00c fed9 	bl	dbf0 <usb_serial_write>
	Serial.print("(Q) Change Palettes:\t");
	Serial.println(random_palette);
     e3e:	4b2c      	ldr	r3, [pc, #176]	; (ef0 <global_debug()+0xf0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e40:	4620      	mov	r0, r4
     e42:	7819      	ldrb	r1, [r3, #0]
     e44:	f00d f928 	bl	e098 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e48:	4620      	mov	r0, r4
     e4a:	f00d f8d5 	bl	dff8 <Print::println()>
     e4e:	2111      	movs	r1, #17
     e50:	4828      	ldr	r0, [pc, #160]	; (ef4 <global_debug()+0xf4>)
     e52:	f00c fecd 	bl	dbf0 <usb_serial_write>
	Serial.print("(T) Mode Timer:\t\t");
	Serial.println(mode_change_time);
     e56:	4b28      	ldr	r3, [pc, #160]	; (ef8 <global_debug()+0xf8>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e58:	4620      	mov	r0, r4
     e5a:	8819      	ldrh	r1, [r3, #0]
     e5c:	f00d f91c 	bl	e098 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e60:	4620      	mov	r0, r4
     e62:	f00d f8c9 	bl	dff8 <Print::println()>
     e66:	2114      	movs	r1, #20
     e68:	4824      	ldr	r0, [pc, #144]	; (efc <global_debug()+0xfc>)
     e6a:	f00c fec1 	bl	dbf0 <usb_serial_write>
	Serial.print("Mode change number:\t");
	Serial.println(number_of_mode_changes);
     e6e:	4b24      	ldr	r3, [pc, #144]	; (f00 <global_debug()+0x100>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e70:	4620      	mov	r0, r4
     e72:	8819      	ldrh	r1, [r3, #0]
     e74:	f00d f910 	bl	e098 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     e78:	4620      	mov	r0, r4
     e7a:	f00d f8bd 	bl	dff8 <Print::println()>
     e7e:	210f      	movs	r1, #15
     e80:	4820      	ldr	r0, [pc, #128]	; (f04 <global_debug()+0x104>)
     e82:	f00c feb5 	bl	dbf0 <usb_serial_write>
	Serial.print("Running time:\t\t");
	Serial.print(number_of_min_on);
     e86:	4b20      	ldr	r3, [pc, #128]	; (f08 <global_debug()+0x108>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     e88:	4620      	mov	r0, r4
     e8a:	8819      	ldrh	r1, [r3, #0]
     e8c:	f00d f904 	bl	e098 <Print::print(long)>
     e90:	2102      	movs	r1, #2
     e92:	481e      	ldr	r0, [pc, #120]	; (f0c <global_debug()+0x10c>)
     e94:	f00c feac 	bl	dbf0 <usb_serial_write>
	Serial.print("m ");
	Serial.print(number_of_sec_on);
     e98:	4b1d      	ldr	r3, [pc, #116]	; (f10 <global_debug()+0x110>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     e9a:	220a      	movs	r2, #10
     e9c:	7819      	ldrb	r1, [r3, #0]
     e9e:	4620      	mov	r0, r4
     ea0:	2300      	movs	r3, #0
     ea2:	f00d f8b9 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ea6:	2101      	movs	r1, #1
     ea8:	481a      	ldr	r0, [pc, #104]	; (f14 <global_debug()+0x114>)
     eaa:	f00c fea1 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     eae:	4620      	mov	r0, r4
     eb0:	f00d f8a2 	bl	dff8 <Print::println()>
     eb4:	210e      	movs	r1, #14
     eb6:	4818      	ldr	r0, [pc, #96]	; (f18 <global_debug()+0x118>)
     eb8:	f00c fe9a 	bl	dbf0 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ebc:	4b17      	ldr	r3, [pc, #92]	; (f1c <global_debug()+0x11c>)
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	9301      	str	r3, [sp, #4]
	return ret;
     ec2:	9901      	ldr	r1, [sp, #4]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     ec4:	2300      	movs	r3, #0
     ec6:	220a      	movs	r2, #10
     ec8:	4620      	mov	r0, r4
     eca:	f00d f8a5 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ece:	4620      	mov	r0, r4
     ed0:	f00d f892 	bl	dff8 <Print::println()>
	Serial.println("s");
	Serial.print("System time:\t\t");
	Serial.println(millis());
}
     ed4:	b002      	add	sp, #8
     ed6:	bd10      	pop	{r4, pc}
     ed8:	00010a44 	.word	0x00010a44
     edc:	1fff878c 	.word	0x1fff878c
     ee0:	1fff8783 	.word	0x1fff8783
     ee4:	00010a58 	.word	0x00010a58
     ee8:	1fff874c 	.word	0x1fff874c
     eec:	00010a6c 	.word	0x00010a6c
     ef0:	1fff8758 	.word	0x1fff8758
     ef4:	00010a84 	.word	0x00010a84
     ef8:	1fff8720 	.word	0x1fff8720
     efc:	00010a98 	.word	0x00010a98
     f00:	1fff8cac 	.word	0x1fff8cac
     f04:	00010ab0 	.word	0x00010ab0
     f08:	1fff962e 	.word	0x1fff962e
     f0c:	00010ac0 	.word	0x00010ac0
     f10:	1fff9580 	.word	0x1fff9580
     f14:	00010ac4 	.word	0x00010ac4
     f18:	00010ac8 	.word	0x00010ac8
     f1c:	1fffb1a0 	.word	0x1fffb1a0

00000f20 <begin_transition()>:
     f20:	491e      	ldr	r1, [pc, #120]	; (f9c <begin_transition()+0x7c>)

// Transition functions
void begin_transition() {
	in_transition = 1;
     f22:	481f      	ldr	r0, [pc, #124]	; (fa0 <begin_transition()+0x80>)
     f24:	880b      	ldrh	r3, [r1, #0]
     f26:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f2e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
     f32:	3319      	adds	r3, #25
     f34:	b29b      	uxth	r3, r3
     f36:	eb03 2243 	add.w	r2, r3, r3, lsl #9
     f3a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     f3e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f42:	eb03 2313 	add.w	r3, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f46:	3219      	adds	r2, #25
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f48:	b2db      	uxtb	r3, r3
     f4a:	b292      	uxth	r2, r2
     f4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	Serial.print("System time:\t\t");
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
     f50:	b4f0      	push	{r4, r5, r6, r7}
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f52:	121b      	asrs	r3, r3, #8
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
     f54:	eb02 2712 	add.w	r7, r2, r2, lsr #8
     f58:	4e12      	ldr	r6, [pc, #72]	; (fa4 <begin_transition()+0x84>)
	transition_speed = random8(3, 8);
     f5a:	4d13      	ldr	r5, [pc, #76]	; (fa8 <begin_transition()+0x88>)
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f5c:	5cf3      	ldrb	r3, [r6, r3]
     f5e:	4c13      	ldr	r4, [pc, #76]	; (fac <begin_transition()+0x8c>)
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
     f60:	800a      	strh	r2, [r1, #0]
	transition_speed = random8(3, 8);
     f62:	b2ff      	uxtb	r7, r7
     f64:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f68:	2201      	movs	r2, #1
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f6a:	123f      	asrs	r7, r7, #8
     f6c:	3703      	adds	r7, #3
	switch (transition_type) {
     f6e:	4293      	cmp	r3, r2

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
     f70:	702f      	strb	r7, [r5, #0]
}

// Transition functions
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
     f72:	7023      	strb	r3, [r4, #0]
	Serial.println(millis());
}

// Transition functions
void begin_transition() {
	in_transition = 1;
     f74:	7002      	strb	r2, [r0, #0]
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
     f76:	d00c      	beq.n	f92 <begin_transition()+0x72>
     f78:	d306      	bcc.n	f88 <begin_transition()+0x68>
     f7a:	2b02      	cmp	r3, #2
     f7c:	d102      	bne.n	f84 <begin_transition()+0x64>
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <begin_transition()+0x90>)
     f80:	2200      	movs	r2, #0
     f82:	701a      	strb	r2, [r3, #0]
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f84:	bcf0      	pop	{r4, r5, r6, r7}
     f86:	4770      	bx	lr
void begin_transition() {
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
     f88:	4b0a      	ldr	r3, [pc, #40]	; (fb4 <begin_transition()+0x94>)
     f8a:	2200      	movs	r2, #0
     f8c:	701a      	strb	r2, [r3, #0]
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f8e:	bcf0      	pop	{r4, r5, r6, r7}
     f90:	4770      	bx	lr
	in_transition = 1;
	transition_type = TransitionList[random8(ARRAY_SIZE(TransitionList))];
	transition_speed = random8(3, 8);
	switch (transition_type) {
		case BLENDING:		transition_ratio = 0;		break;
		case WIPEDOWN:		wipe_pos = ONE_SIDE - 1;	break;
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <begin_transition()+0x90>)
     f94:	224a      	movs	r2, #74	; 0x4a
     f96:	701a      	strb	r2, [r3, #0]
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}
     f98:	bcf0      	pop	{r4, r5, r6, r7}
     f9a:	4770      	bx	lr
     f9c:	1fff8784 	.word	0x1fff8784
     fa0:	1fff951c 	.word	0x1fff951c
     fa4:	1fff8740 	.word	0x1fff8740
     fa8:	1fff9e95 	.word	0x1fff9e95
     fac:	1fff952c 	.word	0x1fff952c
     fb0:	1fff955c 	.word	0x1fff955c
     fb4:	1fff8cae 	.word	0x1fff8cae

00000fb8 <LEDStruct::operator=(LEDStruct const&)>:
#ifndef LEDSTRUCT_H
#define LEDSTRUCT_H

//======== LED structure =========

struct LEDStruct {
     fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fba:	1cca      	adds	r2, r1, #3
     fbc:	4604      	mov	r4, r0
     fbe:	1cc3      	adds	r3, r0, #3
     fc0:	460d      	mov	r5, r1
     fc2:	f200 10c5 	addw	r0, r0, #453	; 0x1c5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
     fc6:	f812 1c03 	ldrb.w	r1, [r2, #-3]
     fca:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
     fce:	f812 1c02 	ldrb.w	r1, [r2, #-2]
     fd2:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
     fd6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
     fda:	f803 1c01 	strb.w	r1, [r3, #-1]
     fde:	3303      	adds	r3, #3
     fe0:	4298      	cmp	r0, r3
     fe2:	f102 0203 	add.w	r2, r2, #3
     fe6:	d1ee      	bne.n	fc6 <LEDStruct::operator=(LEDStruct const&)+0xe>
     fe8:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
     fec:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
     ff0:	f895 31c3 	ldrb.w	r3, [r5, #451]	; 0x1c3
     ff4:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
     ff8:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
     ffc:	f895 01c4 	ldrb.w	r0, [r5, #452]	; 0x1c4
    1000:	f895 11c5 	ldrb.w	r1, [r5, #453]	; 0x1c5
    1004:	f895 21c6 	ldrb.w	r2, [r5, #454]	; 0x1c6
    1008:	f884 21c6 	strb.w	r2, [r4, #454]	; 0x1c6
    100c:	f884 31c7 	strb.w	r3, [r4, #455]	; 0x1c7
    1010:	f884 01c4 	strb.w	r0, [r4, #452]	; 0x1c4
    1014:	f884 11c5 	strb.w	r1, [r4, #453]	; 0x1c5
    {
        memmove8( &(entries[0]), &(rhs[0]), sizeof( entries));
    }
    CRGBPalette16& operator=( const CRGBPalette16& rhs)
    {
        memmove8( &(entries[0]), &(rhs.entries[0]), sizeof( entries));
    1018:	2230      	movs	r2, #48	; 0x30
    101a:	f505 71e4 	add.w	r1, r5, #456	; 0x1c8
    101e:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
    1022:	f00e fac1 	bl	f5a8 <memmove>
    1026:	2230      	movs	r2, #48	; 0x30
    1028:	f505 71fc 	add.w	r1, r5, #504	; 0x1f8
    102c:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
    1030:	f00e faba 	bl	f5a8 <memmove>
    1034:	f895 3228 	ldrb.w	r3, [r5, #552]	; 0x228
    1038:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
    103c:	f895 3229 	ldrb.w	r3, [r5, #553]	; 0x229
    1040:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    1044:	f895 322a 	ldrb.w	r3, [r5, #554]	; 0x22a
    1048:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    104c:	f895 322b 	ldrb.w	r3, [r5, #555]	; 0x22b
    1050:	f884 322b 	strb.w	r3, [r4, #555]	; 0x22b
    1054:	f895 122c 	ldrb.w	r1, [r5, #556]	; 0x22c
    1058:	f895 222d 	ldrb.w	r2, [r5, #557]	; 0x22d
    105c:	f895 322e 	ldrb.w	r3, [r5, #558]	; 0x22e
    1060:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    1064:	f884 122c 	strb.w	r1, [r4, #556]	; 0x22c
    1068:	f884 222d 	strb.w	r2, [r4, #557]	; 0x22d
    106c:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    1070:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    1074:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    1078:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    107c:	f895 3231 	ldrb.w	r3, [r5, #561]	; 0x231
    1080:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
    1084:	f895 3232 	ldrb.w	r3, [r5, #562]	; 0x232
    1088:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
    108c:	f895 3233 	ldrb.w	r3, [r5, #563]	; 0x233
    1090:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
    1094:	f895 2235 	ldrb.w	r2, [r5, #565]	; 0x235
    1098:	f895 3236 	ldrb.w	r3, [r5, #566]	; 0x236
    109c:	f895 1234 	ldrb.w	r1, [r5, #564]	; 0x234
    10a0:	f884 1234 	strb.w	r1, [r4, #564]	; 0x234
    10a4:	f884 2235 	strb.w	r2, [r4, #565]	; 0x235
    10a8:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
    10ac:	f895 3237 	ldrb.w	r3, [r5, #567]	; 0x237
    10b0:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
    10b4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
    10b8:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    10bc:	f895 3239 	ldrb.w	r3, [r5, #569]	; 0x239
    10c0:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
    10c4:	f895 323a 	ldrb.w	r3, [r5, #570]	; 0x23a
    10c8:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
    10cc:	f205 223e 	addw	r2, r5, #574	; 0x23e
    10d0:	f204 233e 	addw	r3, r4, #574	; 0x23e
    10d4:	f204 207a 	addw	r0, r4, #634	; 0x27a
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    10d8:	f812 1c03 	ldrb.w	r1, [r2, #-3]
    10dc:	f803 1c03 	strb.w	r1, [r3, #-3]
        g = rhs.g;
    10e0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    10e4:	f803 1c02 	strb.w	r1, [r3, #-2]
        b = rhs.b;
    10e8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    10ec:	f803 1c01 	strb.w	r1, [r3, #-1]
    10f0:	3303      	adds	r3, #3
    10f2:	4298      	cmp	r0, r3
    10f4:	f102 0203 	add.w	r2, r2, #3
    10f8:	d1ee      	bne.n	10d8 <LEDStruct::operator=(LEDStruct const&)+0x120>
    10fa:	f895 3277 	ldrb.w	r3, [r5, #631]	; 0x277
    10fe:	f884 3277 	strb.w	r3, [r4, #631]	; 0x277
    1102:	f895 3278 	ldrb.w	r3, [r5, #632]	; 0x278
    1106:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
    110a:	f895 3279 	ldrb.w	r3, [r5, #633]	; 0x279
    110e:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    1112:	f895 327a 	ldrb.w	r3, [r5, #634]	; 0x27a
    1116:	f884 327a 	strb.w	r3, [r4, #634]	; 0x27a
    111a:	f895 327b 	ldrb.w	r3, [r5, #635]	; 0x27b
    111e:	f884 327b 	strb.w	r3, [r4, #635]	; 0x27b
    1122:	f895 327c 	ldrb.w	r3, [r5, #636]	; 0x27c
    1126:	f884 327c 	strb.w	r3, [r4, #636]	; 0x27c
    112a:	f895 327d 	ldrb.w	r3, [r5, #637]	; 0x27d
    112e:	f884 327d 	strb.w	r3, [r4, #637]	; 0x27d
    1132:	f895 327e 	ldrb.w	r3, [r5, #638]	; 0x27e
    1136:	f884 327e 	strb.w	r3, [r4, #638]	; 0x27e
    113a:	f895 327f 	ldrb.w	r3, [r5, #639]	; 0x27f
    113e:	f884 327f 	strb.w	r3, [r4, #639]	; 0x27f
    1142:	f205 227f 	addw	r2, r5, #639	; 0x27f
    1146:	f504 7320 	add.w	r3, r4, #640	; 0x280
    114a:	f204 20cb 	addw	r0, r4, #715	; 0x2cb
    114e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1152:	f803 1b01 	strb.w	r1, [r3], #1
    1156:	4283      	cmp	r3, r0
    1158:	d1f9      	bne.n	114e <LEDStruct::operator=(LEDStruct const&)+0x196>
    115a:	f205 22ca 	addw	r2, r5, #714	; 0x2ca
    115e:	f204 3016 	addw	r0, r4, #790	; 0x316
    1162:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1166:	f803 1b01 	strb.w	r1, [r3], #1
    116a:	4283      	cmp	r3, r0
    116c:	d1f9      	bne.n	1162 <LEDStruct::operator=(LEDStruct const&)+0x1aa>
    116e:	f895 3316 	ldrb.w	r3, [r5, #790]	; 0x316
    1172:	f884 3316 	strb.w	r3, [r4, #790]	; 0x316
    1176:	f895 3317 	ldrb.w	r3, [r5, #791]	; 0x317
    117a:	f884 3317 	strb.w	r3, [r4, #791]	; 0x317
    117e:	f895 2318 	ldrb.w	r2, [r5, #792]	; 0x318
    1182:	f895 3319 	ldrb.w	r3, [r5, #793]	; 0x319
    1186:	f884 3319 	strb.w	r3, [r4, #793]	; 0x319
    118a:	f884 2318 	strb.w	r2, [r4, #792]	; 0x318
    118e:	f895 331a 	ldrb.w	r3, [r5, #794]	; 0x31a
    1192:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
    1196:	f895 331b 	ldrb.w	r3, [r5, #795]	; 0x31b
    119a:	f884 331b 	strb.w	r3, [r4, #795]	; 0x31b
    119e:	f8b5 131c 	ldrh.w	r1, [r5, #796]	; 0x31c
    11a2:	f8b5 231e 	ldrh.w	r2, [r5, #798]	; 0x31e
    11a6:	f8b5 3320 	ldrh.w	r3, [r5, #800]	; 0x320
    11aa:	f8a4 3320 	strh.w	r3, [r4, #800]	; 0x320
    11ae:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    11b2:	f8a4 231e 	strh.w	r2, [r4, #798]	; 0x31e
    11b6:	f895 3322 	ldrb.w	r3, [r5, #802]	; 0x322
    11ba:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
    11be:	f895 3323 	ldrb.w	r3, [r5, #803]	; 0x323
    11c2:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
    11c6:	f895 3324 	ldrb.w	r3, [r5, #804]	; 0x324
    11ca:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
    11ce:	f895 3325 	ldrb.w	r3, [r5, #805]	; 0x325
    11d2:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
    11d6:	f895 3326 	ldrb.w	r3, [r5, #806]	; 0x326
    11da:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
    11de:	f895 3327 	ldrb.w	r3, [r5, #807]	; 0x327
    11e2:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
    11e6:	f8b5 3328 	ldrh.w	r3, [r5, #808]	; 0x328
    11ea:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    11ee:	f8b5 032a 	ldrh.w	r0, [r5, #810]	; 0x32a
    11f2:	f8b5 132c 	ldrh.w	r1, [r5, #812]	; 0x32c
    11f6:	f8b5 232e 	ldrh.w	r2, [r5, #814]	; 0x32e
    11fa:	f8b5 3330 	ldrh.w	r3, [r5, #816]	; 0x330
    11fe:	f8b5 7332 	ldrh.w	r7, [r5, #818]	; 0x332
    1202:	f8b5 6334 	ldrh.w	r6, [r5, #820]	; 0x334
    1206:	f8a4 032a 	strh.w	r0, [r4, #810]	; 0x32a
    120a:	f8b5 0336 	ldrh.w	r0, [r5, #822]	; 0x336
    120e:	f8a4 132c 	strh.w	r1, [r4, #812]	; 0x32c
    1212:	f8b5 1338 	ldrh.w	r1, [r5, #824]	; 0x338
    1216:	f8a4 232e 	strh.w	r2, [r4, #814]	; 0x32e
    121a:	f8b5 233a 	ldrh.w	r2, [r5, #826]	; 0x33a
    121e:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    1222:	f8b5 333c 	ldrh.w	r3, [r5, #828]	; 0x33c
    1226:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    122a:	f8a4 1338 	strh.w	r1, [r4, #824]	; 0x338
    122e:	f8a4 233a 	strh.w	r2, [r4, #826]	; 0x33a
    1232:	f8a4 7332 	strh.w	r7, [r4, #818]	; 0x332
    1236:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
    123a:	f8a4 0336 	strh.w	r0, [r4, #822]	; 0x336
    123e:	f895 333e 	ldrb.w	r3, [r5, #830]	; 0x33e
    1242:	f884 333e 	strb.w	r3, [r4, #830]	; 0x33e
    1246:	f895 333f 	ldrb.w	r3, [r5, #831]	; 0x33f
    124a:	f884 333f 	strb.w	r3, [r4, #831]	; 0x33f
    124e:	f895 3340 	ldrb.w	r3, [r5, #832]	; 0x340
    1252:	f884 3340 	strb.w	r3, [r4, #832]	; 0x340
    1256:	f895 3341 	ldrb.w	r3, [r5, #833]	; 0x341
    125a:	f884 3341 	strb.w	r3, [r4, #833]	; 0x341
    125e:	f895 3342 	ldrb.w	r3, [r5, #834]	; 0x342
    1262:	f884 3342 	strb.w	r3, [r4, #834]	; 0x342
    1266:	f895 3343 	ldrb.w	r3, [r5, #835]	; 0x343
    126a:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
    126e:	f895 3344 	ldrb.w	r3, [r5, #836]	; 0x344
    1272:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
    1276:	f895 3345 	ldrb.w	r3, [r5, #837]	; 0x345
    127a:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
    127e:	f895 3346 	ldrb.w	r3, [r5, #838]	; 0x346
    1282:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    1286:	f895 3347 	ldrb.w	r3, [r5, #839]	; 0x347
    128a:	f884 3347 	strb.w	r3, [r4, #839]	; 0x347
    128e:	f895 3348 	ldrb.w	r3, [r5, #840]	; 0x348
    1292:	f884 3348 	strb.w	r3, [r4, #840]	; 0x348
    1296:	f895 3349 	ldrb.w	r3, [r5, #841]	; 0x349
    129a:	f884 3349 	strb.w	r3, [r4, #841]	; 0x349
    129e:	f895 334a 	ldrb.w	r3, [r5, #842]	; 0x34a
    12a2:	f884 334a 	strb.w	r3, [r4, #842]	; 0x34a
    12a6:	f895 334b 	ldrb.w	r3, [r5, #843]	; 0x34b
    12aa:	f884 334b 	strb.w	r3, [r4, #843]	; 0x34b
    12ae:	f895 334c 	ldrb.w	r3, [r5, #844]	; 0x34c
    12b2:	f884 334c 	strb.w	r3, [r4, #844]	; 0x34c
    12b6:	f895 334d 	ldrb.w	r3, [r5, #845]	; 0x34d
    12ba:	f884 334d 	strb.w	r3, [r4, #845]	; 0x34d
    12be:	f895 334e 	ldrb.w	r3, [r5, #846]	; 0x34e
    12c2:	f884 334e 	strb.w	r3, [r4, #846]	; 0x34e
    12c6:	f895 334f 	ldrb.w	r3, [r5, #847]	; 0x34f
    12ca:	f884 334f 	strb.w	r3, [r4, #847]	; 0x34f
    12ce:	f895 3350 	ldrb.w	r3, [r5, #848]	; 0x350
    12d2:	f884 3350 	strb.w	r3, [r4, #848]	; 0x350
    12d6:	f895 3351 	ldrb.w	r3, [r5, #849]	; 0x351
    12da:	f884 3351 	strb.w	r3, [r4, #849]	; 0x351
    12de:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    12e2:	f884 3352 	strb.w	r3, [r4, #850]	; 0x352
    12e6:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    12ea:	f884 3353 	strb.w	r3, [r4, #851]	; 0x353
    12ee:	f895 1354 	ldrb.w	r1, [r5, #852]	; 0x354
    12f2:	f8d5 2358 	ldr.w	r2, [r5, #856]	; 0x358
    12f6:	f895 335c 	ldrb.w	r3, [r5, #860]	; 0x35c
    12fa:	f884 335c 	strb.w	r3, [r4, #860]	; 0x35c
    12fe:	f884 1354 	strb.w	r1, [r4, #852]	; 0x354
    1302:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
    1306:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
    130a:	f884 335d 	strb.w	r3, [r4, #861]	; 0x35d
    130e:	f504 7258 	add.w	r2, r4, #864	; 0x360
    1312:	f505 7157 	add.w	r1, r5, #860	; 0x35c
    1316:	f504 638a 	add.w	r3, r4, #1104	; 0x450
    131a:	f851 0f04 	ldr.w	r0, [r1, #4]!
    131e:	f842 0b04 	str.w	r0, [r2], #4
    1322:	4293      	cmp	r3, r2
    1324:	d1f9      	bne.n	131a <LEDStruct::operator=(LEDStruct const&)+0x362>
    1326:	f205 424c 	addw	r2, r5, #1100	; 0x44c
    132a:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
    132e:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1332:	f843 1b04 	str.w	r1, [r3], #4
    1336:	4283      	cmp	r3, r0
    1338:	d1f9      	bne.n	132e <LEDStruct::operator=(LEDStruct const&)+0x376>
    133a:	f205 523f 	addw	r2, r5, #1343	; 0x53f
    133e:	f204 507c 	addw	r0, r4, #1404	; 0x57c
    1342:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1346:	f803 1b01 	strb.w	r1, [r3], #1
    134a:	4283      	cmp	r3, r0
    134c:	d1f9      	bne.n	1342 <LEDStruct::operator=(LEDStruct const&)+0x38a>
    134e:	f505 61af 	add.w	r1, r5, #1400	; 0x578
    1352:	f204 626c 	addw	r2, r4, #1644	; 0x66c
    1356:	f851 0f04 	ldr.w	r0, [r1, #4]!
    135a:	f843 0b04 	str.w	r0, [r3], #4
    135e:	429a      	cmp	r2, r3
    1360:	d1f9      	bne.n	1356 <LEDStruct::operator=(LEDStruct const&)+0x39e>
    1362:	4613      	mov	r3, r2
    1364:	f204 705c 	addw	r0, r4, #1884	; 0x75c
    1368:	f505 62cd 	add.w	r2, r5, #1640	; 0x668
    136c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1370:	f843 1b04 	str.w	r1, [r3], #4
    1374:	4298      	cmp	r0, r3
    1376:	d1f9      	bne.n	136c <LEDStruct::operator=(LEDStruct const&)+0x3b4>
    1378:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    137c:	f884 375c 	strb.w	r3, [r4, #1884]	; 0x75c
    1380:	f895 375d 	ldrb.w	r3, [r5, #1885]	; 0x75d
    1384:	f884 375d 	strb.w	r3, [r4, #1885]	; 0x75d
    1388:	f895 375e 	ldrb.w	r3, [r5, #1886]	; 0x75e
    138c:	f884 375e 	strb.w	r3, [r4, #1886]	; 0x75e
    1390:	f8b5 1760 	ldrh.w	r1, [r5, #1888]	; 0x760
    1394:	f8b5 2762 	ldrh.w	r2, [r5, #1890]	; 0x762
    1398:	f8b5 3764 	ldrh.w	r3, [r5, #1892]	; 0x764
    139c:	f8a4 3764 	strh.w	r3, [r4, #1892]	; 0x764
    13a0:	f8a4 1760 	strh.w	r1, [r4, #1888]	; 0x760
    13a4:	f8a4 2762 	strh.w	r2, [r4, #1890]	; 0x762
    13a8:	f895 3766 	ldrb.w	r3, [r5, #1894]	; 0x766
    13ac:	f884 3766 	strb.w	r3, [r4, #1894]	; 0x766
    13b0:	f895 3767 	ldrb.w	r3, [r5, #1895]	; 0x767
    13b4:	f884 3767 	strb.w	r3, [r4, #1895]	; 0x767
    13b8:	f895 3768 	ldrb.w	r3, [r5, #1896]	; 0x768
    13bc:	f884 3768 	strb.w	r3, [r4, #1896]	; 0x768
    13c0:	f895 3769 	ldrb.w	r3, [r5, #1897]	; 0x769
    13c4:	f884 3769 	strb.w	r3, [r4, #1897]	; 0x769
    13c8:	f895 376a 	ldrb.w	r3, [r5, #1898]	; 0x76a
    13cc:	f884 376a 	strb.w	r3, [r4, #1898]	; 0x76a
    13d0:	f505 61ed 	add.w	r1, r5, #1896	; 0x768
    13d4:	f204 736c 	addw	r3, r4, #1900	; 0x76c
    13d8:	f204 728c 	addw	r2, r4, #1932	; 0x78c
    13dc:	f851 0f04 	ldr.w	r0, [r1, #4]!
    13e0:	f843 0b04 	str.w	r0, [r3], #4
    13e4:	429a      	cmp	r2, r3
    13e6:	d1f9      	bne.n	13dc <LEDStruct::operator=(LEDStruct const&)+0x424>
    13e8:	f505 61f1 	add.w	r1, r5, #1928	; 0x788
    13ec:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
    13f0:	f851 0f04 	ldr.w	r0, [r1, #4]!
    13f4:	f842 0b04 	str.w	r0, [r2], #4
    13f8:	4293      	cmp	r3, r2
    13fa:	d1f9      	bne.n	13f0 <LEDStruct::operator=(LEDStruct const&)+0x438>
    13fc:	f505 62f5 	add.w	r2, r5, #1960	; 0x7a8
    1400:	f204 70cc 	addw	r0, r4, #1996	; 0x7cc
    1404:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1408:	f843 1b04 	str.w	r1, [r3], #4
    140c:	4283      	cmp	r3, r0
    140e:	d1f9      	bne.n	1404 <LEDStruct::operator=(LEDStruct const&)+0x44c>
    1410:	f505 62f9 	add.w	r2, r5, #1992	; 0x7c8
    1414:	f204 70ec 	addw	r0, r4, #2028	; 0x7ec
    1418:	f852 1f04 	ldr.w	r1, [r2, #4]!
    141c:	f843 1b04 	str.w	r1, [r3], #4
    1420:	4283      	cmp	r3, r0
    1422:	d1f9      	bne.n	1418 <LEDStruct::operator=(LEDStruct const&)+0x460>
    1424:	f505 62fd 	add.w	r2, r5, #2024	; 0x7e8
    1428:	f604 000c 	addw	r0, r4, #2060	; 0x80c
    142c:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1430:	f843 1b04 	str.w	r1, [r3], #4
    1434:	4283      	cmp	r3, r0
    1436:	d1f9      	bne.n	142c <LEDStruct::operator=(LEDStruct const&)+0x474>
    1438:	f605 0208 	addw	r2, r5, #2056	; 0x808
    143c:	f604 002c 	addw	r0, r4, #2092	; 0x82c
    1440:	f852 1f04 	ldr.w	r1, [r2, #4]!
    1444:	f843 1b04 	str.w	r1, [r3], #4
    1448:	4283      	cmp	r3, r0
    144a:	d1f9      	bne.n	1440 <LEDStruct::operator=(LEDStruct const&)+0x488>
    144c:	f8b5 382c 	ldrh.w	r3, [r5, #2092]	; 0x82c
    1450:	f8a4 382c 	strh.w	r3, [r4, #2092]	; 0x82c
    1454:	f895 382e 	ldrb.w	r3, [r5, #2094]	; 0x82e
    1458:	f884 382e 	strb.w	r3, [r4, #2094]	; 0x82e
    145c:	f8b5 1830 	ldrh.w	r1, [r5, #2096]	; 0x830
    1460:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    1464:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
    1468:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
    146c:	f8a4 1830 	strh.w	r1, [r4, #2096]	; 0x830
    1470:	f8c4 2834 	str.w	r2, [r4, #2100]	; 0x834
    1474:	f895 383c 	ldrb.w	r3, [r5, #2108]	; 0x83c
    1478:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
    147c:	f895 383d 	ldrb.w	r3, [r5, #2109]	; 0x83d
    1480:	f884 383d 	strb.w	r3, [r4, #2109]	; 0x83d
    1484:	f895 383e 	ldrb.w	r3, [r5, #2110]	; 0x83e
    1488:	f884 383e 	strb.w	r3, [r4, #2110]	; 0x83e
    148c:	f895 383f 	ldrb.w	r3, [r5, #2111]	; 0x83f
    1490:	f884 383f 	strb.w	r3, [r4, #2111]	; 0x83f
    1494:	f895 3840 	ldrb.w	r3, [r5, #2112]	; 0x840
    1498:	f884 3840 	strb.w	r3, [r4, #2112]	; 0x840
    149c:	f895 0841 	ldrb.w	r0, [r5, #2113]	; 0x841
    14a0:	f8d5 3848 	ldr.w	r3, [r5, #2120]	; 0x848
    14a4:	f895 1842 	ldrb.w	r1, [r5, #2114]	; 0x842
    14a8:	f8d5 2844 	ldr.w	r2, [r5, #2116]	; 0x844
    14ac:	f8c4 2844 	str.w	r2, [r4, #2116]	; 0x844
    14b0:	f884 0841 	strb.w	r0, [r4, #2113]	; 0x841
    14b4:	f884 1842 	strb.w	r1, [r4, #2114]	; 0x842
    14b8:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
    14bc:	f895 384c 	ldrb.w	r3, [r5, #2124]	; 0x84c
    14c0:	f884 384c 	strb.w	r3, [r4, #2124]	; 0x84c
    14c4:	f895 384d 	ldrb.w	r3, [r5, #2125]	; 0x84d
    14c8:	f884 384d 	strb.w	r3, [r4, #2125]	; 0x84d
    14cc:	f895 384e 	ldrb.w	r3, [r5, #2126]	; 0x84e
    14d0:	f884 384e 	strb.w	r3, [r4, #2126]	; 0x84e
    14d4:	f895 384f 	ldrb.w	r3, [r5, #2127]	; 0x84f
    14d8:	f884 384f 	strb.w	r3, [r4, #2127]	; 0x84f
    14dc:	f895 3850 	ldrb.w	r3, [r5, #2128]	; 0x850
    14e0:	f884 3850 	strb.w	r3, [r4, #2128]	; 0x850
    14e4:	f895 3851 	ldrb.w	r3, [r5, #2129]	; 0x851
    14e8:	f884 3851 	strb.w	r3, [r4, #2129]	; 0x851
    14ec:	f895 3852 	ldrb.w	r3, [r5, #2130]	; 0x852
    14f0:	f884 3852 	strb.w	r3, [r4, #2130]	; 0x852
    14f4:	f895 3853 	ldrb.w	r3, [r5, #2131]	; 0x853
    14f8:	f884 3853 	strb.w	r3, [r4, #2131]	; 0x853
    14fc:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
    1500:	f884 3854 	strb.w	r3, [r4, #2132]	; 0x854
    1504:	f895 3855 	ldrb.w	r3, [r5, #2133]	; 0x855
    1508:	f884 3855 	strb.w	r3, [r4, #2133]	; 0x855
    150c:	f895 3856 	ldrb.w	r3, [r5, #2134]	; 0x856
    1510:	f884 3856 	strb.w	r3, [r4, #2134]	; 0x856
    1514:	f895 3857 	ldrb.w	r3, [r5, #2135]	; 0x857
    1518:	f884 3857 	strb.w	r3, [r4, #2135]	; 0x857
    151c:	f895 3858 	ldrb.w	r3, [r5, #2136]	; 0x858
    1520:	f884 3858 	strb.w	r3, [r4, #2136]	; 0x858
    1524:	f895 3859 	ldrb.w	r3, [r5, #2137]	; 0x859
    1528:	f884 3859 	strb.w	r3, [r4, #2137]	; 0x859
    152c:	f895 385a 	ldrb.w	r3, [r5, #2138]	; 0x85a
    1530:	f884 385a 	strb.w	r3, [r4, #2138]	; 0x85a
    1534:	f895 385b 	ldrb.w	r3, [r5, #2139]	; 0x85b
    1538:	f884 385b 	strb.w	r3, [r4, #2139]	; 0x85b
    153c:	4620      	mov	r0, r4
    153e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001540 <finish_transition()>:

void finish_transition() {
    1540:	b530      	push	{r4, r5, lr}
	in_transition = 0;
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    1542:	4d1d      	ldr	r5, [pc, #116]	; (15b8 <finish_transition()+0x78>)
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1544:	4c1d      	ldr	r4, [pc, #116]	; (15bc <finish_transition()+0x7c>)
		case WIPEUP:		wipe_pos = 0;				break;
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
    1546:	b083      	sub	sp, #12
	in_transition = 0;
    1548:	2300      	movs	r3, #0
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    154a:	4628      	mov	r0, r5
    154c:	aa01      	add	r2, sp, #4
    154e:	2196      	movs	r1, #150	; 0x96
		//case COLORFADE:	color_up = 1; transition_ratio = 0; colorfade_hue = CHSV(random8(), 255, 255); hsv2rgb_rainbow(colorfade_hue, colorfade_rgb);  break;
	}
}

void finish_transition() {
	in_transition = 0;
    1550:	7023      	strb	r3, [r4, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1552:	f88d 3004 	strb.w	r3, [sp, #4]
    1556:	f88d 3005 	strb.w	r3, [sp, #5]
    155a:	f88d 3006 	strb.w	r3, [sp, #6]
	fill_solid(curr_leds.led_data, NUM_LEDS, CRGB::Black);
    155e:	f00a fa73 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds = next_leds;
    1562:	4628      	mov	r0, r5
    1564:	4916      	ldr	r1, [pc, #88]	; (15c0 <finish_transition()+0x80>)
    1566:	f7ff fd27 	bl	fb8 <LEDStruct::operator=(LEDStruct const&)>
	if (curr_leds.use_overlay) { curr_over_leds = next_over_leds; curr_over_leds.array_type = CURR_OVERLAY; }
    156a:	f895 31c7 	ldrb.w	r3, [r5, #455]	; 0x1c7
    156e:	b13b      	cbz	r3, 1580 <finish_transition()+0x40>
    1570:	4c14      	ldr	r4, [pc, #80]	; (15c4 <finish_transition()+0x84>)
    1572:	4915      	ldr	r1, [pc, #84]	; (15c8 <finish_transition()+0x88>)
    1574:	4620      	mov	r0, r4
    1576:	f7ff fd1f 	bl	fb8 <LEDStruct::operator=(LEDStruct const&)>
    157a:	2302      	movs	r3, #2
    157c:	f884 31c6 	strb.w	r3, [r4, #454]	; 0x1c6
    1580:	2400      	movs	r4, #0
	fill_solid(next_leds.led_data, NUM_LEDS, CRGB::Black);
    1582:	aa01      	add	r2, sp, #4
    1584:	2196      	movs	r1, #150	; 0x96
    1586:	480e      	ldr	r0, [pc, #56]	; (15c0 <finish_transition()+0x80>)
    1588:	f88d 4004 	strb.w	r4, [sp, #4]
    158c:	f88d 4005 	strb.w	r4, [sp, #5]
    1590:	f88d 4006 	strb.w	r4, [sp, #6]
    1594:	f00a fa58 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	fill_solid(next_over_leds.led_data, NUM_LEDS, CRGB::Black);
    1598:	aa01      	add	r2, sp, #4
    159a:	2196      	movs	r1, #150	; 0x96
    159c:	480a      	ldr	r0, [pc, #40]	; (15c8 <finish_transition()+0x88>)
    159e:	f88d 4004 	strb.w	r4, [sp, #4]
    15a2:	f88d 4005 	strb.w	r4, [sp, #5]
    15a6:	f88d 4006 	strb.w	r4, [sp, #6]
    15aa:	f00a fa4d 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	curr_leds.array_type = CURRENT;
    15ae:	f885 41c6 	strb.w	r4, [r5, #454]	; 0x1c6
}
    15b2:	b003      	add	sp, #12
    15b4:	bd30      	pop	{r4, r5, pc}
    15b6:	bf00      	nop
    15b8:	1fffa704 	.word	0x1fffa704
    15bc:	1fff951c 	.word	0x1fff951c
    15c0:	1fff8cb0 	.word	0x1fff8cb0
    15c4:	1fff9634 	.word	0x1fff9634
    15c8:	1fff9ea8 	.word	0x1fff9ea8

000015cc <blending()>:

void blending() {
    15cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    15d0:	4d2f      	ldr	r5, [pc, #188]	; (1690 <blending()+0xc4>)
    15d2:	4e30      	ldr	r6, [pc, #192]	; (1694 <blending()+0xc8>)
    15d4:	4c30      	ldr	r4, [pc, #192]	; (1698 <blending()+0xcc>)
    15d6:	4f31      	ldr	r7, [pc, #196]	; (169c <blending()+0xd0>)
    15d8:	b085      	sub	sp, #20
    15da:	f505 78e1 	add.w	r8, r5, #450	; 0x1c2
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
    15de:	4632      	mov	r2, r6
    15e0:	4629      	mov	r1, r5
    15e2:	783b      	ldrb	r3, [r7, #0]
    15e4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 169c <blending()+0xd0>
    15e8:	a803      	add	r0, sp, #12
    15ea:	3503      	adds	r5, #3
    15ec:	f00a fb1e 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    15f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    15f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    15fc:	7021      	strb	r1, [r4, #0]
    15fe:	4545      	cmp	r5, r8
        g = rhs.g;
    1600:	7062      	strb	r2, [r4, #1]
        b = rhs.b;
    1602:	70a3      	strb	r3, [r4, #2]
    1604:	f106 0603 	add.w	r6, r6, #3
    1608:	f104 0403 	add.w	r4, r4, #3
    160c:	d1e7      	bne.n	15de <blending()+0x12>
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    160e:	4e24      	ldr	r6, [pc, #144]	; (16a0 <blending()+0xd4>)
    1610:	6833      	ldr	r3, [r6, #0]
    1612:	07db      	lsls	r3, r3, #31
    1614:	d51f      	bpl.n	1656 <blending()+0x8a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1616:	4d23      	ldr	r5, [pc, #140]	; (16a4 <blending()+0xd8>)
    1618:	4c23      	ldr	r4, [pc, #140]	; (16a8 <blending()+0xdc>)
    161a:	682b      	ldr	r3, [r5, #0]
    161c:	9303      	str	r3, [sp, #12]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    161e:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1622:	9b03      	ldr	r3, [sp, #12]
    1624:	1a5b      	subs	r3, r3, r1
    1626:	4293      	cmp	r3, r2
    1628:	d30c      	bcc.n	1644 <blending()+0x78>
    162a:	783b      	ldrb	r3, [r7, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    162c:	682a      	ldr	r2, [r5, #0]
    162e:	9202      	str	r2, [sp, #8]
    1630:	3301      	adds	r3, #1
	return ret;
    1632:	9a02      	ldr	r2, [sp, #8]
    1634:	6022      	str	r2, [r4, #0]
    1636:	b2db      	uxtb	r3, r3
    1638:	703b      	strb	r3, [r7, #0]
	if (transition_ratio == 255) {
    163a:	2bff      	cmp	r3, #255	; 0xff
    163c:	d006      	beq.n	164c <blending()+0x80>
		finish_transition();
	}
}
    163e:	b005      	add	sp, #20
    1640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1644:	f899 3000 	ldrb.w	r3, [r9]
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
	if (transition_ratio == 255) {
    1648:	2bff      	cmp	r3, #255	; 0xff
    164a:	d1f8      	bne.n	163e <blending()+0x72>
		finish_transition();
    164c:	f7ff ff78 	bl	1540 <finish_transition()>
	}
}
    1650:	b005      	add	sp, #20
    1652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	curr_leds.array_type = CURRENT;
}

void blending() {
	for (uint16_t i = 0; i < NUM_LEDS; i++) { master_leds[i] = blend(curr_leds.led_data[i], next_leds.led_data[i], transition_ratio); }
	EVERY_N_MILLIS(transition_speed * 4) { transition_ratio++;	}
    1656:	4630      	mov	r0, r6
    1658:	f00b fa32 	bl	cac0 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    165c:	4d11      	ldr	r5, [pc, #68]	; (16a4 <blending()+0xd8>)
    165e:	b950      	cbnz	r0, 1676 <blending()+0xaa>
    1660:	4c11      	ldr	r4, [pc, #68]	; (16a8 <blending()+0xdc>)
    1662:	682b      	ldr	r3, [r5, #0]
    1664:	9303      	str	r3, [sp, #12]
    1666:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    166a:	9b03      	ldr	r3, [sp, #12]
    166c:	1a5b      	subs	r3, r3, r1
    166e:	4293      	cmp	r3, r2
    1670:	d2db      	bcs.n	162a <blending()+0x5e>
    1672:	783b      	ldrb	r3, [r7, #0]
    1674:	e7e1      	b.n	163a <blending()+0x6e>
    1676:	4b0d      	ldr	r3, [pc, #52]	; (16ac <blending()+0xe0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1678:	682a      	ldr	r2, [r5, #0]
    167a:	781b      	ldrb	r3, [r3, #0]
    167c:	4c0a      	ldr	r4, [pc, #40]	; (16a8 <blending()+0xdc>)
    167e:	9201      	str	r2, [sp, #4]
	return ret;
    1680:	9a01      	ldr	r2, [sp, #4]
    1682:	6022      	str	r2, [r4, #0]
    1684:	009b      	lsls	r3, r3, #2
    1686:	4630      	mov	r0, r6
    1688:	6063      	str	r3, [r4, #4]
    168a:	f00b fa1f 	bl	cacc <__cxa_guard_release>
    168e:	e7e8      	b.n	1662 <blending()+0x96>
    1690:	1fffa704 	.word	0x1fffa704
    1694:	1fff8cb0 	.word	0x1fff8cb0
    1698:	1fffaf60 	.word	0x1fffaf60
    169c:	1fff8cae 	.word	0x1fff8cae
    16a0:	1fff9618 	.word	0x1fff9618
    16a4:	1fffb1a0 	.word	0x1fffb1a0
    16a8:	1fff9620 	.word	0x1fff9620
    16ac:	1fff9e95 	.word	0x1fff9e95

000016b0 <wipedown()>:
		finish_transition();
	}
}


void wipedown() {
    16b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16b4:	4e94      	ldr	r6, [pc, #592]	; (1908 <wipedown()+0x258>)
    16b6:	f896 c000 	ldrb.w	ip, [r6]
    16ba:	fa1f f38c 	uxth.w	r3, ip
		finish_transition();
	}
}


void wipedown() {
    16be:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    16c0:	2b00      	cmp	r3, #0
    16c2:	f000 811e 	beq.w	1902 <wipedown()+0x252>
    16c6:	f103 3bff 	add.w	fp, r3, #4294967295
    16ca:	fa1f fb8b 	uxth.w	fp, fp
    16ce:	488f      	ldr	r0, [pc, #572]	; (190c <wipedown()+0x25c>)
    16d0:	498f      	ldr	r1, [pc, #572]	; (1910 <wipedown()+0x260>)
    16d2:	f10b 0b01 	add.w	fp, fp, #1
    16d6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    16da:	4483      	add	fp, r0
    16dc:	4602      	mov	r2, r0
    16de:	460d      	mov	r5, r1
    16e0:	460c      	mov	r4, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16e2:	7817      	ldrb	r7, [r2, #0]
        g = rhs.g;
    16e4:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    16e8:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    16ec:	7027      	strb	r7, [r4, #0]
    16ee:	3203      	adds	r2, #3
    16f0:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    16f4:	f890 e1c0 	ldrb.w	lr, [r0, #448]	; 0x1c0
        b = rhs.b;
    16f8:	f890 71c1 	ldrb.w	r7, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    16fc:	f884 a001 	strb.w	sl, [r4, #1]
    1700:	455a      	cmp	r2, fp
        b = rhs.b;
    1702:	f884 9002 	strb.w	r9, [r4, #2]
    1706:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    170a:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    170e:	f881 e1c0 	strb.w	lr, [r1, #448]	; 0x1c0
        b = rhs.b;
    1712:	f881 71c1 	strb.w	r7, [r1, #449]	; 0x1c1
    1716:	f104 0403 	add.w	r4, r4, #3
    171a:	f1a1 0103 	sub.w	r1, r1, #3
    171e:	d1e0      	bne.n	16e2 <wipedown()+0x32>
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1720:	2b4a      	cmp	r3, #74	; 0x4a
    1722:	d827      	bhi.n	1774 <wipedown()+0xc4>
    1724:	487b      	ldr	r0, [pc, #492]	; (1914 <wipedown()+0x264>)
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
    1726:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    172a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    172e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1732:	eb00 0801 	add.w	r8, r0, r1
    1736:	eb00 0e02 	add.w	lr, r0, r2
void wipedown() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = curr_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = curr_leds.led_data[NUM_LEDS -1 - i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    173a:	3301      	adds	r3, #1
    173c:	186f      	adds	r7, r5, r1
    173e:	f810 b001 	ldrb.w	fp, [r0, r1]
    1742:	f805 b001 	strb.w	fp, [r5, r1]
    1746:	18ac      	adds	r4, r5, r2
    1748:	b29b      	uxth	r3, r3
        g = rhs.g;
    174a:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    174e:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1752:	f89e b001 	ldrb.w	fp, [lr, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1756:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    175a:	f89e 1002 	ldrb.w	r1, [lr, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    175e:	f887 a001 	strb.w	sl, [r7, #1]
    1762:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    1764:	f887 9002 	strb.w	r9, [r7, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1768:	f805 8002 	strb.w	r8, [r5, r2]
        g = rhs.g;
    176c:	f884 b001 	strb.w	fp, [r4, #1]
        b = rhs.b;
    1770:	70a1      	strb	r1, [r4, #2]
    1772:	d1d8      	bne.n	1726 <wipedown()+0x76>
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1774:	f10c 3aff 	add.w	sl, ip, #4294967295
    1778:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    177c:	2480      	movs	r4, #128	; 0x80
    177e:	eb05 0b0a 	add.w	fp, r5, sl
    1782:	4659      	mov	r1, fp
    1784:	4623      	mov	r3, r4
    1786:	a803      	add	r0, sp, #12
    1788:	aa02      	add	r2, sp, #8
    178a:	2700      	movs	r7, #0
    178c:	f88d 4009 	strb.w	r4, [sp, #9]
    1790:	f88d 400a 	strb.w	r4, [sp, #10]
    1794:	f88d 7008 	strb.w	r7, [sp, #8]
    1798:	f00a fa48 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    179c:	f896 8000 	ldrb.w	r8, [r6]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17a0:	f89d 300c 	ldrb.w	r3, [sp, #12]
        g = rhs.g;
    17a4:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    17a8:	f89d 000e 	ldrb.w	r0, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17ac:	f805 300a 	strb.w	r3, [r5, sl]
    17b0:	f1c8 0896 	rsb	r8, r8, #150	; 0x96
    17b4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    17b8:	eb05 0908 	add.w	r9, r5, r8
    17bc:	4649      	mov	r1, r9
    17be:	4623      	mov	r3, r4
        g = rhs.g;
    17c0:	f88b 2001 	strb.w	r2, [fp, #1]
        b = rhs.b;
    17c4:	f88b 0002 	strb.w	r0, [fp, #2]
    17c8:	aa02      	add	r2, sp, #8
    17ca:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    17cc:	f88d 7008 	strb.w	r7, [sp, #8]
    17d0:	f88d 4009 	strb.w	r4, [sp, #9]
    17d4:	f88d 400a 	strb.w	r4, [sp, #10]
    17d8:	f00a fa28 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>

	master_leds[wipe_pos]				 = CRGB::White;
    17dc:	7832      	ldrb	r2, [r6, #0]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    17de:	f89d 100c 	ldrb.w	r1, [sp, #12]
    17e2:	f805 1008 	strb.w	r1, [r5, r8]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    17e6:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
        g = rhs.g;
    17ea:	f89d 000d 	ldrb.w	r0, [sp, #13]
    17ee:	f889 0001 	strb.w	r0, [r9, #1]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    17f2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    17f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    17fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    17fe:	f889 3002 	strb.w	r3, [r9, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1802:	eb05 0e0c 	add.w	lr, r5, ip
    1806:	1868      	adds	r0, r5, r1
    1808:	23ff      	movs	r3, #255	; 0xff

	if (wipe_pos < ONE_SIDE - 1) {
    180a:	2a49      	cmp	r2, #73	; 0x49
    180c:	f805 300c 	strb.w	r3, [r5, ip]
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
		master_leds[j]				  = next_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = next_leds.led_data[NUM_LEDS -1 - j];
	}

	master_leds[wipe_pos - 1] = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1810:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 1910 <wipedown()+0x260>
        g = (colorcode >>  8) & 0xFF;
    1814:	f88e 3001 	strb.w	r3, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1818:	f88e 3002 	strb.w	r3, [lr, #2]
	master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    181c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1908 <wipedown()+0x258>
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1820:	546b      	strb	r3, [r5, r1]
        g = (colorcode >>  8) & 0xFF;
    1822:	7043      	strb	r3, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    1824:	7083      	strb	r3, [r0, #2]

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
    1826:	d92e      	bls.n	1886 <wipedown()+0x1d6>
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1828:	4f3b      	ldr	r7, [pc, #236]	; (1918 <wipedown()+0x268>)
    182a:	683b      	ldr	r3, [r7, #0]
    182c:	07db      	lsls	r3, r3, #31
    182e:	d517      	bpl.n	1860 <wipedown()+0x1b0>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1830:	4d3a      	ldr	r5, [pc, #232]	; (191c <wipedown()+0x26c>)
    1832:	4c3b      	ldr	r4, [pc, #236]	; (1920 <wipedown()+0x270>)
    1834:	682b      	ldr	r3, [r5, #0]
    1836:	9303      	str	r3, [sp, #12]
    1838:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    183c:	9b03      	ldr	r3, [sp, #12]
    183e:	1a5b      	subs	r3, r3, r1
    1840:	4293      	cmp	r3, r2
    1842:	7833      	ldrb	r3, [r6, #0]
    1844:	d306      	bcc.n	1854 <wipedown()+0x1a4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1846:	682a      	ldr	r2, [r5, #0]
    1848:	9202      	str	r2, [sp, #8]
    184a:	3b01      	subs	r3, #1
	return ret;
    184c:	9a02      	ldr	r2, [sp, #8]
    184e:	6022      	str	r2, [r4, #0]
    1850:	b2db      	uxtb	r3, r3
    1852:	7033      	strb	r3, [r6, #0]
	if (wipe_pos == 0) {
    1854:	b90b      	cbnz	r3, 185a <wipedown()+0x1aa>
		finish_transition();
    1856:	f7ff fe73 	bl	1540 <finish_transition()>
	}
}
    185a:	b005      	add	sp, #20
    185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
	}

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos--; }		// 1000 / 75
    1860:	4638      	mov	r0, r7
    1862:	f00b f92d 	bl	cac0 <__cxa_guard_acquire>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1866:	4d2d      	ldr	r5, [pc, #180]	; (191c <wipedown()+0x26c>)
    1868:	2800      	cmp	r0, #0
    186a:	d0e2      	beq.n	1832 <wipedown()+0x182>
    186c:	4b2d      	ldr	r3, [pc, #180]	; (1924 <wipedown()+0x274>)
    186e:	682a      	ldr	r2, [r5, #0]
    1870:	781b      	ldrb	r3, [r3, #0]
    1872:	4c2b      	ldr	r4, [pc, #172]	; (1920 <wipedown()+0x270>)
    1874:	9201      	str	r2, [sp, #4]
	return ret;
    1876:	9a01      	ldr	r2, [sp, #4]
    1878:	6022      	str	r2, [r4, #0]
    187a:	009b      	lsls	r3, r3, #2
    187c:	4638      	mov	r0, r7
    187e:	6063      	str	r3, [r4, #4]
    1880:	f00b f924 	bl	cacc <__cxa_guard_release>
    1884:	e7d6      	b.n	1834 <wipedown()+0x184>

	master_leds[wipe_pos]				 = CRGB::White;
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	if (wipe_pos < ONE_SIDE - 1) {
		master_leds[wipe_pos + 1] = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1886:	1c55      	adds	r5, r2, #1
    1888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    188c:	eb08 0a05 	add.w	sl, r8, r5
    1890:	4651      	mov	r1, sl
    1892:	4623      	mov	r3, r4
    1894:	aa02      	add	r2, sp, #8
    1896:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1898:	f88d 7008 	strb.w	r7, [sp, #8]
    189c:	f88d 4009 	strb.w	r4, [sp, #9]
    18a0:	f88d 400a 	strb.w	r4, [sp, #10]
    18a4:	f00a f9c2 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    18a8:	f899 3000 	ldrb.w	r3, [r9]
    18ac:	f88d 7008 	strb.w	r7, [sp, #8]
    18b0:	f1c3 0794 	rsb	r7, r3, #148	; 0x94
    18b4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    18b8:	eb08 0907 	add.w	r9, r8, r7
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18bc:	f89d c00c 	ldrb.w	ip, [sp, #12]
        g = rhs.g;
    18c0:	f89d e00d 	ldrb.w	lr, [sp, #13]
        b = rhs.b;
    18c4:	f89d b00e 	ldrb.w	fp, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18c8:	f808 c005 	strb.w	ip, [r8, r5]
    18cc:	aa02      	add	r2, sp, #8
    18ce:	4623      	mov	r3, r4
    18d0:	4649      	mov	r1, r9
    18d2:	a803      	add	r0, sp, #12
        g = rhs.g;
    18d4:	f88a e001 	strb.w	lr, [sl, #1]
        b = rhs.b;
    18d8:	f88a b002 	strb.w	fp, [sl, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    18dc:	f88d 4009 	strb.w	r4, [sp, #9]
    18e0:	f88d 400a 	strb.w	r4, [sp, #10]
    18e4:	f00a f9a2 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18e8:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    18ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    18f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    18f4:	f808 1007 	strb.w	r1, [r8, r7]
        g = rhs.g;
    18f8:	f889 2001 	strb.w	r2, [r9, #1]
        b = rhs.b;
    18fc:	f889 3002 	strb.w	r3, [r9, #2]
    1900:	e792      	b.n	1828 <wipedown()+0x178>
    1902:	4d03      	ldr	r5, [pc, #12]	; (1910 <wipedown()+0x260>)
    1904:	e70e      	b.n	1724 <wipedown()+0x74>
    1906:	bf00      	nop
    1908:	1fff955c 	.word	0x1fff955c
    190c:	1fffa704 	.word	0x1fffa704
    1910:	1fffaf60 	.word	0x1fffaf60
    1914:	1fff8cb0 	.word	0x1fff8cb0
    1918:	1fff961c 	.word	0x1fff961c
    191c:	1fffb1a0 	.word	0x1fffb1a0
    1920:	1fff9530 	.word	0x1fff9530
    1924:	1fff9e95 	.word	0x1fff9e95

00001928 <wipeup()>:
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint16_t i = 0; i < wipe_pos; i++) {
    192c:	4ba2      	ldr	r3, [pc, #648]	; (1bb8 <wipeup()+0x290>)
    192e:	781d      	ldrb	r5, [r3, #0]
    1930:	b2ab      	uxth	r3, r5
	if (wipe_pos == 0) {
		finish_transition();
	}
}

void wipeup() {
    1932:	b085      	sub	sp, #20
	for (uint16_t i = 0; i < wipe_pos; i++) {
    1934:	2b00      	cmp	r3, #0
    1936:	f000 8130 	beq.w	1b9a <wipeup()+0x272>
    193a:	f103 3bff 	add.w	fp, r3, #4294967295
    193e:	fa1f fb8b 	uxth.w	fp, fp
    1942:	489e      	ldr	r0, [pc, #632]	; (1bbc <wipeup()+0x294>)
    1944:	499e      	ldr	r1, [pc, #632]	; (1bc0 <wipeup()+0x298>)
    1946:	f10b 0b01 	add.w	fp, fp, #1
    194a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    194e:	4483      	add	fp, r0
    1950:	4602      	mov	r2, r0
    1952:	460c      	mov	r4, r1
    1954:	460e      	mov	r6, r1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1956:	f892 e000 	ldrb.w	lr, [r2]
        g = rhs.g;
    195a:	f892 a001 	ldrb.w	sl, [r2, #1]
        b = rhs.b;
    195e:	f892 9002 	ldrb.w	r9, [r2, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1962:	f886 e000 	strb.w	lr, [r6]
    1966:	3203      	adds	r2, #3
    1968:	f890 81bf 	ldrb.w	r8, [r0, #447]	; 0x1bf
        g = rhs.g;
    196c:	f890 c1c0 	ldrb.w	ip, [r0, #448]	; 0x1c0
        b = rhs.b;
    1970:	f890 e1c1 	ldrb.w	lr, [r0, #449]	; 0x1c1

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    1974:	f886 a001 	strb.w	sl, [r6, #1]
    1978:	455a      	cmp	r2, fp
        b = rhs.b;
    197a:	f886 9002 	strb.w	r9, [r6, #2]
    197e:	f1a0 0003 	sub.w	r0, r0, #3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1982:	f881 81bf 	strb.w	r8, [r1, #447]	; 0x1bf
        g = rhs.g;
    1986:	f881 c1c0 	strb.w	ip, [r1, #448]	; 0x1c0
        b = rhs.b;
    198a:	f881 e1c1 	strb.w	lr, [r1, #449]	; 0x1c1
    198e:	f106 0603 	add.w	r6, r6, #3
    1992:	f1a1 0103 	sub.w	r1, r1, #3
    1996:	d1de      	bne.n	1956 <wipeup()+0x2e>
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    1998:	2b4a      	cmp	r3, #74	; 0x4a
    199a:	d828      	bhi.n	19ee <wipeup()+0xc6>
    199c:	4889      	ldr	r0, [pc, #548]	; (1bc4 <wipeup()+0x29c>)
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
    199e:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19a2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    19a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    19aa:	eb00 0801 	add.w	r8, r0, r1
    19ae:	eb00 0c02 	add.w	ip, r0, r2
void wipeup() {
	for (uint16_t i = 0; i < wipe_pos; i++) {
		master_leds[i]				  = next_leds.led_data[i];
		master_leds[NUM_LEDS - 1 - i] = next_leds.led_data[NUM_LEDS -1 -i];
	}
	for (uint16_t j = wipe_pos; j < ONE_SIDE; j++) {
    19b2:	3301      	adds	r3, #1
    19b4:	eb04 0e01 	add.w	lr, r4, r1
    19b8:	f810 b001 	ldrb.w	fp, [r0, r1]
    19bc:	f804 b001 	strb.w	fp, [r4, r1]
    19c0:	18a6      	adds	r6, r4, r2
    19c2:	b29b      	uxth	r3, r3
        g = rhs.g;
    19c4:	f898 a001 	ldrb.w	sl, [r8, #1]
        b = rhs.b;
    19c8:	f898 9002 	ldrb.w	r9, [r8, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19cc:	f89c b001 	ldrb.w	fp, [ip, #1]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19d0:	f810 8002 	ldrb.w	r8, [r0, r2]
        g = rhs.g;
        b = rhs.b;
    19d4:	f89c 1002 	ldrb.w	r1, [ip, #2]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    19d8:	f88e a001 	strb.w	sl, [lr, #1]
    19dc:	2b4b      	cmp	r3, #75	; 0x4b
        b = rhs.b;
    19de:	f88e 9002 	strb.w	r9, [lr, #2]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    19e2:	f804 8002 	strb.w	r8, [r4, r2]
        g = rhs.g;
    19e6:	f886 b001 	strb.w	fp, [r6, #1]
        b = rhs.b;
    19ea:	70b1      	strb	r1, [r6, #2]
    19ec:	d1d7      	bne.n	199e <wipeup()+0x76>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
    19ee:	2d00      	cmp	r5, #0
    19f0:	f040 808f 	bne.w	1b12 <wipeup()+0x1ea>
    19f4:	f10d 0a0c 	add.w	sl, sp, #12
    19f8:	f10d 0b08 	add.w	fp, sp, #8
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    19fc:	4b6e      	ldr	r3, [pc, #440]	; (1bb8 <wipeup()+0x290>)
    19fe:	781b      	ldrb	r3, [r3, #0]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;
    1a00:	f1c3 0095 	rsb	r0, r3, #149	; 0x95
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a04:	eb00 0040 	add.w	r0, r0, r0, lsl #1

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
    1a08:	1c5a      	adds	r2, r3, #1
    1a0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1a0e:	eb04 0e03 	add.w	lr, r4, r3
    1a12:	1825      	adds	r5, r4, r0
    1a14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a18:	2680      	movs	r6, #128	; 0x80
    1a1a:	eb04 0902 	add.w	r9, r4, r2
    1a1e:	4617      	mov	r7, r2
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a20:	22ff      	movs	r2, #255	; 0xff
    1a22:	54e2      	strb	r2, [r4, r3]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a24:	f04f 0800 	mov.w	r8, #0

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
        g = (colorcode >>  8) & 0xFF;
    1a28:	f88e 2001 	strb.w	r2, [lr, #1]
        b = (colorcode >>  0) & 0xFF;
    1a2c:	f88e 2002 	strb.w	r2, [lr, #2]
    1a30:	4633      	mov	r3, r6
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    1a32:	5422      	strb	r2, [r4, r0]
    1a34:	4649      	mov	r1, r9
        g = (colorcode >>  8) & 0xFF;
    1a36:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    1a38:	70aa      	strb	r2, [r5, #2]
    1a3a:	4650      	mov	r0, sl
    1a3c:	465a      	mov	r2, fp
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a3e:	f88d 6009 	strb.w	r6, [sp, #9]
    1a42:	f88d 600a 	strb.w	r6, [sp, #10]
    1a46:	f88d 8008 	strb.w	r8, [sp, #8]
    1a4a:	f00a f8ef 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);
    1a4e:	4b5a      	ldr	r3, [pc, #360]	; (1bb8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a50:	f89d 100c 	ldrb.w	r1, [sp, #12]
    1a54:	781d      	ldrb	r5, [r3, #0]
        g = rhs.g;
    1a56:	f89d e00d 	ldrb.w	lr, [sp, #13]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1a5a:	f88d 8008 	strb.w	r8, [sp, #8]
    1a5e:	f1c5 0594 	rsb	r5, r5, #148	; 0x94
    1a62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1a66:	eb04 0805 	add.w	r8, r4, r5
    1a6a:	4633      	mov	r3, r6
    1a6c:	f88d 6009 	strb.w	r6, [sp, #9]
    1a70:	f88d 600a 	strb.w	r6, [sp, #10]
    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
        b = rhs.b;
    1a74:	f89d 600e 	ldrb.w	r6, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a78:	55e1      	strb	r1, [r4, r7]
    1a7a:	465a      	mov	r2, fp
    1a7c:	4650      	mov	r0, sl
    1a7e:	4641      	mov	r1, r8
        g = rhs.g;
    1a80:	f889 e001 	strb.w	lr, [r9, #1]
        b = rhs.b;
    1a84:	f889 6002 	strb.w	r6, [r9, #2]
    1a88:	f00a f8d0 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1a8c:	4b4e      	ldr	r3, [pc, #312]	; (1bc8 <wipeup()+0x2a0>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a8e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1a92:	681b      	ldr	r3, [r3, #0]
        g = rhs.g;
    1a94:	f89d 100d 	ldrb.w	r1, [sp, #13]
        b = rhs.b;
    1a98:	f89d 200e 	ldrb.w	r2, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1a9c:	5560      	strb	r0, [r4, r5]
    1a9e:	07db      	lsls	r3, r3, #31
	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
	}

	master_leds[wipe_pos]				 = CRGB::White;
    1aa0:	4845      	ldr	r0, [pc, #276]	; (1bb8 <wipeup()+0x290>)
        g = rhs.g;
    1aa2:	f888 1001 	strb.w	r1, [r8, #1]
        b = rhs.b;
    1aa6:	f888 2002 	strb.w	r2, [r8, #2]
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1aaa:	d520      	bpl.n	1aee <wipeup()+0x1c6>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1aac:	4d47      	ldr	r5, [pc, #284]	; (1bcc <wipeup()+0x2a4>)
    1aae:	4c48      	ldr	r4, [pc, #288]	; (1bd0 <wipeup()+0x2a8>)
    1ab0:	682b      	ldr	r3, [r5, #0]
    1ab2:	9303      	str	r3, [sp, #12]
    1ab4:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1ab8:	9b03      	ldr	r3, [sp, #12]
    1aba:	1a5b      	subs	r3, r3, r1
    1abc:	4293      	cmp	r3, r2
    1abe:	d30e      	bcc.n	1ade <wipeup()+0x1b6>
    1ac0:	4b3d      	ldr	r3, [pc, #244]	; (1bb8 <wipeup()+0x290>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ac2:	682a      	ldr	r2, [r5, #0]
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	9202      	str	r2, [sp, #8]
	return ret;
    1ac8:	9a02      	ldr	r2, [sp, #8]
    1aca:	6022      	str	r2, [r4, #0]
    1acc:	3301      	adds	r3, #1
    1ace:	4a3a      	ldr	r2, [pc, #232]	; (1bb8 <wipeup()+0x290>)
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	7013      	strb	r3, [r2, #0]
	if (wipe_pos == ONE_SIDE - 1) {
    1ad4:	2b4a      	cmp	r3, #74	; 0x4a
    1ad6:	d005      	beq.n	1ae4 <wipeup()+0x1bc>
		finish_transition();
	}
}
    1ad8:	b005      	add	sp, #20
    1ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ade:	7803      	ldrb	r3, [r0, #0]

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
	if (wipe_pos == ONE_SIDE - 1) {
    1ae0:	2b4a      	cmp	r3, #74	; 0x4a
    1ae2:	d1f9      	bne.n	1ad8 <wipeup()+0x1b0>
		finish_transition();
    1ae4:	f7ff fd2c 	bl	1540 <finish_transition()>
	}
}
    1ae8:	b005      	add	sp, #20
    1aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1aee:	4836      	ldr	r0, [pc, #216]	; (1bc8 <wipeup()+0x2a0>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1af0:	4d36      	ldr	r5, [pc, #216]	; (1bcc <wipeup()+0x2a4>)
    1af2:	f00a ffe5 	bl	cac0 <__cxa_guard_acquire>
    1af6:	2800      	cmp	r0, #0
    1af8:	d151      	bne.n	1b9e <wipeup()+0x276>
    1afa:	4c35      	ldr	r4, [pc, #212]	; (1bd0 <wipeup()+0x2a8>)
    1afc:	682b      	ldr	r3, [r5, #0]
    1afe:	9303      	str	r3, [sp, #12]
    1b00:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    1b04:	9b03      	ldr	r3, [sp, #12]
    1b06:	1a5b      	subs	r3, r3, r1
    1b08:	4293      	cmp	r3, r2
    1b0a:	d2d9      	bcs.n	1ac0 <wipeup()+0x198>
    1b0c:	4b2a      	ldr	r3, [pc, #168]	; (1bb8 <wipeup()+0x290>)
    1b0e:	781b      	ldrb	r3, [r3, #0]
    1b10:	e7e0      	b.n	1ad4 <wipeup()+0x1ac>
		master_leds[j]				  = curr_leds.led_data[j];
		master_leds[NUM_LEDS - 1 - j] = curr_leds.led_data[NUM_LEDS -1 -j];
	}

	if (wipe_pos > 0) {
		master_leds[wipe_pos - 1]				   = blend(master_leds[wipe_pos - 1], CRGB::Teal, 128);
    1b12:	3d01      	subs	r5, #1
    1b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b18:	2680      	movs	r6, #128	; 0x80
    1b1a:	eb04 0905 	add.w	r9, r4, r5
    1b1e:	f10d 0a0c 	add.w	sl, sp, #12
    1b22:	f10d 0b08 	add.w	fp, sp, #8
    1b26:	f04f 0800 	mov.w	r8, #0
    1b2a:	4649      	mov	r1, r9
    1b2c:	4633      	mov	r3, r6
    1b2e:	4650      	mov	r0, sl
    1b30:	465a      	mov	r2, fp
    1b32:	f88d 8008 	strb.w	r8, [sp, #8]
    1b36:	f88d 6009 	strb.w	r6, [sp, #9]
    1b3a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b3e:	f00a f875 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
		master_leds[NUM_LEDS - 1 - (wipe_pos - 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos - 1)], CRGB::Teal, 128);
    1b42:	4b1d      	ldr	r3, [pc, #116]	; (1bb8 <wipeup()+0x290>)
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b44:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1b48:	781b      	ldrb	r3, [r3, #0]
        g = rhs.g;
    1b4a:	f89d c00d 	ldrb.w	ip, [sp, #13]
        b = rhs.b;
    1b4e:	f89d e00e 	ldrb.w	lr, [sp, #14]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b52:	f88d 8008 	strb.w	r8, [sp, #8]
    1b56:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    1b5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1b5e:	eb04 0803 	add.w	r8, r4, r3
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b62:	5562      	strb	r2, [r4, r5]
    1b64:	461f      	mov	r7, r3
    1b66:	4641      	mov	r1, r8
    1b68:	4633      	mov	r3, r6
    1b6a:	465a      	mov	r2, fp
    1b6c:	4650      	mov	r0, sl
        g = rhs.g;
    1b6e:	f889 c001 	strb.w	ip, [r9, #1]
        b = rhs.b;
    1b72:	f889 e002 	strb.w	lr, [r9, #2]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    1b76:	f88d 6009 	strb.w	r6, [sp, #9]
    1b7a:	f88d 600a 	strb.w	r6, [sp, #10]
    1b7e:	f00a f855 	bl	bc2c <blend(CRGB const&, CRGB const&, unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b82:	f89d 100c 	ldrb.w	r1, [sp, #12]
        g = rhs.g;
    1b86:	f89d 200d 	ldrb.w	r2, [sp, #13]
        b = rhs.b;
    1b8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    1b8e:	55e1      	strb	r1, [r4, r7]
        g = rhs.g;
    1b90:	f888 2001 	strb.w	r2, [r8, #1]
        b = rhs.b;
    1b94:	f888 3002 	strb.w	r3, [r8, #2]
    1b98:	e730      	b.n	19fc <wipeup()+0xd4>
    1b9a:	4c09      	ldr	r4, [pc, #36]	; (1bc0 <wipeup()+0x298>)
    1b9c:	e6fe      	b.n	199c <wipeup()+0x74>
	master_leds[NUM_LEDS - 1 - wipe_pos] = CRGB::White;

	master_leds[wipe_pos + 1]				   = blend(master_leds[wipe_pos + 1], CRGB::Teal, 128);
	master_leds[NUM_LEDS - 1 - (wipe_pos + 1)] = blend(master_leds[NUM_LEDS - 1 - (wipe_pos + 1)], CRGB::Teal, 128);

	EVERY_N_MILLIS(transition_speed * 4) { wipe_pos++; }
    1b9e:	4b0d      	ldr	r3, [pc, #52]	; (1bd4 <wipeup()+0x2ac>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1ba0:	682a      	ldr	r2, [r5, #0]
    1ba2:	781b      	ldrb	r3, [r3, #0]
    1ba4:	4c0a      	ldr	r4, [pc, #40]	; (1bd0 <wipeup()+0x2a8>)
    1ba6:	9201      	str	r2, [sp, #4]
	return ret;
    1ba8:	9a01      	ldr	r2, [sp, #4]
    1baa:	6022      	str	r2, [r4, #0]
    1bac:	009b      	lsls	r3, r3, #2
    1bae:	4806      	ldr	r0, [pc, #24]	; (1bc8 <wipeup()+0x2a0>)
    1bb0:	6063      	str	r3, [r4, #4]
    1bb2:	f00a ff8b 	bl	cacc <__cxa_guard_release>
    1bb6:	e7a1      	b.n	1afc <wipeup()+0x1d4>
    1bb8:	1fff955c 	.word	0x1fff955c
    1bbc:	1fff8cb0 	.word	0x1fff8cb0
    1bc0:	1fffaf60 	.word	0x1fffaf60
    1bc4:	1fffa704 	.word	0x1fffa704
    1bc8:	1fff9628 	.word	0x1fff9628
    1bcc:	1fffb1a0 	.word	0x1fffb1a0
    1bd0:	1fff9e98 	.word	0x1fff9e98
    1bd4:	1fff9e95 	.word	0x1fff9e95

00001bd8 <switch_transition(TransitionType)>:
		EVERY_N_MILLIS(transition_speed * 4) { if (transition_ratio++ == 0) { finish_transition(); } }
	}
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
    1bd8:	2801      	cmp	r0, #1
    1bda:	d006      	beq.n	1bea <switch_transition(TransitionType)+0x12>
    1bdc:	d303      	bcc.n	1be6 <switch_transition(TransitionType)+0xe>
    1bde:	2802      	cmp	r0, #2
    1be0:	d101      	bne.n	1be6 <switch_transition(TransitionType)+0xe>
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
		case WIPEUP:	wipeup();		break;
    1be2:	f7ff bea1 	b.w	1928 <wipeup()>
		//case COLORFADE: colorfade();	break;
		default:		blending();		break;
    1be6:	f7ff bcf1 	b.w	15cc <blending()>
}
*/
void switch_transition(TransitionType tt) {
	switch (tt) {
		case BLENDING:	blending();		break;
		case WIPEDOWN:	wipedown();		break;
    1bea:	f7ff bd61 	b.w	16b0 <wipedown()>
    1bee:	bf00      	nop

00001bf0 <print_palette(unsigned char)>:
}



// Print palettes
void print_palette(uint8_t pn) {
    1bf0:	b510      	push	{r4, lr}
    1bf2:	2110      	movs	r1, #16
    1bf4:	4604      	mov	r4, r0
    1bf6:	4894      	ldr	r0, [pc, #592]	; (1e48 <print_palette(unsigned char)+0x258>)
    1bf8:	f00b fffa 	bl	dbf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1bfc:	4621      	mov	r1, r4
    1bfe:	2300      	movs	r3, #0
    1c00:	220a      	movs	r2, #10
    1c02:	4892      	ldr	r0, [pc, #584]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1c04:	f00c fa08 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c08:	2102      	movs	r1, #2
    1c0a:	4891      	ldr	r0, [pc, #580]	; (1e50 <print_palette(unsigned char)+0x260>)
    1c0c:	f00b fff0 	bl	dbf0 <usb_serial_write>
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
    1c10:	2c5c      	cmp	r4, #92	; 0x5c
    1c12:	f200 8281 	bhi.w	2118 <print_palette(unsigned char)+0x528>
    1c16:	e8df f014 	tbh	[pc, r4, lsl #1]
    1c1a:	027a      	.short	0x027a
    1c1c:	02700275 	.word	0x02700275
    1c20:	0266026b 	.word	0x0266026b
    1c24:	025c0261 	.word	0x025c0261
    1c28:	02520257 	.word	0x02520257
    1c2c:	0248024d 	.word	0x0248024d
    1c30:	023e0243 	.word	0x023e0243
    1c34:	02340239 	.word	0x02340239
    1c38:	022a022f 	.word	0x022a022f
    1c3c:	02200225 	.word	0x02200225
    1c40:	0216021b 	.word	0x0216021b
    1c44:	020c0211 	.word	0x020c0211
    1c48:	02020207 	.word	0x02020207
    1c4c:	01f801fd 	.word	0x01f801fd
    1c50:	01ee01f3 	.word	0x01ee01f3
    1c54:	01e401e9 	.word	0x01e401e9
    1c58:	01da01df 	.word	0x01da01df
    1c5c:	01d001d5 	.word	0x01d001d5
    1c60:	01c601cb 	.word	0x01c601cb
    1c64:	01bc01c1 	.word	0x01bc01c1
    1c68:	01b201b7 	.word	0x01b201b7
    1c6c:	01a801ad 	.word	0x01a801ad
    1c70:	019e01a3 	.word	0x019e01a3
    1c74:	01940199 	.word	0x01940199
    1c78:	018a018f 	.word	0x018a018f
    1c7c:	01800185 	.word	0x01800185
    1c80:	0176017b 	.word	0x0176017b
    1c84:	016c0171 	.word	0x016c0171
    1c88:	01110167 	.word	0x01110167
    1c8c:	0107010c 	.word	0x0107010c
    1c90:	00fd0102 	.word	0x00fd0102
    1c94:	00f300f8 	.word	0x00f300f8
    1c98:	00e900ee 	.word	0x00e900ee
    1c9c:	00df00e4 	.word	0x00df00e4
    1ca0:	00d500da 	.word	0x00d500da
    1ca4:	00cb00d0 	.word	0x00cb00d0
    1ca8:	00c100c6 	.word	0x00c100c6
    1cac:	00b700bc 	.word	0x00b700bc
    1cb0:	00ad00b2 	.word	0x00ad00b2
    1cb4:	00a300a8 	.word	0x00a300a8
    1cb8:	0099009e 	.word	0x0099009e
    1cbc:	008f0094 	.word	0x008f0094
    1cc0:	0085008a 	.word	0x0085008a
    1cc4:	007b0080 	.word	0x007b0080
    1cc8:	00710076 	.word	0x00710076
    1ccc:	0067006c 	.word	0x0067006c
    1cd0:	005d0062 	.word	0x005d0062
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
    1cd4:	495f      	ldr	r1, [pc, #380]	; (1e54 <print_palette(unsigned char)+0x264>)
    1cd6:	485d      	ldr	r0, [pc, #372]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cd8:	f7fe fe42 	bl	960 <Print::println(char const*)>
    1cdc:	bd10      	pop	{r4, pc}
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
    1cde:	495e      	ldr	r1, [pc, #376]	; (1e58 <print_palette(unsigned char)+0x268>)
    1ce0:	485a      	ldr	r0, [pc, #360]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1ce2:	f7fe fe3d 	bl	960 <Print::println(char const*)>
    1ce6:	bd10      	pop	{r4, pc}
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
    1ce8:	495c      	ldr	r1, [pc, #368]	; (1e5c <print_palette(unsigned char)+0x26c>)
    1cea:	4858      	ldr	r0, [pc, #352]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cec:	f7fe fe38 	bl	960 <Print::println(char const*)>
    1cf0:	bd10      	pop	{r4, pc}
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
    1cf2:	495b      	ldr	r1, [pc, #364]	; (1e60 <print_palette(unsigned char)+0x270>)
    1cf4:	4855      	ldr	r0, [pc, #340]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1cf6:	f7fe fe33 	bl	960 <Print::println(char const*)>
    1cfa:	bd10      	pop	{r4, pc}
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
    1cfc:	4959      	ldr	r1, [pc, #356]	; (1e64 <print_palette(unsigned char)+0x274>)
    1cfe:	4853      	ldr	r0, [pc, #332]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d00:	f7fe fe2e 	bl	960 <Print::println(char const*)>
    1d04:	bd10      	pop	{r4, pc}
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
		case 87:	Serial.println("Complementary_01a_gp");			break;
    1d06:	4958      	ldr	r1, [pc, #352]	; (1e68 <print_palette(unsigned char)+0x278>)
    1d08:	4850      	ldr	r0, [pc, #320]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d0a:	f7fe fe29 	bl	960 <Print::println(char const*)>
    1d0e:	bd10      	pop	{r4, pc}
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
		case 86:	Serial.println("Cyan_Magenta_Blue_gp");			break;
    1d10:	4956      	ldr	r1, [pc, #344]	; (1e6c <print_palette(unsigned char)+0x27c>)
    1d12:	484e      	ldr	r0, [pc, #312]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d14:	f7fe fe24 	bl	960 <Print::println(char const*)>
    1d18:	bd10      	pop	{r4, pc}
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
		case 85:	Serial.println("RedsandCyans_gp");				break;
    1d1a:	4955      	ldr	r1, [pc, #340]	; (1e70 <print_palette(unsigned char)+0x280>)
    1d1c:	484b      	ldr	r0, [pc, #300]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d1e:	f7fe fe1f 	bl	960 <Print::println(char const*)>
    1d22:	bd10      	pop	{r4, pc}
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
		case 84:	Serial.println("stratosphere_sunset_gp");		break;
    1d24:	4953      	ldr	r1, [pc, #332]	; (1e74 <print_palette(unsigned char)+0x284>)
    1d26:	4849      	ldr	r0, [pc, #292]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d28:	f7fe fe1a 	bl	960 <Print::println(char const*)>
    1d2c:	bd10      	pop	{r4, pc}
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
		case 83:	Serial.println("water1_gp");					break;
    1d2e:	4952      	ldr	r1, [pc, #328]	; (1e78 <print_palette(unsigned char)+0x288>)
    1d30:	4846      	ldr	r0, [pc, #280]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d32:	f7fe fe15 	bl	960 <Print::println(char const*)>
    1d36:	bd10      	pop	{r4, pc}
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
		case 82:	Serial.println("xanidu_2_gp");					break;
    1d38:	4950      	ldr	r1, [pc, #320]	; (1e7c <print_palette(unsigned char)+0x28c>)
    1d3a:	4844      	ldr	r0, [pc, #272]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d3c:	f7fe fe10 	bl	960 <Print::println(char const*)>
    1d40:	bd10      	pop	{r4, pc}
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
		case 81:	Serial.println("es_emerald_dragon_09_gp");		break;
    1d42:	494f      	ldr	r1, [pc, #316]	; (1e80 <print_palette(unsigned char)+0x290>)
    1d44:	4841      	ldr	r0, [pc, #260]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d46:	f7fe fe0b 	bl	960 <Print::println(char const*)>
    1d4a:	bd10      	pop	{r4, pc}
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
		case 80:	Serial.println("bhw3_34_gp");					break;
    1d4c:	494d      	ldr	r1, [pc, #308]	; (1e84 <print_palette(unsigned char)+0x294>)
    1d4e:	483f      	ldr	r0, [pc, #252]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d50:	f7fe fe06 	bl	960 <Print::println(char const*)>
    1d54:	bd10      	pop	{r4, pc}
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
		case 79:	Serial.println("bhw4_009_gp");					break;
    1d56:	494c      	ldr	r1, [pc, #304]	; (1e88 <print_palette(unsigned char)+0x298>)
    1d58:	483c      	ldr	r0, [pc, #240]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d5a:	f7fe fe01 	bl	960 <Print::println(char const*)>
    1d5e:	bd10      	pop	{r4, pc}
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
		case 78:	Serial.println("bhw3_61_gp");					break;
    1d60:	494a      	ldr	r1, [pc, #296]	; (1e8c <print_palette(unsigned char)+0x29c>)
    1d62:	483a      	ldr	r0, [pc, #232]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d64:	f7fe fdfc 	bl	960 <Print::println(char const*)>
    1d68:	bd10      	pop	{r4, pc}
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
		case 77:	Serial.println("bhw3_13_gp");					break;
    1d6a:	4949      	ldr	r1, [pc, #292]	; (1e90 <print_palette(unsigned char)+0x2a0>)
    1d6c:	4837      	ldr	r0, [pc, #220]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d6e:	f7fe fdf7 	bl	960 <Print::println(char const*)>
    1d72:	bd10      	pop	{r4, pc}
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
		case 76:	Serial.println("bhw2_turq_gp");					break;
    1d74:	4947      	ldr	r1, [pc, #284]	; (1e94 <print_palette(unsigned char)+0x2a4>)
    1d76:	4835      	ldr	r0, [pc, #212]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d78:	f7fe fdf2 	bl	960 <Print::println(char const*)>
    1d7c:	bd10      	pop	{r4, pc}
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
		case 75:	Serial.println("bhw1_05_gp");					break;
    1d7e:	4946      	ldr	r1, [pc, #280]	; (1e98 <print_palette(unsigned char)+0x2a8>)
    1d80:	4832      	ldr	r0, [pc, #200]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d82:	f7fe fded 	bl	960 <Print::println(char const*)>
    1d86:	bd10      	pop	{r4, pc}
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
		case 74:	Serial.println("bhw1_sunconure_gp");			break;
    1d88:	4944      	ldr	r1, [pc, #272]	; (1e9c <print_palette(unsigned char)+0x2ac>)
    1d8a:	4830      	ldr	r0, [pc, #192]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d8c:	f7fe fde8 	bl	960 <Print::println(char const*)>
    1d90:	bd10      	pop	{r4, pc}
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
		case 73:	Serial.println("GMT_cool_gp");					break;
    1d92:	4943      	ldr	r1, [pc, #268]	; (1ea0 <print_palette(unsigned char)+0x2b0>)
    1d94:	482d      	ldr	r0, [pc, #180]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1d96:	f7fe fde3 	bl	960 <Print::println(char const*)>
    1d9a:	bd10      	pop	{r4, pc}
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
		case 72:	Serial.println("sunlitwave_gp");				break;
    1d9c:	4941      	ldr	r1, [pc, #260]	; (1ea4 <print_palette(unsigned char)+0x2b4>)
    1d9e:	482b      	ldr	r0, [pc, #172]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1da0:	f7fe fdde 	bl	960 <Print::println(char const*)>
    1da4:	bd10      	pop	{r4, pc}
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
		case 71:	Serial.println("scoutie_gp");					break;
    1da6:	4940      	ldr	r1, [pc, #256]	; (1ea8 <print_palette(unsigned char)+0x2b8>)
    1da8:	4828      	ldr	r0, [pc, #160]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1daa:	f7fe fdd9 	bl	960 <Print::println(char const*)>
    1dae:	bd10      	pop	{r4, pc}
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
		case 70:	Serial.println("parrot_gp");					break;
    1db0:	493e      	ldr	r1, [pc, #248]	; (1eac <print_palette(unsigned char)+0x2bc>)
    1db2:	4826      	ldr	r0, [pc, #152]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1db4:	f7fe fdd4 	bl	960 <Print::println(char const*)>
    1db8:	bd10      	pop	{r4, pc}
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
		case 69:	Serial.println("otis_gp");						break;
    1dba:	493d      	ldr	r1, [pc, #244]	; (1eb0 <print_palette(unsigned char)+0x2c0>)
    1dbc:	4823      	ldr	r0, [pc, #140]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dbe:	f7fe fdcf 	bl	960 <Print::println(char const*)>
    1dc2:	bd10      	pop	{r4, pc}
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
		case 68:	Serial.println("faint_rainbow_gp");				break;
    1dc4:	493b      	ldr	r1, [pc, #236]	; (1eb4 <print_palette(unsigned char)+0x2c4>)
    1dc6:	4821      	ldr	r0, [pc, #132]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dc8:	f7fe fdca 	bl	960 <Print::println(char const*)>
    1dcc:	bd10      	pop	{r4, pc}
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
		case 67:	Serial.println("apple_green_gp");				break;
    1dce:	493a      	ldr	r1, [pc, #232]	; (1eb8 <print_palette(unsigned char)+0x2c8>)
    1dd0:	481e      	ldr	r0, [pc, #120]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dd2:	f7fe fdc5 	bl	960 <Print::println(char const*)>
    1dd6:	bd10      	pop	{r4, pc}
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
		case 66:	Serial.println("ultraviolet_mold_gp");			break;
    1dd8:	4938      	ldr	r1, [pc, #224]	; (1ebc <print_palette(unsigned char)+0x2cc>)
    1dda:	481c      	ldr	r0, [pc, #112]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1ddc:	f7fe fdc0 	bl	960 <Print::println(char const*)>
    1de0:	bd10      	pop	{r4, pc}
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
		case 65:	Serial.println("green_gp");						break;
    1de2:	4937      	ldr	r1, [pc, #220]	; (1ec0 <print_palette(unsigned char)+0x2d0>)
    1de4:	4819      	ldr	r0, [pc, #100]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1de6:	f7fe fdbb 	bl	960 <Print::println(char const*)>
    1dea:	bd10      	pop	{r4, pc}
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
		case 64:	Serial.println("twilight_gp");					break;
    1dec:	4935      	ldr	r1, [pc, #212]	; (1ec4 <print_palette(unsigned char)+0x2d4>)
    1dee:	4817      	ldr	r0, [pc, #92]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1df0:	f7fe fdb6 	bl	960 <Print::println(char const*)>
    1df4:	bd10      	pop	{r4, pc}
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
		case 63:	Serial.println("blueice_gp");					break;
    1df6:	4934      	ldr	r1, [pc, #208]	; (1ec8 <print_palette(unsigned char)+0x2d8>)
    1df8:	4814      	ldr	r0, [pc, #80]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1dfa:	f7fe fdb1 	bl	960 <Print::println(char const*)>
    1dfe:	bd10      	pop	{r4, pc}
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
		case 62:	Serial.println("fierce_ice_gp");				break;
    1e00:	4932      	ldr	r1, [pc, #200]	; (1ecc <print_palette(unsigned char)+0x2dc>)
    1e02:	4812      	ldr	r0, [pc, #72]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e04:	f7fe fdac 	bl	960 <Print::println(char const*)>
    1e08:	bd10      	pop	{r4, pc}
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
		case 61:	Serial.println("purple_flower_gp");				break;
    1e0a:	4931      	ldr	r1, [pc, #196]	; (1ed0 <print_palette(unsigned char)+0x2e0>)
    1e0c:	480f      	ldr	r0, [pc, #60]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e0e:	f7fe fda7 	bl	960 <Print::println(char const*)>
    1e12:	bd10      	pop	{r4, pc}
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
		case 60:	Serial.println("cequal_gp");					break;
    1e14:	492f      	ldr	r1, [pc, #188]	; (1ed4 <print_palette(unsigned char)+0x2e4>)
    1e16:	480d      	ldr	r0, [pc, #52]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e18:	f7fe fda2 	bl	960 <Print::println(char const*)>
    1e1c:	bd10      	pop	{r4, pc}
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
		case 59:	Serial.println("cloudcolors_gp");				break;
    1e1e:	492e      	ldr	r1, [pc, #184]	; (1ed8 <print_palette(unsigned char)+0x2e8>)
    1e20:	480a      	ldr	r0, [pc, #40]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e22:	f7fe fd9d 	bl	960 <Print::println(char const*)>
    1e26:	bd10      	pop	{r4, pc}
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
		case 58:	Serial.println("rainbow_gp");					break;
    1e28:	492c      	ldr	r1, [pc, #176]	; (1edc <print_palette(unsigned char)+0x2ec>)
    1e2a:	4808      	ldr	r0, [pc, #32]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e2c:	f7fe fd98 	bl	960 <Print::println(char const*)>
    1e30:	bd10      	pop	{r4, pc}
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
		case 57:	Serial.println("GMT_seafloor_gp");				break;
    1e32:	492b      	ldr	r1, [pc, #172]	; (1ee0 <print_palette(unsigned char)+0x2f0>)
    1e34:	4805      	ldr	r0, [pc, #20]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e36:	f7fe fd93 	bl	960 <Print::println(char const*)>
    1e3a:	bd10      	pop	{r4, pc}
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
		case 56:	Serial.println("Split_03_gp");					break;
    1e3c:	4929      	ldr	r1, [pc, #164]	; (1ee4 <print_palette(unsigned char)+0x2f4>)
    1e3e:	4803      	ldr	r0, [pc, #12]	; (1e4c <print_palette(unsigned char)+0x25c>)
    1e40:	f7fe fd8e 	bl	960 <Print::println(char const*)>
    1e44:	bd10      	pop	{r4, pc}
    1e46:	bf00      	nop
    1e48:	00010ad8 	.word	0x00010ad8
    1e4c:	1fff878c 	.word	0x1fff878c
    1e50:	00010aec 	.word	0x00010aec
    1e54:	00011080 	.word	0x00011080
    1e58:	00011074 	.word	0x00011074
    1e5c:	00011064 	.word	0x00011064
    1e60:	00011054 	.word	0x00011054
    1e64:	00011040 	.word	0x00011040
    1e68:	00011028 	.word	0x00011028
    1e6c:	00011010 	.word	0x00011010
    1e70:	00011000 	.word	0x00011000
    1e74:	00010fe8 	.word	0x00010fe8
    1e78:	00010fdc 	.word	0x00010fdc
    1e7c:	00010fd0 	.word	0x00010fd0
    1e80:	00010fb8 	.word	0x00010fb8
    1e84:	00010fac 	.word	0x00010fac
    1e88:	00010fa0 	.word	0x00010fa0
    1e8c:	00010f94 	.word	0x00010f94
    1e90:	00010f88 	.word	0x00010f88
    1e94:	00010f78 	.word	0x00010f78
    1e98:	00010f6c 	.word	0x00010f6c
    1e9c:	00010f58 	.word	0x00010f58
    1ea0:	00010f4c 	.word	0x00010f4c
    1ea4:	00010f3c 	.word	0x00010f3c
    1ea8:	00010f30 	.word	0x00010f30
    1eac:	00010f24 	.word	0x00010f24
    1eb0:	00010f1c 	.word	0x00010f1c
    1eb4:	00010f08 	.word	0x00010f08
    1eb8:	00010ef8 	.word	0x00010ef8
    1ebc:	00010ee4 	.word	0x00010ee4
    1ec0:	00010ed8 	.word	0x00010ed8
    1ec4:	00010ecc 	.word	0x00010ecc
    1ec8:	00010ec0 	.word	0x00010ec0
    1ecc:	00010eb0 	.word	0x00010eb0
    1ed0:	00010e9c 	.word	0x00010e9c
    1ed4:	00010e90 	.word	0x00010e90
    1ed8:	00010e80 	.word	0x00010e80
    1edc:	00010e74 	.word	0x00010e74
    1ee0:	00010e64 	.word	0x00010e64
    1ee4:	00010e58 	.word	0x00010e58
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
		case 55:	Serial.println("Secondary_01a_gp");				break;
    1ee8:	498e      	ldr	r1, [pc, #568]	; (2124 <print_palette(unsigned char)+0x534>)
    1eea:	488f      	ldr	r0, [pc, #572]	; (2128 <print_palette(unsigned char)+0x538>)
    1eec:	f7fe fd38 	bl	960 <Print::println(char const*)>
    1ef0:	bd10      	pop	{r4, pc}
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
		case 54:	Serial.println("sea_treasure_gp");				break;
    1ef2:	498e      	ldr	r1, [pc, #568]	; (212c <print_palette(unsigned char)+0x53c>)
    1ef4:	488c      	ldr	r0, [pc, #560]	; (2128 <print_palette(unsigned char)+0x538>)
    1ef6:	f7fe fd33 	bl	960 <Print::println(char const*)>
    1efa:	bd10      	pop	{r4, pc}
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
		case 53:	Serial.println("hallows_gp");					break;
    1efc:	498c      	ldr	r1, [pc, #560]	; (2130 <print_palette(unsigned char)+0x540>)
    1efe:	488a      	ldr	r0, [pc, #552]	; (2128 <print_palette(unsigned char)+0x538>)
    1f00:	f7fe fd2e 	bl	960 <Print::println(char const*)>
    1f04:	bd10      	pop	{r4, pc}
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
		case 52:	Serial.println("ofaurora_gp");					break;
    1f06:	498b      	ldr	r1, [pc, #556]	; (2134 <print_palette(unsigned char)+0x544>)
    1f08:	4887      	ldr	r0, [pc, #540]	; (2128 <print_palette(unsigned char)+0x538>)
    1f0a:	f7fe fd29 	bl	960 <Print::println(char const*)>
    1f0e:	bd10      	pop	{r4, pc}
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
		case 51:	Serial.println("slope_gp");						break;
    1f10:	4989      	ldr	r1, [pc, #548]	; (2138 <print_palette(unsigned char)+0x548>)
    1f12:	4885      	ldr	r0, [pc, #532]	; (2128 <print_palette(unsigned char)+0x538>)
    1f14:	f7fe fd24 	bl	960 <Print::println(char const*)>
    1f18:	bd10      	pop	{r4, pc}
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
		case 50:	Serial.println("Tropical_Colors_gp");			break;
    1f1a:	4988      	ldr	r1, [pc, #544]	; (213c <print_palette(unsigned char)+0x54c>)
    1f1c:	4882      	ldr	r0, [pc, #520]	; (2128 <print_palette(unsigned char)+0x538>)
    1f1e:	f7fe fd1f 	bl	960 <Print::println(char const*)>
    1f22:	bd10      	pop	{r4, pc}
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
		case 49:	Serial.println("Wizzl019_gp");					break;
    1f24:	4986      	ldr	r1, [pc, #536]	; (2140 <print_palette(unsigned char)+0x550>)
    1f26:	4880      	ldr	r0, [pc, #512]	; (2128 <print_palette(unsigned char)+0x538>)
    1f28:	f7fe fd1a 	bl	960 <Print::println(char const*)>
    1f2c:	bd10      	pop	{r4, pc}
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
		case 48:	Serial.println("Skydye11_gp");					break;
    1f2e:	4985      	ldr	r1, [pc, #532]	; (2144 <print_palette(unsigned char)+0x554>)
    1f30:	487d      	ldr	r0, [pc, #500]	; (2128 <print_palette(unsigned char)+0x538>)
    1f32:	f7fe fd15 	bl	960 <Print::println(char const*)>
    1f36:	bd10      	pop	{r4, pc}
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
		case 47:	Serial.println("froth316_gp");					break;
    1f38:	4983      	ldr	r1, [pc, #524]	; (2148 <print_palette(unsigned char)+0x558>)
    1f3a:	487b      	ldr	r0, [pc, #492]	; (2128 <print_palette(unsigned char)+0x538>)
    1f3c:	f7fe fd10 	bl	960 <Print::println(char const*)>
    1f40:	bd10      	pop	{r4, pc}
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
		case 46:	Serial.println("es_emerald_dragon_01_gp");		break;
    1f42:	4982      	ldr	r1, [pc, #520]	; (214c <print_palette(unsigned char)+0x55c>)
    1f44:	4878      	ldr	r0, [pc, #480]	; (2128 <print_palette(unsigned char)+0x538>)
    1f46:	f7fe fd0b 	bl	960 <Print::println(char const*)>
    1f4a:	bd10      	pop	{r4, pc}
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
		case 45:	Serial.println("b_gp");							break;
    1f4c:	4980      	ldr	r1, [pc, #512]	; (2150 <print_palette(unsigned char)+0x560>)
    1f4e:	4876      	ldr	r0, [pc, #472]	; (2128 <print_palette(unsigned char)+0x538>)
    1f50:	f7fe fd06 	bl	960 <Print::println(char const*)>
    1f54:	bd10      	pop	{r4, pc}
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
		case 44:	Serial.println("a_gp");							break;
    1f56:	497f      	ldr	r1, [pc, #508]	; (2154 <print_palette(unsigned char)+0x564>)
    1f58:	4873      	ldr	r0, [pc, #460]	; (2128 <print_palette(unsigned char)+0x538>)
    1f5a:	f7fe fd01 	bl	960 <Print::println(char const*)>
    1f5e:	bd10      	pop	{r4, pc}
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
		case 43:	Serial.println("standard_gp");					break;
    1f60:	497d      	ldr	r1, [pc, #500]	; (2158 <print_palette(unsigned char)+0x568>)
    1f62:	4871      	ldr	r0, [pc, #452]	; (2128 <print_palette(unsigned char)+0x538>)
    1f64:	f7fe fcfc 	bl	960 <Print::println(char const*)>
    1f68:	bd10      	pop	{r4, pc}
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
		case 42:	Serial.println("Fire_1_gp");					break;
    1f6a:	497c      	ldr	r1, [pc, #496]	; (215c <print_palette(unsigned char)+0x56c>)
    1f6c:	486e      	ldr	r0, [pc, #440]	; (2128 <print_palette(unsigned char)+0x538>)
    1f6e:	f7fe fcf7 	bl	960 <Print::println(char const*)>
    1f72:	bd10      	pop	{r4, pc}
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
		case 41:	Serial.println("Orange_to_Purple_gp");			break;
    1f74:	497a      	ldr	r1, [pc, #488]	; (2160 <print_palette(unsigned char)+0x570>)
    1f76:	486c      	ldr	r0, [pc, #432]	; (2128 <print_palette(unsigned char)+0x538>)
    1f78:	f7fe fcf2 	bl	960 <Print::println(char const*)>
    1f7c:	bd10      	pop	{r4, pc}
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
		case 40:	Serial.println("Ribbon_Colors_gp");				break;
    1f7e:	4979      	ldr	r1, [pc, #484]	; (2164 <print_palette(unsigned char)+0x574>)
    1f80:	4869      	ldr	r0, [pc, #420]	; (2128 <print_palette(unsigned char)+0x538>)
    1f82:	f7fe fced 	bl	960 <Print::println(char const*)>
    1f86:	bd10      	pop	{r4, pc}
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
		case 39:	Serial.println("alarm_p4_0_2_gp");				break;
    1f88:	4977      	ldr	r1, [pc, #476]	; (2168 <print_palette(unsigned char)+0x578>)
    1f8a:	4867      	ldr	r0, [pc, #412]	; (2128 <print_palette(unsigned char)+0x538>)
    1f8c:	f7fe fce8 	bl	960 <Print::println(char const*)>
    1f90:	bd10      	pop	{r4, pc}
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
		case 38:	Serial.println("cw1_029_gp");					break;
    1f92:	4976      	ldr	r1, [pc, #472]	; (216c <print_palette(unsigned char)+0x57c>)
    1f94:	4864      	ldr	r0, [pc, #400]	; (2128 <print_palette(unsigned char)+0x538>)
    1f96:	f7fe fce3 	bl	960 <Print::println(char const*)>
    1f9a:	bd10      	pop	{r4, pc}
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
		case 37:	Serial.println("vibrant_gp");					break;
    1f9c:	4974      	ldr	r1, [pc, #464]	; (2170 <print_palette(unsigned char)+0x580>)
    1f9e:	4862      	ldr	r0, [pc, #392]	; (2128 <print_palette(unsigned char)+0x538>)
    1fa0:	f7fe fcde 	bl	960 <Print::println(char const*)>
    1fa4:	bd10      	pop	{r4, pc}
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
		case 36:	Serial.println("bhw3_30_gp");					break;
    1fa6:	4973      	ldr	r1, [pc, #460]	; (2174 <print_palette(unsigned char)+0x584>)
    1fa8:	485f      	ldr	r0, [pc, #380]	; (2128 <print_palette(unsigned char)+0x538>)
    1faa:	f7fe fcd9 	bl	960 <Print::println(char const*)>
    1fae:	bd10      	pop	{r4, pc}
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
		case 35:	Serial.println("bhw3_21_gp");					break;
    1fb0:	4971      	ldr	r1, [pc, #452]	; (2178 <print_palette(unsigned char)+0x588>)
    1fb2:	485d      	ldr	r0, [pc, #372]	; (2128 <print_palette(unsigned char)+0x538>)
    1fb4:	f7fe fcd4 	bl	960 <Print::println(char const*)>
    1fb8:	bd10      	pop	{r4, pc}
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
		case 34:	Serial.println("bhw2_14_gp");					break;
    1fba:	4970      	ldr	r1, [pc, #448]	; (217c <print_palette(unsigned char)+0x58c>)
    1fbc:	485a      	ldr	r0, [pc, #360]	; (2128 <print_palette(unsigned char)+0x538>)
    1fbe:	f7fe fccf 	bl	960 <Print::println(char const*)>
    1fc2:	bd10      	pop	{r4, pc}
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
		case 33:	Serial.println("bhw2_10_gp");					break;
    1fc4:	496e      	ldr	r1, [pc, #440]	; (2180 <print_palette(unsigned char)+0x590>)
    1fc6:	4858      	ldr	r0, [pc, #352]	; (2128 <print_palette(unsigned char)+0x538>)
    1fc8:	f7fe fcca 	bl	960 <Print::println(char const*)>
    1fcc:	bd10      	pop	{r4, pc}
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
		case 32:	Serial.println("bhw2_49_gp");					break;
    1fce:	496d      	ldr	r1, [pc, #436]	; (2184 <print_palette(unsigned char)+0x594>)
    1fd0:	4855      	ldr	r0, [pc, #340]	; (2128 <print_palette(unsigned char)+0x538>)
    1fd2:	f7fe fcc5 	bl	960 <Print::println(char const*)>
    1fd6:	bd10      	pop	{r4, pc}
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
		case 31:	Serial.println("bhw2_22_gp");					break;
    1fd8:	496b      	ldr	r1, [pc, #428]	; (2188 <print_palette(unsigned char)+0x598>)
    1fda:	4853      	ldr	r0, [pc, #332]	; (2128 <print_palette(unsigned char)+0x538>)
    1fdc:	f7fe fcc0 	bl	960 <Print::println(char const*)>
    1fe0:	bd10      	pop	{r4, pc}
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
		case 30:	Serial.println("bhw2_23_gp");					break;
    1fe2:	496a      	ldr	r1, [pc, #424]	; (218c <print_palette(unsigned char)+0x59c>)
    1fe4:	4850      	ldr	r0, [pc, #320]	; (2128 <print_palette(unsigned char)+0x538>)
    1fe6:	f7fe fcbb 	bl	960 <Print::println(char const*)>
    1fea:	bd10      	pop	{r4, pc}
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
		case 29:	Serial.println("bhw1_28_gp");					break;
    1fec:	4968      	ldr	r1, [pc, #416]	; (2190 <print_palette(unsigned char)+0x5a0>)
    1fee:	484e      	ldr	r0, [pc, #312]	; (2128 <print_palette(unsigned char)+0x538>)
    1ff0:	f7fe fcb6 	bl	960 <Print::println(char const*)>
    1ff4:	bd10      	pop	{r4, pc}
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
		case 28:	Serial.println("bhw1_26_gp");					break;
    1ff6:	4967      	ldr	r1, [pc, #412]	; (2194 <print_palette(unsigned char)+0x5a4>)
    1ff8:	484b      	ldr	r0, [pc, #300]	; (2128 <print_palette(unsigned char)+0x538>)
    1ffa:	f7fe fcb1 	bl	960 <Print::println(char const*)>
    1ffe:	bd10      	pop	{r4, pc}
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
		case 27:	Serial.println("bhw1_greeny_gp");				break;
    2000:	4965      	ldr	r1, [pc, #404]	; (2198 <print_palette(unsigned char)+0x5a8>)
    2002:	4849      	ldr	r0, [pc, #292]	; (2128 <print_palette(unsigned char)+0x538>)
    2004:	f7fe fcac 	bl	960 <Print::println(char const*)>
    2008:	bd10      	pop	{r4, pc}
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
		case 26:	Serial.println("Blue_Cyan_Yellow_gp");			break;
    200a:	4964      	ldr	r1, [pc, #400]	; (219c <print_palette(unsigned char)+0x5ac>)
    200c:	4846      	ldr	r0, [pc, #280]	; (2128 <print_palette(unsigned char)+0x538>)
    200e:	f7fe fca7 	bl	960 <Print::println(char const*)>
    2012:	bd10      	pop	{r4, pc}
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
		case 25:	Serial.println("BlacK_Red_Magenta_Yellow_gp");	break;
    2014:	4962      	ldr	r1, [pc, #392]	; (21a0 <print_palette(unsigned char)+0x5b0>)
    2016:	4844      	ldr	r0, [pc, #272]	; (2128 <print_palette(unsigned char)+0x538>)
    2018:	f7fe fca2 	bl	960 <Print::println(char const*)>
    201c:	bd10      	pop	{r4, pc}
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
		case 24:	Serial.println("BlacK_Magenta_Red_gp");			break;
    201e:	4961      	ldr	r1, [pc, #388]	; (21a4 <print_palette(unsigned char)+0x5b4>)
    2020:	4841      	ldr	r0, [pc, #260]	; (2128 <print_palette(unsigned char)+0x538>)
    2022:	f7fe fc9d 	bl	960 <Print::println(char const*)>
    2026:	bd10      	pop	{r4, pc}
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
		case 23:	Serial.println("BlacK_Blue_Magenta_White_gp");	break;
    2028:	495f      	ldr	r1, [pc, #380]	; (21a8 <print_palette(unsigned char)+0x5b8>)
    202a:	483f      	ldr	r0, [pc, #252]	; (2128 <print_palette(unsigned char)+0x538>)
    202c:	f7fe fc98 	bl	960 <Print::println(char const*)>
    2030:	bd10      	pop	{r4, pc}
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
		case 22:	Serial.println("es_autumn_19_gp");				break;
    2032:	495e      	ldr	r1, [pc, #376]	; (21ac <print_palette(unsigned char)+0x5bc>)
    2034:	483c      	ldr	r0, [pc, #240]	; (2128 <print_palette(unsigned char)+0x538>)
    2036:	f7fe fc93 	bl	960 <Print::println(char const*)>
    203a:	bd10      	pop	{r4, pc}
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
		case 21:	Serial.println("Sunset_Real_gp");				break;
    203c:	495c      	ldr	r1, [pc, #368]	; (21b0 <print_palette(unsigned char)+0x5c0>)
    203e:	483a      	ldr	r0, [pc, #232]	; (2128 <print_palette(unsigned char)+0x538>)
    2040:	f7fe fc8e 	bl	960 <Print::println(char const*)>
    2044:	bd10      	pop	{r4, pc}
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
		case 20:	Serial.println("Magenta_Evening_gp");			break;
    2046:	495b      	ldr	r1, [pc, #364]	; (21b4 <print_palette(unsigned char)+0x5c4>)
    2048:	4837      	ldr	r0, [pc, #220]	; (2128 <print_palette(unsigned char)+0x538>)
    204a:	f7fe fc89 	bl	960 <Print::println(char const*)>
    204e:	bd10      	pop	{r4, pc}
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
		case 19:	Serial.println("Colorfull_gp");					break;
    2050:	4959      	ldr	r1, [pc, #356]	; (21b8 <print_palette(unsigned char)+0x5c8>)
    2052:	4835      	ldr	r0, [pc, #212]	; (2128 <print_palette(unsigned char)+0x538>)
    2054:	f7fe fc84 	bl	960 <Print::println(char const*)>
    2058:	bd10      	pop	{r4, pc}
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
		case 18:	Serial.println("fire_gp");						break;
    205a:	4958      	ldr	r1, [pc, #352]	; (21bc <print_palette(unsigned char)+0x5cc>)
    205c:	4832      	ldr	r0, [pc, #200]	; (2128 <print_palette(unsigned char)+0x538>)
    205e:	f7fe fc7f 	bl	960 <Print::println(char const*)>
    2062:	bd10      	pop	{r4, pc}
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
		case 17:	Serial.println("lava_gp");						break;
    2064:	4956      	ldr	r1, [pc, #344]	; (21c0 <print_palette(unsigned char)+0x5d0>)
    2066:	4830      	ldr	r0, [pc, #192]	; (2128 <print_palette(unsigned char)+0x538>)
    2068:	f7fe fc7a 	bl	960 <Print::println(char const*)>
    206c:	bd10      	pop	{r4, pc}
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
		case 16:	Serial.println("es_emerald_dragon_08_gp");		break;
    206e:	4955      	ldr	r1, [pc, #340]	; (21c4 <print_palette(unsigned char)+0x5d4>)
    2070:	482d      	ldr	r0, [pc, #180]	; (2128 <print_palette(unsigned char)+0x538>)
    2072:	f7fe fc75 	bl	960 <Print::println(char const*)>
    2076:	bd10      	pop	{r4, pc}
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
		case 15:	Serial.println("Fuschia_7_gp");					break;
    2078:	4953      	ldr	r1, [pc, #332]	; (21c8 <print_palette(unsigned char)+0x5d8>)
    207a:	482b      	ldr	r0, [pc, #172]	; (2128 <print_palette(unsigned char)+0x538>)
    207c:	f7fe fc70 	bl	960 <Print::println(char const*)>
    2080:	bd10      	pop	{r4, pc}
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
		case 14:	Serial.println("ib15_gp");						break;
    2082:	4952      	ldr	r1, [pc, #328]	; (21cc <print_palette(unsigned char)+0x5dc>)
    2084:	4828      	ldr	r0, [pc, #160]	; (2128 <print_palette(unsigned char)+0x538>)
    2086:	f7fe fc6b 	bl	960 <Print::println(char const*)>
    208a:	bd10      	pop	{r4, pc}
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
		case 13:	Serial.println("GMT_drywet_gp");				break;
    208c:	4950      	ldr	r1, [pc, #320]	; (21d0 <print_palette(unsigned char)+0x5e0>)
    208e:	4826      	ldr	r0, [pc, #152]	; (2128 <print_palette(unsigned char)+0x538>)
    2090:	f7fe fc66 	bl	960 <Print::println(char const*)>
    2094:	bd10      	pop	{r4, pc}
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
		case 12:	Serial.println("gr64_hult_gp");					break;
    2096:	494f      	ldr	r1, [pc, #316]	; (21d4 <print_palette(unsigned char)+0x5e4>)
    2098:	4823      	ldr	r0, [pc, #140]	; (2128 <print_palette(unsigned char)+0x538>)
    209a:	f7fe fc61 	bl	960 <Print::println(char const*)>
    209e:	bd10      	pop	{r4, pc}
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
		case 11:	Serial.println("gr65_hult_gp");					break;
    20a0:	494d      	ldr	r1, [pc, #308]	; (21d8 <print_palette(unsigned char)+0x5e8>)
    20a2:	4821      	ldr	r0, [pc, #132]	; (2128 <print_palette(unsigned char)+0x538>)
    20a4:	f7fe fc5c 	bl	960 <Print::println(char const*)>
    20a8:	bd10      	pop	{r4, pc}
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
		case 10:	Serial.println("rainbowsherbet_gp");			break;
    20aa:	494c      	ldr	r1, [pc, #304]	; (21dc <print_palette(unsigned char)+0x5ec>)
    20ac:	481e      	ldr	r0, [pc, #120]	; (2128 <print_palette(unsigned char)+0x538>)
    20ae:	f7fe fc57 	bl	960 <Print::println(char const*)>
    20b2:	bd10      	pop	{r4, pc}
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
		case 9:		Serial.println("es_landscape_33_gp");			break;
    20b4:	494a      	ldr	r1, [pc, #296]	; (21e0 <print_palette(unsigned char)+0x5f0>)
    20b6:	481c      	ldr	r0, [pc, #112]	; (2128 <print_palette(unsigned char)+0x538>)
    20b8:	f7fe fc52 	bl	960 <Print::println(char const*)>
    20bc:	bd10      	pop	{r4, pc}
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
		case 8:		Serial.println("es_landscape_64_gp");			break;
    20be:	4949      	ldr	r1, [pc, #292]	; (21e4 <print_palette(unsigned char)+0x5f4>)
    20c0:	4819      	ldr	r0, [pc, #100]	; (2128 <print_palette(unsigned char)+0x538>)
    20c2:	f7fe fc4d 	bl	960 <Print::println(char const*)>
    20c6:	bd10      	pop	{r4, pc}
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
		case 7:		Serial.println("es_ocean_breeze_036_gp");		break;
    20c8:	4947      	ldr	r1, [pc, #284]	; (21e8 <print_palette(unsigned char)+0x5f8>)
    20ca:	4817      	ldr	r0, [pc, #92]	; (2128 <print_palette(unsigned char)+0x538>)
    20cc:	f7fe fc48 	bl	960 <Print::println(char const*)>
    20d0:	bd10      	pop	{r4, pc}
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
		case 6:		Serial.println("es_ocean_breeze_068_gp");		break;
    20d2:	4946      	ldr	r1, [pc, #280]	; (21ec <print_palette(unsigned char)+0x5fc>)
    20d4:	4814      	ldr	r0, [pc, #80]	; (2128 <print_palette(unsigned char)+0x538>)
    20d6:	f7fe fc43 	bl	960 <Print::println(char const*)>
    20da:	bd10      	pop	{r4, pc}
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
		case 5:		Serial.println("Coral_reef_gp");				break;
    20dc:	4944      	ldr	r1, [pc, #272]	; (21f0 <print_palette(unsigned char)+0x600>)
    20de:	4812      	ldr	r0, [pc, #72]	; (2128 <print_palette(unsigned char)+0x538>)
    20e0:	f7fe fc3e 	bl	960 <Print::println(char const*)>
    20e4:	bd10      	pop	{r4, pc}
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
		case 4:		Serial.println("es_pinksplash_07_gp");			break;
    20e6:	4943      	ldr	r1, [pc, #268]	; (21f4 <print_palette(unsigned char)+0x604>)
    20e8:	480f      	ldr	r0, [pc, #60]	; (2128 <print_palette(unsigned char)+0x538>)
    20ea:	f7fe fc39 	bl	960 <Print::println(char const*)>
    20ee:	bd10      	pop	{r4, pc}
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
		case 3:		Serial.println("es_pinksplash_08_gp");			break;
    20f0:	4941      	ldr	r1, [pc, #260]	; (21f8 <print_palette(unsigned char)+0x608>)
    20f2:	480d      	ldr	r0, [pc, #52]	; (2128 <print_palette(unsigned char)+0x538>)
    20f4:	f7fe fc34 	bl	960 <Print::println(char const*)>
    20f8:	bd10      	pop	{r4, pc}
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
		case 2:		Serial.println("Analogous_1_gp");				break;
    20fa:	4940      	ldr	r1, [pc, #256]	; (21fc <print_palette(unsigned char)+0x60c>)
    20fc:	480a      	ldr	r0, [pc, #40]	; (2128 <print_palette(unsigned char)+0x538>)
    20fe:	f7fe fc2f 	bl	960 <Print::println(char const*)>
    2102:	bd10      	pop	{r4, pc}
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
		case 1:		Serial.println("rgi_15_gp");					break;
    2104:	493e      	ldr	r1, [pc, #248]	; (2200 <print_palette(unsigned char)+0x610>)
    2106:	4808      	ldr	r0, [pc, #32]	; (2128 <print_palette(unsigned char)+0x538>)
    2108:	f7fe fc2a 	bl	960 <Print::println(char const*)>
    210c:	bd10      	pop	{r4, pc}
void print_palette(uint8_t pn) {
	Serial.print("|| (P) Palette (");
	Serial.print(pn);
	Serial.print(") ");
	switch (pn) {
		case 0:		Serial.println("ib_jul01_gp");					break;
    210e:	493d      	ldr	r1, [pc, #244]	; (2204 <print_palette(unsigned char)+0x614>)
    2110:	4805      	ldr	r0, [pc, #20]	; (2128 <print_palette(unsigned char)+0x538>)
    2112:	f7fe fc25 	bl	960 <Print::println(char const*)>
    2116:	bd10      	pop	{r4, pc}
		case 88:	Serial.println("cyberpunk_neon_gp");			break;
		case 89:	Serial.println("blue_fire_gp");					break;
		case 90:	Serial.println("purplefly_gp");					break;
		case 91:	Serial.println("rainbow2_gp");					break;
		case 92:	Serial.println("blade_runner_2049_gp");			break;
		default:	Serial.println("Not a gradient palette");		break;
    2118:	493b      	ldr	r1, [pc, #236]	; (2208 <print_palette(unsigned char)+0x618>)
    211a:	4803      	ldr	r0, [pc, #12]	; (2128 <print_palette(unsigned char)+0x538>)
    211c:	f7fe fc20 	bl	960 <Print::println(char const*)>
    2120:	bd10      	pop	{r4, pc}
    2122:	bf00      	nop
    2124:	00010e44 	.word	0x00010e44
    2128:	1fff878c 	.word	0x1fff878c
    212c:	00010e34 	.word	0x00010e34
    2130:	00010e28 	.word	0x00010e28
    2134:	00010e1c 	.word	0x00010e1c
    2138:	00010e10 	.word	0x00010e10
    213c:	00010dfc 	.word	0x00010dfc
    2140:	00010df0 	.word	0x00010df0
    2144:	00010de4 	.word	0x00010de4
    2148:	00010dd8 	.word	0x00010dd8
    214c:	00010dc0 	.word	0x00010dc0
    2150:	00010db8 	.word	0x00010db8
    2154:	00010e50 	.word	0x00010e50
    2158:	00010dac 	.word	0x00010dac
    215c:	00010da0 	.word	0x00010da0
    2160:	00010d8c 	.word	0x00010d8c
    2164:	00010d78 	.word	0x00010d78
    2168:	00010d68 	.word	0x00010d68
    216c:	00010d5c 	.word	0x00010d5c
    2170:	00010d50 	.word	0x00010d50
    2174:	00010d44 	.word	0x00010d44
    2178:	00010d38 	.word	0x00010d38
    217c:	00010d2c 	.word	0x00010d2c
    2180:	00010d20 	.word	0x00010d20
    2184:	00010d14 	.word	0x00010d14
    2188:	00010d08 	.word	0x00010d08
    218c:	00010cfc 	.word	0x00010cfc
    2190:	00010cf0 	.word	0x00010cf0
    2194:	00010ce4 	.word	0x00010ce4
    2198:	00010cd4 	.word	0x00010cd4
    219c:	00010cc0 	.word	0x00010cc0
    21a0:	00010ca4 	.word	0x00010ca4
    21a4:	00010c8c 	.word	0x00010c8c
    21a8:	00010c70 	.word	0x00010c70
    21ac:	00010c60 	.word	0x00010c60
    21b0:	00010c50 	.word	0x00010c50
    21b4:	00010c3c 	.word	0x00010c3c
    21b8:	00010c2c 	.word	0x00010c2c
    21bc:	00010c24 	.word	0x00010c24
    21c0:	00010c1c 	.word	0x00010c1c
    21c4:	00010c04 	.word	0x00010c04
    21c8:	00010bf4 	.word	0x00010bf4
    21cc:	00010bec 	.word	0x00010bec
    21d0:	00010bdc 	.word	0x00010bdc
    21d4:	00010bcc 	.word	0x00010bcc
    21d8:	00010bbc 	.word	0x00010bbc
    21dc:	00010ba8 	.word	0x00010ba8
    21e0:	00010b94 	.word	0x00010b94
    21e4:	00010b80 	.word	0x00010b80
    21e8:	00010b68 	.word	0x00010b68
    21ec:	00010b50 	.word	0x00010b50
    21f0:	00010b40 	.word	0x00010b40
    21f4:	00010b2c 	.word	0x00010b2c
    21f8:	00010b18 	.word	0x00010b18
    21fc:	00010b08 	.word	0x00010b08
    2200:	00010afc 	.word	0x00010afc
    2204:	00010af0 	.word	0x00010af0
    2208:	00011098 	.word	0x00011098

0000220c <LEDDebug(LEDStruct&)>:

void print_palette(uint8_t pn); // Forward declaration


// Debugging function
void LEDDebug(LEDStruct& leds) {
    220c:	b538      	push	{r3, r4, r5, lr}
    220e:	2100      	movs	r1, #0
    2210:	4604      	mov	r4, r0
    2212:	4894      	ldr	r0, [pc, #592]	; (2464 <LEDDebug(LEDStruct&)+0x258>)
    2214:	f00b fcec 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2218:	4893      	ldr	r0, [pc, #588]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    221a:	f00b feed 	bl	dff8 <Print::println()>
    221e:	2122      	movs	r1, #34	; 0x22
    2220:	4892      	ldr	r0, [pc, #584]	; (246c <LEDDebug(LEDStruct&)+0x260>)
    2222:	f00b fce5 	bl	dbf0 <usb_serial_write>
    2226:	4890      	ldr	r0, [pc, #576]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2228:	f00b fee6 	bl	dff8 <Print::println()>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    222c:	f894 31c6 	ldrb.w	r3, [r4, #454]	; 0x1c6
    2230:	2b00      	cmp	r3, #0
    2232:	f000 80b5 	beq.w	23a0 <LEDDebug(LEDStruct&)+0x194>
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2236:	2b01      	cmp	r3, #1
    2238:	f000 8695 	beq.w	2f66 <LEDDebug(LEDStruct&)+0xd5a>
    223c:	2113      	movs	r1, #19
    223e:	488c      	ldr	r0, [pc, #560]	; (2470 <LEDDebug(LEDStruct&)+0x264>)
    2240:	f00b fcd6 	bl	dbf0 <usb_serial_write>

	// Print Standard Variables
	Serial.print("|| (B) Brightness:\t");
	Serial.print(max_bright);
    2244:	4b8b      	ldr	r3, [pc, #556]	; (2474 <LEDDebug(LEDStruct&)+0x268>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2246:	4888      	ldr	r0, [pc, #544]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2248:	7819      	ldrb	r1, [r3, #0]
    224a:	220a      	movs	r2, #10
    224c:	2300      	movs	r3, #0
    224e:	f00b fee3 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2252:	2103      	movs	r1, #3
    2254:	4888      	ldr	r0, [pc, #544]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    2256:	f00b fccb 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    225a:	4883      	ldr	r0, [pc, #524]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    225c:	f00b fecc 	bl	dff8 <Print::println()>
    2260:	2113      	movs	r1, #19
    2262:	4886      	ldr	r0, [pc, #536]	; (247c <LEDDebug(LEDStruct&)+0x270>)
    2264:	f00b fcc4 	bl	dbf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2268:	2300      	movs	r3, #0
    226a:	220a      	movs	r2, #10
    226c:	f894 11c3 	ldrb.w	r1, [r4, #451]	; 0x1c3
    2270:	487d      	ldr	r0, [pc, #500]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2272:	f00b fed1 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2276:	2103      	movs	r1, #3
    2278:	487f      	ldr	r0, [pc, #508]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    227a:	f00b fcb9 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    227e:	487a      	ldr	r0, [pc, #488]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2280:	f00b feba 	bl	dff8 <Print::println()>
    2284:	2111      	movs	r1, #17
    2286:	487e      	ldr	r0, [pc, #504]	; (2480 <LEDDebug(LEDStruct&)+0x274>)
    2288:	f00b fcb2 	bl	dbf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    228c:	f894 11c5 	ldrb.w	r1, [r4, #453]	; 0x1c5
    2290:	4875      	ldr	r0, [pc, #468]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2292:	f00b ff01 	bl	e098 <Print::print(long)>
    2296:	2103      	movs	r1, #3
    2298:	4877      	ldr	r0, [pc, #476]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    229a:	f00b fca9 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    229e:	4872      	ldr	r0, [pc, #456]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    22a0:	f00b feaa 	bl	dff8 <Print::println()>
    22a4:	2111      	movs	r1, #17
    22a6:	4877      	ldr	r0, [pc, #476]	; (2484 <LEDDebug(LEDStruct&)+0x278>)
    22a8:	f00b fca2 	bl	dbf0 <usb_serial_write>
	Serial.println("\t||");
	Serial.print("|| (N) this_dir:\t");
	Serial.print(leds.this_dir);
	Serial.println("\t||");
	Serial.print("|| (F) blending:\t");
	if (leds.current_blending == LINEARBLEND) { Serial.print("LINEAR"); }
    22ac:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
    22b0:	2b01      	cmp	r3, #1
    22b2:	d07a      	beq.n	23aa <LEDDebug(LEDStruct&)+0x19e>
    22b4:	2107      	movs	r1, #7
    22b6:	4874      	ldr	r0, [pc, #464]	; (2488 <LEDDebug(LEDStruct&)+0x27c>)
    22b8:	f00b fc9a 	bl	dbf0 <usb_serial_write>
    22bc:	2103      	movs	r1, #3
    22be:	486e      	ldr	r0, [pc, #440]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    22c0:	f00b fc96 	bl	dbf0 <usb_serial_write>
    22c4:	4868      	ldr	r0, [pc, #416]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    22c6:	f00b fe97 	bl	dff8 <Print::println()>
    22ca:	2114      	movs	r1, #20
    22cc:	486f      	ldr	r0, [pc, #444]	; (248c <LEDDebug(LEDStruct&)+0x280>)
    22ce:	f00b fc8f 	bl	dbf0 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22d2:	2300      	movs	r3, #0
    22d4:	220a      	movs	r2, #10
    22d6:	f894 122b 	ldrb.w	r1, [r4, #555]	; 0x22b
    22da:	4863      	ldr	r0, [pc, #396]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    22dc:	f00b fe9c 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    22e0:	2103      	movs	r1, #3
    22e2:	4865      	ldr	r0, [pc, #404]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    22e4:	f00b fc84 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    22e8:	485f      	ldr	r0, [pc, #380]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    22ea:	f00b fe85 	bl	dff8 <Print::println()>
    22ee:	2115      	movs	r1, #21
    22f0:	4867      	ldr	r0, [pc, #412]	; (2490 <LEDDebug(LEDStruct&)+0x284>)
    22f2:	f00b fc7d 	bl	dbf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    22f6:	f894 122e 	ldrb.w	r1, [r4, #558]	; 0x22e
    22fa:	485b      	ldr	r0, [pc, #364]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    22fc:	f00b fecc 	bl	e098 <Print::print(long)>
    2300:	2103      	movs	r1, #3
    2302:	485d      	ldr	r0, [pc, #372]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    2304:	f00b fc74 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2308:	4857      	ldr	r0, [pc, #348]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    230a:	f00b fe75 	bl	dff8 <Print::println()>
    230e:	2111      	movs	r1, #17
    2310:	4860      	ldr	r0, [pc, #384]	; (2494 <LEDDebug(LEDStruct&)+0x288>)
    2312:	f00b fc6d 	bl	dbf0 <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2316:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    231a:	4853      	ldr	r0, [pc, #332]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    231c:	f00b febc 	bl	e098 <Print::print(long)>
    2320:	2103      	movs	r1, #3
    2322:	4855      	ldr	r0, [pc, #340]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    2324:	f00b fc64 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    2328:	484f      	ldr	r0, [pc, #316]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    232a:	f00b fe65 	bl	dff8 <Print::println()>
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    232e:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
    2332:	bb83      	cbnz	r3, 2396 <LEDDebug(LEDStruct&)+0x18a>
    2334:	2122      	movs	r1, #34	; 0x22
    2336:	484d      	ldr	r0, [pc, #308]	; (246c <LEDDebug(LEDStruct&)+0x260>)
    2338:	f00b fc5a 	bl	dbf0 <usb_serial_write>
    233c:	484a      	ldr	r0, [pc, #296]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    233e:	f00b fe5b 	bl	dff8 <Print::println()>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
    2342:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
    2346:	2b22      	cmp	r3, #34	; 0x22
    2348:	f200 85ff 	bhi.w	2f4a <LEDDebug(LEDStruct&)+0xd3e>
    234c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2350:	05fd00b6 	.word	0x05fd00b6
    2354:	05fd05fd 	.word	0x05fd05fd
    2358:	05fd05fd 	.word	0x05fd05fd
    235c:	012c05fd 	.word	0x012c05fd
    2360:	05fd05fd 	.word	0x05fd05fd
    2364:	05fd05fd 	.word	0x05fd05fd
    2368:	05fd0187 	.word	0x05fd0187
    236c:	05fd05fd 	.word	0x05fd05fd
    2370:	05fd05fd 	.word	0x05fd05fd
    2374:	01a70195 	.word	0x01a70195
    2378:	01ab01a9 	.word	0x01ab01a9
    237c:	027101f0 	.word	0x027101f0
    2380:	03ac0350 	.word	0x03ac0350
    2384:	05fd03f1 	.word	0x05fd03f1
    2388:	04860430 	.word	0x04860430
    238c:	054a04f2 	.word	0x054a04f2
    2390:	05e2058d 	.word	0x05e2058d
    2394:	0032      	.short	0x0032
	Serial.print(leds.mode_initialized);
	Serial.println("\t||");
	Serial.print("|| use_palette:\t\t");
	Serial.print(leds.use_palette);
	Serial.println("\t||");
	if (leds.use_palette) { print_palette(leds.palette_index); }
    2396:	f894 0229 	ldrb.w	r0, [r4, #553]	; 0x229
    239a:	f7ff fc29 	bl	1bf0 <print_palette(unsigned char)>
    239e:	e7c9      	b.n	2334 <LEDDebug(LEDStruct&)+0x128>
void LEDDebug(LEDStruct& leds) {
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
    23a0:	493d      	ldr	r1, [pc, #244]	; (2498 <LEDDebug(LEDStruct&)+0x28c>)
    23a2:	4831      	ldr	r0, [pc, #196]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23a4:	f7fe fadc 	bl	960 <Print::println(char const*)>
    23a8:	e748      	b.n	223c <LEDDebug(LEDStruct&)+0x30>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23aa:	493c      	ldr	r1, [pc, #240]	; (249c <LEDDebug(LEDStruct&)+0x290>)
    23ac:	482e      	ldr	r0, [pc, #184]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23ae:	f7fe fac9 	bl	944 <Print::write(char const*)>
    23b2:	e783      	b.n	22bc <LEDDebug(LEDStruct&)+0xb0>
			Serial.print(leds.plasma_range2);
			Serial.println("\t||");
			break;

		case OUTWARD:
			Serial.println("==============OUTWARD=============");
    23b4:	493a      	ldr	r1, [pc, #232]	; (24a0 <LEDDebug(LEDStruct&)+0x294>)
    23b6:	482c      	ldr	r0, [pc, #176]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23b8:	f7fe fad2 	bl	960 <Print::println(char const*)>
    23bc:	4939      	ldr	r1, [pc, #228]	; (24a4 <LEDDebug(LEDStruct&)+0x298>)
    23be:	482a      	ldr	r0, [pc, #168]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23c0:	f7fe fac0 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23c4:	2300      	movs	r3, #0
    23c6:	220a      	movs	r2, #10
    23c8:	f894 1857 	ldrb.w	r1, [r4, #2135]	; 0x857
    23cc:	4826      	ldr	r0, [pc, #152]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23ce:	f00b fe23 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) out_fade:\t");
			Serial.print(leds.out_fade);
			Serial.println("\t||");
    23d2:	4929      	ldr	r1, [pc, #164]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    23d4:	4824      	ldr	r0, [pc, #144]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23d6:	f7fe fac3 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23da:	4933      	ldr	r1, [pc, #204]	; (24a8 <LEDDebug(LEDStruct&)+0x29c>)
    23dc:	4822      	ldr	r0, [pc, #136]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23de:	f7fe fab1 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    23e2:	2300      	movs	r3, #0
    23e4:	220a      	movs	r2, #10
    23e6:	f894 1853 	ldrb.w	r1, [r4, #2131]	; 0x853
    23ea:	481f      	ldr	r0, [pc, #124]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23ec:	f00b fe14 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) out_beat1:\t");
			Serial.print(leds.out_beat1);
			Serial.println("\t||");
    23f0:	4921      	ldr	r1, [pc, #132]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    23f2:	481d      	ldr	r0, [pc, #116]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23f4:	f7fe fab4 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    23f8:	492c      	ldr	r1, [pc, #176]	; (24ac <LEDDebug(LEDStruct&)+0x2a0>)
    23fa:	481b      	ldr	r0, [pc, #108]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    23fc:	f7fe faa2 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2400:	2300      	movs	r3, #0
    2402:	220a      	movs	r2, #10
    2404:	f894 1854 	ldrb.w	r1, [r4, #2132]	; 0x854
    2408:	4817      	ldr	r0, [pc, #92]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    240a:	f00b fe05 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) out_beat2:\t");
			Serial.print(leds.out_beat2);
			Serial.println("\t||");
    240e:	491a      	ldr	r1, [pc, #104]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    2410:	4815      	ldr	r0, [pc, #84]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2412:	f7fe faa5 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2416:	4926      	ldr	r1, [pc, #152]	; (24b0 <LEDDebug(LEDStruct&)+0x2a4>)
    2418:	4813      	ldr	r0, [pc, #76]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    241a:	f7fe fa93 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    241e:	2300      	movs	r3, #0
    2420:	220a      	movs	r2, #10
    2422:	f894 1855 	ldrb.w	r1, [r4, #2133]	; 0x855
    2426:	4810      	ldr	r0, [pc, #64]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2428:	f00b fdf6 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) out_min1:\t");
			Serial.print(leds.out_min1);
			Serial.println("\t||");
    242c:	4912      	ldr	r1, [pc, #72]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    242e:	480e      	ldr	r0, [pc, #56]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2430:	f7fe fa96 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2434:	491f      	ldr	r1, [pc, #124]	; (24b4 <LEDDebug(LEDStruct&)+0x2a8>)
    2436:	480c      	ldr	r0, [pc, #48]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2438:	f7fe fa84 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    243c:	f894 1856 	ldrb.w	r1, [r4, #2134]	; 0x856
    2440:	4809      	ldr	r0, [pc, #36]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    2442:	2300      	movs	r3, #0
    2444:	220a      	movs	r2, #10
    2446:	f00b fde7 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) wave_beat:\t");
			Serial.print(leds.wave_beat);
			Serial.println("\t||");
			Serial.print("|| (b) wave_speed:\t");
			Serial.print(leds.wave_speed);
			Serial.println("\t||");
    244a:	490b      	ldr	r1, [pc, #44]	; (2478 <LEDDebug(LEDStruct&)+0x26c>)
    244c:	4806      	ldr	r0, [pc, #24]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
    244e:	f7fe fa87 	bl	960 <Print::println(char const*)>
    2452:	2123      	movs	r1, #35	; 0x23
    2454:	4818      	ldr	r0, [pc, #96]	; (24b8 <LEDDebug(LEDStruct&)+0x2ac>)
    2456:	f00b fbcb 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    245a:	4803      	ldr	r0, [pc, #12]	; (2468 <LEDDebug(LEDStruct&)+0x25c>)
			Serial.println("==========MODE TYPE ERROR=========");
			Serial.println("");
			break;
	}
	Serial.println("==================================\n");
}
    245c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2460:	f00b bdca 	b.w	dff8 <Print::println()>
    2464:	0001126c 	.word	0x0001126c
    2468:	1fff878c 	.word	0x1fff878c
    246c:	000110b0 	.word	0x000110b0
    2470:	0001111c 	.word	0x0001111c
    2474:	1fff873f 	.word	0x1fff873f
    2478:	00011130 	.word	0x00011130
    247c:	00011134 	.word	0x00011134
    2480:	00011148 	.word	0x00011148
    2484:	0001115c 	.word	0x0001115c
    2488:	00011178 	.word	0x00011178
    248c:	00011180 	.word	0x00011180
    2490:	00011198 	.word	0x00011198
    2494:	000111b0 	.word	0x000111b0
    2498:	000110d4 	.word	0x000110d4
    249c:	00011170 	.word	0x00011170
    24a0:	00011c10 	.word	0x00011c10
    24a4:	00011c34 	.word	0x00011c34
    24a8:	00011c48 	.word	0x00011c48
    24ac:	00011c5c 	.word	0x00011c5c
    24b0:	00011c70 	.word	0x00011c70
    24b4:	00011c84 	.word	0x00011c84
    24b8:	00011d08 	.word	0x00011d08
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    24bc:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    24c0:	2b04      	cmp	r3, #4
    24c2:	f000 8621 	beq.w	3108 <LEDDebug(LEDStruct&)+0xefc>
			else if(leds.mode_name == MULTI_JUGGLE)	{ Serial.println("===========MULTI JUGGLE==========="); }
    24c6:	2b06      	cmp	r3, #6
    24c8:	bf0c      	ite	eq
    24ca:	4983      	ldreq	r1, [pc, #524]	; (26d8 <LEDDebug(LEDStruct&)+0x4cc>)
			else									{ Serial.println("==============JUGGLE=============="); } // 34 characters
    24cc:	4983      	ldrne	r1, [pc, #524]	; (26dc <LEDDebug(LEDStruct&)+0x4d0>)
    24ce:	4884      	ldr	r0, [pc, #528]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24d0:	f7fe fa46 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24d4:	4983      	ldr	r1, [pc, #524]	; (26e4 <LEDDebug(LEDStruct&)+0x4d8>)
    24d6:	4882      	ldr	r0, [pc, #520]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24d8:	f7fe fa34 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24dc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    24e0:	487f      	ldr	r0, [pc, #508]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24e2:	f00b fdd9 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    24e6:	4980      	ldr	r1, [pc, #512]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    24e8:	487d      	ldr	r0, [pc, #500]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24ea:	f7fe fa39 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    24ee:	497f      	ldr	r1, [pc, #508]	; (26ec <LEDDebug(LEDStruct&)+0x4e0>)
    24f0:	487b      	ldr	r0, [pc, #492]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24f2:	f7fe fa27 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    24f6:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    24fa:	4879      	ldr	r0, [pc, #484]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    24fc:	f00b fdcc 	bl	e098 <Print::print(long)>
			Serial.print("|| (b) one_dir:\t\t");
			Serial.print(leds.juggle_one_dir);
			Serial.println("\t||");
    2500:	4979      	ldr	r1, [pc, #484]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2502:	4877      	ldr	r0, [pc, #476]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2504:	f7fe fa2c 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2508:	4979      	ldr	r1, [pc, #484]	; (26f0 <LEDDebug(LEDStruct&)+0x4e4>)
    250a:	4875      	ldr	r0, [pc, #468]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    250c:	f7fe fa1a 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2510:	f894 1236 	ldrb.w	r1, [r4, #566]	; 0x236
    2514:	4872      	ldr	r0, [pc, #456]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2516:	f00b fdbf 	bl	e098 <Print::print(long)>
			Serial.print("|| (c) phased:\t\t");
			Serial.print(leds.juggle_phased);
			Serial.println("\t||");
    251a:	4973      	ldr	r1, [pc, #460]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    251c:	4870      	ldr	r0, [pc, #448]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    251e:	f7fe fa1f 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2522:	4974      	ldr	r1, [pc, #464]	; (26f4 <LEDDebug(LEDStruct&)+0x4e8>)
    2524:	486e      	ldr	r0, [pc, #440]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2526:	f7fe fa0d 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    252a:	2300      	movs	r3, #0
    252c:	220a      	movs	r2, #10
    252e:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    2532:	486b      	ldr	r0, [pc, #428]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2534:	f00b fd70 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) numdots:\t\t");
			Serial.print(leds.juggle_numdots);
			Serial.println("\t||");
    2538:	496b      	ldr	r1, [pc, #428]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    253a:	4869      	ldr	r0, [pc, #420]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    253c:	f7fe fa10 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2540:	496d      	ldr	r1, [pc, #436]	; (26f8 <LEDDebug(LEDStruct&)+0x4ec>)
    2542:	4867      	ldr	r0, [pc, #412]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2544:	f7fe f9fe 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2548:	2300      	movs	r3, #0
    254a:	220a      	movs	r2, #10
    254c:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2550:	4863      	ldr	r0, [pc, #396]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2552:	f00b fd61 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) beat:\t\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2556:	4964      	ldr	r1, [pc, #400]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2558:	4861      	ldr	r0, [pc, #388]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    255a:	f7fe fa01 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    255e:	4967      	ldr	r1, [pc, #412]	; (26fc <LEDDebug(LEDStruct&)+0x4f0>)
    2560:	485f      	ldr	r0, [pc, #380]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2562:	f7fe f9ef 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2566:	2300      	movs	r3, #0
    2568:	220a      	movs	r2, #10
    256a:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    256e:	485c      	ldr	r0, [pc, #368]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2570:	f00b fd52 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) fade:\t\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2574:	495c      	ldr	r1, [pc, #368]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2576:	485a      	ldr	r0, [pc, #360]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2578:	f7fe f9f2 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    257c:	4960      	ldr	r1, [pc, #384]	; (2700 <LEDDebug(LEDStruct&)+0x4f4>)
    257e:	4858      	ldr	r0, [pc, #352]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2580:	f7fe f9e0 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2584:	2300      	movs	r3, #0
    2586:	220a      	movs	r2, #10
    2588:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    258c:	4854      	ldr	r0, [pc, #336]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    258e:	f00b fd43 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) diff:\t\t");
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
    2592:	4955      	ldr	r1, [pc, #340]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2594:	4852      	ldr	r0, [pc, #328]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2596:	f7fe f9e3 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    259a:	495a      	ldr	r1, [pc, #360]	; (2704 <LEDDebug(LEDStruct&)+0x4f8>)
    259c:	4850      	ldr	r0, [pc, #320]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    259e:	f7fe f9d1 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25a2:	f894 1234 	ldrb.w	r1, [r4, #564]	; 0x234
    25a6:	e072      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.juggle_index_reset);
			Serial.println("\t||");
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
    25a8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    25ac:	2b08      	cmp	r3, #8
    25ae:	f000 858c 	beq.w	30ca <LEDDebug(LEDStruct&)+0xebe>
    25b2:	2b0a      	cmp	r3, #10
    25b4:	f000 85ae 	beq.w	3114 <LEDDebug(LEDStruct&)+0xf08>
    25b8:	2b07      	cmp	r3, #7
    25ba:	d103      	bne.n	25c4 <LEDDebug(LEDStruct&)+0x3b8>
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
    25bc:	4952      	ldr	r1, [pc, #328]	; (2708 <LEDDebug(LEDStruct&)+0x4fc>)
    25be:	4848      	ldr	r0, [pc, #288]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25c0:	f7fe f9ce 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25c4:	4947      	ldr	r1, [pc, #284]	; (26e4 <LEDDebug(LEDStruct&)+0x4d8>)
    25c6:	4846      	ldr	r0, [pc, #280]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25c8:	f7fe f9bc 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25cc:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    25d0:	4843      	ldr	r0, [pc, #268]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25d2:	f00b fd61 	bl	e098 <Print::print(long)>
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
				default: break;
			}
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    25d6:	4944      	ldr	r1, [pc, #272]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    25d8:	4841      	ldr	r0, [pc, #260]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25da:	f7fe f9c1 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25de:	494b      	ldr	r1, [pc, #300]	; (270c <LEDDebug(LEDStruct&)+0x500>)
    25e0:	483f      	ldr	r0, [pc, #252]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25e2:	f7fe f9af 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    25e6:	f894 127b 	ldrb.w	r1, [r4, #635]	; 0x27b
    25ea:	483d      	ldr	r0, [pc, #244]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25ec:	f00b fd54 	bl	e098 <Print::print(long)>
			Serial.print("|| (b) split:\t\t");
			Serial.print(leds.rainbow_split);
			Serial.println("\t||");
    25f0:	493d      	ldr	r1, [pc, #244]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    25f2:	483b      	ldr	r0, [pc, #236]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25f4:	f7fe f9b4 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    25f8:	4945      	ldr	r1, [pc, #276]	; (2710 <LEDDebug(LEDStruct&)+0x504>)
    25fa:	4839      	ldr	r0, [pc, #228]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    25fc:	f7fe f9a2 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2600:	2300      	movs	r3, #0
    2602:	220a      	movs	r2, #10
    2604:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2608:	4835      	ldr	r0, [pc, #212]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    260a:	f00b fd05 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) diff:\t\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    260e:	4936      	ldr	r1, [pc, #216]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2610:	4833      	ldr	r0, [pc, #204]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2612:	f7fe f9a5 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2616:	493f      	ldr	r1, [pc, #252]	; (2714 <LEDDebug(LEDStruct&)+0x508>)
    2618:	4831      	ldr	r0, [pc, #196]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    261a:	f7fe f993 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    261e:	2300      	movs	r3, #0
    2620:	220a      	movs	r2, #10
    2622:	f894 1278 	ldrb.w	r1, [r4, #632]	; 0x278
    2626:	482e      	ldr	r0, [pc, #184]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2628:	f00b fcf6 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rot:\t\t");
			Serial.print(leds.rainbow_rot);
			Serial.println("\t||");
    262c:	492e      	ldr	r1, [pc, #184]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    262e:	482c      	ldr	r0, [pc, #176]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2630:	f7fe f996 	bl	960 <Print::println(char const*)>
			if (leds.mode_name == RAINBOW_MARCH_BEAT) {
    2634:	f894 522c 	ldrb.w	r5, [r4, #556]	; 0x22c
    2638:	2d0a      	cmp	r5, #10
    263a:	f47f af0a 	bne.w	2452 <LEDDebug(LEDStruct&)+0x246>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    263e:	4936      	ldr	r1, [pc, #216]	; (2718 <LEDDebug(LEDStruct&)+0x50c>)
    2640:	4827      	ldr	r0, [pc, #156]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2642:	f7fe f97f 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2646:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    264a:	4825      	ldr	r0, [pc, #148]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    264c:	462a      	mov	r2, r5
    264e:	2300      	movs	r3, #0
    2650:	f00b fce2 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (e) juggle_beat:\t");
				Serial.print(leds.juggle_beat);
				Serial.println("\t||");
    2654:	4924      	ldr	r1, [pc, #144]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2656:	4822      	ldr	r0, [pc, #136]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2658:	f7fe f982 	bl	960 <Print::println(char const*)>
    265c:	e6f9      	b.n	2452 <LEDDebug(LEDStruct&)+0x246>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
    265e:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2662:	3b0c      	subs	r3, #12
    2664:	2b05      	cmp	r3, #5
    2666:	f200 8488 	bhi.w	2f7a <LEDDebug(LEDStruct&)+0xd6e>
    266a:	e8df f013 	tbh	[pc, r3, lsl #1]
    266e:	0534      	.short	0x0534
    2670:	05480482 	.word	0x05480482
    2674:	053e0543 	.word	0x053e0543
    2678:	0539      	.short	0x0539
				Serial.println("\t||");
			}
			break;
		
		case COLORWAVE:
			Serial.println("============COLORWAVE=============");
    267a:	4928      	ldr	r1, [pc, #160]	; (271c <LEDDebug(LEDStruct&)+0x510>)
    267c:	4818      	ldr	r0, [pc, #96]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    267e:	f7fe f96f 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2682:	4918      	ldr	r1, [pc, #96]	; (26e4 <LEDDebug(LEDStruct&)+0x4d8>)
    2684:	4816      	ldr	r0, [pc, #88]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2686:	f7fe f95d 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    268a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    268e:	4814      	ldr	r0, [pc, #80]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2690:	f00b fd02 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2694:	4914      	ldr	r1, [pc, #80]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    2696:	4812      	ldr	r0, [pc, #72]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    2698:	f7fe f962 	bl	960 <Print::println(char const*)>
			break;
    269c:	e6d9      	b.n	2452 <LEDDebug(LEDStruct&)+0x246>

		case PRIDE:
			Serial.println("==============PRIDE===============");
    269e:	4920      	ldr	r1, [pc, #128]	; (2720 <LEDDebug(LEDStruct&)+0x514>)
    26a0:	e7ec      	b.n	267c <LEDDebug(LEDStruct&)+0x470>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case PACIFICA:
			Serial.println("=============PACIFCIA=============");
    26a2:	4920      	ldr	r1, [pc, #128]	; (2724 <LEDDebug(LEDStruct&)+0x518>)
    26a4:	e7ea      	b.n	267c <LEDDebug(LEDStruct&)+0x470>
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
			break;

		case CONFETTI:
			Serial.println("=============CONFETTI=============");
    26a6:	4920      	ldr	r1, [pc, #128]	; (2728 <LEDDebug(LEDStruct&)+0x51c>)
    26a8:	480d      	ldr	r0, [pc, #52]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    26aa:	f7fe f959 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26ae:	490d      	ldr	r1, [pc, #52]	; (26e4 <LEDDebug(LEDStruct&)+0x4d8>)
    26b0:	480b      	ldr	r0, [pc, #44]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    26b2:	f7fe f947 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    26b6:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    26ba:	4809      	ldr	r0, [pc, #36]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    26bc:	f00b fcec 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    26c0:	4909      	ldr	r1, [pc, #36]	; (26e8 <LEDDebug(LEDStruct&)+0x4dc>)
    26c2:	4807      	ldr	r0, [pc, #28]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    26c4:	f7fe f94c 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    26c8:	4918      	ldr	r1, [pc, #96]	; (272c <LEDDebug(LEDStruct&)+0x520>)
    26ca:	4805      	ldr	r0, [pc, #20]	; (26e0 <LEDDebug(LEDStruct&)+0x4d4>)
    26cc:	f7fe f93a 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    26d0:	f894 133e 	ldrb.w	r1, [r4, #830]	; 0x33e
    26d4:	e6b4      	b.n	2440 <LEDDebug(LEDStruct&)+0x234>
    26d6:	bf00      	nop
    26d8:	000111e8 	.word	0x000111e8
    26dc:	0001120c 	.word	0x0001120c
    26e0:	1fff878c 	.word	0x1fff878c
    26e4:	00011230 	.word	0x00011230
    26e8:	00011130 	.word	0x00011130
    26ec:	00011248 	.word	0x00011248
    26f0:	0001125c 	.word	0x0001125c
    26f4:	00011270 	.word	0x00011270
    26f8:	00011284 	.word	0x00011284
    26fc:	00011294 	.word	0x00011294
    2700:	000112a4 	.word	0x000112a4
    2704:	000112b4 	.word	0x000112b4
    2708:	000112cc 	.word	0x000112cc
    270c:	00011338 	.word	0x00011338
    2710:	00011348 	.word	0x00011348
    2714:	00011358 	.word	0x00011358
    2718:	00011368 	.word	0x00011368
    271c:	000114cc 	.word	0x000114cc
    2720:	000114f0 	.word	0x000114f0
    2724:	00011514 	.word	0x00011514
    2728:	00011538 	.word	0x00011538
    272c:	0001155c 	.word	0x0001155c
			Serial.print(leds.use_overlay);
			Serial.println("\t||");
			break;

		case ONE_SIN:
			Serial.println("=============ONE SIN==============");
    2730:	4997      	ldr	r1, [pc, #604]	; (2990 <LEDDebug(LEDStruct&)+0x784>)
    2732:	4898      	ldr	r0, [pc, #608]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2734:	f7fe f914 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2738:	4997      	ldr	r1, [pc, #604]	; (2998 <LEDDebug(LEDStruct&)+0x78c>)
    273a:	4896      	ldr	r0, [pc, #600]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    273c:	f7fe f902 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2740:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2744:	4893      	ldr	r0, [pc, #588]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2746:	f00b fca7 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    274a:	4994      	ldr	r1, [pc, #592]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    274c:	4891      	ldr	r0, [pc, #580]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    274e:	f7fe f907 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2752:	4993      	ldr	r1, [pc, #588]	; (29a0 <LEDDebug(LEDStruct&)+0x794>)
    2754:	488f      	ldr	r0, [pc, #572]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2756:	f7fe f8f5 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    275a:	2300      	movs	r3, #0
    275c:	220a      	movs	r2, #10
    275e:	f894 133f 	ldrb.w	r1, [r4, #831]	; 0x33f
    2762:	488c      	ldr	r0, [pc, #560]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2764:	f00b fc58 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_inc:\t\t");
			Serial.print(leds.sin_inc);
			Serial.println("\t||");
    2768:	498c      	ldr	r1, [pc, #560]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    276a:	488a      	ldr	r0, [pc, #552]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    276c:	f7fe f8f8 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2770:	498c      	ldr	r1, [pc, #560]	; (29a4 <LEDDebug(LEDStruct&)+0x798>)
    2772:	4888      	ldr	r0, [pc, #544]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2774:	f7fe f8e6 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2778:	2300      	movs	r3, #0
    277a:	220a      	movs	r2, #10
    277c:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    2780:	4884      	ldr	r0, [pc, #528]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2782:	f00b fc49 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    2786:	4985      	ldr	r1, [pc, #532]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    2788:	4882      	ldr	r0, [pc, #520]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    278a:	f7fe f8e9 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    278e:	4986      	ldr	r1, [pc, #536]	; (29a8 <LEDDebug(LEDStruct&)+0x79c>)
    2790:	4880      	ldr	r0, [pc, #512]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2792:	f7fe f8d7 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2796:	2300      	movs	r3, #0
    2798:	220a      	movs	r2, #10
    279a:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    279e:	487d      	ldr	r0, [pc, #500]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27a0:	f00b fc3a 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    27a4:	497d      	ldr	r1, [pc, #500]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    27a6:	487b      	ldr	r0, [pc, #492]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27a8:	f7fe f8da 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ac:	497f      	ldr	r1, [pc, #508]	; (29ac <LEDDebug(LEDStruct&)+0x7a0>)
    27ae:	4879      	ldr	r0, [pc, #484]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27b0:	f7fe f8c8 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27b4:	2300      	movs	r3, #0
    27b6:	220a      	movs	r2, #10
    27b8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    27bc:	4875      	ldr	r0, [pc, #468]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27be:	f00b fc2b 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    27c2:	4976      	ldr	r1, [pc, #472]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    27c4:	4873      	ldr	r0, [pc, #460]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27c6:	f7fe f8cb 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27ca:	4979      	ldr	r1, [pc, #484]	; (29b0 <LEDDebug(LEDStruct&)+0x7a4>)
    27cc:	4871      	ldr	r0, [pc, #452]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27ce:	f7fe f8b9 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27d2:	2300      	movs	r3, #0
    27d4:	220a      	movs	r2, #10
    27d6:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    27da:	486e      	ldr	r0, [pc, #440]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27dc:	f00b fc1c 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    27e0:	496e      	ldr	r1, [pc, #440]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    27e2:	486c      	ldr	r0, [pc, #432]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27e4:	f7fe f8bc 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    27e8:	4972      	ldr	r1, [pc, #456]	; (29b4 <LEDDebug(LEDStruct&)+0x7a8>)
    27ea:	486a      	ldr	r0, [pc, #424]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27ec:	f7fe f8aa 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    27f0:	2300      	movs	r3, #0
    27f2:	220a      	movs	r2, #10
    27f4:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    27f8:	4866      	ldr	r0, [pc, #408]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    27fa:	f00b fc0d 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) all_freq:\t");
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
    27fe:	4967      	ldr	r1, [pc, #412]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    2800:	4864      	ldr	r0, [pc, #400]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2802:	f7fe f8ad 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2806:	496c      	ldr	r1, [pc, #432]	; (29b8 <LEDDebug(LEDStruct&)+0x7ac>)
    2808:	4862      	ldr	r0, [pc, #392]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    280a:	f7fe f89b 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    280e:	2300      	movs	r3, #0
    2810:	220a      	movs	r2, #10
    2812:	f894 134f 	ldrb.w	r1, [r4, #847]	; 0x34f
    2816:	485f      	ldr	r0, [pc, #380]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2818:	f00b fbfe 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) bg_clr:\t\t");
			Serial.print(leds.bg_clr);
			Serial.println("\t||");
    281c:	495f      	ldr	r1, [pc, #380]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    281e:	485d      	ldr	r0, [pc, #372]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2820:	f7fe f89e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2824:	4965      	ldr	r1, [pc, #404]	; (29bc <LEDDebug(LEDStruct&)+0x7b0>)
    2826:	485b      	ldr	r0, [pc, #364]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2828:	f7fe f88c 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    282c:	f894 1350 	ldrb.w	r1, [r4, #848]	; 0x350
    2830:	e606      	b.n	2440 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.bg_bri);
			Serial.println("\t||");
			break;

		case TWO_SIN:
			Serial.println("=============TWO SIN==============");
    2832:	4963      	ldr	r1, [pc, #396]	; (29c0 <LEDDebug(LEDStruct&)+0x7b4>)
    2834:	4857      	ldr	r0, [pc, #348]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2836:	f7fe f893 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    283a:	4957      	ldr	r1, [pc, #348]	; (2998 <LEDDebug(LEDStruct&)+0x78c>)
    283c:	4855      	ldr	r0, [pc, #340]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    283e:	f7fe f881 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2842:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2846:	4853      	ldr	r0, [pc, #332]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2848:	f00b fc26 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    284c:	4953      	ldr	r1, [pc, #332]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    284e:	4851      	ldr	r0, [pc, #324]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2850:	f7fe f886 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2854:	495b      	ldr	r1, [pc, #364]	; (29c4 <LEDDebug(LEDStruct&)+0x7b8>)
    2856:	484f      	ldr	r0, [pc, #316]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2858:	f7fe f874 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    285c:	2300      	movs	r3, #0
    285e:	220a      	movs	r2, #10
    2860:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
    2864:	484b      	ldr	r0, [pc, #300]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2866:	f00b fbd7 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) sin_hue:\t\t");
			Serial.print(leds.sin_hue);
			Serial.println("\t||");
    286a:	494c      	ldr	r1, [pc, #304]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    286c:	4849      	ldr	r0, [pc, #292]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    286e:	f7fe f877 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2872:	4955      	ldr	r1, [pc, #340]	; (29c8 <LEDDebug(LEDStruct&)+0x7bc>)
    2874:	4847      	ldr	r0, [pc, #284]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2876:	f7fe f865 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    287a:	2300      	movs	r3, #0
    287c:	220a      	movs	r2, #10
    287e:	f894 134d 	ldrb.w	r1, [r4, #845]	; 0x34d
    2882:	4844      	ldr	r0, [pc, #272]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2884:	f00b fbc8 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) two_hue:\t\t");
			Serial.print(leds.two_hue);
			Serial.println("\t||");
    2888:	4944      	ldr	r1, [pc, #272]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    288a:	4842      	ldr	r0, [pc, #264]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    288c:	f7fe f868 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2890:	494e      	ldr	r1, [pc, #312]	; (29cc <LEDDebug(LEDStruct&)+0x7c0>)
    2892:	4840      	ldr	r0, [pc, #256]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2894:	f7fe f856 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2898:	2300      	movs	r3, #0
    289a:	220a      	movs	r2, #10
    289c:	f894 1340 	ldrb.w	r1, [r4, #832]	; 0x340
    28a0:	483c      	ldr	r0, [pc, #240]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28a2:	f00b fbb9 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) sin_speed:\t");
			Serial.print(leds.sin_speed);
			Serial.println("\t||");
    28a6:	493d      	ldr	r1, [pc, #244]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    28a8:	483a      	ldr	r0, [pc, #232]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28aa:	f7fe f859 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ae:	4948      	ldr	r1, [pc, #288]	; (29d0 <LEDDebug(LEDStruct&)+0x7c4>)
    28b0:	4838      	ldr	r0, [pc, #224]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28b2:	f7fe f847 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28b6:	2300      	movs	r3, #0
    28b8:	220a      	movs	r2, #10
    28ba:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
    28be:	4835      	ldr	r0, [pc, #212]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28c0:	f00b fbaa 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) two_speed:\t");
			Serial.print(leds.two_speed);
			Serial.println("\t||");
    28c4:	4935      	ldr	r1, [pc, #212]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    28c6:	4833      	ldr	r0, [pc, #204]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28c8:	f7fe f84a 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28cc:	4941      	ldr	r1, [pc, #260]	; (29d4 <LEDDebug(LEDStruct&)+0x7c8>)
    28ce:	4831      	ldr	r0, [pc, #196]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28d0:	f7fe f838 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28d4:	2300      	movs	r3, #0
    28d6:	220a      	movs	r2, #10
    28d8:	f894 1342 	ldrb.w	r1, [r4, #834]	; 0x342
    28dc:	482d      	ldr	r0, [pc, #180]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28de:	f00b fb9b 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (f) sin_rot:\t\t");
			Serial.print(leds.sin_rot);
			Serial.println("\t||");
    28e2:	492e      	ldr	r1, [pc, #184]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    28e4:	482b      	ldr	r0, [pc, #172]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28e6:	f7fe f83b 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    28ea:	493b      	ldr	r1, [pc, #236]	; (29d8 <LEDDebug(LEDStruct&)+0x7cc>)
    28ec:	4829      	ldr	r0, [pc, #164]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28ee:	f7fe f829 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    28f2:	2300      	movs	r3, #0
    28f4:	220a      	movs	r2, #10
    28f6:	f894 134a 	ldrb.w	r1, [r4, #842]	; 0x34a
    28fa:	4826      	ldr	r0, [pc, #152]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    28fc:	f00b fb8c 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (g) two_rot:\t\t");
			Serial.print(leds.two_rot);
			Serial.println("\t||");
    2900:	4926      	ldr	r1, [pc, #152]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    2902:	4824      	ldr	r0, [pc, #144]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2904:	f7fe f82c 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2908:	4934      	ldr	r1, [pc, #208]	; (29dc <LEDDebug(LEDStruct&)+0x7d0>)
    290a:	4822      	ldr	r0, [pc, #136]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    290c:	f7fe f81a 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2910:	2300      	movs	r3, #0
    2912:	220a      	movs	r2, #10
    2914:	f894 1341 	ldrb.w	r1, [r4, #833]	; 0x341
    2918:	481e      	ldr	r0, [pc, #120]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    291a:	f00b fb7d 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (h) sin_cutoff:\t");
			Serial.print(leds.sin_cutoff);
			Serial.println("\t||");
    291e:	491f      	ldr	r1, [pc, #124]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    2920:	481c      	ldr	r0, [pc, #112]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2922:	f7fe f81d 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2926:	492e      	ldr	r1, [pc, #184]	; (29e0 <LEDDebug(LEDStruct&)+0x7d4>)
    2928:	481a      	ldr	r0, [pc, #104]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    292a:	f7fe f80b 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    292e:	2300      	movs	r3, #0
    2930:	220a      	movs	r2, #10
    2932:	f894 134b 	ldrb.w	r1, [r4, #843]	; 0x34b
    2936:	4817      	ldr	r0, [pc, #92]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2938:	f00b fb6e 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (i) two_cutoff:\t");
			Serial.print(leds.two_cutoff);
			Serial.println("\t||");
    293c:	4917      	ldr	r1, [pc, #92]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    293e:	4815      	ldr	r0, [pc, #84]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2940:	f7fe f80e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2944:	4927      	ldr	r1, [pc, #156]	; (29e4 <LEDDebug(LEDStruct&)+0x7d8>)
    2946:	4813      	ldr	r0, [pc, #76]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2948:	f7fd fffc 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    294c:	2300      	movs	r3, #0
    294e:	220a      	movs	r2, #10
    2950:	f894 1346 	ldrb.w	r1, [r4, #838]	; 0x346
    2954:	480f      	ldr	r0, [pc, #60]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2956:	f00b fb5f 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (j) sin_phase:\t");
			Serial.print(leds.sin_phase);
			Serial.println("\t||");
    295a:	4910      	ldr	r1, [pc, #64]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    295c:	480d      	ldr	r0, [pc, #52]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    295e:	f7fd ffff 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2962:	4921      	ldr	r1, [pc, #132]	; (29e8 <LEDDebug(LEDStruct&)+0x7dc>)
    2964:	480b      	ldr	r0, [pc, #44]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2966:	f7fd ffed 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    296a:	2300      	movs	r3, #0
    296c:	220a      	movs	r2, #10
    296e:	f894 134c 	ldrb.w	r1, [r4, #844]	; 0x34c
    2972:	4808      	ldr	r0, [pc, #32]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2974:	f00b fb50 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (k) two_phase:\t");
			Serial.print(leds.two_phase);
			Serial.println("\t||");
    2978:	4908      	ldr	r1, [pc, #32]	; (299c <LEDDebug(LEDStruct&)+0x790>)
    297a:	4806      	ldr	r0, [pc, #24]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    297c:	f7fd fff0 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2980:	491a      	ldr	r1, [pc, #104]	; (29ec <LEDDebug(LEDStruct&)+0x7e0>)
    2982:	4804      	ldr	r0, [pc, #16]	; (2994 <LEDDebug(LEDStruct&)+0x788>)
    2984:	f7fd ffde 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2988:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
    298c:	e558      	b.n	2440 <LEDDebug(LEDStruct&)+0x234>
    298e:	bf00      	nop
    2990:	00011644 	.word	0x00011644
    2994:	1fff878c 	.word	0x1fff878c
    2998:	00011230 	.word	0x00011230
    299c:	00011130 	.word	0x00011130
    29a0:	00011668 	.word	0x00011668
    29a4:	0001167c 	.word	0x0001167c
    29a8:	00011690 	.word	0x00011690
    29ac:	000116a4 	.word	0x000116a4
    29b0:	000116b8 	.word	0x000116b8
    29b4:	000116cc 	.word	0x000116cc
    29b8:	000116e0 	.word	0x000116e0
    29bc:	000116f4 	.word	0x000116f4
    29c0:	00011708 	.word	0x00011708
    29c4:	0001172c 	.word	0x0001172c
    29c8:	00011740 	.word	0x00011740
    29cc:	00011754 	.word	0x00011754
    29d0:	00011768 	.word	0x00011768
    29d4:	0001177c 	.word	0x0001177c
    29d8:	00011790 	.word	0x00011790
    29dc:	000117a4 	.word	0x000117a4
    29e0:	000117b8 	.word	0x000117b8
    29e4:	000117cc 	.word	0x000117cc
    29e8:	000117e0 	.word	0x000117e0
    29ec:	000117f4 	.word	0x000117f4
			Serial.print(leds.confetti_fade);
			Serial.println("\t||");
			break;

		case FIREWORKS:
			Serial.println("============FIREWORKS=============");
    29f0:	49af      	ldr	r1, [pc, #700]	; (2cb0 <LEDDebug(LEDStruct&)+0xaa4>)
    29f2:	48b0      	ldr	r0, [pc, #704]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    29f4:	f7fd ffb4 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    29f8:	49af      	ldr	r1, [pc, #700]	; (2cb8 <LEDDebug(LEDStruct&)+0xaac>)
    29fa:	48ae      	ldr	r0, [pc, #696]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    29fc:	f7fd ffa2 	bl	944 <Print::write(char const*)>
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
    2a00:	f894 3354 	ldrb.w	r3, [r4, #852]	; 0x354
    2a04:	2b01      	cmp	r3, #1
    2a06:	f000 8356 	beq.w	30b6 <LEDDebug(LEDStruct&)+0xeaa>
    2a0a:	f0c0 8389 	bcc.w	3120 <LEDDebug(LEDStruct&)+0xf14>
    2a0e:	2b02      	cmp	r3, #2
    2a10:	d107      	bne.n	2a22 <LEDDebug(LEDStruct&)+0x816>
    2a12:	49aa      	ldr	r1, [pc, #680]	; (2cbc <LEDDebug(LEDStruct&)+0xab0>)
    2a14:	48a7      	ldr	r0, [pc, #668]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a16:	f7fd ff95 	bl	944 <Print::write(char const*)>
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
    2a1a:	49a9      	ldr	r1, [pc, #676]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2a1c:	48a5      	ldr	r0, [pc, #660]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a1e:	f7fd ff9f 	bl	960 <Print::println(char const*)>
    2a22:	49a8      	ldr	r1, [pc, #672]	; (2cc4 <LEDDebug(LEDStruct&)+0xab8>)
    2a24:	48a3      	ldr	r0, [pc, #652]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a26:	f7fd ff8d 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a2a:	2300      	movs	r3, #0
    2a2c:	220a      	movs	r2, #10
    2a2e:	f894 1351 	ldrb.w	r1, [r4, #849]	; 0x351
    2a32:	48a0      	ldr	r0, [pc, #640]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a34:	f00b faf0 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
			}
			Serial.print("|| firework_position:\t");
			Serial.print(leds.firework_position);
			Serial.println("\t||");
    2a38:	49a1      	ldr	r1, [pc, #644]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2a3a:	489e      	ldr	r0, [pc, #632]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a3c:	f7fd ff90 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a40:	49a1      	ldr	r1, [pc, #644]	; (2cc8 <LEDDebug(LEDStruct&)+0xabc>)
    2a42:	489c      	ldr	r0, [pc, #624]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a44:	f7fd ff7e 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a48:	2300      	movs	r3, #0
    2a4a:	220a      	movs	r2, #10
    2a4c:	f894 135d 	ldrb.w	r1, [r4, #861]	; 0x35d
    2a50:	4898      	ldr	r0, [pc, #608]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a52:	f00b fae1 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Number of sparks:\t");
			Serial.print(leds.number_of_sparks);
			Serial.println("\t||");
    2a56:	499a      	ldr	r1, [pc, #616]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2a58:	4896      	ldr	r0, [pc, #600]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a5a:	f7fd ff81 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a5e:	499b      	ldr	r1, [pc, #620]	; (2ccc <LEDDebug(LEDStruct&)+0xac0>)
    2a60:	4894      	ldr	r0, [pc, #592]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a62:	f7fd ff6f 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a66:	2300      	movs	r3, #0
    2a68:	220a      	movs	r2, #10
    2a6a:	f894 175c 	ldrb.w	r1, [r4, #1884]	; 0x75c
    2a6e:	4891      	ldr	r0, [pc, #580]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a70:	f00b fad2 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Brightest spark:\t");
			Serial.print(leds.brightest_spark);
			Serial.println("\t||");
    2a74:	4992      	ldr	r1, [pc, #584]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2a76:	488f      	ldr	r0, [pc, #572]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a78:	f7fd ff72 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a7c:	4994      	ldr	r1, [pc, #592]	; (2cd0 <LEDDebug(LEDStruct&)+0xac4>)
    2a7e:	488d      	ldr	r0, [pc, #564]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a80:	f7fd ff60 	bl	944 <Print::write(char const*)>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a84:	2300      	movs	r3, #0
    2a86:	220a      	movs	r2, #10
    2a88:	f8d4 1358 	ldr.w	r1, [r4, #856]	; 0x358
    2a8c:	4889      	ldr	r0, [pc, #548]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a8e:	f00b fac3 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| Next explosion time:\t");
			Serial.print(leds.next_explosion_time);
			Serial.println("\t||");
    2a92:	498b      	ldr	r1, [pc, #556]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2a94:	4887      	ldr	r0, [pc, #540]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a96:	f7fd ff63 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2a9a:	498e      	ldr	r1, [pc, #568]	; (2cd4 <LEDDebug(LEDStruct&)+0xac8>)
    2a9c:	4885      	ldr	r0, [pc, #532]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2a9e:	f7fd ff51 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2aa2:	f894 11c7 	ldrb.w	r1, [r4, #455]	; 0x1c7
    2aa6:	e5f2      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.sin_all_freq);
			Serial.println("\t||");
			break;

		case SHOOTING_POLE:
			Serial.println("==========SHOOTING POLE===========");
    2aa8:	498b      	ldr	r1, [pc, #556]	; (2cd8 <LEDDebug(LEDStruct&)+0xacc>)
    2aaa:	4882      	ldr	r0, [pc, #520]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2aac:	f7fd ff58 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ab0:	498a      	ldr	r1, [pc, #552]	; (2cdc <LEDDebug(LEDStruct&)+0xad0>)
    2ab2:	4880      	ldr	r0, [pc, #512]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ab4:	f7fd ff46 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ab8:	f8b4 133c 	ldrh.w	r1, [r4, #828]	; 0x33c
    2abc:	487d      	ldr	r0, [pc, #500]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2abe:	f00b faeb 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) strip_range:\t");
			Serial.print(leds.strip_range);
			Serial.println("\t||");
    2ac2:	497f      	ldr	r1, [pc, #508]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2ac4:	487b      	ldr	r0, [pc, #492]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ac6:	f7fd ff4b 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2aca:	4985      	ldr	r1, [pc, #532]	; (2ce0 <LEDDebug(LEDStruct&)+0xad4>)
    2acc:	4879      	ldr	r0, [pc, #484]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ace:	f7fd ff39 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ad2:	2300      	movs	r3, #0
    2ad4:	220a      	movs	r2, #10
    2ad6:	f894 175e 	ldrb.w	r1, [r4, #1886]	; 0x75e
    2ada:	4876      	ldr	r0, [pc, #472]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2adc:	f00b fa9c 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) pole_diff:\t");
			Serial.print(leds.pole_diff);
			Serial.println("\t||");
    2ae0:	4977      	ldr	r1, [pc, #476]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2ae2:	4874      	ldr	r0, [pc, #464]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ae4:	f7fd ff3c 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ae8:	497e      	ldr	r1, [pc, #504]	; (2ce4 <LEDDebug(LEDStruct&)+0xad8>)
    2aea:	4872      	ldr	r0, [pc, #456]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2aec:	f7fd ff2a 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2af0:	2300      	movs	r3, #0
    2af2:	220a      	movs	r2, #10
    2af4:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2af8:	486e      	ldr	r0, [pc, #440]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2afa:	f00b fa8d 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2afe:	4970      	ldr	r1, [pc, #448]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b00:	486c      	ldr	r0, [pc, #432]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b02:	f7fd ff2d 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b06:	4978      	ldr	r1, [pc, #480]	; (2ce8 <LEDDebug(LEDStruct&)+0xadc>)
    2b08:	486a      	ldr	r0, [pc, #424]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b0a:	f7fd ff1b 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b0e:	2300      	movs	r3, #0
    2b10:	220a      	movs	r2, #10
    2b12:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2b16:	4867      	ldr	r0, [pc, #412]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b18:	f00b fa7e 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2b1c:	4968      	ldr	r1, [pc, #416]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b1e:	4865      	ldr	r0, [pc, #404]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b20:	f7fd ff1e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b24:	4971      	ldr	r1, [pc, #452]	; (2cec <LEDDebug(LEDStruct&)+0xae0>)
    2b26:	4863      	ldr	r0, [pc, #396]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b28:	f7fd ff0c 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2b2c:	f894 1233 	ldrb.w	r1, [r4, #563]	; 0x233
    2b30:	e486      	b.n	2440 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.juggle_diff);
			Serial.println("\t||");
			break;

		case NOISE:
			Serial.println("===============NOISE==============");
    2b32:	496f      	ldr	r1, [pc, #444]	; (2cf0 <LEDDebug(LEDStruct&)+0xae4>)
    2b34:	485f      	ldr	r0, [pc, #380]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b36:	f7fd ff13 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b3a:	496e      	ldr	r1, [pc, #440]	; (2cf4 <LEDDebug(LEDStruct&)+0xae8>)
    2b3c:	485d      	ldr	r0, [pc, #372]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b3e:	f7fd ff01 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b42:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2b46:	485b      	ldr	r0, [pc, #364]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b48:	f00b faa6 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2b4c:	495c      	ldr	r1, [pc, #368]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b4e:	4859      	ldr	r0, [pc, #356]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b50:	f7fd ff06 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b54:	4968      	ldr	r1, [pc, #416]	; (2cf8 <LEDDebug(LEDStruct&)+0xaec>)
    2b56:	4857      	ldr	r0, [pc, #348]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b58:	f7fd fef4 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b5c:	f8b4 1760 	ldrh.w	r1, [r4, #1888]	; 0x760
    2b60:	4854      	ldr	r0, [pc, #336]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b62:	f00b fa99 	bl	e098 <Print::print(long)>
			Serial.print("|| (b) noise_scale:\t");
			Serial.print(leds.noise_scale);
			Serial.println("\t||");
    2b66:	4956      	ldr	r1, [pc, #344]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b68:	4852      	ldr	r0, [pc, #328]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b6a:	f7fd fef9 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b6e:	4963      	ldr	r1, [pc, #396]	; (2cfc <LEDDebug(LEDStruct&)+0xaf0>)
    2b70:	4850      	ldr	r0, [pc, #320]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b72:	f7fd fee7 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b76:	f8b4 1762 	ldrh.w	r1, [r4, #1890]	; 0x762
    2b7a:	484e      	ldr	r0, [pc, #312]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b7c:	f00b fa8c 	bl	e098 <Print::print(long)>
			Serial.print("|| (c) noise_yscale:\t");
			Serial.print(leds.noise_yscale);
			Serial.println("\t||");
    2b80:	494f      	ldr	r1, [pc, #316]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b82:	484c      	ldr	r0, [pc, #304]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b84:	f7fd feec 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2b88:	495d      	ldr	r1, [pc, #372]	; (2d00 <LEDDebug(LEDStruct&)+0xaf4>)
    2b8a:	484a      	ldr	r0, [pc, #296]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b8c:	f7fd feda 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2b90:	f8b4 1764 	ldrh.w	r1, [r4, #1892]	; 0x764
    2b94:	4847      	ldr	r0, [pc, #284]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b96:	f00b fa7f 	bl	e098 <Print::print(long)>
			Serial.print("|| (d) noise_dist:\t");
			Serial.print(leds.noise_dist);
			Serial.println("\t||");
    2b9a:	4949      	ldr	r1, [pc, #292]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2b9c:	4845      	ldr	r0, [pc, #276]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2b9e:	f7fd fedf 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ba2:	4958      	ldr	r1, [pc, #352]	; (2d04 <LEDDebug(LEDStruct&)+0xaf8>)
    2ba4:	4843      	ldr	r0, [pc, #268]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ba6:	f7fd fecd 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2baa:	f894 1767 	ldrb.w	r1, [r4, #1895]	; 0x767
    2bae:	e447      	b.n	2440 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.noise_fade);
			Serial.println("\t||");
			break;

		case BOUNCE:
			Serial.println("==============BOUNCE==============");
    2bb0:	4955      	ldr	r1, [pc, #340]	; (2d08 <LEDDebug(LEDStruct&)+0xafc>)
    2bb2:	4840      	ldr	r0, [pc, #256]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bb4:	f7fd fed4 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bb8:	4954      	ldr	r1, [pc, #336]	; (2d0c <LEDDebug(LEDStruct&)+0xb00>)
    2bba:	483e      	ldr	r0, [pc, #248]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bbc:	f7fd fec2 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bc0:	2300      	movs	r3, #0
    2bc2:	220a      	movs	r2, #10
    2bc4:	f894 1232 	ldrb.w	r1, [r4, #562]	; 0x232
    2bc8:	483a      	ldr	r0, [pc, #232]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bca:	f00b fa25 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) juggle_fade:\t");
			Serial.print(leds.juggle_fade);
			Serial.println("\t||");
    2bce:	493c      	ldr	r1, [pc, #240]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2bd0:	4838      	ldr	r0, [pc, #224]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bd2:	f7fd fec5 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bd6:	494e      	ldr	r1, [pc, #312]	; (2d10 <LEDDebug(LEDStruct&)+0xb04>)
    2bd8:	4836      	ldr	r0, [pc, #216]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bda:	f7fd feb3 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bde:	2300      	movs	r3, #0
    2be0:	220a      	movs	r2, #10
    2be2:	f894 123a 	ldrb.w	r1, [r4, #570]	; 0x23a
    2be6:	4833      	ldr	r0, [pc, #204]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2be8:	f00b fa16 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) bounce_length:\t");
			Serial.print(leds.bounce_length);
			Serial.println("\t||");
    2bec:	4934      	ldr	r1, [pc, #208]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2bee:	4831      	ldr	r0, [pc, #196]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bf0:	f7fd feb6 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2bf4:	4947      	ldr	r1, [pc, #284]	; (2d14 <LEDDebug(LEDStruct&)+0xb08>)
    2bf6:	482f      	ldr	r0, [pc, #188]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2bf8:	f7fd fea4 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2bfc:	2300      	movs	r3, #0
    2bfe:	220a      	movs	r2, #10
    2c00:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    2c04:	482b      	ldr	r0, [pc, #172]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c06:	f00b fa07 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) juggle_beat:\t");
			Serial.print(leds.juggle_beat);
			Serial.println("\t||");
    2c0a:	492d      	ldr	r1, [pc, #180]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2c0c:	4829      	ldr	r0, [pc, #164]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c0e:	f7fd fea7 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c12:	4941      	ldr	r1, [pc, #260]	; (2d18 <LEDDebug(LEDStruct&)+0xb0c>)
    2c14:	4827      	ldr	r0, [pc, #156]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c16:	f7fd fe95 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c1a:	2300      	movs	r3, #0
    2c1c:	220a      	movs	r2, #10
    2c1e:	f894 1279 	ldrb.w	r1, [r4, #633]	; 0x279
    2c22:	4824      	ldr	r0, [pc, #144]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c24:	f00b f9f8 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) rainbow_diff:\t");
			Serial.print(leds.rainbow_diff);
			Serial.println("\t||");
    2c28:	4925      	ldr	r1, [pc, #148]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2c2a:	4822      	ldr	r0, [pc, #136]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c2c:	f7fd fe98 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c30:	493a      	ldr	r1, [pc, #232]	; (2d1c <LEDDebug(LEDStruct&)+0xb10>)
    2c32:	4820      	ldr	r0, [pc, #128]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c34:	f7fd fe86 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c38:	2300      	movs	r3, #0
    2c3a:	220a      	movs	r2, #10
    2c3c:	f894 1238 	ldrb.w	r1, [r4, #568]	; 0x238
    2c40:	481c      	ldr	r0, [pc, #112]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c42:	f00b f9e9 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) start_beat:\t");
			Serial.print(leds.bounce_start_beat);
			Serial.println("\t||");
    2c46:	491e      	ldr	r1, [pc, #120]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2c48:	481a      	ldr	r0, [pc, #104]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c4a:	f7fd fe89 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c4e:	4934      	ldr	r1, [pc, #208]	; (2d20 <LEDDebug(LEDStruct&)+0xb14>)
    2c50:	4818      	ldr	r0, [pc, #96]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c52:	f7fd fe77 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2c56:	f894 1277 	ldrb.w	r1, [r4, #631]	; 0x277
    2c5a:	e518      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.bounce_rainbow);
			Serial.println("\t||");
			break;

		case BOUNCING_BALLS:
			Serial.println("==========BOUNCING BALLS==========");
    2c5c:	4931      	ldr	r1, [pc, #196]	; (2d24 <LEDDebug(LEDStruct&)+0xb18>)
    2c5e:	4815      	ldr	r0, [pc, #84]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c60:	f7fd fe7e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c64:	4930      	ldr	r1, [pc, #192]	; (2d28 <LEDDebug(LEDStruct&)+0xb1c>)
    2c66:	4813      	ldr	r0, [pc, #76]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c68:	f7fd fe6c 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c6c:	2300      	movs	r3, #0
    2c6e:	220a      	movs	r2, #10
    2c70:	f894 1769 	ldrb.w	r1, [r4, #1897]	; 0x769
    2c74:	480f      	ldr	r0, [pc, #60]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c76:	f00b f9cf 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) fade:\t\t");
			Serial.print(leds.bouncing_fade);
			Serial.println("\t||");
    2c7a:	4911      	ldr	r1, [pc, #68]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2c7c:	480d      	ldr	r0, [pc, #52]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c7e:	f7fd fe6f 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2c82:	492a      	ldr	r1, [pc, #168]	; (2d2c <LEDDebug(LEDStruct&)+0xb20>)
    2c84:	480b      	ldr	r0, [pc, #44]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c86:	f7fd fe5d 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2c8a:	2300      	movs	r3, #0
    2c8c:	220a      	movs	r2, #10
    2c8e:	f894 176a 	ldrb.w	r1, [r4, #1898]	; 0x76a
    2c92:	4808      	ldr	r0, [pc, #32]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c94:	f00b f9c0 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) number of balls:\t");
			Serial.print(leds.number_of_balls);
			Serial.println("\t||");
    2c98:	4909      	ldr	r1, [pc, #36]	; (2cc0 <LEDDebug(LEDStruct&)+0xab4>)
    2c9a:	4806      	ldr	r0, [pc, #24]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2c9c:	f7fd fe60 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ca0:	4923      	ldr	r1, [pc, #140]	; (2d30 <LEDDebug(LEDStruct&)+0xb24>)
    2ca2:	4804      	ldr	r0, [pc, #16]	; (2cb4 <LEDDebug(LEDStruct&)+0xaa8>)
    2ca4:	f7fd fe4e 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2ca8:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2cac:	e4ef      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
    2cae:	bf00      	nop
    2cb0:	00011574 	.word	0x00011574
    2cb4:	1fff878c 	.word	0x1fff878c
    2cb8:	00011598 	.word	0x00011598
    2cbc:	000115ac 	.word	0x000115ac
    2cc0:	00011130 	.word	0x00011130
    2cc4:	000115c8 	.word	0x000115c8
    2cc8:	000115e0 	.word	0x000115e0
    2ccc:	000115f8 	.word	0x000115f8
    2cd0:	00011610 	.word	0x00011610
    2cd4:	0001162c 	.word	0x0001162c
    2cd8:	00011808 	.word	0x00011808
    2cdc:	0001182c 	.word	0x0001182c
    2ce0:	00011844 	.word	0x00011844
    2ce4:	00011858 	.word	0x00011858
    2ce8:	00011870 	.word	0x00011870
    2cec:	00011888 	.word	0x00011888
    2cf0:	000118a0 	.word	0x000118a0
    2cf4:	00011230 	.word	0x00011230
    2cf8:	000118c4 	.word	0x000118c4
    2cfc:	000118dc 	.word	0x000118dc
    2d00:	000118f4 	.word	0x000118f4
    2d04:	00011908 	.word	0x00011908
    2d08:	0001191c 	.word	0x0001191c
    2d0c:	00011940 	.word	0x00011940
    2d10:	00011958 	.word	0x00011958
    2d14:	00011970 	.word	0x00011970
    2d18:	00011988 	.word	0x00011988
    2d1c:	000119a0 	.word	0x000119a0
    2d20:	000119b4 	.word	0x000119b4
    2d24:	000119cc 	.word	0x000119cc
    2d28:	000119f0 	.word	0x000119f0
    2d2c:	00011a00 	.word	0x00011a00
    2d30:	00011a1c 	.word	0x00011a1c
			Serial.print(leds.use_palette);
			Serial.println("\t||");
			break;

		case LIGHTSABER:
			Serial.println("============LIGHTSABER============");
    2d34:	49af      	ldr	r1, [pc, #700]	; (2ff4 <LEDDebug(LEDStruct&)+0xde8>)
    2d36:	48b0      	ldr	r0, [pc, #704]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d38:	f7fd fe12 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d3c:	49af      	ldr	r1, [pc, #700]	; (2ffc <LEDDebug(LEDStruct&)+0xdf0>)
    2d3e:	48ae      	ldr	r0, [pc, #696]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d40:	f7fd fe00 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d44:	f894 122a 	ldrb.w	r1, [r4, #554]	; 0x22a
    2d48:	48ab      	ldr	r0, [pc, #684]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d4a:	f00b f9a5 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_palette:\t");
			Serial.print(leds.use_palette);
			Serial.println("\t||");
    2d4e:	49ac      	ldr	r1, [pc, #688]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2d50:	48a9      	ldr	r0, [pc, #676]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d52:	f7fd fe05 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d56:	49ab      	ldr	r1, [pc, #684]	; (3004 <LEDDebug(LEDStruct&)+0xdf8>)
    2d58:	48a7      	ldr	r0, [pc, #668]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d5a:	f7fd fdf3 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d5e:	2300      	movs	r3, #0
    2d60:	220a      	movs	r2, #10
    2d62:	f894 182e 	ldrb.w	r1, [r4, #2094]	; 0x82e
    2d66:	48a4      	ldr	r0, [pc, #656]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d68:	f00b f956 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) blade_color:\t");
			Serial.print(leds.blade_color);
			Serial.println("\t||");
    2d6c:	49a4      	ldr	r1, [pc, #656]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2d6e:	48a2      	ldr	r0, [pc, #648]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d70:	f7fd fdf6 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d74:	49a4      	ldr	r1, [pc, #656]	; (3008 <LEDDebug(LEDStruct&)+0xdfc>)
    2d76:	48a0      	ldr	r0, [pc, #640]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d78:	f7fd fde4 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2d7c:	2300      	movs	r3, #0
    2d7e:	220a      	movs	r2, #10
    2d80:	f894 183d 	ldrb.w	r1, [r4, #2109]	; 0x83d
    2d84:	489c      	ldr	r0, [pc, #624]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d86:	f00b f947 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) delta_bright:\t");
			Serial.print(leds.delta_bright);
			Serial.println("\t||");
    2d8a:	499d      	ldr	r1, [pc, #628]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2d8c:	489a      	ldr	r0, [pc, #616]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d8e:	f7fd fde7 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2d92:	499e      	ldr	r1, [pc, #632]	; (300c <LEDDebug(LEDStruct&)+0xe00>)
    2d94:	4898      	ldr	r0, [pc, #608]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2d96:	f7fd fdd5 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2d9a:	f8b4 1830 	ldrh.w	r1, [r4, #2096]	; 0x830
    2d9e:	4896      	ldr	r0, [pc, #600]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2da0:	f00b f97a 	bl	e098 <Print::print(long)>
			Serial.print("|| (d) hold_time:\t");
			Serial.print(leds.hold_time);
			Serial.println("\t||");
    2da4:	4996      	ldr	r1, [pc, #600]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2da6:	4894      	ldr	r0, [pc, #592]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2da8:	f7fd fdda 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dac:	4998      	ldr	r1, [pc, #608]	; (3010 <LEDDebug(LEDStruct&)+0xe04>)
    2dae:	4892      	ldr	r0, [pc, #584]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2db0:	f7fd fdc8 	bl	944 <Print::write(char const*)>
			Serial.print("|| saber_stage:\t\t");
			switch (leds.saber_stage) {
    2db4:	f894 383e 	ldrb.w	r3, [r4, #2110]	; 0x83e
    2db8:	2b01      	cmp	r3, #1
    2dba:	f000 8181 	beq.w	30c0 <LEDDebug(LEDStruct&)+0xeb4>
    2dbe:	f0c0 81b1 	bcc.w	3124 <LEDDebug(LEDStruct&)+0xf18>
    2dc2:	2b02      	cmp	r3, #2
    2dc4:	d103      	bne.n	2dce <LEDDebug(LEDStruct&)+0xbc2>
    2dc6:	4993      	ldr	r1, [pc, #588]	; (3014 <LEDDebug(LEDStruct&)+0xe08>)
    2dc8:	488b      	ldr	r0, [pc, #556]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2dca:	f7fd fdbb 	bl	944 <Print::write(char const*)>
				case UP: Serial.print("UP"); break;
				case DOWN: Serial.print("DOWN"); break;
				case WAIT: Serial.print("WAIT"); break;
			}
			Serial.println("\t||");
    2dce:	498c      	ldr	r1, [pc, #560]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2dd0:	4889      	ldr	r0, [pc, #548]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2dd2:	f7fd fdc5 	bl	960 <Print::println(char const*)>
    2dd6:	4990      	ldr	r1, [pc, #576]	; (3018 <LEDDebug(LEDStruct&)+0xe0c>)
    2dd8:	4887      	ldr	r0, [pc, #540]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2dda:	f7fd fdb3 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2dde:	f8b4 182c 	ldrh.w	r1, [r4, #2092]	; 0x82c
    2de2:	e454      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.tip_pos);
			Serial.println("\t||");
			break;

		case TWINKLE:
			Serial.println("=============TWINKLE==============");
    2de4:	498d      	ldr	r1, [pc, #564]	; (301c <LEDDebug(LEDStruct&)+0xe10>)
    2de6:	4884      	ldr	r0, [pc, #528]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2de8:	f7fd fdba 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2dec:	498c      	ldr	r1, [pc, #560]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2dee:	4882      	ldr	r0, [pc, #520]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2df0:	f7fd fda8 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2df4:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2df8:	487f      	ldr	r0, [pc, #508]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2dfa:	f00b f94d 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2dfe:	4980      	ldr	r1, [pc, #512]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2e00:	487d      	ldr	r0, [pc, #500]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e02:	f7fd fdad 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e06:	4987      	ldr	r1, [pc, #540]	; (3024 <LEDDebug(LEDStruct&)+0xe18>)
    2e08:	487b      	ldr	r0, [pc, #492]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e0a:	f7fd fd9b 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e0e:	2300      	movs	r3, #0
    2e10:	220a      	movs	r2, #10
    2e12:	f894 183f 	ldrb.w	r1, [r4, #2111]	; 0x83f
    2e16:	4878      	ldr	r0, [pc, #480]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e18:	f00b f8fe 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) twinkle_speed:\t");
			Serial.print(leds.twinkle_speed);
			Serial.println("\t||");
    2e1c:	4978      	ldr	r1, [pc, #480]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2e1e:	4876      	ldr	r0, [pc, #472]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e20:	f7fd fd9e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e24:	4980      	ldr	r1, [pc, #512]	; (3028 <LEDDebug(LEDStruct&)+0xe1c>)
    2e26:	4874      	ldr	r0, [pc, #464]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e28:	f7fd fd8c 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e2c:	2300      	movs	r3, #0
    2e2e:	220a      	movs	r2, #10
    2e30:	f894 1840 	ldrb.w	r1, [r4, #2112]	; 0x840
    2e34:	4870      	ldr	r0, [pc, #448]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e36:	f00b f8ef 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) twinkle_density:\t");
			Serial.print(leds.twinkle_density);
			Serial.println("\t||");
    2e3a:	4971      	ldr	r1, [pc, #452]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2e3c:	486e      	ldr	r0, [pc, #440]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e3e:	f7fd fd8f 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e42:	497a      	ldr	r1, [pc, #488]	; (302c <LEDDebug(LEDStruct&)+0xe20>)
    2e44:	486c      	ldr	r0, [pc, #432]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e46:	f7fd fd7d 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e4a:	f894 1841 	ldrb.w	r1, [r4, #2113]	; 0x841
    2e4e:	486a      	ldr	r0, [pc, #424]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e50:	f00b f922 	bl	e098 <Print::print(long)>
			Serial.print("|| (d) cool_like_incan:\t");
			Serial.print(leds.cool_like_incandescent);
			Serial.println("\t||");
    2e54:	496a      	ldr	r1, [pc, #424]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2e56:	4868      	ldr	r0, [pc, #416]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e58:	f7fd fd82 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e5c:	4974      	ldr	r1, [pc, #464]	; (3030 <LEDDebug(LEDStruct&)+0xe24>)
    2e5e:	4866      	ldr	r0, [pc, #408]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e60:	f7fd fd70 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e64:	f894 1842 	ldrb.w	r1, [r4, #2114]	; 0x842
    2e68:	e411      	b.n	268e <LEDDebug(LEDStruct&)+0x482>
			Serial.print(leds.auto_select_bg_color);
			Serial.println("\t||");
			break;

		case PLASMA:
			Serial.println("=============PLASMA===============");
    2e6a:	4972      	ldr	r1, [pc, #456]	; (3034 <LEDDebug(LEDStruct&)+0xe28>)
    2e6c:	4862      	ldr	r0, [pc, #392]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e6e:	f7fd fd77 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e72:	496b      	ldr	r1, [pc, #428]	; (3020 <LEDDebug(LEDStruct&)+0xe14>)
    2e74:	4860      	ldr	r0, [pc, #384]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e76:	f7fd fd65 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2e7a:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    2e7e:	485e      	ldr	r0, [pc, #376]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e80:	f00b f90a 	bl	e098 <Print::print(long)>
			Serial.print("|| (a) use_full_range:\t");
			Serial.print(leds.use_full_range);
			Serial.println("\t||");
    2e84:	495e      	ldr	r1, [pc, #376]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2e86:	485c      	ldr	r0, [pc, #368]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e88:	f7fd fd6a 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2e8c:	496a      	ldr	r1, [pc, #424]	; (3038 <LEDDebug(LEDStruct&)+0xe2c>)
    2e8e:	485a      	ldr	r0, [pc, #360]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e90:	f7fd fd58 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2e94:	2300      	movs	r3, #0
    2e96:	220a      	movs	r2, #10
    2e98:	f894 184c 	ldrb.w	r1, [r4, #2124]	; 0x84c
    2e9c:	4856      	ldr	r0, [pc, #344]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2e9e:	f00b f8bb 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) plasma_beat1:\t");
			Serial.print(leds.plasma_beat1);
			Serial.println("\t||");
    2ea2:	4957      	ldr	r1, [pc, #348]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2ea4:	4854      	ldr	r0, [pc, #336]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ea6:	f7fd fd5b 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2eaa:	4964      	ldr	r1, [pc, #400]	; (303c <LEDDebug(LEDStruct&)+0xe30>)
    2eac:	4852      	ldr	r0, [pc, #328]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2eae:	f7fd fd49 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2eb2:	2300      	movs	r3, #0
    2eb4:	220a      	movs	r2, #10
    2eb6:	f894 184d 	ldrb.w	r1, [r4, #2125]	; 0x84d
    2eba:	484f      	ldr	r0, [pc, #316]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ebc:	f00b f8ac 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (c) plasma_beat2:\t");
			Serial.print(leds.plasma_beat2);
			Serial.println("\t||");
    2ec0:	494f      	ldr	r1, [pc, #316]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2ec2:	484d      	ldr	r0, [pc, #308]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ec4:	f7fd fd4c 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ec8:	495d      	ldr	r1, [pc, #372]	; (3040 <LEDDebug(LEDStruct&)+0xe34>)
    2eca:	484b      	ldr	r0, [pc, #300]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ecc:	f7fd fd3a 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2ed0:	2300      	movs	r3, #0
    2ed2:	220a      	movs	r2, #10
    2ed4:	f894 184e 	ldrb.w	r1, [r4, #2126]	; 0x84e
    2ed8:	4847      	ldr	r0, [pc, #284]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2eda:	f00b f89d 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (d) plasma_beat3:\t");
			Serial.print(leds.plasma_beat3);
			Serial.println("\t||");
    2ede:	4948      	ldr	r1, [pc, #288]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2ee0:	4845      	ldr	r0, [pc, #276]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ee2:	f7fd fd3d 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2ee6:	4957      	ldr	r1, [pc, #348]	; (3044 <LEDDebug(LEDStruct&)+0xe38>)
    2ee8:	4843      	ldr	r0, [pc, #268]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2eea:	f7fd fd2b 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2eee:	2300      	movs	r3, #0
    2ef0:	220a      	movs	r2, #10
    2ef2:	f894 1851 	ldrb.w	r1, [r4, #2129]	; 0x851
    2ef6:	4840      	ldr	r0, [pc, #256]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2ef8:	f00b f88e 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (e) plasma_range1:\t");
			Serial.print(leds.plasma_range1);
			Serial.println("\t||");
    2efc:	4940      	ldr	r1, [pc, #256]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2efe:	483e      	ldr	r0, [pc, #248]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f00:	f7fd fd2e 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f04:	4950      	ldr	r1, [pc, #320]	; (3048 <LEDDebug(LEDStruct&)+0xe3c>)
    2f06:	483c      	ldr	r0, [pc, #240]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f08:	f7fd fd1c 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f0c:	f894 1852 	ldrb.w	r1, [r4, #2130]	; 0x852
    2f10:	f7ff ba96 	b.w	2440 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.out_min2);
			Serial.println("\t||");
			break;

		case WAVES:
			Serial.println("==============WAVES===============");
    2f14:	494d      	ldr	r1, [pc, #308]	; (304c <LEDDebug(LEDStruct&)+0xe40>)
    2f16:	4838      	ldr	r0, [pc, #224]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f18:	f7fd fd22 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f1c:	494c      	ldr	r1, [pc, #304]	; (3050 <LEDDebug(LEDStruct&)+0xe44>)
    2f1e:	4836      	ldr	r0, [pc, #216]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f20:	f7fd fd10 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f24:	2300      	movs	r3, #0
    2f26:	220a      	movs	r2, #10
    2f28:	f894 1859 	ldrb.w	r1, [r4, #2137]	; 0x859
    2f2c:	4832      	ldr	r0, [pc, #200]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f2e:	f00b f873 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (a) wave_beat:\t");
			Serial.print(leds.wave_beat);
			Serial.println("\t||");
    2f32:	4933      	ldr	r1, [pc, #204]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2f34:	4830      	ldr	r0, [pc, #192]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f36:	f7fd fd13 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f3a:	4946      	ldr	r1, [pc, #280]	; (3054 <LEDDebug(LEDStruct&)+0xe48>)
    2f3c:	482e      	ldr	r0, [pc, #184]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f3e:	f7fd fd01 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f42:	f894 185a 	ldrb.w	r1, [r4, #2138]	; 0x85a
    2f46:	f7ff ba7b 	b.w	2440 <LEDDebug(LEDStruct&)+0x234>
			Serial.print(leds.wave_speed);
			Serial.println("\t||");
			break;

		default:
			Serial.println("");
    2f4a:	4943      	ldr	r1, [pc, #268]	; (3058 <LEDDebug(LEDStruct&)+0xe4c>)
    2f4c:	482a      	ldr	r0, [pc, #168]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f4e:	f7fd fd07 	bl	960 <Print::println(char const*)>
			Serial.println("==========MODE TYPE ERROR=========");
    2f52:	4942      	ldr	r1, [pc, #264]	; (305c <LEDDebug(LEDStruct&)+0xe50>)
    2f54:	4828      	ldr	r0, [pc, #160]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f56:	f7fd fd03 	bl	960 <Print::println(char const*)>
			Serial.println("");
    2f5a:	493f      	ldr	r1, [pc, #252]	; (3058 <LEDDebug(LEDStruct&)+0xe4c>)
    2f5c:	4826      	ldr	r0, [pc, #152]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f5e:	f7fd fcff 	bl	960 <Print::println(char const*)>
			break;
    2f62:	f7ff ba76 	b.w	2452 <LEDDebug(LEDStruct&)+0x246>
	Serial.println("");
	Serial.println("==================================");

	// Print which Array it is
	if		(leds.array_type == CURRENT) { Serial.println("==============CURRENT============="); }
	else if (leds.array_type == NEXT)	 { Serial.println("~~~~~~~~~~~~~~~NEXT~~~~~~~~~~~~~~~"); }
    2f66:	493e      	ldr	r1, [pc, #248]	; (3060 <LEDDebug(LEDStruct&)+0xe54>)
    2f68:	4823      	ldr	r0, [pc, #140]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f6a:	f7fd fcf9 	bl	960 <Print::println(char const*)>
    2f6e:	f7ff b965 	b.w	223c <LEDDebug(LEDStruct&)+0x30>
		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
    2f72:	493c      	ldr	r1, [pc, #240]	; (3064 <LEDDebug(LEDStruct&)+0xe58>)
    2f74:	4820      	ldr	r0, [pc, #128]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f76:	f7fd fcf3 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f7a:	493b      	ldr	r1, [pc, #236]	; (3068 <LEDDebug(LEDStruct&)+0xe5c>)
    2f7c:	481e      	ldr	r0, [pc, #120]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f7e:	f7fd fce1 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2f82:	2300      	movs	r3, #0
    2f84:	220a      	movs	r2, #10
    2f86:	f894 127c 	ldrb.w	r1, [r4, #636]	; 0x27c
    2f8a:	481b      	ldr	r0, [pc, #108]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f8c:	f00b f844 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
				default: break;
			}
			Serial.print("|| (a) sparking:\t");
			Serial.print(leds.fire_sparking);
			Serial.println("\t||");
    2f90:	491b      	ldr	r1, [pc, #108]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2f92:	4819      	ldr	r0, [pc, #100]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f94:	f7fd fce4 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2f98:	4934      	ldr	r1, [pc, #208]	; (306c <LEDDebug(LEDStruct&)+0xe60>)
    2f9a:	4817      	ldr	r0, [pc, #92]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2f9c:	f7fd fcd2 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fa0:	2300      	movs	r3, #0
    2fa2:	220a      	movs	r2, #10
    2fa4:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    2fa8:	4813      	ldr	r0, [pc, #76]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2faa:	f00b f835 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print("|| (b) cooling:\t\t");
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
    2fae:	4914      	ldr	r1, [pc, #80]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2fb0:	4811      	ldr	r0, [pc, #68]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2fb2:	f7fd fcd5 	bl	960 <Print::println(char const*)>
			if (!leds.fire_sync) {
    2fb6:	f894 5318 	ldrb.w	r5, [r4, #792]	; 0x318
    2fba:	2d00      	cmp	r5, #0
    2fbc:	d05c      	beq.n	3078 <LEDDebug(LEDStruct&)+0xe6c>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fbe:	492c      	ldr	r1, [pc, #176]	; (3070 <LEDDebug(LEDStruct&)+0xe64>)
    2fc0:	480d      	ldr	r0, [pc, #52]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2fc2:	f7fd fcbf 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    2fc6:	f894 1318 	ldrb.w	r1, [r4, #792]	; 0x318
    2fca:	480b      	ldr	r0, [pc, #44]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2fcc:	f00b f864 	bl	e098 <Print::print(long)>
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
			}
			Serial.print("|| (e) sync:\t\t");
			Serial.print(leds.fire_sync);
			Serial.println("\t||");
    2fd0:	490b      	ldr	r1, [pc, #44]	; (3000 <LEDDebug(LEDStruct&)+0xdf4>)
    2fd2:	4809      	ldr	r0, [pc, #36]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2fd4:	f7fd fcc4 	bl	960 <Print::println(char const*)>
			if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) {
    2fd8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    2fdc:	3b10      	subs	r3, #16
    2fde:	2b01      	cmp	r3, #1
    2fe0:	f63f aa37 	bhi.w	2452 <LEDDebug(LEDStruct&)+0x246>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    2fe4:	4923      	ldr	r1, [pc, #140]	; (3074 <LEDDebug(LEDStruct&)+0xe68>)
    2fe6:	4804      	ldr	r0, [pc, #16]	; (2ff8 <LEDDebug(LEDStruct&)+0xdec>)
    2fe8:	f7fd fcac 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2fec:	f894 131b 	ldrb.w	r1, [r4, #795]	; 0x31b
    2ff0:	f7ff ba26 	b.w	2440 <LEDDebug(LEDStruct&)+0x234>
    2ff4:	00011a34 	.word	0x00011a34
    2ff8:	1fff878c 	.word	0x1fff878c
    2ffc:	00011a58 	.word	0x00011a58
    3000:	00011130 	.word	0x00011130
    3004:	00011a70 	.word	0x00011a70
    3008:	00011a88 	.word	0x00011a88
    300c:	00011aa0 	.word	0x00011aa0
    3010:	00011ab4 	.word	0x00011ab4
    3014:	00011ac8 	.word	0x00011ac8
    3018:	00011ad8 	.word	0x00011ad8
    301c:	00011ae8 	.word	0x00011ae8
    3020:	00011230 	.word	0x00011230
    3024:	00011b0c 	.word	0x00011b0c
    3028:	00011b24 	.word	0x00011b24
    302c:	00011b40 	.word	0x00011b40
    3030:	00011b5c 	.word	0x00011b5c
    3034:	00011b74 	.word	0x00011b74
    3038:	00011b98 	.word	0x00011b98
    303c:	00011bb0 	.word	0x00011bb0
    3040:	00011bc8 	.word	0x00011bc8
    3044:	00011be0 	.word	0x00011be0
    3048:	00011bf8 	.word	0x00011bf8
    304c:	00011c98 	.word	0x00011c98
    3050:	00011cbc 	.word	0x00011cbc
    3054:	00011cd0 	.word	0x00011cd0
    3058:	0001126c 	.word	0x0001126c
    305c:	00011ce4 	.word	0x00011ce4
    3060:	000110f8 	.word	0x000110f8
    3064:	000113ec 	.word	0x000113ec
    3068:	00011458 	.word	0x00011458
    306c:	0001146c 	.word	0x0001146c
    3070:	000114a8 	.word	0x000114a8
    3074:	000114b8 	.word	0x000114b8
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3078:	492d      	ldr	r1, [pc, #180]	; (3130 <LEDDebug(LEDStruct&)+0xf24>)
    307a:	482e      	ldr	r0, [pc, #184]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    307c:	f7fd fc62 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3080:	462b      	mov	r3, r5
    3082:	220a      	movs	r2, #10
    3084:	f894 127d 	ldrb.w	r1, [r4, #637]	; 0x27d
    3088:	482a      	ldr	r0, [pc, #168]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    308a:	f00a ffc5 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
			Serial.print(leds.fire_cooling);
			Serial.println("\t||");
			if (!leds.fire_sync) {
				Serial.print("|| (c) sparking2:\t");
				Serial.print(leds.fire_sparking2);
				Serial.println("\t||");
    308e:	492a      	ldr	r1, [pc, #168]	; (3138 <LEDDebug(LEDStruct&)+0xf2c>)
    3090:	4828      	ldr	r0, [pc, #160]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    3092:	f7fd fc65 	bl	960 <Print::println(char const*)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    3096:	4929      	ldr	r1, [pc, #164]	; (313c <LEDDebug(LEDStruct&)+0xf30>)
    3098:	4826      	ldr	r0, [pc, #152]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    309a:	f7fd fc53 	bl	944 <Print::write(char const*)>
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    309e:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    30a2:	4824      	ldr	r0, [pc, #144]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30a4:	462b      	mov	r3, r5
    30a6:	220a      	movs	r2, #10
    30a8:	f00a ffb6 	bl	e018 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
				Serial.print("|| (d) cooling2:\t");
				Serial.print(leds.fire_cooling2);
				Serial.println("\t||");
    30ac:	4922      	ldr	r1, [pc, #136]	; (3138 <LEDDebug(LEDStruct&)+0xf2c>)
    30ae:	4821      	ldr	r0, [pc, #132]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30b0:	f7fd fc56 	bl	960 <Print::println(char const*)>
    30b4:	e783      	b.n	2fbe <LEDDebug(LEDStruct&)+0xdb2>
			Serial.println("============FIREWORKS=============");
			Serial.print("|| Current Stage:\t");
			switch (leds.current_stage) {
				case WAITING:	Serial.print("WAITING"); Serial.println("\t||"); break;
				case FADEUP:	Serial.print("FADEUP");  Serial.println("\t||"); break;
				case EXPLOSION: Serial.println("EXPLOSION|"); break;
    30b6:	4922      	ldr	r1, [pc, #136]	; (3140 <LEDDebug(LEDStruct&)+0xf34>)
    30b8:	481e      	ldr	r0, [pc, #120]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30ba:	f7fd fc51 	bl	960 <Print::println(char const*)>
    30be:	e4b0      	b.n	2a22 <LEDDebug(LEDStruct&)+0x816>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    30c0:	4920      	ldr	r1, [pc, #128]	; (3144 <LEDDebug(LEDStruct&)+0xf38>)
    30c2:	481c      	ldr	r0, [pc, #112]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30c4:	f7fd fc3e 	bl	944 <Print::write(char const*)>
    30c8:	e681      	b.n	2dce <LEDDebug(LEDStruct&)+0xbc2>
			break;

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
    30ca:	491f      	ldr	r1, [pc, #124]	; (3148 <LEDDebug(LEDStruct&)+0xf3c>)
    30cc:	4819      	ldr	r0, [pc, #100]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30ce:	f7fd fc47 	bl	960 <Print::println(char const*)>
    30d2:	f7ff ba77 	b.w	25c4 <LEDDebug(LEDStruct&)+0x3b8>

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
    30d6:	491d      	ldr	r1, [pc, #116]	; (314c <LEDDebug(LEDStruct&)+0xf40>)
    30d8:	4816      	ldr	r0, [pc, #88]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30da:	f7fd fc41 	bl	960 <Print::println(char const*)>
    30de:	e74c      	b.n	2f7a <LEDDebug(LEDStruct&)+0xd6e>
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
    30e0:	491b      	ldr	r1, [pc, #108]	; (3150 <LEDDebug(LEDStruct&)+0xf44>)
    30e2:	4814      	ldr	r0, [pc, #80]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30e4:	f7fd fc3c 	bl	960 <Print::println(char const*)>
    30e8:	e747      	b.n	2f7a <LEDDebug(LEDStruct&)+0xd6e>
			}
			break;

		case FIRE:
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
    30ea:	491a      	ldr	r1, [pc, #104]	; (3154 <LEDDebug(LEDStruct&)+0xf48>)
    30ec:	4811      	ldr	r0, [pc, #68]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30ee:	f7fd fc37 	bl	960 <Print::println(char const*)>
    30f2:	e742      	b.n	2f7a <LEDDebug(LEDStruct&)+0xd6e>
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
				case FIRE_MIRROR_SYNC:	Serial.println("========FIRE MIRROR SYNC=========="); break;
    30f4:	4918      	ldr	r1, [pc, #96]	; (3158 <LEDDebug(LEDStruct&)+0xf4c>)
    30f6:	480f      	ldr	r0, [pc, #60]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    30f8:	f7fd fc32 	bl	960 <Print::println(char const*)>
    30fc:	e73d      	b.n	2f7a <LEDDebug(LEDStruct&)+0xd6e>
			switch (leds.mode_name) {
				case TORCH:				Serial.println("==============TORCH==============="); break;
				case TORCH_SYNC:		Serial.println("============TORCH SYNC============"); break;
				case FIRE:				Serial.println("==============FIRE================"); break;
				case FIRE_SYNC:			Serial.println("============FIRE SYNC============="); break;
				case FIRE_MIRROR:		Serial.println("===========FIRE MIRROR============"); break;
    30fe:	4917      	ldr	r1, [pc, #92]	; (315c <LEDDebug(LEDStruct&)+0xf50>)
    3100:	480c      	ldr	r0, [pc, #48]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    3102:	f7fd fc2d 	bl	960 <Print::println(char const*)>
    3106:	e738      	b.n	2f7a <LEDDebug(LEDStruct&)+0xd6e>
	Serial.println("=================================="); //4 tabs then ||

	// Print mode-specific variables
	switch (leds.mode_type) {
		case JUGGLE:
			if(leds.mode_name == JUGGLE_HALF)		{ Serial.println("============JUGGLE HALF==========="); }
    3108:	4915      	ldr	r1, [pc, #84]	; (3160 <LEDDebug(LEDStruct&)+0xf54>)
    310a:	480a      	ldr	r0, [pc, #40]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    310c:	f7fd fc28 	bl	960 <Print::println(char const*)>
    3110:	f7ff b9e0 	b.w	24d4 <LEDDebug(LEDStruct&)+0x2c8>

		case RAINBOW_MARCH:
			switch (leds.mode_name) {
				case RAINBOW_MARCH:			Serial.println("==========RAINBOW MARCH==========="); break;
				case RAINBOW_MARCH_SPLIT:	Serial.println("=======RAINBOW MARCH SPLIT========"); break;
				case RAINBOW_MARCH_BEAT:	Serial.println("=======RAINBOW MARCH BEAT========="); break;
    3114:	4913      	ldr	r1, [pc, #76]	; (3164 <LEDDebug(LEDStruct&)+0xf58>)
    3116:	4807      	ldr	r0, [pc, #28]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    3118:	f7fd fc22 	bl	960 <Print::println(char const*)>
    311c:	f7ff ba52 	b.w	25c4 <LEDDebug(LEDStruct&)+0x3b8>
    3120:	4911      	ldr	r1, [pc, #68]	; (3168 <LEDDebug(LEDStruct&)+0xf5c>)
    3122:	e477      	b.n	2a14 <LEDDebug(LEDStruct&)+0x808>
    3124:	4911      	ldr	r1, [pc, #68]	; (316c <LEDDebug(LEDStruct&)+0xf60>)
    3126:	4803      	ldr	r0, [pc, #12]	; (3134 <LEDDebug(LEDStruct&)+0xf28>)
    3128:	f7fd fc0c 	bl	944 <Print::write(char const*)>
    312c:	e64f      	b.n	2dce <LEDDebug(LEDStruct&)+0xbc2>
    312e:	bf00      	nop
    3130:	00011480 	.word	0x00011480
    3134:	1fff878c 	.word	0x1fff878c
    3138:	00011130 	.word	0x00011130
    313c:	00011494 	.word	0x00011494
    3140:	000115bc 	.word	0x000115bc
    3144:	00011ad0 	.word	0x00011ad0
    3148:	000112f0 	.word	0x000112f0
    314c:	000113c8 	.word	0x000113c8
    3150:	000113a4 	.word	0x000113a4
    3154:	00011380 	.word	0x00011380
    3158:	00011434 	.word	0x00011434
    315c:	00011410 	.word	0x00011410
    3160:	000111c4 	.word	0x000111c4
    3164:	00011314 	.word	0x00011314
    3168:	000115b4 	.word	0x000115b4
    316c:	000115b8 	.word	0x000115b8

00003170 <change_palette(LEDStruct&) [clone .part.11]>:
	next_leds.mode_name = ModeList[next_leds.mode_number];
	switch_mode(next_leds);
}

// Change palette
void change_palette(LEDStruct& leds) {
    3170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3174:	b08d      	sub	sp, #52	; 0x34
    3176:	2134      	movs	r1, #52	; 0x34
    3178:	4605      	mov	r5, r0
    317a:	9009      	str	r0, [sp, #36]	; 0x24
    317c:	4846      	ldr	r0, [pc, #280]	; (3298 <change_palette(LEDStruct&) [clone .part.11]+0x128>)
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
		leds.target_palette = palettes[leds.palette_index];
    317e:	4c47      	ldr	r4, [pc, #284]	; (329c <change_palette(LEDStruct&) [clone .part.11]+0x12c>)
    3180:	f00a fd36 	bl	dbf0 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    3184:	4846      	ldr	r0, [pc, #280]	; (32a0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    3186:	f00a ff37 	bl	dff8 <Print::println()>
    318a:	2133      	movs	r1, #51	; 0x33
    318c:	4845      	ldr	r0, [pc, #276]	; (32a4 <change_palette(LEDStruct&) [clone .part.11]+0x134>)
    318e:	f00a fd2f 	bl	dbf0 <usb_serial_write>
    3192:	4843      	ldr	r0, [pc, #268]	; (32a0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    3194:	f00a ff30 	bl	dff8 <Print::println()>
    3198:	2133      	movs	r1, #51	; 0x33
    319a:	4843      	ldr	r0, [pc, #268]	; (32a8 <change_palette(LEDStruct&) [clone .part.11]+0x138>)
    319c:	f00a fd28 	bl	dbf0 <usb_serial_write>
    31a0:	483f      	ldr	r0, [pc, #252]	; (32a0 <change_palette(LEDStruct&) [clone .part.11]+0x130>)
    31a2:	f00a ff29 	bl	dff8 <Print::println()>
    31a6:	4841      	ldr	r0, [pc, #260]	; (32ac <change_palette(LEDStruct&) [clone .part.11]+0x13c>)
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    31a8:	4a41      	ldr	r2, [pc, #260]	; (32b0 <change_palette(LEDStruct&) [clone .part.11]+0x140>)
    31aa:	8803      	ldrh	r3, [r0, #0]
    31ac:	7811      	ldrb	r1, [r2, #0]
    31ae:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    31b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    31b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    31ba:	3319      	adds	r3, #25
    31bc:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    31be:	eb03 2213 	add.w	r2, r3, r3, lsr #8
    31c2:	b2d2      	uxtb	r2, r2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    31c4:	fb12 f201 	smulbb	r2, r2, r1
    31c8:	1212      	asrs	r2, r2, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    31ca:	8003      	strh	r3, [r0, #0]
		leds.target_palette = palettes[leds.palette_index];
    31cc:	f854 8022 	ldr.w	r8, [r4, r2, lsl #2]
		if (DEBUG) {
			Serial.println("\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^Changing Palette^^^^^^^^^^^^^^^^^^");
			Serial.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^");
		}
		leds.palette_index = random8(palette_count);
    31d0:	f885 2229 	strb.w	r2, [r5, #553]	; 0x229
    {
        TRGBGradientPaletteEntryUnion* progent = (TRGBGradientPaletteEntryUnion*)(progpal);
        TRGBGradientPaletteEntryUnion u;

        // Count entries
        uint16_t count = 0;
    31d4:	2700      	movs	r7, #0
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
    31d6:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
            count++;;
        } while ( u.index != 255);
    31da:	b2db      	uxtb	r3, r3

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    31dc:	3701      	adds	r7, #1
        } while ( u.index != 255);
    31de:	2bff      	cmp	r3, #255	; 0xff

        // Count entries
        uint16_t count = 0;
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
    31e0:	b2bf      	uxth	r7, r7
        } while ( u.index != 255);
    31e2:	d1f8      	bne.n	31d6 <change_palette(LEDStruct&) [clone .part.11]+0x66>

        int8_t lastSlotUsed = -1;

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    31e4:	f8d8 3000 	ldr.w	r3, [r8]
    31e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    31ea:	9708      	str	r7, [sp, #32]
        CRGB rgbstart( u.r, u.g, u.b);
    31ec:	ea4f 6913 	mov.w	r9, r3, lsr #24
    31f0:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
    31f4:	f3c3 2b07 	ubfx	fp, r3, #8, #8
    31f8:	f3c3 4a07 	ubfx	sl, r3, #16, #8
        do {
            u.dword = FL_PGM_READ_DWORD_NEAR(progent + count);
            count++;;
        } while ( u.index != 255);

        int8_t lastSlotUsed = -1;
    31fc:	f04f 33ff 	mov.w	r3, #4294967295
    3200:	9207      	str	r2, [sp, #28]
    3202:	9306      	str	r3, [sp, #24]

        u.dword = FL_PGM_READ_DWORD_NEAR( progent);
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
    3204:	2400      	movs	r4, #0
    3206:	46ce      	mov	lr, r9
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
    3208:	f858 5f04 	ldr.w	r5, [r8, #4]!
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    320c:	9807      	ldr	r0, [sp, #28]
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    320e:	f3c5 2707 	ubfx	r7, r5, #8, #8
            istart8 = indexstart / 16;
    3212:	ea4f 1c24 	mov.w	ip, r4, asr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3216:	f3c5 4607 	ubfx	r6, r5, #16, #8
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
    321a:	b2ec      	uxtb	r4, r5
            CRGB rgbend( u.r, u.g, u.b);
    321c:	b2f9      	uxtb	r1, r7
    321e:	f3c5 6507 	ubfx	r5, r5, #24, #8
    3222:	9104      	str	r1, [sp, #16]
    3224:	b2e9      	uxtb	r1, r5
    3226:	9105      	str	r1, [sp, #20]
            istart8 = indexstart / 16;
    3228:	fa5f f18c 	uxtb.w	r1, ip
    322c:	9103      	str	r1, [sp, #12]
            iend8   = indexend   / 16;
            if( count < 16) {
    322e:	9908      	ldr	r1, [sp, #32]
    3230:	290f      	cmp	r1, #15
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3232:	aa0a      	add	r2, sp, #40	; 0x28
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
    3234:	ea4f 1314 	mov.w	r3, r4, lsr #4
        uint8_t iend8 = 0;
        while( indexstart < 255) {
            progent++;
            u.dword = FL_PGM_READ_DWORD_NEAR( progent);
            int indexend  = u.index;
            CRGB rgbend( u.r, u.g, u.b);
    3238:	fa5f f986 	uxtb.w	r9, r6
            istart8 = indexstart / 16;
            iend8   = indexend   / 16;
            if( count < 16) {
    323c:	d80c      	bhi.n	3258 <change_palette(LEDStruct&) [clone .part.11]+0xe8>
                if( (istart8 <= lastSlotUsed) && (lastSlotUsed < 15)) {
    323e:	9906      	ldr	r1, [sp, #24]
    3240:	458c      	cmp	ip, r1
    3242:	dc07      	bgt.n	3254 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
    3244:	290f      	cmp	r1, #15
    3246:	d005      	beq.n	3254 <change_palette(LEDStruct&) [clone .part.11]+0xe4>
                    istart8 = lastSlotUsed + 1;
    3248:	3101      	adds	r1, #1
    324a:	b2c9      	uxtb	r1, r1
    324c:	428b      	cmp	r3, r1
    324e:	9103      	str	r1, [sp, #12]
    3250:	bf38      	it	cc
    3252:	460b      	movcc	r3, r1
                    if( iend8 < istart8) {
                        iend8 = istart8;
                    }
                }
                lastSlotUsed = iend8;
    3254:	b259      	sxtb	r1, r3
    3256:	9106      	str	r1, [sp, #24]
            }
            fill_gradient_RGB( &(entries[0]), istart8, rgbstart, iend8, rgbend);
    3258:	a90b      	add	r1, sp, #44	; 0x2c
    325a:	9100      	str	r1, [sp, #0]
    325c:	9903      	ldr	r1, [sp, #12]
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    325e:	f88d b028 	strb.w	fp, [sp, #40]	; 0x28
        g = rhs.g;
    3262:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
        b = rhs.b;
    3266:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    326a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
        g = rhs.g;
    326e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
        b = rhs.b;
    3272:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
    3276:	f008 fc17 	bl	baa8 <fill_gradient_RGB(CRGB*, unsigned short, CRGB, unsigned short, CRGB)>
        CRGB rgbstart( u.r, u.g, u.b);

        int indexstart = 0;
        uint8_t istart8 = 0;
        uint8_t iend8 = 0;
        while( indexstart < 255) {
    327a:	2cff      	cmp	r4, #255	; 0xff
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    327c:	f8dd b010 	ldr.w	fp, [sp, #16]
        g = rhs.g;
        b = rhs.b;
    3280:	f8dd e014 	ldr.w	lr, [sp, #20]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    3284:	46ca      	mov	sl, r9
    3286:	d1bf      	bne.n	3208 <change_palette(LEDStruct&) [clone .part.11]+0x98>
		leds.target_palette = palettes[leds.palette_index];
		if (DEBUG) { print_palette(leds.palette_index); }
    3288:	9b09      	ldr	r3, [sp, #36]	; 0x24
    328a:	f893 0229 	ldrb.w	r0, [r3, #553]	; 0x229
    328e:	f7fe fcaf 	bl	1bf0 <print_palette(unsigned char)>
	}
}
    3292:	b00d      	add	sp, #52	; 0x34
    3294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3298:	00011d2c 	.word	0x00011d2c
    329c:	000103b8 	.word	0x000103b8
    32a0:	1fff878c 	.word	0x1fff878c
    32a4:	00011d64 	.word	0x00011d64
    32a8:	00011d98 	.word	0x00011d98
    32ac:	1fff8784 	.word	0x1fff8784
    32b0:	1fff8750 	.word	0x1fff8750

000032b4 <juggle_update(LEDStruct&)>:

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    32b4:	4b24      	ldr	r3, [pc, #144]	; (3348 <juggle_update(LEDStruct&)+0x94>)
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    32b6:	4a25      	ldr	r2, [pc, #148]	; (334c <juggle_update(LEDStruct&)+0x98>)
	switch (update_var) {
    32b8:	781b      	ldrb	r3, [r3, #0]
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
    32ba:	2100      	movs	r1, #0
    32bc:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    32be:	2b07      	cmp	r3, #7
    32c0:	d809      	bhi.n	32d6 <juggle_update(LEDStruct&)+0x22>
    32c2:	e8df f003 	tbb	[pc, r3]
    32c6:	1c13      	.short	0x1c13
    32c8:	04342e25 	.word	0x04342e25
    32cc:	0a3a      	.short	0x0a3a
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
    32ce:	4b20      	ldr	r3, [pc, #128]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    32d0:	881b      	ldrh	r3, [r3, #0]
    32d2:	f880 3232 	strb.w	r3, [r0, #562]	; 0x232
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    32d6:	f7fe bf99 	b.w	220c <LEDDebug(LEDStruct&)>
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
    32da:	4b1d      	ldr	r3, [pc, #116]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    32dc:	881b      	ldrh	r3, [r3, #0]
    32de:	3300      	adds	r3, #0
    32e0:	bf18      	it	ne
    32e2:	2301      	movne	r3, #1
    32e4:	f880 3234 	strb.w	r3, [r0, #564]	; 0x234
			default:	break;
	}
	LEDDebug(leds);
    32e8:	f7fe bf90 	b.w	220c <LEDDebug(LEDStruct&)>
}

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
    32ec:	4b18      	ldr	r3, [pc, #96]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    32ee:	881b      	ldrh	r3, [r3, #0]
    32f0:	3300      	adds	r3, #0
    32f2:	bf18      	it	ne
    32f4:	2301      	movne	r3, #1
    32f6:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    32fa:	f7fe bf87 	b.w	220c <LEDDebug(LEDStruct&)>

void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
    32fe:	4b14      	ldr	r3, [pc, #80]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    3300:	881b      	ldrh	r3, [r3, #0]
    3302:	3300      	adds	r3, #0
    3304:	bf18      	it	ne
    3306:	2301      	movne	r3, #1
    3308:	f880 3235 	strb.w	r3, [r0, #565]	; 0x235
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    330c:	f7fe bf7e 	b.w	220c <LEDDebug(LEDStruct&)>
void juggle_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
    3310:	4b0f      	ldr	r3, [pc, #60]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    3312:	881b      	ldrh	r3, [r3, #0]
    3314:	3300      	adds	r3, #0
    3316:	bf18      	it	ne
    3318:	2301      	movne	r3, #1
    331a:	f880 3236 	strb.w	r3, [r0, #566]	; 0x236
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    331e:	f7fe bf75 	b.w	220c <LEDDebug(LEDStruct&)>
	keyboard_update = 0;
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
    3322:	4b0b      	ldr	r3, [pc, #44]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    3324:	881b      	ldrh	r3, [r3, #0]
    3326:	f880 3230 	strb.w	r3, [r0, #560]	; 0x230
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    332a:	f7fe bf6f 	b.w	220c <LEDDebug(LEDStruct&)>
	switch (update_var) {
			case 0:		leds.use_full_range		= (bool)update_arg;		break;	//a
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
    332e:	4b08      	ldr	r3, [pc, #32]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    3330:	881b      	ldrh	r3, [r3, #0]
    3332:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3336:	f7fe bf69 	b.w	220c <LEDDebug(LEDStruct&)>
			case 1:		leds.juggle_one_dir		= (bool)update_arg;		break;	//b		
			case 2:		leds.juggle_phased		= (bool)update_arg;		break;	//c
			case 3:		leds.juggle_numdots		= (uint8_t)update_arg;	break;	//d
			case 4:		leds.juggle_beat		= (uint8_t)update_arg;	break;	//e
			case 5:		leds.juggle_fade		= (uint8_t)update_arg;	break;	//f
			case 6:		leds.juggle_diff		= (uint8_t)update_arg;	break;	//g
    333a:	4b05      	ldr	r3, [pc, #20]	; (3350 <juggle_update(LEDStruct&)+0x9c>)
    333c:	881b      	ldrh	r3, [r3, #0]
    333e:	f880 3233 	strb.w	r3, [r0, #563]	; 0x233
			case 7:		leds.juggle_index_reset = (bool)update_arg;		break;	//h
			default:	break;
	}
	LEDDebug(leds);
    3342:	f7fe bf63 	b.w	220c <LEDDebug(LEDStruct&)>
    3346:	bf00      	nop
    3348:	1fff9e94 	.word	0x1fff9e94
    334c:	1fff962d 	.word	0x1fff962d
    3350:	1fff951e 	.word	0x1fff951e

00003354 <juggle(LEDStruct&)>:



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    3354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3358:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e



// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
    335c:	b089      	sub	sp, #36	; 0x24
    335e:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3360:	2b00      	cmp	r3, #0
    3362:	f040 80a9 	bne.w	34b8 <juggle(LEDStruct&)+0x164>
    3366:	4e78      	ldr	r6, [pc, #480]	; (3548 <juggle(LEDStruct&)+0x1f4>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3368:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    336c:	8833      	ldrh	r3, [r6, #0]
    336e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3372:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3376:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    337a:	3019      	adds	r0, #25
    337c:	b280      	uxth	r0, r0
    337e:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3382:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3386:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    338a:	3519      	adds	r5, #25
    338c:	b2ad      	uxth	r5, r5
    338e:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3392:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3396:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    339a:	3319      	adds	r3, #25
    339c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    33a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    33a4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    33a8:	3319      	adds	r3, #25
    33aa:	b29b      	uxth	r3, r3
    33ac:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    33b0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    33b4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    33b8:	3119      	adds	r1, #25
    33ba:	b289      	uxth	r1, r1
    33bc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    33c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    33c4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    33c8:	3219      	adds	r2, #25
    33ca:	b292      	uxth	r2, r2
    33cc:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    33d0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    33d4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    33d8:	f10e 0e19 	add.w	lr, lr, #25
    33dc:	fa1f fe8e 	uxth.w	lr, lr
    33e0:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    33e4:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    33e8:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    33ec:	f10c 0c19 	add.w	ip, ip, #25
    33f0:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    33f4:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    33f8:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    33fc:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3400:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3404:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3408:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    340a:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    340c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3410:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3414:	b2c9      	uxtb	r1, r1
    3416:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    341a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    341e:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3420:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3424:	f108 0819 	add.w	r8, r8, #25
    3428:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    342c:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    3430:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3432:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3434:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3438:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    343c:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3440:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    3444:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3448:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    344a:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    344e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3452:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3456:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    345a:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    345c:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3460:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3464:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3468:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    346c:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3470:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3474:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3476:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3478:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    347c:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3480:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3484:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3488:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    348c:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3490:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3494:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3498:	f1bc 0f00 	cmp.w	ip, #0
    349c:	d004      	beq.n	34a8 <juggle(LEDStruct&)+0x154>
    349e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    34a2:	408b      	lsls	r3, r1
    34a4:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    34a8:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    34ac:	2b06      	cmp	r3, #6
    34ae:	f000 838b 	beq.w	3bc8 <juggle(LEDStruct&)+0x874>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    34b2:	2b04      	cmp	r3, #4
    34b4:	f000 838f 	beq.w	3bd6 <juggle(LEDStruct&)+0x882>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    34b8:	4b24      	ldr	r3, [pc, #144]	; (354c <juggle(LEDStruct&)+0x1f8>)
    34ba:	781b      	ldrb	r3, [r3, #0]
    34bc:	2b00      	cmp	r3, #0
    34be:	f040 837f 	bne.w	3bc0 <juggle(LEDStruct&)+0x86c>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { 
    34c2:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    34c6:	b1d3      	cbz	r3, 34fe <juggle(LEDStruct&)+0x1aa>
    34c8:	4b21      	ldr	r3, [pc, #132]	; (3550 <juggle(LEDStruct&)+0x1fc>)
    34ca:	f894 1229 	ldrb.w	r1, [r4, #553]	; 0x229
		leds.juggle_index = 0; 
    34ce:	2200      	movs	r2, #0
    34d0:	f103 0027 	add.w	r0, r3, #39	; 0x27
    34d4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
    34d8:	e001      	b.n	34de <juggle(LEDStruct&)+0x18a>
		default:	Serial.println("Not a gradient palette");		break;
	}
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
    34da:	4283      	cmp	r3, r0
    34dc:	d00f      	beq.n	34fe <juggle(LEDStruct&)+0x1aa>
		if (leds.palette_index == bad_juggle_palettes[i]) {
    34de:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    34e2:	428a      	cmp	r2, r1
    34e4:	d1f9      	bne.n	34da <juggle(LEDStruct&)+0x186>
			leds.juggle_index_reset = 0;
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    34e6:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
    34ea:	4a1a      	ldr	r2, [pc, #104]	; (3554 <juggle(LEDStruct&)+0x200>)
    34ec:	fba2 2303 	umull	r2, r3, r2, r3
    34f0:	08db      	lsrs	r3, r3, #3
    34f2:	3301      	adds	r3, #1
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    34f4:	2200      	movs	r2, #0
			leds.juggle_diff = leds.juggle_diff / 10 + 1;
    34f6:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
}

void palette_check(LEDStruct& leds) {
	for (uint8_t i = 0; i < ARRAY_SIZE(bad_juggle_palettes); i++) {
		if (leds.palette_index == bad_juggle_palettes[i]) {
			leds.juggle_index_reset = 0;
    34fa:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
		palette_check(leds);
	}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    34fe:	2196      	movs	r1, #150	; 0x96
    3500:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3504:	4620      	mov	r0, r4
    3506:	f008 fb61 	bl	bbcc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
    350a:	f894 1235 	ldrb.w	r1, [r4, #565]	; 0x235
    350e:	2900      	cmp	r1, #0
    3510:	f040 80eb 	bne.w	36ea <juggle(LEDStruct&)+0x396>
		if (leds.juggle_phased) {
    3514:	f894 7236 	ldrb.w	r7, [r4, #566]	; 0x236
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3518:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
    351c:	2f00      	cmp	r7, #0
    351e:	f000 8142 	beq.w	37a6 <juggle(LEDStruct&)+0x452>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3522:	2b00      	cmp	r3, #0
    3524:	f000 8261 	beq.w	39ea <juggle(LEDStruct&)+0x696>
    3528:	480b      	ldr	r0, [pc, #44]	; (3558 <juggle(LEDStruct&)+0x204>)
    352a:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    352e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 355c <juggle(LEDStruct&)+0x208>
    3532:	9003      	str	r0, [sp, #12]
    3534:	f8df b028 	ldr.w	fp, [pc, #40]	; 3560 <juggle(LEDStruct&)+0x20c>
    3538:	460f      	mov	r7, r1
    353a:	f10d 0a1c 	add.w	sl, sp, #28
    353e:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3542:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3546:	e06b      	b.n	3620 <juggle(LEDStruct&)+0x2cc>
    3548:	1fff8784 	.word	0x1fff8784
    354c:	1fff962d 	.word	0x1fff962d
    3550:	1fff875b 	.word	0x1fff875b
    3554:	cccccccd 	.word	0xcccccccd
    3558:	000105cc 	.word	0x000105cc
    355c:	1fffb1a0 	.word	0x1fffb1a0
    3560:	0000fe2c 	.word	0x0000fe2c
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3564:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3568:	443b      	add	r3, r7
    356a:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    356c:	f8d9 1000 	ldr.w	r1, [r9]
    3570:	9104      	str	r1, [sp, #16]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3572:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3574:	9904      	ldr	r1, [sp, #16]
    3576:	bf98      	it	ls
    3578:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    357a:	f44f 708c 	mov.w	r0, #280	; 0x118
    357e:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3582:	bf98      	it	ls
    3584:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    3586:	fb03 f301 	mul.w	r3, r3, r1
    358a:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    358c:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    358e:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3592:	d503      	bpl.n	359c <juggle(LEDStruct&)+0x248>
    3594:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3598:	3107      	adds	r1, #7
    359a:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    359c:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    359e:	9e03      	ldr	r6, [sp, #12]
    35a0:	5c36      	ldrb	r6, [r6, r0]
    35a2:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    35a6:	f3c1 0146 	ubfx	r1, r1, #1, #7
    35aa:	fb06 0101 	mla	r1, r6, r1, r0
    35ae:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    35b0:	041e      	lsls	r6, r3, #16
    35b2:	bf48      	it	mi
    35b4:	4249      	negmi	r1, r1
    35b6:	b20e      	sxth	r6, r1
    35b8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    35bc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    35c0:	9100      	str	r1, [sp, #0]
    35c2:	4650      	mov	r0, sl
    35c4:	4641      	mov	r1, r8
    35c6:	f008 fb61 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    35ca:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    35ce:	2296      	movs	r2, #150	; 0x96
    35d0:	b29b      	uxth	r3, r3
    35d2:	fb02 f303 	mul.w	r3, r2, r3
    35d6:	0c1b      	lsrs	r3, r3, #16
    35d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    35dc:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    35de:	5ce2      	ldrb	r2, [r4, r3]
    35e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    35e4:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    35e8:	54e2      	strb	r2, [r4, r3]
    35ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
    35ee:	784a      	ldrb	r2, [r1, #1]
    35f0:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    35f4:	704a      	strb	r2, [r1, #1]
    35f6:	788b      	ldrb	r3, [r1, #2]
    35f8:	f89d 201e 	ldrb.w	r2, [sp, #30]
    35fc:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3600:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3602:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3606:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    360a:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    360e:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3610:	440a      	add	r2, r1
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3612:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3614:	b2d2      	uxtb	r2, r2
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    3616:	42bb      	cmp	r3, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3618:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	// Cycle juggle routine
	if(!leds.juggle_one_dir){
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE PHASED
    361c:	f240 81e5 	bls.w	39ea <juggle(LEDStruct&)+0x696>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3620:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
    3624:	2900      	cmp	r1, #0
    3626:	d19d      	bne.n	3564 <juggle(LEDStruct&)+0x210>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3628:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    362c:	443b      	add	r3, r7
    362e:	440b      	add	r3, r1
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3630:	f8d9 1000 	ldr.w	r1, [r9]
    3634:	9105      	str	r1, [sp, #20]

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3636:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3638:	9905      	ldr	r1, [sp, #20]
    363a:	bf98      	it	ls
    363c:	021b      	lslls	r3, r3, #8
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    363e:	f44f 708c 	mov.w	r0, #280	; 0x118
    3642:	fb00 f101 	mul.w	r1, r0, r1

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3646:	bf98      	it	ls
    3648:	b29b      	uxthls	r3, r3
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    364a:	fb03 f301 	mul.w	r3, r3, r1
    364e:	0c1b      	lsrs	r3, r3, #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3650:	0458      	lsls	r0, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3652:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3656:	d503      	bpl.n	3660 <juggle(LEDStruct&)+0x30c>
    3658:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    365c:	3107      	adds	r1, #7
    365e:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3660:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3662:	9e03      	ldr	r6, [sp, #12]
    3664:	5c36      	ldrb	r6, [r6, r0]
    3666:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    366a:	f3c1 0146 	ubfx	r1, r1, #1, #7
    366e:	fb06 0101 	mla	r1, r6, r1, r0
    3672:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3674:	041e      	lsls	r6, r3, #16
    3676:	bf48      	it	mi
    3678:	4249      	negmi	r1, r1
    367a:	b20e      	sxth	r6, r1
    367c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3680:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3684:	9100      	str	r1, [sp, #0]
    3686:	4650      	mov	r0, sl
    3688:	4641      	mov	r1, r8
    368a:	f008 faff 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    368e:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    3692:	b29b      	uxth	r3, r3
    3694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3698:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    369c:	0c1b      	lsrs	r3, r3, #16
    369e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    36a2:	18e1      	adds	r1, r4, r3
    36a4:	5ce2      	ldrb	r2, [r4, r3]
    36a6:	f89d 001c 	ldrb.w	r0, [sp, #28]
    36aa:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    36ae:	54e2      	strb	r2, [r4, r3]
    36b0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    36b4:	784a      	ldrb	r2, [r1, #1]
    36b6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    36ba:	704a      	strb	r2, [r1, #1]
    36bc:	788b      	ldrb	r3, [r1, #2]
    36be:	f89d 201e 	ldrb.w	r2, [sp, #30]
    36c2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    36c6:	708b      	strb	r3, [r1, #2]
    36c8:	4622      	mov	r2, r4
    36ca:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    36cc:	7819      	ldrb	r1, [r3, #0]
    36ce:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    36d2:	7859      	ldrb	r1, [r3, #1]
    36d4:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    36d8:	7899      	ldrb	r1, [r3, #2]
    36da:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    36de:	3303      	adds	r3, #3
LEDStruct curr_over_leds;
LEDStruct next_over_leds;

// To duplicate one side of the strip with the other
void strip_sync(LEDStruct& leds) {
	for (uint16_t i = 0; i < ONE_SIDE; i++) {
    36e0:	429d      	cmp	r5, r3
    36e2:	f1a2 0203 	sub.w	r2, r2, #3
    36e6:	d1f1      	bne.n	36cc <juggle(LEDStruct&)+0x378>
    36e8:	e78b      	b.n	3602 <juggle(LEDStruct&)+0x2ae>
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
	else {
		if (leds.juggle_phased) {
    36ea:	f894 6236 	ldrb.w	r6, [r4, #566]	; 0x236
    36ee:	2e00      	cmp	r6, #0
    36f0:	f000 8124 	beq.w	393c <juggle(LEDStruct&)+0x5e8>
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    36f4:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    36f8:	2b00      	cmp	r3, #0
    36fa:	f000 8176 	beq.w	39ea <juggle(LEDStruct&)+0x696>
    36fe:	2500      	movs	r5, #0
    3700:	f10d 0a1c 	add.w	sl, sp, #28
    3704:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3708:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    370c:	e039      	b.n	3782 <juggle(LEDStruct&)+0x42e>
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    370e:	fb06 f305 	mul.w	r3, r6, r5
    3712:	2900      	cmp	r1, #0
    3714:	f000 81a3 	beq.w	3a5e <juggle(LEDStruct&)+0x70a>
    3718:	2295      	movs	r2, #149	; 0x95
    371a:	2100      	movs	r1, #0
    371c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3720:	f7fc fee8 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3724:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3728:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    372c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3730:	9100      	str	r1, [sp, #0]
    3732:	4607      	mov	r7, r0
    3734:	4641      	mov	r1, r8
    3736:	4650      	mov	r0, sl
    3738:	f008 faa8 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    373c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3740:	18e1      	adds	r1, r4, r3
    3742:	5ce2      	ldrb	r2, [r4, r3]
    3744:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3748:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    374c:	54e2      	strb	r2, [r4, r3]
    374e:	784a      	ldrb	r2, [r1, #1]
    3750:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3754:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3758:	704a      	strb	r2, [r1, #1]
    375a:	788b      	ldrb	r3, [r1, #2]
    375c:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3760:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3764:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3766:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    376a:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    376e:	f894 2230 	ldrb.w	r2, [r4, #560]	; 0x230
    3772:	3501      	adds	r5, #1
    3774:	b2ed      	uxtb	r5, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    3776:	440b      	add	r3, r1
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3778:	42aa      	cmp	r2, r5
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    377a:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			}
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    377e:	f240 8134 	bls.w	39ea <juggle(LEDStruct&)+0x696>
				if (leds.this_dir) {
    3782:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3786:	f894 11c4 	ldrb.w	r1, [r4, #452]	; 0x1c4
		}
	}
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
    378a:	2b00      	cmp	r3, #0
    378c:	d1bf      	bne.n	370e <juggle(LEDStruct&)+0x3ba>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    378e:	2900      	cmp	r1, #0
    3790:	f000 81db 	beq.w	3b4a <juggle(LEDStruct&)+0x7f6>
    3794:	4619      	mov	r1, r3
    3796:	2295      	movs	r2, #149	; 0x95
    3798:	fb06 f305 	mul.w	r3, r6, r5
    379c:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    37a0:	f7fc feea 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    37a4:	e7be      	b.n	3724 <juggle(LEDStruct&)+0x3d0>
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    37a6:	2b00      	cmp	r3, #0
    37a8:	f000 811f 	beq.w	39ea <juggle(LEDStruct&)+0x696>
    37ac:	4bc8      	ldr	r3, [pc, #800]	; (3ad0 <juggle(LEDStruct&)+0x77c>)
    37ae:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    37b2:	f8df 9320 	ldr.w	r9, [pc, #800]	; 3ad4 <juggle(LEDStruct&)+0x780>
    37b6:	9303      	str	r3, [sp, #12]
    37b8:	f8df b31c 	ldr.w	fp, [pc, #796]	; 3ad8 <juggle(LEDStruct&)+0x784>
    37bc:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
///           that oscillates within a given range.
LIB8STATIC uint16_t beatsin16( accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
                               uint32_t timebase = 0, uint16_t phase_offset = 0)
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    37c0:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    37c4:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    37c8:	e058      	b.n	387c <juggle(LEDStruct&)+0x528>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37ca:	f8d9 3000 	ldr.w	r3, [r9]
    37ce:	9306      	str	r3, [sp, #24]
	return ret;
    37d0:	9b06      	ldr	r3, [sp, #24]
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    37d2:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    37d6:	fb0a f303 	mul.w	r3, sl, r3
    37da:	0209      	lsls	r1, r1, #8
    37dc:	fb03 f301 	mul.w	r3, r3, r1
    37e0:	0379      	lsls	r1, r7, #13
    37e2:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    37e6:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    37e8:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    37ea:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    37ee:	d503      	bpl.n	37f8 <juggle(LEDStruct&)+0x4a4>
    37f0:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    37f4:	3307      	adds	r3, #7
    37f6:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    37f8:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    37fa:	9e03      	ldr	r6, [sp, #12]
    37fc:	5c36      	ldrb	r6, [r6, r0]
    37fe:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    3802:	f3c3 0346 	ubfx	r3, r3, #1, #7
    3806:	fb06 0303 	mla	r3, r6, r3, r0
    380a:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    380c:	040e      	lsls	r6, r1, #16
    380e:	bf48      	it	mi
    3810:	425b      	negmi	r3, r3
    3812:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3816:	b21e      	sxth	r6, r3
    3818:	a805      	add	r0, sp, #20
    381a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    381e:	9100      	str	r1, [sp, #0]
    3820:	4641      	mov	r1, r8
    3822:	f008 fa33 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3826:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    382a:	2296      	movs	r2, #150	; 0x96
    382c:	b29b      	uxth	r3, r3
    382e:	fb02 f303 	mul.w	r3, r2, r3
    3832:	0c1b      	lsrs	r3, r3, #16
    3834:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3838:	18e1      	adds	r1, r4, r3
    383a:	5ce2      	ldrb	r2, [r4, r3]
    383c:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3840:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3844:	54e2      	strb	r2, [r4, r3]
    3846:	f89d 3015 	ldrb.w	r3, [sp, #21]
    384a:	784a      	ldrb	r2, [r1, #1]
    384c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3850:	704a      	strb	r2, [r1, #1]
    3852:	788b      	ldrb	r3, [r1, #2]
    3854:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3858:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    385c:	708b      	strb	r3, [r1, #2]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    385e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3862:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3866:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    386a:	3701      	adds	r7, #1
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    386c:	441a      	add	r2, r3
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    386e:	b2ff      	uxtb	r7, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3870:	b2d2      	uxtb	r2, r2
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3872:	42b9      	cmp	r1, r7
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
    3874:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				else					 { leds.led_data[beatsin16(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {			// JUGGLE OUT OF PHASE
    3878:	f240 80b7 	bls.w	39ea <juggle(LEDStruct&)+0x696>
				if (leds.use_full_range) { leds.led_data[beatsin16(leds.juggle_beat, 0, NUM_LEDS - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    387c:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3880:	2b00      	cmp	r3, #0
    3882:	d1a2      	bne.n	37ca <juggle(LEDStruct&)+0x476>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3884:	f8d9 3000 	ldr.w	r3, [r9]
    3888:	9307      	str	r3, [sp, #28]
	return ret;
    388a:	9907      	ldr	r1, [sp, #28]
				else					 { leds.led_data[beatsin16(leds.juggle_beat, 0, ONE_SIDE - 1, 0, 8192 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    388c:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
    3890:	fb0a f101 	mul.w	r1, sl, r1
    3894:	021b      	lsls	r3, r3, #8
    3896:	fb03 f301 	mul.w	r3, r3, r1
    389a:	0379      	lsls	r1, r7, #13
    389c:	eb01 4313 	add.w	r3, r1, r3, lsr #16
    38a0:	b299      	uxth	r1, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    38a2:	0448      	lsls	r0, r1, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    38a4:	f3c1 03ca 	ubfx	r3, r1, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    38a8:	d503      	bpl.n	38b2 <juggle(LEDStruct&)+0x55e>
    38aa:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    38ae:	3307      	adds	r3, #7
    38b0:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    38b2:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38b4:	9e03      	ldr	r6, [sp, #12]
    38b6:	5c36      	ldrb	r6, [r6, r0]
    38b8:	f83b 0010 	ldrh.w	r0, [fp, r0, lsl #1]
    38bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
    38c0:	fb06 0303 	mla	r3, r6, r3, r0

    if( theta & 0x8000 ) y = -y;
    38c4:	0409      	lsls	r1, r1, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    38c6:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    38c8:	bf48      	it	mi
    38ca:	425b      	negmi	r3, r3
    38cc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    38d0:	b21e      	sxth	r6, r3
    38d2:	a805      	add	r0, sp, #20
    38d4:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    38d8:	9100      	str	r1, [sp, #0]
    38da:	4641      	mov	r1, r8
    38dc:	f008 f9d6 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    38e0:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
    38e4:	b29b      	uxth	r3, r3
    38e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38ea:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    38ee:	0c1b      	lsrs	r3, r3, #16
    38f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38f4:	18e1      	adds	r1, r4, r3
    38f6:	5ce2      	ldrb	r2, [r4, r3]
    38f8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    38fc:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3900:	54e2      	strb	r2, [r4, r3]
    3902:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3906:	784a      	ldrb	r2, [r1, #1]
    3908:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    390c:	704a      	strb	r2, [r1, #1]
    390e:	788b      	ldrb	r3, [r1, #2]
    3910:	f89d 2016 	ldrb.w	r2, [sp, #22]
    3914:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3918:	708b      	strb	r3, [r1, #2]
    391a:	4622      	mov	r2, r4
    391c:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    391e:	7819      	ldrb	r1, [r3, #0]
    3920:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3924:	7859      	ldrb	r1, [r3, #1]
    3926:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    392a:	7899      	ldrb	r1, [r3, #2]
    392c:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3930:	3303      	adds	r3, #3
    3932:	42ab      	cmp	r3, r5
    3934:	f1a2 0203 	sub.w	r2, r2, #3
    3938:	d1f1      	bne.n	391e <juggle(LEDStruct&)+0x5ca>
    393a:	e790      	b.n	385e <juggle(LEDStruct&)+0x50a>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    393c:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    3940:	2900      	cmp	r1, #0
    3942:	d052      	beq.n	39ea <juggle(LEDStruct&)+0x696>
    3944:	f10d 0a1c 	add.w	sl, sp, #28
    3948:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    394c:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
    3950:	e03a      	b.n	39c8 <juggle(LEDStruct&)+0x674>
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    3952:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    3956:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    395a:	4431      	add	r1, r6
    395c:	2b00      	cmp	r3, #0
    395e:	d047      	beq.n	39f0 <juggle(LEDStruct&)+0x69c>
    3960:	2300      	movs	r3, #0
    3962:	4408      	add	r0, r1
    3964:	2295      	movs	r2, #149	; 0x95
    3966:	4619      	mov	r1, r3
    3968:	f7fc fdc4 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    396c:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3970:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3974:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3978:	9100      	str	r1, [sp, #0]
    397a:	4607      	mov	r7, r0
    397c:	4641      	mov	r1, r8
    397e:	4650      	mov	r0, sl
    3980:	f008 f984 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3984:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3988:	18e1      	adds	r1, r4, r3
    398a:	5ce2      	ldrb	r2, [r4, r3]
    398c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3990:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3994:	54e2      	strb	r2, [r4, r3]
    3996:	784a      	ldrb	r2, [r1, #1]
    3998:	f89d 301d 	ldrb.w	r3, [sp, #29]
    399c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    39a0:	704a      	strb	r2, [r1, #1]
    39a2:	788b      	ldrb	r3, [r1, #2]
    39a4:	f89d 201e 	ldrb.w	r2, [sp, #30]
    39a8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    39ac:	708b      	strb	r3, [r1, #2]
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    39ae:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    39b2:	f894 3233 	ldrb.w	r3, [r4, #563]	; 0x233
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    39b6:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
    39ba:	3601      	adds	r6, #1
    39bc:	b2f6      	uxtb	r6, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    39be:	4413      	add	r3, r2
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    39c0:	42b1      	cmp	r1, r6
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				leds.juggle_index += leds.juggle_diff;
    39c2:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    39c6:	d910      	bls.n	39ea <juggle(LEDStruct&)+0x696>
				if (leds.this_dir) {
    39c8:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    39cc:	2b00      	cmp	r3, #0
    39ce:	d1c0      	bne.n	3952 <juggle(LEDStruct&)+0x5fe>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
    39d0:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    39d4:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    39d8:	4431      	add	r1, r6
    39da:	4408      	add	r0, r1
    39dc:	2a00      	cmp	r2, #0
    39de:	d07d      	beq.n	3adc <juggle(LEDStruct&)+0x788>
    39e0:	4619      	mov	r1, r3
    39e2:	2295      	movs	r2, #149	; 0x95
    39e4:	f7fc fdc8 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    39e8:	e7c0      	b.n	396c <juggle(LEDStruct&)+0x618>
				}
				leds.juggle_index += leds.juggle_diff;
			}
		}
	}
}
    39ea:	b009      	add	sp, #36	; 0x24
    39ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    39f0:	4408      	add	r0, r1
    39f2:	224a      	movs	r2, #74	; 0x4a
    39f4:	4619      	mov	r1, r3
    39f6:	f7fc fd7d 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    39fa:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    39fe:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a02:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a06:	9100      	str	r1, [sp, #0]
    3a08:	4607      	mov	r7, r0
    3a0a:	4641      	mov	r1, r8
    3a0c:	4650      	mov	r0, sl
    3a0e:	f008 f93d 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a12:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3a16:	18e1      	adds	r1, r4, r3
    3a18:	5ce2      	ldrb	r2, [r4, r3]
    3a1a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3a1e:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a22:	54e2      	strb	r2, [r4, r3]
    3a24:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a28:	784a      	ldrb	r2, [r1, #1]
    3a2a:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a2e:	704a      	strb	r2, [r1, #1]
    3a30:	788b      	ldrb	r3, [r1, #2]
    3a32:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3a36:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3a3a:	708b      	strb	r3, [r1, #2]
    3a3c:	4622      	mov	r2, r4
    3a3e:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3a40:	7819      	ldrb	r1, [r3, #0]
    3a42:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3a46:	7859      	ldrb	r1, [r3, #1]
    3a48:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3a4c:	7899      	ldrb	r1, [r3, #2]
    3a4e:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3a52:	3303      	adds	r3, #3
    3a54:	42ab      	cmp	r3, r5
    3a56:	f1a2 0203 	sub.w	r2, r2, #3
    3a5a:	d1f1      	bne.n	3a40 <juggle(LEDStruct&)+0x6ec>
    3a5c:	e7a7      	b.n	39ae <juggle(LEDStruct&)+0x65a>
	else {
		if (leds.juggle_phased) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
				if (leds.this_dir) {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3a5e:	224a      	movs	r2, #74	; 0x4a
    3a60:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3a64:	f7fc fd46 	bl	4f4 <beatsin16_halfdown(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.35]>
    3a68:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3a6c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3a70:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3a74:	9100      	str	r1, [sp, #0]
    3a76:	4607      	mov	r7, r0
    3a78:	4641      	mov	r1, r8
    3a7a:	4650      	mov	r0, sl
    3a7c:	f008 f906 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3a80:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3a84:	18e1      	adds	r1, r4, r3
    3a86:	5ce2      	ldrb	r2, [r4, r3]
    3a88:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3a8c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3a90:	54e2      	strb	r2, [r4, r3]
    3a92:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3a96:	784a      	ldrb	r2, [r1, #1]
    3a98:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3a9c:	704a      	strb	r2, [r1, #1]
    3a9e:	788b      	ldrb	r3, [r1, #2]
    3aa0:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3aa4:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3aa8:	708b      	strb	r3, [r1, #2]
    3aaa:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3aae:	4623      	mov	r3, r4
    3ab0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ab2:	7819      	ldrb	r1, [r3, #0]
    3ab4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3ab8:	7859      	ldrb	r1, [r3, #1]
    3aba:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3abe:	7899      	ldrb	r1, [r3, #2]
    3ac0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3ac4:	3303      	adds	r3, #3
    3ac6:	4283      	cmp	r3, r0
    3ac8:	f1a2 0203 	sub.w	r2, r2, #3
    3acc:	d1f1      	bne.n	3ab2 <juggle(LEDStruct&)+0x75e>
    3ace:	e64a      	b.n	3766 <juggle(LEDStruct&)+0x412>
    3ad0:	000105cc 	.word	0x000105cc
    3ad4:	1fffb1a0 	.word	0x1fffb1a0
    3ad8:	0000fe2c 	.word	0x0000fe2c
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3adc:	4613      	mov	r3, r2
    3ade:	4611      	mov	r1, r2
    3ae0:	224a      	movs	r2, #74	; 0x4a
    3ae2:	f7fc fd49 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3ae6:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3aea:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3aee:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3af2:	9100      	str	r1, [sp, #0]
    3af4:	4607      	mov	r7, r0
    3af6:	4641      	mov	r1, r8
    3af8:	4650      	mov	r0, sl
    3afa:	f008 f8c7 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3afe:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3b02:	18e1      	adds	r1, r4, r3
    3b04:	5ce2      	ldrb	r2, [r4, r3]
    3b06:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3b0a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b0e:	54e2      	strb	r2, [r4, r3]
    3b10:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3b14:	784a      	ldrb	r2, [r1, #1]
    3b16:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b1a:	704a      	strb	r2, [r1, #1]
    3b1c:	788b      	ldrb	r3, [r1, #2]
    3b1e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3b22:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b26:	708b      	strb	r3, [r1, #2]
    3b28:	4622      	mov	r2, r4
    3b2a:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3b2c:	7819      	ldrb	r1, [r3, #0]
    3b2e:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3b32:	7859      	ldrb	r1, [r3, #1]
    3b34:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3b38:	7899      	ldrb	r1, [r3, #2]
    3b3a:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3b3e:	3303      	adds	r3, #3
    3b40:	42ab      	cmp	r3, r5
    3b42:	f1a2 0203 	sub.w	r2, r2, #3
    3b46:	d1f1      	bne.n	3b2c <juggle(LEDStruct&)+0x7d8>
    3b48:	e731      	b.n	39ae <juggle(LEDStruct&)+0x65a>
					if (leds.use_full_range) { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfdown(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
				}
				else {
					if (leds.use_full_range) { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, NUM_LEDS - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); }
					else					 { leds.led_data[beatsin16_halfup(leds.juggle_beat, 0, ONE_SIDE - 1, 500 * i)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending); strip_sync(leds); }
    3b4a:	fb06 f305 	mul.w	r3, r6, r5
    3b4e:	224a      	movs	r2, #74	; 0x4a
    3b50:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3b54:	f7fc fd10 	bl	578 <beatsin16_halfup(unsigned short, unsigned short, unsigned short, unsigned long, unsigned short) [clone .constprop.36]>
    3b58:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3b5c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3b60:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3b64:	9100      	str	r1, [sp, #0]
    3b66:	4607      	mov	r7, r0
    3b68:	4641      	mov	r1, r8
    3b6a:	4650      	mov	r0, sl
    3b6c:	f008 f88e 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3b70:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    3b74:	18e1      	adds	r1, r4, r3
    3b76:	5ce2      	ldrb	r2, [r4, r3]
    3b78:	f89d 001c 	ldrb.w	r0, [sp, #28]
    3b7c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3b80:	54e2      	strb	r2, [r4, r3]
    3b82:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3b86:	784a      	ldrb	r2, [r1, #1]
    3b88:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3b8c:	704a      	strb	r2, [r1, #1]
    3b8e:	788b      	ldrb	r3, [r1, #2]
    3b90:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3b94:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3b98:	708b      	strb	r3, [r1, #2]
    3b9a:	f104 00e1 	add.w	r0, r4, #225	; 0xe1
    3b9e:	4623      	mov	r3, r4
    3ba0:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    3ba2:	7819      	ldrb	r1, [r3, #0]
    3ba4:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    3ba8:	7859      	ldrb	r1, [r3, #1]
    3baa:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    3bae:	7899      	ldrb	r1, [r3, #2]
    3bb0:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    3bb4:	3303      	adds	r3, #3
    3bb6:	4283      	cmp	r3, r0
    3bb8:	f1a2 0203 	sub.w	r2, r2, #3
    3bbc:	d1f1      	bne.n	3ba2 <juggle(LEDStruct&)+0x84e>
    3bbe:	e5d2      	b.n	3766 <juggle(LEDStruct&)+0x412>
// TODO make a juggle where the colorfrompalette is scaled to the position

void juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3bc0:	4620      	mov	r0, r4
    3bc2:	f7ff fb77 	bl	32b4 <juggle_update(LEDStruct&)>
    3bc6:	e47c      	b.n	34c2 <juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3bc8:	3741      	adds	r7, #65	; 0x41
    3bca:	230f      	movs	r3, #15
    3bcc:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    3bd0:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    3bd4:	e470      	b.n	34b8 <juggle(LEDStruct&)+0x164>
    3bd6:	4620      	mov	r0, r4
    3bd8:	f7fc fc5a 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    3bdc:	e46c      	b.n	34b8 <juggle(LEDStruct&)+0x164>
    3bde:	bf00      	nop

00003be0 <juggle_half(LEDStruct&)>:
	}
}



void juggle_half(LEDStruct& leds) {
    3be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3be4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	}
}



void juggle_half(LEDStruct& leds) {
    3be8:	b08d      	sub	sp, #52	; 0x34
    3bea:	4604      	mov	r4, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    3bec:	2b00      	cmp	r3, #0
    3bee:	f040 80a9 	bne.w	3d44 <juggle_half(LEDStruct&)+0x164>
    3bf2:	4ecc      	ldr	r6, [pc, #816]	; (3f24 <juggle_half(LEDStruct&)+0x344>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    3bf4:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    3bf8:	8833      	ldrh	r3, [r6, #0]
    3bfa:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    3bfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3c02:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    3c06:	3019      	adds	r0, #25
    3c08:	b280      	uxth	r0, r0
    3c0a:	eb00 2540 	add.w	r5, r0, r0, lsl #9
    3c0e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
    3c12:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    3c16:	3519      	adds	r5, #25
    3c18:	b2ad      	uxth	r5, r5
    3c1a:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    3c1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3c22:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c26:	3319      	adds	r3, #25
    3c28:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    3c2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3c30:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    3c34:	3319      	adds	r3, #25
    3c36:	b29b      	uxth	r3, r3
    3c38:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    3c3c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3c40:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    3c44:	3119      	adds	r1, #25
    3c46:	b289      	uxth	r1, r1
    3c48:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    3c4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3c50:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    3c54:	3219      	adds	r2, #25
    3c56:	b292      	uxth	r2, r2
    3c58:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    3c5c:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    3c60:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    3c64:	f10e 0e19 	add.w	lr, lr, #25
    3c68:	fa1f fe8e 	uxth.w	lr, lr
    3c6c:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    3c70:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    3c74:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    3c78:	f10c 0c19 	add.w	ip, ip, #25
    3c7c:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c80:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c84:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c88:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c8c:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3c90:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3c94:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3c96:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3c98:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3c9c:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3ca0:	b2c9      	uxtb	r1, r1
    3ca2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3ca6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3caa:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cac:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3cb0:	f108 0819 	add.w	r8, r8, #25
    3cb4:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3cb8:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    3cbc:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cbe:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cc0:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cc4:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    3cc8:	eb05 2515 	add.w	r5, r5, r5, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3ccc:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    3cd0:	f3c5 15c0 	ubfx	r5, r5, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cd4:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3cd6:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    3cda:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    3cde:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
    3ce2:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    3ce6:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    3ce8:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    3cec:	f884 0235 	strb.w	r0, [r4, #565]	; 0x235
	leds.juggle_phased		 = jp;
    3cf0:	f884 5236 	strb.w	r5, [r4, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3cf4:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    3cf8:	f884 1232 	strb.w	r1, [r4, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3cfc:	f107 050a 	add.w	r5, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3d00:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3d02:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    3d04:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    3d08:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    3d0c:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    3d10:	f884 c234 	strb.w	ip, [r4, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    3d14:	f884 5231 	strb.w	r5, [r4, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    3d18:	f884 122e 	strb.w	r1, [r4, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    3d1c:	f884 122a 	strb.w	r1, [r4, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    3d20:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    3d24:	f1bc 0f00 	cmp.w	ip, #0
    3d28:	d004      	beq.n	3d34 <juggle_half(LEDStruct&)+0x154>
    3d2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d2e:	408b      	lsls	r3, r1
    3d30:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    3d34:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
    3d38:	2b06      	cmp	r3, #6
    3d3a:	f000 838a 	beq.w	4452 <juggle_half(LEDStruct&)+0x872>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    3d3e:	2b04      	cmp	r3, #4
    3d40:	f000 838e 	beq.w	4460 <juggle_half(LEDStruct&)+0x880>


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    3d44:	4b78      	ldr	r3, [pc, #480]	; (3f28 <juggle_half(LEDStruct&)+0x348>)
    3d46:	781b      	ldrb	r3, [r3, #0]
    3d48:	2b00      	cmp	r3, #0
    3d4a:	f040 82ae 	bne.w	42aa <juggle_half(LEDStruct&)+0x6ca>

	// Keep the same color for each dot, or cycle through the palette
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }
    3d4e:	f894 3234 	ldrb.w	r3, [r4, #564]	; 0x234
    3d52:	b113      	cbz	r3, 3d5a <juggle_half(LEDStruct&)+0x17a>
    3d54:	2300      	movs	r3, #0
    3d56:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    3d5a:	2196      	movs	r1, #150	; 0x96
    3d5c:	f894 2232 	ldrb.w	r2, [r4, #562]	; 0x232
    3d60:	4620      	mov	r0, r4
    3d62:	f007 ff33 	bl	bbcc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	if (leds.this_dir) {
    3d66:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d6a:	f894 1230 	ldrb.w	r1, [r4, #560]	; 0x230
	if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
    3d6e:	2f00      	cmp	r7, #0
    3d70:	f040 81af 	bne.w	40d2 <juggle_half(LEDStruct&)+0x4f2>
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3d74:	2900      	cmp	r1, #0
    3d76:	f000 8377 	beq.w	4468 <juggle_half(LEDStruct&)+0x888>
    3d7a:	4b6c      	ldr	r3, [pc, #432]	; (3f2c <juggle_half(LEDStruct&)+0x34c>)
    3d7c:	9302      	str	r3, [sp, #8]
    3d7e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3d82:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 3f30 <juggle_half(LEDStruct&)+0x350>
    3d86:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 3f34 <juggle_half(LEDStruct&)+0x354>
    3d8a:	ab0b      	add	r3, sp, #44	; 0x2c
    3d8c:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    3d90:	9303      	str	r3, [sp, #12]
    3d92:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3d96:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    3d9a:	b2be      	uxth	r6, r7
    3d9c:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3d9e:	f8d9 1000 	ldr.w	r1, [r9]
    3da2:	9107      	str	r1, [sp, #28]
    3da4:	4403      	add	r3, r0

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    3da6:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3da8:	9907      	ldr	r1, [sp, #28]
    3daa:	bf98      	it	ls
    3dac:	021b      	lslls	r3, r3, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3dae:	f44f 708c 	mov.w	r0, #280	; 0x118
    3db2:	bf98      	it	ls
    3db4:	b29b      	uxthls	r3, r3
    3db6:	fb00 f101 	mul.w	r1, r0, r1
    3dba:	fb03 f301 	mul.w	r3, r3, r1
    3dbe:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3dc2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3dc6:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dc8:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3dca:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3dce:	d503      	bpl.n	3dd8 <juggle_half(LEDStruct&)+0x1f8>
    3dd0:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3dd4:	3107      	adds	r1, #7
    3dd6:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3dd8:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ddc:	f3c1 0046 	ubfx	r0, r1, #1, #7
    3de0:	9902      	ldr	r1, [sp, #8]
    3de2:	f81b 500e 	ldrb.w	r5, [fp, lr]
    3de6:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    3dea:	fb05 1100 	mla	r1, r5, r0, r1
    3dee:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    3df0:	0418      	lsls	r0, r3, #16
    3df2:	bf4c      	ite	mi
    3df4:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3df6:	b20d      	sxthpl	r5, r1
    3df8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3dfc:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3e00:	9803      	ldr	r0, [sp, #12]
    3e02:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    3e04:	bf48      	it	mi
    3e06:	b22d      	sxthmi	r5, r5
    3e08:	4641      	mov	r1, r8
    3e0a:	f007 ff3f 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3e0e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3e12:	b29b      	uxth	r3, r3
    3e14:	fb0a f303 	mul.w	r3, sl, r3
    3e18:	0c1b      	lsrs	r3, r3, #16
    3e1a:	3325      	adds	r3, #37	; 0x25
    3e1c:	b29b      	uxth	r3, r3
    3e1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e22:	18e1      	adds	r1, r4, r3
    3e24:	5ce2      	ldrb	r2, [r4, r3]
    3e26:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3e2a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3e2e:	54e2      	strb	r2, [r4, r3]
    3e30:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3e34:	784a      	ldrb	r2, [r1, #1]
    3e36:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3e3a:	704a      	strb	r2, [r1, #1]
    3e3c:	788b      	ldrb	r3, [r1, #2]
    3e3e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3e42:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3e46:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3e48:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    3e4c:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3e50:	4416      	add	r6, r2
    3e52:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3e54:	f8d9 3000 	ldr.w	r3, [r9]
    3e58:	9306      	str	r3, [sp, #24]
    3e5a:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    3e5c:	9b06      	ldr	r3, [sp, #24]
    3e5e:	bf98      	it	ls
    3e60:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3e62:	f44f 728c 	mov.w	r2, #280	; 0x118
    3e66:	bf98      	it	ls
    3e68:	b2b6      	uxthls	r6, r6
    3e6a:	fb02 f303 	mul.w	r3, r2, r3
    3e6e:	fb06 f303 	mul.w	r3, r6, r3
    3e72:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3e76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e7a:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3e7c:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3e80:	d503      	bpl.n	3e8a <juggle_half(LEDStruct&)+0x2aa>
    3e82:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    3e86:	3207      	adds	r2, #7
    3e88:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3e8a:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3e8c:	f3c2 0146 	ubfx	r1, r2, #1, #7
    3e90:	9a02      	ldr	r2, [sp, #8]
    3e92:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3e96:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    3e9a:	9803      	ldr	r0, [sp, #12]
    3e9c:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    3ea0:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3ea2:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    3ea4:	bf48      	it	mi
    3ea6:	4255      	negmi	r5, r2
    3ea8:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3eac:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3eb0:	bf54      	ite	pl
    3eb2:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    3eb4:	b22d      	sxthmi	r5, r5
    3eb6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    3eba:	9100      	str	r1, [sp, #0]
    3ebc:	4641      	mov	r1, r8
    3ebe:	f007 fee5 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3ec2:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3ec6:	b29b      	uxth	r3, r3
    3ec8:	fb0a f303 	mul.w	r3, sl, r3
    3ecc:	0c1b      	lsrs	r3, r3, #16
    3ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3ed2:	18e1      	adds	r1, r4, r3
    3ed4:	5ce2      	ldrb	r2, [r4, r3]
    3ed6:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    3eda:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3ede:	54e2      	strb	r2, [r4, r3]
    3ee0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    3ee4:	784a      	ldrb	r2, [r1, #1]
    3ee6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3eea:	704a      	strb	r2, [r1, #1]
    3eec:	788b      	ldrb	r3, [r1, #2]
    3eee:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    3ef2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ef6:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    3ef8:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    3efc:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f00:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    3f04:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f06:	440a      	add	r2, r1
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f08:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f0a:	b2d2      	uxtb	r2, r2
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f0c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)]	+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    3f0e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}
	else {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f12:	4619      	mov	r1, r3
    3f14:	f63f af3f 	bhi.w	3d96 <juggle_half(LEDStruct&)+0x1b6>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    3f18:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    3f1c:	2a00      	cmp	r2, #0
    3f1e:	f000 81b0 	beq.w	4282 <juggle_half(LEDStruct&)+0x6a2>
    3f22:	e009      	b.n	3f38 <juggle_half(LEDStruct&)+0x358>
    3f24:	1fff8784 	.word	0x1fff8784
    3f28:	1fff962d 	.word	0x1fff962d
    3f2c:	0000fe2c 	.word	0x0000fe2c
    3f30:	1fffb1a0 	.word	0x1fffb1a0
    3f34:	000105cc 	.word	0x000105cc
		if (leds.this_dir) {
    3f38:	f894 71c5 	ldrb.w	r7, [r4, #453]	; 0x1c5
    3f3c:	2f00      	cmp	r7, #0
    3f3e:	f040 81bf 	bne.w	42c0 <juggle_half(LEDStruct&)+0x6e0>
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    3f42:	2b00      	cmp	r3, #0
    3f44:	f000 80c2 	beq.w	40cc <juggle_half(LEDStruct&)+0x4ec>
    3f48:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    3f4c:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3f50:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    3f54:	3301      	adds	r3, #1
    3f56:	440b      	add	r3, r1
    3f58:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3f5a:	f8d9 1000 	ldr.w	r1, [r9]
    3f5e:	910b      	str	r1, [sp, #44]	; 0x2c
    3f60:	4433      	add	r3, r6
    3f62:	b29b      	uxth	r3, r3
    3f64:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    3f66:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f68:	bf9c      	itt	ls
    3f6a:	021b      	lslls	r3, r3, #8
    3f6c:	b29b      	uxthls	r3, r3
    3f6e:	fb0a f101 	mul.w	r1, sl, r1
    3f72:	fb03 f301 	mul.w	r3, r3, r1
    3f76:	f3c3 430e 	ubfx	r3, r3, #16, #15
    3f7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    3f7e:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f80:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    3f82:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    3f86:	d503      	bpl.n	3f90 <juggle_half(LEDStruct&)+0x3b0>
    3f88:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    3f8c:	3107      	adds	r1, #7
    3f8e:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f90:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    3f94:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    3f96:	9902      	ldr	r1, [sp, #8]
    3f98:	f81b 5000 	ldrb.w	r5, [fp, r0]
    3f9c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    3fa0:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    3fa4:	fb05 050e 	mla	r5, r5, lr, r0
    3fa8:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    3faa:	0418      	lsls	r0, r3, #16
    3fac:	bf48      	it	mi
    3fae:	426d      	negmi	r5, r5
    3fb0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    3fb4:	9100      	str	r1, [sp, #0]
    3fb6:	a809      	add	r0, sp, #36	; 0x24
    3fb8:	4641      	mov	r1, r8
    3fba:	b22d      	sxth	r5, r5
    3fbc:	f007 fe66 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    3fc0:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    3fc4:	2226      	movs	r2, #38	; 0x26
    3fc6:	b29b      	uxth	r3, r3
    3fc8:	fb02 f303 	mul.w	r3, r2, r3
    3fcc:	0c1b      	lsrs	r3, r3, #16
    3fce:	3370      	adds	r3, #112	; 0x70
    3fd0:	b29b      	uxth	r3, r3
    3fd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3fd6:	18e1      	adds	r1, r4, r3
    3fd8:	5ce2      	ldrb	r2, [r4, r3]
    3fda:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    3fde:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    3fe2:	54e2      	strb	r2, [r4, r3]
    3fe4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    3fe8:	784a      	ldrb	r2, [r1, #1]
    3fea:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    3fee:	704a      	strb	r2, [r1, #1]
    3ff0:	788b      	ldrb	r3, [r1, #2]
    3ff2:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    3ff6:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    3ffa:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    3ffc:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    4000:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4004:	4413      	add	r3, r2
    4006:	3301      	adds	r3, #1
    4008:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    400a:	f8d9 3000 	ldr.w	r3, [r9]
    400e:	930a      	str	r3, [sp, #40]	; 0x28
    4010:	b2b6      	uxth	r6, r6
    4012:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    4014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4016:	bf9c      	itt	ls
    4018:	0236      	lslls	r6, r6, #8
    401a:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    401c:	fb0a f202 	mul.w	r2, sl, r2
    4020:	fb06 f202 	mul.w	r2, r6, r2
    4024:	f3c2 420e 	ubfx	r2, r2, #16, #15
    4028:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    402c:	0451      	lsls	r1, r2, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    402e:	f3c2 03ca 	ubfx	r3, r2, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4032:	d503      	bpl.n	403c <juggle_half(LEDStruct&)+0x45c>
    4034:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
    4038:	3307      	adds	r3, #7
    403a:	b29b      	uxth	r3, r3

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    403c:	0a18      	lsrs	r0, r3, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    403e:	f3c3 0146 	ubfx	r1, r3, #1, #7
    4042:	9b02      	ldr	r3, [sp, #8]
    4044:	f81b 5000 	ldrb.w	r5, [fp, r0]
    4048:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    404c:	fb05 3301 	mla	r3, r5, r1, r3

    if( theta & 0x8000 ) y = -y;
    4050:	0412      	lsls	r2, r2, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4052:	b29b      	uxth	r3, r3

    if( theta & 0x8000 ) y = -y;
    4054:	bf48      	it	mi
    4056:	425b      	negmi	r3, r3
    4058:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    405c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    4060:	b21d      	sxth	r5, r3
    4062:	a809      	add	r0, sp, #36	; 0x24
    4064:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4068:	9100      	str	r1, [sp, #0]
    406a:	4641      	mov	r1, r8
    406c:	f007 fe0e 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4070:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4074:	b29b      	uxth	r3, r3
    4076:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    407a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    407e:	0c1b      	lsrs	r3, r3, #16
    4080:	334b      	adds	r3, #75	; 0x4b
    4082:	b29b      	uxth	r3, r3
    4084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4088:	18e1      	adds	r1, r4, r3
    408a:	5ce2      	ldrb	r2, [r4, r3]
    408c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    4090:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4094:	54e2      	strb	r2, [r4, r3]
    4096:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    409a:	784a      	ldrb	r2, [r1, #1]
    409c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    40a0:	704a      	strb	r2, [r1, #1]
    40a2:	788b      	ldrb	r3, [r1, #2]
    40a4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
    40a8:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    40ac:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    40ae:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    40b2:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40b6:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    40ba:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40bc:	440a      	add	r2, r1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40be:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40c0:	b2d2      	uxtb	r2, r2
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40c2:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    40c4:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40c8:	f63f af42 	bhi.w	3f50 <juggle_half(LEDStruct&)+0x370>
		}
	}
	else {
		strip_sync(leds);
	}
}
    40cc:	b00d      	add	sp, #52	; 0x34
    40ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    40d2:	2900      	cmp	r1, #0
    40d4:	f000 81c8 	beq.w	4468 <juggle_half(LEDStruct&)+0x888>
    40d8:	4b76      	ldr	r3, [pc, #472]	; (42b4 <juggle_half(LEDStruct&)+0x6d4>)
    40da:	9302      	str	r3, [sp, #8]
    40dc:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    40e0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 42b8 <juggle_half(LEDStruct&)+0x6d8>
    40e4:	f8df b1d4 	ldr.w	fp, [pc, #468]	; 42bc <juggle_half(LEDStruct&)+0x6dc>
    40e8:	ab0b      	add	r3, sp, #44	; 0x2c
    40ea:	f504 78e4 	add.w	r8, r4, #456	; 0x1c8
    40ee:	2700      	movs	r7, #0
    40f0:	9303      	str	r3, [sp, #12]
    40f2:	f04f 0a26 	mov.w	sl, #38	; 0x26
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    40f6:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    40fa:	b2be      	uxth	r6, r7
    40fc:	198b      	adds	r3, r1, r6
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    40fe:	f8d9 1000 	ldr.w	r1, [r9]
    4102:	9105      	str	r1, [sp, #20]
    4104:	4403      	add	r3, r0
    4106:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    4108:	9905      	ldr	r1, [sp, #20]
    410a:	bf98      	it	ls
    410c:	021b      	lslls	r3, r3, #8
    410e:	f44f 708c 	mov.w	r0, #280	; 0x118
    4112:	bf98      	it	ls
    4114:	b29b      	uxthls	r3, r3
    4116:	fb00 f101 	mul.w	r1, r0, r1
    411a:	fb03 f301 	mul.w	r3, r3, r1
    411e:	f3c3 430e 	ubfx	r3, r3, #16, #15
    4122:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4126:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4128:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    412c:	d503      	bpl.n	4136 <juggle_half(LEDStruct&)+0x556>
    412e:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    4132:	3107      	adds	r1, #7
    4134:	b289      	uxth	r1, r1

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4136:	ea4f 2e11 	mov.w	lr, r1, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    413a:	f3c1 0046 	ubfx	r0, r1, #1, #7
    413e:	9902      	ldr	r1, [sp, #8]
    4140:	f81b 500e 	ldrb.w	r5, [fp, lr]
    4144:	f831 101e 	ldrh.w	r1, [r1, lr, lsl #1]
    4148:	fb05 1100 	mla	r1, r5, r0, r1
    414c:	b289      	uxth	r1, r1

    if( theta & 0x8000 ) y = -y;
    414e:	0418      	lsls	r0, r3, #16
    4150:	bf4c      	ite	mi
    4152:	424d      	negmi	r5, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4154:	b20d      	sxthpl	r5, r1
    4156:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    415a:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    415e:	9803      	ldr	r0, [sp, #12]
    4160:	9100      	str	r1, [sp, #0]

    if( theta & 0x8000 ) y = -y;
    4162:	bf48      	it	mi
    4164:	b22d      	sxthmi	r5, r5
    4166:	4641      	mov	r1, r8
    4168:	f007 fd90 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    416c:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4170:	b29b      	uxth	r3, r3
    4172:	fb0a f303 	mul.w	r3, sl, r3
    4176:	0c1b      	lsrs	r3, r3, #16
    4178:	3325      	adds	r3, #37	; 0x25
    417a:	b29b      	uxth	r3, r3
    417c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4180:	18e1      	adds	r1, r4, r3
    4182:	5ce2      	ldrb	r2, [r4, r3]
    4184:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4188:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    418c:	54e2      	strb	r2, [r4, r3]
    418e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4192:	784a      	ldrb	r2, [r1, #1]
    4194:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4198:	704a      	strb	r2, [r1, #1]
    419a:	788b      	ldrb	r3, [r1, #2]
    419c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    41a0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    41a4:	708b      	strb	r3, [r1, #2]
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    41a6:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    41aa:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    41ae:	4416      	add	r6, r2
    41b0:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    41b2:	f8d9 3000 	ldr.w	r3, [r9]
    41b6:	9304      	str	r3, [sp, #16]
    41b8:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    41ba:	9b04      	ldr	r3, [sp, #16]
    41bc:	bf98      	it	ls
    41be:	0236      	lslls	r6, r6, #8
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    41c0:	f44f 728c 	mov.w	r2, #280	; 0x118
    41c4:	bf98      	it	ls
    41c6:	b2b6      	uxthls	r6, r6
    41c8:	fb02 f303 	mul.w	r3, r2, r3
    41cc:	fb06 f303 	mul.w	r3, r6, r3
    41d0:	f3c3 430e 	ubfx	r3, r3, #16, #15
    41d4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    41d8:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    41da:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    41dc:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    41e0:	d503      	bpl.n	41ea <juggle_half(LEDStruct&)+0x60a>
    41e2:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    41e6:	3207      	adds	r2, #7
    41e8:	b292      	uxth	r2, r2

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    41ea:	0a10      	lsrs	r0, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    41ec:	f3c2 0146 	ubfx	r1, r2, #1, #7
    41f0:	9a02      	ldr	r2, [sp, #8]
    41f2:	f81b 5000 	ldrb.w	r5, [fp, r0]
    41f6:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
    41fa:	9803      	ldr	r0, [sp, #12]
    41fc:	fb05 2201 	mla	r2, r5, r1, r2

    if( theta & 0x8000 ) y = -y;
    4200:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4202:	b292      	uxth	r2, r2

    if( theta & 0x8000 ) y = -y;
    4204:	bf48      	it	mi
    4206:	4255      	negmi	r5, r2
    4208:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    420c:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4210:	bf54      	ite	pl
    4212:	b215      	sxthpl	r5, r2

    if( theta & 0x8000 ) y = -y;
    4214:	b22d      	sxthmi	r5, r5
    4216:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    421a:	9100      	str	r1, [sp, #0]
    421c:	4641      	mov	r1, r8
    421e:	f007 fd35 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    4222:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4226:	b29b      	uxth	r3, r3
    4228:	fb0a f303 	mul.w	r3, sl, r3
    422c:	0c1b      	lsrs	r3, r3, #16
    422e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4232:	18e1      	adds	r1, r4, r3
    4234:	5ce2      	ldrb	r2, [r4, r3]
    4236:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    423a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    423e:	54e2      	strb	r2, [r4, r3]
    4240:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4244:	784a      	ldrb	r2, [r1, #1]
    4246:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    424a:	704a      	strb	r2, [r1, #1]
    424c:	788b      	ldrb	r3, [r1, #2]
    424e:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4252:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4256:	708b      	strb	r3, [r1, #2]
			leds.juggle_index += leds.juggle_diff;
    4258:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    425c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4260:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4264:	3701      	adds	r7, #1
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    4266:	440a      	add	r2, r1

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4268:	b2ff      	uxtb	r7, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    426a:	b2d2      	uxtb	r2, r2

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    426c:	42bb      	cmp	r3, r7
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, ONE_SIDE / 2, ONE_SIDE - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			  += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
    426e:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f

	// Fade all LEDs
	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	if (leds.this_dir) {
		for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4272:	4619      	mov	r1, r3
    4274:	f63f af3f 	bhi.w	40f6 <juggle_half(LEDStruct&)+0x516>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    4278:	f894 21c4 	ldrb.w	r2, [r4, #452]	; 0x1c4
    427c:	2a00      	cmp	r2, #0
    427e:	f47f ae5b 	bne.w	3f38 <juggle_half(LEDStruct&)+0x358>
    4282:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
			}
		}
		else {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4286:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4288:	7822      	ldrb	r2, [r4, #0]
    428a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    428e:	7862      	ldrb	r2, [r4, #1]
    4290:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4294:	78a2      	ldrb	r2, [r4, #2]
    4296:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    429a:	3403      	adds	r4, #3
    429c:	42a1      	cmp	r1, r4
    429e:	f1a3 0303 	sub.w	r3, r3, #3
    42a2:	d1f1      	bne.n	4288 <juggle_half(LEDStruct&)+0x6a8>
		}
	}
	else {
		strip_sync(leds);
	}
}
    42a4:	b00d      	add	sp, #52	; 0x34
    42a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}


void juggle_half(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    42aa:	4620      	mov	r0, r4
    42ac:	f7ff f802 	bl	32b4 <juggle_update(LEDStruct&)>
    42b0:	e54d      	b.n	3d4e <juggle_half(LEDStruct&)+0x16e>
    42b2:	bf00      	nop
    42b4:	0000fe2c 	.word	0x0000fe2c
    42b8:	1fffb1a0 	.word	0x1fffb1a0
    42bc:	000105cc 	.word	0x000105cc
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    42c0:	2b00      	cmp	r3, #0
    42c2:	f43f af03 	beq.w	40cc <juggle_half(LEDStruct&)+0x4ec>
    42c6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    42ca:	2700      	movs	r7, #0
}

LIB8STATIC uint16_t beatsin16_halfdown(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 16384;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    42cc:	f44f 7a8c 	mov.w	sl, #280	; 0x118
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    42d0:	f894 1231 	ldrb.w	r1, [r4, #561]	; 0x231
    42d4:	3301      	adds	r3, #1
    42d6:	440b      	add	r3, r1
    42d8:	b2be      	uxth	r6, r7
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    42da:	f8d9 1000 	ldr.w	r1, [r9]
    42de:	9109      	str	r1, [sp, #36]	; 0x24
    42e0:	4433      	add	r3, r6
    42e2:	b29b      	uxth	r3, r3
    42e4:	2bff      	cmp	r3, #255	; 0xff
	return ret;
    42e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    42e8:	bf9c      	itt	ls
    42ea:	021b      	lslls	r3, r3, #8
    42ec:	b29b      	uxthls	r3, r3
    42ee:	fb0a f101 	mul.w	r1, sl, r1
    42f2:	fb03 f301 	mul.w	r3, r3, r1
    42f6:	f3c3 430e 	ubfx	r3, r3, #16, #15
    42fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    42fe:	045d      	lsls	r5, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4300:	f3c3 01ca 	ubfx	r1, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    4304:	d503      	bpl.n	430e <juggle_half(LEDStruct&)+0x72e>
    4306:	f5c1 61ff 	rsb	r1, r1, #2040	; 0x7f8
    430a:	3107      	adds	r1, #7
    430c:	b289      	uxth	r1, r1
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    430e:	f3c1 0e46 	ubfx	lr, r1, #1, #7

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4312:	0a08      	lsrs	r0, r1, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4314:	9902      	ldr	r1, [sp, #8]
    4316:	f81b 5000 	ldrb.w	r5, [fp, r0]
    431a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    431e:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    4322:	fb05 050e 	mla	r5, r5, lr, r0
    4326:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    4328:	0418      	lsls	r0, r3, #16
    432a:	bf48      	it	mi
    432c:	426d      	negmi	r5, r5
    432e:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    4332:	9803      	ldr	r0, [sp, #12]
    4334:	9100      	str	r1, [sp, #0]
    4336:	b22d      	sxth	r5, r5
    4338:	4641      	mov	r1, r8
    433a:	f007 fca7 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    433e:	f5a5 4300 	sub.w	r3, r5, #32768	; 0x8000
    4342:	2226      	movs	r2, #38	; 0x26
    4344:	b29b      	uxth	r3, r3
    4346:	fb02 f303 	mul.w	r3, r2, r3
    434a:	0c1b      	lsrs	r3, r3, #16
    434c:	3370      	adds	r3, #112	; 0x70
    434e:	b29b      	uxth	r3, r3
    4350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4354:	18e1      	adds	r1, r4, r3
    4356:	5ce2      	ldrb	r2, [r4, r3]
    4358:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    435c:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4360:	54e2      	strb	r2, [r4, r3]
    4362:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    4366:	784a      	ldrb	r2, [r1, #1]
    4368:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    436c:	704a      	strb	r2, [r1, #1]
    436e:	788b      	ldrb	r3, [r1, #2]
    4370:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4374:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    4378:	708b      	strb	r3, [r1, #2]
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
    437a:	f894 2231 	ldrb.w	r2, [r4, #561]	; 0x231
    437e:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    4382:	4413      	add	r3, r2
    4384:	3301      	adds	r3, #1
    4386:	441e      	add	r6, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4388:	f8d9 3000 	ldr.w	r3, [r9]
    438c:	9308      	str	r3, [sp, #32]
    438e:	b2b6      	uxth	r6, r6
    4390:	2eff      	cmp	r6, #255	; 0xff
	return ret;
    4392:	9b08      	ldr	r3, [sp, #32]
    4394:	bf9c      	itt	ls
    4396:	0236      	lslls	r6, r6, #8
    4398:	b2b6      	uxthls	r6, r6
}

LIB8STATIC uint16_t beatsin16_halfup(accum88 beats_per_minute, uint16_t lowest = 0, uint16_t highest = 65535,
	uint32_t timebase = 0, uint16_t phase_offset = 0)
{
	uint16_t beat = beat16(beats_per_minute, timebase) % 32768 + 49152;     // Range of beat @ 144 is 15,159 - 17,604.  beat @ 0 is 47,923 - 50,367.  49,000 - 16,000 = 33,000.
    439a:	fb0a f303 	mul.w	r3, sl, r3
    439e:	fb06 f303 	mul.w	r3, r6, r3
    43a2:	f3c3 430e 	ubfx	r3, r3, #16, #15
    43a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    43aa:	b29b      	uxth	r3, r3
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    43ac:	0459      	lsls	r1, r3, #17
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    43ae:	f3c3 02ca 	ubfx	r2, r3, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    43b2:	d503      	bpl.n	43bc <juggle_half(LEDStruct&)+0x7dc>
    43b4:	f5c2 62ff 	rsb	r2, r2, #2040	; 0x7f8
    43b8:	3207      	adds	r2, #7
    43ba:	b292      	uxth	r2, r2
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43bc:	9802      	ldr	r0, [sp, #8]

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    43be:	0a11      	lsrs	r1, r2, #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43c0:	f3c2 0246 	ubfx	r2, r2, #1, #7
    43c4:	f81b 5001 	ldrb.w	r5, [fp, r1]
    43c8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
    43cc:	9803      	ldr	r0, [sp, #12]
    43ce:	fb05 1502 	mla	r5, r5, r2, r1

    if( theta & 0x8000 ) y = -y;
    43d2:	041e      	lsls	r6, r3, #16
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    43d4:	b2ad      	uxth	r5, r5

    if( theta & 0x8000 ) y = -y;
    43d6:	bf48      	it	mi
    43d8:	426d      	negmi	r5, r5
    43da:	b22d      	sxth	r5, r5
    43dc:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    43e0:	f894 31c2 	ldrb.w	r3, [r4, #450]	; 0x1c2
    43e4:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
    43e8:	9100      	str	r1, [sp, #0]
    43ea:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
    43ee:	4641      	mov	r1, r8
    43f0:	b2ad      	uxth	r5, r5
    43f2:	f007 fc4b 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    43f6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    43fa:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    43fe:	0c1b      	lsrs	r3, r3, #16
    4400:	334b      	adds	r3, #75	; 0x4b
    4402:	b29b      	uxth	r3, r3
    4404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4408:	18e1      	adds	r1, r4, r3
    440a:	5ce2      	ldrb	r2, [r4, r3]
    440c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    4410:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    4414:	54e2      	strb	r2, [r4, r3]
    4416:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    441a:	784a      	ldrb	r2, [r1, #1]
    441c:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    4420:	704a      	strb	r2, [r1, #1]
    4422:	788b      	ldrb	r3, [r1, #2]
    4424:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
    4428:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    442c:	708b      	strb	r3, [r1, #2]
				leds.juggle_index += leds.juggle_diff;
    442e:	f894 122f 	ldrb.w	r1, [r4, #559]	; 0x22f
    4432:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4436:	f894 3230 	ldrb.w	r3, [r4, #560]	; 0x230
    443a:	3701      	adds	r7, #1
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    443c:	440a      	add	r2, r1
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    443e:	b2ff      	uxtb	r7, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    4440:	b2d2      	uxtb	r2, r2
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4442:	42bb      	cmp	r3, r7
				leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE + (ONE_SIDE / 2), NUM_LEDS - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.led_data[beatsin16_halfup(leds.juggle_beat + i + leds.juggle_numdots + 1, ONE_SIDE, ONE_SIDE + (ONE_SIDE / 2) - 1)]   += ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
				leds.juggle_index += leds.juggle_diff;
    4444:	f884 222f 	strb.w	r2, [r4, #559]	; 0x22f
		}
	}

	if (leds.use_full_range) {
		if (leds.this_dir) {
			for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    4448:	f63f af42 	bhi.w	42d0 <juggle_half(LEDStruct&)+0x6f0>
		}
	}
	else {
		strip_sync(leds);
	}
}
    444c:	b00d      	add	sp, #52	; 0x34
    444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    4452:	3741      	adds	r7, #65	; 0x41
    4454:	230f      	movs	r3, #15
    4456:	f884 7231 	strb.w	r7, [r4, #561]	; 0x231
    445a:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    445e:	e471      	b.n	3d44 <juggle_half(LEDStruct&)+0x164>
    4460:	4620      	mov	r0, r4
    4462:	f7fc f815 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    4466:	e46d      	b.n	3d44 <juggle_half(LEDStruct&)+0x164>
			leds.led_data[beatsin16_halfdown(leds.juggle_beat + i + leds.juggle_numdots, 0, ONE_SIDE / 2)]			+= ColorFromPalette(leds.current_palette, leds.juggle_index, leds.brightness, leds.current_blending);
			leds.juggle_index += leds.juggle_diff;
		}
	}

	if (leds.use_full_range) {
    4468:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    446c:	2b00      	cmp	r3, #0
    446e:	f43f af08 	beq.w	4282 <juggle_half(LEDStruct&)+0x6a2>
    4472:	e62b      	b.n	40cc <juggle_half(LEDStruct&)+0x4ec>

00004474 <multi_juggle(LEDStruct&)>:
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    4474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    4478:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
}


// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
    447c:	b089      	sub	sp, #36	; 0x24
    447e:	4605      	mov	r5, r0
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
    4480:	2b00      	cmp	r3, #0
    4482:	f040 80a9 	bne.w	45d8 <multi_juggle(LEDStruct&)+0x164>
    4486:	4ebd      	ldr	r6, [pc, #756]	; (477c <multi_juggle(LEDStruct&)+0x308>)
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
    4488:	f880 322d 	strb.w	r3, [r0, #557]	; 0x22d
    448c:	8833      	ldrh	r3, [r6, #0]
    448e:	eb03 2043 	add.w	r0, r3, r3, lsl #9
    4492:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4496:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    449a:	3019      	adds	r0, #25
    449c:	b280      	uxth	r0, r0
    449e:	eb00 2440 	add.w	r4, r0, r0, lsl #9
    44a2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    44a6:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    44aa:	3419      	adds	r4, #25
    44ac:	b2a4      	uxth	r4, r4
    44ae:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    44b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    44b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44ba:	3319      	adds	r3, #25
    44bc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    44c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    44c4:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    44c8:	3319      	adds	r3, #25
    44ca:	b29b      	uxth	r3, r3
    44cc:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    44d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    44d4:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    44d8:	3119      	adds	r1, #25
    44da:	b289      	uxth	r1, r1
    44dc:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    44e0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    44e4:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    44e8:	3219      	adds	r2, #25
    44ea:	b292      	uxth	r2, r2
    44ec:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    44f0:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    44f4:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    44f8:	f10e 0e19 	add.w	lr, lr, #25
    44fc:	fa1f fe8e 	uxth.w	lr, lr
    4500:	eb0e 2c4e 	add.w	ip, lr, lr, lsl #9
    4504:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
    4508:	f50c 5c58 	add.w	ip, ip, #13824	; 0x3600
    450c:	f10c 0c19 	add.w	ip, ip, #25
    4510:	fa1f fc8c 	uxth.w	ip, ip
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4514:	eb03 2713 	add.w	r7, r3, r3, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4518:	eb0c 284c 	add.w	r8, ip, ip, lsl #9
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    451c:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4520:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4524:	eb01 2111 	add.w	r1, r1, r1, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4528:	b2ff      	uxtb	r7, r7
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    452a:	b2d3      	uxtb	r3, r2
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    452c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4530:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4534:	b2c9      	uxtb	r1, r1
    4536:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    453a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    453e:	123a      	asrs	r2, r7, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4540:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4544:	f108 0819 	add.w	r8, r8, #25
    4548:	fa1f f888 	uxth.w	r8, r8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    454c:	f3c1 17c7 	ubfx	r7, r1, #7, #8
    4550:	3201      	adds	r2, #1
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4552:	1119      	asrs	r1, r3, #4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4554:	f3ce 1ec0 	ubfx	lr, lr, #7, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4558:	eb00 2010 	add.w	r0, r0, r0, lsr #8
    455c:	eb04 2414 	add.w	r4, r4, r4, lsr #8
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    4560:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	leds.juggle_phased		 = jp;
    4564:	f3c4 14c0 	ubfx	r4, r4, #7, #1
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    4568:	3120      	adds	r1, #32
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    456a:	f10e 0301 	add.w	r3, lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    456e:	eb0c 2c1c 	add.w	ip, ip, ip, lsr #8
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
    4572:	f885 2230 	strb.w	r2, [r5, #560]	; 0x230
    4576:	eb08 2218 	add.w	r2, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    457a:	b2db      	uxtb	r3, r3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    457c:	f3cc 1cc0 	ubfx	ip, ip, #7, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
    4580:	f885 0235 	strb.w	r0, [r5, #565]	; 0x235
	leds.juggle_phased		 = jp;
    4584:	f885 4236 	strb.w	r4, [r5, #566]	; 0x236
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    4588:	f3c2 12c0 	ubfx	r2, r2, #7, #1

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
    458c:	f885 1232 	strb.w	r1, [r5, #562]	; 0x232
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    4590:	f107 040a 	add.w	r4, r7, #10
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    4594:	2101      	movs	r1, #1
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    4596:	200f      	movs	r0, #15
	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
    4598:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    459c:	f8a6 8000 	strh.w	r8, [r6]
void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
	leds.use_full_range		= ufr;
    45a0:	f885 21c4 	strb.w	r2, [r5, #452]	; 0x1c4
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
    45a4:	f885 c234 	strb.w	ip, [r5, #564]	; 0x234
	leds.delay_time			= 15;

	leds.juggle_one_dir		 = jod;
	leds.juggle_phased		 = jp;
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
    45a8:	f885 4231 	strb.w	r4, [r5, #561]	; 0x231
#ifndef JUGGLE_H
#define JUGGLE_H

void juggle_init(LEDStruct& leds, bool jod = random8(2), bool jp = random8(2), bool td = random8(2), uint8_t jn = random8(1, 6), uint8_t jb = random8(10, 20), 
					uint8_t jf = random8(32, 80), uint8_t jd = random8(1, 3), bool jir = random8(2), bool ufr = random8(2)) {
	leds.mode_initialized	= 1;
    45ac:	f885 122e 	strb.w	r1, [r5, #558]	; 0x22e
	leds.mode_type			= JUGGLE;
	leds.use_palette		= 1;
    45b0:	f885 122a 	strb.w	r1, [r5, #554]	; 0x22a
	leds.use_full_range		= ufr;
	leds.delay_time			= 15;
    45b4:	f885 01c3 	strb.w	r0, [r5, #451]	; 0x1c3
	leds.juggle_numdots 	 = jn;
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
    45b8:	f1bc 0f00 	cmp.w	ip, #0
    45bc:	d004      	beq.n	45c8 <multi_juggle(LEDStruct&)+0x154>
    45be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    45c2:	408b      	lsls	r3, r1
    45c4:	f885 3233 	strb.w	r3, [r5, #563]	; 0x233
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    45c8:	f895 322c 	ldrb.w	r3, [r5, #556]	; 0x22c
    45cc:	2b06      	cmp	r3, #6
    45ce:	f000 80be 	beq.w	474e <multi_juggle(LEDStruct&)+0x2da>
	if (leds.mode_name == JUGGLE_HALF) { leds.juggle_beat += 4; leds.juggle_numdots += random8(6); }
    45d2:	2b04      	cmp	r3, #4
    45d4:	f000 80c2 	beq.w	475c <multi_juggle(LEDStruct&)+0x2e8>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    45d8:	4b69      	ldr	r3, [pc, #420]	; (4780 <multi_juggle(LEDStruct&)+0x30c>)
    45da:	781b      	ldrb	r3, [r3, #0]
    45dc:	2b00      	cmp	r3, #0
    45de:	f040 80b2 	bne.w	4746 <multi_juggle(LEDStruct&)+0x2d2>

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);
    45e2:	f895 2232 	ldrb.w	r2, [r5, #562]	; 0x232
    45e6:	4f67      	ldr	r7, [pc, #412]	; (4784 <multi_juggle(LEDStruct&)+0x310>)
    45e8:	2196      	movs	r1, #150	; 0x96
    45ea:	4628      	mov	r0, r5
    45ec:	f007 faee 	bl	bbcc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    45f0:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    45f4:	2b00      	cmp	r3, #0
    45f6:	d074      	beq.n	46e2 <multi_juggle(LEDStruct&)+0x26e>
    45f8:	f8df b198 	ldr.w	fp, [pc, #408]	; 4794 <multi_juggle(LEDStruct&)+0x320>
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    45fc:	9703      	str	r7, [sp, #12]
    45fe:	f505 79e4 	add.w	r9, r5, #456	; 0x1c8
    4602:	2200      	movs	r2, #0
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
    4604:	f04f 084b 	mov.w	r8, #75	; 0x4b
    4608:	f44f 7a8c 	mov.w	sl, #280	; 0x118
    460c:	f895 1231 	ldrb.w	r1, [r5, #561]	; 0x231
    4610:	fb98 f3f3 	sdiv	r3, r8, r3
    4614:	b290      	uxth	r0, r2
    4616:	fb10 f603 	smulbb	r6, r0, r3
    461a:	1c54      	adds	r4, r2, #1
    461c:	4408      	add	r0, r1
    461e:	fb14 f303 	smulbb	r3, r4, r3

/// beat16 generates a 16-bit 'sawtooth' wave at a given BPM
LIB8STATIC uint16_t beat16( accum88 beats_per_minute, uint32_t timebase = 0)
{
    // Convert simple 8-bit BPM's to full Q8.8 accum88's if needed
    if( beats_per_minute < 256) beats_per_minute <<= 8;
    4622:	28ff      	cmp	r0, #255	; 0xff
    4624:	b299      	uxth	r1, r3
    4626:	bf9c      	itt	ls
    4628:	0203      	lslls	r3, r0, #8
    462a:	b298      	uxthls	r0, r3
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    462c:	9b03      	ldr	r3, [sp, #12]
    462e:	681b      	ldr	r3, [r3, #0]
    4630:	9307      	str	r3, [sp, #28]
	return ret;
    4632:	9b07      	ldr	r3, [sp, #28]
    // and then use a simple, fast bit-shift to divide by 65536.
    //
    // The ratio 65536:60000 is 279.620266667:256; we'll call it 280:256.
    // The conversion is accurate to about 0.05%, more or less,
    // e.g. if you ask for "120 BPM", you'll get about "119.93".
    return (((GET_MILLIS()) - timebase) * beats_per_minute_88 * 280) >> 16;
    4634:	fb0a f303 	mul.w	r3, sl, r3
    4638:	fb00 f303 	mul.w	r3, r0, r3
    463c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    if( theta & 0x4000 ) offset = 2047 - offset;
    4640:	f41e 4f80 	tst.w	lr, #16384	; 0x4000
    4644:	b2b6      	uxth	r6, r6
    static const uint16_t base[] =
    { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
    static const uint8_t slope[] =
    { 49, 48, 44, 38, 31, 23, 14, 4 };

    uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
    4646:	f3ce 00ca 	ubfx	r0, lr, #3, #11
    if( theta & 0x4000 ) offset = 2047 - offset;
    464a:	d003      	beq.n	4654 <multi_juggle(LEDStruct&)+0x1e0>
    464c:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
    4650:	3007      	adds	r0, #7
    4652:	b280      	uxth	r0, r0

    uint8_t section = offset / 256; // 0..7
    uint16_t b   = base[section];
    4654:	ea4f 2c10 	mov.w	ip, r0, lsr #8
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    4658:	4f4b      	ldr	r7, [pc, #300]	; (4788 <multi_juggle(LEDStruct&)+0x314>)
    465a:	f81b 300c 	ldrb.w	r3, [fp, ip]
    465e:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
    4662:	f3c0 0046 	ubfx	r0, r0, #1, #7
    4666:	fb03 c000 	mla	r0, r3, r0, ip

    if( theta & 0x8000 ) y = -y;
    466a:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
    uint8_t  m   = slope[section];

    uint8_t secoffset8 = (uint8_t)(offset) / 2;

    uint16_t mx = m * secoffset8;
    int16_t  y  = mx + b;
    466e:	b283      	uxth	r3, r0

    if( theta & 0x8000 ) y = -y;
    4670:	bf18      	it	ne
    4672:	425b      	negne	r3, r3
{
    uint16_t beat = beat16( beats_per_minute, timebase);
    uint16_t beatsin = (sin16( beat + phase_offset) + 32768);
    uint16_t rangewidth = highest - lowest;
    uint16_t scaledbeat = scale16( beatsin, rangewidth);
    uint16_t result = lowest + scaledbeat;
    4674:	43f0      	mvns	r0, r6
    4676:	b21b      	sxth	r3, r3
    4678:	4401      	add	r1, r0
    467a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
    467e:	f895 0233 	ldrb.w	r0, [r5, #563]	; 0x233
    4682:	f895 e22f 	ldrb.w	lr, [r5, #559]	; 0x22f
    4686:	b29b      	uxth	r3, r3
    4688:	b289      	uxth	r1, r1
    468a:	fb01 3103 	mla	r1, r1, r3, r3
    468e:	fb00 e202 	mla	r2, r0, r2, lr
    4692:	eb06 4611 	add.w	r6, r6, r1, lsr #16
    4696:	f895 1228 	ldrb.w	r1, [r5, #552]	; 0x228
    469a:	f895 31c2 	ldrb.w	r3, [r5, #450]	; 0x1c2
    469e:	9100      	str	r1, [sp, #0]
    46a0:	a806      	add	r0, sp, #24
    46a2:	4649      	mov	r1, r9
    46a4:	b2b6      	uxth	r6, r6
    46a6:	b2d2      	uxtb	r2, r2
    46a8:	f007 faf0 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    46ac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    46b0:	18e9      	adds	r1, r5, r3
    46b2:	5cea      	ldrb	r2, [r5, r3]
    46b4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    46b8:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    46bc:	54ea      	strb	r2, [r5, r3]
    46be:	f89d 3019 	ldrb.w	r3, [sp, #25]
    46c2:	784a      	ldrb	r2, [r1, #1]
    46c4:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    46c8:	704a      	strb	r2, [r1, #1]
    46ca:	788b      	ldrb	r3, [r1, #2]
    46cc:	f89d 201a 	ldrb.w	r2, [sp, #26]
    46d0:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    46d4:	708b      	strb	r3, [r1, #2]

	//if (leds.juggle_index_reset) { leds.juggle_index = 0; }

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.juggle_fade);

	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
    46d6:	f895 3230 	ldrb.w	r3, [r5, #560]	; 0x230
    46da:	b2e2      	uxtb	r2, r4
    46dc:	4293      	cmp	r3, r2
    46de:	d895      	bhi.n	460c <multi_juggle(LEDStruct&)+0x198>
    46e0:	9f03      	ldr	r7, [sp, #12]
    46e2:	462a      	mov	r2, r5
    46e4:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    46e8:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    46ea:	7819      	ldrb	r1, [r3, #0]
    46ec:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    46f0:	7859      	ldrb	r1, [r3, #1]
    46f2:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    46f6:	7899      	ldrb	r1, [r3, #2]
    46f8:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    46fc:	3303      	adds	r3, #3
    46fe:	4298      	cmp	r0, r3
    4700:	f1a2 0203 	sub.w	r2, r2, #3
    4704:	d1f1      	bne.n	46ea <multi_juggle(LEDStruct&)+0x276>
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4706:	4e21      	ldr	r6, [pc, #132]	; (478c <multi_juggle(LEDStruct&)+0x318>)
    4708:	6833      	ldr	r3, [r6, #0]
    470a:	07db      	lsls	r3, r3, #31
    470c:	d514      	bpl.n	4738 <multi_juggle(LEDStruct&)+0x2c4>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    470e:	683b      	ldr	r3, [r7, #0]
    4710:	4c1f      	ldr	r4, [pc, #124]	; (4790 <multi_juggle(LEDStruct&)+0x31c>)
    4712:	9306      	str	r3, [sp, #24]
    void reset() { mPrevTrigger = getTime(); }; \
    void trigger() { mPrevTrigger = getTime() - mPeriod; }; \
        \
    operator bool() { return ready(); } \
};
INSTANTIATE_EVERY_N_TIME_PERIODS(CEveryNMillis,uint32_t,GET_MILLIS);
    4714:	e894 0006 	ldmia.w	r4, {r1, r2}
	return ret;
    4718:	9b06      	ldr	r3, [sp, #24]
    471a:	1a5b      	subs	r3, r3, r1
    471c:	4293      	cmp	r3, r2
    471e:	d308      	bcc.n	4732 <multi_juggle(LEDStruct&)+0x2be>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4720:	683a      	ldr	r2, [r7, #0]
    4722:	f895 322f 	ldrb.w	r3, [r5, #559]	; 0x22f
    4726:	9205      	str	r2, [sp, #20]
	return ret;
    4728:	9a05      	ldr	r2, [sp, #20]
    472a:	6022      	str	r2, [r4, #0]
    472c:	3301      	adds	r3, #1
    472e:	f885 322f 	strb.w	r3, [r5, #559]	; 0x22f
}
    4732:	b009      	add	sp, #36	; 0x24
    4734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4738:	4630      	mov	r0, r6
    473a:	f008 f9c1 	bl	cac0 <__cxa_guard_acquire>
    473e:	b988      	cbnz	r0, 4764 <multi_juggle(LEDStruct&)+0x2f0>
    4740:	4c13      	ldr	r4, [pc, #76]	; (4790 <multi_juggle(LEDStruct&)+0x31c>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    4742:	683b      	ldr	r3, [r7, #0]
    4744:	e7e5      	b.n	4712 <multi_juggle(LEDStruct&)+0x29e>
// TODO: halfdown/halfup, keep beat > 30, index reset off, diff low

void multi_juggle(LEDStruct& leds) {
	// If not yet iniatilized, call init function with random variables.
	if (!leds.mode_initialized) { juggle_init(leds); }
	if (keyboard_update) { juggle_update(leds); }
    4746:	4628      	mov	r0, r5
    4748:	f7fe fdb4 	bl	32b4 <juggle_update(LEDStruct&)>
    474c:	e749      	b.n	45e2 <multi_juggle(LEDStruct&)+0x16e>
	leds.juggle_beat		 = jb;
	leds.juggle_fade		 = jf;
	leds.juggle_diff		 = jd;
	leds.juggle_index_reset  = jir;
	if (leds.juggle_index_reset) { leds.juggle_diff *= 10; }
	if (leds.mode_name == MULTI_JUGGLE) { leds.juggle_numdots = 15; leds.juggle_beat += 55; }
    474e:	3741      	adds	r7, #65	; 0x41
    4750:	230f      	movs	r3, #15
    4752:	f885 7231 	strb.w	r7, [r5, #561]	; 0x231
    4756:	f885 3230 	strb.w	r3, [r5, #560]	; 0x230
    475a:	e73d      	b.n	45d8 <multi_juggle(LEDStruct&)+0x164>
    475c:	4628      	mov	r0, r5
    475e:	f7fb fe97 	bl	490 <juggle_init(LEDStruct&, bool, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char, bool, bool) [clone .part.13]>
    4762:	e739      	b.n	45d8 <multi_juggle(LEDStruct&)+0x164>
    4764:	683b      	ldr	r3, [r7, #0]
    4766:	4c0a      	ldr	r4, [pc, #40]	; (4790 <multi_juggle(LEDStruct&)+0x31c>)
    4768:	9304      	str	r3, [sp, #16]
	return ret;
    476a:	9b04      	ldr	r3, [sp, #16]
    476c:	6023      	str	r3, [r4, #0]
    476e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	for (uint8_t i = 0; i < leds.juggle_numdots; i++) {
		leds.led_data[beatsin16(leds.juggle_beat + i, i * (ONE_SIDE / leds.juggle_numdots), (i + 1) * (ONE_SIDE / leds.juggle_numdots) - 1)] += ColorFromPalette(leds.current_palette, leds.juggle_index + leds.juggle_diff * i, leds.brightness, leds.current_blending);
		//leds.juggle_index += leds.juggle_diff;
	}
	strip_sync(leds);
	EVERY_N_MILLIS(500) { leds.juggle_index++; }
    4772:	4630      	mov	r0, r6
    4774:	6063      	str	r3, [r4, #4]
    4776:	f008 f9a9 	bl	cacc <__cxa_guard_release>
    477a:	e7e2      	b.n	4742 <multi_juggle(LEDStruct&)+0x2ce>
    477c:	1fff8784 	.word	0x1fff8784
    4780:	1fff962d 	.word	0x1fff962d
    4784:	1fffb1a0 	.word	0x1fffb1a0
    4788:	0000fe2c 	.word	0x0000fe2c
    478c:	1fff9e90 	.word	0x1fff9e90
    4790:	1fff954c 	.word	0x1fff954c
    4794:	000105cc 	.word	0x000105cc

00004798 <rainbow_update(LEDStruct&)>:
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4798:	4b1a      	ldr	r3, [pc, #104]	; (4804 <rainbow_update(LEDStruct&)+0x6c>)
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    479a:	4a1b      	ldr	r2, [pc, #108]	; (4808 <rainbow_update(LEDStruct&)+0x70>)
	switch (update_var) {
    479c:	781b      	ldrb	r3, [r3, #0]
	leds.juggle_beat	= jb;
    if (DEBUG) { LEDDebug(leds); }
}

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
    479e:	2100      	movs	r1, #0
    47a0:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    47a2:	2b04      	cmp	r3, #4
    47a4:	d808      	bhi.n	47b8 <rainbow_update(LEDStruct&)+0x20>
    47a6:	e8df f003 	tbb	[pc, r3]
    47aa:	1e0f      	.short	0x1e0f
    47ac:	2703      	.short	0x2703
    47ae:	09          	.byte	0x09
    47af:	00          	.byte	0x00
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
    47b0:	4b16      	ldr	r3, [pc, #88]	; (480c <rainbow_update(LEDStruct&)+0x74>)
    47b2:	881b      	ldrh	r3, [r3, #0]
    47b4:	f880 3279 	strb.w	r3, [r0, #633]	; 0x279
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    47b8:	f7fd bd28 	b.w	220c <LEDDebug(LEDStruct&)>
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
    47bc:	4b13      	ldr	r3, [pc, #76]	; (480c <rainbow_update(LEDStruct&)+0x74>)
    47be:	881b      	ldrh	r3, [r3, #0]
    47c0:	f880 3231 	strb.w	r3, [r0, #561]	; 0x231
		default:	break;
	}
	LEDDebug(leds);
    47c4:	f7fd bd22 	b.w	220c <LEDDebug(LEDStruct&)>

void rainbow_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    47c8:	4b10      	ldr	r3, [pc, #64]	; (480c <rainbow_update(LEDStruct&)+0x74>)
    47ca:	881b      	ldrh	r3, [r3, #0]
    47cc:	2b00      	cmp	r3, #0
    47ce:	bf14      	ite	ne
    47d0:	2301      	movne	r3, #1
    47d2:	2300      	moveq	r3, #0
    47d4:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    47d8:	bf14      	ite	ne
    47da:	2396      	movne	r3, #150	; 0x96
			else { leds.strip_range = ONE_SIDE; }
    47dc:	234b      	moveq	r3, #75	; 0x4b
    47de:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    47e2:	f7fd bd13 	b.w	220c <LEDDebug(LEDStruct&)>
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
    47e6:	4b09      	ldr	r3, [pc, #36]	; (480c <rainbow_update(LEDStruct&)+0x74>)
    47e8:	881b      	ldrh	r3, [r3, #0]
    47ea:	3300      	adds	r3, #0
    47ec:	bf18      	it	ne
    47ee:	2301      	movne	r3, #1
    47f0:	f880 327b 	strb.w	r3, [r0, #635]	; 0x27b
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    47f4:	f7fd bd0a 	b.w	220c <LEDDebug(LEDStruct&)>
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else { leds.strip_range = ONE_SIDE; }
			break;
		case 1:		leds.rainbow_split	= (bool)update_arg;		break;	//b		
		case 2:		leds.rainbow_diff	= (uint8_t)update_arg;	break;	//c
		case 3:		leds.rainbow_rot	= (uint8_t)update_arg;	break;	//d
    47f8:	4b04      	ldr	r3, [pc, #16]	; (480c <rainbow_update(LEDStruct&)+0x74>)
    47fa:	881b      	ldrh	r3, [r3, #0]
    47fc:	f880 3278 	strb.w	r3, [r0, #632]	; 0x278
		case 4:		leds.juggle_beat	= (uint8_t)update_arg;	break;  //e
		default:	break;
	}
	LEDDebug(leds);
    4800:	f7fd bd04 	b.w	220c <LEDDebug(LEDStruct&)>
    4804:	1fff9e94 	.word	0x1fff9e94
    4808:	1fff962d 	.word	0x1fff962d
    480c:	1fff951e 	.word	0x1fff951e

00004810 <rainbow_march(LEDStruct&)>:
}



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    4810:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
	LEDDebug(leds);
}



void rainbow_march(LEDStruct& leds) {
    4814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4818:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    481a:	2b00      	cmp	r3, #0
    481c:	d15c      	bne.n	48d8 <rainbow_march(LEDStruct&)+0xc8>
    481e:	4869      	ldr	r0, [pc, #420]	; (49c4 <rainbow_march(LEDStruct&)+0x1b4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    4820:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    4824:	8803      	ldrh	r3, [r0, #0]
    4826:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    482a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    482e:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4832:	3319      	adds	r3, #25
    4834:	b29b      	uxth	r3, r3
    4836:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    483a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    483e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4842:	3219      	adds	r2, #25
    4844:	b292      	uxth	r2, r2
    4846:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    484a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    484e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4852:	3119      	adds	r1, #25
    4854:	b289      	uxth	r1, r1
    4856:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    485a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    485e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4862:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4866:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4868:	3619      	adds	r6, #25
    486a:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    486c:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4870:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4874:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4878:	b2ed      	uxtb	r5, r5
    487a:	121b      	asrs	r3, r3, #8
    487c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4880:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4882:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4886:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    488a:	11ed      	asrs	r5, r5, #7
    488c:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    488e:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4892:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4894:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4896:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4898:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    489a:	4573      	cmp	r3, lr
    489c:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    489e:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    48a2:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    48a6:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    48aa:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    48ae:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    48b2:	f000 8085 	beq.w	49c0 <rainbow_march(LEDStruct&)+0x1b0>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    48b6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    48ba:	b2d2      	uxtb	r2, r2
    48bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    48c0:	1212      	asrs	r2, r2, #8
    48c2:	4472      	add	r2, lr
    48c4:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    48c6:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    48ca:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    48ce:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    48d2:	4620      	mov	r0, r4
    48d4:	f7fd fc9a 	bl	220c <LEDDebug(LEDStruct&)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    48d8:	4b3b      	ldr	r3, [pc, #236]	; (49c8 <rainbow_march(LEDStruct&)+0x1b8>)
    48da:	781b      	ldrb	r3, [r3, #0]
    48dc:	2b00      	cmp	r3, #0
    48de:	d16b      	bne.n	49b8 <rainbow_march(LEDStruct&)+0x1a8>

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    48e0:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    48e4:	bb43      	cbnz	r3, 4938 <rainbow_march(LEDStruct&)+0x128>
    48e6:	f894 227a 	ldrb.w	r2, [r4, #634]	; 0x27a
    48ea:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
    48ee:	441a      	add	r2, r3

	if (!leds.rainbow_split) {
    48f0:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    48f4:	b2d2      	uxtb	r2, r2
    48f6:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    48fa:	bb4b      	cbnz	r3, 4950 <rainbow_march(LEDStruct&)+0x140>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    48fc:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4900:	2b00      	cmp	r3, #0
    4902:	d151      	bne.n	49a8 <rainbow_march(LEDStruct&)+0x198>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4904:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4908:	214b      	movs	r1, #75	; 0x4b
    490a:	4620      	mov	r0, r4
    490c:	f007 f8ac 	bl	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4910:	4620      	mov	r0, r4
    4912:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4916:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4918:	7802      	ldrb	r2, [r0, #0]
    491a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    491e:	7842      	ldrb	r2, [r0, #1]
    4920:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4924:	7882      	ldrb	r2, [r0, #2]
    4926:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    492a:	3003      	adds	r0, #3
    492c:	4288      	cmp	r0, r1
    492e:	f1a3 0303 	sub.w	r3, r3, #3
    4932:	d1f1      	bne.n	4918 <rainbow_march(LEDStruct&)+0x108>
    4934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4938:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    493c:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
    4940:	1a9a      	subs	r2, r3, r2

	if (!leds.rainbow_split) {
    4942:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;
    4946:	b2d2      	uxtb	r2, r2
    4948:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a

	if (!leds.rainbow_split) {
    494c:	2b00      	cmp	r3, #0
    494e:	d0d5      	beq.n	48fc <rainbow_march(LEDStruct&)+0xec>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4950:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4954:	2125      	movs	r1, #37	; 0x25
    4956:	4620      	mov	r0, r4
    4958:	f007 f886 	bl	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    495c:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4960:	4623      	mov	r3, r4
    4962:	4621      	mov	r1, r4
    4964:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4966:	7810      	ldrb	r0, [r2, #0]
    4968:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    496c:	7850      	ldrb	r0, [r2, #1]
    496e:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4972:	7890      	ldrb	r0, [r2, #2]
    4974:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4978:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    497a:	42aa      	cmp	r2, r5
    497c:	f1a1 0103 	sub.w	r1, r1, #3
    4980:	d1f1      	bne.n	4966 <rainbow_march(LEDStruct&)+0x156>
    4982:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4986:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4988:	7802      	ldrb	r2, [r0, #0]
    498a:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    498e:	7842      	ldrb	r2, [r0, #1]
    4990:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4994:	7882      	ldrb	r2, [r0, #2]
    4996:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    499a:	3003      	adds	r0, #3
    499c:	4288      	cmp	r0, r1
    499e:	f1a3 0303 	sub.w	r3, r3, #3
    49a2:	d1f1      	bne.n	4988 <rainbow_march(LEDStruct&)+0x178>
    49a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    49a8:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    49ac:	4620      	mov	r0, r4
    49ae:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    49b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) leds.rainbow_index += leds.rainbow_rot; else leds.rainbow_index -= leds.rainbow_rot;

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    49b4:	f007 b858 	b.w	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>



void rainbow_march(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    49b8:	4620      	mov	r0, r4
    49ba:	f7ff feed 	bl	4798 <rainbow_update(LEDStruct&)>
    49be:	e78f      	b.n	48e0 <rainbow_march(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    49c0:	461a      	mov	r2, r3
    49c2:	e780      	b.n	48c6 <rainbow_march(LEDStruct&)+0xb6>
    49c4:	1fff8784 	.word	0x1fff8784
    49c8:	1fff962d 	.word	0x1fff962d

000049cc <rainbow_march_beat(LEDStruct&)>:
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    49cc:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}

void rainbow_march_beat(LEDStruct& leds) {
    49d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49d4:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
    49d6:	2b00      	cmp	r3, #0
    49d8:	d15c      	bne.n	4a94 <rainbow_march_beat(LEDStruct&)+0xc8>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    49da:	4871      	ldr	r0, [pc, #452]	; (4ba0 <rainbow_march_beat(LEDStruct&)+0x1d4>)
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
    49dc:	f884 322a 	strb.w	r3, [r4, #554]	; 0x22a
    49e0:	8803      	ldrh	r3, [r0, #0]
    49e2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    49e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    49ea:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    49ee:	3319      	adds	r3, #25
    49f0:	b29b      	uxth	r3, r3
    49f2:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    49f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    49fa:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    49fe:	3219      	adds	r2, #25
    4a00:	b292      	uxth	r2, r2
    4a02:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4a06:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4a0a:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    4a0e:	3119      	adds	r1, #25
    4a10:	b289      	uxth	r1, r1
    4a12:	eb01 2641 	add.w	r6, r1, r1, lsl #9
    4a16:	eb01 0686 	add.w	r6, r1, r6, lsl #2
    4a1a:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a1e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a22:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a24:	3619      	adds	r6, #25
    4a26:	b2b6      	uxth	r6, r6
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a28:	eb03 07c3 	add.w	r7, r3, r3, lsl #3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a2c:	eb06 2516 	add.w	r5, r6, r6, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a30:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    4a34:	b2ed      	uxtb	r5, r5
    4a36:	121b      	asrs	r3, r3, #8
    4a38:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4a3c:	3301      	adds	r3, #1
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4a3e:	f04f 0e01 	mov.w	lr, #1
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a42:	eb01 2111 	add.w	r1, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a46:	11ed      	asrs	r5, r5, #7
    4a48:	b2db      	uxtb	r3, r3
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    4a4a:	f3c1 17c0 	ubfx	r7, r1, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4a4e:	8006      	strh	r6, [r0, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a50:	3503      	adds	r5, #3
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4a52:	2607      	movs	r6, #7
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4a54:	200f      	movs	r0, #15

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4a56:	4573      	cmp	r3, lr
    4a58:	b2e9      	uxtb	r1, r5
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
    4a5a:	f884 71c4 	strb.w	r7, [r4, #452]	; 0x1c4
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
    4a5e:	f884 e22e 	strb.w	lr, [r4, #558]	; 0x22e
    leds.use_palette		= 0;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
    4a62:	f884 e27b 	strb.w	lr, [r4, #635]	; 0x27b
#ifndef RAINBOW_MARCH_H
#define RAINBOW_MARCH_H

void rainbow_init(LEDStruct& leds, bool rs = random8(2), uint8_t rd = random8(1, 20), uint8_t rr = random8(1, 4), bool ufr = random8(2), uint8_t jb = random8(3,13)) {
    leds.mode_initialized	= 1;
	leds.mode_type			= RAINBOW_MARCH;
    4a66:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
    leds.use_palette		= 0;
	leds.delay_time			= 15;
    4a6a:	f884 01c3 	strb.w	r0, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4a6e:	f000 8094 	beq.w	4b9a <rainbow_march_beat(LEDStruct&)+0x1ce>
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4a72:	eb02 2212 	add.w	r2, r2, r2, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    4a76:	b2d2      	uxtb	r2, r2
    4a78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4a7c:	1212      	asrs	r2, r2, #8
    4a7e:	4472      	add	r2, lr
    4a80:	b2d2      	uxtb	r2, r2
    leds.rainbow_diff   = rd;
    4a82:	f884 3279 	strb.w	r3, [r4, #633]	; 0x279
    leds.rainbow_rot    = rr;
    4a86:	f884 2278 	strb.w	r2, [r4, #632]	; 0x278
	
	leds.juggle_beat	= jb;
    4a8a:	f884 1231 	strb.w	r1, [r4, #561]	; 0x231
    if (DEBUG) { LEDDebug(leds); }
    4a8e:	4620      	mov	r0, r4
    4a90:	f7fd fbbc 	bl	220c <LEDDebug(LEDStruct&)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4a94:	4b43      	ldr	r3, [pc, #268]	; (4ba4 <rainbow_march_beat(LEDStruct&)+0x1d8>)
    4a96:	781b      	ldrb	r3, [r3, #0]
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d17a      	bne.n	4b92 <rainbow_march_beat(LEDStruct&)+0x1c6>

	if (leds.this_dir == 0) {
    4a9c:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    4aa0:	bb7b      	cbnz	r3, 4b02 <rainbow_march_beat(LEDStruct&)+0x136>
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    4aa2:	4619      	mov	r1, r3
    4aa4:	2205      	movs	r2, #5
    4aa6:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    4aaa:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    4aae:	f7fb fe43 	bl	738 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]>
    4ab2:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    4ab6:	442b      	add	r3, r5
    4ab8:	4418      	add	r0, r3
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4aba:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b
void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
    4abe:	b2c2      	uxtb	r2, r0
    4ac0:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
    4ac4:	bb8b      	cbnz	r3, 4b2a <rainbow_march_beat(LEDStruct&)+0x15e>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4ac6:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    4aca:	2b00      	cmp	r3, #0
    4acc:	d159      	bne.n	4b82 <rainbow_march_beat(LEDStruct&)+0x1b6>
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
    4ace:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4ad2:	214b      	movs	r1, #75	; 0x4b
    4ad4:	4620      	mov	r0, r4
    4ad6:	f006 ffc7 	bl	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4ada:	4620      	mov	r0, r4
    4adc:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4ae0:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ae2:	781a      	ldrb	r2, [r3, #0]
    4ae4:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    4ae8:	785a      	ldrb	r2, [r3, #1]
    4aea:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    4aee:	789a      	ldrb	r2, [r3, #2]
    4af0:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    4af4:	3303      	adds	r3, #3
    4af6:	428b      	cmp	r3, r1
    4af8:	f1a0 0003 	sub.w	r0, r0, #3
    4afc:	d1f1      	bne.n	4ae2 <rainbow_march_beat(LEDStruct&)+0x116>
    4afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4b02:	2300      	movs	r3, #0
    4b04:	4619      	mov	r1, r3
    4b06:	2205      	movs	r2, #5
    4b08:	f894 0231 	ldrb.w	r0, [r4, #561]	; 0x231
    4b0c:	f894 5278 	ldrb.w	r5, [r4, #632]	; 0x278
    4b10:	f7fb fe12 	bl	738 <beatsin8(unsigned short, unsigned char, unsigned char, unsigned long, unsigned char) [clone .constprop.37]>
    4b14:	f894 327a 	ldrb.w	r3, [r4, #634]	; 0x27a
    4b18:	1b5b      	subs	r3, r3, r5
    4b1a:	1a18      	subs	r0, r3, r0
	}

	if (!leds.rainbow_split) {
    4b1c:	f894 327b 	ldrb.w	r3, [r4, #635]	; 0x27b

	if (leds.this_dir == 0) {
		leds.rainbow_index += leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5);
	}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
    4b20:	b2c2      	uxtb	r2, r0
    4b22:	f884 227a 	strb.w	r2, [r4, #634]	; 0x27a
	}

	if (!leds.rainbow_split) {
    4b26:	2b00      	cmp	r3, #0
    4b28:	d0cd      	beq.n	4ac6 <rainbow_march_beat(LEDStruct&)+0xfa>
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
		else					 { fill_rainbow(leds.led_data, ONE_SIDE, leds.rainbow_index, leds.rainbow_diff); strip_sync(leds); }
	}
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
    4b2a:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4b2e:	2125      	movs	r1, #37	; 0x25
    4b30:	4620      	mov	r0, r4
    4b32:	f006 ff99 	bl	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
    4b36:	f104 056f 	add.w	r5, r4, #111	; 0x6f
    4b3a:	4623      	mov	r3, r4
    4b3c:	4621      	mov	r1, r4
    4b3e:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b40:	7810      	ldrb	r0, [r2, #0]
    4b42:	f881 00de 	strb.w	r0, [r1, #222]	; 0xde
        g = rhs.g;
    4b46:	7850      	ldrb	r0, [r2, #1]
    4b48:	f881 00df 	strb.w	r0, [r1, #223]	; 0xdf
        b = rhs.b;
    4b4c:	7890      	ldrb	r0, [r2, #2]
    4b4e:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    4b52:	3203      	adds	r2, #3
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
    4b54:	42aa      	cmp	r2, r5
    4b56:	f1a1 0103 	sub.w	r1, r1, #3
    4b5a:	d1f1      	bne.n	4b40 <rainbow_march_beat(LEDStruct&)+0x174>
    4b5c:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    4b60:	4620      	mov	r0, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4b62:	7802      	ldrb	r2, [r0, #0]
    4b64:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4b68:	7842      	ldrb	r2, [r0, #1]
    4b6a:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4b6e:	7882      	ldrb	r2, [r0, #2]
    4b70:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4b74:	3003      	adds	r0, #3
    4b76:	4288      	cmp	r0, r1
    4b78:	f1a3 0303 	sub.w	r3, r3, #3
    4b7c:	d1f1      	bne.n	4b62 <rainbow_march_beat(LEDStruct&)+0x196>
    4b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4b82:	f894 3279 	ldrb.w	r3, [r4, #633]	; 0x279
    4b86:	4620      	mov	r0, r4
    4b88:	2196      	movs	r1, #150	; 0x96
	else {
		fill_rainbow(leds.led_data, ONE_SIDE / 2, leds.rainbow_index, leds.rainbow_diff);
		for (int i = 0; i < ONE_SIDE / 2; i++) { leds.led_data[ONE_SIDE - 1 - i] = leds.led_data[i]; }
		strip_sync(leds);
	}
}
    4b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	else {
		leds.rainbow_index -= (leds.rainbow_rot + beatsin8(leds.juggle_beat, 0, 5));
	}

	if (!leds.rainbow_split) {
		if (leds.use_full_range) { fill_rainbow(leds.led_data, NUM_LEDS, leds.rainbow_index, leds.rainbow_diff); }
    4b8e:	f006 bf6b 	b.w	ba68 <fill_rainbow(CRGB*, int, unsigned char, unsigned char)>
	}
}

void rainbow_march_beat(LEDStruct& leds) {
	if (!leds.mode_initialized) { rainbow_init(leds, RAINBOW_MARCH); }
	if (keyboard_update) { rainbow_update(leds); }
    4b92:	4620      	mov	r0, r4
    4b94:	f7ff fe00 	bl	4798 <rainbow_update(LEDStruct&)>
    4b98:	e780      	b.n	4a9c <rainbow_march_beat(LEDStruct&)+0xd0>
	leds.delay_time			= 15;

	leds.use_full_range = ufr;

	leds.rainbow_split  = rs;
	if (rd == 1) { rr = 1; }
    4b9a:	461a      	mov	r2, r3
    4b9c:	e771      	b.n	4a82 <rainbow_march_beat(LEDStruct&)+0xb6>
    4b9e:	bf00      	nop
    4ba0:	1fff8784 	.word	0x1fff8784
    4ba4:	1fff962d 	.word	0x1fff962d

00004ba8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>:
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4baa:	f890 422c 	ldrb.w	r4, [r0, #556]	; 0x22c
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4bae:	f89d 6018 	ldrb.w	r6, [sp, #24]
    4bb2:	f89d e01c 	ldrb.w	lr, [sp, #28]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4bb6:	250c      	movs	r5, #12
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    4bb8:	2701      	movs	r7, #1
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4bba:	3c10      	subs	r4, #16
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
    4bbc:	f880 522d 	strb.w	r5, [r0, #557]	; 0x22d
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4bc0:	42bc      	cmp	r4, r7
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;
    4bc2:	f04f 050f 	mov.w	r5, #15
    4bc6:	f880 51c3 	strb.w	r5, [r0, #451]	; 0x1c3
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
    4bca:	f880 722e 	strb.w	r7, [r0, #558]	; 0x22e
#ifndef FIRE_H
#define FIRE_H

void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
    4bce:	f89d 5014 	ldrb.w	r5, [sp, #20]
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4bd2:	d93d      	bls.n	4c50 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
	else														 { leds.use_palette = 0; }
    4bd4:	2300      	movs	r3, #0
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4bd6:	244b      	movs	r4, #75	; 0x4b
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4bd8:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4bdc:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4be0:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4be4:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4be8:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
	else														 { leds.use_palette = 0; }
    4bec:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
	leds.fire_mirror		= fm;
	leds.torch_diff			= td;
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }
    4bf0:	f880 3317 	strb.w	r3, [r0, #791]	; 0x317
    4bf4:	f880 4316 	strb.w	r4, [r0, #790]	; 0x316
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4bf8:	4c1f      	ldr	r4, [pc, #124]	; (4c78 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xd0>)
    4bfa:	8823      	ldrh	r3, [r4, #0]
    4bfc:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4c04:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    4c08:	3319      	adds	r3, #25
    4c0a:	b29b      	uxth	r3, r3
    4c0c:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    4c10:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4c14:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4c18:	3219      	adds	r2, #25
    4c1a:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4c1c:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    4c20:	eb02 2112 	add.w	r1, r2, r2, lsr #8

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c24:	b2db      	uxtb	r3, r3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c26:	b2c9      	uxtb	r1, r1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c2c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c30:	3d0a      	subs	r5, #10
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c32:	3e0a      	subs	r6, #10
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c38:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c3c:	eb05 2323 	add.w	r3, r5, r3, asr #8
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c40:	eb06 2121 	add.w	r1, r6, r1, asr #8
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
	else							  { leds.heat_length = ONE_SIDE;	 leds.fire_offset = 0; }

	leds.fire_sparking2 = fs - 10 + random8(21);
    4c44:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4c48:	8022      	strh	r2, [r4, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
    4c4a:	f880 127f 	strb.w	r1, [r0, #639]	; 0x27f
}
    4c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
void fire_init(LEDStruct& leds, bool fy = random8(2), bool fm = random8(2), uint8_t hl = random8(20, 31), uint8_t fs = random8(50, 110), uint8_t fc = random8(60, 120), uint8_t td = random8(1, 5)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIRE;
	leds.delay_time			= 15;

	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.use_palette = 1; }
    4c50:	f880 722a 	strb.w	r7, [r0, #554]	; 0x22a
	else														 { leds.use_palette = 0; }

	leds.fire_sparking		= fs;
    4c54:	f880 527c 	strb.w	r5, [r0, #636]	; 0x27c
	leds.fire_cooling		= fc;
    4c58:	f880 627e 	strb.w	r6, [r0, #638]	; 0x27e
	leds.fire_sync			= fy;
    4c5c:	f880 1318 	strb.w	r1, [r0, #792]	; 0x318
	leds.fire_mirror		= fm;
    4c60:	f880 2319 	strb.w	r2, [r0, #793]	; 0x319
	leds.torch_diff			= td;
    4c64:	f880 e31b 	strb.w	lr, [r0, #795]	; 0x31b
		
	if (leds.fire_mirror)			  { leds.heat_length = ONE_SIDE / 2; leds.fire_offset = leds.heat_length; }
    4c68:	b112      	cbz	r2, 4c70 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0xc8>
    4c6a:	2225      	movs	r2, #37	; 0x25
    4c6c:	f880 2317 	strb.w	r2, [r0, #791]	; 0x317
	if (leds.mode_name == TORCH || leds.mode_name == TORCH_SYNC) { leds.heat_length = hl; }
    4c70:	f880 3316 	strb.w	r3, [r0, #790]	; 0x316
    4c74:	e7c0      	b.n	4bf8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    4c76:	bf00      	nop
    4c78:	1fff8784 	.word	0x1fff8784

00004c7c <fire_update(LEDStruct&)>:
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    4c7c:	4b19      	ldr	r3, [pc, #100]	; (4ce4 <fire_update(LEDStruct&)+0x68>)
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4c7e:	4a1a      	ldr	r2, [pc, #104]	; (4ce8 <fire_update(LEDStruct&)+0x6c>)
	switch (update_var) {
    4c80:	781b      	ldrb	r3, [r3, #0]
	leds.fire_cooling2	= fc - 10 + random8(21);
}


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
    4c82:	2100      	movs	r1, #0
    4c84:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    4c86:	2b05      	cmp	r3, #5
    4c88:	d808      	bhi.n	4c9c <fire_update(LEDStruct&)+0x20>
    4c8a:	e8df f003 	tbb	[pc, r3]
    4c8e:	150f      	.short	0x150f
    4c90:	0921031b 	.word	0x0921031b
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
    4c94:	4b15      	ldr	r3, [pc, #84]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4c96:	881b      	ldrh	r3, [r3, #0]
    4c98:	f880 327f 	strb.w	r3, [r0, #639]	; 0x27f
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4c9c:	f7fd bab6 	b.w	220c <LEDDebug(LEDStruct&)>
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
    4ca0:	4b12      	ldr	r3, [pc, #72]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4ca2:	881b      	ldrh	r3, [r3, #0]
    4ca4:	f880 331b 	strb.w	r3, [r0, #795]	; 0x31b
		default:	break;
	}
	LEDDebug(leds);
    4ca8:	f7fd bab0 	b.w	220c <LEDDebug(LEDStruct&)>


void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
    4cac:	4b0f      	ldr	r3, [pc, #60]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	f880 327c 	strb.w	r3, [r0, #636]	; 0x27c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4cb4:	f7fd baaa 	b.w	220c <LEDDebug(LEDStruct&)>

void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
    4cb8:	4b0c      	ldr	r3, [pc, #48]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4cba:	881b      	ldrh	r3, [r3, #0]
    4cbc:	f880 327e 	strb.w	r3, [r0, #638]	; 0x27e
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4cc0:	f7fd baa4 	b.w	220c <LEDDebug(LEDStruct&)>
void fire_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
    4cc4:	4b09      	ldr	r3, [pc, #36]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4cc6:	881b      	ldrh	r3, [r3, #0]
    4cc8:	f880 327d 	strb.w	r3, [r0, #637]	; 0x27d
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4ccc:	f7fd ba9e 	b.w	220c <LEDDebug(LEDStruct&)>
	switch (update_var) {
		case 0:		leds.fire_sparking	= (uint8_t)update_arg;	break;	//a
		case 1:		leds.fire_cooling	= (uint8_t)update_arg;	break;	//b		
		case 2:		leds.fire_sparking2 = (uint8_t)update_arg;	break;	//c
		case 3:		leds.fire_cooling2	= (uint8_t)update_arg;	break;	//d
		case 4:		leds.fire_sync		= (bool)update_arg;		break;	//e
    4cd0:	4b06      	ldr	r3, [pc, #24]	; (4cec <fire_update(LEDStruct&)+0x70>)
    4cd2:	881b      	ldrh	r3, [r3, #0]
    4cd4:	3300      	adds	r3, #0
    4cd6:	bf18      	it	ne
    4cd8:	2301      	movne	r3, #1
    4cda:	f880 3318 	strb.w	r3, [r0, #792]	; 0x318
		case 5:		leds.torch_diff		= (uint8_t)update_arg;	break;	//f
		default:	break;
	}
	LEDDebug(leds);
    4cde:	f7fd ba95 	b.w	220c <LEDDebug(LEDStruct&)>
    4ce2:	bf00      	nop
    4ce4:	1fff9e94 	.word	0x1fff9e94
    4ce8:	1fff962d 	.word	0x1fff962d
    4cec:	1fff951e 	.word	0x1fff951e

00004cf0 <fire(LEDStruct&)>:
}

void fire(LEDStruct& leds) {
    4cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    4cf4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    4cf8:	4dc5      	ldr	r5, [pc, #788]	; (5010 <fire(LEDStruct&)+0x320>)
		default:	break;
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
    4cfa:	b087      	sub	sp, #28
    4cfc:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    4cfe:	2b00      	cmp	r3, #0
    4d00:	f000 8210 	beq.w	5124 <fire(LEDStruct&)+0x434>
	if (keyboard_update) { fire_update(leds); }
    4d04:	4bc3      	ldr	r3, [pc, #780]	; (5014 <fire(LEDStruct&)+0x324>)
    4d06:	781b      	ldrb	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	f040 8207 	bne.w	511c <fire(LEDStruct&)+0x42c>
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4d0e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4d12:	2b00      	cmp	r3, #0
    4d14:	f000 82ba 	beq.w	528c <fire(LEDStruct&)+0x59c>
    4d18:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    4d1c:	882a      	ldrh	r2, [r5, #0]
    4d1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4d22:	004f      	lsls	r7, r1, #1
    4d24:	f203 2e7f 	addw	lr, r3, #639	; 0x27f
    4d28:	fb97 f7f3 	sdiv	r7, r7, r3
    4d2c:	3702      	adds	r7, #2
    4d2e:	b2ff      	uxtb	r7, r7
    4d30:	44a6      	add	lr, r4
    4d32:	f204 267f 	addw	r6, r4, #639	; 0x27f
    4d36:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4d3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4d3e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4d42:	3219      	adds	r2, #25
    4d44:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4d46:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4d4a:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4d4e:	b2c9      	uxtb	r1, r1
    4d50:	fb11 f107 	smulbb	r1, r1, r7
    4d54:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4d58:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4d5c:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    4d5e:	7031      	strb	r1, [r6, #0]
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// heat[] array defined in LEDStruct

	// Step 1.  Cool down every cell a little
	for (int i = 0; i < leds.heat_length; i++) {
    4d60:	d1e9      	bne.n	4d36 <fire(LEDStruct&)+0x46>
    4d62:	802a      	strh	r2, [r5, #0]
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d64:	1edf      	subs	r7, r3, #3
    4d66:	2f01      	cmp	r7, #1
    4d68:	dd16      	ble.n	4d98 <fire(LEDStruct&)+0xa8>
    4d6a:	f503 701f 	add.w	r0, r3, #636	; 0x27c
    4d6e:	f203 2e7e 	addw	lr, r3, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4d72:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 5018 <fire(LEDStruct&)+0x328>
    4d76:	4420      	add	r0, r4
    4d78:	44a6      	add	lr, r4
    4d7a:	f504 7820 	add.w	r8, r4, #640	; 0x280
    4d7e:	7801      	ldrb	r1, [r0, #0]
    4d80:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4d84:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4d88:	fb8c 9601 	smull	r9, r6, ip, r1
    4d8c:	eba6 71e1 	sub.w	r1, r6, r1, asr #31
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d90:	4540      	cmp	r0, r8
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    4d92:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}

	// Step 2.  Heat from each cell drifts 'up' and diffuses a little
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    4d96:	d1f2      	bne.n	4d7e <fire(LEDStruct&)+0x8e>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4d98:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4d9c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4da0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4da4:	3219      	adds	r2, #25
    4da6:	b292      	uxth	r2, r2
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}

	// Step 3.  Randomly ignite new 'sparks' of heat near the bottom
	if (random8() < leds.fire_sparking) {
    4da8:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4dac:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    4db0:	802a      	strh	r2, [r5, #0]
    4db2:	b2c9      	uxtb	r1, r1
    4db4:	428e      	cmp	r6, r1
    4db6:	4896      	ldr	r0, [pc, #600]	; (5010 <fire(LEDStruct&)+0x320>)
    4db8:	d926      	bls.n	4e08 <fire(LEDStruct&)+0x118>
    4dba:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4dbe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4dc2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4dc6:	3219      	adds	r2, #25
    4dc8:	b292      	uxth	r2, r2
    4dca:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    4dce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    4dd2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    4dd6:	3619      	adds	r6, #25
    4dd8:	b2b6      	uxth	r6, r6
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4dda:	eb06 2116 	add.w	r1, r6, r6, lsr #8
    4dde:	eb02 2212 	add.w	r2, r2, r2, lsr #8
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4de2:	b2c9      	uxtb	r1, r1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4de4:	b2d2      	uxtb	r2, r2
    4de6:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    4dea:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    4dee:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4df2:	ebc1 114e 	rsb	r1, r1, lr, lsl #5
    4df6:	1209      	asrs	r1, r1, #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4df8:	8006      	strh	r6, [r0, #0]
    4dfa:	3960      	subs	r1, #96	; 0x60
    4dfc:	f892 0280 	ldrb.w	r0, [r2, #640]	; 0x280
    4e00:	fa80 f051 	uqadd8	r0, r0, r1
    4e04:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}

	if (!leds.fire_sync) {
    4e08:	f894 c318 	ldrb.w	ip, [r4, #792]	; 0x318
    4e0c:	f1bc 0f00 	cmp.w	ip, #0
    4e10:	d17a      	bne.n	4f08 <fire(LEDStruct&)+0x218>
		for (int i = 0; i < leds.heat_length; i++) {
    4e12:	2b00      	cmp	r3, #0
    4e14:	f000 822f 	beq.w	5276 <fire(LEDStruct&)+0x586>
    4e18:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    4e1c:	882a      	ldrh	r2, [r5, #0]
    4e1e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4e22:	004e      	lsls	r6, r1, #1
    4e24:	f203 2eca 	addw	lr, r3, #714	; 0x2ca
    4e28:	fb96 f6f3 	sdiv	r6, r6, r3
    4e2c:	3602      	adds	r6, #2
    4e2e:	b2f6      	uxtb	r6, r6
    4e30:	44a6      	add	lr, r4
    4e32:	f204 20ca 	addw	r0, r4, #714	; 0x2ca
    4e36:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e3a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e3e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4e42:	3219      	adds	r2, #25
    4e44:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4e46:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    4e4a:	f810 8f01 	ldrb.w	r8, [r0, #1]!
    4e4e:	b2c9      	uxtb	r1, r1
    4e50:	fb11 f106 	smulbb	r1, r1, r6
    4e54:	eba8 2111 	sub.w	r1, r8, r1, lsr #8
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4e58:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e5c:	4570      	cmp	r0, lr
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    4e5e:	7001      	strb	r1, [r0, #0]
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    4e60:	d1e9      	bne.n	4e36 <fire(LEDStruct&)+0x146>
    4e62:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e64:	2f01      	cmp	r7, #1
    4e66:	dd16      	ble.n	4e96 <fire(LEDStruct&)+0x1a6>
    4e68:	f203 20c7 	addw	r0, r3, #711	; 0x2c7
    4e6c:	f203 27c9 	addw	r7, r3, #713	; 0x2c9
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4e70:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 5018 <fire(LEDStruct&)+0x328>
    4e74:	4420      	add	r0, r4
    4e76:	4427      	add	r7, r4
    4e78:	f204 28cb 	addw	r8, r4, #715	; 0x2cb
    4e7c:	7801      	ldrb	r1, [r0, #0]
    4e7e:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
    4e82:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    4e86:	fb8e 9601 	smull	r9, r6, lr, r1
    4e8a:	eba6 71e1 	sub.w	r1, r6, r1, asr #31

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e8e:	4580      	cmp	r8, r0
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    4e90:	f807 1d01 	strb.w	r1, [r7, #-1]!

	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    4e94:	d1f2      	bne.n	4e7c <fire(LEDStruct&)+0x18c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4e96:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4e9a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4e9e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ea2:	3219      	adds	r2, #25
    4ea4:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
		if (random8() < leds.fire_sparking2) {
    4ea6:	eb02 2112 	add.w	r1, r2, r2, lsr #8
    4eaa:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    4eae:	802a      	strh	r2, [r5, #0]
    4eb0:	b2c9      	uxtb	r1, r1
    4eb2:	428e      	cmp	r6, r1
    4eb4:	4856      	ldr	r0, [pc, #344]	; (5010 <fire(LEDStruct&)+0x320>)
    4eb6:	d927      	bls.n	4f08 <fire(LEDStruct&)+0x218>
    4eb8:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    4ebc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4ec0:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    4ec4:	3219      	adds	r2, #25
    4ec6:	b292      	uxth	r2, r2
    4ec8:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    4ecc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4ed0:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    4ed4:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ed6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4eda:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4edc:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    4ede:	eb05 2115 	add.w	r1, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    4ee2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    4ee6:	b2c9      	uxtb	r1, r1
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    4ee8:	eb04 2222 	add.w	r2, r4, r2, asr #8
    4eec:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    4ef0:	ebc1 1146 	rsb	r1, r1, r6, lsl #5
    4ef4:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    4ef8:	8005      	strh	r5, [r0, #0]
    4efa:	1209      	asrs	r1, r1, #8
    4efc:	3960      	subs	r1, #96	; 0x60
    4efe:	4630      	mov	r0, r6
    4f00:	fa80 f051 	uqadd8	r0, r0, r1
    4f04:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
    4f08:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4f0c:	2a00      	cmp	r2, #0
    4f0e:	d15e      	bne.n	4fce <fire(LEDStruct&)+0x2de>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4f10:	2b00      	cmp	r3, #0
    4f12:	f000 80d3 	beq.w	50bc <fire(LEDStruct&)+0x3cc>
    4f16:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4f1a:	4690      	mov	r8, r2
    4f1c:	46b9      	mov	r9, r7
    4f1e:	ae05      	add	r6, sp, #20
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
    4f20:	3b01      	subs	r3, #1
    4f22:	ebc8 0503 	rsb	r5, r8, r3
    4f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4f2a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4f2e:	4630      	mov	r0, r6
    4f30:	f006 fe8a 	bl	bc48 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    4f38:	5563      	strb	r3, [r4, r5]
    4f3a:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    4f3c:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f40:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4f44:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4f46:	70ab      	strb	r3, [r5, #2]
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[j] = HeatColor(leds.heat[j]);
		}
	}
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    4f48:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4f4c:	f108 0801 	add.w	r8, r8, #1
    4f50:	4543      	cmp	r3, r8
    4f52:	dce5      	bgt.n	4f20 <fire(LEDStruct&)+0x230>
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    4f54:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    4f58:	b30a      	cbz	r2, 4f9e <fire(LEDStruct&)+0x2ae>
		if (leds.this_dir) {
    4f5a:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    4f5e:	2a00      	cmp	r2, #0
    4f60:	f040 8149 	bne.w	51f6 <fire(LEDStruct&)+0x506>
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4f64:	4690      	mov	r8, r2
    4f66:	2b00      	cmp	r3, #0
    4f68:	f000 818a 	beq.w	5280 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
    4f6c:	eb08 0503 	add.w	r5, r8, r3
    4f70:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    4f74:	4630      	mov	r0, r6
    4f76:	f006 fe67 	bl	bc48 <HeatColor(unsigned char)>
    4f7a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4f7e:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4f82:	54e2      	strb	r2, [r4, r3]
    4f84:	4423      	add	r3, r4
        g = rhs.g;
    4f86:	f89d 1015 	ldrb.w	r1, [sp, #21]
        b = rhs.b;
    4f8a:	f89d 2016 	ldrb.w	r2, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    4f8e:	7059      	strb	r1, [r3, #1]
        b = rhs.b;
    4f90:	709a      	strb	r2, [r3, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4f92:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    4f96:	f108 0801 	add.w	r8, r8, #1
    4f9a:	4543      	cmp	r3, r8
    4f9c:	dce6      	bgt.n	4f6c <fire(LEDStruct&)+0x27c>
    4f9e:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    4fa2:	2a00      	cmp	r2, #0
    4fa4:	d03a      	beq.n	501c <fire(LEDStruct&)+0x32c>
    4fa6:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    4faa:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4fac:	7822      	ldrb	r2, [r4, #0]
    4fae:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    4fb2:	7862      	ldrb	r2, [r4, #1]
    4fb4:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    4fb8:	78a2      	ldrb	r2, [r4, #2]
    4fba:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    4fbe:	3403      	adds	r4, #3
    4fc0:	42a1      	cmp	r1, r4
    4fc2:	f1a3 0303 	sub.w	r3, r3, #3
    4fc6:	d1f1      	bne.n	4fac <fire(LEDStruct&)+0x2bc>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    4fc8:	b007      	add	sp, #28
    4fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4fce:	2b00      	cmp	r3, #0
    4fd0:	f000 8153 	beq.w	527a <fire(LEDStruct&)+0x58a>
    4fd4:	f204 277f 	addw	r7, r4, #639	; 0x27f
    4fd8:	46b9      	mov	r9, r7
    4fda:	4625      	mov	r5, r4
    4fdc:	f04f 0800 	mov.w	r8, #0
    4fe0:	ae05      	add	r6, sp, #20
			leds.led_data[j] = HeatColor(leds.heat[j]);
    4fe2:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    4fe6:	4630      	mov	r0, r6
    4fe8:	f006 fe2e 	bl	bc48 <HeatColor(unsigned char)>
    4fec:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ff0:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    4ff4:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    4ff8:	7029      	strb	r1, [r5, #0]
        g = rhs.g;
    4ffa:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    4ffc:	70ab      	strb	r3, [r5, #2]
		}
	}

	// Step 4.  Map from heat cells to LED colors
	if (leds.this_dir) {
		for (int j = 0; j < leds.heat_length; j++) {
    4ffe:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5002:	f108 0801 	add.w	r8, r8, #1
    5006:	4543      	cmp	r3, r8
    5008:	f105 0503 	add.w	r5, r5, #3
    500c:	dce9      	bgt.n	4fe2 <fire(LEDStruct&)+0x2f2>
    500e:	e7a1      	b.n	4f54 <fire(LEDStruct&)+0x264>
    5010:	1fff8784 	.word	0x1fff8784
    5014:	1fff962d 	.word	0x1fff962d
    5018:	55555556 	.word	0x55555556
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
    501c:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    5020:	2a00      	cmp	r2, #0
    5022:	d056      	beq.n	50d2 <fire(LEDStruct&)+0x3e2>
			for (int j = 0; j < leds.heat_length; j++) {
    5024:	2b00      	cmp	r3, #0
    5026:	d0cf      	beq.n	4fc8 <fire(LEDStruct&)+0x2d8>
    5028:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    502c:	46b9      	mov	r9, r7
    502e:	4625      	mov	r5, r4
    5030:	f04f 0800 	mov.w	r8, #0
    5034:	ae05      	add	r6, sp, #20
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
    5036:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    503a:	4630      	mov	r0, r6
    503c:	f006 fe04 	bl	bc48 <HeatColor(unsigned char)>
    5040:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5044:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5048:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    504c:	f885 11bf 	strb.w	r1, [r5, #447]	; 0x1bf
        g = rhs.g;
    5050:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
        b = rhs.b;
    5054:	f885 31c1 	strb.w	r3, [r5, #449]	; 0x1c1
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    5058:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    505c:	f108 0801 	add.w	r8, r8, #1
    5060:	4543      	cmp	r3, r8
    5062:	f1a5 0503 	sub.w	r5, r5, #3
    5066:	dce6      	bgt.n	5036 <fire(LEDStruct&)+0x346>
		else {
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
    5068:	f894 2319 	ldrb.w	r2, [r4, #793]	; 0x319
    506c:	2a00      	cmp	r2, #0
    506e:	d0ab      	beq.n	4fc8 <fire(LEDStruct&)+0x2d8>
			if (leds.this_dir) {
    5070:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5
    5074:	2a00      	cmp	r2, #0
    5076:	f000 80dd 	beq.w	5234 <fire(LEDStruct&)+0x544>
				for (int j = 0; j < leds.heat_length; j++) {
    507a:	2b00      	cmp	r3, #0
    507c:	d0a4      	beq.n	4fc8 <fire(LEDStruct&)+0x2d8>
    507e:	4625      	mov	r5, r4
    5080:	f04f 0800 	mov.w	r8, #0
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
    5084:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5088:	4630      	mov	r0, r6
    508a:	f006 fddd 	bl	bc48 <HeatColor(unsigned char)>
    508e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5092:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5096:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    509a:	f885 10e1 	strb.w	r1, [r5, #225]	; 0xe1
        g = rhs.g;
    509e:	f885 20e2 	strb.w	r2, [r5, #226]	; 0xe2
        b = rhs.b;
    50a2:	f885 30e3 	strb.w	r3, [r5, #227]	; 0xe3
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
			}
		}
		if (leds.fire_mirror) {
			if (leds.this_dir) {
				for (int j = 0; j < leds.heat_length; j++) {
    50a6:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    50aa:	f108 0801 	add.w	r8, r8, #1
    50ae:	4543      	cmp	r3, r8
    50b0:	f105 0503 	add.w	r5, r5, #3
    50b4:	dce6      	bgt.n	5084 <fire(LEDStruct&)+0x394>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    50b6:	b007      	add	sp, #28
    50b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    50bc:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    50c0:	2b00      	cmp	r3, #0
    50c2:	f040 80dd 	bne.w	5280 <fire(LEDStruct&)+0x590>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    50c6:	f1bc 0f00 	cmp.w	ip, #0
    50ca:	f47f af6c 	bne.w	4fa6 <fire(LEDStruct&)+0x2b6>
    50ce:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    50d2:	2b00      	cmp	r3, #0
    50d4:	f43f af78 	beq.w	4fc8 <fire(LEDStruct&)+0x2d8>
    50d8:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    50dc:	46b9      	mov	r9, r7
    50de:	f04f 0800 	mov.w	r8, #0
    50e2:	ae05      	add	r6, sp, #20
				leds.led_data[ONE_SIDE + leds.fire_offset + j] = HeatColor(leds.heat2[j]);
    50e4:	f894 5317 	ldrb.w	r5, [r4, #791]	; 0x317
    50e8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
    50ec:	354b      	adds	r5, #75	; 0x4b
    50ee:	4445      	add	r5, r8
    50f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    50f4:	4630      	mov	r0, r6
    50f6:	f006 fda7 	bl	bc48 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    50fa:	f89d 3014 	ldrb.w	r3, [sp, #20]
    50fe:	5563      	strb	r3, [r4, r5]
    5100:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5102:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5106:	f89d 2015 	ldrb.w	r2, [sp, #21]
    510a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    510c:	70ab      	strb	r3, [r5, #2]
			for (int j = 0; j < leds.heat_length; j++) {
				leds.led_data[NUM_LEDS - 1 - j] = HeatColor(leds.heat2[j]);
			}
		}
		else {
			for (int j = 0; j < leds.heat_length; j++) {
    510e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5112:	f108 0801 	add.w	r8, r8, #1
    5116:	4543      	cmp	r3, r8
    5118:	dce4      	bgt.n	50e4 <fire(LEDStruct&)+0x3f4>
    511a:	e7a5      	b.n	5068 <fire(LEDStruct&)+0x378>
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
    511c:	4620      	mov	r0, r4
    511e:	f7ff fdad 	bl	4c7c <fire_update(LEDStruct&)>
    5122:	e5f4      	b.n	4d0e <fire(LEDStruct&)+0x1e>
    5124:	882b      	ldrh	r3, [r5, #0]
    5126:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    512a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    512e:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5132:	3119      	adds	r1, #25
    5134:	b289      	uxth	r1, r1
    5136:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    513a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    513e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5142:	3219      	adds	r2, #25
    5144:	b292      	uxth	r2, r2
    5146:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    514a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    514e:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5152:	f10e 0e19 	add.w	lr, lr, #25
    5156:	fa1f fe8e 	uxth.w	lr, lr
    515a:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    515e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    5162:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    5166:	3619      	adds	r6, #25
    5168:	b2b6      	uxth	r6, r6
    516a:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    516e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5172:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5176:	3319      	adds	r3, #25
    5178:	b29b      	uxth	r3, r3
    517a:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    517e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5182:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    5186:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    518a:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    518e:	eb03 2313 	add.w	r3, r3, r3, lsr #8
	}
	LEDDebug(leds);
}

void fire(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    5192:	b2f6      	uxtb	r6, r6
    5194:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5198:	3719      	adds	r7, #25
    519a:	b2db      	uxtb	r3, r3
    519c:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    51a0:	b2bf      	uxth	r7, r7
    51a2:	11b6      	asrs	r6, r6, #6
    51a4:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    51a8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    51ac:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    51b0:	119b      	asrs	r3, r3, #6
    51b2:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    51b6:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    51ba:	333c      	adds	r3, #60	; 0x3c
    51bc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    51c0:	f3c6 1681 	ubfx	r6, r6, #6, #2
    51c4:	fa5f f883 	uxtb.w	r8, r3
    51c8:	fa5f fc8c 	uxtb.w	ip, ip
    51cc:	3601      	adds	r6, #1
    51ce:	f10e 0314 	add.w	r3, lr, #20
    51d2:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    51d6:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    51da:	f8cd c000 	str.w	ip, [sp]
    51de:	f8cd 8004 	str.w	r8, [sp, #4]
    51e2:	9602      	str	r6, [sp, #8]
    51e4:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    51e8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    51ec:	b2db      	uxtb	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    51ee:	802f      	strh	r7, [r5, #0]
    51f0:	f7ff fcda 	bl	4ba8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
    51f4:	e586      	b.n	4d04 <fire(LEDStruct&)+0x14>
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    51f6:	2b00      	cmp	r3, #0
    51f8:	d042      	beq.n	5280 <fire(LEDStruct&)+0x590>
    51fa:	4625      	mov	r5, r4
    51fc:	f04f 0800 	mov.w	r8, #0
				leds.led_data[ONE_SIDE - 1 - j] = HeatColor(leds.heat[j]);
    5200:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5204:	4630      	mov	r0, r6
    5206:	f006 fd1f 	bl	bc48 <HeatColor(unsigned char)>
    520a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    520e:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    5212:	f89d 2015 	ldrb.w	r2, [sp, #21]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5216:	f885 10de 	strb.w	r1, [r5, #222]	; 0xde
        g = rhs.g;
    521a:	f885 20df 	strb.w	r2, [r5, #223]	; 0xdf
        b = rhs.b;
    521e:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		}
	}

	if (leds.fire_mirror) {
		if (leds.this_dir) {
			for (int j = 0; j < leds.heat_length; j++) {
    5222:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5226:	f108 0801 	add.w	r8, r8, #1
    522a:	4543      	cmp	r3, r8
    522c:	f1a5 0503 	sub.w	r5, r5, #3
    5230:	dce6      	bgt.n	5200 <fire(LEDStruct&)+0x510>
    5232:	e6b4      	b.n	4f9e <fire(LEDStruct&)+0x2ae>
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    5234:	4690      	mov	r8, r2
    5236:	2b00      	cmp	r3, #0
    5238:	f43f aec6 	beq.w	4fc8 <fire(LEDStruct&)+0x2d8>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    523c:	334b      	adds	r3, #75	; 0x4b
    523e:	ebc8 0503 	rsb	r5, r8, r3
    5242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5246:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    524a:	4630      	mov	r0, r6
    524c:	f006 fcfc 	bl	bc48 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5250:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5254:	5563      	strb	r3, [r4, r5]
    5256:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5258:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    525c:	f89d 2015 	ldrb.w	r2, [sp, #21]
    5260:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    5262:	70ab      	strb	r3, [r5, #2]
				for (int j = 0; j < leds.heat_length; j++) {
					leds.led_data[ONE_SIDE + j] = HeatColor(leds.heat2[j]);
				}
			}
			else {
				for (int j = 0; j < leds.heat_length; j++) {
    5264:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5268:	f108 0801 	add.w	r8, r8, #1
    526c:	4543      	cmp	r3, r8
    526e:	dce5      	bgt.n	523c <fire(LEDStruct&)+0x54c>
					leds.led_data[ONE_SIDE + leds.heat_length - j] = HeatColor(leds.heat2[j]);
				}
			}
		}
	}
}
    5270:	b007      	add	sp, #28
    5272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5276:	882a      	ldrh	r2, [r5, #0]
    5278:	e5f4      	b.n	4e64 <fire(LEDStruct&)+0x174>
		for (int j = 0; j < leds.heat_length; j++) {
			leds.led_data[leds.heat_length - 1 - j] = HeatColor(leds.heat[j]);
		}
	}

	if (leds.fire_mirror) {
    527a:	f894 3319 	ldrb.w	r3, [r4, #793]	; 0x319
    527e:	b13b      	cbz	r3, 5290 <fire(LEDStruct&)+0x5a0>
				leds.led_data[leds.heat_length + j] = HeatColor(leds.heat[j]);
			}
		}
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5280:	f894 3318 	ldrb.w	r3, [r4, #792]	; 0x318
    5284:	2b00      	cmp	r3, #0
    5286:	f47f ae8e 	bne.w	4fa6 <fire(LEDStruct&)+0x2b6>
    528a:	e69d      	b.n	4fc8 <fire(LEDStruct&)+0x2d8>
    528c:	882a      	ldrh	r2, [r5, #0]
    528e:	e569      	b.n	4d64 <fire(LEDStruct&)+0x74>
    5290:	f1bc 0f00 	cmp.w	ip, #0
    5294:	f47f ae87 	bne.w	4fa6 <fire(LEDStruct&)+0x2b6>
    5298:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    529c:	e6c2      	b.n	5024 <fire(LEDStruct&)+0x334>
    529e:	bf00      	nop

000052a0 <torch(LEDStruct&)>:





void torch(LEDStruct& leds) {
    52a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { fire_init(leds); }
    52a4:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    52a8:	4dd0      	ldr	r5, [pc, #832]	; (55ec <torch(LEDStruct&)+0x34c>)





void torch(LEDStruct& leds) {
    52aa:	b087      	sub	sp, #28
    52ac:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fire_init(leds); }
    52ae:	2b00      	cmp	r3, #0
    52b0:	f000 81da 	beq.w	5668 <torch(LEDStruct&)+0x3c8>
	if (keyboard_update) { fire_update(leds); }
    52b4:	4bce      	ldr	r3, [pc, #824]	; (55f0 <torch(LEDStruct&)+0x350>)
    52b6:	781b      	ldrb	r3, [r3, #0]
    52b8:	2b00      	cmp	r3, #0
    52ba:	f040 8242 	bne.w	5742 <torch(LEDStruct&)+0x4a2>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    52be:	f894 c316 	ldrb.w	ip, [r4, #790]	; 0x316
    52c2:	4663      	mov	r3, ip
    52c4:	f1bc 0f00 	cmp.w	ip, #0
    52c8:	f000 823f 	beq.w	574a <torch(LEDStruct&)+0x4aa>
    52cc:	f894 127e 	ldrb.w	r1, [r4, #638]	; 0x27e
    52d0:	882a      	ldrh	r2, [r5, #0]
    52d2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    52d6:	004f      	lsls	r7, r1, #1
    52d8:	f20c 2e7f 	addw	lr, ip, #639	; 0x27f
    52dc:	fb97 f7fc 	sdiv	r7, r7, ip
    52e0:	3702      	adds	r7, #2
    52e2:	b2ff      	uxtb	r7, r7
    52e4:	44a6      	add	lr, r4
    52e6:	f204 267f 	addw	r6, r4, #639	; 0x27f
    52ea:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    52ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    52f2:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    52f6:	3219      	adds	r2, #25
    52f8:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    52fa:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    52fe:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    5302:	b2c9      	uxtb	r1, r1
    5304:	fb11 f107 	smulbb	r1, r1, r7
    5308:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    530c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    5310:	45b6      	cmp	lr, r6
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
    5312:	7031      	strb	r1, [r6, #0]

void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
	if (keyboard_update) { fire_update(leds); }
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
    5314:	d1e9      	bne.n	52ea <torch(LEDStruct&)+0x4a>
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    5316:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    531a:	802a      	strh	r2, [r5, #0]
    531c:	2e00      	cmp	r6, #0
    531e:	f000 816b 	beq.w	55f8 <torch(LEDStruct&)+0x358>
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5322:	f1ac 0703 	sub.w	r7, ip, #3
    5326:	2f01      	cmp	r7, #1
    5328:	f04f 0901 	mov.w	r9, #1
    532c:	dd1a      	ble.n	5364 <torch(LEDStruct&)+0xc4>
    532e:	f50c 701f 	add.w	r0, ip, #636	; 0x27c
    5332:	f20c 267e 	addw	r6, ip, #638	; 0x27e
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    5336:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 55f4 <torch(LEDStruct&)+0x354>
    533a:	4420      	add	r0, r4
    533c:	4426      	add	r6, r4
    533e:	f504 7e20 	add.w	lr, r4, #640	; 0x280
    5342:	7801      	ldrb	r1, [r0, #0]
    5344:	f810 ad01 	ldrb.w	sl, [r0, #-1]!
    5348:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    534c:	fb88 ba01 	smull	fp, sl, r8, r1
    5350:	ebaa 71e1 	sub.w	r1, sl, r1, asr #31
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5354:	4586      	cmp	lr, r0
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
    5356:	f806 1d01 	strb.w	r1, [r6, #-1]!
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    535a:	d1f2      	bne.n	5342 <torch(LEDStruct&)+0xa2>
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
    535c:	f1b9 0f00 	cmp.w	r9, #0
    5360:	f000 812c 	beq.w	55bc <torch(LEDStruct&)+0x31c>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5364:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    5368:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    536c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5370:	3219      	adds	r2, #25
    5372:	b292      	uxth	r2, r2
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
		}
	}

	// Step 3
	if (random8() < leds.fire_sparking) {
    5374:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    5378:	f894 627c 	ldrb.w	r6, [r4, #636]	; 0x27c
    537c:	802a      	strh	r2, [r5, #0]
    537e:	b2c0      	uxtb	r0, r0
    5380:	4286      	cmp	r6, r0
    5382:	499a      	ldr	r1, [pc, #616]	; (55ec <torch(LEDStruct&)+0x34c>)
    5384:	d928      	bls.n	53d8 <torch(LEDStruct&)+0x138>
    5386:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    538a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    538e:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5392:	3219      	adds	r2, #25
    5394:	b292      	uxth	r2, r2
    5396:	eb02 2642 	add.w	r6, r2, r2, lsl #9
    539a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
    539e:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    53a2:	3619      	adds	r6, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53a4:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53a8:	b2b6      	uxth	r6, r6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53aa:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    53ac:	eb06 2016 	add.w	r0, r6, r6, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    53b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    53b4:	b2c0      	uxtb	r0, r0
		uint8_t y = random8(7);
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
    53b6:	eb04 2222 	add.w	r2, r4, r2, asr #8
    53ba:	eb00 0740 	add.w	r7, r0, r0, lsl #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    53be:	800e      	strh	r6, [r1, #0]
    53c0:	ebc0 1047 	rsb	r0, r0, r7, lsl #5
    53c4:	f892 6280 	ldrb.w	r6, [r2, #640]	; 0x280
    53c8:	1200      	asrs	r0, r0, #8
    53ca:	f1a0 0160 	sub.w	r1, r0, #96	; 0x60
    53ce:	4630      	mov	r0, r6
    53d0:	fa80 f051 	uqadd8	r0, r0, r1
    53d4:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
	}
	if (!leds.fire_sync) {
    53d8:	f1b9 0f00 	cmp.w	r9, #0
    53dc:	d112      	bne.n	5404 <torch(LEDStruct&)+0x164>
    53de:	882a      	ldrh	r2, [r5, #0]
		if (random8() < leds.fire_sparking2) {
    53e0:	f894 627d 	ldrb.w	r6, [r4, #637]	; 0x27d
    53e4:	4981      	ldr	r1, [pc, #516]	; (55ec <torch(LEDStruct&)+0x34c>)
    53e6:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    53ea:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    53ee:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    53f2:	3219      	adds	r2, #25
    53f4:	b292      	uxth	r2, r2
    53f6:	eb02 2012 	add.w	r0, r2, r2, lsr #8
    53fa:	b2c0      	uxtb	r0, r0
    53fc:	4286      	cmp	r6, r0
    53fe:	802a      	strh	r2, [r5, #0]
    5400:	f200 80af 	bhi.w	5562 <torch(LEDStruct&)+0x2c2>
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    5404:	f1bc 0f00 	cmp.w	ip, #0
    5408:	f000 81a4 	beq.w	5754 <torch(LEDStruct&)+0x4b4>
    540c:	f204 277f 	addw	r7, r4, #639	; 0x27f
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5410:	2600      	movs	r6, #0
    5412:	f10d 0914 	add.w	r9, sp, #20
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
    5416:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
    541a:	199d      	adds	r5, r3, r6
    541c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5420:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5424:	4648      	mov	r0, r9
    5426:	f006 fc0f 	bl	bc48 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    542a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    542e:	5563      	strb	r3, [r4, r5]
    5430:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5432:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5436:	f89d 2015 	ldrb.w	r2, [sp, #21]
    543a:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    543c:	70ab      	strb	r3, [r5, #2]
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    543e:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5442:	3601      	adds	r6, #1
    5444:	42b3      	cmp	r3, r6
    5446:	dce6      	bgt.n	5416 <torch(LEDStruct&)+0x176>
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5448:	f894 6318 	ldrb.w	r6, [r4, #792]	; 0x318
    544c:	2e00      	cmp	r6, #0
    544e:	d175      	bne.n	553c <torch(LEDStruct&)+0x29c>
    5450:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5454:	2b00      	cmp	r3, #0
    5456:	f000 8183 	beq.w	5760 <torch(LEDStruct&)+0x4c0>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
    545a:	334a      	adds	r3, #74	; 0x4a
    545c:	1b9d      	subs	r5, r3, r6
    545e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5462:	f817 1f01 	ldrb.w	r1, [r7, #1]!
    5466:	4648      	mov	r0, r9
    5468:	f006 fbee 	bl	bc48 <HeatColor(unsigned char)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    546c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    5470:	5563      	strb	r3, [r4, r5]
    5472:	4425      	add	r5, r4
        g = rhs.g;
        b = rhs.b;
    5474:	f89d 3016 	ldrb.w	r3, [sp, #22]

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    5478:	f89d 2015 	ldrb.w	r2, [sp, #21]
    547c:	706a      	strb	r2, [r5, #1]
        b = rhs.b;
    547e:	70ab      	strb	r3, [r5, #2]
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5480:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    5484:	3601      	adds	r6, #1
    5486:	42b3      	cmp	r3, r6
    5488:	dce7      	bgt.n	545a <torch(LEDStruct&)+0x1ba>
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    548a:	2b4b      	cmp	r3, #75	; 0x4b
    548c:	d047      	beq.n	551e <torch(LEDStruct&)+0x27e>
    548e:	f10d 0914 	add.w	r9, sp, #20
    5492:	f504 7be4 	add.w	fp, r4, #456	; 0x1c8
    5496:	4627      	mov	r7, r4
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5498:	4626      	mov	r6, r4
    549a:	2500      	movs	r5, #0
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    549c:	f04f 0a01 	mov.w	sl, #1
    54a0:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    54a4:	f8cd a000 	str.w	sl, [sp]
    54a8:	ebc5 2805 	rsb	r8, r5, r5, lsl #8
    54ac:	fb98 f3f3 	sdiv	r3, r8, r3
    54b0:	441a      	add	r2, r3
    54b2:	b2d2      	uxtb	r2, r2
    54b4:	23ff      	movs	r3, #255	; 0xff
    54b6:	4659      	mov	r1, fp
    54b8:	4648      	mov	r0, r9
    54ba:	f006 fbe7 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54be:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    54c2:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    54c6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54ca:	7031      	strb	r1, [r6, #0]
        g = rhs.g;
    54cc:	7072      	strb	r2, [r6, #1]
        b = rhs.b;
    54ce:	70b3      	strb	r3, [r6, #2]
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
    54d0:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    54d4:	f894 2316 	ldrb.w	r2, [r4, #790]	; 0x316
    54d8:	fb98 f8f2 	sdiv	r8, r8, r2
    54dc:	eb08 0203 	add.w	r2, r8, r3
    54e0:	b2d2      	uxtb	r2, r2
    54e2:	23ff      	movs	r3, #255	; 0xff
    54e4:	4659      	mov	r1, fp
    54e6:	f8cd a000 	str.w	sl, [sp]
    54ea:	4648      	mov	r0, r9
    54ec:	f006 fbce 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
        g = rhs.g;
    54f0:	f89d 2015 	ldrb.w	r2, [sp, #21]
        b = rhs.b;
    54f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    54f8:	f89d 1014 	ldrb.w	r1, [sp, #20]
        g = rhs.g;
    54fc:	f887 21c0 	strb.w	r2, [r7, #448]	; 0x1c0
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5500:	f887 11bf 	strb.w	r1, [r7, #447]	; 0x1bf
        g = rhs.g;
        b = rhs.b;
    5504:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
			leds.led_data[ONE_SIDE - 1 + leds.heat_length - j] = HeatColor(leds.heat2[j]);
		}
	}

	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
    5508:	f894 3316 	ldrb.w	r3, [r4, #790]	; 0x316
    550c:	3501      	adds	r5, #1
    550e:	f1c3 024b 	rsb	r2, r3, #75	; 0x4b
    5512:	42aa      	cmp	r2, r5
    5514:	f106 0603 	add.w	r6, r6, #3
    5518:	f1a7 0703 	sub.w	r7, r7, #3
    551c:	dcc0      	bgt.n	54a0 <torch(LEDStruct&)+0x200>
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    551e:	f894 31c5 	ldrb.w	r3, [r4, #453]	; 0x1c5
    5522:	2b00      	cmp	r3, #0
    5524:	f040 8096 	bne.w	5654 <torch(LEDStruct&)+0x3b4>
	else			   { leds.torch_index -= leds.torch_diff; }
    5528:	f894 331a 	ldrb.w	r3, [r4, #794]	; 0x31a
    552c:	f894 231b 	ldrb.w	r2, [r4, #795]	; 0x31b
    5530:	1a9b      	subs	r3, r3, r2
    5532:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
}
    5536:	b007      	add	sp, #28
    5538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    553c:	4621      	mov	r1, r4
    553e:	f104 05e1 	add.w	r5, r4, #225	; 0xe1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5542:	4622      	mov	r2, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5544:	7810      	ldrb	r0, [r2, #0]
    5546:	f881 01bf 	strb.w	r0, [r1, #447]	; 0x1bf
        g = rhs.g;
    554a:	7850      	ldrb	r0, [r2, #1]
    554c:	f881 01c0 	strb.w	r0, [r1, #448]	; 0x1c0
        b = rhs.b;
    5550:	7890      	ldrb	r0, [r2, #2]
    5552:	f881 01c1 	strb.w	r0, [r1, #449]	; 0x1c1
    5556:	3203      	adds	r2, #3
    5558:	4295      	cmp	r5, r2
    555a:	f1a1 0103 	sub.w	r1, r1, #3
    555e:	d1f1      	bne.n	5544 <torch(LEDStruct&)+0x2a4>
    5560:	e793      	b.n	548a <torch(LEDStruct&)+0x1ea>
    5562:	eb02 2042 	add.w	r0, r2, r2, lsl #9
    5566:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    556a:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    556e:	3219      	adds	r2, #25
    5570:	b292      	uxth	r2, r2
    5572:	eb02 2542 	add.w	r5, r2, r2, lsl #9
    5576:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    557a:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    557e:	3519      	adds	r5, #25
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5580:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5584:	b2ad      	uxth	r5, r5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5586:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5588:	eb05 2015 	add.w	r0, r5, r5, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    558c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    5590:	b2c0      	uxtb	r0, r0
		leds.heat[y] = qadd8(leds.heat[y], random8(160, 255));
	}
	if (!leds.fire_sync) {
		if (random8() < leds.fire_sparking2) {
			int y = random8(7);
			leds.heat2[y] = qadd8(leds.heat2[y], random8(160, 255));
    5592:	eb04 2222 	add.w	r2, r4, r2, asr #8
    5596:	eb00 0640 	add.w	r6, r0, r0, lsl #1
    559a:	ebc0 1046 	rsb	r0, r0, r6, lsl #5
    559e:	f892 62cb 	ldrb.w	r6, [r2, #715]	; 0x2cb
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    55a2:	800d      	strh	r5, [r1, #0]
    55a4:	1201      	asrs	r1, r0, #8
    55a6:	3960      	subs	r1, #96	; 0x60
    55a8:	4630      	mov	r0, r6
    55aa:	fa80 f051 	uqadd8	r0, r0, r1
    55ae:	f882 02cb 	strb.w	r0, [r2, #715]	; 0x2cb
		}
	}

	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
    55b2:	f1bc 0f00 	cmp.w	ip, #0
    55b6:	f47f af29 	bne.w	540c <torch(LEDStruct&)+0x16c>
    55ba:	e0cf      	b.n	575c <torch(LEDStruct&)+0x4bc>
    55bc:	f20c 26c7 	addw	r6, ip, #711	; 0x2c7
    55c0:	f20c 2ec9 	addw	lr, ip, #713	; 0x2c9
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    55c4:	f8df 802c 	ldr.w	r8, [pc, #44]	; 55f4 <torch(LEDStruct&)+0x354>
    55c8:	4426      	add	r6, r4
    55ca:	44a6      	add	lr, r4
    55cc:	7831      	ldrb	r1, [r6, #0]
    55ce:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
    55d2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    55d6:	fb88 a001 	smull	sl, r0, r8, r1
    55da:	3f01      	subs	r7, #1
    55dc:	eba0 71e1 	sub.w	r1, r0, r1, asr #31
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    55e0:	2f01      	cmp	r7, #1
			leds.heat2[k] = (leds.heat2[k - 1] + leds.heat2[k - 2] + leds.heat2[k - 2]) / 3;
    55e2:	f80e 1d01 	strb.w	r1, [lr, #-1]!
	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
		leds.heat[k] = (leds.heat[k - 1] + leds.heat[k - 2] + leds.heat[k - 2]) / 3;
	}
	if (!leds.fire_sync) {
		for (int k = leds.heat_length - 3; k >= 2; k--) {
    55e6:	d1f1      	bne.n	55cc <torch(LEDStruct&)+0x32c>
    55e8:	e6bc      	b.n	5364 <torch(LEDStruct&)+0xc4>
    55ea:	bf00      	nop
    55ec:	1fff8784 	.word	0x1fff8784
    55f0:	1fff962d 	.word	0x1fff962d
    55f4:	55555556 	.word	0x55555556
    55f8:	f894 127f 	ldrb.w	r1, [r4, #639]	; 0x27f
    55fc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5600:	ea4f 0e41 	mov.w	lr, r1, lsl #1
    5604:	fb9e fefc 	sdiv	lr, lr, ip
    5608:	f10e 0e02 	add.w	lr, lr, #2
    560c:	fa5f fe8e 	uxtb.w	lr, lr
    5610:	f204 27ca 	addw	r7, r4, #714	; 0x2ca
    5614:	eb02 2142 	add.w	r1, r2, r2, lsl #9
    5618:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    561c:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5620:	3219      	adds	r2, #25
    5622:	b292      	uxth	r2, r2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5624:	eb02 2112 	add.w	r1, r2, r2, lsr #8
/// subtract one byte from another, saturating at 0x00
/// @returns i - j with a floor of 0
LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
{
#if QSUB8_C == 1
    int t = i - j;
    5628:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    562c:	b2c9      	uxtb	r1, r1
    562e:	fb11 f10e 	smulbb	r1, r1, lr
    5632:	eba0 2111 	sub.w	r1, r0, r1, lsr #8
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5636:	3601      	adds	r6, #1
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    5638:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    563c:	4566      	cmp	r6, ip
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
    563e:	7039      	strb	r1, [r7, #0]
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
		for (int i = 0; i < leds.heat_length; i++) {
    5640:	dbe8      	blt.n	5614 <torch(LEDStruct&)+0x374>
    5642:	802a      	strh	r2, [r5, #0]
			leds.heat2[i] = qsub8(leds.heat2[i], random8(0, ((leds.fire_cooling2 * 10) / leds.heat_length) + 2));
		}
	}

	// Step 2
	for (int k = leds.heat_length - 3; k >= 2; k--) {
    5644:	f1ac 0703 	sub.w	r7, ip, #3
    5648:	2f01      	cmp	r7, #1
    564a:	f04f 0900 	mov.w	r9, #0
    564e:	f73f ae6e 	bgt.w	532e <torch(LEDStruct&)+0x8e>
    5652:	e687      	b.n	5364 <torch(LEDStruct&)+0xc4>
	// Add pole to torch
	for (int i = 0; i < ONE_SIDE - leds.heat_length; i++) {
		leds.led_data[i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
		leds.led_data[NUM_LEDS - 1 - i] = ColorFromPalette(leds.current_palette, leds.torch_index + i * 255/leds.heat_length);
	}
	if (leds.this_dir) { leds.torch_index += leds.torch_diff; }
    5654:	f894 231a 	ldrb.w	r2, [r4, #794]	; 0x31a
    5658:	f894 331b 	ldrb.w	r3, [r4, #795]	; 0x31b
    565c:	4413      	add	r3, r2
    565e:	f884 331a 	strb.w	r3, [r4, #794]	; 0x31a
	else			   { leds.torch_index -= leds.torch_diff; }
}
    5662:	b007      	add	sp, #28
    5664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5668:	882b      	ldrh	r3, [r5, #0]
    566a:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    566e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5672:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    5676:	3119      	adds	r1, #25
    5678:	b289      	uxth	r1, r1
    567a:	eb01 2241 	add.w	r2, r1, r1, lsl #9
    567e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5682:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5686:	3219      	adds	r2, #25
    5688:	b292      	uxth	r2, r2
    568a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    568e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5692:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5696:	f10e 0e19 	add.w	lr, lr, #25
    569a:	fa1f fe8e 	uxth.w	lr, lr
    569e:	eb0e 264e 	add.w	r6, lr, lr, lsl #9
    56a2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
    56a6:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    56aa:	3619      	adds	r6, #25
    56ac:	b2b6      	uxth	r6, r6
    56ae:	eb06 2346 	add.w	r3, r6, r6, lsl #9
    56b2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    56b6:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    56ba:	3319      	adds	r3, #25
    56bc:	b29b      	uxth	r3, r3
    56be:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    56c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56c6:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    56ca:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56ce:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56d2:	eb03 2313 	add.w	r3, r3, r3, lsr #8




void torch(LEDStruct& leds) {
	if (!leds.mode_initialized) { fire_init(leds); }
    56d6:	b2f6      	uxtb	r6, r6
    56d8:	fa5f fe8e 	uxtb.w	lr, lr
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    56dc:	3719      	adds	r7, #25
    56de:	b2db      	uxtb	r3, r3
    56e0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    56e4:	b2bf      	uxth	r7, r7
    56e6:	11b6      	asrs	r6, r6, #6
    56e8:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
    56ec:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    56f0:	eb0e 0e4c 	add.w	lr, lr, ip, lsl #1
    56f4:	119b      	asrs	r3, r3, #6
    56f6:	f106 0c32 	add.w	ip, r6, #50	; 0x32
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    56fa:	eb07 2617 	add.w	r6, r7, r7, lsr #8
    56fe:	333c      	adds	r3, #60	; 0x3c
    5700:	ea4f 2e2e 	mov.w	lr, lr, asr #8
    5704:	f3c6 1681 	ubfx	r6, r6, #6, #2
    5708:	fa5f fc8c 	uxtb.w	ip, ip
    570c:	fa5f f883 	uxtb.w	r8, r3
    5710:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5714:	f10e 0314 	add.w	r3, lr, #20
    5718:	eb02 2212 	add.w	r2, r2, r2, lsr #8
    571c:	3601      	adds	r6, #1
    571e:	f8cd c000 	str.w	ip, [sp]
    5722:	f8cd 8004 	str.w	r8, [sp, #4]
    5726:	9602      	str	r6, [sp, #8]
    5728:	b2db      	uxtb	r3, r3
    572a:	f3c1 11c0 	ubfx	r1, r1, #7, #1
    572e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5732:	802f      	strh	r7, [r5, #0]
    5734:	f7ff fa38 	bl	4ba8 <fire_init(LEDStruct&, bool, bool, unsigned char, unsigned char, unsigned char, unsigned char)>
	if (keyboard_update) { fire_update(leds); }
    5738:	4b0b      	ldr	r3, [pc, #44]	; (5768 <torch(LEDStruct&)+0x4c8>)
    573a:	781b      	ldrb	r3, [r3, #0]
    573c:	2b00      	cmp	r3, #0
    573e:	f43f adbe 	beq.w	52be <torch(LEDStruct&)+0x1e>
    5742:	4620      	mov	r0, r4
    5744:	f7ff fa9a 	bl	4c7c <fire_update(LEDStruct&)>
    5748:	e5b9      	b.n	52be <torch(LEDStruct&)+0x1e>
	// Step 1
	for (int i = 0; i < leds.heat_length; i++) {
		leds.heat[i] = qsub8(leds.heat[i], random8(0, ((leds.fire_cooling * 10) / leds.heat_length) + 2));
	}
	if (!leds.fire_sync) {
    574a:	f894 2318 	ldrb.w	r2, [r4, #792]	; 0x318
    574e:	b14a      	cbz	r2, 5764 <torch(LEDStruct&)+0x4c4>
    5750:	882a      	ldrh	r2, [r5, #0]
    5752:	e5e6      	b.n	5322 <torch(LEDStruct&)+0x82>
	// Step 4
	for (int j = 0; j < leds.heat_length; j++) {
		leds.led_data[ONE_SIDE - leds.heat_length + j] = HeatColor(leds.heat[j]);
	}

	if (leds.fire_sync) { strip_sync(leds); }
    5754:	f1b9 0f00 	cmp.w	r9, #0
    5758:	f47f aef0 	bne.w	553c <torch(LEDStruct&)+0x29c>
    575c:	f10d 0914 	add.w	r9, sp, #20
	else {
		for (int j = 0; j < leds.heat_length; j++) {
    5760:	2300      	movs	r3, #0
    5762:	e696      	b.n	5492 <torch(LEDStruct&)+0x1f2>
    5764:	882a      	ldrh	r2, [r5, #0]
    5766:	e76d      	b.n	5644 <torch(LEDStruct&)+0x3a4>
    5768:	1fff962d 	.word	0x1fff962d

0000576c <confetti_update(LEDStruct&)>:
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    576c:	4b0e      	ldr	r3, [pc, #56]	; (57a8 <confetti_update(LEDStruct&)+0x3c>)
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    576e:	4a0f      	ldr	r2, [pc, #60]	; (57ac <confetti_update(LEDStruct&)+0x40>)
	switch (update_var) {
    5770:	781b      	ldrb	r3, [r3, #0]
	else					 { leds.strip_range = ONE_SIDE; }
	leds.confetti_fade		= cf;
}

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
    5772:	2100      	movs	r1, #0
    5774:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5776:	b13b      	cbz	r3, 5788 <confetti_update(LEDStruct&)+0x1c>
    5778:	2b01      	cmp	r3, #1
    577a:	d103      	bne.n	5784 <confetti_update(LEDStruct&)+0x18>
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
			else					 { leds.strip_range = ONE_SIDE; }
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
    577c:	4b0c      	ldr	r3, [pc, #48]	; (57b0 <confetti_update(LEDStruct&)+0x44>)
    577e:	881b      	ldrh	r3, [r3, #0]
    5780:	f880 333e 	strb.w	r3, [r0, #830]	; 0x33e
		default: break;
	}
	LEDDebug(leds);
    5784:	f7fc bd42 	b.w	220c <LEDDebug(LEDStruct&)>

void confetti_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:														//a
			leds.use_full_range = (bool)update_arg;
    5788:	4b09      	ldr	r3, [pc, #36]	; (57b0 <confetti_update(LEDStruct&)+0x44>)
    578a:	881b      	ldrh	r3, [r3, #0]
    578c:	2b00      	cmp	r3, #0
    578e:	bf14      	ite	ne
    5790:	2301      	movne	r3, #1
    5792:	2300      	moveq	r3, #0
    5794:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5798:	bf14      	ite	ne
    579a:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    579c:	234b      	moveq	r3, #75	; 0x4b
    579e:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
			break;
		case 1:	leds.confetti_fade = (uint8_t)update_arg;	break; //b
		default: break;
	}
	LEDDebug(leds);
    57a2:	f7fc bd33 	b.w	220c <LEDDebug(LEDStruct&)>
    57a6:	bf00      	nop
    57a8:	1fff9e94 	.word	0x1fff9e94
    57ac:	1fff962d 	.word	0x1fff962d
    57b0:	1fff951e 	.word	0x1fff951e

000057b4 <confetti(LEDStruct&)>:
}

void confetti(LEDStruct& leds)
{
    57b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { confetti_init(leds); }
    57b6:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
    57ba:	4e4b      	ldr	r6, [pc, #300]	; (58e8 <confetti(LEDStruct&)+0x134>)
	}
	LEDDebug(leds);
}

void confetti(LEDStruct& leds)
{
    57bc:	b085      	sub	sp, #20
    57be:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { confetti_init(leds); }
    57c0:	bb8b      	cbnz	r3, 5826 <confetti(LEDStruct&)+0x72>
    57c2:	8833      	ldrh	r3, [r6, #0]
    57c4:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    57c8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    57cc:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    57d0:	3319      	adds	r3, #25
    57d2:	b29b      	uxth	r3, r3
    57d4:	eb03 2143 	add.w	r1, r3, r3, lsl #9
    57d8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    57dc:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    57e0:	3119      	adds	r1, #25
    57e2:	b289      	uxth	r1, r1
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    57e4:	eb01 2211 	add.w	r2, r1, r1, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    57e8:	b2d2      	uxtb	r2, r2
    57ea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    57ee:	1212      	asrs	r2, r2, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    57f0:	eb03 2313 	add.w	r3, r3, r3, lsr #8
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    57f4:	2001      	movs	r0, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    57f6:	3206      	adds	r2, #6
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    57f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
	leds.mode_type			= CONFETTI;
    57fc:	2715      	movs	r7, #21
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    57fe:	250f      	movs	r5, #15
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5800:	8031      	strh	r1, [r6, #0]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5802:	b2d2      	uxtb	r2, r2

	leds.use_full_range		= ufr;
    5804:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
    5808:	f884 022e 	strb.w	r0, [r4, #558]	; 0x22e
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
    580c:	f884 022a 	strb.w	r0, [r4, #554]	; 0x22a
#ifndef CONFETTI_H
#define CONFETTI_H

void confetti_init(LEDStruct& leds, bool ufr = random8(2), uint8_t cf = random8(6,21)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= CONFETTI;
    5810:	f884 722d 	strb.w	r7, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5814:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5818:	2b00      	cmp	r3, #0
    581a:	d15c      	bne.n	58d6 <confetti(LEDStruct&)+0x122>
	else					 { leds.strip_range = ONE_SIDE; }
    581c:	234b      	movs	r3, #75	; 0x4b
    581e:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
	leds.confetti_fade		= cf;
    5822:	f884 233e 	strb.w	r2, [r4, #830]	; 0x33e
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    5826:	4b31      	ldr	r3, [pc, #196]	; (58ec <confetti(LEDStruct&)+0x138>)
    5828:	781b      	ldrb	r3, [r3, #0]
    582a:	2b00      	cmp	r3, #0
    582c:	d157      	bne.n	58de <confetti(LEDStruct&)+0x12a>

	fadeToBlackBy(leds.led_data, NUM_LEDS, leds.confetti_fade);
    582e:	f894 233e 	ldrb.w	r2, [r4, #830]	; 0x33e
    5832:	4620      	mov	r0, r4
    5834:	2196      	movs	r1, #150	; 0x96
    5836:	f006 f9c9 	bl	bbcc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    583a:	8832      	ldrh	r2, [r6, #0]
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    583c:	f8b4 533c 	ldrh.w	r5, [r4, #828]	; 0x33c
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5840:	eb02 2342 	add.w	r3, r2, r2, lsl #9
    5844:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5848:	f502 5358 	add.w	r3, r2, #13824	; 0x3600
    584c:	3319      	adds	r3, #25
    584e:	b29b      	uxth	r3, r3
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5850:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    5854:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    5858:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    585c:	3719      	adds	r7, #25
    585e:	b2bf      	uxth	r7, r7
	int pos = random16(leds.strip_range);
	leds.led_data[pos] += ColorFromPalette(leds.current_palette, random8());
    5860:	eb07 2217 	add.w	r2, r7, r7, lsr #8
/// @param lim the upper bound for the result
LIB8STATIC uint16_t random16( uint16_t lim)
{
    uint16_t r = random16();
    uint32_t p = (uint32_t)lim * (uint32_t)r;
    r = p >> 16;
    5864:	fb03 f305 	mul.w	r3, r3, r5
    5868:	2101      	movs	r1, #1
    586a:	0c1d      	lsrs	r5, r3, #16
    586c:	9100      	str	r1, [sp, #0]
    586e:	a803      	add	r0, sp, #12
    5870:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    5874:	b2d2      	uxtb	r2, r2
    5876:	23ff      	movs	r3, #255	; 0xff
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5878:	8037      	strh	r7, [r6, #0]
    587a:	f006 fa07 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    587e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5882:	18e1      	adds	r1, r4, r3
         "L_%=: "
         : "+a" (i)
         : "a"  (j) );
    return i;
#elif QADD8_ARM_DSP_ASM == 1
    asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
    5884:	5ce2      	ldrb	r2, [r4, r3]
    5886:	f89d 000c 	ldrb.w	r0, [sp, #12]
    588a:	fa82 f250 	uqadd8	r2, r2, r0


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    588e:	54e2      	strb	r2, [r4, r3]
    5890:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5894:	784a      	ldrb	r2, [r1, #1]
    5896:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    589a:	704a      	strb	r2, [r1, #1]
    589c:	788b      	ldrb	r3, [r1, #2]
    589e:	f89d 200e 	ldrb.w	r2, [sp, #14]
    58a2:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    58a6:	708b      	strb	r3, [r1, #2]
	if (!leds.use_full_range) { strip_sync(leds); }
    58a8:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    58ac:	b98b      	cbnz	r3, 58d2 <confetti(LEDStruct&)+0x11e>
    58ae:	4620      	mov	r0, r4
    58b0:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    58b4:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    58b6:	781a      	ldrb	r2, [r3, #0]
    58b8:	f880 21bf 	strb.w	r2, [r0, #447]	; 0x1bf
        g = rhs.g;
    58bc:	785a      	ldrb	r2, [r3, #1]
    58be:	f880 21c0 	strb.w	r2, [r0, #448]	; 0x1c0
        b = rhs.b;
    58c2:	789a      	ldrb	r2, [r3, #2]
    58c4:	f880 21c1 	strb.w	r2, [r0, #449]	; 0x1c1
    58c8:	3303      	adds	r3, #3
    58ca:	428b      	cmp	r3, r1
    58cc:	f1a0 0003 	sub.w	r0, r0, #3
    58d0:	d1f1      	bne.n	58b6 <confetti(LEDStruct&)+0x102>
}
    58d2:	b005      	add	sp, #20
    58d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	leds.mode_type			= CONFETTI;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range		= ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    58d6:	2396      	movs	r3, #150	; 0x96
    58d8:	f8a4 333c 	strh.w	r3, [r4, #828]	; 0x33c
    58dc:	e7a1      	b.n	5822 <confetti(LEDStruct&)+0x6e>
}

void confetti(LEDStruct& leds)
{
	if (!leds.mode_initialized) { confetti_init(leds); }
	if (keyboard_update) { confetti_update(leds); }
    58de:	4620      	mov	r0, r4
    58e0:	f7ff ff44 	bl	576c <confetti_update(LEDStruct&)>
    58e4:	e7a3      	b.n	582e <confetti(LEDStruct&)+0x7a>
    58e6:	bf00      	nop
    58e8:	1fff8784 	.word	0x1fff8784
    58ec:	1fff962d 	.word	0x1fff962d

000058f0 <one_sin_update(LEDStruct&)>:

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
    58f0:	4b24      	ldr	r3, [pc, #144]	; (5984 <one_sin_update(LEDStruct&)+0x94>)
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    58f2:	4a25      	ldr	r2, [pc, #148]	; (5988 <one_sin_update(LEDStruct&)+0x98>)
	switch (update_var) {
    58f4:	781b      	ldrb	r3, [r3, #0]
	leds.sin_start		= 0;

}

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
    58f6:	2100      	movs	r1, #0
    58f8:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    58fa:	2b09      	cmp	r3, #9
    58fc:	d80a      	bhi.n	5914 <one_sin_update(LEDStruct&)+0x24>
    58fe:	e8df f003 	tbb	[pc, r3]
    5902:	1e10      	.short	0x1e10
    5904:	322d2823 	.word	0x322d2823
    5908:	0b3c0537 	.word	0x0b3c0537
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
    590c:	4b1f      	ldr	r3, [pc, #124]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    590e:	881b      	ldrh	r3, [r3, #0]
    5910:	f880 334f 	strb.w	r3, [r0, #847]	; 0x34f
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
		default:	break;
	}
	LEDDebug(leds);
    5914:	f7fc bc7a 	b.w	220c <LEDDebug(LEDStruct&)>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
		case 9:		leds.sin_start		= (uint8_t)update_arg;	break;	//j
    5918:	4b1c      	ldr	r3, [pc, #112]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    591a:	881b      	ldrh	r3, [r3, #0]
    591c:	f880 3345 	strb.w	r3, [r0, #837]	; 0x345
    5920:	e7f8      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>

void one_sin_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:															//a
			leds.use_full_range = (bool)update_arg;
    5922:	4b1a      	ldr	r3, [pc, #104]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    5924:	881b      	ldrh	r3, [r3, #0]
    5926:	2b00      	cmp	r3, #0
    5928:	bf14      	ite	ne
    592a:	2301      	movne	r3, #1
    592c:	2300      	moveq	r3, #0
    592e:	f880 31c4 	strb.w	r3, [r0, #452]	; 0x1c4
			if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5932:	bf14      	ite	ne
    5934:	2396      	movne	r3, #150	; 0x96
			else					 { leds.strip_range = ONE_SIDE; }
    5936:	234b      	moveq	r3, #75	; 0x4b
    5938:	f8a0 333c 	strh.w	r3, [r0, #828]	; 0x33c
    593c:	e7ea      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
			break;
		case 1:		leds.sin_inc		= (uint8_t)update_arg;	break;	//b		
    593e:	4b13      	ldr	r3, [pc, #76]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    5940:	881b      	ldrh	r3, [r3, #0]
    5942:	f880 333f 	strb.w	r3, [r0, #831]	; 0x33f
    5946:	e7e5      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 2:		leds.sin_speed		= (uint8_t)update_arg;	break;	//c
    5948:	4b10      	ldr	r3, [pc, #64]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    594a:	881b      	ldrh	r3, [r3, #0]
    594c:	f880 3340 	strb.w	r3, [r0, #832]	; 0x340
    5950:	e7e0      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 3:		leds.sin_cutoff		= (uint8_t)update_arg;	break;	//d
    5952:	4b0e      	ldr	r3, [pc, #56]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    5954:	881b      	ldrh	r3, [r3, #0]
    5956:	f880 3341 	strb.w	r3, [r0, #833]	; 0x341
    595a:	e7db      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 4:		leds.sin_rot		= (uint8_t)update_arg;	break;	//e
    595c:	4b0b      	ldr	r3, [pc, #44]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    595e:	881b      	ldrh	r3, [r3, #0]
    5960:	f880 3342 	strb.w	r3, [r0, #834]	; 0x342
    5964:	e7d6      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 5:		leds.sin_phase		= (uint8_t)update_arg;	break;	//f
    5966:	4b09      	ldr	r3, [pc, #36]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    5968:	881b      	ldrh	r3, [r3, #0]
    596a:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
    596e:	e7d1      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 6:		leds.sin_all_freq	= (uint8_t)update_arg;	break;	//g
    5970:	4b06      	ldr	r3, [pc, #24]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    5972:	881b      	ldrh	r3, [r3, #0]
    5974:	f880 3343 	strb.w	r3, [r0, #835]	; 0x343
    5978:	e7cc      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
		case 7:		leds.bg_clr			= (uint8_t)update_arg;	break;	//h
		case 8:		leds.bg_bri			= (uint8_t)update_arg;	break;	//i
    597a:	4b04      	ldr	r3, [pc, #16]	; (598c <one_sin_update(LEDStruct&)+0x9c>)
    597c:	881b      	ldrh	r3, [r3, #0]
    597e:	f880 3350 	strb.w	r3, [r0, #848]	; 0x350
    5982:	e7c7      	b.n	5914 <one_sin_update(LEDStruct&)+0x24>
    5984:	1fff9e94 	.word	0x1fff9e94
    5988:	1fff962d 	.word	0x1fff962d
    598c:	1fff951e 	.word	0x1fff951e

00005990 <one_sin(LEDStruct&)>:
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!leds.mode_initialized) { one_sin_init(leds); }
    5994:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
		default:	break;
	}
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
    5998:	b085      	sub	sp, #20
    599a:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { one_sin_init(leds); }
    599c:	2b00      	cmp	r3, #0
    599e:	f040 80be 	bne.w	5b1e <one_sin(LEDStruct&)+0x18e>
    59a2:	f8df c32c 	ldr.w	ip, [pc, #812]	; 5cd0 <one_sin(LEDStruct&)+0x340>
    59a6:	f8bc 3000 	ldrh.w	r3, [ip]
    59aa:	eb03 2643 	add.w	r6, r3, r3, lsl #9
    59ae:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    59b2:	f506 5658 	add.w	r6, r6, #13824	; 0x3600
    59b6:	3619      	adds	r6, #25
    59b8:	b2b6      	uxth	r6, r6
    59ba:	eb06 2146 	add.w	r1, r6, r6, lsl #9
    59be:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    59c2:	f501 5158 	add.w	r1, r1, #13824	; 0x3600
    59c6:	3119      	adds	r1, #25
    59c8:	b289      	uxth	r1, r1
    59ca:	eb01 2541 	add.w	r5, r1, r1, lsl #9
    59ce:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    59d2:	f505 5558 	add.w	r5, r5, #13824	; 0x3600
    59d6:	3519      	adds	r5, #25
    59d8:	b2ad      	uxth	r5, r5
    59da:	eb05 2345 	add.w	r3, r5, r5, lsl #9
    59de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    59e2:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    59e6:	3319      	adds	r3, #25
    59e8:	b29b      	uxth	r3, r3
    59ea:	eb03 2743 	add.w	r7, r3, r3, lsl #9
    59ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    59f2:	f507 5758 	add.w	r7, r7, #13824	; 0x3600
    59f6:	3719      	adds	r7, #25
    59f8:	b2bf      	uxth	r7, r7
    59fa:	eb07 2047 	add.w	r0, r7, r7, lsl #9
    59fe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    5a02:	f500 5058 	add.w	r0, r0, #13824	; 0x3600
    5a06:	3019      	adds	r0, #25
    5a08:	b280      	uxth	r0, r0
    5a0a:	eb00 2240 	add.w	r2, r0, r0, lsl #9
    5a0e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5a12:	f502 5258 	add.w	r2, r2, #13824	; 0x3600
    5a16:	3219      	adds	r2, #25
    5a18:	b292      	uxth	r2, r2
    5a1a:	eb02 2e42 	add.w	lr, r2, r2, lsl #9
    5a1e:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
    5a22:	f50e 5e58 	add.w	lr, lr, #13824	; 0x3600
    5a26:	f10e 0e19 	add.w	lr, lr, #25
    5a2a:	fa1f fe8e 	uxth.w	lr, lr
    5a2e:	eb0e 284e 	add.w	r8, lr, lr, lsl #9
    5a32:	eb0e 0888 	add.w	r8, lr, r8, lsl #2
    5a36:	f508 5858 	add.w	r8, r8, #13824	; 0x3600
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a3a:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5a3e:	eb01 2111 	add.w	r1, r1, r1, lsr #8
    5a42:	eb02 2212 	add.w	r2, r2, r2, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a46:	f108 0819 	add.w	r8, r8, #25
    5a4a:	fa1f f888 	uxth.w	r8, r8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a4e:	b2db      	uxtb	r3, r3
    5a50:	b2c9      	uxtb	r1, r1
    5a52:	b2d2      	uxtb	r2, r2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a54:	eb08 2918 	add.w	r9, r8, r8, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5a5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5a60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5a64:	ea4f 1aa2 	mov.w	sl, r2, asr #6
    5a68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a6c:	fa5f f289 	uxtb.w	r2, r9
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a70:	eb00 2010 	add.w	r0, r0, r0, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a74:	1209      	asrs	r1, r1, #8
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a76:	eb05 2515 	add.w	r5, r5, r5, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a7a:	119b      	asrs	r3, r3, #6
    5a7c:	3101      	adds	r1, #1
    5a7e:	f3c5 1542 	ubfx	r5, r5, #5, #3
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5a86:	eb06 2616 	add.w	r6, r6, r6, lsr #8
    5a8a:	eb07 2717 	add.w	r7, r7, r7, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a8e:	b2c0      	uxtb	r0, r0
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a90:	f103 0964 	add.w	r9, r3, #100	; 0x64
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5a94:	f8ac 8000 	strh.w	r8, [ip]
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5a98:	f10a 0314 	add.w	r3, sl, #20
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5a9c:	f3c6 16c0 	ubfx	r6, r6, #7, #1
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5aa0:	f3c7 1781 	ubfx	r7, r7, #6, #2
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5aa4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5aa8:	eb0e 2e1e 	add.w	lr, lr, lr, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5aac:	fa5f fa81 	uxtb.w	sl, r1
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5ab0:	f04f 0816 	mov.w	r8, #22
    5ab4:	1d69      	adds	r1, r5, #5
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5ab6:	f3c2 1cc7 	ubfx	ip, r2, #7, #8
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5aba:	2501      	movs	r5, #1
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5abc:	220f      	movs	r2, #15

	leds.use_full_range = ufr;
    5abe:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5ac2:	fa5f f989 	uxtb.w	r9, r9
    5ac6:	3701      	adds	r7, #1
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    5ac8:	f3c0 2007 	ubfx	r0, r0, #8, #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5acc:	b2db      	uxtb	r3, r3
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5ace:	fa5f fe8e 	uxtb.w	lr, lr
#ifndef ONE_SIN_H
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
    5ad2:	f884 522e 	strb.w	r5, [r4, #558]	; 0x22e
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
    5ad6:	f884 522a 	strb.w	r5, [r4, #554]	; 0x22a
#define ONE_SIN_H

void one_sin_init(LEDStruct& leds, bool ufr = random8(2), uint8_t si = random8(1,4), uint8_t ss = random8(5,13), uint8_t sc = random8(100,200), 
								uint8_t sr = random8(1,5), uint8_t sp = random8(0,5), uint8_t saf = random8(20,40), uint8_t bc = random8(), uint8_t bb = random8(10)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= ONE_SIN;
    5ada:	f884 822d 	strb.w	r8, [r4, #557]	; 0x22d
	leds.use_palette		= 1;
	leds.delay_time			= 15;
    5ade:	f884 21c3 	strb.w	r2, [r4, #451]	; 0x1c3

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5ae2:	2e00      	cmp	r6, #0
    5ae4:	f040 80e8 	bne.w	5cb8 <one_sin(LEDStruct&)+0x328>
	else { leds.strip_range = ONE_SIDE; }
    5ae8:	224b      	movs	r2, #75	; 0x4b
    5aea:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5aee:	4d76      	ldr	r5, [pc, #472]	; (5cc8 <one_sin(LEDStruct&)+0x338>)

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
    5af0:	f884 a33f 	strb.w	sl, [r4, #831]	; 0x33f
	leds.sin_speed		= ss + (saf/5);
    5af4:	fba5 2503 	umull	r2, r5, r5, r3
    5af8:	eb01 0295 	add.w	r2, r1, r5, lsr #2
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5afc:	2100      	movs	r1, #0
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
	leds.sin_cutoff		= sc;
    5afe:	f884 9341 	strb.w	r9, [r4, #833]	; 0x341
	leds.sin_rot		= sr;
    5b02:	f884 7342 	strb.w	r7, [r4, #834]	; 0x342
	leds.sin_phase		= sp;
    5b06:	f884 0346 	strb.w	r0, [r4, #838]	; 0x346
	leds.sin_all_freq	= saf;
    5b0a:	f884 3343 	strb.w	r3, [r4, #835]	; 0x343
	leds.bg_clr			= bc;
    5b0e:	f884 e34f 	strb.w	lr, [r4, #847]	; 0x34f
	leds.bg_bri			= bb;
    5b12:	f884 c350 	strb.w	ip, [r4, #848]	; 0x350
	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
	else { leds.strip_range = ONE_SIDE; }

	leds.sin_inc		= si;
	leds.sin_speed		= ss + (saf/5);
    5b16:	f884 2340 	strb.w	r2, [r4, #832]	; 0x340
	leds.sin_rot		= sr;
	leds.sin_phase		= sp;
	leds.sin_all_freq	= saf;
	leds.bg_clr			= bc;
	leds.bg_bri			= bb;
	leds.sin_start		= 0;
    5b1a:	f884 1345 	strb.w	r1, [r4, #837]	; 0x345
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5b1e:	4b6b      	ldr	r3, [pc, #428]	; (5ccc <one_sin(LEDStruct&)+0x33c>)
    5b20:	781b      	ldrb	r3, [r3, #0]
    5b22:	2b00      	cmp	r3, #0
    5b24:	f040 80cc 	bne.w	5cc0 <one_sin(LEDStruct&)+0x330>

	leds.sin_start += leds.sin_inc;
    5b28:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
    5b2c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
    5b30:	f894 21c5 	ldrb.w	r2, [r4, #453]	; 0x1c5

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }

	leds.sin_start += leds.sin_inc;
    5b34:	440b      	add	r3, r1
    5b36:	b2db      	uxtb	r3, r3
    5b38:	f884 3345 	strb.w	r3, [r4, #837]	; 0x345
	leds.sin_index = leds.sin_start;
    5b3c:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
	if (leds.this_dir) {
    5b40:	2a00      	cmp	r2, #0
    5b42:	f000 80b1 	beq.w	5ca8 <one_sin(LEDStruct&)+0x318>
		leds.sin_phase += leds.sin_speed;
    5b46:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5b4a:	f894 3340 	ldrb.w	r3, [r4, #832]	; 0x340
    5b4e:	4413      	add	r3, r2
    5b50:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5b54:	f8b4 333c 	ldrh.w	r3, [r4, #828]	; 0x33c
    5b58:	2b00      	cmp	r3, #0
    5b5a:	f000 808e 	beq.w	5c7a <one_sin(LEDStruct&)+0x2ea>
    5b5e:	f504 79e4 	add.w	r9, r4, #456	; 0x1c8
    5b62:	4625      	mov	r5, r4
    5b64:	1c67      	adds	r7, r4, #1
    5b66:	2600      	movs	r6, #0

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5b68:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5b6c:	e05c      	b.n	5c28 <one_sin(LEDStruct&)+0x298>
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5b6e:	2900      	cmp	r1, #0
        in = 255 - in;
    5b70:	bfbc      	itt	lt
    5b72:	43d2      	mvnlt	r2, r2
    5b74:	b2d2      	uxtblt	r2, r2
/// then explicitly call cleanup_R1.
LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
    5b76:	0052      	lsls	r2, r2, #1
    5b78:	b2d2      	uxtb	r2, r2
    5b7a:	1c53      	adds	r3, r2, #1
    5b7c:	fb03 f202 	mul.w	r2, r3, r2
    5b80:	1212      	asrs	r2, r2, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5b82:	fb02 f303 	mul.w	r3, r2, r3
    5b86:	121b      	asrs	r3, r3, #8
    5b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5b8c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
    5b90:	b292      	uxth	r2, r2
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5b92:	05d3      	lsls	r3, r2, #23
    5b94:	bf54      	ite	pl
    5b96:	fa5f fb82 	uxtbpl.w	fp, r2
    5b9a:	f04f 0bff 	movmi.w	fp, #255	; 0xff
    5b9e:	ebc0 0b0b 	rsb	fp, r0, fp
    5ba2:	fa5f fb8b 	uxtb.w	fp, fp
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
    5ba6:	f894 2350 	ldrb.w	r2, [r4, #848]	; 0x350
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5baa:	f894 334f 	ldrb.w	r3, [r4, #847]	; 0x34f
    5bae:	f88d 200e 	strb.w	r2, [sp, #14]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5bb2:	4629      	mov	r1, r5
    5bb4:	a803      	add	r0, sp, #12
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5bb6:	f88d 300c 	strb.w	r3, [sp, #12]
    5bba:	f88d 800d 	strb.w	r8, [sp, #13]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5bbe:	f006 fa63 	bl	c088 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
    5bc2:	f894 3344 	ldrb.w	r3, [r4, #836]	; 0x344
    5bc6:	f894 233f 	ldrb.w	r2, [r4, #831]	; 0x33f
    5bca:	f894 1228 	ldrb.w	r1, [r4, #552]	; 0x228
    5bce:	9100      	str	r1, [sp, #0]
    5bd0:	fb02 320a 	mla	r2, r2, sl, r3
    5bd4:	b2d2      	uxtb	r2, r2
    5bd6:	465b      	mov	r3, fp
    5bd8:	4649      	mov	r1, r9
    5bda:	a803      	add	r0, sp, #12
    5bdc:	f006 f856 	bl	bc8c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    5be0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    5be4:	f89d 200c 	ldrb.w	r2, [sp, #12]
    5be8:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    5bec:	f807 3c01 	strb.w	r3, [r7, #-1]
    5bf0:	786a      	ldrb	r2, [r5, #1]
    5bf2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    5bf6:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    5bfa:	706a      	strb	r2, [r5, #1]
    5bfc:	78ab      	ldrb	r3, [r5, #2]
    5bfe:	f89d 200e 	ldrb.w	r2, [sp, #14]
    5c02:	fa83 f352 	uqadd8	r3, r3, r2
        b = qadd8( b, rhs.b);
    5c06:	70ab      	strb	r3, [r5, #2]
		leds.sin_index += leds.sin_rot;
    5c08:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
    5c0c:	f894 3342 	ldrb.w	r3, [r4, #834]	; 0x342
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5c10:	f8b4 233c 	ldrh.w	r2, [r4, #828]	; 0x33c
    5c14:	3601      	adds	r6, #1
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5c16:	440b      	add	r3, r1
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5c18:	42b2      	cmp	r2, r6
    5c1a:	f105 0503 	add.w	r5, r5, #3
    5c1e:	f107 0703 	add.w	r7, r7, #3
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
    5c22:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
	}
	for (int k = 0; k < leds.strip_range; k++) {
    5c26:	dd28      	ble.n	5c7a <one_sin(LEDStruct&)+0x2ea>
		int sin_bright = qsuba(cubicwave8((k * leds.sin_all_freq) + leds.sin_phase), leds.sin_cutoff);
    5c28:	f894 3343 	ldrb.w	r3, [r4, #835]	; 0x343
    5c2c:	f894 2346 	ldrb.w	r2, [r4, #838]	; 0x346
    5c30:	fa5f fa86 	uxtb.w	sl, r6
    5c34:	fb03 220a 	mla	r2, r3, sl, r2
    5c38:	b2d2      	uxtb	r2, r2
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5c3a:	b251      	sxtb	r1, r2
    5c3c:	2900      	cmp	r1, #0
        in = 255 - in;
    5c3e:	bfba      	itte	lt
    5c40:	43d3      	mvnlt	r3, r2
    5c42:	b2db      	uxtblt	r3, r3
///
/// On AVR this function takes just three cycles.
///
LIB8STATIC uint8_t triwave8(uint8_t in)
{
    if( in & 0x80) {
    5c44:	4613      	movge	r3, r2
    5c46:	005b      	lsls	r3, r3, #1
    5c48:	b2db      	uxtb	r3, r3
    5c4a:	1c58      	adds	r0, r3, #1
    5c4c:	fb00 f303 	mul.w	r3, r0, r3
    5c50:	121b      	asrs	r3, r3, #8
LIB8STATIC fract8 ease8InOutCubic( fract8 i)
{
    uint8_t ii  = scale8_LEAVING_R1_DIRTY(  i, i);
    uint8_t iii = scale8_LEAVING_R1_DIRTY( ii, i);

    uint16_t r1 = (3 * (uint16_t)(ii)) - ( 2 * (uint16_t)(iii));
    5c52:	fb03 f000 	mul.w	r0, r3, r0
    5c56:	1200      	asrs	r0, r0, #8
    5c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5c5c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    5c60:	b29b      	uxth	r3, r3
       cleanup_R1(); */

    uint8_t result = r1;

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
    5c62:	05d8      	lsls	r0, r3, #23
    5c64:	f894 0341 	ldrb.w	r0, [r4, #833]	; 0x341

    /* the code generated for the above *'s automatically
       cleans up R1, so there's no need to explicitily call
       cleanup_R1(); */

    uint8_t result = r1;
    5c68:	bf54      	ite	pl
    5c6a:	b2db      	uxtbpl	r3, r3

    // if we got "256", return 255:
    if( r1 & 0x100 ) {
        result = 255;
    5c6c:	23ff      	movmi	r3, #255	; 0xff
    5c6e:	4298      	cmp	r0, r3
    5c70:	f4ff af7d 	bcc.w	5b6e <one_sin(LEDStruct&)+0x1de>
    5c74:	f04f 0b00 	mov.w	fp, #0
    5c78:	e795      	b.n	5ba6 <one_sin(LEDStruct&)+0x216>
		leds.led_data[k] = CHSV(leds.bg_clr, 255, leds.bg_bri);
		leds.led_data[k] += ColorFromPalette(leds.current_palette, leds.sin_index + k * leds.sin_inc, sin_bright, leds. current_blending);
		leds.sin_index += leds.sin_rot;
	}

	if (!leds.use_full_range) { strip_sync(leds); }
    5c7a:	f894 31c4 	ldrb.w	r3, [r4, #452]	; 0x1c4
    5c7e:	b983      	cbnz	r3, 5ca2 <one_sin(LEDStruct&)+0x312>
    5c80:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
    5c84:	4623      	mov	r3, r4
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5c86:	7822      	ldrb	r2, [r4, #0]
    5c88:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
        g = rhs.g;
    5c8c:	7862      	ldrb	r2, [r4, #1]
    5c8e:	f883 21c0 	strb.w	r2, [r3, #448]	; 0x1c0
        b = rhs.b;
    5c92:	78a2      	ldrb	r2, [r4, #2]
    5c94:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
    5c98:	3403      	adds	r4, #3
    5c9a:	42a1      	cmp	r1, r4
    5c9c:	f1a3 0303 	sub.w	r3, r3, #3
    5ca0:	d1f1      	bne.n	5c86 <one_sin(LEDStruct&)+0x2f6>
}
    5ca2:	b005      	add	sp, #20
    5ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	leds.sin_index = leds.sin_start;
	if (leds.this_dir) {
		leds.sin_phase += leds.sin_speed;
	}
	else {
		leds.sin_phase -= leds.sin_speed;
    5ca8:	f894 3346 	ldrb.w	r3, [r4, #838]	; 0x346
    5cac:	f894 2340 	ldrb.w	r2, [r4, #832]	; 0x340
    5cb0:	1a9b      	subs	r3, r3, r2
    5cb2:	f884 3346 	strb.w	r3, [r4, #838]	; 0x346
    5cb6:	e74d      	b.n	5b54 <one_sin(LEDStruct&)+0x1c4>
	leds.mode_type			= ONE_SIN;
	leds.use_palette		= 1;
	leds.delay_time			= 15;

	leds.use_full_range = ufr;
	if (leds.use_full_range) { leds.strip_range = NUM_LEDS; }
    5cb8:	2296      	movs	r2, #150	; 0x96
    5cba:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
    5cbe:	e716      	b.n	5aee <one_sin(LEDStruct&)+0x15e>
	LEDDebug(leds);
}

void one_sin(LEDStruct& leds) {
	if (!leds.mode_initialized) { one_sin_init(leds); }
	if (keyboard_update) { one_sin_update(leds); }
    5cc0:	4620      	mov	r0, r4
    5cc2:	f7ff fe15 	bl	58f0 <one_sin_update(LEDStruct&)>
    5cc6:	e72f      	b.n	5b28 <one_sin(LEDStruct&)+0x198>
    5cc8:	cccccccd 	.word	0xcccccccd
    5ccc:	1fff962d 	.word	0x1fff962d
    5cd0:	1fff8784 	.word	0x1fff8784

00005cd4 <fireworks_update(LEDStruct&)>:

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    5cd4:	b510      	push	{r4, lr}
	keyboard_update = 0;
	switch (update_var) {
    5cd6:	4b0f      	ldr	r3, [pc, #60]	; (5d14 <fireworks_update(LEDStruct&)+0x40>)
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5cd8:	4a0f      	ldr	r2, [pc, #60]	; (5d18 <fireworks_update(LEDStruct&)+0x44>)
	switch (update_var) {
    5cda:	781b      	ldrb	r3, [r3, #0]
	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
    5cdc:	2100      	movs	r1, #0

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
}

void fireworks_update(LEDStruct& leds) {
    5cde:	b082      	sub	sp, #8
    5ce0:	4604      	mov	r4, r0
	keyboard_update = 0;
    5ce2:	7011      	strb	r1, [r2, #0]
	switch (update_var) {
    5ce4:	b98b      	cbnz	r3, 5d0a <fireworks_update(LEDStruct&)+0x36>
		case 0:	leds.use_overlay = (bool)update_arg;	
    5ce6:	4a0d      	ldr	r2, [pc, #52]	; (5d1c <fireworks_update(LEDStruct&)+0x48>)
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    5ce8:	480d      	ldr	r0, [pc, #52]	; (5d20 <fireworks_update(LEDStruct&)+0x4c>)
}

void fireworks_update(LEDStruct& leds) {
	keyboard_update = 0;
	switch (update_var) {
		case 0:	leds.use_overlay = (bool)update_arg;	
    5cea:	8812      	ldrh	r2, [r2, #0]
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5cec:	f88d 3004 	strb.w	r3, [sp, #4]
    5cf0:	1a52      	subs	r2, r2, r1
    5cf2:	bf18      	it	ne
    5cf4:	2201      	movne	r2, #1
    5cf6:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
			fill_solid(curr_over_leds.led_data, NUM_LEDS, CRGB::Black);
    5cfa:	2196      	movs	r1, #150	; 0x96
    5cfc:	aa01      	add	r2, sp, #4
    5cfe:	f88d 3005 	strb.w	r3, [sp, #5]
    5d02:	f88d 3006 	strb.w	r3, [sp, #6]
    5d06:	f005 fe9f 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
			break; //a
		default:	break;
	}
	LEDDebug(leds);
    5d0a:	4620      	mov	r0, r4
    5d0c:	f7fc fa7e 	bl	220c <LEDDebug(LEDStruct&)>
}
    5d10:	b002      	add	sp, #8
    5d12:	bd10      	pop	{r4, pc}
    5d14:	1fff9e94 	.word	0x1fff9e94
    5d18:	1fff962d 	.word	0x1fff962d
    5d1c:	1fff951e 	.word	0x1fff951e
    5d20:	1fff9634 	.word	0x1fff9634

00005d24 <prepare_for_explosion(LEDStruct&)>:

void prepare_for_explosion(LEDStruct& leds) {
    5d24:	b570      	push	{r4, r5, r6, lr}
    5d26:	4604      	mov	r4, r0
    5d28:	b082      	sub	sp, #8
}

/// Add entropy into the random number generator
LIB8STATIC void random16_add_entropy( uint16_t entropy)
{
    rand16seed += entropy;
    5d2a:	4d1b      	ldr	r5, [pc, #108]	; (5d98 <prepare_for_explosion(LEDStruct&)+0x74>)
	random16_add_entropy(analogRead(2));
    5d2c:	2002      	movs	r0, #2
    5d2e:	f006 fe19 	bl	c964 <analogRead>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d32:	882b      	ldrh	r3, [r5, #0]
    5d34:	4418      	add	r0, r3
    5d36:	eb00 2340 	add.w	r3, r0, r0, lsl #9
    5d3a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5d3e:	f243 6319 	movw	r3, #13849	; 0x3619
    5d42:	4418      	add	r0, r3
    5d44:	b280      	uxth	r0, r0
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5d46:	eb00 2210 	add.w	r2, r0, r0, lsr #8
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5d4a:	eb00 2140 	add.w	r1, r0, r0, lsl #9
    5d4e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5d52:	b2d2      	uxtb	r2, r2
    5d54:	4403      	add	r3, r0
    5d56:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5d5a:	b29b      	uxth	r3, r3
    5d5c:	1192      	asrs	r2, r2, #6
	leds.current_stage = FADEUP;
    5d5e:	2600      	movs	r6, #0
	leds.firework_hue = random8();
    5d60:	eb03 2113 	add.w	r1, r3, r3, lsr #8
	LEDDebug(leds);
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
    5d64:	321b      	adds	r2, #27
    5d66:	f884 2351 	strb.w	r2, [r4, #849]	; 0x351
	leds.current_stage = FADEUP;
	leds.firework_hue = random8();
    5d6a:	f884 1352 	strb.w	r1, [r4, #850]	; 0x352
}

void prepare_for_explosion(LEDStruct& leds) {
	random16_add_entropy(analogRead(2));
	leds.firework_position = random8(ONE_SIDE / 2 - 10, ONE_SIDE / 2 + 10);
	leds.current_stage = FADEUP;
    5d6e:	f884 6354 	strb.w	r6, [r4, #852]	; 0x354
	leds.firework_hue = random8();
	leds.firework_bri = 0;
    5d72:	f884 6353 	strb.w	r6, [r4, #851]	; 0x353
	leds.exploded = false;
    5d76:	f884 635c 	strb.w	r6, [r4, #860]	; 0x35c
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    5d7a:	4620      	mov	r0, r4
    5d7c:	aa01      	add	r2, sp, #4
    5d7e:	2196      	movs	r1, #150	; 0x96
    5d80:	802b      	strh	r3, [r5, #0]
    5d82:	f88d 6004 	strb.w	r6, [sp, #4]
    5d86:	f88d 6005 	strb.w	r6, [sp, #5]
    5d8a:	f88d 6006 	strb.w	r6, [sp, #6]
    5d8e:	f005 fe5b 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
}
    5d92:	b002      	add	sp, #8
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	bf00      	nop
    5d98:	1fff8784 	.word	0x1fff8784

00005d9c <fadeup(LEDStruct&)>:

void fadeup(LEDStruct& leds) {
    5d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (leds.exploded) {
    5da0:	f890 335c 	ldrb.w	r3, [r0, #860]	; 0x35c
	leds.firework_bri = 0;
	leds.exploded = false;
	fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
}

void fadeup(LEDStruct& leds) {
    5da4:	b087      	sub	sp, #28
    5da6:	9002      	str	r0, [sp, #8]
	if (leds.exploded) {
    5da8:	2b00      	cmp	r3, #0
    5daa:	f000 8089 	beq.w	5ec0 <fadeup(LEDStruct&)+0x124>
    5dae:	f890 3351 	ldrb.w	r3, [r0, #849]	; 0x351
    5db2:	9303      	str	r3, [sp, #12]
    5db4:	4606      	mov	r6, r0
    5db6:	4618      	mov	r0, r3
    5db8:	4b5d      	ldr	r3, [pc, #372]	; (5f30 <fadeup(LEDStruct&)+0x194>)
    5dba:	881b      	ldrh	r3, [r3, #0]
    5dbc:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5dc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5dc4:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5dc8:	3419      	adds	r4, #25
    5dca:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5dcc:	eb04 2314 	add.w	r3, r4, r4, lsr #8
/// @param min the lower bound for the random number
/// @param lim the upper bound for the random number
LIB8STATIC uint8_t random8(uint8_t min, uint8_t lim)
{
    uint8_t delta = lim - min;
    uint8_t r = random8(delta) + min;
    5dd0:	b2db      	uxtb	r3, r3
    5dd2:	eb03 0983 	add.w	r9, r3, r3, lsl #2
    5dd6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
    5dda:	ea4f 2929 	mov.w	r9, r9, asr #8
    5dde:	f109 0914 	add.w	r9, r9, #20
		leds.current_stage = EXPLOSION;
    5de2:	2301      	movs	r3, #1
    5de4:	fa5f f989 	uxtb.w	r9, r9
    5de8:	f886 3354 	strb.w	r3, [r6, #852]	; 0x354
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5dec:	f886 935d 	strb.w	r9, [r6, #861]	; 0x35d
    5df0:	f009 f94e 	bl	f090 <__aeabi_ui2f>
    5df4:	f506 7b57 	add.w	fp, r6, #860	; 0x35c
    5df8:	f506 6aaf 	add.w	sl, r6, #1400	; 0x578
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5dfc:	465b      	mov	r3, fp
    5dfe:	f206 484c 	addw	r8, r6, #1100	; 0x44c
    5e02:	f206 573f 	addw	r7, r6, #1343	; 0x53f
    5e06:	46d3      	mov	fp, sl
    5e08:	9001      	str	r0, [sp, #4]
    5e0a:	f506 66cd 	add.w	r6, r6, #1640	; 0x668
}

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
    5e0e:	2500      	movs	r5, #0
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5e10:	469a      	mov	sl, r3
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5e12:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5e16:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5e1a:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5e1e:	3419      	adds	r4, #25
    5e20:	b2a4      	uxth	r4, r4
    5e22:	2373      	movs	r3, #115	; 0x73
    5e24:	fb03 f004 	mul.w	r0, r3, r4
    5e28:	0c00      	lsrs	r0, r0, #16
void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
    5e2a:	9b01      	ldr	r3, [sp, #4]
    5e2c:	f84a 3f04 	str.w	r3, [sl, #4]!
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5e30:	300a      	adds	r0, #10
    5e32:	b280      	uxth	r0, r0
    5e34:	f009 f92c 	bl	f090 <__aeabi_ui2f>
    5e38:	493e      	ldr	r1, [pc, #248]	; (5f34 <fadeup(LEDStruct&)+0x198>)
    5e3a:	f009 fa35 	bl	f2a8 <__aeabi_fdiv>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    5e3e:	eb04 2344 	add.w	r3, r4, r4, lsl #9
    5e42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    5e46:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    5e4a:	3319      	adds	r3, #25
    5e4c:	b29b      	uxth	r3, r3
    5e4e:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    5e52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    5e56:	f504 5458 	add.w	r4, r4, #13824	; 0x3600
    5e5a:	3419      	adds	r4, #25
    5e5c:	b2a4      	uxth	r4, r4
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    5e5e:	eb04 2114 	add.w	r1, r4, r4, lsr #8
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5e62:	b2c9      	uxtb	r1, r1
    5e64:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5e68:	eb03 2313 	add.w	r3, r3, r3, lsr #8
    5e6c:	1209      	asrs	r1, r1, #8
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
    5e6e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			leds.spark_fade[i] = random8(10, 15);
    5e72:	310a      	adds	r1, #10
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
    5e74:	f848 0f04 	str.w	r0, [r8, #4]!
			leds.spark_dir[i] = random8(0, 2);
    5e78:	f807 3f01 	strb.w	r3, [r7, #1]!
			leds.spark_fade[i] = random8(10, 15);
    5e7c:	b2c8      	uxtb	r0, r1
    5e7e:	f009 f907 	bl	f090 <__aeabi_ui2f>
    5e82:	3501      	adds	r5, #1

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e84:	b2eb      	uxtb	r3, r5
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5e86:	4a2c      	ldr	r2, [pc, #176]	; (5f38 <fadeup(LEDStruct&)+0x19c>)
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
    5e88:	f84b 0f04 	str.w	r0, [fp, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e8c:	4599      	cmp	r9, r3
			leds.spark_pos[i] = (float)leds.firework_position;
			leds.spark_vel[i] = (float)(random16(10, 125)) / 100;
			leds.spark_dir[i] = random8(0, 2);
			leds.spark_fade[i] = random8(10, 15);
			leds.spark_bri[i] = 255;
    5e8e:	f846 2f04 	str.w	r2, [r6, #4]!

void fadeup(LEDStruct& leds) {
	if (leds.exploded) {
		leds.current_stage = EXPLOSION;
		leds.number_of_sparks = random8(MIN_NUMBER_OF_SPARKS, MAX_NUMBER_OF_SPARKS + 1);
		for (uint8_t i = 0; i < leds.number_of_sparks; i++) {
    5e92:	d8be      	bhi.n	5e12 <fadeup(LEDStruct&)+0x76>
    5e94:	9a03      	ldr	r2, [sp, #12]
    5e96:	9e02      	ldr	r6, [sp, #8]
    5e98:	4f25      	ldr	r7, [pc, #148]	; (5f30 <fadeup(LEDStruct&)+0x194>)
    5e9a:	f1c2 0195 	rsb	r1, r2, #149	; 0x95
    5e9e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5ea2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5ea6:	18f5      	adds	r5, r6, r3
    5ea8:	1870      	adds	r0, r6, r1
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5eaa:	22ff      	movs	r2, #255	; 0xff
    5eac:	803c      	strh	r4, [r7, #0]
    5eae:	54f2      	strb	r2, [r6, r3]
        g = (colorcode >>  8) & 0xFF;
    5eb0:	706a      	strb	r2, [r5, #1]
        b = (colorcode >>  0) & 0xFF;
    5eb2:	70aa      	strb	r2, [r5, #2]
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5eb4:	5472      	strb	r2, [r6, r1]
        g = (colorcode >>  8) & 0xFF;
    5eb6:	7042      	strb	r2, [r0, #1]
        b = (colorcode >>  0) & 0xFF;
    5eb8:	7082      	strb	r2, [r0, #2]
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
		if (leds.firework_bri >= 255) {
			leds.exploded = true;
		}
	}
}
    5eba:	b007      	add	sp, #28
    5ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5ec0:	9d02      	ldr	r5, [sp, #8]
    5ec2:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5ec6:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5eca:	f895 2352 	ldrb.w	r2, [r5, #850]	; 0x352
    5ece:	f88d 2014 	strb.w	r2, [sp, #20]
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5ed2:	3305      	adds	r3, #5
    5ed4:	b2db      	uxtb	r3, r3
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5ed6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
		}
		leds.led_data[leds.firework_position]				 = CRGB::White;
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CRGB::White;
	}
	else {
		leds.firework_bri += 5;
    5eda:	f885 3353 	strb.w	r3, [r5, #851]	; 0x353
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5ede:	4429      	add	r1, r5
    5ee0:	a805      	add	r0, sp, #20
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5ee2:	24ff      	movs	r4, #255	; 0xff
    5ee4:	f88d 3016 	strb.w	r3, [sp, #22]
    5ee8:	f88d 4015 	strb.w	r4, [sp, #21]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5eec:	f006 f8cc 	bl	c088 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		leds.led_data[leds.firework_position]				 = CHSV(leds.firework_hue, 255, leds.firework_bri);
		leds.led_data[NUM_LEDS - 1 - leds.firework_position] = CHSV(leds.firework_hue, 255, leds.firework_bri);
    5ef0:	f895 1351 	ldrb.w	r1, [r5, #849]	; 0x351
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5ef4:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5ef8:	f895 2353 	ldrb.w	r2, [r5, #851]	; 0x353
    5efc:	f88d 3014 	strb.w	r3, [sp, #20]
    5f00:	f1c1 0195 	rsb	r1, r1, #149	; 0x95
    5f04:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5f08:	a805      	add	r0, sp, #20
    5f0a:	4429      	add	r1, r5
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5f0c:	f88d 4015 	strb.w	r4, [sp, #21]
    5f10:	f88d 2016 	strb.w	r2, [sp, #22]
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5f14:	f006 f8b8 	bl	c088 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
		if (leds.firework_bri >= 255) {
    5f18:	f895 3353 	ldrb.w	r3, [r5, #851]	; 0x353
    5f1c:	2bff      	cmp	r3, #255	; 0xff
    5f1e:	d1cc      	bne.n	5eba <fadeup(LEDStruct&)+0x11e>
			leds.exploded = true;
    5f20:	9a02      	ldr	r2, [sp, #8]
    5f22:	2301      	movs	r3, #1
    5f24:	f882 335c 	strb.w	r3, [r2, #860]	; 0x35c
		}
	}
}
    5f28:	b007      	add	sp, #28
    5f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f2e:	bf00      	nop
    5f30:	1fff8784 	.word	0x1fff8784
    5f34:	42c80000 	.word	0x42c80000
    5f38:	437f0000 	.word	0x437f0000

00005f3c <explosion(LEDStruct&)>:

void explosion(LEDStruct& leds) {
    5f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5f40:	4b65      	ldr	r3, [pc, #404]	; (60d8 <explosion(LEDStruct&)+0x19c>)
			leds.exploded = true;
		}
	}
}

void explosion(LEDStruct& leds) {
    5f42:	4605      	mov	r5, r0
    5f44:	b082      	sub	sp, #8
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
    5f46:	781a      	ldrb	r2, [r3, #0]
    5f48:	2196      	movs	r1, #150	; 0x96
    5f4a:	f005 fe3f 	bl	bbcc <fadeToBlackBy(CRGB*, unsigned short, unsigned char)>
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5f4e:	f895 435d 	ldrb.w	r4, [r5, #861]	; 0x35d
	}
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
    5f52:	2600      	movs	r6, #0
    5f54:	f885 675c 	strb.w	r6, [r5, #1884]	; 0x75c
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5f58:	2c00      	cmp	r4, #0
    5f5a:	d07e      	beq.n	605a <explosion(LEDStruct&)+0x11e>
    5f5c:	f8df 9190 	ldr.w	r9, [pc, #400]	; 60f0 <explosion(LEDStruct&)+0x1b4>
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    5f60:	f04f 08ff 	mov.w	r8, #255	; 0xff
    5f64:	e03b      	b.n	5fde <explosion(LEDStruct&)+0xa2>
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    5f66:	f8d4 1360 	ldr.w	r1, [r4, #864]	; 0x360
    5f6a:	4650      	mov	r0, sl
    5f6c:	f008 ffe0 	bl	ef30 <__addsf3>
    5f70:	4607      	mov	r7, r0
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    5f72:	2100      	movs	r1, #0
    5f74:	4638      	mov	r0, r7
    5f76:	f009 fa81 	bl	f47c <__aeabi_fcmplt>
    5f7a:	4958      	ldr	r1, [pc, #352]	; (60dc <explosion(LEDStruct&)+0x1a0>)
    5f7c:	2800      	cmp	r0, #0
    5f7e:	d168      	bne.n	6052 <explosion(LEDStruct&)+0x116>
    5f80:	4638      	mov	r0, r7
    5f82:	f009 fa99 	bl	f4b8 <__aeabi_fcmpgt>
    5f86:	b100      	cbz	r0, 5f8a <explosion(LEDStruct&)+0x4e>
    5f88:	4f54      	ldr	r7, [pc, #336]	; (60dc <explosion(LEDStruct&)+0x1a0>)
    5f8a:	f8c4 7360 	str.w	r7, [r4, #864]	; 0x360
		leds.spark_vel[x] *= gravity;
    5f8e:	4651      	mov	r1, sl
    5f90:	f8d9 0000 	ldr.w	r0, [r9]
    5f94:	f009 f8d4 	bl	f140 <__aeabi_fmul>
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5f98:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
    5f9c:	f8c4 0450 	str.w	r0, [r4, #1104]	; 0x450
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
    5fa0:	f8d4 057c 	ldr.w	r0, [r4, #1404]	; 0x57c
    5fa4:	f009 f8cc 	bl	f140 <__aeabi_fmul>
    5fa8:	4601      	mov	r1, r0
    5faa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    5fae:	f008 ffbd 	bl	ef2c <__aeabi_fsub>
    5fb2:	f8d4 166c 	ldr.w	r1, [r4, #1644]	; 0x66c
    5fb6:	f009 f8c3 	bl	f140 <__aeabi_fmul>
    5fba:	f8c4 066c 	str.w	r0, [r4, #1644]	; 0x66c
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5fbe:	f009 faab 	bl	f518 <__aeabi_f2uiz>
    5fc2:	f895 375c 	ldrb.w	r3, [r5, #1884]	; 0x75c
    5fc6:	b2c0      	uxtb	r0, r0
    5fc8:	4283      	cmp	r3, r0
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5fca:	f106 0601 	add.w	r6, r6, #1
    5fce:	f895 335d 	ldrb.w	r3, [r5, #861]	; 0x35d
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
    5fd2:	bf38      	it	cc
    5fd4:	f885 075c 	strbcc.w	r0, [r5, #1884]	; 0x75c
}

void explosion(LEDStruct& leds) {
	fadeToBlackBy(leds.led_data, NUM_LEDS, firework_bg_fade);
	leds.brightest_spark = 0;
	for (uint8_t x = 0; x < leds.number_of_sparks; x++) {
    5fd8:	b2f6      	uxtb	r6, r6
    5fda:	42b3      	cmp	r3, r6
    5fdc:	d93b      	bls.n	6056 <explosion(LEDStruct&)+0x11a>
    5fde:	eb05 0486 	add.w	r4, r5, r6, lsl #2
		leds.led_data[(int)leds.spark_pos[x]] += CHSV(leds.firework_hue, 255, (uint8_t)leds.spark_bri[x]);
    5fe2:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    5fe6:	f009 fa71 	bl	f4cc <__aeabi_f2iz>
    5fea:	4607      	mov	r7, r0
    5fec:	f8d4 066c 	ldr.w	r0, [r4, #1644]	; 0x66c
    5ff0:	f009 fa92 	bl	f518 <__aeabi_f2uiz>
    5ff4:	f895 3352 	ldrb.w	r3, [r5, #850]	; 0x352
    5ff8:	f88d 0002 	strb.w	r0, [sp, #2]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    5ffc:	a901      	add	r1, sp, #4
    5ffe:	4668      	mov	r0, sp
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    6000:	f88d 3000 	strb.w	r3, [sp]
    6004:	f88d 8001 	strb.w	r8, [sp, #1]
    }

    /// allow construction from HSV color
	inline CRGB(const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    6008:	f006 f83e 	bl	c088 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    600c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    6010:	1829      	adds	r1, r5, r0
    6012:	5c2b      	ldrb	r3, [r5, r0]
    6014:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6018:	fa83 f352 	uqadd8	r3, r3, r2


    /// add one RGB to another, saturating at 0xFF for each channel
    inline CRGB& operator+= (const CRGB& rhs )
    {
        r = qadd8( r, rhs.r);
    601c:	542b      	strb	r3, [r5, r0]
    601e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    6022:	784a      	ldrb	r2, [r1, #1]
    6024:	fa82 f253 	uqadd8	r2, r2, r3
        g = qadd8( g, rhs.g);
    6028:	704a      	strb	r2, [r1, #1]
    602a:	788b      	ldrb	r3, [r1, #2]
    602c:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6030:	fa83 f352 	uqadd8	r3, r3, r2

		if (leds.spark_dir[x]) { leds.spark_pos[x] += leds.spark_vel[x]; }
    6034:	19aa      	adds	r2, r5, r6
        b = qadd8( b, rhs.b);
    6036:	708b      	strb	r3, [r1, #2]
    6038:	f892 3540 	ldrb.w	r3, [r2, #1344]	; 0x540
    603c:	f8d4 a450 	ldr.w	sl, [r4, #1104]	; 0x450
    6040:	2b00      	cmp	r3, #0
    6042:	d190      	bne.n	5f66 <explosion(LEDStruct&)+0x2a>
		else { leds.spark_pos[x] -= leds.spark_vel[x]; }
    6044:	f8d4 0360 	ldr.w	r0, [r4, #864]	; 0x360
    6048:	4651      	mov	r1, sl
    604a:	f008 ff6f 	bl	ef2c <__aeabi_fsub>
    604e:	4607      	mov	r7, r0
    6050:	e78f      	b.n	5f72 <explosion(LEDStruct&)+0x36>

		leds.spark_pos[x] = constrain(leds.spark_pos[x], 0.0, (float)(ONE_SIDE - 1));
    6052:	2700      	movs	r7, #0
    6054:	e799      	b.n	5f8a <explosion(LEDStruct&)+0x4e>
    6056:	f895 475c 	ldrb.w	r4, [r5, #1884]	; 0x75c
    605a:	462a      	mov	r2, r5
    605c:	f105 00e1 	add.w	r0, r5, #225	; 0xe1
    6060:	462b      	mov	r3, r5
    }

    /// allow assignment from one RGB struct to another
	inline CRGB& operator= (const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    6062:	7819      	ldrb	r1, [r3, #0]
    6064:	f882 11bf 	strb.w	r1, [r2, #447]	; 0x1bf
        g = rhs.g;
    6068:	7859      	ldrb	r1, [r3, #1]
    606a:	f882 11c0 	strb.w	r1, [r2, #448]	; 0x1c0
        b = rhs.b;
    606e:	7899      	ldrb	r1, [r3, #2]
    6070:	f882 11c1 	strb.w	r1, [r2, #449]	; 0x1c1
    6074:	3303      	adds	r3, #3
    6076:	4283      	cmp	r3, r0
    6078:	f1a2 0203 	sub.w	r2, r2, #3
    607c:	d1f1      	bne.n	6062 <explosion(LEDStruct&)+0x126>
		leds.spark_vel[x] *= gravity;
		leds.spark_bri[x] *= (1 - (leds.spark_fade[x] / 256));
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
    607e:	bb44      	cbnz	r4, 60d2 <explosion(LEDStruct&)+0x196>
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    6080:	aa01      	add	r2, sp, #4
    6082:	2196      	movs	r1, #150	; 0x96
    6084:	4628      	mov	r0, r5
    {
    }

    /// allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    6086:	f88d 4004 	strb.w	r4, [sp, #4]
    608a:	f88d 4005 	strb.w	r4, [sp, #5]
    608e:	f88d 4006 	strb.w	r4, [sp, #6]
    6092:	f005 fcd9 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
}

/// Generate a 16 bit random number
LIB8STATIC uint16_t random16()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6096:	4812      	ldr	r0, [pc, #72]	; (60e0 <explosion(LEDStruct&)+0x1a4>)
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6098:	4c12      	ldr	r4, [pc, #72]	; (60e4 <explosion(LEDStruct&)+0x1a8>)
    609a:	8803      	ldrh	r3, [r0, #0]
    609c:	6824      	ldr	r4, [r4, #0]
		leds.current_stage = WAITING;
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    609e:	4912      	ldr	r1, [pc, #72]	; (60e8 <explosion(LEDStruct&)+0x1ac>)
    60a0:	4a12      	ldr	r2, [pc, #72]	; (60ec <explosion(LEDStruct&)+0x1b0>)
    60a2:	9401      	str	r4, [sp, #4]
    60a4:	eb03 2443 	add.w	r4, r3, r3, lsl #9
    60a8:	8809      	ldrh	r1, [r1, #0]
    60aa:	8812      	ldrh	r2, [r2, #0]
    60ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    60b0:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    60b4:	440a      	add	r2, r1
    60b6:	3319      	adds	r3, #25
    60b8:	b29b      	uxth	r3, r3
    60ba:	b292      	uxth	r2, r2
	return ret;
    60bc:	9901      	ldr	r1, [sp, #4]
    60be:	8003      	strh	r3, [r0, #0]
    60c0:	fb03 f302 	mul.w	r3, r3, r2
    60c4:	eb01 4313 	add.w	r3, r1, r3, lsr #16
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    60c8:	2202      	movs	r2, #2
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
    60ca:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
		if ((uint8_t)leds.spark_bri[x] > leds.brightest_spark) { leds.brightest_spark = (uint8_t)leds.spark_bri[x]; }
	}
	strip_sync(leds);
	if (leds.brightest_spark == 0 ) {
		fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
		leds.current_stage = WAITING;
    60ce:	f885 2354 	strb.w	r2, [r5, #852]	; 0x354
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}
    60d2:	b002      	add	sp, #8
    60d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60d8:	1fff8748 	.word	0x1fff8748
    60dc:	42940000 	.word	0x42940000
    60e0:	1fff8784 	.word	0x1fff8784
    60e4:	1fffb1a0 	.word	0x1fffb1a0
    60e8:	1fff874e 	.word	0x1fff874e
    60ec:	1fff874a 	.word	0x1fff874a
    60f0:	1fff8754 	.word	0x1fff8754

000060f4 <fireworks_render(LEDStruct&)>:


void fireworks_render(LEDStruct& leds) {
    60f4:	b510      	push	{r4, lr}
	switch (leds.current_stage) {
    60f6:	f890 3354 	ldrb.w	r3, [r0, #852]	; 0x354
    60fa:	2b01      	cmp	r3, #1
		leds.next_explosion_time = millis() + random16(min_wait + max_wait);
	}
}


void fireworks_render(LEDStruct& leds) {
    60fc:	b082      	sub	sp, #8
	switch (leds.current_stage) {
    60fe:	d01c      	beq.n	613a <fireworks_render(LEDStruct&)+0x46>
    6100:	d317      	bcc.n	6132 <fireworks_render(LEDStruct&)+0x3e>
    6102:	2b02      	cmp	r3, #2
    6104:	d113      	bne.n	612e <fireworks_render(LEDStruct&)+0x3a>
    6106:	2300      	movs	r3, #0
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
    6108:	aa01      	add	r2, sp, #4
    610a:	2196      	movs	r1, #150	; 0x96
    610c:	4604      	mov	r4, r0
    610e:	f88d 3004 	strb.w	r3, [sp, #4]
    6112:	f88d 3005 	strb.w	r3, [sp, #5]
    6116:	f88d 3006 	strb.w	r3, [sp, #6]
    611a:	f005 fc95 	bl	ba48 <fill_solid(CRGB*, int, CRGB const&)>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    611e:	4a0b      	ldr	r2, [pc, #44]	; (614c <fireworks_render(LEDStruct&)+0x58>)
			if (millis() >= leds.next_explosion_time) {
    6120:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    6124:	6812      	ldr	r2, [r2, #0]
    6126:	9201      	str	r2, [sp, #4]
	return ret;
    6128:	9a01      	ldr	r2, [sp, #4]
    612a:	429a      	cmp	r2, r3
    612c:	d209      	bcs.n	6142 <fireworks_render(LEDStruct&)+0x4e>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    612e:	b002      	add	sp, #8
    6130:	bd10      	pop	{r4, pc}
				prepare_for_explosion(leds);
			}
			break;

		case FADEUP:
			fadeup(leds);
    6132:	f7ff fe33 	bl	5d9c <fadeup(LEDStruct&)>

		case EXPLOSION:
			explosion(leds);
			break;
	}
}
    6136:	b002      	add	sp, #8
    6138:	bd10      	pop	{r4, pc}
		case FADEUP:
			fadeup(leds);
			break;

		case EXPLOSION:
			explosion(leds);
    613a:	f7ff feff 	bl	5f3c <explosion(LEDStruct&)>
			break;
	}
}
    613e:	b002      	add	sp, #8
    6140:	bd10      	pop	{r4, pc}
void fireworks_render(LEDStruct& leds) {
	switch (leds.current_stage) {
		case WAITING:
			fill_solid(leds.led_data, NUM_LEDS, CRGB::Black);
			if (millis() >= leds.next_explosion_time) {
				prepare_for_explosion(leds);
    6142:	4620      	mov	r0, r4
    6144:	f7ff fdee 	bl	5d24 <prepare_for_explosion(LEDStruct&)>
    6148:	e7f1      	b.n	612e <fireworks_render(LEDStruct&)+0x3a>
    614a:	bf00      	nop
    614c:	1fffb1a0 	.word	0x1fffb1a0

00006150 <fireworks(LEDStruct&)>:
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    6150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!leds.mode_initialized) { fireworks_init(leds); }
    6152:	f890 322e 	ldrb.w	r3, [r0, #558]	; 0x22e
			explosion(leds);
			break;
	}
}

void fireworks(LEDStruct& leds) {
    6156:	4604      	mov	r4, r0
	if (!leds.mode_initialized) { fireworks_init(leds); }
    6158:	b9fb      	cbnz	r3, 619a <fireworks(LEDStruct&)+0x4a>
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    615a:	493e      	ldr	r1, [pc, #248]	; (6254 <fireworks(LEDStruct&)+0x104>)
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
	leds.mode_type			= FIREWORKS;
	leds.use_palette		= 0;
    615c:	f880 322a 	strb.w	r3, [r0, #554]	; 0x22a
    6160:	880b      	ldrh	r3, [r1, #0]
    6162:	eb03 2243 	add.w	r2, r3, r3, lsl #9
    6166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    616a:	f503 5358 	add.w	r3, r3, #13824	; 0x3600
    616e:	3319      	adds	r3, #25
    6170:	b29b      	uxth	r3, r3
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    6172:	eb03 2213 	add.w	r2, r3, r3, lsr #8
/// Generate an 8-bit random number between 0 and lim
/// @param lim the upper bound for the result
LIB8STATIC uint8_t random8(uint8_t lim)
{
    uint8_t r = random8();
    r = (r*lim) >> 8;
    6176:	f3c2 12c0 	ubfx	r2, r2, #7, #1
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    617a:	2701      	movs	r7, #1
	leds.mode_type			= FIREWORKS;
    617c:	2618      	movs	r6, #24
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    617e:	250f      	movs	r5, #15

	leds.current_stage		= WAITING;
    6180:	2002      	movs	r0, #2
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    6182:	800b      	strh	r3, [r1, #0]

	leds.use_overlay		= uo;
    6184:	f884 21c7 	strb.w	r2, [r4, #455]	; 0x1c7
#ifndef FIREWORKS_H
#define FIREWORKS_H

void fireworks_init(LEDStruct& leds, bool uo = random8(2)) {
	leds.mode_initialized	= 1;
    6188:	f884 722e 	strb.w	r7, [r4, #558]	; 0x22e
	leds.mode_type			= FIREWORKS;
    618c:	f884 622d 	strb.w	r6, [r4, #557]	; 0x22d
	leds.use_palette		= 0;
	leds.delay_time			= 15;
    6190:	f884 51c3 	strb.w	r5, [r4, #451]	; 0x1c3

	leds.current_stage		= WAITING;
    6194:	f884 0354 	strb.w	r0, [r4, #852]	; 0x354

	leds.use_overlay		= uo;
	if (leds.use_overlay) { next_over_leds.current_stage = WAITING; } 
    6198:	b972      	cbnz	r2, 61b8 <fireworks(LEDStruct&)+0x68>
	}
}

void fireworks(LEDStruct& leds) {
	if (!leds.mode_initialized) { fireworks_init(leds); }
	if (keyboard_update) { fireworks_update(leds); }
    619a:	4b2f      	ldr	r3, [pc, #188]	; (6258 <fireworks(LEDStr